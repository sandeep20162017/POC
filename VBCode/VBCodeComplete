Forms :
frmAddMBMaterials.frx :
VERSION 5.00
Object = "{0D452EE1-E08F-101A-852E-02608C4D0BB4}#2.0#0"; "FM20.DLL"
Object = "{CDE57A40-8B86-11D0-B3C6-00A0C90AEA82}#1.0#0"; "msdatgrd.ocx"
Begin VB.Form frmAddMBMaterials 
   BorderStyle     =   1  'Fixed Single
   Caption         =   " Make Vs. Buy Materials List"
   ClientHeight    =   10170
   ClientLeft      =   45
   ClientTop       =   330
   ClientWidth     =   9825
   Icon            =   "frmAddMBMaterials.frx":0000
   LinkTopic       =   "Form1"
   MDIChild        =   -1  'True
   ScaleHeight     =   10170
   ScaleWidth      =   9825
   Begin VB.Frame frameFindPart 
      Caption         =   "Find Part"
      Height          =   1455
      Left            =   120
      TabIndex        =   16
      Top             =   8640
      Width           =   5295
      Begin VB.CommandButton cmdFindNext 
         Caption         =   "Find Next"
         Height          =   375
         Left            =   4080
         TabIndex        =   22
         Top             =   960
         Width           =   1095
      End
      Begin VB.TextBox txtKeyToSearch 
         Height          =   330
         Left            =   2160
         TabIndex        =   21
         Top             =   480
         Width           =   3015
      End
      Begin VB.OptionButton optNSCPart 
         Caption         =   "Non-Stock Coded Part"
         Height          =   255
         Left            =   120
         TabIndex        =   19
         Top             =   960
         Width           =   2055
      End
      Begin VB.OptionButton optSCPart 
         Caption         =   "Stock Coded Part"
         Height          =   255
         Left            =   120
         TabIndex        =   18
         Top             =   600
         Width           =   1695
      End
      Begin VB.OptionButton optRBPart 
         Caption         =   "Rebuilt Part"
         Height          =   255
         Left            =   120
         TabIndex        =   17
         Top             =   240
         Value           =   -1  'True
         Width           =   1335
      End
      Begin VB.Label lblKeyToSearch 
         Caption         =   "Rebuilt Number:"
         Height          =   255
         Left            =   2160
         TabIndex        =   20
         Top             =   240
         Width           =   1575
      End
   End
   Begin MSDataGridLib.DataGrid grdRebuiltPartList 
      Height          =   2235
      Left            =   120
      TabIndex        =   2
      Top             =   1320
      Width           =   9540
      _ExtentX        =   16828
      _ExtentY        =   3942
      _Version        =   393216
      BackColor       =   12648447
      ForeColor       =   16711680
      HeadLines       =   1
      RowHeight       =   15
      BeginProperty HeadFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Caption         =   "REBUILT PARTS LIST"
      ColumnCount     =   2
      BeginProperty Column00 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      BeginProperty Column01 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      SplitCount      =   1
      BeginProperty Split0 
         BeginProperty Column00 
         EndProperty
         BeginProperty Column01 
         EndProperty
      EndProperty
   End
   Begin VB.CommandButton cmdAddPart 
      Caption         =   "Add Part"
      Height          =   360
      Left            =   4260
      TabIndex        =   1
      Top             =   720
      Width           =   1215
   End
   Begin MSDataGridLib.DataGrid grdStockCodedPartsList 
      Height          =   2355
      Left            =   120
      TabIndex        =   3
      Top             =   3720
      Width           =   9540
      _ExtentX        =   16828
      _ExtentY        =   4154
      _Version        =   393216
      BackColor       =   12648447
      ForeColor       =   16711680
      HeadLines       =   1
      RowHeight       =   15
      BeginProperty HeadFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Caption         =   "STOCK CODED PARTS LIST"
      ColumnCount     =   2
      BeginProperty Column00 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      BeginProperty Column01 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      SplitCount      =   1
      BeginProperty Split0 
         BeginProperty Column00 
            ColumnWidth     =   2160
         EndProperty
         BeginProperty Column01 
            ColumnWidth     =   2160
         EndProperty
      EndProperty
   End
   Begin MSDataGridLib.DataGrid grdNonStockCodedPartsList 
      Height          =   2295
      Left            =   120
      TabIndex        =   4
      Top             =   6240
      Width           =   9540
      _ExtentX        =   16828
      _ExtentY        =   4048
      _Version        =   393216
      BackColor       =   12648447
      ForeColor       =   16711680
      HeadLines       =   1
      RowHeight       =   15
      BeginProperty HeadFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Caption         =   "NON-STOCK CODED PARTS LIST"
      ColumnCount     =   2
      BeginProperty Column00 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      BeginProperty Column01 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      SplitCount      =   1
      BeginProperty Split0 
         BeginProperty Column00 
            ColumnWidth     =   2160
         EndProperty
         BeginProperty Column01 
            ColumnWidth     =   2160
         EndProperty
      EndProperty
   End
   Begin MSForms.TextBox txtCoreCostTotal 
      Height          =   300
      Left            =   8385
      TabIndex        =   15
      Top             =   9540
      Width           =   1215
      VariousPropertyBits=   746604569
      Size            =   "2143;529"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
   Begin VB.Label lblCoreCostTotal 
      Caption         =   "Core Cost Total"
      Height          =   255
      Left            =   6225
      TabIndex        =   14
      Top             =   9585
      Width           =   1410
   End
   Begin MSForms.TextBox txtRebuiltPartsTotal 
      Height          =   300
      Left            =   8385
      TabIndex        =   5
      Top             =   8640
      Width           =   1215
      VariousPropertyBits=   746604569
      Size            =   "2143;529"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
   Begin MSForms.TextBox txtStockCodedPartsTotal 
      Height          =   300
      Left            =   8385
      TabIndex        =   6
      Top             =   8940
      Width           =   1215
      VariousPropertyBits=   746604569
      Size            =   "2143;529"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
   Begin MSForms.TextBox txtNonStockCodedPartsTotal 
      Height          =   300
      Left            =   8385
      TabIndex        =   7
      Top             =   9240
      Width           =   1215
      VariousPropertyBits=   746604569
      Size            =   "2143;529"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
   Begin MSForms.TextBox txtTotalMaterialsCost 
      Height          =   300
      Left            =   8385
      TabIndex        =   8
      Top             =   9840
      Width           =   1215
      VariousPropertyBits=   746604569
      BackColor       =   -2147483624
      Size            =   "2143;529"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
   Begin MSForms.TextBox txtMBNumber 
      Height          =   300
      Left            =   4260
      TabIndex        =   0
      Top             =   375
      Width           =   1215
      VariousPropertyBits=   746604569
      Size            =   "2143;529"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   3
   End
   Begin VB.Label lblStockCodedPartsTotal 
      Caption         =   "Stock Coded Parts Total"
      Height          =   195
      Left            =   6225
      TabIndex        =   13
      Top             =   8955
      Width           =   1815
   End
   Begin VB.Label lblNonStockCodedPartsTotal 
      Caption         =   "Non-Stock Coded Parts Total"
      Height          =   195
      Left            =   6225
      TabIndex        =   12
      Top             =   9255
      Width           =   2100
   End
   Begin VB.Label lblTotalMaterialsCost 
      Caption         =   "Total Material Cost"
      Height          =   195
      Left            =   6225
      TabIndex        =   11
      Top             =   9885
      Width           =   1455
   End
   Begin VB.Label lblRebuiltPartsTotal 
      Caption         =   "Rebuilt Parts Total"
      Height          =   195
      Left            =   6240
      TabIndex        =   10
      Top             =   8655
      Width           =   1380
   End
   Begin VB.Label lblMaterialListings 
      Caption         =   " Make Vs. Buy Materials List"
      BeginProperty Font 
         Name            =   "Arial"
         Size            =   13.5
         Charset         =   204
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   360
      Left            =   2940
      TabIndex        =   9
      Top             =   45
      Width           =   3885
   End
End
Attribute VB_Name = "frmAddMBMaterials"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
'=================================================================
'frmAddMBMaterials.frm
'
'Adds a stock coded and non stock coded parts to a selected MB estinate.
'Totals the materials together and sums the cost.
'=================================================================

Option Explicit

Private m_str_Msg As String

'Holds the make/buy number
Private m_str_MBNumber As String

' Holds the previous search string
Private m_str_PreviousSearch As String
Private m_str_PreviousSearchType As String
Private m_var_RowSelected As Variant

Public Sub PassValues(str_MBNumber As String)
    On Error GoTo Error_Handler

    m_str_MBNumber = str_MBNumber
    Call Populate
    Call UserPermissions
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PassValues", g_l_ErrorLineNumber
End Sub

Private Sub cmdAddPart_Click()
    On Error GoTo Error_Handler
   
    Load frmTypeOfPart
    frmTypeOfPart.m_str_FormType = "MakeBuy"
    frmTypeOfPart.m_str_LinkNumber = m_str_MBNumber
    frmTypeOfPart.m_str_AuditReference = Trim(txtMBNumber)
    frmTypeOfPart.Show vbModal
    Call frmMakeBuyEstimate.RefreshForm

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdAddPart_Click", g_l_ErrorLineNumber
End Sub

Private Sub InitColumns()
    On Error GoTo Error_Handler
    
    If grdNonStockCodedPartsList.Columns.Count > 2 Then
        With grdNonStockCodedPartsList
            .Columns("SUPPLIER NUMBER").Width = 1900
            .Columns("SUPPLIER NAME").Width = 1700
            .Columns("CC").Width = 500
            .Columns("QTY").Alignment = dbgRight
            .Columns("QTY").Width = 500
            .Columns("%").Alignment = dbgRight
            .Columns("%").Width = 500
            .Columns("UNIT COST").Alignment = dbgRight
            .Columns("UNIT COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("UNIT COST").Width = 1200
            .Columns("CORE COST").Alignment = dbgRight
            .Columns("CORE COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("CORE COST").Width = 1200
            .Columns("TOTAL COST").Alignment = dbgRight
            .Columns("TOTAL COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("TOTAL COST").Width = 1200
            .Columns("DESCRIPTION").Width = 4000
            .Columns("LAST MODIFIED DATE").Alignment = dbgRight
            .Columns("LAST MODIFIED DATE").Width = 2400
            .Columns("LAST MODIFIED DATE").NumberFormat = "yyyy-mmm-dd hh:mm:ss AMPM"
            .Columns("ID").Visible = False
            .Columns("ROWID").Visible = False
        End With
    End If
    
    If grdStockCodedPartsList.Columns.Count > 2 Then
        With grdStockCodedPartsList
            .Columns("UNIT COST").Alignment = dbgRight
            .Columns("UNIT COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("UNIT COST").Width = 1100
            .Columns("CC").Width = 500
            .Columns("QTY").Alignment = dbgRight
            .Columns("QTY").Width = 500
            .Columns("%").Alignment = dbgRight
            .Columns("%").Width = 500
            .Columns("CORE COST").Alignment = dbgRight
            .Columns("CORE COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("CORE COST").Width = 1200
            .Columns("TOTAL COST").Alignment = dbgRight
            .Columns("TOTAL COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("TOTAL COST").Width = 1200
            .Columns("DESCRIPTION").Width = 4000
            .Columns("DESCRIPTION").Caption = "DESCRIPTION"
            .Columns("OEM COST").Visible = False
            .Columns("MMS REBUILT CODE").Visible = False
            .Columns("REBUILT PART COST").Visible = False
            .Columns("REBUILT PART").Visible = False
            .Columns("ROWID").Visible = False
        End With
    End If
    
    If grdRebuiltPartList.Columns.Count > 2 Then
        With grdRebuiltPartList
            .Columns("UNIT COST").Alignment = dbgRight
            .Columns("UNIT COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("UNIT COST").Width = 1200
            '.Columns("CC").Width = 500
            .Columns("CC").Visible = False
            .Columns("QTY").Alignment = dbgRight
            .Columns("QTY").Width = 500
            .Columns("%").Alignment = dbgRight
            .Columns("%").Width = 500
            '.Columns("CORE COST").Alignment = dbgRight
            '.Columns("CORE COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            '.Columns("CORE COST").Width = 1200
            .Columns("CORE COST").Visible = False
            .Columns("TOTAL COST").Alignment = dbgRight
            .Columns("TOTAL COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("TOTAL COST").Width = 1200
            .Columns("DESCRIPTION").Width = 4000
            .Columns("ROWID").Visible = False
        End With
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "InitColumns", g_l_ErrorLineNumber
End Sub

Public Sub Populate()
    On Error GoTo Error_Handler
    
    txtMBNumber.Text = m_str_MBNumber
    Call PopulatePage
    Call InitColumns

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Populate", g_l_ErrorLineNumber
End Sub

Private Sub PopulatePage()
    Dim RS As ADODB.Recordset
'    Dim curr_RBCoreCostTotal As Currency
    Dim curr_SCPCoreCostTotal As Currency
    Dim curr_NSPCoreCostTotal As Currency
    Dim curr_CoreCostTotal As Currency
        
    On Error GoTo Error_Handler
        
    Set RS = New ADODB.Recordset
    
    'Populate the non-stock coded items
    Set RS = modDBHelper.RetrieveNSCPUsed("CES_INQUIRY.RETRIEVE_NSCP_USED", _
                                          m_str_MBNumber, _
                                          "MB")
    If RS.RecordCount > 0 Then
        Set grdNonStockCodedPartsList.DataSource = RS
        curr_NSPCoreCostTotal = Format(ColumnTotals(RS, "core cost"), "currency")
    
        RS.MoveFirst
        txtNonStockCodedPartsTotal.Text = Format(ColumnTotals(RS, "total cost"), "currency")
    Else
        curr_NSPCoreCostTotal = Format(0#, "currency")
        txtNonStockCodedPartsTotal.Text = Format(0#, "currency")
        Set grdNonStockCodedPartsList.DataSource = Nothing
    End If
        
    'Populate the stock coded items
    Set RS = modDBHelper.RetrieveSCPUsed("CES_INQUIRY.RETRIEVE_SCP_USED", _
                                         m_str_MBNumber, _
                                         "N", _
                                         "MB")
    
    If RS.RecordCount > 0 Then
        Set grdStockCodedPartsList.DataSource = RS
        curr_SCPCoreCostTotal = Format( _
                                    ColumnTotals(RS, "core cost"), "currency")
        
        RS.MoveFirst
        txtStockCodedPartsTotal.Text = Format( _
                                    ColumnTotals(RS, "total cost"), "currency")
    Else
        curr_SCPCoreCostTotal = Format(0#, "currency")
        txtStockCodedPartsTotal.Text = Format(0#, "currency")
        Set grdStockCodedPartsList.DataSource = Nothing
    End If
    
    
    'Populate the rebuilt items
    Set RS = modDBHelper.RetrieveRBPUsed("CES_INQUIRY.RETRIEVE_RBP_USED", _
                                         m_str_MBNumber, _
                                         "MB")
    If RS.RecordCount > 0 Then
        Set grdRebuiltPartList.DataSource = RS
'        curr_RBCoreCostTotal = Format(ColumnTotals(RS, "core cost"), "currency")
        RS.MoveFirst
        txtRebuiltPartsTotal.Text = Format(ColumnTotals(RS, "total cost"), "currency")
    Else
'        curr_RBCoreCostTotal = Format(0#, "currency")
        txtRebuiltPartsTotal.Text = Format(0#, "currency")
        Set grdRebuiltPartList.DataSource = Nothing
    End If
        
'    curr_CoreCostTotal = curr_RBCoreCostTotal + curr_SCPCoreCostTotal + curr_NSPCoreCostTotal
    curr_CoreCostTotal = curr_SCPCoreCostTotal + curr_NSPCoreCostTotal
    'Calculate the materials total
    txtCoreCostTotal.Text = Format((curr_CoreCostTotal * -1), "currency")
    txtTotalMaterialsCost.Text = Format( _
                                CCur(txtRebuiltPartsTotal.Text) + _
                                CCur(txtNonStockCodedPartsTotal.Text) + _
                                CCur(txtStockCodedPartsTotal.Text) - curr_CoreCostTotal, "currency")
    
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    
    Exit Sub

Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulatePage", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub cmdFindNext_Click()
    Dim RS As ADODB.Recordset
    Dim SearchGrid As DataGrid
    Dim str_SearchField As String
    Dim l_Counter As Long
    
    On Error GoTo Error_Handler:
        
    ' Must enter a value to search
    If txtKeyToSearch.Text = "" Then
        MsgBox "Enter a part to find.", vbExclamation, "Cost Estimate System"
        Exit Sub
    End If
    
    ' Get the grid, seach filed and the record set used for searching
    Select Case SelectedOption()
        Case "RB"
            Set SearchGrid = grdRebuiltPartList
            str_SearchField = "[REBUILT NUMBER]"
        Case "SC"
            Set SearchGrid = grdStockCodedPartsList
            str_SearchField = "[STOCK CODE]"
        Case "NSC"
            Set SearchGrid = grdNonStockCodedPartsList
            str_SearchField = "[SUPPLIER NUMBER]"
    End Select
    
    If Not SearchGrid.DataSource Is Nothing Then
        Set RS = SearchGrid.DataSource
    Else
        MsgBox "No parts to find.", vbExclamation, "Cost Estimate System"
        Exit Sub
    End If
    
    ' If the grid has lost focus then start seach again
    If RS.AbsolutePage < 0 Then
        m_str_PreviousSearch = ""
        m_str_PreviousSearchType = ""
    End If
    
    ' Determine whether or not they are performing the same
    ' search again or starting a new search
    If m_str_PreviousSearch = txtKeyToSearch.Text And m_str_PreviousSearchType = SelectedOption() Then
        ' Continue Search
        If RS.RecordCount > 0 Then
            RS.AbsolutePosition = RS.Bookmark + 1
            RS.Find str_SearchField & " LIKE '%" & txtKeyToSearch.Text & "%'"
            If RS.EOF Then
                MsgBox "All matching parts have been found.", vbExclamation, "Cost Estimate System"
                m_str_PreviousSearch = ""
                m_str_PreviousSearchType = ""
            Else
                With SearchGrid
                    For l_Counter = .SelBookmarks.Count - 1 To 0 Step -1
                        .SelBookmarks.Remove l_Counter
                    Next
                    .SelBookmarks.Add .RowBookmark(.Row)
                End With
                m_str_PreviousSearch = txtKeyToSearch.Text
                m_str_PreviousSearchType = SelectedOption()
            End If
        Else
            MsgBox "No parts to find.", vbExclamation, "Cost Estimate System"
            m_str_PreviousSearch = txtKeyToSearch.Text
            m_str_PreviousSearchType = SelectedOption()
        End If
    Else
        ' Start New Search
        If RS.RecordCount > 0 Then
            RS.MoveFirst
            RS.Find str_SearchField & " LIKE '%" & txtKeyToSearch.Text & "%'"
            If RS.EOF Then
                RS.MoveFirst
                MsgBox "Part not found.", vbExclamation, "Cost Estimate System"
                With SearchGrid
                    For l_Counter = .SelBookmarks.Count - 1 To 0 Step -1
                        .SelBookmarks.Remove l_Counter
                    Next
                End With
                m_str_PreviousSearch = ""
                m_str_PreviousSearchType = ""
            Else
                With SearchGrid
                    For l_Counter = .SelBookmarks.Count - 1 To 0 Step -1
                        .SelBookmarks.Remove l_Counter
                    Next
                    .SelBookmarks.Add .RowBookmark(.Row)
                End With
                m_str_PreviousSearch = txtKeyToSearch.Text
                m_str_PreviousSearchType = SelectedOption()
            End If
        Else
            MsgBox "No parts to find.", vbExclamation, "Cost Estimate System"
            m_str_PreviousSearch = txtKeyToSearch.Text
            m_str_PreviousSearchType = SelectedOption()
        End If
    End If
            
    Set RS = Nothing
    Set SearchGrid = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdFindNext_Click", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    If Not SearchGrid Is Nothing Then
        Set SearchGrid = Nothing
    End If
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    Me.Height = 10575
    Me.Width = 9945
  
    Call SetDefaultCursor
  
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    Call SetDefaultCursor
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
End Sub

Private Sub UserPermissions()
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Then
        cmdAddPart.Visible = False
    ElseIf g_l_AccessLevel = 2 Then
        cmdAddPart.Visible = False
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "UserPermissions", g_l_ErrorLineNumber
End Sub

Private Sub grdNonStockCodedPartsList_DblClick()
    On Error GoTo Error_Handler
    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not allow user go further, just exit sub.
        Exit Sub
    End If
    
    'Update the non stock coded part
    If grdNonStockCodedPartsList.Row >= 0 Then
        m_var_RowSelected = grdNonStockCodedPartsList.Bookmark
        Dim formshow As New frmAddNSCPToEstimate
        formshow.m_str_LinkNumber = m_str_MBNumber
        formshow.Caption = "Edit a Non-Stock Coded Part in the Make Vs. Buy Estimate"
        formshow.m_str_TypeCode = "MB"
        formshow.m_str_AuditReference = m_str_MBNumber
        formshow.PassValues grdNonStockCodedPartsList.Columns("SUPPLIER NUMBER").Value, _
                            grdNonStockCodedPartsList.Columns("SUPPLIER NAME").Value, _
                            grdNonStockCodedPartsList.Columns("CC").Value, _
                            grdNonStockCodedPartsList.Columns("%").Value, _
                            grdNonStockCodedPartsList.Columns("QTY").Value, _
                            grdNonStockCodedPartsList.Columns("ROWID").Value, _
                            grdNonStockCodedPartsList.Columns("CORE COST").Value
        formshow.cboSupplierName.Enabled = False
        formshow.cmdAdd.Enabled = True
        formshow.Show vbModal
        Call frmMakeBuyEstimate.RefreshForm
        grdNonStockCodedPartsList.Bookmark = m_var_RowSelected
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdNonStockCodedPartsList_DblClick", g_l_ErrorLineNumber
End Sub

Private Sub grdRebuiltPartList_DblClick()
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not allow user go further, just exit sub.
        Exit Sub
    End If
    
    'Update the stock coded part
    If grdRebuiltPartList.Row >= 0 Then
        m_var_RowSelected = grdRebuiltPartList.Bookmark
        Dim formshow As New frmAddRBPToEstimate
        formshow.Caption = "Edit a Rebuilt Part in the Make Vs. Buy Estimate"
        formshow.m_str_TypeCode = "MB"
        formshow.m_str_LinkNumber = m_str_MBNumber
        formshow.m_str_AuditReference = m_str_MBNumber
        formshow.PassValues grdRebuiltPartList.Columns("REBUILT NUMBER").Value, _
                            grdRebuiltPartList.Columns("%").Value, _
                            grdRebuiltPartList.Columns("QTY").Value, _
                            grdRebuiltPartList.Columns("ROWID").Value
        formshow.Show vbModal
        Call frmMakeBuyEstimate.RefreshForm
        grdRebuiltPartList.Bookmark = m_var_RowSelected
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdRebuiltPartList_DblClick", g_l_ErrorLineNumber
End Sub

Private Sub grdStockCodedPartsList_DblClick()
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not allow user go further, just exit sub.
        Exit Sub
    End If
    
    'Update the stock coded part
    If grdStockCodedPartsList.Row >= 0 Then
        m_var_RowSelected = grdStockCodedPartsList.Bookmark
        Dim formshow As New frmAddSCPToEstimate
        formshow.Caption = "Edit a Stock Coded Part in the Make Vs. Buy Estimate"
        formshow.m_str_TypeCode = "MB"
        formshow.m_str_AuditReference = m_str_MBNumber
        formshow.m_var_RowID = grdStockCodedPartsList.Columns("ROWID").Value
        formshow.PassValues grdStockCodedPartsList.Columns("STOCK CODE").Value, _
                            grdStockCodedPartsList.Columns("CC").Value, _
                            grdStockCodedPartsList.Columns("%").Value, _
                            grdStockCodedPartsList.Columns("QTY").Value, _
                            grdStockCodedPartsList.Columns("ROWID").Value, _
                            grdStockCodedPartsList.Columns("CORE COST").Value
        formshow.Show vbModal
        Call frmMakeBuyEstimate.RefreshForm
        grdStockCodedPartsList.Bookmark = m_var_RowSelected
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdStockCodedPartsList_DblClick", g_l_ErrorLineNumber
End Sub

Private Sub grdNonStockCodedPartsList_KeyDown(KeyCode As Integer, Shift As Integer)
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_PartID As String
    
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not allow user go further, just exit sub.
        Exit Sub
    End If
    
    If KeyCode = vbKeyDelete And grdNonStockCodedPartsList.Columns.Count > 2 Then
        m_str_Msg = "Are you sure you want to delete this item?"
        l_Result = MsgBox(m_str_Msg, vbOKCancel Or vbQuestion, _
                          "Add Materials To Make Vs. Buy")
        If l_Result = vbOK Then
            str_PartID = grdNonStockCodedPartsList.Columns("ROWID").Text
            l_Result = modDBHelper.DeleteNSCPUsed("CES_DELETE.DELETE_NSCP_USED", _
                                                  l_RetVal, _
                                                  str_PartID)
            'Insert record into the AUDIT_MODIFY_HISTORY table.
            l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                    "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                    l_RetVal, _
                    "Delete Non-Stock Coded Part", _
                    txtMBNumber.Text, _
                    "MB", _
                    "SUPPLIER NUMBER ---> " + grdNonStockCodedPartsList.Columns("SUPPLIER NUMBER").Text, _
                    "SUPPLIER NAME ---> " + grdNonStockCodedPartsList.Columns("SUPPLIER NAME").Text, _
                    "CC ---> " + grdNonStockCodedPartsList.Columns("CC").Text, _
                    "QTY ---> " + grdNonStockCodedPartsList.Columns("QTY").Text, _
                    "% ---> " + grdNonStockCodedPartsList.Columns("%").Text, _
                    "UNIT COST ---> " + grdNonStockCodedPartsList.Columns("UNIT COST").Text, _
                    "CORE COST ---> " + grdNonStockCodedPartsList.Columns("CORE COST").Text, _
                    "TOTAL COST ---> " + grdNonStockCodedPartsList.Columns("TOTAL COST").Text, _
                    "DESCRIPTION ---> " + grdNonStockCodedPartsList.Columns("DESCRIPTION").Text, _
                    "KEYWORD ---> " + grdNonStockCodedPartsList.Columns("KEYWORD").Text, _
                    "LAST MODIFIED DATE ---> " + grdNonStockCodedPartsList.Columns("LAST MODIFIED DATE").Text)
            Call frmMakeBuyEstimate.RefreshForm
        End If
    End If
    
    Exit Sub
    
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdNonStockCodedPartsList_KeyDown", g_l_ErrorLineNumber
End Sub

Private Sub grdStockCodedPartsList_KeyDown(KeyCode As Integer, Shift As Integer)
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_PartID As String
    
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not allow user go further, just exit sub.
        Exit Sub
    End If
    
    If KeyCode = vbKeyDelete And grdStockCodedPartsList.Columns.Count > 2 Then
        m_str_Msg = "Are you sure you want to delete this item?"
        l_Result = MsgBox(m_str_Msg, vbOKCancel Or vbQuestion, _
                          "Add Materials To Make Vs. Buy")
        If l_Result = vbOK Then
            str_PartID = grdStockCodedPartsList.Columns("ROWID").Text
            l_Result = modDBHelper.DeleteSCPUsed("CES_DELETE.DELETE_SCP_USED", _
                                                 l_RetVal, _
                                                 str_PartID)
            'Insert record into the AUDIT_MODIFY_HISTORY table.
            l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                    "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                    l_RetVal, _
                    "Delete Stock Coded Part", _
                    txtMBNumber.Text, _
                    "MB", _
                    "STOCK CODE ---> " + grdStockCodedPartsList.Columns("STOCK CODE").Text, _
                    "UNIT COST ---> " + grdStockCodedPartsList.Columns("UNIT COST").Text, _
                    "CC ---> " + grdStockCodedPartsList.Columns("CC").Text, _
                    "QTY ---> " + grdStockCodedPartsList.Columns("QTY").Text, _
                    "% ---> " + grdStockCodedPartsList.Columns("%").Text, _
                    "CORE COST ---> " + grdStockCodedPartsList.Columns("CORE COST").Text, _
                    "TOTAL COST ---> " + grdStockCodedPartsList.Columns("TOTAL COST").Text, _
                    "DESCRIPTION ---> " + grdStockCodedPartsList.Columns("DESCRIPTION").Text, _
                    "KEYWORD ---> " + grdStockCodedPartsList.Columns("KEYWORD").Text)
            Call frmMakeBuyEstimate.RefreshForm
        End If
    End If
    
    Exit Sub
    
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdStockCodedPartsList_KeyDown", g_l_ErrorLineNumber
End Sub

Private Sub grdRebuiltPartList_KeyDown(KeyCode As Integer, Shift As Integer)
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_PartID As String
    
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not allow user go further, just exit sub.
        Exit Sub
    End If
    
    If KeyCode = vbKeyDelete And grdRebuiltPartList.Columns.Count > 2 Then
        m_str_Msg = "Are you sure you want to delete this item?"
        l_Result = MsgBox(m_str_Msg, vbOKCancel Or vbQuestion, _
                          "Add Materials To Make Vs. Buy")
        If l_Result = vbOK Then
            str_PartID = grdRebuiltPartList.Columns("ROWID").Text
            l_Result = modDBHelper.DeleteSCPUsed("CES_DELETE.DELETE_SCP_USED", _
                                                 l_RetVal, _
                                                 str_PartID)
            'Insert record into the AUDIT_MODIFY_HISTORY table.
            l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                    "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                    l_RetVal, _
                    "Delete Rebuilt Part", _
                    txtMBNumber.Text, _
                    "MB", _
                    "UNIT COST ---> " + grdRebuiltPartList.Columns("UNIT COST").Text, _
                    "REBUILT NUMBER ---> " + grdRebuiltPartList.Columns("REBUILT NUMBER").Text, _
                    "CC ---> " + grdRebuiltPartList.Columns("CC").Text, _
                    "QTY ---> " + grdRebuiltPartList.Columns("QTY").Text, _
                    "% ---> " + grdRebuiltPartList.Columns("%").Text, _
                    "TOTAL COST ---> " + grdRebuiltPartList.Columns("TOTAL COST").Text, _
                    "DESCRIPTION ---> " + grdRebuiltPartList.Columns("DESCRIPTION").Text, _
                    "KEYWORD ---> " + grdRebuiltPartList.Columns("KEYWORD").Text)
            Call frmMakeBuyEstimate.RefreshForm
        End If
    End If
    
    Exit Sub
    
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdRebuiltPartList_KeyDown", g_l_ErrorLineNumber
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor
    'Keep the form open until the Make Buy Estimate Closes
    If UnloadMode = 0 Then
        Cancel = True
        Me.Hide
    End If
    
    Exit Sub
    
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub optNSCPart_Click()
    On Error GoTo Error_Handler
    
    Call ChangeSearchLabel
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "optNSCPart_Click", g_l_ErrorLineNumber
End Sub

Private Sub optRBPart_Click()
    On Error GoTo Error_Handler
    
    Call ChangeSearchLabel
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "optRBPart_Click", g_l_ErrorLineNumber
End Sub

Private Sub optSCPart_Click()
    On Error GoTo Error_Handler
    
    Call ChangeSearchLabel
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "optSCPart_Click", g_l_ErrorLineNumber
End Sub

Private Sub ChangeSearchLabel()
    On Error GoTo Error_Handler:
    ' As the type to part to search by is changed, we must change
    ' the label to reflect this
    If optRBPart.Value = True Then
        lblKeyToSearch.Caption = "Rebuilt Number:"
    ElseIf optSCPart.Value = True Then
        lblKeyToSearch.Caption = "Stock Code:"
    ElseIf optNSCPart.Value = True Then
        lblKeyToSearch.Caption = "Supplier Number:"
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "ChangeSearchLabel", g_l_ErrorLineNumber
End Sub

Private Function SelectedOption()
    On Error GoTo Error_Handler:
    ' As the type to part to search by is changed, we must change
    ' the label to reflect this
    If optRBPart.Value = True Then
        SelectedOption = "RB"
    ElseIf optSCPart.Value = True Then
        SelectedOption = "SC"
    ElseIf optNSCPart.Value = True Then
        SelectedOption = "NSC"
    Else
        SelectedOption = ""
    End If
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "SelectedOption", g_l_ErrorLineNumber
End Function
frmAddNonStockCodedPart.frm :
VERSION 5.00
Object = "{F0D2F211-CCB0-11D0-A316-00AA00688B10}#1.0#0"; "msdatlst.ocx"
Begin VB.Form frmAddNonStockCodedPart 
   BorderStyle     =   1  'Fixed Single
   Caption         =   "Add Non-Stock Coded Part"
   ClientHeight    =   2385
   ClientLeft      =   45
   ClientTop       =   330
   ClientWidth     =   8985
   Icon            =   "frmAddNonStockCodedPart.frx":0000
   LinkTopic       =   "Form1"
   MaxButton       =   0   'False
   MinButton       =   0   'False
   ScaleHeight     =   2385
   ScaleWidth      =   8985
   StartUpPosition =   2  'CenterScreen
   Begin VB.Frame Frame1 
      Caption         =   "Add A Non-Stock Coded Part"
      Height          =   2175
      Left            =   120
      TabIndex        =   0
      Top             =   120
      Width           =   8775
      Begin VB.CommandButton cmdAdd 
         Caption         =   "Add"
         Default         =   -1  'True
         Height          =   345
         Left            =   3600
         TabIndex        =   6
         Top             =   1755
         Width           =   1590
      End
      Begin VB.TextBox txtPartUnitCost 
         Height          =   285
         Left            =   4575
         MaxLength       =   10
         TabIndex        =   5
         Top             =   1320
         Width           =   1230
      End
      Begin MSDataListLib.DataCombo cboSupplierName 
         Height          =   315
         Left            =   1245
         TabIndex        =   1
         Top             =   360
         Width           =   3015
         _ExtentX        =   5318
         _ExtentY        =   556
         _Version        =   393216
         Text            =   ""
      End
      Begin MSDataListLib.DataCombo cboKeyword 
         Height          =   315
         Left            =   1245
         TabIndex        =   3
         Top             =   810
         Width           =   3015
         _ExtentX        =   5318
         _ExtentY        =   556
         _Version        =   393216
         Text            =   ""
      End
      Begin MSDataListLib.DataCombo cboSupplierNumber 
         Height          =   315
         Left            =   5580
         TabIndex        =   2
         Top             =   360
         Width           =   2895
         _ExtentX        =   5106
         _ExtentY        =   556
         _Version        =   393216
         Text            =   ""
      End
      Begin MSDataListLib.DataCombo cboPartDescription 
         Height          =   315
         Left            =   5580
         TabIndex        =   4
         Top             =   840
         Width           =   2895
         _ExtentX        =   5106
         _ExtentY        =   556
         _Version        =   393216
         Text            =   ""
      End
      Begin VB.Label lblKeyword 
         BackColor       =   &H80000000&
         Caption         =   "Keyword:"
         Height          =   225
         Left            =   120
         TabIndex        =   11
         Top             =   885
         Width           =   765
      End
      Begin VB.Label lblSupplierNumber 
         BackColor       =   &H80000000&
         Caption         =   "Supplier Number:"
         Height          =   285
         Left            =   4305
         TabIndex        =   10
         Top             =   360
         Width           =   1320
      End
      Begin VB.Label lblPartDescription 
         BackColor       =   &H80000000&
         Caption         =   "Part Description:"
         Height          =   285
         Left            =   4320
         TabIndex        =   9
         Top             =   855
         Width           =   1200
      End
      Begin VB.Label lblPartUnitCost 
         BackColor       =   &H80000000&
         Caption         =   "Part Unit Cost ($/unit):"
         Height          =   240
         Left            =   2910
         TabIndex        =   8
         Top             =   1365
         Width           =   1665
      End
      Begin VB.Label lblSupplierName 
         BackColor       =   &H80000000&
         Caption         =   "Supplier Name:"
         Height          =   225
         Left            =   120
         TabIndex        =   7
         Top             =   420
         Width           =   1080
      End
   End
End
Attribute VB_Name = "frmAddNonStockCodedPart"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
'==============================================================
'frmAddNonStockCodedPart.FRM
'
'Adds a non stock coded part to the cost tracking system database.
'
'===============================================================
Option Explicit

Private m_str_Msg As String

'Holds the ROWID number of a part
Public m_var_RowID As Variant
Public m_l_ID As Long
Public m_str_SupplierNumber As String
Public m_str_SupplierName As String
Public m_str_PartDescription As String
Public m_str_PartUnitCost As String
Public m_str_Keyword As String
Public m_str_AuditReference As String
Public m_str_AuditReferenceType As String
Public m_b_FromSearchPart As Boolean

'The cmdAdd_Click button either Adds a new non-stock coded part into
'the cost estimate system or updates an existing non-stock coded part
Private Sub cmdAdd_Click()
          Dim l_Result As Long
          Dim l_RetVal As Long
          Dim str_PartUnitCost As String
          Dim cur_PartUnitCost As Currency
          Dim str_SupplierName As String
          Dim str_SupplierNumber As String
          Dim str_Keyword As String
          Dim str_PartDescription As String
          Dim str_RBNumberToPass As String
          Dim str_KitToPass As String
          Dim RS As ADODB.Recordset
          Dim l_count As Long
          Dim str_EstimationType As String
          Dim str_Temp As String
          
10        On Error GoTo Error_Handler
          
20        Call SetWaitCursor
          
          'Make sure that user choused something from the cboSupplierName combo-box.
30        str_SupplierName = Trim(cboSupplierName.Text)
40        If str_SupplierName = "" Then
50            Call SetDefaultCursor
60            m_str_Msg = "Please provide Supplier Name."
70            MsgBox m_str_Msg, vbOKOnly + vbInformation
80            cboSupplierName.SetFocus
90            Exit Sub
100       End If
          
          'Make sure that user choused something from the cboSupplierNumber combo-box.
110       str_SupplierNumber = Trim(cboSupplierNumber.Text)
120       If str_SupplierNumber = "" Then
130           Call SetDefaultCursor
140           m_str_Msg = "Please provide Supplier Number."
150           MsgBox m_str_Msg, vbOKOnly + vbInformation
160           cboSupplierNumber.SetFocus
170           Exit Sub
180       End If
          
          'Make sure that user choused something from the cboKeyword combo-box.
190       str_Keyword = Trim(cboKeyword.Text)
200       If str_Keyword = "" Then
210           Call SetDefaultCursor
220           m_str_Msg = "Please provide Keyword."
230           MsgBox m_str_Msg, vbOKOnly + vbInformation
240           cboKeyword.SetFocus
250           Exit Sub
260       End If
          
          'Make sure that user choused something from the cboPartDescription combo-box.
270       str_PartDescription = Trim(cboPartDescription.Text)
280       If str_PartDescription = "" Then
290           Call SetDefaultCursor
300           m_str_Msg = "Please provide Part Description."
310           MsgBox m_str_Msg, vbOKOnly + vbInformation
320           cboPartDescription.SetFocus
330           Exit Sub
340       End If
          
350       If Trim(txtPartUnitCost.Text) = "" Then
360           txtPartUnitCost.Text = "0"
370       End If

380       str_PartUnitCost = Trim(txtPartUnitCost.Text)
          
390       If IsNumeric(str_PartUnitCost) = False Then
400           Call SetDefaultCursor
410           m_str_Msg = "Part Unit Cost should be a number."
420           MsgBox m_str_Msg, vbOKOnly + vbInformation
430           txtPartUnitCost.SetFocus
440           Exit Sub
450       End If
          
          'Convert to proper format
460       cur_PartUnitCost = CCur(str_PartUnitCost)
470       str_PartUnitCost = CStr(CDbl(str_PartUnitCost))
         ' str_PartUnitCost = Replace(str_PartUnitCost, ".", ",")
          
480       If cmdAdd.Caption = "Add" Then
              'Make sure that data from the cboSupplierNumber and cboSupplierNumber
              'combo-boxes is not duplicated in the table NON_STOCK_CODED_PARTS table, fileds
              'ORIG_SUPPLIER_NUM and ORIG_SUPPLIER_NAME. Combination of these two fields in
              'the NON_STOCK_CODED_PARTS table should be unique.
490           Set RS = New ADODB.Recordset
500           Set RS = modDBHelper.SearchNSCPPartBy2Fields( _
                                  "CES_INQUIRY.SEARCH_NSCP_PART_BY_2_FIELDS", _
                                  UCase(str_SupplierNumber), _
                                  UCase(str_SupplierName))
510           If RS.RecordCount > 0 Then
520               Set RS = Nothing
530               Call SetDefaultCursor
540               m_str_Msg = "Supplier Number and Supplier Name already exists. Please provide another one."
550               MsgBox m_str_Msg, vbOKOnly + vbInformation
560               cboSupplierNumber.SetFocus
570               Exit Sub
580           End If
              
590           l_Result = modDBHelper.AddNSCP("CES_UPDATE.ADD_NSCP", _
                                             l_RetVal, _
                                             str_SupplierNumber, _
                                             str_SupplierName, _
                                             str_PartUnitCost, _
                                             str_PartDescription, _
                                             str_Keyword, _
                                             g_str_UserName)
          
600           If (l_Result > 0) Then
610               Call SetDefaultCursor
620               m_str_Msg = "Non-Stock Coded Part Has been added"
630               MsgBox m_str_Msg
640           Else
650               Set RS = Nothing
660               Call SetDefaultCursor
670               m_str_Msg = "There was an error adding Non-Stock Coded Part. "
680               m_str_Msg = m_str_Msg + "Please contact Administrator"
690               MsgBox m_str_Msg
700               Exit Sub
710           End If
              'Insert record into the AUDIT_MODIFY_HISTORY table.
720           str_Temp = "Non-Stock Coded Part Info was added to the System"
730           l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                  "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                  l_RetVal, _
                  str_Temp, _
                  CStr(l_Result), _
                  "NSCP", _
                  "Supplier Name ---> " + str_SupplierName, _
                  "Supplier Number ---> " + str_SupplierNumber, _
                  "Keyword ---> " + str_Keyword, _
                  "Part Description ---> " + str_PartDescription, _
                  "Part Unit Cost ($/unit) ---> " + str_PartUnitCost)
740       Else 'If cmdAdd.Caption = "Update" Then
750           l_Result = modDBHelper.UpdateNSCP("CES_UPDATE.UPDATE_NSCP", _
                                                l_RetVal, _
                                                str_SupplierNumber, _
                                                str_SupplierName, _
                                                str_PartUnitCost, _
                                                str_PartDescription, _
                                                str_Keyword, _
                                                g_str_UserName, _
                                                m_var_RowID)
          
760           If (l_Result > 0) Then
                  ' Must now propogate all changes of the non-stock coded part
                  ' to all of the estimates
770               l_Result = modDBHelper.PropagateNSCPChanges("CES_UPDATE.PROPAGATE_NSCP_CHANGES", _
                                                              l_RetVal, _
                                                              str_SupplierNumber, _
                                                              str_SupplierName, _
                                                              cur_PartUnitCost, _
                                                              m_l_ID)
                                                              
                  ' Must determine all OEM Kits affected by the propagation of the
                  ' non stock coded part
780               Set RS = modDBHelper.RetrieveKITToPropagateNSC("CES_INQUIRY.RETRIEVE_KIT_TO_PROPAGATE_NSC", m_l_ID)
                  
                  ' Propagate the changes to each of the OEM Kits
790               If RS.RecordCount > 0 Then
800                   RS.MoveFirst
810                   While Not RS.EOF
820                       str_KitToPass = RS.Fields.Item("part_number")
                          'PropagateOEMKitChanges str_KitToPass
830                       RS.MoveNext
840                   Wend
850               End If
                  
                  ' Must now determine all rebuilt parts affected by the propagation
                  ' of the non stock coded part
860               Set RS = modDBHelper.RetrieveRBPToPropagateNSC("CES_INQUIRY.RETRIEVE_RBP_TO_PROPAGATE_NSC", m_l_ID)
              
                  ' Propagate the changes to each of these rebuilt parts
870               If RS.RecordCount > 0 Then
880                   RS.MoveFirst
890                   While Not RS.EOF
900                       str_RBNumberToPass = RS.Fields.Item("mms_rebuilt_code")
                          'PropagateRebuiltPartChanges str_RBNumberToPass, False
910                       RS.MoveNext
920                   Wend
930               End If
                  
                  'In the SUB_KITS table update corresponded records.
940               l_Result = modDBHelper.UpdateSubKits1("CES_UPDATE.UPDATE_SUB_KITS1", _
                                                        l_RetVal, _
                                                        Trim(cboSupplierNumber.Text), _
                                                        Trim(cboSupplierName.Text), _
                                                        Trim(cboPartDescription.Text))
                  
950               If m_b_FromSearchPart = True Then
                      'Insert record into the AUDIT_MODIFY_HISTORY table.
960                   l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                          "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                          l_RetVal, _
                          "Non-Stock Coded Part Info was edited in the System from the Search Part screen", _
                          CStr(m_l_ID), _
                          "NSCP", _
                          "Supplier Name ---> " + str_SupplierName, _
                          "Supplier Number ---> " + str_SupplierNumber, _
                          "Keyword ---> " + str_Keyword, _
                          "Part Description ---> " + str_PartDescription, _
                          "Part Unit Cost ($/unit) ---> " + str_PartUnitCost)
970               Else
                      'Insert record into the AUDIT_MODIFY_HISTORY table.
980                   l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                          "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                          l_RetVal, _
                          "Non-Stock Coded Part Info was edited in the System from the " + Me.Caption + " screen", _
                          CStr(m_l_ID), _
                          "NSCP", _
                          "Supplier Name ---> " + str_SupplierName, _
                          "Supplier Number ---> " + str_SupplierNumber, _
                          "Keyword ---> " + str_Keyword, _
                          "Part Description ---> " + str_PartDescription, _
                          "Part Unit Cost ($/unit) ---> " + str_PartUnitCost)
990               End If
                  
                  'For the provided "Supplier Name" and "Supplier Number" find all records in
                  'the NSC_PARTS_USED table.
1000              Set RS = modDBHelper.GetNSCPartsUsedBySupplier( _
                                  "CES_INQUIRY.GET_NSC_PARTS_USED_BY_SUPPLIER", _
                                  str_SupplierNumber, str_SupplierName)
1010              If RS.RecordCount > 0 Then
1020                  str_Temp = "Indirect change. Non-Stock Coded Part Info " + CStr(m_l_ID) + " was changed"
1030                  RS.MoveFirst
1040                  For l_count = 0 To RS.RecordCount - 1
                          'Insert record into the AUDIT_MODIFY_HISTORY table.
1050                      l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                              "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                              l_RetVal, _
                              str_Temp, _
                              RS.Fields.Item("LINK CODE"), _
                              RS.Fields.Item("LINK TYPE"), _
                              "Supplier Name ---> " + str_SupplierName, _
                              "Supplier Number ---> " + str_SupplierNumber, _
                              "Keyword ---> " + str_Keyword, _
                              "Part Description ---> " + str_PartDescription, _
                              "Part Unit Cost ($/unit) ---> " + str_PartUnitCost)
1060                      RS.MoveNext
1070                  Next l_count
1080              End If
                  
1090              Call SetDefaultCursor
1100              MsgBox "Non-Stock Coded Part Has been updated."
1110          Else
1120              Call SetDefaultCursor
1130              MsgBox "Duplicate Part, please try re-entering Part."
1140          End If
1150      End If
          
1160      Set RS = Nothing
          
          'Update "Non_stock Coded Parts" grid on the frmSearchPart form.
1170      Call frmSearchPart.FillGrids
          
1180      Call SetDefaultCursor
          
1190      Exit Sub
Error_Handler:
1200      g_l_ErrorLineNumber = Erl()
1210      modDBHelper.LogErrorToDB Me.Name, "cmdAdd_Click", g_l_ErrorLineNumber
1220      Call SetDefaultCursor
1230      If Not RS Is Nothing Then
1240          Set RS = Nothing
1250      End If
End Sub

Private Sub Form_Load()
10        On Error GoTo Error_Handler
          
20        Call SetWaitCursor
30        Call ChangeCaptionIfNeeded
40        Call PopulateDropdowns
          
50        Call SetDefaultCursor
          
60        Exit Sub
Error_Handler:
70        g_l_ErrorLineNumber = Erl()
80        modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
90        Call SetDefaultCursor
End Sub

Private Sub PopulateDropdowns()
10        On Error GoTo Error_Handler
          
20        Set cboSupplierName.RowSource = modDBHelper.PopulateNSCComboBoxes( _
                                                  "CES_INQUIRY.POPULATE_NSC_COMBOXES", _
                                                  0)
30        cboSupplierName.ListField = "orig_supplier_name"
          'cboSupplierName.
40        Set cboSupplierNumber.RowSource = modDBHelper.PopulateNSCComboBoxes( _
                                                  "CES_INQUIRY.POPULATE_NSC_COMBOXES", _
                                                  1)
50        cboSupplierNumber.ListField = "orig_supplier_num"

60        Set cboKeyword.RowSource = modDBHelper.PopulateNSCComboBoxes( _
                                                  "CES_INQUIRY.POPULATE_NSC_COMBOXES", _
                                                  2)
70        cboKeyword.ListField = "keyword"

80        Set cboPartDescription.RowSource = modDBHelper.PopulateNSCComboBoxes( _
                                                  "CES_INQUIRY.POPULATE_NSC_COMBOXES", _
                                                  3)
90        cboPartDescription.ListField = "detailed_desc"
          
      '''    cboSupplierName.Enabled = False
      '''    cboSupplierNumber.Enabled = False
          
100       Exit Sub
Error_Handler:
110       g_l_ErrorLineNumber = Erl()
120       modDBHelper.LogErrorToDB Me.Name, "PopulateDropdowns", g_l_ErrorLineNumber
End Sub

Public Sub PassParameters(ByVal var_RowID As Variant, _
                          ByVal l_ID As Long, _
                          ByVal str_SupplierNumber As String, _
                          ByVal str_SupplierName As String, _
                          ByVal str_PartDescription As String, _
                          ByVal str_PartUnitCost As String, _
                          ByVal str_Keyword As String, _
                          ByVal b_DisableSupplierInfo As Boolean)
10        On Error GoTo Error_Handler

20        m_var_RowID = var_RowID
30        m_l_ID = l_ID
40        m_str_SupplierNumber = str_SupplierNumber
50        m_str_SupplierName = str_SupplierName
60        m_str_PartDescription = str_PartDescription
70        m_str_PartUnitCost = str_PartUnitCost
80        m_str_Keyword = str_Keyword
          
90        cboSupplierNumber.Text = m_str_SupplierNumber
100       cboSupplierName.Text = m_str_SupplierName
110       cboPartDescription.Text = m_str_PartDescription
120       txtPartUnitCost.Text = Format(str_PartUnitCost, "0.00")
130       cboKeyword.Text = str_Keyword
          
          ' If b_DisableSupplierInfo is set to true then disable the
          ' supplier name and supplier number combo boxes so that
          ' they cannot be updated
140       If b_DisableSupplierInfo = True Then
150           cboSupplierNumber.Enabled = False
160           cboSupplierName.Enabled = False
170       End If
          
180       Exit Sub
Error_Handler:
190       g_l_ErrorLineNumber = Erl()
200       modDBHelper.LogErrorToDB Me.Name, "PassParameters", g_l_ErrorLineNumber
End Sub

Private Sub ChangeCaptionIfNeeded()
10        On Error GoTo Error_Handler
          
20        If (m_str_SupplierNumber <> "" Or _
              m_str_SupplierName <> "" Or _
              m_str_PartDescription <> "" Or _
              m_str_PartUnitCost <> "") Then

30                cmdAdd.Caption = "Update"
40                Me.Caption = "Update a Non-Stock Coded Part"
50                Frame1.Caption = "Update a Non-Stock Coded Part"
                  
60        End If

70        Exit Sub
Error_Handler:
80        g_l_ErrorLineNumber = Erl()
90        modDBHelper.LogErrorToDB Me.Name, "ChangeCaption", g_l_ErrorLineNumber
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
10        On Error GoTo Error_Handler
          
20        Call SetDefaultCursor
30        m_str_SupplierNumber = ""
40        m_str_SupplierName = ""
50        m_str_PartDescription = ""
60        m_str_PartUnitCost = ""
70        m_str_Keyword = ""
80        m_var_RowID = ""

90        Exit Sub
Error_Handler:
100       g_l_ErrorLineNumber = Erl()
110       modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
120       Call SetDefaultCursor
End Sub
frmAddNSCPToEstimate.frm :
VERSION 5.00
Object = "{0D452EE1-E08F-101A-852E-02608C4D0BB4}#2.0#0"; "FM20.DLL"
Object = "{F0D2F211-CCB0-11D0-A316-00AA00688B10}#1.0#0"; "MSDATLST.OCX"
Begin VB.Form frmAddNSCPToEstimate 
   BorderStyle     =   1  'Fixed Single
   ClientHeight    =   4095
   ClientLeft      =   45
   ClientTop       =   330
   ClientWidth     =   7095
   Icon            =   "frmAddNSCPToEstimate.frx":0000
   LinkTopic       =   "Form1"
   MaxButton       =   0   'False
   MinButton       =   0   'False
   ScaleHeight     =   4095
   ScaleWidth      =   7095
   Begin VB.Frame fraPartInformation 
      Caption         =   "Part Information"
      Height          =   2655
      Left            =   120
      TabIndex        =   14
      Top             =   1380
      Width           =   6855
      Begin VB.CommandButton cmdAdd 
         Caption         =   "Add"
         CausesValidation=   0   'False
         Enabled         =   0   'False
         Height          =   345
         Left            =   3600
         TabIndex        =   25
         Top             =   2100
         Width           =   960
      End
      Begin VB.CommandButton cmdEditDetails 
         Caption         =   "Edit Details"
         Enabled         =   0   'False
         Height          =   345
         Left            =   4680
         TabIndex        =   24
         Top             =   2100
         Width           =   975
      End
      Begin VB.TextBox txtCoreCost 
         Height          =   285
         Left            =   1440
         TabIndex        =   8
         Top             =   2100
         Width           =   1935
      End
      Begin VB.CommandButton cmdClose 
         Caption         =   "Close"
         Height          =   345
         Left            =   5760
         TabIndex        =   9
         Top             =   2100
         Width           =   975
      End
      Begin VB.TextBox txtLastRevised 
         BeginProperty DataFormat 
            Type            =   1
            Format          =   "yy/MM/dd"
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   3
         EndProperty
         Enabled         =   0   'False
         Height          =   285
         Left            =   1425
         MaxLength       =   50
         TabIndex        =   6
         Top             =   1620
         Width           =   2220
      End
      Begin VB.TextBox txtQuantity 
         BeginProperty DataFormat 
            Type            =   1
            Format          =   "0"
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   4105
            SubFormatType   =   1
         EndProperty
         Height          =   315
         Left            =   3600
         TabIndex        =   4
         Top             =   1140
         Width           =   795
      End
      Begin VB.TextBox txtPercentUsage 
         BeginProperty DataFormat 
            Type            =   1
            Format          =   "0.000%"
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   4105
            SubFormatType   =   5
         EndProperty
         Height          =   315
         Left            =   5880
         MaxLength       =   5
         TabIndex        =   5
         Top             =   1140
         Width           =   795
      End
      Begin VB.TextBox txtPartUnitCost 
         Enabled         =   0   'False
         Height          =   285
         Left            =   5400
         TabIndex        =   7
         Top             =   1620
         Width           =   1275
      End
      Begin MSDataListLib.DataCombo cboKeyword 
         Height          =   315
         Left            =   1440
         TabIndex        =   11
         Top             =   660
         Width           =   5175
         _ExtentX        =   9128
         _ExtentY        =   556
         _Version        =   393216
         Enabled         =   0   'False
         BackColor       =   -2147483624
         Text            =   ""
      End
      Begin MSDataListLib.DataCombo cboPartDescription 
         Height          =   315
         Left            =   1440
         TabIndex        =   10
         Top             =   300
         Width           =   5175
         _ExtentX        =   9128
         _ExtentY        =   556
         _Version        =   393216
         Enabled         =   0   'False
         BackColor       =   -2147483624
         Text            =   ""
      End
      Begin MSDataListLib.DataCombo cboCostCentre 
         Height          =   315
         Left            =   1440
         TabIndex        =   3
         Top             =   1140
         Width           =   1275
         _ExtentX        =   2249
         _ExtentY        =   556
         _Version        =   393216
         Text            =   ""
      End
      Begin MSForms.Label lblcorecost 
         Height          =   255
         Left            =   120
         TabIndex        =   22
         Top             =   2100
         Width           =   1335
         Caption         =   "Core Cost ($/unit)"
         Size            =   "2355;450"
         FontHeight      =   165
         FontCharSet     =   0
         FontPitchAndFamily=   2
      End
      Begin VB.Label lblLastRevised 
         Caption         =   "Last Revised:"
         Height          =   225
         Left            =   120
         TabIndex        =   21
         Top             =   1620
         Width           =   1215
      End
      Begin VB.Label lblQuantity 
         Caption         =   "Quantity:"
         Height          =   255
         Left            =   2760
         TabIndex        =   20
         Top             =   1140
         Width           =   795
      End
      Begin VB.Label lblPercentUsage 
         Caption         =   "Percent Usage:"
         Height          =   195
         Left            =   4680
         TabIndex        =   19
         Top             =   1140
         Width           =   1215
      End
      Begin VB.Label lblCostCentre 
         Caption         =   "Cost Centre:"
         Height          =   195
         Left            =   120
         TabIndex        =   18
         Top             =   1140
         Width           =   915
      End
      Begin VB.Label lblPartUnitCost 
         BackColor       =   &H80000000&
         Caption         =   "Part Unit Cost ($/unit):"
         Height          =   240
         Left            =   3720
         TabIndex        =   17
         Top             =   1620
         Width           =   1785
      End
      Begin VB.Label lblPartDescription 
         BackColor       =   &H80000000&
         Caption         =   "Part Description:"
         Height          =   285
         Left            =   120
         TabIndex        =   16
         Top             =   300
         Width           =   1200
      End
      Begin VB.Label lblKeyword 
         BackColor       =   &H80000000&
         Caption         =   "Keyword:"
         Height          =   225
         Left            =   120
         TabIndex        =   15
         Top             =   660
         Width           =   765
      End
   End
   Begin VB.Frame fraRetrieveInformation 
      Caption         =   "Retrieve Information of Part To Be Added"
      Height          =   1155
      Left            =   120
      TabIndex        =   12
      Top             =   90
      Width           =   6840
      Begin VB.CommandButton cmdResolve 
         Caption         =   "Find Supplier Name"
         Default         =   -1  'True
         Height          =   345
         Left            =   5100
         TabIndex        =   1
         Top             =   240
         Width           =   1575
      End
      Begin MSDataListLib.DataCombo cboSupplierNumber 
         Height          =   315
         Left            =   1440
         TabIndex        =   0
         Top             =   270
         Width           =   3615
         _ExtentX        =   6376
         _ExtentY        =   556
         _Version        =   393216
         Text            =   ""
      End
      Begin MSDataListLib.DataCombo cboSupplierName 
         Height          =   315
         Left            =   1440
         TabIndex        =   2
         Top             =   720
         Width           =   5235
         _ExtentX        =   9234
         _ExtentY        =   556
         _Version        =   393216
         Enabled         =   0   'False
         BackColor       =   -2147483643
         Text            =   ""
      End
      Begin VB.Label lblSupplierName 
         BackColor       =   &H80000000&
         Caption         =   "Supplier Name:"
         Height          =   225
         Left            =   120
         TabIndex        =   23
         Top             =   720
         Width           =   1080
      End
      Begin VB.Label lblSupplierNumber 
         BackColor       =   &H80000000&
         Caption         =   "Supplier Number:"
         Height          =   285
         Left            =   120
         TabIndex        =   13
         Top             =   270
         Width           =   1320
      End
   End
End
Attribute VB_Name = "frmAddNSCPToEstimate"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
'==============================================================
'frmAddNSCPToEstimate.FRM
'
'Adds a vehicle estimate to the cost tracking system database.
'User enters/updates information into the input boxes and submits the values
'which are then saved into the database.
'===============================================================
Option Explicit

Private m_l_ID As Long
Private m_var_NSCPRowID As Variant
Private m_str_Msg As String
Private Const m_str_const_MsgBoxCaption As String = "Add / Update Non-Stock Coded Parts"

Public m_str_LinkNumber As String
Public m_str_TypeCode As String

Public m_var_RowID As Variant

Public m_str_AuditReference As String
Public m_str_AuditReferenceType As String

Private Sub cmdClose_Click()
    On Error GoTo Error_Handler
    
    Unload Me
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdClose_Click", g_l_ErrorLineNumber
End Sub

Private Sub cmdAdd_Click()
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_PercentUsage As String
    Dim RS As ADODB.Recordset
    Dim l_Count As Long

    On Error GoTo Error_Handler

    Call SetWaitCursor

    If Trim(cboSupplierNumber.Text) = "" Then
        If Not IsNumeric(cboSupplierNumber.Text) Then
            Call SetDefaultCursor
            m_str_Msg = "Please provide a Supplier Number."
            MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
            cboSupplierNumber.SetFocus
            Exit Sub
        End If
    End If
    
    'The percent usage
    str_PercentUsage = Trim(txtPercentUsage.Text)
    If str_PercentUsage = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Percent Usage is not entered correctly. Percent Usage can be a "
        m_str_Msg = m_str_Msg + "positive number between 0 and 100 inclusive with "
        m_str_Msg = m_str_Msg + "possible fraction."
        MsgBox m_str_Msg, vbExclamation Or vbOKOnly, m_str_const_MsgBoxCaption
        txtPercentUsage.SetFocus
        Exit Sub
    End If
    
    If CheckPercent(str_PercentUsage) = False Then
        Call SetDefaultCursor
        m_str_Msg = "Percent Usage is not entered correctly. Percent Usage can be a "
        m_str_Msg = m_str_Msg + "positive number between 0 and 100 inclusive with "
        m_str_Msg = m_str_Msg + "possible fraction."
        MsgBox m_str_Msg, vbExclamation Or vbOKOnly, m_str_const_MsgBoxCaption
        txtPercentUsage.SetFocus
        Exit Sub
    End If

    str_PercentUsage = Replace(str_PercentUsage, ".", ",")
    
    If Trim(cboCostCentre.Text) = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please provide a Cost Centre."
        MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
        cboCostCentre.SetFocus
        Exit Sub
    End If
    
    'Then validate Quantity
    If Not IsNumeric(txtQuantity.Text) Then
        Call SetDefaultCursor
        m_str_Msg = "Quantity not entered correctly."
        MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
        txtQuantity.SetFocus
        Exit Sub
    Else
        If Not IsValidLong(txtQuantity.Text) Then
            Call SetDefaultCursor
            m_str_Msg = "Quantity not entered correctly."
            MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
            txtQuantity.SetFocus
            Exit Sub
        End If
    End If
    
    If CLng(txtQuantity.Text) < 0 Then
        Call SetDefaultCursor
        m_str_Msg = "Quantity not entered correctly."
        MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
        txtQuantity.SetFocus
        Exit Sub
    End If
        
    If Trim(txtCoreCost.Text) = "" Then
        txtCoreCost.Text = "0"
    ElseIf Not IsNumeric(Trim(txtCoreCost.Text)) Or Val(txtCoreCost.Text) < 0 Then
        Call SetDefaultCursor
        m_str_Msg = "Core cost not entered correctly."
        MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
        txtCoreCost.SetFocus
        Exit Sub
    End If
        
    If txtPartUnitCost.Text = "" Then
        txtPartUnitCost.Text = "0"
    ElseIf Not IsNumeric(Trim(txtPartUnitCost.Text)) Or Val(txtPartUnitCost.Text) < 0 Then
        Call SetDefaultCursor
        m_str_Msg = "Part Unit cost not entered correctly."
        MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
        txtPartUnitCost.SetFocus
        Exit Sub
    End If
    
    If cmdAdd.Caption = "Add" Then
        'Before adding check that "Supplier Number" is not duplicated in the estimate.
        Set RS = New ADODB.Recordset
        Set RS = modDBHelper.RetrieveNSCPUsed("CES_INQUIRY.RETRIEVE_NSCP_USED", _
                                              m_str_LinkNumber, _
                                              m_str_TypeCode)
        If RS.RecordCount > 0 Then
            RS.MoveFirst
            For l_Count = 0 To RS.RecordCount - 1
                If RS.Fields.Item("SUPPLIER NUMBER") = Trim(cboSupplierNumber.Text) Then
                    Set RS = Nothing
                    Call SetDefaultCursor
                    m_str_Msg = "Record with the same Supplier Number is already exist "
                    m_str_Msg = m_str_Msg + "in the current Estimate. Please choose "
                    m_str_Msg = m_str_Msg + "another one."
                    MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
                    cmdResolve.Caption = "Find Supplier Name"
                    Set cboSupplierName.RowSource = Nothing
                    cboSupplierName.Text = ""
                    cboSupplierName.Enabled = False
                    cboSupplierNumber.SetFocus
                    Exit Sub
                End If
                RS.MoveNext
            Next l_Count
        End If
        Set RS = Nothing
        
        'Add new non-stock coded part
        l_Result = modDBHelper.AddNSCPUsed("CES_UPDATE.ADD_NSCP_USED", _
                                           l_RetVal, _
                                           cboSupplierNumber.Text, _
                                           cboSupplierName.Text, _
                                           cboCostCentre.Text, _
                                           txtQuantity.Text, _
                                           str_PercentUsage, _
                                           g_str_UserName, _
                                           m_str_LinkNumber, _
                                           CCur(txtPartUnitCost.Text), _
                                           m_str_TypeCode, _
                                           CCur(txtCoreCost.Text), _
                                           m_l_ID)
        If (l_Result = 0) Then
            m_str_Msg = "Non-Stock Coded Part has been added."
            MsgBox m_str_Msg, vbInformation Or vbOKOnly, m_str_const_MsgBoxCaption
        Else
            Call SetDefaultCursor
            m_str_Msg = "There was an error adding Non-Stock Coded Part. Please Contact "
            m_str_Msg = m_str_Msg + "Administrator."
            MsgBox m_str_Msg, vbCritical Or vbOKOnly, m_str_const_MsgBoxCaption
            Exit Sub
        End If
        cmdAdd.Enabled = False
        cmdEditDetails.Enabled = False
        cmdResolve.Caption = "Find Supplier Name"
        
        '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT Begin >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        
        'Insert record into the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                l_RetVal, _
                "Add Non-Stock Coded Part", _
                m_str_AuditReference, _
                m_str_TypeCode, _
                "Supplier Number ---> " + Trim(cboSupplierNumber.Text), _
                "Supplier Name ---> " + Trim(cboSupplierName.Text), _
                "Part Description ---> " + Trim(cboPartDescription.Text), _
                "Keyword ---> " + Trim(cboKeyword.Text), _
                "Cost Centre ---> " + Trim(cboCostCentre.Text), _
                "Quantity ---> " + Trim(txtQuantity.Text), _
                "Percent Usage ---> " + Trim(txtPercentUsage.Text), _
                "Last Revised ---> " + Trim(txtLastRevised.Text), _
                "Part Unit Cost ($/unit) ---> " + Trim(txtPartUnitCost.Text), _
                "Core Cost ($/unit) ---> " + Trim(txtCoreCost.Text))
        
        ' Now act depending on which type of estimate that the non-stock
        ' coded part was added to.
        If m_str_TypeCode = "KIT" Then
            'Add the current Part to the table SUB_KITS, after the last item in the
            'sub kit "KIT A"
            Call modMain.AddLastPartToSubkitA(m_str_AuditReference, _
                                              "NSC", _
                                              Trim(cboSupplierNumber.Text), _
                                              Trim(cboSupplierName.Text), _
                                              " ", _
                                              Trim(txtQuantity.Text), _
                                              Trim(cboPartDescription.Text))

            'Find all Vehicle Estimates where the current OEM Kit is presented.
            Set RS = New ADODB.Recordset
            Set RS = modDBHelper.RetrieveBusFromKitsUsed("CES_INQUIRY.RETRIEVE_BUS_FROM_KITS_USED", _
                                                         m_str_AuditReference)
            'Insert records for all Vehicle Estimates (where the current OEM Kit is
            'presented) into the AUDIT_MODIFY_HISTORY table.
            If RS.RecordCount > 0 Then
                RS.MoveFirst
                For l_Count = 0 To RS.RecordCount - 1
                    If IsNull(RS.Fields.Item("link_code")) = False Then
                        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "Indirect change. Non-Stock Coded Part was added to the OEM Kit " + m_str_AuditReference, _
                            RS.Fields.Item("link_code"), _
                            "BUS", _
                            "Supplier Number ---> " + Trim(cboSupplierNumber.Text), _
                            "Supplier Name ---> " + Trim(cboSupplierName.Text), _
                            "Part Description ---> " + Trim(cboPartDescription.Text), _
                            "Keyword ---> " + Trim(cboKeyword.Text), _
                            "Cost Centre ---> " + Trim(cboCostCentre.Text), _
                            "Quantity ---> " + Trim(txtQuantity.Text), _
                            "Percent Usage ---> " + Trim(txtPercentUsage.Text), _
                            "Last Revised ---> " + Trim(txtLastRevised.Text), _
                            "Part Unit Cost ($/unit) ---> " + Trim(txtPartUnitCost.Text), _
                            "Core Cost ($/unit) ---> " + Trim(txtCoreCost.Text))
                    End If
                    RS.MoveNext
                Next l_Count
            End If
        ElseIf m_str_TypeCode = "RB" Then
            ' If the estimate is a Rebuilt Part Estimate then cycle
            ' though all RB, MB and Veh Estimates containing this RBP
        
            Set RS = New ADODB.Recordset
            
            'In the SC_PARTS_USED table find all Estimates where the current RBE is present.
            Set RS = modDBHelper.RetrieveESTToPropagateRB("CES_INQUIRY.RETRIEVE_EST_TO_PROPAGATE_RB", _
                                                          m_str_AuditReference)
            If RS.RecordCount > 0 Then
                RS.MoveFirst
                    For l_Count = 0 To RS.RecordCount - 1
                        'Add records to the AUDIT_MODIFY_HISTORY table.
                        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "Indirect change. Non-Stock Coded Part was added to the Rebuilt Part Estimate " + m_str_AuditReference, _
                            RS.Fields.Item("link_code"), _
                            RS.Fields.Item("link_type"), _
                            "Supplier Number ---> " + Trim(cboSupplierNumber.Text), _
                            "Supplier Name ---> " + Trim(cboSupplierName.Text), _
                            "Part Description ---> " + Trim(cboPartDescription.Text), _
                            "Keyword ---> " + Trim(cboKeyword.Text), _
                            "Cost Centre ---> " + Trim(cboCostCentre.Text), _
                            "Quantity ---> " + Trim(txtQuantity.Text), _
                            "Percent Usage ---> " + Trim(txtPercentUsage.Text), _
                            "Last Revised ---> " + Trim(txtLastRevised.Text), _
                            "Part Unit Cost ($/unit) ---> " + Trim(txtPartUnitCost.Text), _
                            "Core Cost ($/unit) ---> " + Trim(txtCoreCost.Text))
                        RS.MoveNext
                    Next l_Count
            End If
            Set RS = Nothing
        
        End If
        '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT End >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        
        Set cboSupplierName.RowSource = Nothing
        cboSupplierName.Enabled = False
        cboSupplierName.Text = ""
        cboSupplierNumber.SetFocus
    Else 'If cmdAdd.Caption = "Update" Then
        'Update existing stock coded part
        l_Result = modDBHelper.UpdateNSCPUsed("CES_UPDATE.UPDATE_NSCP_USED", _
                                              l_RetVal, _
                                              cboSupplierNumber.Text, _
                                              cboSupplierName.Text, _
                                              cboCostCentre.Text, _
                                              txtQuantity.Text, _
                                              str_PercentUsage, _
                                              g_str_UserName, _
                                              m_str_LinkNumber, _
                                              CCur(txtPartUnitCost.Text), _
                                              m_var_RowID, _
                                              CCur(txtCoreCost.Text))
    
        If (l_Result = 0) Then
            m_str_Msg = "Non-Stock Coded Part has been updated."
            MsgBox m_str_Msg, vbInformation Or vbOKOnly, m_str_const_MsgBoxCaption
        Else
            Call SetDefaultCursor
            m_str_Msg = "There was an error updating Non-Stock Coded Part. Please Contact "
            m_str_Msg = m_str_Msg + "Administrator."
            MsgBox m_str_Msg, vbCritical Or vbOKOnly, m_str_const_MsgBoxCaption
            Exit Sub
        End If
        
        cmdResolve.Caption = "Find Supplier Name"
        
        '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT Begin >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        'Insert record into the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                    "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                    l_RetVal, _
                    "Update Non-Stock Coded Part", _
                    m_str_AuditReference, _
                    m_str_TypeCode, _
                    "Supplier Number ---> " + Trim(cboSupplierNumber.Text), _
                    "Supplier Name ---> " + Trim(cboSupplierName.Text), _
                    "Part Description ---> " + Trim(cboPartDescription.Text), _
                    "Keyword ---> " + Trim(cboKeyword.Text), _
                    "Cost Centre ---> " + Trim(cboCostCentre.Text), _
                    "Quantity ---> " + Trim(txtQuantity.Text), _
                    "Percent Usage ---> " + Trim(txtPercentUsage.Text), _
                    "Last Revised ---> " + Trim(txtLastRevised.Text), _
                    "Part Unit Cost ($/unit) ---> " + Trim(txtPartUnitCost.Text), _
                    "Core Cost ($/unit) ---> " + Trim(txtCoreCost.Text))
        
        ' Now act depending on which type of estimate that the non-stock
        ' coded part was added to.
        If m_str_TypeCode = "KIT" Then
            'In the SUB_KITS table update corresponded record.
            l_Result = modDBHelper.UpdateSubKits("CES_UPDATE.UPDATE_SUB_KITS", _
                                                 l_RetVal, _
                                                 m_str_AuditReference, _
                                                 Trim(cboSupplierNumber.Text), _
                                                 Trim(cboSupplierName.Text), _
                                                 " ", _
                                                 Trim(txtQuantity.Text), _
                                                 Trim(cboPartDescription.Text))

            'Find all Vehicle Estimates where the current OEM Kit is presented.
            Set RS = New ADODB.Recordset
            Set RS = modDBHelper.RetrieveBusFromKitsUsed("CES_INQUIRY.RETRIEVE_BUS_FROM_KITS_USED", _
                                                         m_str_AuditReference)
            'Insert records for all Vehicle Estimates (where the current OEM Kit is
            'presented) into the AUDIT_MODIFY_HISTORY table.
            If RS.RecordCount > 0 Then
                RS.MoveFirst
                For l_Count = 0 To RS.RecordCount - 1
                    If IsNull(RS.Fields.Item("link_code")) = False Then
                        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "Indirect change. Non-Stock Coded Part was updated from the OEM Kit " + m_str_AuditReference, _
                            RS.Fields.Item("link_code"), _
                            "BUS", _
                            "Supplier Number ---> " + Trim(cboSupplierNumber.Text), _
                            "Supplier Name ---> " + Trim(cboSupplierName.Text), _
                            "Part Description ---> " + Trim(cboPartDescription.Text), _
                            "Keyword ---> " + Trim(cboKeyword.Text), _
                            "Cost Centre ---> " + Trim(cboCostCentre.Text), _
                            "Quantity ---> " + Trim(txtQuantity.Text), _
                            "Percent Usage ---> " + Trim(txtPercentUsage.Text), _
                            "Last Revised ---> " + Trim(txtLastRevised.Text), _
                            "Part Unit Cost ($/unit) ---> " + Trim(txtPartUnitCost.Text), _
                            "Core Cost ($/unit) ---> " + Trim(txtCoreCost.Text))
                    End If
                    RS.MoveNext
                Next l_Count
            End If
        ElseIf m_str_TypeCode = "RB" Then
            ' If the estimate is a Rebuilt Part Estimate then cycle
            ' though all RB, MB and Veh Estimates containing this RBP
        
            Set RS = New ADODB.Recordset
            
            'In the SC_PARTS_USED table find all Estimates where the current RBE is present.
            Set RS = modDBHelper.RetrieveESTToPropagateRB("CES_INQUIRY.RETRIEVE_EST_TO_PROPAGATE_RB", _
                                                          m_str_AuditReference)
            If RS.RecordCount > 0 Then
                RS.MoveFirst
                    For l_Count = 0 To RS.RecordCount - 1
                        'Add records to the AUDIT_MODIFY_HISTORY table.
                        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "Indirect change. Non-Stock Coded Part was updated from the Rebuilt Part Estimate " + m_str_AuditReference, _
                            RS.Fields.Item("link_code"), _
                            RS.Fields.Item("link_type"), _
                            "Supplier Number ---> " + Trim(cboSupplierNumber.Text), _
                            "Supplier Name ---> " + Trim(cboSupplierName.Text), _
                            "Part Description ---> " + Trim(cboPartDescription.Text), _
                            "Keyword ---> " + Trim(cboKeyword.Text), _
                            "Cost Centre ---> " + Trim(cboCostCentre.Text), _
                            "Quantity ---> " + Trim(txtQuantity.Text), _
                            "Percent Usage ---> " + Trim(txtPercentUsage.Text), _
                            "Last Revised ---> " + Trim(txtLastRevised.Text), _
                            "Part Unit Cost ($/unit) ---> " + Trim(txtPartUnitCost.Text), _
                            "Core Cost ($/unit) ---> " + Trim(txtCoreCost.Text))
                        RS.MoveNext
                    Next l_Count
            End If
            Set RS = Nothing
        End If
        '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT End >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        
        Set cboSupplierName.RowSource = Nothing
        cboSupplierName.Text = ""
        cboSupplierName.Enabled = False
        Call SetDefaultCursor
       
        Unload Me
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdAdd_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub cmdEditDetails_Click()
    ' Allows the users to edit the details of the non-stock coded
    ' part before adding it to the part.
      
    Dim str_SupplierNumber As String
    Dim str_SupplierName As String
    Dim str_PartDescription As String
    Dim str_PartUnitCost As String
    Dim str_Keyword As String
    Dim temp 'temp array to hold values from the split function
    
    On Error GoTo Error_Handler
    
    'Splits the string into two at the first instance of ":"
    'the values before and after the ":" are saved into two variables passed in by
    'reference
    temp = Split(Trim(cboSupplierName.Text), " Price:")
    
    str_SupplierNumber = Trim(cboSupplierNumber.Text)
    str_SupplierName = temp(0) 'the values before the " Price:"
    str_PartDescription = Trim(cboPartDescription.Text)
    str_PartUnitCost = Trim(txtPartUnitCost.Text)
    str_Keyword = Trim(cboKeyword.Text)
    
    Call frmAddNonStockCodedPart.PassParameters(m_var_NSCPRowID, _
                                                m_l_ID, _
                                                str_SupplierNumber, _
                                                str_SupplierName, _
                                                str_PartDescription, _
                                                str_PartUnitCost, _
                                                str_Keyword, _
                                                True)
    frmAddNonStockCodedPart.m_str_AuditReference = m_str_AuditReference
    frmAddNonStockCodedPart.m_str_AuditReferenceType = m_str_TypeCode
    frmAddNonStockCodedPart.cboSupplierName.Enabled = False
    frmAddNonStockCodedPart.cboSupplierNumber.Enabled = False
    frmAddNonStockCodedPart.Show vbModal
    cmdResolve.Caption = "Resolve"
    ' Once the non stock coded part is updated refresh the form
    Call Resolve
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdEditDetails_Click", g_l_ErrorLineNumber
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    Me.Height = 4470
    Me.Width = 7185
    Call PopulateFields
    
    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Public Sub PassValues(ByVal str_SupplierNumber As String, _
                      ByVal str_SupplierName As String, _
                      ByVal str_CostCentre As String, _
                      ByVal str_PercentUsage As String, _
                      ByVal str_Quantity As String, _
                      ByVal var_RowIDPass As Variant, _
                      ByVal cur_CoreCost As Currency)
    
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    m_var_RowID = var_RowIDPass
    
    cboSupplierNumber.Text = str_SupplierNumber
    cboSupplierName.Text = str_SupplierName
    cmdResolve.Caption = "Resolve"
    
    Call Resolve
    
    cboCostCentre.Text = str_CostCentre
    txtQuantity.Text = Replace(str_Quantity, ",", ".")
    txtPercentUsage.Text = str_PercentUsage
    
    cmdAdd.Caption = "Update"
    cmdClose.Visible = False
    cmdResolve.Enabled = False
    cboSupplierNumber.Enabled = False
    
    Set RS = modDBHelper.RetrieveSCPUsedROWID("CES_INQUIRY.retrieve_one_nscp_used", _
                                             var_RowIDPass)
    txtCoreCost.Text = Format(RS("CORECOST"), "0.00")
    Set RS = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PassValues", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub PopulateFields()
    On Error GoTo Error_Handler
    
    Set cboSupplierNumber.RowSource = modDBHelper.PopulateNSCComboBoxes( _
                                                "CES_INQUIRY.POPULATE_NSC_COMBOXES", _
                                                "1")
    cboSupplierNumber.ListField = "orig_supplier_num"

    Set cboKeyword.RowSource = modDBHelper.PopulateNSCComboBoxes( _
                                                "CES_INQUIRY.POPULATE_NSC_COMBOXES", _
                                                "2")
    cboKeyword.ListField = "keyword"

    Set cboPartDescription.RowSource = modDBHelper.PopulateNSCComboBoxes( _
                                                "CES_INQUIRY.POPULATE_NSC_COMBOXES", _
                                                "3")
    cboPartDescription.ListField = "detailed_desc"


    Set cboCostCentre.RowSource = modDBHelper.PopulateCostCentres( _
                                                "CES_INQUIRY.RETRIEVE_COST_CENTRES")
    cboCostCentre.ListField = "cost_centre"

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateFields", g_l_ErrorLineNumber
End Sub

Private Sub cmdResolve_Click()
    On Error GoTo Error_Handler

    Call Resolve
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdResolve_Click", g_l_ErrorLineNumber
End Sub

Private Sub Resolve()
    Dim RS As ADODB.Recordset
    Dim temp
    
    On Error GoTo Error_Handler

    Call SetWaitCursor
    
    Set RS = New ADODB.Recordset
    
    If cmdResolve.Caption = "Resolve" Then
        'Query database to load vehicle estimate
        'retrieve part by part number only, save results to Recordset
        Set RS = modDBHelper.SearchNSCPPartBy2Fields( _
                                        "CES_INQUIRY.SEARCH_NSCP_PART_BY_2_FIELDS", _
                                        cboSupplierNumber.Text, _
                                        cboSupplierName.Text)
        If RS.RecordCount = 0 Then
            Set RS = Nothing
            Call SetDefaultCursor
            cmdAdd.Enabled = False
            cmdEditDetails.Enabled = False
            MsgBox "No information for the Part Number."
            cmdResolve.Caption = "Find Supplier Name"
            Exit Sub
        ElseIf RS.RecordCount > 1 Then
            Set RS = Nothing
            Call SetDefaultCursor
            cmdAdd.Enabled = False
            cmdEditDetails.Enabled = False
            m_str_Msg = "There are more than one record for this Non Stock Coded Part. "
            m_str_Msg = m_str_Msg + "Please edit/remove the duplicate(s) Non Stock "
            m_str_Msg = m_str_Msg + "Coded part from the system."
            MsgBox m_str_Msg
            Exit Sub
        ElseIf RS.RecordCount = 1 Then
            cboKeyword.Text = RS.Fields.Item("KEYWORD")
            cboPartDescription.Text = RS.Fields.Item("DESCRIPTION")
            txtPartUnitCost.Text = Format(RS.Fields.Item("PRICE"), "0.00")
            txtLastRevised.Text = RS.Fields.Item("LAST MODIFIED DATE")
            m_l_ID = RS.Fields.Item("ID")
            m_var_NSCPRowID = RS.Fields.Item("ROWID")
            cmdAdd.Enabled = True
            cmdResolve.Default = False
            cmdAdd.Default = True
            cmdEditDetails.Enabled = True
        End If
        cmdResolve.Caption = "Find Supplier Name"
    Else 'If cmdResolve.Caption = "Find Supplier Name"
        If Trim(cboSupplierNumber.Text) = "" Then
            Call SetDefaultCursor
            MsgBox "Please provide Supplier Number."
            cboSupplierNumber.SetFocus
            Exit Sub
        End If
        
        'Find Supplier Name by Spplier Number
        Set RS = modDBHelper.FindSupplierNameByNumber( _
                                        "CES_INQUIRY.FIND_SUPPLIER_NAME_BY_NUMBER", _
                                        Trim(cboSupplierNumber.Text))
        If RS.RecordCount = 0 Then
            Call SetDefaultCursor
            MsgBox "Can not find Supplier Name for provided Supplier Number."
            cboSupplierNumber.SetFocus
            Set RS = Nothing
            Exit Sub
        End If
        
        Set cboSupplierName.RowSource = RS
        cboSupplierName.ListField = "orig_supplier_name"
        cboSupplierName.Enabled = True
        cboSupplierName.Text = RS.Fields.Item("orig_supplier_name")
        cmdResolve.Caption = "Resolve"
    End If
        
    temp = Split(Trim(cboSupplierName.Text), " Price:")
    cboSupplierName.Text = temp(0)
    Set RS = Nothing
    
    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Resolve", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub txtPercentUsage_GotFocus()
    On Error GoTo Error_Handler

    txtPercentUsage.SelStart = 0
    txtPercentUsage.SelLength = Len(txtPercentUsage.Text)
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtPercentUsage_GotFocus", g_l_ErrorLineNumber
End Sub

Private Sub txtQuantity_GotFocus()
    On Error GoTo Error_Handler

    txtQuantity.SelStart = 0
    txtQuantity.SelLength = Len(txtQuantity.Text)
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtQuantity_GotFocus", g_l_ErrorLineNumber
End Sub

frmAddOEMKit.frm :
VERSION 5.00
Begin VB.Form frmAddOEMKit 
   BorderStyle     =   3  'Fixed Dialog
   Caption         =   "Add OEM Kit"
   ClientHeight    =   2010
   ClientLeft      =   45
   ClientTop       =   330
   ClientWidth     =   7080
   Icon            =   "frmAddOEMKit.frx":0000
   LinkTopic       =   "Form1"
   MaxButton       =   0   'False
   MinButton       =   0   'False
   ScaleHeight     =   2010
   ScaleWidth      =   7080
   ShowInTaskbar   =   0   'False
   StartUpPosition =   2  'CenterScreen
   Begin VB.Frame Frame1 
      Caption         =   "Add OEM Kit"
      Height          =   1935
      Left            =   45
      TabIndex        =   0
      Top             =   30
      Width           =   6990
      Begin VB.CommandButton cmdClose 
         Caption         =   "Close"
         Height          =   375
         Left            =   3135
         TabIndex        =   8
         Top             =   1425
         Width           =   1110
      End
      Begin VB.CommandButton cmdAddOEMKit 
         Caption         =   "Add"
         Default         =   -1  'True
         Height          =   375
         Left            =   1950
         TabIndex        =   7
         Top             =   1425
         Width           =   1185
      End
      Begin VB.TextBox txtKitDetailedDescription 
         Height          =   285
         Left            =   1920
         MaxLength       =   250
         TabIndex        =   2
         Top             =   660
         Width           =   4935
      End
      Begin VB.TextBox txtPartNumber 
         Height          =   285
         Left            =   1920
         MaxLength       =   30
         TabIndex        =   1
         Top             =   330
         Width           =   1710
      End
      Begin VB.TextBox txtBriefDescription 
         Height          =   285
         Left            =   1920
         MaxLength       =   50
         TabIndex        =   4
         Top             =   990
         Width           =   4935
      End
      Begin VB.Label lblKitDetailedDescription 
         Caption         =   "Kit Detailed Description"
         Height          =   315
         Left            =   165
         TabIndex        =   6
         Top             =   675
         Width           =   1650
      End
      Begin VB.Label lblPartNumber 
         BackColor       =   &H80000000&
         Caption         =   "Part Number"
         Height          =   270
         Left            =   930
         TabIndex        =   5
         Top             =   345
         Width           =   960
      End
      Begin VB.Label lblBriefDescription 
         Caption         =   "Brief Description"
         Height          =   240
         Left            =   660
         TabIndex        =   3
         Top             =   1005
         Width           =   1260
      End
   End
End
Attribute VB_Name = "frmAddOEMKit"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Option Explicit

Private m_str_Msg As String

'Holds the ROWID number of a part
Public m_var_RowID As Variant

Private Sub cmdAddOEMKit_Click()
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_PartNumber As String
    Dim str_KitDetailedDescription As String
    Dim str_BriefDescription As String
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    'Make sure that user typed something into the txtPartNumber edit-box.
    str_PartNumber = Trim(txtPartNumber.Text)
    If str_PartNumber = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please provide Part Number."
        MsgBox m_str_Msg, vbOKOnly + vbInformation
        txtPartNumber.SetFocus
        Exit Sub
    End If
    
    'Make sure that user typed something into the txtKitDetailedDescription edit-box.
    str_KitDetailedDescription = Trim(txtKitDetailedDescription.Text)
    If str_KitDetailedDescription = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please provide Detailed Description."
        MsgBox m_str_Msg, vbOKOnly + vbInformation
        txtKitDetailedDescription.SetFocus
        Exit Sub
    End If
    
    'Make sure that user typed something into the txtBriefDescription edit-box.
    str_BriefDescription = Trim(txtBriefDescription.Text)
    If str_BriefDescription = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please provide Brief Description."
        MsgBox m_str_Msg, vbOKOnly + vbInformation
        txtBriefDescription.SetFocus
        Exit Sub
    End If
    
    'Check that data in the txtPartNumber edit-box is not duplicated in the
    'KITS_MASTERLIST table.
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.SearchKitByNumber( _
                                    "CES_INQUIRY.SERCH_KIT_BY_NUMBER", _
                                    str_PartNumber)
    If RS.RecordCount > 0 Then
        Set RS = Nothing
        Call SetDefaultCursor
        m_str_Msg = "OEM Kit with the same Part Number already exist. Please provide "
        m_str_Msg = m_str_Msg + "another one."
        MsgBox m_str_Msg, vbOKOnly + vbInformation
        txtPartNumber.SetFocus
        Exit Sub
    End If
    Set RS = Nothing

    l_Result = modDBHelper.AddTempOEMKit("CES_UPDATE.ADD_TEMP_OEMKIT", _
                                                  l_RetVal, _
                                                  str_PartNumber, _
                                                  str_KitDetailedDescription, _
                                                  str_BriefDescription, _
                                                  g_str_UserName)
    
    If (l_Result = 0) Then
        Call SetDefaultCursor
        m_str_Msg = "OEM Temp Kit Has been added."
        MsgBox m_str_Msg
        'Add record to the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "OEM Kit Info was added to the System", _
                            str_PartNumber, _
                            "KIT", _
                            "Part Number ---> " + str_PartNumber, _
                            "Kit Detailed Description ---> " + str_KitDetailedDescription, _
                            "Brief Description ---> " + str_BriefDescription)
    Else
        Call SetDefaultCursor
        m_str_Msg = "There was an error adding OEM Temp Kit. Please Contact The Administrator."
        MsgBox m_str_Msg
        Exit Sub
    End If

    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdAddOEMKit_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    Me.Height = 2475
    Me.Width = 9045
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    g_l_ErrorLineNumber = Erl()
    Call SetDefaultCursor
End Sub

Private Sub cmdClose_Click()
    On Error GoTo Error_Handler

    Unload Me

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdClose_Click", g_l_ErrorLineNumber
End Sub


Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_Unload(Cancel As Integer)
    On Error GoTo Error_Handler
 
    m_var_RowID = ""
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Unload", g_l_ErrorLineNumber
End Sub

Private Sub txtBriefDescription_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtBriefDescription edit-box to upper case.
    l_CursorPosition = txtBriefDescription.SelStart
    str_Data = txtBriefDescription.Text
    str_Data = UCase(str_Data)
    txtBriefDescription.Text = str_Data
    txtBriefDescription.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtBriefDescription_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtKitDetailedDescription_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtKitDetailedDescription edit-box to upper case.
    l_CursorPosition = txtKitDetailedDescription.SelStart
    str_Data = txtKitDetailedDescription.Text
    str_Data = UCase(str_Data)
    txtKitDetailedDescription.Text = str_Data
    txtKitDetailedDescription.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtKitDetailedDescription_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtPartNumber_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtPartNumber edit-box to upper case.
    l_CursorPosition = txtPartNumber.SelStart
    str_Data = txtPartNumber.Text
    str_Data = UCase(str_Data)
    txtPartNumber.Text = str_Data
    txtPartNumber.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtPartNumber_KeyUp", g_l_ErrorLineNumber
End Sub

frmAddOEMKitBusEstimate.frm :
VERSION 5.00
Object = "{CDE57A40-8B86-11D0-B3C6-00A0C90AEA82}#1.0#0"; "msdatgrd.ocx"
Begin VB.Form frmAddOEMKitBusEstimate 
   BorderStyle     =   1  'Fixed Single
   Caption         =   "SEARCH FOR OEM KIT TO ADD TO ESTIMATE"
   ClientHeight    =   4950
   ClientLeft      =   45
   ClientTop       =   330
   ClientWidth     =   7740
   Icon            =   "frmAddOEMKitBusEstimate.frx":0000
   LinkTopic       =   "Form12"
   MDIChild        =   -1  'True
   ScaleHeight     =   4950
   ScaleWidth      =   7740
   ShowInTaskbar   =   0   'False
   Begin MSDataGridLib.DataGrid grdSearchResults 
      Height          =   2955
      Left            =   120
      TabIndex        =   0
      Top             =   1530
      Width           =   7575
      _ExtentX        =   13361
      _ExtentY        =   5212
      _Version        =   393216
      BackColor       =   12648447
      ForeColor       =   16711680
      HeadLines       =   1
      RowHeight       =   15
      BeginProperty HeadFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Caption         =   "SEARCH RESULTS"
      ColumnCount     =   2
      BeginProperty Column00 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      BeginProperty Column01 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      SplitCount      =   1
      BeginProperty Split0 
         BeginProperty Column00 
         EndProperty
         BeginProperty Column01 
         EndProperty
      EndProperty
   End
   Begin VB.CommandButton cmdClose 
      Caption         =   "Close"
      Height          =   300
      Left            =   3780
      TabIndex        =   8
      Top             =   4560
      Width           =   1485
   End
   Begin VB.Frame frmOEMKits 
      Caption         =   "OEM Kits"
      Height          =   1380
      Left            =   120
      TabIndex        =   2
      Top             =   90
      Width           =   7530
      Begin VB.CommandButton cmdSearch 
         Caption         =   "Search"
         Height          =   300
         Left            =   3000
         TabIndex        =   5
         Top             =   915
         Width           =   1485
      End
      Begin VB.TextBox txtKitDetailedDescription 
         Height          =   285
         Left            =   4485
         TabIndex        =   4
         Top             =   285
         Width           =   3015
      End
      Begin VB.TextBox txtPartNumber 
         Height          =   285
         Left            =   1185
         TabIndex        =   3
         Top             =   270
         Width           =   1215
      End
      Begin VB.Label lblKitDetailedDescription 
         Caption         =   "Kit Detailed Description"
         Height          =   315
         Left            =   2730
         TabIndex        =   7
         Top             =   300
         Width           =   1650
      End
      Begin VB.Label lblPartNumber 
         BackColor       =   &H80000000&
         Caption         =   "Part Number"
         Height          =   285
         Left            =   195
         TabIndex        =   6
         Top             =   285
         Width           =   1020
      End
   End
   Begin VB.CommandButton cmdAddKitToBus 
      Caption         =   "Add Kit to Vehicle"
      Height          =   300
      Left            =   2205
      TabIndex        =   1
      Top             =   4560
      Width           =   1485
   End
End
Attribute VB_Name = "frmAddOEMKitBusEstimate"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Option Explicit

Public m_str_Vehicle_number As String
Private Const m_const_str_CostCentre As String = "05H6"

Private Sub cmdAddKitToBus_Click()
    Dim RS As ADODB.Recordset
    Dim RS_Check As ADODB.Recordset
    Dim str_PartNumber As String
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_Msg As String
    Dim i_Count As Integer
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    If Not grdSearchResults.Row Then
    
        str_PartNumber = grdSearchResults.Columns("PART NUMBER").Text 'gets selected rows first column
        
        'Check to see if kit is already attached
        Set RS_Check = modDBHelper.RetrieveOEMKitsAttached("CES_INQUIRY.RETRIEVE_OEMKITS_ATTACHED", _
                            m_str_Vehicle_number)
   
        If RS_Check.RecordCount > 0 Then
            RS_Check.MoveFirst
            For i_Count = 0 To RS_Check.RecordCount - 1
                If RS_Check.Fields(0).Value = str_PartNumber Then
                    MsgBox "Selected OEM Kit is already attached."
                    Set RS_Check = Nothing
                    Exit Sub
                End If
                RS_Check.MoveNext
            Next i_Count
        End If
        
        Set RS_Check = Nothing


        Set RS = modDBHelper.SearchSCPart("CES_INQUIRY.SEARCH_SC_PART", _
                                              str_PartNumber, _
                                              "0", _
                                              "", _
                                              "", _
                                              2)
                                              
        If RS.RecordCount > 0 Then
                l_Result = modDBHelper.UpdateOEMKitCost("CES_UPDATE.UPDATE_OEMKit_COST", _
                                            l_RetVal, _
                                            str_PartNumber, _
                                            CCur(RS.Fields("PRICE").Value))
        End If

        l_Result = modDBHelper.ADDOEMKitToBus("CES_UPDATE.ADD_OEMKIT_BUS", _
                                                  l_RetVal, _
                                                  str_PartNumber, _
                                                  g_str_UserName, _
                                                  m_const_str_CostCentre, _
                                                  m_str_Vehicle_number)
    
        If (l_Result = 0) Then
            Call SetDefaultCursor
            str_Msg = "OEM Temp Kit Has been added to the Vehicle."
            MsgBox str_Msg
        Else
            Call SetDefaultCursor
            str_Msg = "There was an error adding OEM Temp Kit to Vehicle. Please Contact The Administrator"
            MsgBox str_Msg
            Exit Sub
        End If
        'Insert record into the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                l_RetVal, _
                "Add OEM Kit", _
                m_str_Vehicle_number, _
                "BUS", _
                "PART NUMBER ---> " + grdSearchResults.Columns.Item("PART NUMBER"), _
                "DESCRIPTION ---> " + grdSearchResults.Columns.Item("DESCRIPTION"), _
                "KEYWORD ---> " + grdSearchResults.Columns.Item("KEYWORD"))
    Else
        Call SetDefaultCursor
        MsgBox "No Rows to select, Please Try Again"
    End If

   ' frmVehCostEstimateMain.RefreshForm
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdAddKitToBus_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub cmdClose_Click()
    On Error GoTo Error_Handler
    
    Unload Me
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdClose_Click", g_l_ErrorLineNumber
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    If m_str_Vehicle_number <> "" Then
         cmdAddKitToBus.Visible = True
         'lblAddOEMKitToBus.Caption = "SEARCH FOR OEM KIT TO ADD TO ESTIMATE"
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub ClearGrids()
    On Error GoTo Error_Handler
    
    grdSearchResults.ClearFields
    grdSearchResults.BorderStyle = dbgFixedSingle
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "ClearGrids", g_l_ErrorLineNumber
End Sub

Private Sub cmdSearch_Click()
    On Error GoTo Error_Handler
    
    Call SearchOEMKits
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "SearchOEMKits", g_l_ErrorLineNumber
End Sub

Private Sub SearchOEMKits()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    Call ClearGrids
    
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.SearchOEMKits("CES_INQUIRY.SEARCH_OEM_KITS", _
                                               txtPartNumber.Text, _
                                               txtKitDetailedDescription.Text)
    Set grdSearchResults.DataSource = RS
        
    Set RS = Nothing
    
    Call FormatGrid
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "SearchOEMKits", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
On Error GoTo Error_Handler
    
    Call SetDefaultCursor
    'Keep the form open until the Make Buy Estimate Closes
    If UnloadMode = 0 Then
        Cancel = True
        Me.Hide
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_Unload(Cancel As Integer)
    On Error GoTo Error_Handler
    
    'm_str_Vehicle_number = ""
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Unload", g_l_ErrorLineNumber
End Sub

Private Sub FormatGrid()
    On Error GoTo Error_Handler
    
    grdSearchResults.Columns("DESCRIPTION").Width = 3500
    
    If Not grdSearchResults.Columns.Count < 4 Then
        grdSearchResults.Columns("ID").Visible = False
        grdSearchResults.Columns("ESTIMATED_COST").Visible = False
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "FormatGrid", g_l_ErrorLineNumber
End Sub

Private Sub grdSearchResults_KeyDown(KeyCode As Integer, Shift As Integer)
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_PartID As String
    Dim str_PartNumber As String
    Dim str_Msg As String
    
    On Error GoTo Error_Handler
        
    If KeyCode = vbKeyDelete And grdSearchResults.Row >= 0 Then
        l_Result = MsgBox("Are you sure you want to delete this item?", vbOKCancel)
        If l_Result = vbOK Then
            Call SetWaitCursor
            str_PartID = grdSearchResults.Columns("ID").Text
            str_PartNumber = grdSearchResults.Columns("PART NUMBER").Text
            ' This is flagged for all stockcoded kits, we can only delete temp kits created by users.
            If str_PartID <> "NODELETE" Then
                l_Result = modDBHelper.DeleteVehicleEstimate("CES_DELETE.DELETE_TEMP_OEMKIT", _
                                                    l_RetVal, _
                                                    str_PartNumber)
                If l_Result = 1 Then
                    Call SetDefaultCursor
                    str_Msg = "This OEM Kit is currently attached to vehicle estimates."
                    str_Msg = str_Msg & Chr(13) & "Please remove it from all vehicle estimates before deleting it."
                    MsgBox str_Msg, vbExclamation, "Deleting OEM Kit"
                Else
                    'Insert record for the KIT history into the AUDIT_MODIFY_HISTORY
                    'table.
                    l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "OEM Kit Info was deleted from the System", _
                            str_PartNumber, _
                            "KIT", _
                            "PART NUMBER ---> " + grdSearchResults.Columns("PART NUMBER").Text, _
                            "DESCRIPTION ---> " + grdSearchResults.Columns("DESCRIPTION").Text, _
                            "KEYWORD ---> " + grdSearchResults.Columns("KEYWORD"))
                    Call SearchOEMKits
                End If
            Else
                MsgBox "You cannot delete a Stock Coded Kit.  Delete temp kits only!"
            End If
        End If
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdSearchResults_KeyDown", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub txtKitDetailedDescription_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtKitDetailedDescription edit-box to upper case.
    l_CursorPosition = txtKitDetailedDescription.SelStart
    str_Data = txtKitDetailedDescription.Text
    str_Data = UCase(str_Data)
    txtKitDetailedDescription.Text = str_Data
    txtKitDetailedDescription.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtKitDetailedDescription_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtPartNumber_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtPartNumber edit-box to upper case.
    l_CursorPosition = txtPartNumber.SelStart
    str_Data = txtPartNumber.Text
    str_Data = UCase(str_Data)
    txtPartNumber.Text = str_Data
    txtPartNumber.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtPartNumber_KeyUp", g_l_ErrorLineNumber
End Sub
frmAddRBPToEstimate.frm :
VERSION 5.00
Object = "{F0D2F211-CCB0-11D0-A316-00AA00688B10}#1.0#0"; "msdatlst.ocx"
Begin VB.Form frmAddRBPToEstimate 
   BorderStyle     =   1  'Fixed Single
   ClientHeight    =   3990
   ClientLeft      =   45
   ClientTop       =   330
   ClientWidth     =   7215
   Icon            =   "frmAddRBPToEstimate.frx":0000
   LinkTopic       =   "Form1"
   MaxButton       =   0   'False
   MinButton       =   0   'False
   ScaleHeight     =   3990
   ScaleWidth      =   7215
   ShowInTaskbar   =   0   'False
   StartUpPosition =   3  'Windows Default
   Begin VB.Frame fraRetrieveInformation 
      Caption         =   "Retrieve Information of To Be Added"
      Height          =   855
      Left            =   120
      TabIndex        =   17
      Top             =   120
      Width           =   6975
      Begin VB.CommandButton cmdResolve 
         Caption         =   "Resolve"
         Default         =   -1  'True
         Height          =   375
         Left            =   5280
         TabIndex        =   1
         Top             =   300
         Width           =   1455
      End
      Begin MSDataListLib.DataCombo cboRebuiltNumber 
         Height          =   315
         Left            =   1560
         TabIndex        =   0
         Top             =   300
         Width           =   3495
         _ExtentX        =   6165
         _ExtentY        =   556
         _Version        =   393216
         Text            =   ""
      End
      Begin VB.Label lblRebuiltNumber 
         Caption         =   "Rebuilt Number:"
         Height          =   255
         Left            =   120
         TabIndex        =   18
         Top             =   300
         Width           =   1335
      End
   End
   Begin VB.Frame fraPartInformation 
      Caption         =   "Part Information"
      Height          =   2655
      Left            =   120
      TabIndex        =   10
      Top             =   1200
      Width           =   6975
      Begin VB.TextBox txtPercentUsage 
         Height          =   285
         Left            =   5280
         TabIndex        =   3
         Top             =   1200
         Width           =   1455
      End
      Begin VB.TextBox txtQuantity 
         Height          =   285
         IMEMode         =   3  'DISABLE
         Left            =   1560
         TabIndex        =   2
         Top             =   1200
         Width           =   1995
      End
      Begin VB.TextBox txtLastRevised 
         Enabled         =   0   'False
         Height          =   285
         Left            =   1545
         TabIndex        =   4
         Top             =   1680
         Width           =   2010
      End
      Begin VB.TextBox txtPartUnitCost 
         Enabled         =   0   'False
         Height          =   285
         Left            =   5280
         TabIndex        =   5
         Top             =   1680
         Width           =   1455
      End
      Begin VB.CommandButton cmdAdd 
         Caption         =   "Add"
         Enabled         =   0   'False
         Height          =   375
         Left            =   3810
         TabIndex        =   6
         Top             =   2130
         Width           =   1455
      End
      Begin VB.CommandButton cmdClose 
         Caption         =   "Close"
         Height          =   375
         Left            =   5295
         TabIndex        =   7
         Top             =   2130
         Width           =   1455
      End
      Begin MSDataListLib.DataCombo cboPartDescription 
         Height          =   315
         Left            =   1560
         TabIndex        =   9
         Top             =   720
         Width           =   5175
         _ExtentX        =   9128
         _ExtentY        =   556
         _Version        =   393216
         Enabled         =   0   'False
         BackColor       =   -2147483624
         ForeColor       =   -2147483640
         Text            =   ""
      End
      Begin MSDataListLib.DataCombo cboPartType 
         Height          =   315
         Left            =   1560
         TabIndex        =   8
         Top             =   360
         Width           =   5175
         _ExtentX        =   9128
         _ExtentY        =   556
         _Version        =   393216
         Enabled         =   0   'False
         BackColor       =   -2147483624
         ForeColor       =   -2147483640
         Text            =   ""
      End
      Begin VB.Label lblPartType 
         Caption         =   "Keyword:"
         Height          =   255
         Left            =   120
         TabIndex        =   16
         Top             =   360
         Width           =   1035
      End
      Begin VB.Label lblPartDescription 
         Caption         =   "Description:"
         Height          =   255
         Left            =   120
         TabIndex        =   15
         Top             =   720
         Width           =   1215
      End
      Begin VB.Label lblPercentUsage 
         Alignment       =   1  'Right Justify
         Caption         =   "Percent Usage:"
         Height          =   255
         Left            =   3900
         TabIndex        =   14
         Top             =   1200
         Width           =   1215
      End
      Begin VB.Label lblQuantity 
         Alignment       =   1  'Right Justify
         Caption         =   "Quantity:"
         Height          =   255
         Left            =   60
         TabIndex        =   13
         Top             =   1200
         Width           =   675
      End
      Begin VB.Label lblLastRevised 
         Caption         =   "Last Revised:"
         Height          =   255
         Left            =   120
         TabIndex        =   12
         Top             =   1680
         Width           =   1095
      End
      Begin VB.Label lblPartUnitCost 
         Caption         =   "Part Cost ($/unit):"
         Height          =   255
         Left            =   3900
         TabIndex        =   11
         Top             =   1680
         Width           =   1275
      End
   End
End
Attribute VB_Name = "frmAddRBPToEstimate"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Option Explicit

Private m_str_Msg As String
Private Const m_str_const_MsgBoxCaption As String = "Add / Update Rebuilt Parts"

Private m_var_RowID As Variant
Private m_str_MMSStockCode As String

Public m_str_LinkNumber As String
Public m_str_TypeCode As String
Public m_str_AuditReference As String

'Pass values to populate the form for editing
Public Sub PassValues(ByVal str_RebuiltNum As String, _
                      ByVal str_PercentUsage As String, _
                      ByVal str_Quantity As String, _
                      ByVal var_RowIDPass As Variant)
     On Error GoTo Error_Handler
     
     cboRebuiltNumber.Text = str_RebuiltNum
     Call ResolveRebuiltPart
     txtQuantity.Text = str_Quantity
     txtPercentUsage.Text = Replace(str_PercentUsage, ",", ".")
     m_var_RowID = var_RowIDPass
     cmdAdd.Caption = "Update"
     cmdClose.Visible = False
     cboRebuiltNumber.Enabled = False
     cmdResolve.Enabled = False

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PassValues", g_l_ErrorLineNumber
End Sub

Private Sub cmdAdd_Click()
    Dim l_RetVal As Long
    Dim l_Result As Long
    Dim l_count As Long
    Dim str_PercentUsage As String
    Dim str_CostCentre As String
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    If cboRebuiltNumber.Text = "" Then
         If Not IsNumeric(cboRebuiltNumber.Text) Then
            Call SetDefaultCursor
            m_str_Msg = "Please enter a Rebuilt Number"
            MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
            cboRebuiltNumber.SetFocus
            Exit Sub
         End If
     End If
    If Not IsNumeric(txtQuantity.Text) Then
        Call SetDefaultCursor
        m_str_Msg = "Quantity not entered correctly."
        MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
        txtQuantity.SetFocus
        Exit Sub
    Else
        If Not IsValidLong(txtQuantity.Text) Then
            Call SetDefaultCursor
            m_str_Msg = "Quantity not entered correctly."
            MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
            txtQuantity.SetFocus
            Exit Sub
        End If
    End If
    'Check that quantity is positive number or zero.
    If CLng(txtQuantity.Text) < 0 Then
        Call SetDefaultCursor
        m_str_Msg = "Quantity not entered correctly."
        MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
        txtQuantity.SetFocus
        Exit Sub
    End If
    
    If txtPartUnitCost.Text = "" Then
        txtPartUnitCost.Text = 0
    End If
    
    'Check that user typed something into txtPercentUsage edit-box, and this data is
    'valid percent.
    str_PercentUsage = Trim(txtPercentUsage.Text)
    If str_PercentUsage = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please provide a Percent Usage. Percent Usage can be a "
        m_str_Msg = m_str_Msg + "positive number between 0 and 100 inclusive with "
        m_str_Msg = m_str_Msg + "possible fraction."
        MsgBox m_str_Msg, vbExclamation Or vbOKOnly, m_str_const_MsgBoxCaption
        txtPercentUsage.SetFocus
        Exit Sub
    End If
    If CheckPercent(str_PercentUsage) = False Then
        Call SetDefaultCursor
        m_str_Msg = "Percent Usage is not entered correctly. Percent Usage can be a "
        m_str_Msg = m_str_Msg + "positive number between 0 and 100 inclusive with "
        m_str_Msg = m_str_Msg + "possible fraction."
        MsgBox m_str_Msg, vbExclamation Or vbOKOnly, m_str_const_MsgBoxCaption
        txtPercentUsage.SetFocus
        Exit Sub
    End If
    
    str_PercentUsage = Replace(str_PercentUsage, ".", ",")
    
    'Check that user typed something into the txtQuantity edit-box, and this data is
    'valid quantity.

       
    If cmdAdd.Caption = "Add" Then
        'Before adding check that "Rebuilt Number" is not duplicated in the estimate.
        Set RS = New ADODB.Recordset
        Set RS = modDBHelper.RetrieveRBPUsed("CES_INQUIRY.RETRIEVE_RBP_USED", _
                                             m_str_LinkNumber, _
                                             m_str_TypeCode)
        If RS.RecordCount > 0 Then
            RS.MoveFirst
            For l_count = 0 To RS.RecordCount - 1
                If RS.Fields.Item("REBUILT NUMBER") = cboRebuiltNumber.Text Then
                    Set RS = Nothing
                    Call SetDefaultCursor
                    m_str_Msg = "Record with the same Rebuilt Number is already exist "
                    m_str_Msg = m_str_Msg + "in the current Estimate. Please choose "
                    m_str_Msg = m_str_Msg + "another one."
                    MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
                    cboRebuiltNumber.SetFocus
                    Exit Sub
                End If
                RS.MoveNext
            Next l_count
        End If
        Set RS = Nothing
        
        'Add a new stock coded part
        l_Result = modDBHelper.AddRBPUsed("CES_UPDATE.ADD_RBP_USED", _
                                          l_RetVal, _
                                          m_str_MMSStockCode, _
                                          " ", _
                                          txtQuantity.Text, _
                                          str_PercentUsage, _
                                          g_str_UserName, _
                                          m_str_LinkNumber, _
                                          CCur(txtPartUnitCost.Text), _
                                          cboRebuiltNumber.Text, _
                                          m_str_TypeCode, _
                                          CCur("0.00"))
                                          'CCur(txtCoreCost.Text))
        
        If (l_Result = 0) Then
            Call SetDefaultCursor
            m_str_Msg = "Rebuilt Part has been added."
            MsgBox m_str_Msg, vbInformation Or vbOKOnly, m_str_const_MsgBoxCaption
        Else
            Call SetDefaultCursor
            m_str_Msg = "There was an error adding Stock Coded Part. Please Contact "
            m_str_Msg = m_str_Msg + "Administrator."
            MsgBox m_str_Msg, vbCritical Or vbOKOnly, m_str_const_MsgBoxCaption
        End If
        cmdAdd.Enabled = False
        
        '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT Begin >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        
        'Insert record into the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                l_RetVal, _
                "Add Rebuilt Part", _
                m_str_AuditReference, _
                m_str_TypeCode, _
                "Rebuilt Number ---> " + Trim(cboRebuiltNumber.Text), _
                "Keyword ---> " + Trim(cboPartType.Text), _
                "Description ---> " + Trim(cboPartDescription.Text), _
                "Quantity ---> " + Trim(txtQuantity.Text), _
                "Percent Usage ---> " + Trim(txtPercentUsage.Text), _
                "Last Revised ---> " + Trim(txtLastRevised.Text), _
                "Part Cost ($/unit) ---> " + Trim(txtPartUnitCost.Text))
                
        ' If adding a rebuilt part inside a rebuilt part then cycle
        ' changes to all estimates containing this rebuilt part
        If m_str_TypeCode = "RB" Then
            
            'Now find all estimates where current Rebuilt Part Estimate is present.
            Set RS = New ADODB.Recordset
            
            'In the SC_PARTS_USED table find all Estimates where the current RBE is present.
            Set RS = modDBHelper.RetrieveESTToPropagateRB("CES_INQUIRY.RETRIEVE_EST_TO_PROPAGATE_RB", _
                                                          m_str_AuditReference)
            If RS.RecordCount > 0 Then
                RS.MoveFirst
                    For l_count = 0 To RS.RecordCount - 1
                        'Add records to the AUDIT_MODIFY_HISTORY table.
                        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "Indirect change. Rebuilt Part was added to the Rebuilt Part Estimate " + m_str_AuditReference, _
                            RS.Fields.Item("link_code"), _
                            RS.Fields.Item("link_type"), _
                            "Rebuilt Number ---> " + Trim(cboRebuiltNumber.Text), _
                            "Keyword ---> " + Trim(cboPartType.Text), _
                            "Description ---> " + Trim(cboPartDescription.Text), _
                            "Quantity ---> " + Trim(txtQuantity.Text), _
                            "Percent Usage ---> " + Trim(txtPercentUsage.Text), _
                            "Last Revised ---> " + Trim(txtLastRevised.Text), _
                            "Part Cost ($/unit) ---> " + Trim(txtPartUnitCost.Text))
                        RS.MoveNext
                    Next l_count
            End If
            Set RS = Nothing
                       
        End If
        '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT End >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    Else
        'Update an existing stock coded part
        l_Result = modDBHelper.UpdateRBPUsed("CES_UPDATE.UPDATE_RBP_USED", _
                                             l_RetVal, _
                                             " ", _
                                             txtQuantity.Text, _
                                             str_PercentUsage, _
                                             g_str_UserName, _
                                             m_str_LinkNumber, _
                                             CCur(txtPartUnitCost.Text), _
                                             cboRebuiltNumber.Text, _
                                             m_var_RowID, _
                                             CCur("0.00"))
                                             'CCur(txtCoreCost.Text))
    
        If (l_Result = 0) Then
            Call SetDefaultCursor
            m_str_Msg = "Rebuilt Part has been updated."
            MsgBox m_str_Msg, vbOKOnly Or vbInformation, m_str_const_MsgBoxCaption
        Else
            Call SetDefaultCursor
            m_str_Msg = "There was an error updating Rebuilt Part. Please Contact "
            m_str_Msg = m_str_Msg + "Administrator."
            MsgBox m_str_Msg, vbOKOnly Or vbCritical, m_str_const_MsgBoxCaption
        End If
        
         '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT Begin >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        
        'Insert record into the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                l_RetVal, _
                "Update Rebuilt Part", _
                m_str_AuditReference, _
                m_str_TypeCode, _
                "Rebuilt Number ---> " + Trim(cboRebuiltNumber.Text), _
                "Keyword ---> " + Trim(cboPartType.Text), _
                "Description ---> " + Trim(cboPartDescription.Text), _
                "Quantity ---> " + Trim(txtQuantity.Text), _
                "Percent Usage ---> " + Trim(txtPercentUsage.Text), _
                "Last Revised ---> " + Trim(txtLastRevised.Text), _
                "Part Cost ($/unit) ---> " + Trim(txtPartUnitCost.Text))
                
        ' If updating a rebuilt part inside a rebuilt part then cycle
        ' changes to all estimates containing this rebuilt part
        If m_str_TypeCode = "RB" Then
            
            'Now find all estimates where current Rebuilt Part Estimate is present.
            Set RS = New ADODB.Recordset
            
            'In the SC_PARTS_USED table find all Estimates where the current RBE is present.
            Set RS = modDBHelper.RetrieveESTToPropagateRB("CES_INQUIRY.RETRIEVE_EST_TO_PROPAGATE_RB", _
                                                          m_str_AuditReference)
            If RS.RecordCount > 0 Then
                RS.MoveFirst
                    For l_count = 0 To RS.RecordCount - 1
                        'Add records to the AUDIT_MODIFY_HISTORY table.
                        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "Indirect change. Rebuilt Part was updated from the Rebuilt Part Estimate " + m_str_AuditReference, _
                            RS.Fields.Item("link_code"), _
                            RS.Fields.Item("link_type"), _
                            "Rebuilt Number ---> " + Trim(cboRebuiltNumber.Text), _
                            "Keyword ---> " + Trim(cboPartType.Text), _
                            "Description ---> " + Trim(cboPartDescription.Text), _
                            "Quantity ---> " + Trim(txtQuantity.Text), _
                            "Percent Usage ---> " + Trim(txtPercentUsage.Text), _
                            "Last Revised ---> " + Trim(txtLastRevised.Text), _
                            "Part Cost ($/unit) ---> " + Trim(txtPartUnitCost.Text))
                        RS.MoveNext
                    Next l_count
            End If
            Set RS = Nothing
        End If
        '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT End >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        Unload Me
    End If

    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdAdd_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub cmdClose_Click()
    On Error GoTo Error_Handler
    
    Unload Me
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdClose_Click", g_l_ErrorLineNumber
End Sub

Private Sub ResolveRebuiltPart()
    Dim RS As ADODB.Recordset
    Dim RSCodes As ADODB.Recordset
    Dim RSLinks As ADODB.Recordset
    Dim RBPGraph As clsGraph
    Dim str_Cycle As String
    
    'Fills in the rest of the fields from the Rebuilt Code
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor

    Set RS = New ADODB.Recordset
    'Query the database to receive the information about the part
    'First populate the rebuilt information
    Set RS = modDBHelper.RetrieveRB("CES_INQUIRY.RETRIEVE_RB")
    RS.Filter = "rebuilt_stock_num = '" + cboRebuiltNumber.Text + "'"
    If RS.RecordCount > 0 Then
        RS.MoveFirst
        
        ' Before resolving the rebuilt part ensure that this part can legally be
        ' added with out creating any cycles of rebuilt parts in the system
        If m_str_TypeCode = "RB" Then
            ' Get all of the rebuilt part codes that are used and the links to other rebuilt parts
            Set RSCodes = modDBHelper.RetrieveRBPUsedDistinct("CES_INQUIRY.RETRIEVE_RBP_USED_DISTINCT")
            Set RSLinks = modDBHelper.RetrieveRBPUsedLinks("CES_INQUIRY.RETRIEVE_RBP_USED_LINKS")
            ' Now create a Graph of all Rebuilt Parts contained and containing other
            ' Rebuilt Parts
            Set RBPGraph = New clsGraph
            ' Add the vertices which are the Rebuilt Parts
            If RSCodes.RecordCount > 0 Then
                RSCodes.MoveFirst
                While Not RSCodes.EOF
                    RBPGraph.AddVertex UCase(RSCodes.Fields.Item("mms_rebuilt_code"))
                    RSCodes.MoveNext
                Wend
            End If
            ' Add the edges which show which rebuilt parts belong to which others
            If RSLinks.RecordCount > 0 Then
                RSLinks.MoveFirst
                While Not RSLinks.EOF
                    RBPGraph.AddEdge UCase(RSLinks.Fields.Item("mms_rebuilt_code")), UCase(RSLinks.Fields.Item("link_code"))
                    RSLinks.MoveNext
                Wend
            End If
            ' Now add the edge to represent the part to be added
            If Not RBPGraph.VertexExists(UCase(RS.Fields.Item("rebuilt_stock_num"))) Then
                RBPGraph.AddVertex UCase(RS.Fields.Item("rebuilt_stock_num"))
            End If
            If Not RBPGraph.VertexExists(UCase(m_str_LinkNumber)) Then
                RBPGraph.AddVertex UCase(m_str_LinkNumber)
            End If
            RBPGraph.AddEdge UCase(RS.Fields.Item("rebuilt_stock_num")), UCase(m_str_LinkNumber)
            ' Now use the graph object representing the rebuilt parts to determine
            ' whether or not any cycles exist
            If RBPGraph.CycleExists Then
                ' There is a cycle.  We must identify it
                str_Cycle = RBPGraph.FindCycle()
                ' Clean up and show message
                Call SetDefaultCursor
                Set RS = Nothing
                Set RSCodes = Nothing
                Set RSLinks = Nothing
                Set RBPGraph = Nothing
                cmdAdd.Enabled = False
                m_str_Msg = "Error. Adding this Rebuilt Part would create the following invalid cycle of Rebuilt Parts:"
                m_str_Msg = m_str_Msg & Chr(13) & str_Cycle
                MsgBox m_str_Msg, vbExclamation Or vbOKOnly, m_str_const_MsgBoxCaption
                Exit Sub
            End If
        End If
        
        'Load the values into the text boxes
        cboRebuiltNumber.Text = RS.Fields.Item("rebuilt_stock_num")
        cboPartType.Text = RS.Fields.Item("keyword")
        cboPartDescription.Text = RS.Fields.Item("detailed_desc")
      
        txtLastRevised.Text = IIf(IsNull(RS.Fields.Item("date_modified")), "", _
                                  RS.Fields.Item("date_modified"))
        If IsNull(RS.Fields.Item("mms_stock_code")) = True Then
            m_str_MMSStockCode = ""
        Else
            m_str_MMSStockCode = RS.Fields.Item("mms_stock_code")
        End If
        
       'Retrieve the material cost of the rebuilt part resolved
       Set RS = modDBHelper.RetrieveRBPTotalCost2("CES_INQUIRY.RETRIEVE_RBP_TOTAL_COST2", cboRebuiltNumber.Text, "RB")
              
       If RS.RecordCount > 0 Then
           txtPartUnitCost.Text = Format(ColumnTotals(RS, "TOTAL COST"), "currency")
       Else
           txtPartUnitCost.Text = "0"
       End If
       cmdAdd.Enabled = True
       cmdResolve.Default = False
       cmdAdd.Default = True
    Else
        Call SetDefaultCursor
        'Cannot find the part
        cmdAdd.Enabled = False
        cmdAdd.Default = False
        cmdResolve.Default = True
        m_str_Msg = "No information for the Rebuilt Number."
        MsgBox m_str_Msg, vbExclamation Or vbOKOnly, m_str_const_MsgBoxCaption
        'cboRebuiltNumber.SetFocus
    End If
    
    Set RS = Nothing
    Set RSCodes = Nothing
    Set RSLinks = Nothing
    Set RBPGraph = Nothing
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "ResolveRebuiltPart", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    If Not RSCodes Is Nothing Then
        Set RSCodes = Nothing
    End If
    If Not RSLinks Is Nothing Then
        Set RSLinks = Nothing
    End If
    If Not RBPGraph Is Nothing Then
        Set RBPGraph = Nothing
    End If
End Sub

Private Sub cmdResolve_Click()
    On Error GoTo Error_Handler
    
    Call ResolveRebuiltPart
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdResolve_Click", g_l_ErrorLineNumber
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    cboPartDescription.Enabled = False
    cboPartType.Enabled = False

    Call PopulateFields
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub PopulateFields()
    Dim RS As New ADODB.Recordset
    
    'Populate each of the combo boxes
    
    On Error GoTo Error_Handler
    
    Set cboRebuiltNumber.RowSource = modDBHelper.PopulateRBComboBoxes( _
                                                "CES_INQUIRY.POPULATE_RB_COMBOXES", _
                                                "1")
    cboRebuiltNumber.ListField = "rebuilt_stock_num"

    Set cboPartType.RowSource = modDBHelper.PopulateRBComboBoxes( _
                                                "CES_INQUIRY.POPULATE_RB_COMBOXES", _
                                                "2")
    cboPartType.ListField = "keyword"

    Set cboPartDescription.RowSource = modDBHelper.PopulateRBComboBoxes( _
                                                "CES_INQUIRY.POPULATE_RB_COMBOXES", _
                                                "3")
    cboPartDescription.ListField = "detailed_desc"
           
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateFields", g_l_ErrorLineNumber
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler

    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub txtPercentUsage_GotFocus()
    On Error GoTo Error_Handler

    txtPercentUsage.SelStart = 0
    txtPercentUsage.SelLength = Len(txtPercentUsage.Text)
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtPercentUsage_GotFocus", g_l_ErrorLineNumber
End Sub

Private Sub txtQuantity_GotFocus()
    On Error GoTo Error_Handler

    txtQuantity.SelStart = 0
    txtQuantity.SelLength = Len(txtQuantity.Text)
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtQuantity_GotFocus", g_l_ErrorLineNumber
End Sub
frmAddRebuiltPart.frm :
VERSION 5.00
Object = "{F0D2F211-CCB0-11D0-A316-00AA00688B10}#1.0#0"; "MSDATLST.OCX"
Begin VB.Form frmAddRebuiltPart 
   BorderStyle     =   3  'Fixed Dialog
   Caption         =   "Add Rebuilt Part"
   ClientHeight    =   5070
   ClientLeft      =   45
   ClientTop       =   330
   ClientWidth     =   9165
   Icon            =   "frmAddRebuiltPart.frx":0000
   LinkTopic       =   "Form5"
   MaxButton       =   0   'False
   MinButton       =   0   'False
   NegotiateMenus  =   0   'False
   ScaleHeight     =   5070
   ScaleWidth      =   9165
   ShowInTaskbar   =   0   'False
   StartUpPosition =   2  'CenterScreen
   Begin VB.Frame AddRBPart 
      Caption         =   "Add Rebuilt Part to the System"
      Height          =   4875
      Left            =   165
      TabIndex        =   14
      Top             =   105
      Width           =   8940
      Begin VB.CommandButton cmdImage 
         Caption         =   "Rebuilt Part Picture"
         Default         =   -1  'True
         Height          =   375
         Left            =   4720
         TabIndex        =   29
         Top             =   4365
         Width           =   1715
      End
      Begin VB.OptionButton radioNonActive 
         Caption         =   "Non Active"
         Height          =   360
         Left            =   2805
         TabIndex        =   27
         Top             =   4035
         Width           =   1200
      End
      Begin VB.OptionButton radioActive 
         Caption         =   "Active"
         Height          =   315
         Left            =   1680
         TabIndex        =   26
         Top             =   4050
         Value           =   -1  'True
         Width           =   1215
      End
      Begin VB.ListBox lstListOfBuses 
         Height          =   3570
         Left            =   4680
         MultiSelect     =   2  'Extended
         TabIndex        =   10
         Top             =   660
         Width           =   4140
      End
      Begin VB.CommandButton cmdClearSelection 
         Caption         =   "Clear Selection"
         Height          =   375
         Left            =   7440
         TabIndex        =   13
         Top             =   240
         Width           =   1305
      End
      Begin VB.CommandButton cmdReload 
         Caption         =   "Reload"
         Height          =   375
         Left            =   4800
         TabIndex        =   12
         Top             =   240
         Width           =   1185
      End
      Begin VB.TextBox txtSOPNumber 
         Height          =   315
         Left            =   1680
         TabIndex        =   7
         Top             =   2820
         Width           =   1995
      End
      Begin VB.TextBox txtRemanufacturedCost 
         Height          =   315
         Left            =   1680
         TabIndex        =   9
         Top             =   3525
         Width           =   1995
      End
      Begin VB.TextBox txtBuyCost 
         Height          =   315
         Left            =   1680
         TabIndex        =   8
         Top             =   3180
         Width           =   1995
      End
      Begin VB.CommandButton cmdAdd 
         Caption         =   "Add"
         Height          =   375
         Left            =   7560
         TabIndex        =   11
         Top             =   4365
         Width           =   1215
      End
      Begin VB.TextBox txtMMSStockCode 
         Height          =   315
         Left            =   1680
         TabIndex        =   4
         Top             =   1740
         Width           =   1995
      End
      Begin VB.TextBox txtCoreChargeCode 
         Height          =   315
         Left            =   1680
         TabIndex        =   6
         Top             =   2460
         Width           =   1995
      End
      Begin VB.TextBox txtCoreStockCode 
         Height          =   315
         Left            =   1680
         TabIndex        =   5
         Top             =   2100
         Width           =   1995
      End
      Begin VB.TextBox txtRebuiltStockCode 
         Height          =   315
         Left            =   1680
         TabIndex        =   0
         Top             =   300
         Width           =   1395
      End
      Begin VB.TextBox txtDetailedDescription 
         Height          =   315
         Left            =   1680
         TabIndex        =   1
         Top             =   660
         Width           =   2775
      End
      Begin MSDataListLib.DataCombo cboKeyword 
         Height          =   315
         Left            =   1680
         TabIndex        =   2
         Top             =   1020
         Width           =   2775
         _ExtentX        =   4895
         _ExtentY        =   556
         _Version        =   393216
         Text            =   ""
      End
      Begin MSDataListLib.DataCombo cboJobNumber 
         Height          =   315
         Left            =   1680
         TabIndex        =   3
         Top             =   1380
         Width           =   2775
         _ExtentX        =   4895
         _ExtentY        =   556
         _Version        =   393216
         Text            =   ""
      End
      Begin VB.Frame frmActiveNonActive 
         Height          =   540
         Left            =   1620
         TabIndex        =   28
         Top             =   3885
         Width           =   2400
      End
      Begin VB.Label lblListOfBuses 
         Caption         =   "List of Vehicles"
         Height          =   240
         Left            =   6240
         TabIndex        =   25
         Top             =   300
         Width           =   1080
      End
      Begin VB.Label lblRemanufacturedCost 
         Caption         =   "Remanufactured Cost"
         Height          =   495
         Left            =   90
         TabIndex        =   24
         Top             =   3525
         Width           =   1335
      End
      Begin VB.Label lblBuyCost 
         Caption         =   "Buy Cost:"
         Height          =   255
         Left            =   150
         TabIndex        =   23
         Top             =   3180
         Width           =   1095
      End
      Begin VB.Label lblSOPNumber 
         Caption         =   "SOP Number:"
         Height          =   225
         Left            =   135
         TabIndex        =   22
         Top             =   2835
         Width           =   1335
      End
      Begin VB.Label lblRebuiltStockCode 
         BackColor       =   &H80000000&
         Caption         =   "Rebuilt Stock Code:"
         Height          =   225
         Left            =   150
         TabIndex        =   21
         Top             =   330
         Width           =   1440
      End
      Begin VB.Label lblCoreChargeCode 
         BackColor       =   &H80000000&
         Caption         =   "Core Cost:"
         Height          =   240
         Left            =   135
         TabIndex        =   20
         Top             =   2505
         Width           =   1395
      End
      Begin VB.Label lblJobNumber 
         BackColor       =   &H80000000&
         Caption         =   "Job Number:"
         Height          =   210
         Left            =   150
         TabIndex        =   19
         Top             =   1410
         Width           =   930
      End
      Begin VB.Label lblKeyword 
         BackColor       =   &H80000000&
         Caption         =   "Keyword:"
         Height          =   285
         Left            =   150
         TabIndex        =   18
         Top             =   1065
         Width           =   795
      End
      Begin VB.Label lblMMSStockCode 
         BackColor       =   &H80000000&
         Caption         =   "MMS Buy Code:"
         Height          =   225
         Left            =   135
         TabIndex        =   17
         Top             =   1785
         Width           =   1410
      End
      Begin VB.Label lblCoreStockCode 
         BackColor       =   &H80000000&
         Caption         =   "Core Code:"
         Height          =   285
         Left            =   135
         TabIndex        =   16
         Top             =   2115
         Width           =   1425
      End
      Begin VB.Label lblDetailedDescription 
         BackColor       =   &H80000000&
         Caption         =   "Description:"
         Height          =   225
         Left            =   150
         TabIndex        =   15
         Top             =   660
         Width           =   900
      End
   End
End
Attribute VB_Name = "frmAddRebuiltPart"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Option Explicit

Private m_str_Msg As String
Private m_l_Selected() As Long
Private m_l_ArraySize As Long

'Only up to 10 selected buses from the lstListOfBuses list-box will be saved into the
'AUDIT_MODIFY_HISTORY table. If you want increase this quantity, you should increase
'next constant variable, and make changes in the InsertIntoAuditModifyHistory call.

Private Const m_const_l_SelectedBusesSize As Long = 9
Private m_str_SelectedBuses() As String

Public m_b_imgChanged As Boolean
Public m_str_imgRBPNumber As String
Private m_str_RBPImgPath As String
Public m_str_MMSStockCode As String
Public m_str_RebuiltCode As String
Public m_var_RowID As Variant
Public m_str_AuditReference As String

Private Sub cmdAdd_Click()
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim l_count As Long
    Dim l_Count1 As Long
    Dim str_RebuiltStockCode As String
    Dim str_RBStockCodeFromDB As String
    Dim str_MMSStockCode As String
    Dim str_MMSStockCodeFromDB As String
    Dim str_DetailedDescription As String
    Dim str_Keyword As String
    Dim str_CoreStockCode As String
    Dim str_JobNumber As String
    Dim str_CoreCost As String
    Dim str_BuyCost As String
    Dim str_ExternalCost As String
    Dim str_RemanufacturedCost As String

    Dim RS As Recordset
    
    On Error GoTo Error_Handler
 
    Call SetWaitCursor
    
    str_RebuiltStockCode = Trim(txtRebuiltStockCode.Text)
    If str_RebuiltStockCode = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Rebuilt Stock Code should not be empty."
        MsgBox m_str_Msg, vbInformation + vbOKOnly
        txtRebuiltStockCode.SetFocus
        Exit Sub
    End If
    
    str_DetailedDescription = Trim(txtDetailedDescription.Text)
    If str_DetailedDescription = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Description should not be empty."
        MsgBox m_str_Msg, vbInformation + vbOKOnly
        txtDetailedDescription.SetFocus
        Exit Sub
    End If
    
    str_Keyword = Trim(cboKeyword.Text)
    If str_Keyword = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Keyword should not be empty."
        MsgBox m_str_Msg, vbInformation + vbOKOnly
        cboKeyword.SetFocus
        Exit Sub
    End If
    
    str_JobNumber = Trim(cboJobNumber.Text)
    'Job Number should be a number.
    If str_JobNumber = "" Then
        'Call SetDefaultCursor
        'm_str_Msg = "Job Number should be a number."
        'MsgBox m_str_Msg, vbInformation + vbOKOnly
        'cboJobNumber.SetFocus
        str_JobNumber = " "
        'Exit Sub
    Else
        If IsNumeric(str_JobNumber) = False Then
            Call SetDefaultCursor
            m_str_Msg = "Job Number should be a number."
            MsgBox m_str_Msg, vbInformation + vbOKOnly
            cboJobNumber.SetFocus
            Exit Sub
        End If
    End If
    
    str_MMSStockCode = Trim(txtMMSStockCode.Text)
    If str_MMSStockCode = "" Then
        Call SetDefaultCursor
        m_str_Msg = "MMS Buy Code should not be empty."
        MsgBox m_str_Msg, vbInformation + vbOKOnly
        txtMMSStockCode.SetFocus
        Exit Sub
    End If

    str_CoreStockCode = Trim(txtCoreStockCode.Text)

    str_CoreCost = Trim(txtCoreChargeCode.Text)
    'Core Cost should be numeric (currency).
    If str_CoreCost <> "" Then
        If IsValidCurrency(str_CoreCost) = False Then
            Call SetDefaultCursor
            m_str_Msg = "Core Cost should be a number."
            MsgBox m_str_Msg, vbInformation + vbOKOnly
            txtCoreChargeCode.SetFocus
            Exit Sub
        End If
    Else
        txtCoreChargeCode.Text = "0.00"
    End If
    txtCoreChargeCode.Text = CStr(CDbl(txtCoreChargeCode.Text))
    str_CoreCost = txtCoreChargeCode.Text

    str_BuyCost = Trim(txtBuyCost.Text)
    'Buy Cost should be numeric (currency).
    If str_BuyCost <> "" Then
        If IsValidCurrency(str_BuyCost) = False Then
            Call SetDefaultCursor
            m_str_Msg = "Buy Cost should be a number."
            MsgBox m_str_Msg, vbInformation + vbOKOnly
            txtBuyCost.SetFocus
            Exit Sub
        End If
    End If

'    str_ExternalCost = Trim(txtExternalCost.Text)
'    'External Cost should be numeric (currency).
'    If str_ExternalCost <> "" Then
'        If IsValidCurrency(str_ExternalCost) = False Then
'            Call SetDefaultCursor
'            m_str_Msg = "External Cost should be a number."
'            MsgBox m_str_Msg, vbInformation + vbOKOnly
'            txtExternalCost.SetFocus
'            Exit Sub
'        End If
'    End If

    str_RemanufacturedCost = Trim(txtRemanufacturedCost.Text)
    'Remanufactured Cost should be numeric (currency).
    If str_RemanufacturedCost = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Remanufactured Cost should be a number."
        MsgBox m_str_Msg, vbInformation + vbOKOnly
        txtRemanufacturedCost.SetFocus
        Exit Sub
    Else
        If IsValidCurrency(str_RemanufacturedCost) = False Then
            Call SetDefaultCursor
            m_str_Msg = "Remanufactured Cost should be a number."
            MsgBox m_str_Msg, vbInformation + vbOKOnly
            txtRemanufacturedCost.SetFocus
            Exit Sub
        End If
    End If
    
    'Make sure that user choused at least one bus from the lstListOfBuses list-box.
    If lstListOfBuses.ListCount > 0 Then
        If lstListOfBuses.SelCount = 0 Then
            Call SetDefaultCursor
            m_str_Msg = "Please choose Vehicle."
            MsgBox m_str_Msg
            lstListOfBuses.SetFocus
            Exit Sub
        End If
    Else
        Call SetDefaultCursor
        'No items in the lstListOfBuses list-box. But user should choose some bus.
        m_str_Msg = "No vehicles to choose from. Make Buy will not be "
        m_str_Msg = m_str_Msg + "added. Report this error to Supervisor."
        MsgBox m_str_Msg
        lstListOfBuses.SetFocus
        Exit Sub
    End If
    
    If cmdAdd.Caption = "Add" Then
        'Make sure that data in the txtRebuiltStockCode edit-box is not in the
        'RB_MASTERLIST.MMS_STOCK_CODE field.
        
        Set RS = New ADODB.Recordset
        Set RS = modDBHelper.RetrieveRB("CES_INQUIRY.RETRIEVE_RB")
        
        If Not IsNull(RS) And RS.RecordCount > 0 Then
            RS.MoveFirst
            For l_count = 1 To RS.RecordCount
                str_RBStockCodeFromDB = RS.Fields.Item("REBUILT_STOCK_NUM")
                If str_RebuiltStockCode = str_RBStockCodeFromDB Then
                    Call SetDefaultCursor
                    m_str_Msg = "Rebuilt Stock Code is duplicated. Please provide another one."
                    MsgBox m_str_Msg, vbInformation + vbOKOnly
                    Set RS = Nothing
                    txtRebuiltStockCode.SetFocus
                    Exit Sub
                End If
                RS.MoveNext
            Next l_count
            RS.MoveFirst
        End If
        
        'Set RS = modDBHelper.RetrieveRB("CES_INQUIRY.RETRIEVE_RB")
        If Not IsNull(RS) And RS.RecordCount > 0 Then
            RS.MoveFirst
            For l_count = 1 To RS.RecordCount
                If IsNull(RS.Fields.Item("MMS_STOCK_CODE")) = False Then
                    str_MMSStockCodeFromDB = RS.Fields.Item("MMS_STOCK_CODE")
                    If str_MMSStockCode = str_MMSStockCodeFromDB Then
                        Call SetDefaultCursor
                        m_str_Msg = "MMS Stock Code is duplicated. Please provide another one."
                        MsgBox m_str_Msg, vbInformation + vbOKOnly
                        Set RS = Nothing
                        txtMMSStockCode.SetFocus
                        Exit Sub
                    End If
                End If
                RS.MoveNext
            Next l_count
        End If
    
        l_Result = modDBHelper.AddRBEstimate("CES_UPDATE.ADD_RB_ESTIMATE", _
                                             l_RetVal, _
                                             g_str_UserName, _
                                             str_JobNumber, _
                                             str_CoreCost, _
                                             str_RebuiltStockCode, _
                                             str_CoreStockCode, _
                                             str_Keyword, _
                                             str_DetailedDescription, _
                                             str_MMSStockCode, _
                                             Trim(txtSOPNumber.Text), _
                                             str_BuyCost, _
                                             str_RemanufacturedCost, _
                                             str_ExternalCost, _
                                             radioActive.Value)
    
        'Now we need go through all items in the lstListOfBuses list-box,
        'find only selected items and save data to the RB_LIST_OF_BUSES table.
        ReDim m_str_SelectedBuses(m_const_l_SelectedBusesSize)
        l_Count1 = 0
        
        For l_count = 0 To lstListOfBuses.ListCount - 1
            If lstListOfBuses.Selected(l_count) = True Then
                l_Result = modDBHelper.InsertRBListOFBuses( _
                                            "CES_UPDATE.INSERT_RB_LIST_OF_BUSES", _
                                            l_RetVal, _
                                            str_RebuiltStockCode, _
                                            lstListOfBuses.ItemData(l_count))
                If l_Count1 < m_const_l_SelectedBusesSize + 1 Then
                    m_str_SelectedBuses(l_Count1) = lstListOfBuses.List(l_count)
                End If
                l_Count1 = l_Count1 + 1
            End If
        Next l_count
        'Add record to the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, "Rebuilt Part Info was added to the System", _
                            str_RebuiltStockCode, "RB", _
                            "Rebuilt Stock Code ---> " + str_RebuiltStockCode, _
                            "Description ---> " + str_DetailedDescription, _
                            "Keyword ---> " + str_Keyword, _
                            "Job Number ---> " + str_JobNumber, _
                            "MMS Buy Code ---> " + str_MMSStockCode, _
                            "Core Code ---> " + str_CoreStockCode, _
                            "Core Cost ---> " + str_CoreCost, _
                            "SOP Number ---> " + Trim(txtSOPNumber.Text), _
                            "Buy Cost ---> " + str_BuyCost, _
                            "External Cost ---> " + str_ExternalCost, _
                            "Remanufactured Cost ---> " + str_RemanufacturedCost, _
                            "Selected Bus 1 ---> " + m_str_SelectedBuses(0), _
                            "Selected Bus 2 ---> " + m_str_SelectedBuses(1), _
                            "Selected Bus 3 ---> " + m_str_SelectedBuses(2), _
                            "Selected Bus 4 ---> " + m_str_SelectedBuses(3), _
                            "Selected Bus 5 ---> " + m_str_SelectedBuses(4), _
                            "Selected Bus 6 ---> " + m_str_SelectedBuses(5), _
                            "Selected Bus 7 ---> " + m_str_SelectedBuses(6), _
                            "Selected Bus 8 ---> " + m_str_SelectedBuses(7), _
                            "Selected Bus 9 ---> " + m_str_SelectedBuses(8), _
                            "Selected Bus 10 ---> " + m_str_SelectedBuses(9))
        
        If (l_Result = 0) Then
            Call SetDefaultCursor
            m_str_Msg = "Rebuilt Estimate Has been added"
            MsgBox m_str_Msg
            Form_Unload 1
        Else
            Call SetDefaultCursor
            m_str_Msg = "There was an error adding Rebuilt Estimate. Please Contact "
            m_str_Msg = m_str_Msg + "Administrator"
            MsgBox m_str_Msg
        End If
    Else 'If cmdAdd.Caption = "Update" Then
        l_Result = modDBHelper.UpdateRBEstimate("CES_UPDATE.UPDATE_RB_ESTIMATE", _
                                                l_RetVal, _
                                                g_str_UserName, _
                                                str_JobNumber, _
                                                str_CoreCost, _
                                                str_RebuiltStockCode, _
                                                str_CoreStockCode, _
                                                str_Keyword, _
                                                str_DetailedDescription, _
                                                str_MMSStockCode, _
                                                Trim(txtSOPNumber.Text), _
                                                str_BuyCost, _
                                                str_RemanufacturedCost, _
                                                str_ExternalCost, _
                                                radioActive.Value)

        'Delete all records from the RB_LIST_OF_BUSES table where
        'RB_LIST_OF_BUSES.REBUILT_STOCK_NUM = str_RebuiltStockCode
        l_Result = modDBHelper.DeleteRBListOFBuses( _
                                    "CES_DELETE.DELETE_RB_LIST_OF_BUSES", _
                                    l_RetVal, _
                                    str_RebuiltStockCode)

        'Now we need go through all items in the lstListOfBuses list-box,
        'find only selected items and save data to the RB_LIST_OF_BUSES table.
        ReDim m_str_SelectedBuses(m_const_l_SelectedBusesSize)
        l_Count1 = 0
        
        For l_count = 0 To lstListOfBuses.ListCount - 1
            If lstListOfBuses.Selected(l_count) = True Then
                l_Result = modDBHelper.InsertRBListOFBuses( _
                                            "CES_UPDATE.INSERT_RB_LIST_OF_BUSES", _
                                            l_RetVal, _
                                            str_RebuiltStockCode, _
                                            lstListOfBuses.ItemData(l_count))
                If l_Count1 < m_const_l_SelectedBusesSize + 1 Then
                    m_str_SelectedBuses(l_Count1) = lstListOfBuses.List(l_count)
                End If
                l_Count1 = l_Count1 + 1
            End If
        Next l_count
    
        If (l_Result = 0) Then
            Call SetDefaultCursor
            m_str_Msg = "Rebuilt Estimate Has been updated."
            MsgBox m_str_Msg
            'Refresh frmRebuiltPartsMain form with updated data.
            frmRebuiltPartsMain.m_str_RBNumber = str_RebuiltStockCode
            frmRebuiltPartsMain.m_str_LinkNumber = str_MMSStockCode
            Call frmRebuiltPartsMain.Populate
            Call frmSearchPart.FillGrids
            Form_Unload 1
        Else
            Call SetDefaultCursor
            m_str_Msg = "Rebuilt Estimate has not been updated."
            MsgBox m_str_Msg
            Form_Unload 1
            Exit Sub
        End If
    
        '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT Begin >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        'Add record to the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, "Rebuilt Part Info was edited in the System", _
                            str_RebuiltStockCode, "RB", _
                            "Rebuilt Stock Code ---> " + str_RebuiltStockCode, _
                            "Description ---> " + str_DetailedDescription, _
                            "Keyword ---> " + str_Keyword, _
                            "Job Number ---> " + str_JobNumber, _
                            "MMS Buy Code ---> " + str_MMSStockCode, _
                            "Core Code ---> " + str_CoreStockCode, _
                            "Core Cost ---> " + str_CoreCost, _
                            "SOP Number ---> " + Trim(txtSOPNumber.Text), _
                            "Buy Cost ---> " + str_BuyCost, _
                            "External Cost ---> " + str_ExternalCost, _
                            "Remanufactured Cost ---> " + str_RemanufacturedCost, _
                            "Selected Bus 1 ---> " + m_str_SelectedBuses(0), _
                            "Selected Bus 2 ---> " + m_str_SelectedBuses(1), _
                            "Selected Bus 3 ---> " + m_str_SelectedBuses(2), _
                            "Selected Bus 4 ---> " + m_str_SelectedBuses(3), _
                            "Selected Bus 5 ---> " + m_str_SelectedBuses(4), _
                            "Selected Bus 6 ---> " + m_str_SelectedBuses(5), _
                            "Selected Bus 7 ---> " + m_str_SelectedBuses(6), _
                            "Selected Bus 8 ---> " + m_str_SelectedBuses(7), _
                            "Selected Bus 9 ---> " + m_str_SelectedBuses(8), _
                            "Selected Bus 10 ---> " + m_str_SelectedBuses(9))
        
        'Now find all estimates where current Rebuilt Part Estimate is present.
        Set RS = New ADODB.Recordset
        
        'In the SC_PARTS_USED table find all Estimates where the current RBE is present.
        Set RS = modDBHelper.RetrieveESTToPropagateRB("CES_INQUIRY.RETRIEVE_EST_TO_PROPAGATE_RB", _
                                                      m_str_AuditReference)
        If RS.RecordCount > 0 Then
            RS.MoveFirst
            For l_count = 0 To RS.RecordCount - 1
                'Add records to the AUDIT_MODIFY_HISTORY table.
                l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                        "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", l_RetVal, _
                        "Indirect change. Rebuilt Part Info was edited in the Rebuilt Part Estimate " + m_str_AuditReference, _
                        RS.Fields.Item("link_code"), _
                        RS.Fields.Item("link_type"), _
                        "Rebuilt Stock Code ---> " + str_RebuiltStockCode, _
                        "Description ---> " + str_DetailedDescription, _
                        "Keyword ---> " + str_Keyword, _
                        "Job Number ---> " + str_JobNumber, _
                        "MMS Buy Code ---> " + str_MMSStockCode, _
                        "Core Code ---> " + str_CoreStockCode, _
                        "Core Cost ---> " + str_CoreCost, _
                        "SOP Number ---> " + Trim(txtSOPNumber.Text), _
                        "Buy Cost ---> " + str_BuyCost, _
                        "External Cost ---> " + str_ExternalCost, _
                        "Remanufactured Cost ---> " + str_RemanufacturedCost, _
                        "Selected Bus 1 ---> " + m_str_SelectedBuses(0), "Selected Bus 2 ---> " + m_str_SelectedBuses(1), _
                        "Selected Bus 3 ---> " + m_str_SelectedBuses(2), "Selected Bus 4 ---> " + m_str_SelectedBuses(3), _
                        "Selected Bus 5 ---> " + m_str_SelectedBuses(4), "Selected Bus 6 ---> " + m_str_SelectedBuses(5), _
                        "Selected Bus 7 ---> " + m_str_SelectedBuses(6), "Selected Bus 8 ---> " + m_str_SelectedBuses(7), _
                        "Selected Bus 9 ---> " + m_str_SelectedBuses(8), "Selected Bus 10 ---> " + m_str_SelectedBuses(9))
                RS.MoveNext
            Next l_count
        End If
        '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT End >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    End If
    
    If m_b_imgChanged Then
        Dim fso As New FileSystemObject
        Dim fil1 As Object 'will recieve a file object

        Set RS = New ADODB.Recordset
        Set RS = modDBHelper.RetrieveCESSettings("CES_INQUIRY.RETRIEVE_CES_SETTI", "RBP_IMAGES_PATH")
        If RS.RecordCount = 1 Then
            m_str_RBPImgPath = RS.Fields.Item("VALUE")
        End If
        
        m_str_RBPImgPath = m_str_RBPImgPath & "TEMP.jpg"
        
        If fso.FileExists(m_str_RBPImgPath) Then
            Set fil1 = fso.GetFile(m_str_RBPImgPath)
            'Change file name to required format
            fil1.Name = "IMG_" & str_RebuiltStockCode & ".jpg"
        End If

        Set RS = Nothing
        Set fso = Nothing
        m_b_imgChanged = False
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdAdd_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub cmdClearSelection_Click()
    Dim l_count As Long
    
    On Error GoTo Error_Handler

    'If some items are selected, make them unselected.
    For l_count = 0 To lstListOfBuses.ListCount - 1
        If lstListOfBuses.Selected(l_count) = True Then
            lstListOfBuses.Selected(l_count) = False
        End If
    Next l_count
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdClearSelection_Click", g_l_ErrorLineNumber
End Sub

Private Sub cmdImage_Click()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    frmRebuiltPartImage.m_str_RBNumber = m_str_imgRBPNumber
    frmRebuiltPartImage.Show vbModal
    
    Exit Sub
    
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdImage_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub cmdReload_Click()
    Dim l_count As Long
    
    On Error GoTo Error_Handler
    Call SetWaitCursor

    'First remove all selection from the lstListOfBuses list-box
    For l_count = 0 To lstListOfBuses.ListCount - 1
        lstListOfBuses.Selected(l_count) = False
    Next l_count

    'Restore initial selections in the lstListOfBuses list-box.
    For l_count = 0 To m_l_ArraySize
        lstListOfBuses.Selected(m_l_Selected(l_count)) = True
    Next l_count
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdReload_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    Call PopulateListOfBuses
    
    m_b_imgChanged = False
    m_str_imgRBPNumber = m_str_RebuiltCode
    
    If (m_str_RebuiltCode <> "" And Not IsNull(m_str_RebuiltCode)) Then
        cmdAdd.Caption = "Update"
        Me.Caption = "Update Rebuilt Part Estimate"

        txtRebuiltStockCode.BackColor = &H80000018
        'txtMMSStockCode.BackColor = &H80000018
        txtRebuiltStockCode.Enabled = False
        'txtMMSStockCode.Enabled = False
        Call PopulateInputBoxes
        Call HighlightItemsInTheListBox
    Else
        cmdReload.Enabled = False
    End If
    Call PopulateDropdowns
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub HighlightItemsInTheListBox()
    Dim RS As ADODB.Recordset
    Dim l_count As Long
    Dim l_Count1 As Long
    Dim l_ListID As Long
    
    On Error GoTo Error_Handler

    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.RetrieveRBListOfBuses("CES_INQUIRY.RB_LIST_BUSES", _
                                               Trim(txtRebuiltStockCode.Text))

    m_l_ArraySize = -1
    'Go through whole recordset and highlight all corresponded items in the
    'lstListOfBuses list-box.
    If RS.RecordCount > 0 Then
        RS.MoveFirst
        For l_count = 1 To RS.RecordCount
            l_ListID = CLng(RS.Fields.Item("LIST_ID"))
            For l_Count1 = 0 To lstListOfBuses.ListCount - 1
                If lstListOfBuses.ItemData(l_Count1) = l_ListID Then
                    lstListOfBuses.Selected(l_Count1) = True
                    'Save current l_ListID into array m_l_Selected. We can use this array
                    'later in case we want restore initial selections in the
                    'lstListOfBuses list-box (see cmdReload_Click(...))
                    m_l_ArraySize = m_l_ArraySize + 1
                    ReDim Preserve m_l_Selected(m_l_ArraySize)
                    m_l_Selected(m_l_ArraySize) = l_Count1
                    Exit For
                End If
            Next l_Count1
            
            RS.MoveNext
        Next l_count
    End If
    
    Set RS = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "HighlightItemsInTheListBox", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub PopulateListOfBuses()
    Dim RS As ADODB.Recordset
    Dim l_count As Long
    
    On Error GoTo Error_Handler

    lstListOfBuses.Clear
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.RetrieveListOfBuses("CES_INQUIRY.RETRIEVE_LIST_OF_BUSES")
    
    'Here we will not use:
    'Set lstListOfBuses.DataSource = RS
    'but we will use loop because we need to add ItemData = RS.Fields.Item("LIST_ID")
    'to each added item.
    
    If RS.RecordCount > 0 Then
        RS.MoveFirst
        For l_count = 0 To RS.RecordCount - 1
            lstListOfBuses.AddItem RS.Fields.Item("DESCRIPTION")
            lstListOfBuses.ItemData(lstListOfBuses.NewIndex) = CLng(RS.Fields.Item("LIST_ID"))
            RS.MoveNext
        Next l_count
    Else
        'Make buttons cmdReload and cmdClearSelection disabled.
        cmdReload.Enabled = False
        cmdClearSelection.Enabled = False
    End If
    
    Set RS = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateListOfBuses", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub PopulateInputBoxes()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler

    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.RetrieveRBEstimates("CES_INQUIRY.RETRIEVE_RB_ESTIMATES")
    RS.Filter = "MMS_STOCK_CODE = '" + m_str_MMSStockCode + "' AND REBUILT_STOCK_NUM = '" + m_str_RebuiltCode + "'"
    m_var_RowID = RS.Fields("ROWID")
    cboJobNumber.Text = RS.Fields.Item("JOB_NUMBER")
    cboKeyword.Text = RS.Fields.Item("KEYWORD")
    txtDetailedDescription.Text = RS.Fields.Item("DETAILED_DESC")
    txtCoreChargeCode.Text = Format(RS.Fields.Item("CORE_CHARGE"), "0.00")
    txtRebuiltStockCode.Text = RS.Fields.Item("REBUILT_STOCK_NUM")
    txtCoreStockCode.Text = RS.Fields.Item("CORE_PART_NUM")
    txtMMSStockCode.Text = RS.Fields.Item("MMS_STOCK_CODE")
    txtSOPNumber.Text = RS.Fields.Item("SOP_NUMBER")
    If RS.Fields.Item("BUY_NEW_COST") <> "" Then
        txtBuyCost.Text = Format(RS.Fields.Item("BUY_NEW_COST"), "0.00")
    End If
    If RS.Fields.Item("REMAN_COST") <> "" Then
        txtRemanufacturedCost.Text = Format(RS.Fields.Item("REMAN_COST"), "0.00")
    End If
   ' If RS.Fields.Item("EXTERNAL_COST") <> "" Then
    '    txtExternalCost.Text = Format(RS.Fields.Item("EXTERNAL_COST"), "0.00")
    'End If
    
    If IsNull(RS.Fields.Item("ACTIVE")) Then
        radioNonActive.Value = False
        radioActive.Value = True
    Else
        radioActive.Value = False
        radioNonActive.Value = True
    End If
    
    Set RS = Nothing

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateInputBoxes", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub PopulateDropdowns()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
        
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.RetrieveRBEstimates("CES_INQUIRY.RETRIEVE_RB_ESTIMATES")
    
    'Load the data into the input forms for editing
    Set cboKeyword.RowSource = RS
    Set cboJobNumber.RowSource = RS
    
    Set RS = Nothing
    
    cboKeyword.ListField = "KEYWORD"
    cboJobNumber.ListField = "JOB_NUMBER"
        
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateDropdowns", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_Unload(Cancel As Integer)
    On Error GoTo Error_Handler
    
    m_str_MMSStockCode = ""
    m_str_RebuiltCode = ""
    m_var_RowID = ""
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Unload", g_l_ErrorLineNumber
End Sub

Private Sub txtBuyCost_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtBuyCost edit-box to upper case.
    l_CursorPosition = txtBuyCost.SelStart
    str_Data = txtBuyCost.Text
    str_Data = UCase(str_Data)
    txtBuyCost.Text = str_Data
    txtBuyCost.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtBuyCost_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtCoreChargeCode_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtCoreChargeCode edit-box to upper case.
    l_CursorPosition = txtCoreChargeCode.SelStart
    str_Data = txtCoreChargeCode.Text
    str_Data = UCase(str_Data)
    txtCoreChargeCode.Text = str_Data
    txtCoreChargeCode.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtCoreChargeCode_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtCoreStockCode_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtCoreStockCode edit-box to upper case.
    l_CursorPosition = txtCoreStockCode.SelStart
    str_Data = txtCoreStockCode.Text
    str_Data = UCase(str_Data)
    txtCoreStockCode.Text = str_Data
    txtCoreStockCode.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtCoreStockCode_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtDetailedDescription_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtDetailedDescription edit-box to upper case.
    l_CursorPosition = txtDetailedDescription.SelStart
    str_Data = txtDetailedDescription.Text
    str_Data = UCase(str_Data)
    txtDetailedDescription.Text = str_Data
    txtDetailedDescription.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtDetailedDescription_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtExternalCost_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtExternalCost edit-box to upper case.
    'l_CursorPosition = txtExternalCost.SelStart
    'str_Data = txtExternalCost.Text
    'str_Data = UCase(str_Data)
    'txtExternalCost.Text = str_Data
    'txtExternalCost.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtExternalCost_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtMMSStockCode_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtMMSStockCode edit-box to upper case.
    l_CursorPosition = txtMMSStockCode.SelStart
    str_Data = txtMMSStockCode.Text
    str_Data = UCase(str_Data)
    txtMMSStockCode.Text = str_Data
    txtMMSStockCode.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtMMSStockCode_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtRebuiltStockCode_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtRebuiltStockCode edit-box to upper case.
    l_CursorPosition = txtRebuiltStockCode.SelStart
    str_Data = txtRebuiltStockCode.Text
    str_Data = UCase(str_Data)
    txtRebuiltStockCode.Text = str_Data
    txtRebuiltStockCode.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtRebuiltStockCode_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtRemanufacturedCost_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtRemanufacturedCost edit-box to upper case.
    l_CursorPosition = txtRemanufacturedCost.SelStart
    str_Data = txtRemanufacturedCost.Text
    str_Data = UCase(str_Data)
    txtRemanufacturedCost.Text = str_Data
    txtRemanufacturedCost.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtRemanufacturedCost_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtSOPNumber_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtSOPNumber edit-box to upper case.
    l_CursorPosition = txtSOPNumber.SelStart
    str_Data = txtSOPNumber.Text
    str_Data = UCase(str_Data)
    txtSOPNumber.Text = str_Data
    txtSOPNumber.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtSOPNumber_KeyUp", g_l_ErrorLineNumber
End Sub
frmAddSCPToEstimate.frm :
VERSION 5.00
Object = "{0D452EE1-E08F-101A-852E-02608C4D0BB4}#2.0#0"; "FM20.DLL"
Object = "{F0D2F211-CCB0-11D0-A316-00AA00688B10}#1.0#0"; "MSDATLST.OCX"
Begin VB.Form frmAddSCPToEstimate 
   BorderStyle     =   1  'Fixed Single
   ClientHeight    =   3975
   ClientLeft      =   45
   ClientTop       =   330
   ClientWidth     =   7230
   Icon            =   "frmAddSCPToEstimate.frx":0000
   LinkTopic       =   "Form1"
   MaxButton       =   0   'False
   MinButton       =   0   'False
   ScaleHeight     =   3975
   ScaleWidth      =   7230
   Begin VB.Frame fraPartInformation 
      Caption         =   "Part Information"
      Height          =   2655
      Left            =   135
      TabIndex        =   14
      Top             =   1200
      Width           =   6975
      Begin VB.TextBox txtCoreCost 
         Height          =   285
         Left            =   1560
         TabIndex        =   7
         Top             =   2160
         Width           =   2010
      End
      Begin VB.CommandButton cmdClose 
         Caption         =   "Close"
         Height          =   375
         Left            =   5325
         TabIndex        =   10
         Top             =   2145
         Width           =   1455
      End
      Begin MSDataListLib.DataCombo cboCostCentre 
         Height          =   315
         Left            =   1560
         TabIndex        =   2
         Top             =   1200
         Width           =   1215
         _ExtentX        =   2143
         _ExtentY        =   556
         _Version        =   393216
         Text            =   ""
      End
      Begin MSDataListLib.DataCombo cboPartDescription 
         Height          =   315
         Left            =   1560
         TabIndex        =   9
         Top             =   720
         Width           =   5175
         _ExtentX        =   9128
         _ExtentY        =   556
         _Version        =   393216
         Enabled         =   0   'False
         BackColor       =   -2147483624
         Text            =   ""
      End
      Begin MSDataListLib.DataCombo cboPartType 
         Height          =   315
         Left            =   1545
         TabIndex        =   8
         Top             =   360
         Width           =   5175
         _ExtentX        =   9128
         _ExtentY        =   556
         _Version        =   393216
         Enabled         =   0   'False
         BackColor       =   -2147483624
         Text            =   ""
      End
      Begin VB.CommandButton cmdAdd 
         Caption         =   "Add"
         Enabled         =   0   'False
         Height          =   375
         Left            =   3810
         TabIndex        =   11
         Top             =   2145
         Width           =   1455
      End
      Begin VB.TextBox txtPartUnitCost 
         Enabled         =   0   'False
         Height          =   285
         Left            =   5280
         TabIndex        =   6
         Top             =   1680
         Width           =   1455
      End
      Begin VB.TextBox txtLastRevised 
         Enabled         =   0   'False
         Height          =   285
         Left            =   1545
         TabIndex        =   5
         Top             =   1680
         Width           =   2025
      End
      Begin VB.TextBox txtQuantity 
         Height          =   285
         Left            =   3780
         TabIndex        =   3
         Top             =   1200
         Width           =   735
      End
      Begin VB.TextBox txtPercentUsage 
         Height          =   285
         Left            =   6000
         TabIndex        =   4
         Top             =   1200
         Width           =   735
      End
      Begin MSForms.Label lblcorecost 
         Height          =   255
         Left            =   120
         TabIndex        =   22
         Top             =   2160
         Width           =   1335
         Caption         =   "Core Cost ($/unit)"
         Size            =   "2355;450"
         FontHeight      =   165
         FontCharSet     =   0
         FontPitchAndFamily=   2
      End
      Begin VB.Label lblPartUnitCost 
         Caption         =   "Part Unit Cost ($/unit):"
         Height          =   255
         Left            =   3600
         TabIndex        =   21
         Top             =   1680
         Width           =   1695
      End
      Begin VB.Label lblLastRevised 
         Caption         =   "Last Revised:"
         Height          =   255
         Left            =   120
         TabIndex        =   20
         Top             =   1680
         Width           =   1095
      End
      Begin VB.Label lblQuantity 
         Alignment       =   1  'Right Justify
         Caption         =   "Quantity:"
         Height          =   255
         Left            =   2940
         TabIndex        =   19
         Top             =   1200
         Width           =   735
      End
      Begin VB.Label lblPercentUsage 
         Alignment       =   1  'Right Justify
         Caption         =   "Percent Usage:"
         Height          =   255
         Left            =   4680
         TabIndex        =   18
         Top             =   1200
         Width           =   1215
      End
      Begin VB.Label lblCostCentre 
         Caption         =   "Cost Centre:"
         Height          =   255
         Left            =   120
         TabIndex        =   17
         Top             =   1200
         Width           =   1215
      End
      Begin VB.Label lblPartDescription 
         Caption         =   "Part Description:"
         Height          =   255
         Left            =   120
         TabIndex        =   16
         Top             =   720
         Width           =   1215
      End
      Begin VB.Label lblPartType 
         Caption         =   "Part Type:"
         Height          =   255
         Left            =   120
         TabIndex        =   15
         Top             =   360
         Width           =   1575
      End
   End
   Begin VB.Frame fraRetrieveInformation 
      Caption         =   "Retrieve Information of To Be Added"
      Height          =   855
      Left            =   120
      TabIndex        =   12
      Top             =   120
      Width           =   6975
      Begin VB.CommandButton cmdResolve 
         Caption         =   "Resolve"
         Default         =   -1  'True
         Height          =   375
         Left            =   5280
         TabIndex        =   1
         Top             =   300
         Width           =   1455
      End
      Begin MSDataListLib.DataCombo cboMMSStockCode 
         Height          =   315
         Left            =   1560
         TabIndex        =   0
         Top             =   300
         Width           =   3495
         _ExtentX        =   6165
         _ExtentY        =   556
         _Version        =   393216
         Text            =   ""
      End
      Begin VB.Label lblMMSStockCode 
         Caption         =   "MMS Stock Code:"
         Height          =   255
         Left            =   120
         TabIndex        =   13
         Top             =   300
         Width           =   1335
      End
   End
End
Attribute VB_Name = "frmAddSCPToEstimate"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Option Explicit

Private m_str_Msg As String
Private Const m_str_const_MsgBoxCaption As String = "Add / Update Stock Coded Parts"

Private m_str_OEMCost As String
Public m_str_MBNumber As String
Public m_str_TypeCode As String
Public m_var_RowID As Variant

Public m_str_AuditReference As String

Private Sub cmdAdd_Click()
    Dim l_RetVal As Long
    Dim l_Result As Long
    Dim str_PercentUsage As String
    Dim str_CostCentre As String
    Dim RS As ADODB.Recordset
    Dim l_Count As Long
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    If Trim(cboMMSStockCode.Text) = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please provide MMS Stock Code."
        MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
        cboMMSStockCode.SetFocus
        Exit Sub
    End If
    
    'Make sure that user choused something from the cboCostCentre combo-box.
    str_CostCentre = Trim(cboCostCentre.Text)
    If str_CostCentre = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please provide Cost Centre."
        MsgBox m_str_Msg, vbExclamation + vbOKOnly, m_str_const_MsgBoxCaption
        cboCostCentre.SetFocus
        Exit Sub
    End If
        
    'Then validate Quantity
    If Not IsNumeric(txtQuantity.Text) Then
        Call SetDefaultCursor
        m_str_Msg = "Quantity not entered correctly."
        MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
        txtQuantity.SetFocus
        Exit Sub
    Else
        If Not IsValidLong(txtQuantity.Text) Then
            Call SetDefaultCursor
            m_str_Msg = "Quantity not entered correctly."
            MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
            txtQuantity.SetFocus
            Exit Sub
        End If
    End If
    
    If CLng(txtQuantity.Text) < 0 Then
        Call SetDefaultCursor
        m_str_Msg = "Quantity not entered correctly."
        MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
        txtQuantity.SetFocus
        Exit Sub
    End If
    
    'Validate the information before attempting to add it
    'Start with the percent usage
    str_PercentUsage = Trim(txtPercentUsage.Text)
    If str_PercentUsage = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Plese provide Percent Usage."
        MsgBox m_str_Msg, vbExclamation + vbOKOnly, m_str_const_MsgBoxCaption
        txtPercentUsage.SetFocus
        Exit Sub
    End If
    
    If CheckPercent(str_PercentUsage) = False Then
        Call SetDefaultCursor
        m_str_Msg = "Percent Usage is not entered correctly. Percent Usage can be a "
        m_str_Msg = m_str_Msg + "positive number between 0 and 100 inclusive with "
        m_str_Msg = m_str_Msg + "possible fraction."
        MsgBox m_str_Msg, vbExclamation Or vbOKOnly, m_str_const_MsgBoxCaption
        txtPercentUsage.SetFocus
        Exit Sub
    End If

    str_PercentUsage = Replace(str_PercentUsage, ".", ",")
    
    If Trim(txtCoreCost.Text) = "" Then
        txtCoreCost.Text = "0"
    Else
        If Not IsNumeric(Trim(txtCoreCost.Text)) Then
            Call SetDefaultCursor
            m_str_Msg = "Core cost not entered correctly."
            MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
            txtCoreCost.SetFocus
            Exit Sub
        End If
    End If
    
    If Trim(txtPartUnitCost.Text) = "" Then
        txtPartUnitCost.Text = "0"
    End If
    
    If m_str_OEMCost = "" Then
       m_str_OEMCost = "0"
    End If
    
    If cmdAdd.Caption = "Add" Then
        'Before adding check that "MMS Stock Code" is not duplicated in the estimate.
        Set RS = New ADODB.Recordset
        Set RS = modDBHelper.RetrieveSCPUsed("CES_INQUIRY.RETRIEVE_SCP_USED", _
                                             m_str_MBNumber, _
                                             "N", _
                                             m_str_TypeCode)
        If RS.RecordCount > 0 Then
            RS.MoveFirst
            For l_Count = 0 To RS.RecordCount - 1
                If RS.Fields.Item("STOCK CODE") = Trim(cboMMSStockCode.Text) Then
                    Call SetDefaultCursor
                    Set RS = Nothing
                    m_str_Msg = "Record with the same MMS Stock Code is already exist "
                    m_str_Msg = m_str_Msg + "in the current Estimate. Please choose "
                    m_str_Msg = m_str_Msg + "another one."
                    MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
                    cboMMSStockCode.SetFocus
                    Exit Sub
                End If
                RS.MoveNext
            Next l_Count
        End If
        Set RS = Nothing
        
        'Add a new stock coded part
        l_Result = modDBHelper.AddSCPUsed("CES_UPDATE.ADD_SCP_USED", _
                                          l_RetVal, _
                                          Trim(cboMMSStockCode.Text), _
                                          str_CostCentre, _
                                          Trim(txtQuantity.Text), _
                                          str_PercentUsage, _
                                          modMain.g_str_UserName, _
                                          CCur(txtPartUnitCost.Text), _
                                          CCur(m_str_OEMCost), _
                                          m_str_MBNumber, _
                                          "N", _
                                          m_str_TypeCode, _
                                          CCur(txtCoreCost.Text), _
                                          " ", _
                                          0)

        If (l_Result = 0) Then
            Call SetDefaultCursor
            m_str_Msg = "Stock Coded Part has been added."
            MsgBox m_str_Msg, vbInformation Or vbOKOnly, m_str_const_MsgBoxCaption
        Else
            Call SetDefaultCursor
            m_str_Msg = "There was an error adding Stock Coded Part. Please Contact "
            m_str_Msg = m_str_Msg + "Administrator."
            MsgBox m_str_Msg, vbCritical Or vbOKOnly, m_str_const_MsgBoxCaption
            Exit Sub
        End If
        cmdAdd.Enabled = False
        
        '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT Begin >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        'Insert record into the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                l_RetVal, _
                "Add Stock Coded Part", _
                m_str_AuditReference, _
                m_str_TypeCode, _
                "MMS Stock Code ---> " + Trim(cboMMSStockCode.Text), _
                "Part Type ---> " + Trim(cboPartType.Text), _
                "Part Description ---> " + Trim(cboPartDescription.Text), _
                "Cost Centre ---> " + Trim(cboCostCentre.Text), _
                "Quantity ---> " + Trim(txtQuantity.Text), _
                "Percent Usage ---> " + Trim(txtPercentUsage.Text), _
                "Last Revised ---> " + Trim(txtLastRevised.Text), _
                "Part Cost ($/unit) ---> " + Trim(txtPartUnitCost.Text), _
                "Core Cost ($/unit) ---> " + Trim(txtCoreCost.Text))
    
        ' Now depending on which type of estimate this stock coded part is
        ' being added to, we must cycle through estimates accordingly
        Select Case m_str_TypeCode
            
            Case "KIT"
                'Add the current Part to the table SUB_KITS, after the last item in the
                'sub kit "KIT A"
                Call modMain.AddLastPartToSubkitA(m_str_AuditReference, _
                                                  "SC", _
                                                  " ", _
                                                  " ", _
                                                  Trim(cboMMSStockCode.Text), _
                                                  Trim(txtQuantity.Text), _
                                                  Trim(cboPartDescription.Text))
              
                'Find all Vehicle Estimates where the current OEM Kit is presented.
                Set RS = modDBHelper.RetrieveBusFromKitsUsed("CES_INQUIRY.RETRIEVE_BUS_FROM_KITS_USED", _
                                                             m_str_AuditReference)
                'Insert records for all Vehicle Estimates (where the current OEM Kit is
                'presented) into the AUDIT_MODIFY_HISTORY table.
                If RS.RecordCount > 0 Then
                    RS.MoveFirst
                    For l_Count = 0 To RS.RecordCount - 1
                        If IsNull(RS.Fields.Item("link_code")) = False Then
                            l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                                "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                                l_RetVal, _
                                "Indirect change. Stock Coded Part was added to the OEM Kit " + m_str_AuditReference, _
                                RS.Fields.Item("link_code"), _
                                "BUS", _
                                "MMS Stock Code ---> " + Trim(cboMMSStockCode.Text), _
                                "Part Type ---> " + Trim(cboPartType.Text), _
                                "Part Description ---> " + Trim(cboPartDescription.Text), _
                                "Cost Centre ---> " + Trim(cboCostCentre.Text), _
                                "Quantity ---> " + Trim(txtQuantity.Text), _
                                "Percent Usage ---> " + Trim(txtPercentUsage.Text), _
                                "Last Revised ---> " + Trim(txtLastRevised.Text), _
                                "Part Cost ($/unit) ---> " + Trim(txtPartUnitCost.Text), _
                                "Core Cost ($/unit) ---> " + Trim(txtCoreCost.Text))
                        End If
                        RS.MoveNext
                    Next l_Count
                End If
        
            Case "RB"
                ' If the estimate is a Rebuilt Part Estimate then cycle
                ' though all RB, MB and Veh Estimates containing this RBP
            
                Set RS = New ADODB.Recordset
                
                'In the SC_PARTS_USED table find all Estimates where the current RBE is present.
                Set RS = modDBHelper.RetrieveESTToPropagateRB("CES_INQUIRY.RETRIEVE_EST_TO_PROPAGATE_RB", _
                                                              m_str_AuditReference)
                If RS.RecordCount > 0 Then
                    RS.MoveFirst
                        For l_Count = 0 To RS.RecordCount - 1
                            'Add records to the AUDIT_MODIFY_HISTORY table.
                            l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                                "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                                l_RetVal, _
                                "Indirect change. Stock Coded Part was added to the Rebuilt Part Estimate " + m_str_AuditReference, _
                                RS.Fields.Item("link_code"), _
                                RS.Fields.Item("link_type"), _
                                "MMS Stock Code ---> " + Trim(cboMMSStockCode.Text), _
                                "Part Type ---> " + Trim(cboPartType.Text), _
                                "Part Description ---> " + Trim(cboPartDescription.Text), _
                                "Cost Centre ---> " + Trim(cboCostCentre.Text), _
                                "Quantity ---> " + Trim(txtQuantity.Text), _
                                "Percent Usage ---> " + Trim(txtPercentUsage.Text), _
                                "Last Revised ---> " + Trim(txtLastRevised.Text), _
                                "Part Cost ($/unit) ---> " + Trim(txtPartUnitCost.Text), _
                                "Core Cost ($/unit) ---> " + Trim(txtCoreCost.Text))
                            RS.MoveNext
                        Next l_Count
                End If
                Set RS = Nothing
        
        End Select
        '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT End >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    
    Else 'If cmdAdd.Caption = "Update" Then
        'Update an existing stock coded part
        l_Result = modDBHelper.UpdateSCPUsed("CES_UPDATE.UPDATE_SCP_USED", _
                                             l_RetVal, _
                                             Trim(cboMMSStockCode.Text), _
                                             str_CostCentre, _
                                             Trim(txtQuantity.Text), _
                                             str_PercentUsage, _
                                             g_str_UserName, _
                                             m_str_MBNumber, _
                                             CCur(txtPartUnitCost.Text), _
                                             CCur(m_str_OEMCost), _
                                             m_var_RowID, _
                                             CCur(txtCoreCost.Text))
    
        If (l_Result = 0) Then
            Call SetDefaultCursor
            m_str_Msg = "Stock Coded Part has been updated."
            MsgBox m_str_Msg, vbOKOnly Or vbInformation, m_str_const_MsgBoxCaption
        Else
            Call SetDefaultCursor
            m_str_Msg = "There was an error updating Stock Coded Part. Please Contact "
            m_str_Msg = m_str_Msg + "Administrator."
            MsgBox m_str_Msg, vbOKOnly Or vbCritical, m_str_const_MsgBoxCaption
            Exit Sub
        End If
        
        '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT Begin >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        
        'Insert record into the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                l_RetVal, _
                "Update Stock Coded Part", _
                m_str_AuditReference, _
                m_str_TypeCode, _
                "MMS Stock Code ---> " + Trim(cboMMSStockCode.Text), _
                "Part Type ---> " + Trim(cboPartType.Text), _
                "Part Description ---> " + Trim(cboPartDescription.Text), _
                "Cost Centre ---> " + Trim(cboCostCentre.Text), _
                "Quantity ---> " + Trim(txtQuantity.Text), _
                "Percent Usage ---> " + Trim(txtPercentUsage.Text), _
                "Last Revised ---> " + Trim(txtLastRevised.Text), _
                "Part Cost ($/unit) ---> " + Trim(txtPartUnitCost.Text), _
                "Core Cost ($/unit) ---> " + Trim(txtCoreCost.Text))
        
        ' Now depending on which type of estimate this stock coded part is
        ' being updated in, we must cycle through estimates accordingly
        Select Case m_str_TypeCode
            
            Case "KIT"
                'In the SUB_KITS table update corresponded record.
                l_Result = modDBHelper.UpdateSubKits("CES_UPDATE.UPDATE_SUB_KITS", _
                                                     l_RetVal, _
                                                     m_str_AuditReference, _
                                                     " ", _
                                                     " ", _
                                                     Trim(cboMMSStockCode.Text), _
                                                     Trim(txtQuantity.Text), _
                                                     Trim(cboPartDescription.Text))
                'Find all Vehicle Estimates where the current OEM Kit is presented.
                Set RS = modDBHelper.RetrieveBusFromKitsUsed("CES_INQUIRY.RETRIEVE_BUS_FROM_KITS_USED", _
                                                             m_str_AuditReference)
                'Insert records for all Vehicle Estimates (where the current OEM Kit is
                'presented) into the AUDIT_MODIFY_HISTORY table.
                If RS.RecordCount > 0 Then
                    RS.MoveFirst
                    For l_Count = 0 To RS.RecordCount - 1
                        If IsNull(RS.Fields.Item("link_code")) = False Then
                            l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                                "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                                l_RetVal, _
                                "Indirect change. Stock Coded Part was updated from the OEM Kit " + m_str_AuditReference, _
                                RS.Fields.Item("link_code"), _
                                "BUS", _
                                "MMS Stock Code ---> " + Trim(cboMMSStockCode.Text), _
                                "Part Type ---> " + Trim(cboPartType.Text), _
                                "Part Description ---> " + Trim(cboPartDescription.Text), _
                                "Cost Centre ---> " + Trim(cboCostCentre.Text), _
                                "Quantity ---> " + Trim(txtQuantity.Text), _
                                "Percent Usage ---> " + Trim(txtPercentUsage.Text), _
                                "Last Revised ---> " + Trim(txtLastRevised.Text), _
                                "Part Cost ($/unit) ---> " + Trim(txtPartUnitCost.Text), _
                                "Core Cost ($/unit) ---> " + Trim(txtCoreCost.Text))
                        End If
                        RS.MoveNext
                    Next l_Count
                End If
           
            Case "RB"
                ' If the estimate is a Rebuilt Part Estimate then cycle
                ' though all RB, MB and Veh Estimates containing this RBP
                Set RS = New ADODB.Recordset
                
                'In the SC_PARTS_USED table find all Estimates where the current RBE is present.
                Set RS = modDBHelper.RetrieveESTToPropagateRB("CES_INQUIRY.RETRIEVE_EST_TO_PROPAGATE_RB", _
                                                              m_str_AuditReference)
                If RS.RecordCount > 0 Then
                    RS.MoveFirst
                        For l_Count = 0 To RS.RecordCount - 1
                            'Add records to the AUDIT_MODIFY_HISTORY table.
                            l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                                "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                                l_RetVal, _
                                "Indirect change. Stock Coded Part was updated from the Rebuilt Part Estimate " + m_str_AuditReference, _
                                RS.Fields.Item("link_code"), _
                                RS.Fields.Item("link_type"), _
                                "MMS Stock Code ---> " + Trim(cboMMSStockCode.Text), _
                                "Part Type ---> " + Trim(cboPartType.Text), _
                                "Part Description ---> " + Trim(cboPartDescription.Text), _
                                "Cost Centre ---> " + Trim(cboCostCentre.Text), _
                                "Quantity ---> " + Trim(txtQuantity.Text), _
                                "Percent Usage ---> " + Trim(txtPercentUsage.Text), _
                                "Last Revised ---> " + Trim(txtLastRevised.Text), _
                                "Part Cost ($/unit) ---> " + Trim(txtPartUnitCost.Text), _
                                "Core Cost ($/unit) ---> " + Trim(txtCoreCost.Text))
                            RS.MoveNext
                        Next l_Count
                End If
                Set RS = Nothing
        
        End Select
         '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT End >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        Unload Me
    End If 'If cmdAdd.Caption = "Add" Then

    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdAdd_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

'Pass values to populate the form for editing
Public Sub PassValues(ByVal str_StockCode As String, _
                      ByVal str_CostCentre As String, _
                      ByVal str_PercentUsage As String, _
                      ByVal str_Quantity As String, _
                      ByVal var_RowIDPass As Variant, _
                      ByVal cur_CoreCost As Currency)
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
       
    m_var_RowID = var_RowIDPass
    Set RS = modDBHelper.RetrieveSCPUsedROWID("CES_INQUIRY.retrieve_one_scp_used", _
                                             m_var_RowID)
    cboMMSStockCode.Text = str_StockCode
    Call Resolve
    cboCostCentre.Text = str_CostCentre
    txtQuantity.Text = str_Quantity
    txtPercentUsage.Text = Replace(str_PercentUsage, ",", ".")
    
    cmdAdd.Caption = "Update"
    cmdClose.Visible = False
    cboMMSStockCode.Enabled = False
    cmdResolve.Enabled = False
    txtCoreCost.Text = Format(RS("CORECOST").Value, "0.00")
    
    Set RS = Nothing
       
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PassValues", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub cmdClose_Click()
    On Error GoTo Error_Handler
    
    Unload Me
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdClose_Click", g_l_ErrorLineNumber
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler
     
    Call SetWaitCursor
    
    Call PopulateFields
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub PopulateFields()
    Dim RS As ADODB.Recordset
    
    'Populate each of the combo boxes
    
    On Error GoTo Error_Handler

    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.PopulateSCComboBoxes("CES_INQUIRY.POPULATE_SC_COMBOXES", _
                                              "1")
    Set cboMMSStockCode.RowSource = RS
    cboMMSStockCode.ListField = "mms_stock_code"
        
    Set RS = modDBHelper.PopulateSCComboBoxes("CES_INQUIRY.POPULATE_SC_COMBOXES", _
                                              "2")
    Set cboPartType.RowSource = RS
    cboPartType.ListField = "part_type"
        
    Set RS = modDBHelper.PopulateSCComboBoxes("CES_INQUIRY.POPULATE_SC_COMBOXES", _
                                              "3")
    Set cboPartDescription.RowSource = RS
    cboPartDescription.ListField = "detailed_desc"
        
    Set RS = modDBHelper.RetrieveCostCentres("CES_INQUIRY.RETRIEVE_COST_CENTRES")
    Set cboCostCentre.RowSource = RS
    cboCostCentre.ListField = "cost_centre"
    
    Set RS = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateFields", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub Resolve()
    Dim RS As ADODB.Recordset

    'Fills in the rest of the fields from the MMS Stock Code
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    Set RS = New ADODB.Recordset
    'Query the database to receive the information about the part
   
    Set RS = modDBHelper.SearchSCPart("CES_INQUIRY.SEARCH_SC_PART", _
                                          cboMMSStockCode.Text, "0", _
                                          "", "", 2)
    
    
    If RS.RecordCount > 0 Then
        'Load the values into the text boxex
        RS.MoveFirst
        cboMMSStockCode.Text = RS.Fields.Item("STOCK CODE")
        cboPartType.Text = RS.Fields.Item("KEYWORD")
        cboPartDescription.Text = RS.Fields.Item("DESCRIPTION")
        txtPartUnitCost.Text = Format(RS.Fields.Item("PRICE"), "0.00")
        m_str_OEMCost = RS.Fields.Item("OEM_PART_COST")
        txtLastRevised.Text = IIf(IsNull(RS.Fields.Item("LAST MODIFIED DATE")), "", _
                                         RS.Fields.Item("LAST MODIFIED DATE"))
        cmdAdd.Enabled = True
        cmdResolve.Default = False
        cmdAdd.Default = True
    Else
        'Cannot find the part
        Call SetDefaultCursor
        cmdAdd.Enabled = False
        cmdAdd.Default = False
        cmdResolve.Default = True
        m_str_Msg = "No information for the Stock Code"
        MsgBox m_str_Msg, vbExclamation Or vbOKOnly, m_str_const_MsgBoxCaption
    End If
    
    Set RS = Nothing
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdResolve_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub cmdResolve_Click()
    On Error GoTo Error_Handler
    
    Call Resolve
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdResolve_Click", g_l_ErrorLineNumber
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub txtPercentUsage_GotFocus()
    On Error GoTo Error_Handler

    txtPercentUsage.SelStart = 0
    txtPercentUsage.SelLength = Len(txtPercentUsage.Text)
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtPercentUsage_GotFocus", g_l_ErrorLineNumber
End Sub

Private Sub txtQuantity_GotFocus()
    On Error GoTo Error_Handler

    txtQuantity.SelStart = 0
    txtQuantity.SelLength = Len(txtQuantity.Text)
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtQuantity_GotFocus", g_l_ErrorLineNumber
End Sub

frmAddVehCostEstimate.frm :
VERSION 5.00
Object = "{F0D2F211-CCB0-11D0-A316-00AA00688B10}#1.0#0"; "msdatlst.ocx"
Begin VB.Form frmAddVehCostEstimate 
   BorderStyle     =   3  'Fixed Dialog
   Caption         =   "Add Vehicle Cost Estimate"
   ClientHeight    =   3045
   ClientLeft      =   45
   ClientTop       =   330
   ClientWidth     =   8940
   Icon            =   "frmAddVehCostEstimate.frx":0000
   LinkTopic       =   "Add a Vehicle"
   MaxButton       =   0   'False
   MinButton       =   0   'False
   ScaleHeight     =   3420
   ScaleMode       =   0  'User
   ScaleWidth      =   8940
   ShowInTaskbar   =   0   'False
   StartUpPosition =   2  'CenterScreen
   Begin VB.Frame Frame1 
      Caption         =   "Add Vehicle Cost Estimate"
      Height          =   2850
      Left            =   105
      TabIndex        =   11
      Top             =   90
      Width           =   8775
      Begin VB.TextBox txtSOPNumber 
         Height          =   285
         Left            =   5655
         TabIndex        =   1
         Top             =   420
         Width           =   2085
      End
      Begin VB.CommandButton cmdAdd 
         Caption         =   "ADD"
         Default         =   -1  'True
         Height          =   345
         Left            =   3630
         TabIndex        =   10
         Top             =   2340
         Width           =   1590
      End
      Begin VB.TextBox txtNumberOfBuses 
         Height          =   285
         Left            =   1560
         TabIndex        =   0
         Top             =   450
         Width           =   750
      End
      Begin MSDataListLib.DataCombo cboEngine 
         Height          =   315
         Left            =   735
         TabIndex        =   4
         Top             =   1440
         Width           =   1875
         _ExtentX        =   3307
         _ExtentY        =   556
         _Version        =   393216
         Style           =   2
         Text            =   ""
      End
      Begin MSDataListLib.DataCombo cboTrans 
         Height          =   315
         Left            =   3585
         TabIndex        =   6
         Top             =   1440
         Width           =   1875
         _ExtentX        =   3307
         _ExtentY        =   556
         _Version        =   393216
         Style           =   2
         Text            =   ""
      End
      Begin MSDataListLib.DataCombo cboDifferential 
         Height          =   315
         Left            =   6660
         TabIndex        =   8
         Top             =   1455
         Width           =   1875
         _ExtentX        =   3307
         _ExtentY        =   556
         _Version        =   393216
         Style           =   2
         Text            =   ""
      End
      Begin MSDataListLib.DataCombo cboYear 
         Height          =   315
         Left            =   6660
         TabIndex        =   9
         Top             =   1785
         Width           =   1875
         _ExtentX        =   3307
         _ExtentY        =   556
         _Version        =   393216
         Style           =   2
         Text            =   ""
      End
      Begin MSDataListLib.DataCombo cboModel 
         Height          =   315
         Left            =   3585
         TabIndex        =   7
         Top             =   1785
         Width           =   1875
         _ExtentX        =   3307
         _ExtentY        =   556
         _Version        =   393216
         Style           =   2
         Text            =   ""
      End
      Begin MSDataListLib.DataCombo cboMake 
         Height          =   315
         Left            =   720
         TabIndex        =   5
         Top             =   1860
         Width           =   1875
         _ExtentX        =   3307
         _ExtentY        =   556
         _Version        =   393216
         Style           =   2
         Text            =   ""
      End
      Begin MSDataListLib.DataCombo cboBusSeries 
         Height          =   315
         Left            =   1320
         TabIndex        =   2
         Top             =   870
         Width           =   2700
         _ExtentX        =   4763
         _ExtentY        =   556
         _Version        =   393216
         Style           =   2
         BackColor       =   -2147483628
         Text            =   ""
      End
      Begin MSDataListLib.DataCombo cboBusDescription 
         Height          =   315
         Left            =   5670
         TabIndex        =   3
         Top             =   855
         Width           =   3030
         _ExtentX        =   5345
         _ExtentY        =   556
         _Version        =   393216
         Text            =   ""
      End
      Begin VB.Label lblSOPNumber 
         BackColor       =   &H80000000&
         Caption         =   "SOP Number:"
         Height          =   285
         Left            =   4560
         TabIndex        =   21
         Top             =   435
         Width           =   990
      End
      Begin VB.Label lblBusDescription 
         BackColor       =   &H80000000&
         Caption         =   "Estimate Description:"
         Height          =   210
         Left            =   4080
         TabIndex        =   20
         Top             =   915
         Width           =   1500
      End
      Begin VB.Label lblNumberOfBuses 
         BackColor       =   &H80000000&
         Caption         =   "Number of Vehicles:"
         Height          =   285
         Left            =   120
         TabIndex        =   19
         Top             =   465
         Width           =   1440
      End
      Begin VB.Label lblBusSeries 
         BackColor       =   &H80000000&
         Caption         =   "Vehicle Series:"
         Height          =   225
         Left            =   150
         TabIndex        =   18
         Top             =   930
         Width           =   1065
      End
      Begin VB.Label lblMake 
         Caption         =   "Make"
         Height          =   195
         Left            =   135
         TabIndex        =   17
         Top             =   1920
         Width           =   480
      End
      Begin VB.Label lblModel 
         Caption         =   "Model"
         Height          =   195
         Left            =   2955
         TabIndex        =   16
         Top             =   1830
         Width           =   480
      End
      Begin VB.Label lblEngine 
         Caption         =   "Engine"
         Height          =   195
         Left            =   75
         TabIndex        =   15
         Top             =   1515
         Width           =   660
      End
      Begin VB.Label lblTrans 
         Caption         =   "Trans"
         Height          =   195
         Left            =   2985
         TabIndex        =   14
         Top             =   1500
         Width           =   480
      End
      Begin VB.Label lblYear 
         Caption         =   "Year"
         Height          =   195
         Left            =   5985
         TabIndex        =   13
         Top             =   1845
         Width           =   480
      End
      Begin VB.Label lblDifferential 
         Caption         =   "Differential"
         Height          =   195
         Left            =   5790
         TabIndex        =   12
         Top             =   1515
         Width           =   855
      End
   End
End
Attribute VB_Name = "frmAddVehCostEstimate"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Option Explicit

Private m_str_Msg As String
Public m_l_VehicleListID As Long

Private Sub PopulateDropdowns()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
        
    'Load the data into the specified drop down forms
    Set RS = modDBHelper.RetrieveEngines("CES_INQUIRY.RETRIEVE_ENGINES")
    Set cboEngine.RowSource = RS
    cboEngine.ListField = "name"
    
    Set RS = modDBHelper.RetrieveTransmissions("CES_INQUIRY.RETRIEVE_TRANSMISSIONS")
    Set cboTrans.RowSource = RS
    cboTrans.ListField = "name"
    
    Set RS = modDBHelper.RetrieveDifferentials("CES_INQUIRY.RETRIEVE_DIFFERENTIALS")
    Set cboDifferential.RowSource = RS
    cboDifferential.ListField = "name"
    
    Set RS = modDBHelper.RetrieveVehicleTypes("CES_INQUIRY.RETRIEVE_VEHICLE_TYPES")
    Set cboMake.RowSource = RS
    Set cboModel.RowSource = RS
    Set cboYear.RowSource = RS
    cboMake.ListField = "make"
    cboModel.ListField = "model"
    cboYear.ListField = "year"

    Set RS = modDBHelper.RetrieveListOfBuses("CES_INQUIRY.RETRIEVE_LIST_OF_BUSES")
    Set cboBusSeries.RowSource = RS
    cboBusSeries.ListField = "DESCRIPTION"
    
    Set RS = _
        modDBHelper.RetrieveVehicleEstimates("CES_INQUIRY.RETRIEVE_VEHICLE_ESTIMATES")
    Set cboBusDescription.RowSource = RS
    cboBusDescription.ListField = "PROJ_DESC"
        
    Set RS = Nothing
        
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateDropdowns", Erl
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub cmdAdd_Click()
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_NumberOfBuses As String
    Dim str_BusSeries As String
    Dim str_BusDescription As String
    Dim str_Engine As String
    Dim str_Make As String
    Dim str_Trans As String
    Dim str_Model As String
    Dim str_Year As String
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    'Data in the txtNumberOfBuses edit-box should be a positive number or zero
    str_NumberOfBuses = Trim(txtNumberOfBuses.Text)
    If str_NumberOfBuses = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Number of buses should be a positive integer or zero."
        MsgBox m_str_Msg
        txtNumberOfBuses.SetFocus
        Exit Sub
    End If
    If IsNumeric(str_NumberOfBuses) = False Then
        Call SetDefaultCursor
        m_str_Msg = "Number of Buses should be a positive integer or zero."
        MsgBox m_str_Msg
        txtNumberOfBuses.SetFocus
        Exit Sub
    End If
    If CLng(str_NumberOfBuses) < 0 Then
        Call SetDefaultCursor
        m_str_Msg = "Number of buses should be a positive integer or zero."
        MsgBox m_str_Msg
        txtNumberOfBuses.SetFocus
        Exit Sub
    End If
    
    'User should choose something from the cboBusSeries combo-box.
    str_BusSeries = Trim(cboBusSeries.Text)
    If str_BusSeries = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please provide Bus Series."
        MsgBox m_str_Msg
        'cboBusSeries.SetFocus
        Exit Sub
    End If
    'Data in the cboBusDescription combo-box should not be empty.
    str_BusDescription = Trim(cboBusDescription.Text)
    If str_BusDescription = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please provide Bus Description."
        MsgBox m_str_Msg
        cboBusDescription.SetFocus
        Exit Sub
    End If
    'Make sure that user choused something from the cboEngine combo-box.
    str_Engine = Trim(cboEngine.Text)
    If str_Engine = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please provide Engine."
        MsgBox m_str_Msg
        cboEngine.SetFocus
        Exit Sub
    End If
    'Make sure that user choused something from the cboMake combo-box.
    str_Make = Trim(cboMake.Text)
    If str_Make = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please provide Make."
        MsgBox m_str_Msg
        cboMake.SetFocus
        Exit Sub
    End If
    'Make sure that user choused something from the cboTrans combo-box.
    str_Trans = Trim(cboTrans.Text)
    If str_Trans = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please provide Transmission."
        MsgBox m_str_Msg
        cboTrans.SetFocus
        Exit Sub
    End If
    'Make sure that user choused something from the cboModel combo-box.
    str_Model = Trim(cboModel.Text)
    If str_Model = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please provide Model."
        MsgBox m_str_Msg
        cboModel.SetFocus
        Exit Sub
    End If
    'Make sure that user choused something from the cboYear combo-box.
    str_Year = Trim(cboYear.Text)
    If str_Year = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please provide Year."
        MsgBox m_str_Msg
        cboYear.SetFocus
        Exit Sub
    End If
    
    If cmdAdd.Caption = "ADD" Then
        l_Result = modDBHelper.AddVehicleEstimate("CES_UPDATE.ADD_VEHICLE_ESTIMATE", _
                                                  l_RetVal, _
                                                  str_BusSeries, _
                                                  str_BusDescription, _
                                                  str_NumberOfBuses, _
                                                  str_Make, _
                                                  str_Model, _
                                                  str_Year, _
                                                  str_Engine, _
                                                  str_Trans, _
                                                  cboDifferential.Text, _
                                                  modMain.g_str_UserName, _
                                                  txtSOPNumber.Text)
    
        If (l_Result > 0) Then
            m_l_VehicleListID = l_Result
            Call SetDefaultCursor
            m_str_Msg = "Vehicle Estimate Has been added."
            MsgBox m_str_Msg
        Else
            Call SetDefaultCursor
            m_str_Msg = "There was an error adding Vehicle Estimate. Please Contact "
            m_str_Msg = m_str_Msg + "Administrator"
            MsgBox m_str_Msg
            Exit Sub
        End If
        'Insert record into the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                l_RetVal, _
                "Vehicle Estimate Info was added to the System", _
                CStr(m_l_VehicleListID), _
                "BUS", _
                "Number of Vehicles ---> " + txtNumberOfBuses.Text, _
                "Vehicle Series ---> " + cboBusSeries.Text, _
                "SOP Number ---> " + txtSOPNumber.Text, _
                "Estimate Description ---> " + cboBusDescription.Text, _
                "Engine ---> " + cboEngine.Text, _
                "Make ---> " + cboMake.Text, _
                "Trans ---> " + cboTrans.Text, _
                "Model ---> " + cboModel.Text, _
                "Differential ---> " + cboDifferential.Text, _
                "Year ---> " + cboYear.Text)
    Else 'If cmdAdd.Caption = "Update" Then
        l_Result = _
                modDBHelper.UpdateVehicleEstimate("CES_UPDATE.UPDATE_VEHICLE_ESTIMATE", _
                                                  l_RetVal, _
                                                  str_BusSeries, _
                                                  str_BusDescription, _
                                                  str_NumberOfBuses, _
                                                  str_Make, _
                                                  str_Model, _
                                                  str_Year, _
                                                  str_Engine, _
                                                  str_Trans, _
                                                  cboDifferential.Text, _
                                                  modMain.g_str_UserName, _
                                                  m_l_VehicleListID, _
                                                  txtSOPNumber.Text)

        If (l_Result = 0) Then
            Call SetDefaultCursor
            m_str_Msg = "Vehicle Estimate Has been updated."
            MsgBox m_str_Msg
        Else
            Call SetDefaultCursor
            m_str_Msg = "Duplicate Estimate, please try re-entering Part."
            MsgBox m_str_Msg
            Exit Sub
        End If
        
        'Insert record into the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                l_RetVal, _
                "Vehicle Estimate Info was updated in the System", _
                CStr(m_l_VehicleListID), _
                "BUS", _
                "Number of Vehicles ---> " + txtNumberOfBuses.Text, _
                "Vehicle Series ---> " + cboBusSeries.Text, _
                "SOP Number ---> " + txtSOPNumber.Text, _
                "Estimate Description ---> " + cboBusDescription.Text, _
                "Engine ---> " + cboEngine.Text, _
                "Make ---> " + cboMake.Text, _
                "Trans ---> " + cboTrans.Text, _
                "Model ---> " + cboModel.Text, _
                "Differential ---> " + cboDifferential.Text, _
                "Year ---> " + cboYear.Text)
                
        frmSearchVehEstimate.RefreshForm
        
    End If 'If cmdAdd.Caption = "ADD" Then
    
    Call SetDefaultCursor
    Unload Me
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdAdd_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler

    Call SetWaitCursor
    
    Call PopulateDropdowns
    
    If (m_l_VehicleListID <> 0) Then
        'Update labels because form is used to update not add
        
        'requested to be able to edit the vehicle series hence comment out.
        'cboBusSeries.BackColor = &H80000018
        'cboBusSeries.Enabled = False
        
        cmdAdd.Caption = "Update"
        Me.Caption = "Update a Vehicle Estimate"
        Frame1.Caption = "Update Vehicle Estimate"
       
        Call PopulateInputBoxes
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub PopulateInputBoxes()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    Set RS = New ADODB.Recordset
    'Query database to load vehicle estimate
    Set RS = _
        modDBHelper.RetrieveVehicleEstimates("CES_INQUIRY.RETRIEVE_VEHICLE_ESTIMATES")
    RS.Filter = "VEHICLE_LIST_ID = " + CStr(m_l_VehicleListID)
    
    'Load values into text boxes
    cboBusSeries.Text = RS.Fields.Item("veh_series_code")
    cboBusDescription.Text = RS.Fields.Item("proj_desc")
    txtNumberOfBuses.Text = RS.Fields.Item("NUM_OF_VEHICLES")
    cboMake.Text = RS.Fields.Item("make")
    cboModel.Text = RS.Fields.Item("model")
    cboYear.Text = RS.Fields.Item("year")
    cboEngine.Text = RS.Fields.Item("engine")
    cboTrans.Text = RS.Fields.Item("transmission")
    cboDifferential.Text = RS.Fields.Item("differential")
    txtSOPNumber.Text = RS.Fields.Item("SOPNumber")
    Set RS = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateInputBoxes", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_Unload(Cancel As Integer)
    On Error GoTo Error_Handler
 
    m_l_VehicleListID = 0
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Unload", g_l_ErrorLineNumber
End Sub


Private Sub txtSOPNumber_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtSOPNumber edit-box to upper case.
    l_CursorPosition = txtSOPNumber.SelStart
    str_Data = txtSOPNumber.Text
    str_Data = UCase(str_Data)
    txtSOPNumber.Text = str_Data
    txtSOPNumber.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtSOPNumber_KeyUp", g_l_ErrorLineNumber
End Sub
frmAddVehOptions.frm :
VERSION 5.00
Begin VB.Form frmAddVehOptions 
   BackColor       =   &H80000004&
   BorderStyle     =   3  'Fixed Dialog
   Caption         =   "Add Engines/Transmissions/Differentials"
   ClientHeight    =   2145
   ClientLeft      =   45
   ClientTop       =   330
   ClientWidth     =   4335
   Icon            =   "frmAddVehOptions.frx":0000
   LinkTopic       =   "Form2"
   MaxButton       =   0   'False
   MinButton       =   0   'False
   NegotiateMenus  =   0   'False
   ScaleHeight     =   2145
   ScaleWidth      =   4335
   ShowInTaskbar   =   0   'False
   StartUpPosition =   2  'CenterScreen
   Begin VB.TextBox txtData 
      Height          =   285
      Left            =   180
      MaxLength       =   25
      TabIndex        =   5
      Top             =   1140
      Width           =   4035
   End
   Begin VB.CommandButton cmdAdd 
      Caption         =   "Add"
      Default         =   -1  'True
      Height          =   330
      Left            =   1620
      TabIndex        =   3
      Top             =   1740
      Width           =   1170
   End
   Begin VB.OptionButton optEngine 
      BackColor       =   &H80000004&
      Caption         =   "Engine"
      Height          =   375
      Left            =   300
      TabIndex        =   0
      Top             =   540
      Value           =   -1  'True
      Width           =   900
   End
   Begin VB.OptionButton optTransmission 
      BackColor       =   &H80000004&
      Caption         =   "Transmission"
      Height          =   375
      Left            =   1500
      TabIndex        =   1
      Top             =   540
      Width           =   1275
   End
   Begin VB.OptionButton optDifferential 
      BackColor       =   &H80000004&
      Caption         =   "Differential"
      Height          =   375
      Left            =   2880
      TabIndex        =   2
      Top             =   540
      Width           =   1155
   End
   Begin VB.Label lblSelectPartToAdd 
      Alignment       =   2  'Center
      BackColor       =   &H80000004&
      Caption         =   "Select Part To Add"
      BeginProperty Font 
         Name            =   "Batang"
         Size            =   12
         Charset         =   0
         Weight          =   700
         Underline       =   -1  'True
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   255
      Left            =   960
      TabIndex        =   4
      Top             =   120
      Width           =   2430
   End
End
Attribute VB_Name = "frmAddVehOptions"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Option Explicit

Private m_str_Msg As String

Public m_str_TextValue As String
Public m_str_PartSelection As String
Public m_var_RowID As String

Private Sub cmdAdd_Click()
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_Data As String
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    str_Data = Trim(txtData.Text)
    If str_Data = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please provide data here."
        MsgBox m_str_Msg
        txtData.Text = ""
        txtData.SetFocus
        Exit Sub
    End If

    If cmdAdd.Caption = "Add" Then
        If optEngine.Value = True Then
            'Check that engine name is not duplicated in the ENGINES table.
            Set RS = New ADODB.Recordset
            Set RS = modDBHelper.SearchEngineByName("CES_INQUIRY.SERCH_ENGINE_BY_NAME", _
                                                    str_Data)
            If RS.RecordCount > 0 Then
                Call SetDefaultCursor
                Set RS = Nothing
                m_str_Msg = "Engine with the same name already exist. Please provide "
                m_str_Msg = m_str_Msg + "another name."
                MsgBox m_str_Msg
                txtData.SetFocus
                Exit Sub
            End If
            
            l_Result = modDBHelper.AddEngines("CES_UPDATE.ADD_ENGINES", _
                                              l_RetVal, _
                                              str_Data)
            If (l_Result = 0) Then
                Call SetDefaultCursor
                m_str_Msg = "Engine has been added."
                MsgBox m_str_Msg
                'Add record to the AUDIT_MODIFY_HISTORY table.
                l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                                    "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                                    l_RetVal, _
                                    "Engine was added to the System", _
                                    0, _
                                    "ETD", _
                                    "Engine ---> " + Trim(txtData.Text), _
                                    "")
            Else
                Call SetDefaultCursor
                m_str_Msg = "There was an error adding Engine. Please contact Supervisor."
                MsgBox m_str_Msg
            End If
        ElseIf optTransmission = True Then
            'Check that transmission name is not duplicated in the TRANSMISSIONS table.
            Set RS = New ADODB.Recordset
            Set RS = modDBHelper.SearchTransmissionByName( _
                                            "CES_INQUIRY.SERCH_TRANSMISSION_BY_NAME", _
                                            str_Data)
            If RS.RecordCount > 0 Then
                Call SetDefaultCursor
                Set RS = Nothing
                m_str_Msg = "Transmission with the same name already exist. Please "
                m_str_Msg = m_str_Msg + "provide another name."
                MsgBox m_str_Msg
                txtData.SetFocus
                Exit Sub
            End If
            
            l_Result = modDBHelper.AddTransmissions("CES_UPDATE.ADD_TRANSMISSIONS", _
                                                    l_RetVal, _
                                                    str_Data)
            If (l_Result = 0) Then
                Call SetDefaultCursor
                m_str_Msg = "Transmission has been added."
                MsgBox m_str_Msg
                'Add record to the AUDIT_MODIFY_HISTORY table.
                l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                                    "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                                    l_RetVal, _
                                    "Transmission was added to the System", _
                                    0, _
                                    "ETD", _
                                    "Transmission ---> " + Trim(txtData.Text), _
                                    "")
            Else
                Call SetDefaultCursor
                m_str_Msg = "There was an error adding Transmission. Please contact "
                m_str_Msg = m_str_Msg + "Supervisor."
                MsgBox m_str_Msg
            End If
        Else
            'Check that differential name is not duplicated in the DIFFERENTIAL table.
            Set RS = New ADODB.Recordset
            Set RS = modDBHelper.SearchDifferentialByName( _
                                            "CES_INQUIRY.SERCH_DIFFERENTIAL_BY_NAME", _
                                            str_Data)
            If RS.RecordCount > 0 Then
                Call SetDefaultCursor
                Set RS = Nothing
                m_str_Msg = "Differential with the same name already exist. Please "
                m_str_Msg = m_str_Msg + "provide another name."
                MsgBox m_str_Msg
                txtData.SetFocus
                Exit Sub
            End If
            l_Result = modDBHelper.AddDifferentials("CES_UPDATE.ADD_DIFFERENTIALS", _
                                                    l_RetVal, _
                                                    str_Data)
            If (l_Result = 0) Then
                Call SetDefaultCursor
                m_str_Msg = "Differential has been added."
                MsgBox m_str_Msg
                'Add record to the AUDIT_MODIFY_HISTORY table.
                l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                                    "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                                    l_RetVal, _
                                    "Differential was added to the System", _
                                    0, _
                                    "ETD", _
                                    "Differential ---> " + Trim(txtData.Text), _
                                    "")
            Else
                Call SetDefaultCursor
                m_str_Msg = "There was an error adding Differential. Please contact "
                m_str_Msg = m_str_Msg + "Supervisor."
                MsgBox m_str_Msg
            End If
        End If
    Else ' If cmdAdd.Caption = "Update"
       If optEngine.Value = True Then
            'Check that engine name is not duplicated in the ENGINES table.
            Set RS = New ADODB.Recordset
            Set RS = modDBHelper.SearchEngineByName("CES_INQUIRY.SERCH_ENGINE_BY_NAME", _
                                                    str_Data)
            If RS.RecordCount > 0 Then
                Call SetDefaultCursor
                Set RS = Nothing
                m_str_Msg = "Engine with the same name already exist. Please provide "
                m_str_Msg = m_str_Msg + "another name."
                MsgBox m_str_Msg
                txtData.SetFocus
                Exit Sub
            End If
            
            l_Result = modDBHelper.UpdateEngines("CES_UPDATE.UPDATE_ENGINES", _
                                                 l_RetVal, _
                                                 str_Data, _
                                                 m_var_RowID)
        
            If (l_Result = 0) Then
                Call SetDefaultCursor
                m_str_Msg = "Engine has been updated."
                MsgBox m_str_Msg
                'Add record to the AUDIT_MODIFY_HISTORY table.
                l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                                    "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                                    l_RetVal, _
                                    "Engine was updated in the System", _
                                    0, _
                                    "ETD", _
                                    "Engine ---> " + Trim(txtData.Text), _
                                    "")
            Else
                Call SetDefaultCursor
                m_str_Msg = "There was an error updating Engine. Please contact Supervisor."
                MsgBox m_str_Msg
            End If
        ElseIf optTransmission = True Then
            'Check that transmission name is not duplicated in the TRANSMISSIONS table.
            Set RS = New ADODB.Recordset
            Set RS = modDBHelper.SearchTransmissionByName( _
                                            "CES_INQUIRY.SERCH_TRANSMISSION_BY_NAME", _
                                            str_Data)
            If RS.RecordCount > 0 Then
                Call SetDefaultCursor
                Set RS = Nothing
                m_str_Msg = "Transmission with the same name already exist. Please "
                m_str_Msg = m_str_Msg + "provide another name."
                MsgBox m_str_Msg
                txtData.SetFocus
                Exit Sub
            End If
            l_Result = modDBHelper.UpdateTransmissions("CES_UPDATE.UPDATE_TRANSMISSIONS", _
                                                       l_RetVal, _
                                                       str_Data, _
                                                       m_var_RowID)
            If (l_Result = 0) Then
                Call SetDefaultCursor
                m_str_Msg = "Transmission has been updated."
                MsgBox m_str_Msg
                'Add record to the AUDIT_MODIFY_HISTORY table.
                l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                                    "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                                    l_RetVal, _
                                    "Transmission was updated in the System", _
                                    0, _
                                    "ETD", _
                                    "Transmission ---> " + Trim(txtData.Text), _
                                    "")
            Else
                Call SetDefaultCursor
                m_str_Msg = "There was an error updating Transmission. Please contact "
                m_str_Msg = m_str_Msg + "Supervisor."
                MsgBox m_str_Msg
            End If
        Else
            'Check that differential name is not duplicated in the DIFFERENTIAL table.
            Set RS = New ADODB.Recordset
            Set RS = modDBHelper.SearchDifferentialByName( _
                                            "CES_INQUIRY.SERCH_DIFFERENTIAL_BY_NAME", _
                                            str_Data)
            If RS.RecordCount > 0 Then
                Call SetDefaultCursor
                Set RS = Nothing
                m_str_Msg = "Differential with the same name already exist. Please "
                m_str_Msg = m_str_Msg + "provide another name."
                MsgBox m_str_Msg
                txtData.SetFocus
                Exit Sub
            End If
            l_Result = modDBHelper.UpdateDiffentials("CES_UPDATE.UPDATE_DIFFERENTIALS", _
                                                     l_RetVal, _
                                                     str_Data, _
                                                     m_var_RowID)
            If (l_Result = 0) Then
                Call SetDefaultCursor
                m_str_Msg = "Differential has been updated."
                MsgBox m_str_Msg
                'Add record to the AUDIT_MODIFY_HISTORY table.
                l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                                    "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                                    l_RetVal, _
                                    "Differential was updated in the System", _
                                    0, _
                                    "ETD", _
                                    "Differential ---> " + Trim(txtData.Text), _
                                    "")
            Else
                Call SetDefaultCursor
                m_str_Msg = "There was an error updating Differential. Please contact "
                m_str_Msg = m_str_Msg + "Supervisor."
                MsgBox m_str_Msg
            End If
        End If
    End If
    
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    
    Call SetDefaultCursor
    Unload Me

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdAdd_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    If (m_str_TextValue <> "" Or m_var_RowID <> "" Or m_str_PartSelection <> "") Then
        cmdAdd.Caption = "Update"
        Me.Caption = "Update Engines/Transmissions/Differentials"
        lblSelectPartToAdd.Caption = "Part To Update"
        If m_str_PartSelection = "ENGINE" Then
            optEngine.Value = True
            optEngine.Enabled = True
            optTransmission.Enabled = False
            optDifferential.Enabled = False
        ElseIf m_str_PartSelection = "TRANS" Then
            optTransmission.Value = True
            optTransmission.Enabled = True
            optEngine.Enabled = False
            optDifferential.Enabled = False
        ElseIf m_str_PartSelection = "DIFF" Then
            optDifferential.Value = True
            optDifferential.Enabled = True
            optEngine.Enabled = False
            optTransmission.Enabled = False
        End If
        txtData.Text = m_str_TextValue
    End If

    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler

    Call SetDefaultCursor
    m_str_TextValue = ""
    m_var_RowID = ""
    m_str_PartSelection = ""

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub txtData_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim str_Data As String
    Dim l_CursorPosition As Long
    
    On Error GoTo Error_Handler

    'Convert data in the txtData edit-box to upper case.
    l_CursorPosition = txtData.SelStart
    str_Data = txtData.Text
    str_Data = UCase(str_Data)
    txtData.Text = str_Data
    txtData.SelStart = l_CursorPosition
        
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtData_KeyUp", g_l_ErrorLineNumber
End Sub

frmAddVehTypes.frm :
VERSION 5.00
Begin VB.Form frmAddVehTypes 
   BorderStyle     =   3  'Fixed Dialog
   Caption         =   "Add Vehicle Type"
   ClientHeight    =   2280
   ClientLeft      =   45
   ClientTop       =   330
   ClientWidth     =   4635
   Icon            =   "frmAddVehTypes.frx":0000
   LinkTopic       =   "Form1"
   MaxButton       =   0   'False
   MinButton       =   0   'False
   ScaleHeight     =   2280
   ScaleWidth      =   4635
   ShowInTaskbar   =   0   'False
   StartUpPosition =   2  'CenterScreen
   Begin VB.TextBox txtYear 
      Height          =   285
      Left            =   1980
      MaxLength       =   4
      TabIndex        =   2
      Top             =   1320
      Width           =   1545
   End
   Begin VB.CommandButton cmdAdd 
      Caption         =   "Add"
      Default         =   -1  'True
      Height          =   300
      Left            =   1680
      TabIndex        =   3
      Top             =   1800
      Width           =   1140
   End
   Begin VB.TextBox txtModel 
      Height          =   285
      Left            =   1980
      MaxLength       =   25
      TabIndex        =   1
      Top             =   1020
      Width           =   1545
   End
   Begin VB.TextBox txtMake 
      Height          =   285
      Left            =   1980
      MaxLength       =   25
      TabIndex        =   0
      Top             =   705
      Width           =   1545
   End
   Begin VB.Label lblYear 
      Caption         =   "Year"
      Height          =   270
      Left            =   1005
      TabIndex        =   7
      Top             =   1350
      Width           =   585
   End
   Begin VB.Label lblModel 
      Caption         =   "Model"
      Height          =   240
      Left            =   990
      TabIndex        =   6
      Top             =   1050
      Width           =   750
   End
   Begin VB.Label lblMake 
      Caption         =   "Make"
      Height          =   225
      Left            =   990
      TabIndex        =   5
      Top             =   705
      Width           =   750
   End
   Begin VB.Label lblAddMakeModelYear 
      Caption         =   "Add Make/Model/Year"
      BeginProperty Font 
         Name            =   "Batang"
         Size            =   14.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   285
      Left            =   705
      TabIndex        =   4
      Top             =   165
      Width           =   3390
   End
End
Attribute VB_Name = "frmAddVehTypes"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
'==============================================================
'frmAddVehTypes.frm
'
'Adds a vehicle estimate to the cost tracking system database.
'User enters information into the input boxes and submits the values
'which are then saved into the database.
'===============================================================
Option Explicit

Private m_str_Msg As String

Private Sub cmdAdd_Click()
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_Make As String
    Dim str_Model As String
    Dim str_Year As String
    Dim l_Year As Long
    Dim RS As ADODB.Recordset

    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    'Make sure that user typed something into the txtMake edit-box.
    str_Make = Trim(txtMake.Text)
    If str_Make = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please provide Make."
        MsgBox m_str_Msg
        txtMake.SetFocus
        Exit Sub
    End If

    'Make sure that user typed something into the txtModel edit-box.
    str_Model = Trim(txtModel.Text)
    If str_Model = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please provide Model."
        MsgBox m_str_Msg
        txtModel.SetFocus
        Exit Sub
    End If

    'Make sure that user typed something into the txtYear edit-box.
    str_Year = Trim(txtYear.Text)
    If str_Year = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please provide valid Year."
        MsgBox m_str_Msg
        txtYear.SetFocus
        Exit Sub
    End If
    
    If IsNumeric(str_Year) = False Then
        Call SetDefaultCursor
        m_str_Msg = "Please provide valid Year."
        MsgBox m_str_Msg
        txtYear.SetFocus
        Exit Sub
    End If
    
    l_Year = CLng(str_Year)
    txtYear.Text = CStr(l_Year)
    If l_Year < 1800 Then
        Call SetDefaultCursor
        m_str_Msg = "Please provide valid Year."
        MsgBox m_str_Msg
        txtYear.SetFocus
        Exit Sub
    End If

    'Make sure that data is not duplicated in the ADD_VEH_TYPES table.
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.SearchVehTypeByKey("CES_INQUIRY.SEARCH_VEH_TYPE_BY_KEY", _
                                            str_Make, _
                                            str_Model, _
                                            str_Year)
    
    If RS.RecordCount > 0 Then
        Call SetDefaultCursor
        Set RS = Nothing
        m_str_Msg = "Vehicle with this Make/Model/Year already exist. Please "
        m_str_Msg = m_str_Msg + "provide other settings."
        MsgBox m_str_Msg
        txtMake.SetFocus
        Exit Sub
    End If
        
    l_Result = modDBHelper.AddVehTypes("CES_UPDATE.ADD_VEH_TYPES", _
                                       l_RetVal, _
                                       str_Make, _
                                       str_Model, _
                                       str_Year)

    If (l_Result = 0) Then
        Call SetDefaultCursor
        m_str_Msg = "Vehicle Type has been added."
        MsgBox m_str_Msg
        'Add record to the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "Vehicle Type was added to the System", _
                            0, _
                            "MVI", _
                            "Make ---> " + str_Make, _
                            "Model ---> " + str_Model, _
                            "Year ---> " + str_Year, _
                            "")
        Unload Me
    Else
        Call SetDefaultCursor
        m_str_Msg = "There was an error adding Vehicle Type. "
        m_str_Msg = m_str_Msg + "Please contact Supervisor."
        MsgBox m_str_Msg
    End If

    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    
    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdAdd_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler

    Call SetWaitCursor
    Me.WindowState = 0
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub txtMake_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtMake edit-box to upper case.
    l_CursorPosition = txtMake.SelStart
    str_Data = txtMake.Text
    str_Data = UCase(str_Data)
    txtMake.Text = str_Data
    txtMake.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtMake_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtModel_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtModel edit-box to upper case.
    l_CursorPosition = txtModel.SelStart
    str_Data = txtModel.Text
    str_Data = UCase(str_Data)
    txtModel.Text = str_Data
    txtModel.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtModel_KeyUp", g_l_ErrorLineNumber
End Sub
frmArchivedBUSEstimateMain.frm :
VERSION 5.00
Begin VB.Form frmAddVehTypes 
   BorderStyle     =   3  'Fixed Dialog
   Caption         =   "Add Vehicle Type"
   ClientHeight    =   2280
   ClientLeft      =   45
   ClientTop       =   330
   ClientWidth     =   4635
   Icon            =   "frmAddVehTypes.frx":0000
   LinkTopic       =   "Form1"
   MaxButton       =   0   'False
   MinButton       =   0   'False
   ScaleHeight     =   2280
   ScaleWidth      =   4635
   ShowInTaskbar   =   0   'False
   StartUpPosition =   2  'CenterScreen
   Begin VB.TextBox txtYear 
      Height          =   285
      Left            =   1980
      MaxLength       =   4
      TabIndex        =   2
      Top             =   1320
      Width           =   1545
   End
   Begin VB.CommandButton cmdAdd 
      Caption         =   "Add"
      Default         =   -1  'True
      Height          =   300
      Left            =   1680
      TabIndex        =   3
      Top             =   1800
      Width           =   1140
   End
   Begin VB.TextBox txtModel 
      Height          =   285
      Left            =   1980
      MaxLength       =   25
      TabIndex        =   1
      Top             =   1020
      Width           =   1545
   End
   Begin VB.TextBox txtMake 
      Height          =   285
      Left            =   1980
      MaxLength       =   25
      TabIndex        =   0
      Top             =   705
      Width           =   1545
   End
   Begin VB.Label lblYear 
      Caption         =   "Year"
      Height          =   270
      Left            =   1005
      TabIndex        =   7
      Top             =   1350
      Width           =   585
   End
   Begin VB.Label lblModel 
      Caption         =   "Model"
      Height          =   240
      Left            =   990
      TabIndex        =   6
      Top             =   1050
      Width           =   750
   End
   Begin VB.Label lblMake 
      Caption         =   "Make"
      Height          =   225
      Left            =   990
      TabIndex        =   5
      Top             =   705
      Width           =   750
   End
   Begin VB.Label lblAddMakeModelYear 
      Caption         =   "Add Make/Model/Year"
      BeginProperty Font 
         Name            =   "Batang"
         Size            =   14.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   285
      Left            =   705
      TabIndex        =   4
      Top             =   165
      Width           =   3390
   End
End
Attribute VB_Name = "frmAddVehTypes"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
'==============================================================
'frmAddVehTypes.frm
'
'Adds a vehicle estimate to the cost tracking system database.
'User enters information into the input boxes and submits the values
'which are then saved into the database.
'===============================================================
Option Explicit

Private m_str_Msg As String

Private Sub cmdAdd_Click()
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_Make As String
    Dim str_Model As String
    Dim str_Year As String
    Dim l_Year As Long
    Dim RS As ADODB.Recordset

    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    'Make sure that user typed something into the txtMake edit-box.
    str_Make = Trim(txtMake.Text)
    If str_Make = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please provide Make."
        MsgBox m_str_Msg
        txtMake.SetFocus
        Exit Sub
    End If

    'Make sure that user typed something into the txtModel edit-box.
    str_Model = Trim(txtModel.Text)
    If str_Model = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please provide Model."
        MsgBox m_str_Msg
        txtModel.SetFocus
        Exit Sub
    End If

    'Make sure that user typed something into the txtYear edit-box.
    str_Year = Trim(txtYear.Text)
    If str_Year = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please provide valid Year."
        MsgBox m_str_Msg
        txtYear.SetFocus
        Exit Sub
    End If
    
    If IsNumeric(str_Year) = False Then
        Call SetDefaultCursor
        m_str_Msg = "Please provide valid Year."
        MsgBox m_str_Msg
        txtYear.SetFocus
        Exit Sub
    End If
    
    l_Year = CLng(str_Year)
    txtYear.Text = CStr(l_Year)
    If l_Year < 1800 Then
        Call SetDefaultCursor
        m_str_Msg = "Please provide valid Year."
        MsgBox m_str_Msg
        txtYear.SetFocus
        Exit Sub
    End If

    'Make sure that data is not duplicated in the ADD_VEH_TYPES table.
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.SearchVehTypeByKey("CES_INQUIRY.SEARCH_VEH_TYPE_BY_KEY", _
                                            str_Make, _
                                            str_Model, _
                                            str_Year)
    
    If RS.RecordCount > 0 Then
        Call SetDefaultCursor
        Set RS = Nothing
        m_str_Msg = "Vehicle with this Make/Model/Year already exist. Please "
        m_str_Msg = m_str_Msg + "provide other settings."
        MsgBox m_str_Msg
        txtMake.SetFocus
        Exit Sub
    End If
        
    l_Result = modDBHelper.AddVehTypes("CES_UPDATE.ADD_VEH_TYPES", _
                                       l_RetVal, _
                                       str_Make, _
                                       str_Model, _
                                       str_Year)

    If (l_Result = 0) Then
        Call SetDefaultCursor
        m_str_Msg = "Vehicle Type has been added."
        MsgBox m_str_Msg
        'Add record to the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "Vehicle Type was added to the System", _
                            0, _
                            "MVI", _
                            "Make ---> " + str_Make, _
                            "Model ---> " + str_Model, _
                            "Year ---> " + str_Year, _
                            "")
        Unload Me
    Else
        Call SetDefaultCursor
        m_str_Msg = "There was an error adding Vehicle Type. "
        m_str_Msg = m_str_Msg + "Please contact Supervisor."
        MsgBox m_str_Msg
    End If

    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    
    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdAdd_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler

    Call SetWaitCursor
    Me.WindowState = 0
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub txtMake_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtMake edit-box to upper case.
    l_CursorPosition = txtMake.SelStart
    str_Data = txtMake.Text
    str_Data = UCase(str_Data)
    txtMake.Text = str_Data
    txtMake.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtMake_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtModel_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtModel edit-box to upper case.
    l_CursorPosition = txtModel.SelStart
    str_Data = txtModel.Text
    str_Data = UCase(str_Data)
    txtModel.Text = str_Data
    txtModel.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtModel_KeyUp", g_l_ErrorLineNumber
End Sub
frmArchivedBUSEstimateMain.frm :
VERSION 5.00
Object = "{0D452EE1-E08F-101A-852E-02608C4D0BB4}#2.0#0"; "FM20.DLL"
Object = "{CDE57A40-8B86-11D0-B3C6-00A0C90AEA82}#1.0#0"; "msdatgrd.ocx"
Object = "{F0D2F211-CCB0-11D0-A316-00AA00688B10}#1.0#0"; "msdatlst.ocx"
Object = "{831FDD16-0C5C-11D2-A9FC-0000F8754DA1}#2.0#0"; "Mscomctl.ocx"
Begin VB.Form frmArchivedBUSEstimateMain 
   BorderStyle     =   1  'Fixed Single
   Caption         =   "Archived Vehicle Estimate"
   ClientHeight    =   11220
   ClientLeft      =   45
   ClientTop       =   330
   ClientWidth     =   9075
   Icon            =   "frmArchivedBUSEstimateMain.frx":0000
   LinkTopic       =   "Form1"
   MaxButton       =   0   'False
   MDIChild        =   -1  'True
   MinButton       =   0   'False
   ScaleHeight     =   11220
   ScaleWidth      =   9075
   Begin VB.TextBox txtArchivedBy 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      Enabled         =   0   'False
      Height          =   285
      Left            =   3270
      TabIndex        =   33
      Top             =   2100
      Width           =   2700
   End
   Begin VB.TextBox txtDateArchived 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      Enabled         =   0   'False
      Height          =   285
      Left            =   255
      TabIndex        =   32
      Top             =   2100
      Width           =   2820
   End
   Begin MSDataGridLib.DataGrid grdMaterialsCostCentreTotals 
      Height          =   3585
      Left            =   0
      TabIndex        =   0
      Top             =   7560
      Width           =   4605
      _ExtentX        =   8123
      _ExtentY        =   6324
      _Version        =   393216
      BackColor       =   12648447
      ForeColor       =   16711680
      HeadLines       =   1
      RowHeight       =   15
      BeginProperty HeadFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Caption         =   "MATERIALS COST CENTRE TOTALS"
      ColumnCount     =   2
      BeginProperty Column00 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      BeginProperty Column01 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      SplitCount      =   1
      BeginProperty Split0 
         BeginProperty Column00 
         EndProperty
         BeginProperty Column01 
         EndProperty
      EndProperty
   End
   Begin MSDataGridLib.DataGrid grdLabourCostCentreTotals 
      Height          =   2145
      Left            =   0
      TabIndex        =   1
      Top             =   5280
      Width           =   8925
      _ExtentX        =   15743
      _ExtentY        =   3784
      _Version        =   393216
      BackColor       =   12648447
      ForeColor       =   16711680
      HeadLines       =   1
      RowHeight       =   15
      BeginProperty HeadFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Caption         =   "LABOUR COST CENTRE TOTALS"
      ColumnCount     =   2
      BeginProperty Column00 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      BeginProperty Column01 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      SplitCount      =   1
      BeginProperty Split0 
         BeginProperty Column00 
         EndProperty
         BeginProperty Column01 
         EndProperty
      EndProperty
   End
   Begin MSDataGridLib.DataGrid grdLabour 
      Height          =   2145
      Left            =   0
      TabIndex        =   2
      Top             =   3120
      Width           =   8940
      _ExtentX        =   15769
      _ExtentY        =   3784
      _Version        =   393216
      AllowUpdate     =   0   'False
      BackColor       =   12648447
      ForeColor       =   16711680
      HeadLines       =   1
      RowHeight       =   15
      BeginProperty HeadFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Caption         =   "LABOUR"
      ColumnCount     =   2
      BeginProperty Column00 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      BeginProperty Column01 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      SplitCount      =   1
      BeginProperty Split0 
         BeginProperty Column00 
         EndProperty
         BeginProperty Column01 
         EndProperty
      EndProperty
   End
   Begin MSDataListLib.DataCombo cboOEMKitsList 
      Height          =   315
      Left            =   7080
      TabIndex        =   3
      Top             =   7590
      Width           =   1815
      _ExtentX        =   3201
      _ExtentY        =   556
      _Version        =   393216
      Style           =   2
      Text            =   ""
   End
   Begin MSComctlLib.Toolbar tbMenu 
      Align           =   1  'Align Top
      Height          =   360
      Left            =   0
      TabIndex        =   36
      Top             =   0
      Width           =   9075
      _ExtentX        =   16007
      _ExtentY        =   635
      ButtonWidth     =   1296
      ButtonHeight    =   582
      Appearance      =   1
      Style           =   1
      TextAlignment   =   1
      _Version        =   393216
      BeginProperty Buttons {66833FE8-8583-11D1-B16A-00C0F0283628} 
         NumButtons      =   2
         BeginProperty Button1 {66833FEA-8583-11D1-B16A-00C0F0283628} 
            Caption         =   "File"
            Style           =   5
            BeginProperty ButtonMenus {66833FEC-8583-11D1-B16A-00C0F0283628} 
               NumButtonMenus  =   2
               BeginProperty ButtonMenu1 {66833FEE-8583-11D1-B16A-00C0F0283628} 
                  Text            =   "Print"
               EndProperty
               BeginProperty ButtonMenu2 {66833FEE-8583-11D1-B16A-00C0F0283628} 
                  Text            =   "Close"
               EndProperty
            EndProperty
         EndProperty
         BeginProperty Button2 {66833FEA-8583-11D1-B16A-00C0F0283628} 
            Caption         =   "View"
            Style           =   5
            BeginProperty ButtonMenus {66833FEC-8583-11D1-B16A-00C0F0283628} 
               NumButtonMenus  =   1
               BeginProperty ButtonMenu1 {66833FEE-8583-11D1-B16A-00C0F0283628} 
                  Text            =   "Materials List"
               EndProperty
            EndProperty
         EndProperty
      EndProperty
   End
   Begin VB.Label lblArchivedBy 
      Caption         =   "Archived By"
      Height          =   255
      Left            =   4200
      TabIndex        =   35
      Top             =   1845
      Width           =   975
   End
   Begin VB.Label lblArchivedDate 
      Caption         =   "Date Archived"
      Height          =   255
      Left            =   1095
      TabIndex        =   34
      Top             =   1830
      Width           =   1095
   End
   Begin MSForms.TextBox txtDescription 
      Height          =   495
      Left            =   540
      TabIndex        =   31
      Top             =   585
      Width           =   7560
      VariousPropertyBits=   -1400879079
      Size            =   "13335;873"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   3
   End
   Begin VB.Label lblNumberOfBuses 
      Caption         =   "Number of Vehicles"
      Height          =   210
      Left            =   6645
      TabIndex        =   30
      Top             =   1140
      Width           =   1410
   End
   Begin MSForms.TextBox txtNumberOfBuses 
      Height          =   300
      Left            =   6330
      TabIndex        =   29
      Top             =   1380
      Width           =   1920
      VariousPropertyBits=   746604569
      Size            =   "3387;529"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   3
   End
   Begin MSForms.TextBox txtTotalHours 
      Height          =   300
      Left            =   3765
      TabIndex        =   28
      Top             =   1380
      Width           =   1800
      VariousPropertyBits=   746604569
      Size            =   "3175;529"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   3
   End
   Begin VB.Label lblTotalHours 
      Caption         =   "Total Hours"
      Height          =   210
      Left            =   4230
      TabIndex        =   27
      Top             =   1170
      Width           =   945
   End
   Begin VB.Label lblVehicleSeriesCode 
      Caption         =   "Vehicle Series Code"
      Height          =   195
      Left            =   885
      TabIndex        =   26
      Top             =   1170
      Width           =   1530
   End
   Begin MSForms.TextBox txtVehicleSeriesCode 
      Height          =   300
      Left            =   255
      TabIndex        =   25
      Top             =   1380
      Width           =   2820
      VariousPropertyBits=   746604569
      Size            =   "4974;529"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   3
   End
   Begin MSForms.TextBox txtSOPNumber 
      Height          =   300
      Left            =   6300
      TabIndex        =   24
      Top             =   2085
      Width           =   1980
      VariousPropertyBits=   746604569
      Size            =   "3492;529"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   3
   End
   Begin VB.Label lblSOPNumber 
      Caption         =   "SOP Number"
      Height          =   180
      Left            =   6855
      TabIndex        =   23
      Top             =   1875
      Width           =   1005
   End
   Begin VB.Label lblSelectedKitCost 
      Alignment       =   1  'Right Justify
      Caption         =   "Selected Kit Cost"
      Height          =   255
      Left            =   4710
      TabIndex        =   22
      Top             =   8040
      Width           =   2265
   End
   Begin VB.Label lblOEMKitPrice 
      Alignment       =   1  'Right Justify
      Caption         =   "OEM Kits Total (Excluding Tax) "
      Height          =   255
      Left            =   4710
      TabIndex        =   21
      Top             =   8400
      Width           =   2265
   End
   Begin VB.Label lblOEMKitsAttached 
      Alignment       =   1  'Right Justify
      Caption         =   "OEM Kits Attached "
      Height          =   255
      Left            =   4710
      TabIndex        =   20
      Top             =   7680
      Width           =   2265
   End
   Begin VB.Label lblTotalBusCost 
      Alignment       =   1  'Right Justify
      Caption         =   "Total Vehicle Cost"
      Height          =   255
      Left            =   4710
      TabIndex        =   19
      Top             =   10200
      Width           =   2265
   End
   Begin VB.Label lblMaterialsTotal 
      Alignment       =   1  'Right Justify
      Caption         =   "Materials Total (Excluding Tax)"
      Height          =   255
      Left            =   4710
      TabIndex        =   18
      Top             =   9840
      Width           =   2265
   End
   Begin VB.Label lblLabourTotal 
      Alignment       =   1  'Right Justify
      Caption         =   "Labour Total"
      Height          =   255
      Left            =   4710
      TabIndex        =   17
      Top             =   9480
      Width           =   2265
   End
   Begin VB.Label lblLabourSubtotal 
      Alignment       =   1  'Right Justify
      Caption         =   "Labour Subtotal"
      Height          =   255
      Left            =   4710
      TabIndex        =   16
      Top             =   8760
      Width           =   2265
   End
   Begin VB.Label lblLabourOverheadAmount 
      Alignment       =   1  'Right Justify
      Caption         =   "Labour Overhead Amount"
      Height          =   255
      Left            =   4710
      TabIndex        =   15
      Top             =   9120
      Width           =   2265
   End
   Begin VB.Label lblTaxTotal 
      Alignment       =   1  'Right Justify
      Caption         =   "Tax Total"
      Height          =   255
      Left            =   4710
      TabIndex        =   14
      Top             =   10560
      Width           =   2265
   End
   Begin MSForms.TextBox txtSelectedKitCost 
      Height          =   315
      Left            =   7080
      TabIndex        =   13
      Top             =   7950
      Width           =   1815
      VariousPropertyBits=   746604569
      Size            =   "3201;556"
      Value           =   "$0.00"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
   Begin MSForms.TextBox txtOEMKitsTotal 
      Height          =   315
      Left            =   7080
      TabIndex        =   12
      Top             =   8310
      Width           =   1815
      VariousPropertyBits=   746604569
      BackColor       =   16777215
      Size            =   "3201;556"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
   Begin MSForms.TextBox txtTotalVehicleCost 
      Height          =   315
      Left            =   7080
      TabIndex        =   11
      Top             =   10110
      Width           =   1815
      VariousPropertyBits=   746604569
      BackColor       =   -2147483624
      Size            =   "3201;556"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
   Begin MSForms.TextBox txtMaterialTotal 
      Height          =   315
      Left            =   7080
      TabIndex        =   10
      Top             =   9750
      Width           =   1815
      VariousPropertyBits=   746604569
      Size            =   "3201;556"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
   Begin MSForms.TextBox txtLabourTotal 
      Height          =   315
      Left            =   7080
      TabIndex        =   9
      Top             =   9390
      Width           =   1815
      VariousPropertyBits=   746604569
      Size            =   "3201;556"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
   Begin MSForms.TextBox txtLabourSubtotal 
      Height          =   315
      Left            =   7080
      TabIndex        =   8
      Top             =   8670
      Width           =   1815
      VariousPropertyBits=   746604569
      Size            =   "3201;556"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
   Begin MSForms.TextBox txtLabourOverheadAmount 
      Height          =   315
      Left            =   7080
      TabIndex        =   7
      Top             =   9030
      Width           =   1815
      VariousPropertyBits=   746604569
      Size            =   "3201;556"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
   Begin MSForms.TextBox txtTaxTotal 
      Height          =   315
      Left            =   7080
      TabIndex        =   6
      Top             =   10470
      Width           =   1815
      VariousPropertyBits=   746604569
      Size            =   "3201;556"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
   Begin VB.Label lblTotalVehicleCostWithTax 
      Alignment       =   1  'Right Justify
      Caption         =   "Total Vehicle Cost With Tax"
      Height          =   255
      Left            =   4800
      TabIndex        =   5
      Top             =   10920
      Width           =   2175
   End
   Begin MSForms.TextBox txtTotalVehicleCostWithTax 
      Height          =   315
      Left            =   7080
      TabIndex        =   4
      Top             =   10830
      Width           =   1815
      VariousPropertyBits=   746604569
      BackColor       =   -2147483624
      Size            =   "3201;556"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
End
Attribute VB_Name = "frmArchivedBUSEstimateMain"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
'---------------------------------------------------------------------------------------
' Module    : frmArchivedBUSEstimateMain
' Purpose   : This form loads an archived Vehicle Estimate.
'---------------------------------------------------------------------------------------
'
Option Explicit

Public m_str_EstimateNumberID As String

'---------------------------------------------------------------------------------------
' Procedure : cmdMaterialsList_Click
' Purpose   :
'---------------------------------------------------------------------------------------
'
Private Sub cmdMaterialsList_Click()
    On Error GoTo Error_Handler
    
    frmArchivedBUSMaterials.m_str_EstimateNumberID = m_str_EstimateNumberID
    frmArchivedBUSMaterials.Show
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
End Sub

'---------------------------------------------------------------------------------------
' Procedure : Form_Load
' Purpose   : Calls appropriate functions to populate the data on the form
'---------------------------------------------------------------------------------------
'
Private Sub Form_Load()
    On Error GoTo Error_Handler

    Call SetWaitCursor  'start hour glass
    Call Populate
    Call SetDefaultCursor 'End hour glass
    Call FormatColumns
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

'---------------------------------------------------------------------------------------
' Procedure : Populate
' Purpose   : Populates the form with the archived data of a
'             specified rebuilt part estimate that has been archived.
'---------------------------------------------------------------------------------------
'
Private Sub Populate()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler

    'Loads the employee labour table
    Set RS = modDBHelper.RetrieveArchMB("CES_ARCHIVE.GET_ARCH_VEH_EMPLOYEE_LABOUR", _
                                              m_str_EstimateNumberID)
    If RS.RecordCount > 0 Then
         Set grdLabour.DataSource = RS
         RS.MoveFirst
         txtTotalHours.Text = DecimalToMinutes(ColumnTotals(RS, "Time addition"))
    Else
         Set grdLabour.DataSource = Nothing
         txtTotalHours.Text = 0
    End If
    Set RS = Nothing
    
    'Loads the labour cost center totals table
    Set RS = modDBHelper.RetrieveArchMB("CES_ARCHIVE.GET_ARCH_VEH_LABOUR_CC_TOTAL", _
                                              m_str_EstimateNumberID)
    If RS.RecordCount > 0 Then
         Set grdLabourCostCentreTotals.DataSource = RS
    Else
         Set grdLabourCostCentreTotals.DataSource = Nothing
    End If
    Set RS = Nothing
    Set RS = modDBHelper.RetrieveArchMB("CES_ARCHIVE.GET_ARCH_VEH_MASTERLIST_BY_ID", _
                                              m_str_EstimateNumberID)

    'Load all text boxes stored in the database
    If RS.RecordCount > 0 Then
        txtNumberOfBuses.Text = RS.Fields.Item("NUM_OF_VEHICLES").Value
        txtVehicleSeriesCode.Text = RS.Fields.Item("VEH_SERIES_CODE")
        txtSOPNumber.Text = RS.Fields.Item("SOPNUMBER")
        txtDescription.Text = RS.Fields.Item("PROJ_DESC")
        txtDateArchived.Text = RS.Fields.Item("DATE_ARCHIVED")
        txtArchivedBy.Text = RS.Fields.Item("ARCHIVED_BY")
        txtLabourSubtotal.Text = Format(RS.Fields.Item("LABOUR_COST"), "currency")
        txtLabourOverheadAmount.Text = Format(RS.Fields.Item("LABOUR_OVERHEAD_AMOUNT"), "currency")
        txtLabourTotal.Text = Format(RS.Fields.Item("LABOUR_TOTAL"), "currency")
        txtMaterialTotal.Text = Format(RS.Fields.Item("MATERIALS_TOTAL"), "currency")
        txtTotalVehicleCost.Text = Format(RS.Fields.Item("TOTAL_BUS_ESTIMATE_COST"), "currency")
        txtTaxTotal.Text = Format(RS.Fields.Item("TOTAL_TAX"), "currency")
        txtTotalVehicleCostWithTax.Text = Format(RS.Fields.Item("TOTAL_COST_TAX"), "currency")
        txtOEMKitsTotal.Text = Format(RS.Fields.Item("OEM_KITS_TOTAL"), "currency")
    End If
    
    Set RS = Nothing
    Set RS = modDBHelper.RetrieveArchMB("CES_ARCHIVE.GET_ARCH_VEH_MAT_CC_TOTAL", _
                                              m_str_EstimateNumberID)
    If RS.RecordCount > 0 Then
         Set grdMaterialsCostCentreTotals.DataSource = RS
    Else
         Set grdMaterialsCostCentreTotals.DataSource = Nothing
    End If
    
    Set RS = Nothing
    
    Set RS = modDBHelper.RetrieveMBListOfBuses("CES_ARCHIVE.GET_ARCH_VEH_KIT_LIST", _
                                                    m_str_EstimateNumberID)
        Set cboOEMKitsList.RowSource = RS
        cboOEMKitsList.ListField = "PART_NUMBER"
    Set RS = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Populate", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub FormatColumns()
    On Error GoTo Error_Handler
    
    If Not grdLabour.Row Then
        grdLabour.Columns("CC").Width = 500
        grdLabour.Columns("TASK").Width = 1600
        grdLabour.Columns("LABOUR TYPE").Width = 2120
        grdLabour.Columns("USAGE").Width = 620
        grdLabour.Columns("USAGE").Alignment = dbgRight
        grdLabour.Columns("TIME").Width = 600
        grdLabour.Columns("TIME").Alignment = dbgRight
        grdLabour.Columns("ACTUAL TIME").Width = 1250
        grdLabour.Columns("ACTUAL TIME").Alignment = dbgRight
    End If

    If grdLabourCostCentreTotals.Columns.Count > 2 Then
        With grdLabourCostCentreTotals
            .Columns("LABOUR DEFINITION").Width = 2680
            .Columns("WAGE GROUP").Alignment = dbgCenter
            .Columns("RATE PER HOUR").Alignment = dbgRight
            .Columns("RATE PER HOUR").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("TOTAL COST").Alignment = dbgRight
            .Columns("TOTAL COST").NumberFormat = "$#,##0.00;($#,##0.00)"

        End With
    End If
        
    If Not grdMaterialsCostCentreTotals.Row Then
        With grdMaterialsCostCentreTotals
            .Columns("COST CENTRE").Width = 600
            .Columns("TOTAL COST").Alignment = dbgRight
            .Columns("TOTAL COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("TOTAL COST").Width = 1525
        End With
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "FormatColumns", g_l_ErrorLineNumber
End Sub

'---------------------------------------------------------------------------------------
' Procedure : cboOEMKitsList_Change
' Purpose   : When the combo box is changed, the OEMKIT price for the current combo selection
'             displays the correct price
'---------------------------------------------------------------------------------------
'
Private Sub cboOEMKitsList_Change()
    Dim str_PartNumber As String
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler

    str_PartNumber = Trim(cboOEMKitsList.Text)
    If str_PartNumber <> "" Then
        Set RS = modDBHelper.ArchSearchOEMKits("CES_ARCHIVE.GET_ARCH_VEH_KIT_LIST_PART", _
                                           str_PartNumber, _
                                           m_str_EstimateNumberID)
        If RS.RecordCount > 0 Then
             txtSelectedKitCost.Text = Format(RS("ESTIMATED_COST").Value, "currency")
        End If
    End If

    If Not RS Is Nothing Then
        Set RS = Nothing
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cboOEMKitsList_Change", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub tbMenu_ButtonMenuClick(ByVal ButtonMenu As MSComctlLib.ButtonMenu)
    On Error GoTo Error_Handler
    
    Select Case ButtonMenu
        Case "Close"
            Unload Me
        Case "Print"
            ArchCostEstimateReport m_str_EstimateNumberID, "BUS"
            
        Case "Materials List"
            frmArchivedBUSMaterials.m_str_EstimateNumberID = m_str_EstimateNumberID
            frmArchivedBUSMaterials.Show
            frmArchivedBUSMaterials.SetFocus
        Case "Vehicle Info"

    End Select
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "tbMenu_ButtonMenuClick", g_l_ErrorLineNumber
    SetDefaultCursor
End Sub
frmArchivedBUSMaterials.frm :
VERSION 5.00
Object = "{0D452EE1-E08F-101A-852E-02608C4D0BB4}#2.0#0"; "FM20.DLL"
Object = "{CDE57A40-8B86-11D0-B3C6-00A0C90AEA82}#1.0#0"; "msdatgrd.ocx"
Begin VB.Form frmArchivedBUSMaterials 
   BorderStyle     =   1  'Fixed Single
   Caption         =   "Archived Vehicle Materials"
   ClientHeight    =   10200
   ClientLeft      =   45
   ClientTop       =   330
   ClientWidth     =   9855
   Icon            =   "frmArchivedBUSMaterials.frx":0000
   LinkTopic       =   "Form1"
   MaxButton       =   0   'False
   MDIChild        =   -1  'True
   MinButton       =   0   'False
   ScaleHeight     =   10200
   ScaleWidth      =   9855
   Begin MSDataGridLib.DataGrid grdRebuiltPartsList 
      Height          =   2610
      Left            =   0
      TabIndex        =   0
      Top             =   705
      Width           =   9780
      _ExtentX        =   17251
      _ExtentY        =   4604
      _Version        =   393216
      BackColor       =   12648447
      ForeColor       =   16711680
      HeadLines       =   1
      RowHeight       =   15
      BeginProperty HeadFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Caption         =   "REBUILT PARTS LIST"
      ColumnCount     =   2
      BeginProperty Column00 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      BeginProperty Column01 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      SplitCount      =   1
      BeginProperty Split0 
         BeginProperty Column00 
         EndProperty
         BeginProperty Column01 
         EndProperty
      EndProperty
   End
   Begin MSDataGridLib.DataGrid grdStockCodedPartsList 
      Height          =   2895
      Left            =   0
      TabIndex        =   1
      Top             =   3300
      Width           =   9780
      _ExtentX        =   17251
      _ExtentY        =   5106
      _Version        =   393216
      BackColor       =   12648447
      ForeColor       =   16711680
      HeadLines       =   1
      RowHeight       =   15
      BeginProperty HeadFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Caption         =   "STOCK CODED PARTS LIST"
      ColumnCount     =   2
      BeginProperty Column00 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      BeginProperty Column01 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      SplitCount      =   1
      BeginProperty Split0 
         BeginProperty Column00 
            ColumnWidth     =   2160
         EndProperty
         BeginProperty Column01 
            ColumnWidth     =   2160
         EndProperty
      EndProperty
   End
   Begin MSDataGridLib.DataGrid grdNonStockCodedPartsList 
      Height          =   2355
      Left            =   0
      TabIndex        =   2
      Top             =   6180
      Width           =   9780
      _ExtentX        =   17251
      _ExtentY        =   4154
      _Version        =   393216
      BackColor       =   12648447
      ForeColor       =   16711680
      HeadLines       =   1
      RowHeight       =   15
      BeginProperty HeadFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Caption         =   "NON-STOCK CODED PARTS LIST"
      ColumnCount     =   2
      BeginProperty Column00 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      BeginProperty Column01 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      SplitCount      =   1
      BeginProperty Split0 
         BeginProperty Column00 
            ColumnWidth     =   2160
         EndProperty
         BeginProperty Column01 
            ColumnWidth     =   2160
         EndProperty
      EndProperty
   End
   Begin VB.Label lblArchive 
      Caption         =   "Archive #"
      Height          =   225
      Left            =   3285
      TabIndex        =   14
      Top             =   270
      Width           =   750
   End
   Begin MSForms.TextBox txtRebuiltCode 
      Height          =   330
      Left            =   4035
      TabIndex        =   13
      Top             =   210
      Width           =   1680
      VariousPropertyBits=   746604569
      Size            =   "2963;582"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   3
   End
   Begin MSForms.TextBox txtRebuiltPartsTotal 
      Height          =   300
      Left            =   8250
      TabIndex        =   12
      Top             =   8625
      Width           =   1215
      VariousPropertyBits=   746604569
      Size            =   "2143;529"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
   Begin MSForms.TextBox txtStockCodedPartsTotal 
      Height          =   300
      Left            =   8250
      TabIndex        =   11
      Top             =   8925
      Width           =   1215
      VariousPropertyBits=   746604569
      Size            =   "2143;529"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
   Begin MSForms.TextBox txtNonStockCodedPartsTotal 
      Height          =   300
      Left            =   8250
      TabIndex        =   10
      Top             =   9225
      Width           =   1215
      VariousPropertyBits=   746604569
      Size            =   "2143;529"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
   Begin MSForms.TextBox txtTotalMaterialsCost 
      Height          =   300
      Left            =   8250
      TabIndex        =   9
      Top             =   9825
      Width           =   1215
      VariousPropertyBits=   746604569
      BackColor       =   -2147483624
      Size            =   "2143;529"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
   Begin MSForms.TextBox txtCoreCostTotal 
      BeginProperty DataFormat 
         Type            =   1
         Format          =   """$""#,##0.00;(""$""#,##0.00)"
         HaveTrueFalseNull=   0
         FirstDayOfWeek  =   0
         FirstWeekOfYear =   0
         LCID            =   4105
         SubFormatType   =   2
      EndProperty
      Height          =   300
      Left            =   8250
      TabIndex        =   8
      Top             =   9525
      Width           =   1215
      VariousPropertyBits=   746604569
      Size            =   "2143;529"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
   Begin VB.Label lblStockCodedPartsTotal 
      Caption         =   "Stock Coded Parts Total"
      Height          =   195
      Left            =   6090
      TabIndex        =   7
      Top             =   8970
      Width           =   1815
   End
   Begin VB.Label lblNonStockCodedPartsTotal 
      Caption         =   "Non-Stock Coded Parts Total"
      Height          =   195
      Left            =   6090
      TabIndex        =   6
      Top             =   9270
      Width           =   2100
   End
   Begin VB.Label lblTotalMaterialsCost 
      Caption         =   "Total Materials Cost"
      Height          =   255
      Left            =   6105
      TabIndex        =   5
      Top             =   9870
      Width           =   1455
   End
   Begin VB.Label lblRebuiltPartsTotal 
      Caption         =   "Rebuilt Parts Total"
      Height          =   195
      Left            =   6105
      TabIndex        =   4
      Top             =   8685
      Width           =   1380
   End
   Begin VB.Label lblCoreCostTotal 
      Caption         =   "Core Cost Total"
      Height          =   255
      Left            =   6105
      TabIndex        =   3
      Top             =   9540
      Width           =   1290
   End
End
Attribute VB_Name = "frmArchivedBUSMaterials"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
'---------------------------------------------------------------------------------------
' Module    : frmArchivedBUSMaterials
' Purpose   : Displays the material list of an archived Vehicle Estimate
'---------------------------------------------------------------------------------------
'
Option Explicit
Private m_l_Result As Long
Private m_l_RetVal As Long

Public m_str_EstimateNumberID As String

'---------------------------------------------------------------------------------------
' Procedure : Form_Load
' Purpose   :
'---------------------------------------------------------------------------------------
'
Private Sub Form_Load()
    On Error GoTo Error_Handler

    Call SetWaitCursor
    Call Populate
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

'---------------------------------------------------------------------------------------
' Procedure : Populate
' Purpose   : Populates the form with the archived data of a
'             specified rebuilt part estimate that has been archived.
'---------------------------------------------------------------------------------------
'
Private Sub Populate()
    Dim RS As ADODB.Recordset
    Dim cur_RBCoreCostTotal As Currency
    Dim cur_SCPCoreCostTotal As Currency
    Dim cur_NSPCoreCostTotal As Currency
    Dim cur_CoreCostTotal As Currency

    On Error GoTo Error_Handler
    txtRebuiltCode.Text = m_str_EstimateNumberID
    'Loads the employee labour table
    Set RS = modDBHelper.RetrieveArchRB("CES_ARCHIVE.GET_ARCH_VEH_RB_PARTS_USED", _
                                        m_str_EstimateNumberID)
    If RS.RecordCount > 0 Then
        Set grdRebuiltPartsList.DataSource = RS
        cur_RBCoreCostTotal = Format(ColumnTotals(RS, "corecost"), "currency")
        RS.MoveFirst
        txtRebuiltPartsTotal.Text = Format(ColumnTotals(RS, "total_cost"), "currency")
    Else
        Set grdRebuiltPartsList.DataSource = Nothing
        cur_RBCoreCostTotal = Format(0#, "currency")
        txtRebuiltPartsTotal.Text = Format(0#, "currency")
    End If
       
    Set RS = Nothing
    
    'Loads the labour cost center totals table
    Set RS = modDBHelper.RetrieveArchRB("CES_ARCHIVE.GET_ARCH_VEH_SC_PARTS_USED", _
                                              m_str_EstimateNumberID)
    If RS.RecordCount > 0 Then
        Set grdStockCodedPartsList.DataSource = RS
        cur_SCPCoreCostTotal = Format( _
                                    ColumnTotals(RS, "corecost"), "currency")
        
        RS.MoveFirst
        txtStockCodedPartsTotal.Text = Format( _
                                    ColumnTotals(RS, "total_cost"), "currency")
    Else
        Set grdStockCodedPartsList.DataSource = Nothing
        cur_SCPCoreCostTotal = Format(0#, "currency")
        txtStockCodedPartsTotal.Text = Format(0#, "currency")
    End If
    
    Set RS = Nothing
    Set RS = modDBHelper.RetrieveArchRB("CES_ARCHIVE.GET_ARCH_VEH_NSC_PARTS_USED", _
                                              m_str_EstimateNumberID)
    If RS.RecordCount > 0 Then
        Set grdNonStockCodedPartsList.DataSource = RS
        cur_NSPCoreCostTotal = Format(ColumnTotals(RS, "corecost"), "currency")
        RS.MoveFirst
        txtNonStockCodedPartsTotal.Text = Format(ColumnTotals(RS, "total_cost"), "currency")
    Else
        Set grdNonStockCodedPartsList.DataSource = Nothing
        cur_NSPCoreCostTotal = Format(0#, "currency")
        txtNonStockCodedPartsTotal.Text = Format(0#, "currency")
    End If
    
    Set RS = Nothing
    cur_CoreCostTotal = cur_RBCoreCostTotal + cur_SCPCoreCostTotal + cur_NSPCoreCostTotal
        
        'Calculate the materials total
    txtCoreCostTotal.Text = Format((cur_CoreCostTotal * -1), "currency")
    txtTotalMaterialsCost.Text = Format( _
                    CCur(txtRebuiltPartsTotal.Text) + _
                    CCur(txtNonStockCodedPartsTotal.Text) + _
                    CCur(txtStockCodedPartsTotal.Text) - cur_CoreCostTotal, "currency")
                    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Populate", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub
frmArchivedHistory.frm :
VERSION 5.00
Object = "{FAEEE763-117E-101B-8933-08002B2F4F5A}#1.1#0"; "dblist32.ocx"
Object = "{CDE57A40-8B86-11D0-B3C6-00A0C90AEA82}#1.0#0"; "msdatgrd.ocx"
Object = "{8E27C92E-1264-101C-8A2F-040224009C02}#7.0#0"; "mscal.ocx"
Begin VB.Form frmArchivedHistory 
   BorderStyle     =   1  'Fixed Single
   Caption         =   "Archive History"
   ClientHeight    =   7635
   ClientLeft      =   45
   ClientTop       =   330
   ClientWidth     =   14070
   Icon            =   "frmArchivedHistory.frx":0000
   LinkTopic       =   "Form1"
   MaxButton       =   0   'False
   MDIChild        =   -1  'True
   MinButton       =   0   'False
   ScaleHeight     =   7635
   ScaleWidth      =   14070
   Begin MSACAL.Calendar calDateTo 
      Height          =   2295
      Left            =   8520
      TabIndex        =   11
      Top             =   1680
      Visible         =   0   'False
      Width           =   4515
      _Version        =   524288
      _ExtentX        =   7964
      _ExtentY        =   4048
      _StockProps     =   1
      BackColor       =   -2147483624
      Year            =   2005
      Month           =   2
      Day             =   22
      DayLength       =   1
      MonthLength     =   1
      DayFontColor    =   0
      FirstDay        =   7
      GridCellEffect  =   1
      GridFontColor   =   10485760
      GridLinesColor  =   -2147483632
      ShowDateSelectors=   -1  'True
      ShowDays        =   -1  'True
      ShowHorizontalGrid=   -1  'True
      ShowTitle       =   -1  'True
      ShowVerticalGrid=   -1  'True
      TitleFontColor  =   10485760
      ValueIsNull     =   0   'False
      BeginProperty DayFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty GridFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   0
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty TitleFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   12
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
   End
   Begin MSACAL.Calendar calDateFrom 
      Height          =   2295
      Left            =   3960
      TabIndex        =   12
      Top             =   1680
      Visible         =   0   'False
      Width           =   4515
      _Version        =   524288
      _ExtentX        =   7964
      _ExtentY        =   4048
      _StockProps     =   1
      BackColor       =   -2147483624
      Year            =   2005
      Month           =   2
      Day             =   22
      DayLength       =   1
      MonthLength     =   1
      DayFontColor    =   0
      FirstDay        =   7
      GridCellEffect  =   1
      GridFontColor   =   10485760
      GridLinesColor  =   -2147483632
      ShowDateSelectors=   -1  'True
      ShowDays        =   -1  'True
      ShowHorizontalGrid=   -1  'True
      ShowTitle       =   -1  'True
      ShowVerticalGrid=   -1  'True
      TitleFontColor  =   10485760
      ValueIsNull     =   0   'False
      BeginProperty DayFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty GridFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   0
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty TitleFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   12
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
   End
   Begin VB.Frame fraFilterBy 
      Caption         =   "Filter By:"
      Height          =   1140
      Left            =   0
      TabIndex        =   0
      Top             =   0
      Width           =   13935
      Begin MSDBCtls.DBCombo cboEstimate 
         Height          =   315
         Left            =   1560
         TabIndex        =   13
         Top             =   600
         Width           =   2175
         _ExtentX        =   3836
         _ExtentY        =   556
         _Version        =   393216
         Text            =   ""
      End
      Begin VB.CommandButton cmdShow 
         Caption         =   "Show Results"
         Height          =   315
         Left            =   8520
         TabIndex        =   7
         Top             =   600
         Width           =   1335
      End
      Begin VB.CheckBox chkAndDate 
         Height          =   195
         Left            =   3960
         TabIndex        =   6
         Top             =   720
         Width           =   195
      End
      Begin VB.CommandButton cmdDateFrom 
         Caption         =   ">>"
         Height          =   315
         Left            =   4680
         TabIndex        =   5
         Top             =   600
         Width           =   315
      End
      Begin VB.TextBox txtDateFrom 
         Enabled         =   0   'False
         Height          =   315
         Left            =   5040
         TabIndex        =   4
         Top             =   600
         Width           =   1215
      End
      Begin VB.CommandButton cmdDateTo 
         Caption         =   ">>"
         Height          =   315
         Left            =   6720
         TabIndex        =   3
         Top             =   600
         Width           =   315
      End
      Begin VB.TextBox txtDateTo 
         Enabled         =   0   'False
         Height          =   315
         Left            =   7080
         TabIndex        =   2
         Top             =   600
         Width           =   1215
      End
      Begin VB.ComboBox cboEstimateType 
         Height          =   315
         ItemData        =   "frmArchivedHistory.frx":0442
         Left            =   1560
         List            =   "frmArchivedHistory.frx":0444
         Style           =   2  'Dropdown List
         TabIndex        =   1
         Top             =   240
         Width           =   2175
      End
      Begin VB.Label txtShowall 
         Caption         =   "Use *  To Search All"
         BeginProperty Font 
            Name            =   "Arial Narrow"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   195
         Left            =   1845
         TabIndex        =   16
         Top             =   885
         Width           =   1440
      End
      Begin VB.Label lblSearchText 
         Caption         =   "Part Number:"
         Height          =   225
         Left            =   120
         TabIndex        =   15
         Top             =   600
         Width           =   1455
      End
      Begin VB.Label lblTypeOfEstimate 
         Caption         =   "Type Of Estimate:"
         Height          =   255
         Left            =   120
         TabIndex        =   14
         Top             =   240
         Width           =   1335
      End
      Begin VB.Label lblDateFrom 
         Caption         =   "From:"
         Height          =   255
         Left            =   4200
         TabIndex        =   9
         Top             =   720
         Width           =   1275
      End
      Begin VB.Label lblDateTo 
         Caption         =   "To:"
         Height          =   195
         Left            =   6360
         TabIndex        =   8
         Top             =   720
         Width           =   375
      End
   End
   Begin MSDataGridLib.DataGrid grdArchiveHistory 
      Height          =   6420
      Left            =   0
      TabIndex        =   10
      Top             =   1140
      Width           =   13995
      _ExtentX        =   24686
      _ExtentY        =   11324
      _Version        =   393216
      BackColor       =   12648447
      ForeColor       =   16711680
      HeadLines       =   1
      RowHeight       =   15
      BeginProperty HeadFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Caption         =   "HISTORY LOG"
      ColumnCount     =   2
      BeginProperty Column00 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   4105
            SubFormatType   =   0
         EndProperty
      EndProperty
      BeginProperty Column01 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   4105
            SubFormatType   =   0
         EndProperty
      EndProperty
      SplitCount      =   1
      BeginProperty Split0 
         BeginProperty Column00 
         EndProperty
         BeginProperty Column01 
         EndProperty
      EndProperty
   End
End
Attribute VB_Name = "frmArchivedHistory"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
'---------------------------------------------------------------------------------------
' Module    : frmArchivedHistory
' Purpose   : Shows the history of all the archives of the current estimate.
'             Allows the user to perform searches and load the
'---------------------------------------------------------------------------------------
'
Option Explicit

'Used for displaying full name in combo boxes, used in translating "RB" to "Rebuilt Part"
'Holds the rebuilt stock code passed to the form
Public m_str_LinkCode As String

'Holds the type of estimate which is also passed to the form. Ex. RB, MB etc
Public m_str_EstimateType As String
Private m_str_Msg As String
'Used for displaying full name in combo boxes, used in translating "RB" to "Rebuilt Part"
Private Const m_str_const_RBEstimate As String = "Rebuilt Part Estimate"
Private Const m_str_const_MBEstimate As String = "Make Vs. Buy Estimate"
Private Const m_str_const_VehEstimate As String = "Vehicle Estimate"

'---------------------------------------------------------------------------------------
' Procedure : PopulateControls
' Purpose   : Populates the grid with default of all estimates related to the estimate ID
'             passed to the form.
'---------------------------------------------------------------------------------------
'
Private Sub PopulateControls()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    cboEstimateType.AddItem m_str_const_RBEstimate
    cboEstimateType.AddItem m_str_const_VehEstimate
    cboEstimateType.AddItem m_str_const_MBEstimate
    
    If m_str_EstimateType = "MB" Then
        cboEstimateType.Text = m_str_const_MBEstimate
        cboEstimate.Text = m_str_LinkCode
        lblSearchText.Caption = "Make Buy Number"
    ElseIf m_str_EstimateType = "BUS" Then
        cboEstimateType.Text = m_str_const_VehEstimate
'        cboEstimateType.Text = m_str_LinkCode
        lblSearchText.Caption = "Vehicle_ID"
    ElseIf m_str_EstimateType = "RB" Then
        cboEstimateType.Text = m_str_const_RBEstimate
        cboEstimate.Text = m_str_LinkCode
        lblSearchText.Caption = "Rebuilt Number:"
    
    End If
    
    Set grdArchiveHistory.DataSource = Nothing
    Set RS = New ADODB.Recordset
        
    If m_str_EstimateType = "RB" Then
        Set RS = modDBHelper.RetrieveArchRB("CES_ARCHIVE.GET_ARCH_RB_MASTERLIST_RBNUM", _
                            m_str_LinkCode)
        If RS.RecordCount > 0 Then
            Set grdArchiveHistory.DataSource = RS
            cboEstimate.Text = RS("REBUILT_STOCK_NUM")
            FormatGridsRB
        End If
    ElseIf m_str_EstimateType = "MB" Then
        Set RS = modDBHelper.RetrieveArchMB("CES_ARCHIVE.GET_ARCH_MB_MASTERLIST_MBNUM", _
                            m_str_LinkCode)
        If RS.RecordCount > 0 Then
            Set grdArchiveHistory.DataSource = RS
            cboEstimate.Text = RS("MB_NUMBER")
            FormatGridsMB
        End If
    ElseIf m_str_EstimateType = "BUS" Then
        Set RS = modDBHelper.RetrieveArchBUS("CES_ARCHIVE.GET_ARCH_VEH_BY_OLDID", _
                            m_str_LinkCode)
        If RS.RecordCount > 0 Then
            Set grdArchiveHistory.DataSource = RS
            cboEstimate.Text = RS("OLD_ID")
            FormatGridsBUS
        End If
    End If

    If grdArchiveHistory.Columns.Count > 2 Then
        grdArchiveHistory.Columns("DATE ARCHIVED").NumberFormat = "yyyy-mmm-dd hh:mm:ss AMPM"
        grdArchiveHistory.Columns("TOTAL COST").Alignment = dbgRight
        grdArchiveHistory.Columns("TOTAL COST").NumberFormat = "$#,##0.00;($#,##0.00)"
    End If

    Set RS = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateControls", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    Call SetDefaultCursor
End Sub

'Change the search criteria text depending on what type of estimate is selected
Private Sub cboEstimateType_Click()
    On Error GoTo Error_Handler
    
    If cboEstimateType = m_str_const_MBEstimate Then
        lblSearchText.Caption = "Make Buy Number:"
    ElseIf cboEstimateType.Text = m_str_const_VehEstimate Then
        lblSearchText.Caption = "Vehicle ID Number:"
    ElseIf cboEstimateType.Text = m_str_const_RBEstimate Then
        lblSearchText.Caption = "Rebuilt Number:"
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdShow_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

'---------------------------------------------------------------------------------------
' Procedure : cmdShow_Click
' Purpose   : Search using criteria presented on the form, show results in grid
'---------------------------------------------------------------------------------------
'
Private Sub cmdShow_Click()
    Dim RS As ADODB.Recordset
    Dim b_DateIsChecked As Boolean
    Dim str_EstimateType As String
    
    On Error GoTo Error_Handler
    
    calDateFrom.Visible = False
    calDateTo.Visible = False

    b_DateIsChecked = False
    If chkAndDate.Value = 1 Then
        If IsDate(txtDateFrom.Text) = False Then
            m_str_Msg = "Please provide Date From."
            MsgBox m_str_Msg
            Exit Sub
        End If
        If IsDate(txtDateTo.Text) = False Then
            m_str_Msg = "Please provide Date To."
            MsgBox m_str_Msg
            Exit Sub
        End If
        If CDate(txtDateFrom.Text) >= CDate(txtDateTo.Text) Then
            m_str_Msg = "Date From should be less than Date To."
            MsgBox m_str_Msg
            Exit Sub
        End If
        b_DateIsChecked = True
    End If
    
    Call SetWaitCursor
    
    If Trim(cboEstimateType.Text) = m_str_const_RBEstimate Then
        str_EstimateType = "RB"
    ElseIf Trim(cboEstimateType.Text) = m_str_const_MBEstimate Then
        str_EstimateType = "MB"
    ElseIf Trim(cboEstimateType.Text) = m_str_const_VehEstimate Then
        str_EstimateType = "BUS"
    Else
        'if no estimate type is selected exit search
        Exit Sub
    End If

    Set RS = New ADODB.Recordset
    
    If b_DateIsChecked = False Then
        Set RS = modDBHelper.SearchArchiveHistory( _
                        "CES_ARCHIVE.SEARCH_ARCHIVE_HISTORY", _
                        Trim(cboEstimate.Text), _
                        str_EstimateType, _
                        chkAndDate.Value, _
                        "", _
                        "")
    Else
        Set RS = modDBHelper.SearchArchiveHistory( _
                        "CES_ARCHIVE.SEARCH_ARCHIVE_HISTORY", _
                        Trim(cboEstimate.Text), _
                        str_EstimateType, _
                        chkAndDate.Value, _
                        txtDateFrom, _
                        txtDateTo)
    End If
    If RS.RecordCount > 0 Then
        Set grdArchiveHistory.DataSource = RS
    
    
        If str_EstimateType = "RB" Then
            FormatGridsRB
        ElseIf str_EstimateType = "MB" Then
            FormatGridsMB
        ElseIf str_EstimateType = "BUS" Then
            FormatGridsBUS
        End If
        
    Else
        Set grdArchiveHistory.DataSource = Nothing
            
    End If
    If grdArchiveHistory.Columns.Count > 2 Then
        grdArchiveHistory.Columns("DATE ARCHIVED").NumberFormat = "yyyy-mmm-dd hh:mm:ss AMPM"
        grdArchiveHistory.Columns("TOTAL COST").Alignment = dbgRight
        grdArchiveHistory.Columns("TOTAL COST").NumberFormat = "$#,##0.00;($#,##0.00)"
    End If
    
    Set RS = Nothing
   
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdShow_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

'---------------------------------------------------------------------------------------
' Procedure : Form_Load
' Purpose   : Commands to run when the form loads
'---------------------------------------------------------------------------------------
'
Private Sub Form_Load()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    Call PopulateControls
    cboEstimateType.Enabled = True
    cboEstimate.Enabled = True
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

'---------------------------------------------------------------------------------------
' Procedure : Form_QueryUnload
' Purpose   : Form unloads make sure default cursor is set.  Any data or recordsets should be closed
'---------------------------------------------------------------------------------------
'
Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler

    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

'---------------------------------------------------------------------------------------
' Procedure : FormatGridsRB
' Purpose   : Formats the grid hiding non essential columns, also formats
'---------------------------------------------------------------------------------------
'
Private Sub FormatGridsRB()
    On Error GoTo Error_Handler
     
    If grdArchiveHistory.Columns.Count > 2 Then
        With grdArchiveHistory
            .Columns("MMS_STOCK_CODE").Visible = False
            .Columns("ITEM_REF_NUMBER").Visible = False
            .Columns("DETAILED_DESC").Visible = False
            .Columns("KEYWORD").Visible = False
            .Columns("CORE_PART_NUM").Visible = False
            .Columns("REBUILT_STOCK_NUM").Caption = "REBUILT STOCK NUMBER"
            .Columns("DATE_ARCHIVED").Caption = "DATE ARCHIVED"
            .Columns("ARCHIVED_BY").Caption = "ARCHIVED BY"
            .Columns("TOTAL_COST_TAX").Caption = "TOTAL COST"
            .Columns("CORE_CHARGE").Visible = False
            .Columns("JOB_NUMBER").Visible = False
            .Columns("ESTIMATED_COST").Visible = False
            .Columns("SOP_NUMBER").Visible = False
            .Columns("ARCH_RB_MASTERLIST_ID").Visible = False
            .Columns("LABOUR_COST").Visible = False
            .Columns("LABOUR_OVERHEAD_AMOUNT").Visible = False
            .Columns("LABOUR_TOTAL").Visible = False
            .Columns("MATERIALS_TOTAL").Visible = False
            .Columns("TOTAL_REBUILT_PART_COST").Visible = False
            .Columns("TOTAL_REBUILT_PART_COST").Alignment = dbgRight
            .Columns("TAX_TOTAL").Visible = False
        End With
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "FormatGridsRB", g_l_ErrorLineNumber
End Sub

'---------------------------------------------------------------------------------------
' Procedure : FormatGridsMB
' Purpose   : Formats the grid hiding non essential columns, also formats
'---------------------------------------------------------------------------------------
'
Private Sub FormatGridsMB()
    On Error GoTo Error_Handler
     
    If grdArchiveHistory.Columns.Count > 2 Then
        With grdArchiveHistory
            .Columns("REMAN_COST").Visible = False
            .Columns("EXTERNAL_COST").Visible = False
            .Columns("BUY_NEW_COST").Visible = False
            .Columns("INTERNAL_COST").Visible = False
            .Columns("RECOMMENDATION").Visible = False
            .Columns("SAMPLE_PROVIDED").Visible = False
            .Columns("TOTAL_COST_TAX").Visible = False
            .Columns("TOTAL_TAX").Visible = False
            .Columns("BENCH_NUMBER").Visible = False
            .Columns("ANNUAL_USAGE").Visible = False
            .Columns("VENDOR_PART_NUM").Visible = False
            .Columns("NUM_BUS_COMP").Visible = False
            .Columns("MB_NUMBER").Caption = "MAKE BUY NUMBER"
            .Columns("DATE_ARCHIVED").Caption = "DATE ARCHIVED"
            .Columns("ARCHIVED_BY").Caption = "ARCHIVED BY"
            .Columns("TOTAL_COST_TAX").Caption = "TOTAL COST"
            .Columns("DESCRIPTION").Visible = False
            .Columns("KEYWORD").Visible = False
            .Columns("BUS_TYPE").Visible = False
            .Columns("BUY_CODE").Visible = False
            .Columns("REBUILD_CODE").Visible = False
            .Columns("CORE_CODE").Visible = False
            .Columns("CORE_COST").Visible = False
            .Columns("JOB_NUMBER").Visible = False
            .Columns("SOP_NUMBER").Visible = False
            .Columns("ARCH_MB_MASTERLIST_ID").Visible = False
            .Columns("LABOUR_COST").Visible = False
            .Columns("LABOUR_OVERHEAD_AMOUNT").Visible = False
            .Columns("LABOUR_TOTAL").Visible = False
            .Columns("MATERIALS_TOTAL").Visible = False
            .Columns("TOTAL_MB_ESTIMATE_COST").Visible = False
            .Columns("TOTAL_MB_ESTIMATE_COST").Alignment = dbgRight
            .Columns("TOTAL_TAX").Visible = False
        End With
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "FormatGridsMB", g_l_ErrorLineNumber
End Sub

Private Sub FormatGridsBUS()
    On Error GoTo Error_Handler
     
    If grdArchiveHistory.Columns.Count > 2 Then
        With grdArchiveHistory
            .Columns("MAKE").Visible = False
            .Columns("MODEL").Visible = False
            .Columns("YEAR").Visible = False
            .Columns("ENGINE").Visible = False
            .Columns("TRANSMISSION").Visible = False
            .Columns("DIFFERENTIAL").Visible = False
            .Columns("VEH_SERIES_CODE").Visible = False
            .Columns("NUM_OF_VEHICLES").Visible = False
            .Columns("DATE_ARCHIVED").Caption = "DATE ARCHIVED"
            .Columns("ARCHIVED_BY").Caption = "ARCHIVED BY"
            .Columns("TOTAL_COST_TAX").Caption = "TOTAL COST"
            .Columns("SOPNUMBER").Visible = False
            .Columns("PROJ_DESC").Caption = "PROJECT DESCRIPTION"
            .Columns("OEM_KITS_TOTAL").Visible = False
            .Columns("ARCH_VEHICLE_LIST_ID").Visible = False
            .Columns("LABOUR_COST").Visible = False
            .Columns("LABOUR_OVERHEAD_AMOUNT").Visible = False
            .Columns("LABOUR_TOTAL").Visible = False
            .Columns("OLD_ID").Visible = False
            .Columns("TOTAL_TAX").Visible = False
            .Columns("MATERIALS_TOTAL").Visible = False
            .Columns("TOTAL_BUS_ESTIMATE_COST").Visible = False
            .Columns("TOTAL_BUS_ESTIMATE_COST").Alignment = dbgRight
        End With
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "FormatGridsBUS", g_l_ErrorLineNumber
End Sub

'---------------------------------------------------------------------------------------
' Procedure : grdArchiveHistory_dblClick
' Purpose   : When the grid is double click load archived estimate that is selected by
'             the required data.
'---------------------------------------------------------------------------------------
'
Private Sub grdArchiveHistory_dblClick()
    On Error GoTo Error_Handler
     
    If cboEstimateType.Text = "Rebuilt Part Estimate" Then
         If grdArchiveHistory.Row >= 0 Then
             frmArchivedRBEstimateMain.m_str_EstimateNumberID = grdArchiveHistory.Columns("ARCH_RB_MASTERLIST_ID").Value
             frmArchivedRBEstimateMain.Show
         End If
    ElseIf cboEstimateType.Text = "Make Vs. Buy Estimate" Then
         If grdArchiveHistory.Row >= 0 Then
             frmArchivedMBEstimate.m_str_EstimateNumberID = grdArchiveHistory.Columns("ARCH_MB_MASTERLIST_ID").Value
             'frmArchivedMBEstimate.    m_str_LinkCode
             frmArchivedMBEstimate.Show
         End If
    ElseIf cboEstimateType.Text = "Vehicle Estimate" Then
         If grdArchiveHistory.Row >= 0 Then
             frmArchivedBUSEstimateMain.m_str_EstimateNumberID = grdArchiveHistory.Columns("ARCH_VEHICLE_LIST_ID").Value
             frmArchivedBUSEstimateMain.Show
         End If
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "FormatGrids", g_l_ErrorLineNumber
End Sub

Private Sub calDateFrom_Click()
    On Error GoTo Error_Handler
    
    txtDateFrom.Text = Format(calDateFrom.Value, "yyyy-mmm-dd")
    calDateFrom.Visible = False
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "calDateFrom_Click", g_l_ErrorLineNumber
End Sub

Private Sub calDateTo_Click()
    On Error GoTo Error_Handler
    
    txtDateTo.Text = Format(calDateTo.Value, "yyyy-mmm-dd")
    calDateTo.Visible = False
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "calDateTo_Click", g_l_ErrorLineNumber
End Sub

Private Sub chkAndDate_Click()
    On Error GoTo Error_Handler

    If chkAndDate.Value = 1 Then
        cmdDateFrom.Enabled = True
        cmdDateTo.Enabled = True
    Else
        cmdDateFrom.Enabled = False
        calDateFrom.Visible = False
        cmdDateTo.Enabled = False
        calDateTo.Visible = False
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "chkAndDate_Click", g_l_ErrorLineNumber
End Sub

Private Sub cmdDateFrom_Click()
    On Error GoTo Error_Handler
    calDateFrom.Today
    calDateTo.Visible = False
    calDateFrom.Visible = True
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdDateFrom_Click", g_l_ErrorLineNumber
End Sub

Private Sub cmdDateTo_Click()
    On Error GoTo Error_Handler
    calDateTo.Today
    calDateFrom.Visible = False
    calDateTo.Visible = True
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdDateTo_Click", g_l_ErrorLineNumber
End Sub
frmArchivedMBEstimateMain.frm :
VERSION 5.00
Object = "{0D452EE1-E08F-101A-852E-02608C4D0BB4}#2.0#0"; "FM20.DLL"
Object = "{CDE57A40-8B86-11D0-B3C6-00A0C90AEA82}#1.0#0"; "msdatgrd.ocx"
Object = "{F0D2F211-CCB0-11D0-A316-00AA00688B10}#1.0#0"; "msdatlst.ocx"
Object = "{831FDD16-0C5C-11D2-A9FC-0000F8754DA1}#2.0#0"; "Mscomctl.ocx"
Begin VB.Form frmArchivedMBEstimate 
   BorderStyle     =   1  'Fixed Single
   Caption         =   "Archived Make Vs. Buy Estimate"
   ClientHeight    =   10245
   ClientLeft      =   45
   ClientTop       =   330
   ClientWidth     =   9075
   Icon            =   "frmArchivedMBEstimateMain.frx":0000
   LinkTopic       =   "Form1"
   MaxButton       =   0   'False
   MDIChild        =   -1  'True
   MinButton       =   0   'False
   ScaleHeight     =   10245
   ScaleWidth      =   9075
   Begin VB.TextBox txtDateArchived 
      Height          =   285
      Left            =   1380
      TabIndex        =   1
      Top             =   2685
      Width           =   3150
   End
   Begin VB.TextBox txtArchivedBy 
      Height          =   285
      Left            =   5880
      TabIndex        =   0
      Top             =   2685
      Width           =   2880
   End
   Begin MSDataListLib.DataCombo cboBusSeries 
      Height          =   315
      Left            =   180
      TabIndex        =   2
      Top             =   1245
      Width           =   3030
      _ExtentX        =   5345
      _ExtentY        =   556
      _Version        =   393216
      Style           =   2
      Text            =   ""
   End
   Begin MSDataGridLib.DataGrid grdMaterialsCostCentreTotals 
      Height          =   3135
      Left            =   45
      TabIndex        =   3
      Top             =   6975
      Width           =   4860
      _ExtentX        =   8573
      _ExtentY        =   5530
      _Version        =   393216
      BackColor       =   12648447
      ForeColor       =   16711680
      HeadLines       =   1
      RowHeight       =   15
      BeginProperty HeadFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Caption         =   "MATERIALS COST CENTRE TOTALS"
      ColumnCount     =   2
      BeginProperty Column00 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      BeginProperty Column01 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      SplitCount      =   1
      BeginProperty Split0 
         BeginProperty Column00 
         EndProperty
         BeginProperty Column01 
         EndProperty
      EndProperty
   End
   Begin MSDataGridLib.DataGrid grdLabourCostCentreTotals 
      Height          =   1830
      Left            =   30
      TabIndex        =   4
      Top             =   4980
      Width           =   8925
      _ExtentX        =   15743
      _ExtentY        =   3228
      _Version        =   393216
      AllowUpdate     =   -1  'True
      BackColor       =   12648447
      ForeColor       =   16711680
      HeadLines       =   1
      RowHeight       =   15
      BeginProperty HeadFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Caption         =   "LABOUR COST CENTRE TOTALS"
      ColumnCount     =   2
      BeginProperty Column00 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      BeginProperty Column01 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      SplitCount      =   1
      BeginProperty Split0 
         BeginProperty Column00 
         EndProperty
         BeginProperty Column01 
         EndProperty
      EndProperty
   End
   Begin MSDataGridLib.DataGrid grdLabour 
      Height          =   1875
      Left            =   15
      TabIndex        =   5
      Top             =   3135
      Width           =   8955
      _ExtentX        =   15796
      _ExtentY        =   3307
      _Version        =   393216
      BackColor       =   12648447
      ForeColor       =   16711680
      HeadLines       =   1
      RowHeight       =   15
      BeginProperty HeadFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Caption         =   "LABOUR"
      ColumnCount     =   2
      BeginProperty Column00 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      BeginProperty Column01 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      SplitCount      =   1
      BeginProperty Split0 
         BeginProperty Column00 
         EndProperty
         BeginProperty Column01 
         EndProperty
      EndProperty
   End
   Begin MSComctlLib.Toolbar tbMenu 
      Align           =   1  'Align Top
      Height          =   360
      Left            =   0
      TabIndex        =   39
      Top             =   0
      Width           =   9075
      _ExtentX        =   16007
      _ExtentY        =   635
      ButtonWidth     =   1296
      ButtonHeight    =   582
      Appearance      =   1
      Style           =   1
      TextAlignment   =   1
      _Version        =   393216
      BeginProperty Buttons {66833FE8-8583-11D1-B16A-00C0F0283628} 
         NumButtons      =   2
         BeginProperty Button1 {66833FEA-8583-11D1-B16A-00C0F0283628} 
            Caption         =   "File"
            Style           =   5
            BeginProperty ButtonMenus {66833FEC-8583-11D1-B16A-00C0F0283628} 
               NumButtonMenus  =   2
               BeginProperty ButtonMenu1 {66833FEE-8583-11D1-B16A-00C0F0283628} 
                  Text            =   "Print"
               EndProperty
               BeginProperty ButtonMenu2 {66833FEE-8583-11D1-B16A-00C0F0283628} 
                  Text            =   "Close"
               EndProperty
            EndProperty
         EndProperty
         BeginProperty Button2 {66833FEA-8583-11D1-B16A-00C0F0283628} 
            Caption         =   "View"
            Style           =   5
            BeginProperty ButtonMenus {66833FEC-8583-11D1-B16A-00C0F0283628} 
               NumButtonMenus  =   2
               BeginProperty ButtonMenu1 {66833FEE-8583-11D1-B16A-00C0F0283628} 
                  Text            =   "Materials List"
               EndProperty
               BeginProperty ButtonMenu2 {66833FEE-8583-11D1-B16A-00C0F0283628} 
                  Text            =   "Make vs. Buy Information"
               EndProperty
            EndProperty
         EndProperty
      EndProperty
   End
   Begin MSForms.TextBox txtTotalRebuiltPartCostWithTax 
      Height          =   330
      Left            =   7500
      TabIndex        =   38
      Top             =   9495
      Width           =   1455
      VariousPropertyBits=   746604569
      BackColor       =   -2147483624
      Size            =   "2566;582"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
   Begin MSForms.TextBox txtTaxTotal 
      Height          =   330
      Left            =   7500
      TabIndex        =   37
      Top             =   9135
      Width           =   1455
      VariousPropertyBits=   746604569
      Size            =   "2566;582"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
   Begin VB.Label lblTotalWithTax 
      Caption         =   "Total Rebuilt Part Cost with Tax"
      Height          =   255
      Left            =   5100
      TabIndex        =   36
      Top             =   9585
      Width           =   2415
   End
   Begin VB.Label lblTaxTotal 
      Caption         =   "Tax Total"
      Height          =   255
      Left            =   5100
      TabIndex        =   35
      Top             =   9225
      Width           =   1815
   End
   Begin VB.Label lblArchivedDate 
      Caption         =   "Date Archived:"
      Height          =   255
      Left            =   195
      TabIndex        =   34
      Top             =   2715
      Width           =   1095
   End
   Begin MSForms.TextBox txtCoreCost 
      Height          =   330
      Left            =   7500
      TabIndex        =   33
      Top             =   8055
      Width           =   1455
      VariousPropertyBits=   746604569
      Size            =   "2566;582"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
   Begin VB.Label lblCoreCost 
      Caption         =   "Core Cost (Excluding Tax)"
      Height          =   255
      Left            =   5100
      TabIndex        =   32
      Top             =   8145
      Width           =   2175
   End
   Begin VB.Label lblBusSeries 
      Caption         =   "Bus Series:"
      Height          =   195
      Left            =   960
      TabIndex        =   31
      Top             =   1020
      Width           =   855
   End
   Begin MSForms.TextBox txtMMSBuyCode 
      Height          =   315
      Left            =   6840
      TabIndex        =   30
      Top             =   660
      Width           =   1875
      VariousPropertyBits=   746604569
      Size            =   "3307;556"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   204
      FontPitchAndFamily=   2
      ParagraphAlign  =   3
   End
   Begin MSForms.TextBox txtCoreCode 
      Height          =   315
      Left            =   6840
      TabIndex        =   29
      Top             =   1200
      Width           =   1890
      VariousPropertyBits=   746604569
      Size            =   "3334;556"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   204
      FontPitchAndFamily=   2
      ParagraphAlign  =   3
   End
   Begin VB.Label lblCoreCode 
      Caption         =   "Core Code:"
      Height          =   195
      Left            =   7440
      TabIndex        =   28
      Top             =   1005
      Width           =   915
   End
   Begin VB.Label lblMMSBuyCode 
      Caption         =   "MMS Buy Code:"
      Height          =   195
      Left            =   7260
      TabIndex        =   27
      Top             =   450
      Width           =   1215
   End
   Begin VB.Label lblDetailedDescription 
      Alignment       =   2  'Center
      Caption         =   "Description:"
      Height          =   195
      Left            =   3885
      TabIndex        =   26
      Top             =   1560
      Width           =   1395
   End
   Begin VB.Label lblKeyword 
      Caption         =   "Keyword:"
      Height          =   195
      Left            =   4260
      TabIndex        =   25
      Top             =   1020
      Width           =   735
   End
   Begin VB.Label lblRebuiltNumber 
      Caption         =   "Rebuilt Number:"
      Height          =   195
      Left            =   4095
      TabIndex        =   24
      Top             =   450
      Width           =   1215
   End
   Begin MSForms.TextBox txtJobNumber 
      Height          =   315
      Left            =   495
      TabIndex        =   23
      Top             =   690
      Width           =   2010
      VariousPropertyBits=   746604569
      Size            =   "3545;556"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   3
   End
   Begin VB.Label lblJobNumber 
      Caption         =   "Job Number:"
      Height          =   195
      Left            =   930
      TabIndex        =   22
      Top             =   480
      Width           =   975
   End
   Begin MSForms.TextBox txtSOPNumber 
      Height          =   330
      Left            =   7500
      TabIndex        =   21
      Top             =   9855
      Width           =   1455
      VariousPropertyBits=   746604569
      Size            =   "2566;582"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   3
   End
   Begin MSForms.Label lblSOPNumber 
      Height          =   225
      Left            =   5100
      TabIndex        =   20
      Top             =   9945
      Width           =   1230
      Caption         =   "S.O.P. Number"
      Size            =   "2170;397"
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
   End
   Begin VB.Label lblLabourOverheadAmount 
      Caption         =   "Labour Overhead Amount"
      Height          =   255
      Left            =   5100
      TabIndex        =   19
      Top             =   7425
      Width           =   1920
   End
   Begin MSForms.TextBox txtLabourOverheadAmount 
      Height          =   330
      Left            =   7500
      TabIndex        =   18
      Top             =   7335
      Width           =   1455
      VariousPropertyBits=   746604569
      Size            =   "2566;582"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
   Begin VB.Label lblLabourSubtotal 
      Caption         =   "Labour Cost"
      Height          =   255
      Left            =   5100
      TabIndex        =   17
      Top             =   7065
      Width           =   1245
   End
   Begin MSForms.TextBox txtLabourSubtotal 
      Height          =   330
      Left            =   7500
      TabIndex        =   16
      Top             =   6975
      Width           =   1455
      VariousPropertyBits=   746604569
      Size            =   "2566;582"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
   Begin VB.Label lblLabourTotal 
      Caption         =   "Labour Total"
      Height          =   255
      Left            =   5100
      TabIndex        =   15
      Top             =   7785
      Width           =   1020
   End
   Begin MSForms.TextBox txtLabourTotal 
      Height          =   330
      Left            =   7500
      TabIndex        =   14
      Top             =   7695
      Width           =   1455
      VariousPropertyBits=   746604569
      Size            =   "2566;582"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
   Begin VB.Label lblMaterialsTotal 
      Caption         =   "Materials Total (Excluding Tax)"
      Height          =   255
      Left            =   5100
      TabIndex        =   13
      Top             =   8505
      Width           =   2235
   End
   Begin MSForms.TextBox txtMaterialTotal 
      Height          =   330
      Left            =   7500
      TabIndex        =   12
      Top             =   8415
      Width           =   1455
      VariousPropertyBits=   746604569
      Size            =   "2566;582"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
   Begin VB.Label lblTotalRebuiltPartCost 
      Caption         =   "Total Rebuilt Part Cost"
      Height          =   255
      Left            =   5100
      TabIndex        =   11
      Top             =   8865
      Width           =   1665
   End
   Begin MSForms.TextBox txtTotalRebuiltPartCost 
      Height          =   330
      Left            =   7500
      TabIndex        =   10
      Top             =   8775
      Width           =   1455
      VariousPropertyBits=   746604569
      BackColor       =   -2147483624
      Size            =   "2566;582"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
   Begin MSForms.TextBox txtKeyword 
      Height          =   315
      Index           =   0
      Left            =   3375
      TabIndex        =   9
      Top             =   1215
      Width           =   2610
      VariousPropertyBits=   746604569
      Size            =   "4604;556"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   3
   End
   Begin MSForms.TextBox txtDescription 
      Height          =   795
      Left            =   180
      TabIndex        =   8
      Top             =   1800
      Width           =   8550
      VariousPropertyBits=   -1400879079
      Size            =   "15081;1402"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   3
   End
   Begin MSForms.TextBox txtRebuiltCode 
      Height          =   315
      Left            =   3540
      TabIndex        =   7
      Top             =   675
      Width           =   2175
      VariousPropertyBits=   746604569
      Size            =   "3836;556"
      SpecialEffect   =   6
      FontEffects     =   1073750017
      FontHeight      =   195
      FontCharSet     =   204
      FontPitchAndFamily=   2
      ParagraphAlign  =   3
      FontWeight      =   700
   End
   Begin VB.Label lblArchivedBy 
      Caption         =   "Archived By:"
      Height          =   255
      Left            =   4860
      TabIndex        =   6
      Top             =   2715
      Width           =   1095
   End
End
Attribute VB_Name = "frmArchivedMBEstimate"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
'---------------------------------------------------------------------------------------
' Module    : frmArchivedMBEstimateMain
' Purpose   : This form loads an archived Rebuilt Part Estimate.
'---------------------------------------------------------------------------------------
'
Option Explicit

Public m_str_EstimateNumberID As String

'---------------------------------------------------------------------------------------
' Procedure : cmdMaterialsList_Click
' Purpose   :
'---------------------------------------------------------------------------------------
'
Private Sub cmdMaterialsList_Click()
    On Error GoTo Error_Handler
    
    frmArchivedMBMaterials.m_str_EstimateNumberID = m_str_EstimateNumberID
    frmArchivedMBMaterials.Show
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
End Sub

'---------------------------------------------------------------------------------------
' Procedure : Form_Load
' Purpose   : Calls appropriate functions to populate the data on the form
'---------------------------------------------------------------------------------------
'
Private Sub Form_Load()
    On Error GoTo Error_Handler

    Call SetWaitCursor  'start hour glass
    Call Populate
    Call FormatColumns
    Call SetDefaultCursor 'End hour glass
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

'---------------------------------------------------------------------------------------
' Procedure : Populate
' Purpose   : Populates the form with the archived data of a
'             specified rebuilt part estimate that has been archived.
'---------------------------------------------------------------------------------------
'
Private Sub Populate()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    'Loads the employee labour table
    Set RS = modDBHelper.RetrieveArchMB("CES_ARCHIVE.GET_ARCH_MB_EMPLOYEE_LABOUR", _
                                              m_str_EstimateNumberID)
    If RS.RecordCount > 0 Then
        Set grdLabour.DataSource = RS
    Else
        Set grdLabour.DataSource = Nothing
    End If
    Set RS = Nothing
    
    'Loads the labour cost center totals table
    Set RS = modDBHelper.RetrieveArchMB("CES_ARCHIVE.GET_ARCH_MB_LABOUR_CC_TOTAL", _
                                        m_str_EstimateNumberID)
    If RS.RecordCount > 0 Then
        Set grdLabourCostCentreTotals.DataSource = RS
    Else
        Set grdLabourCostCentreTotals.DataSource = Nothing
    End If
    Set RS = Nothing
    Set RS = modDBHelper.RetrieveArchMB("CES_ARCHIVE.GET_ARCH_MB_MASTERLIST_BY_ID", _
                                        m_str_EstimateNumberID)
    
    'Load all text boxes stored in the database
    If RS.RecordCount > 0 Then
        txtRebuiltCode.Text = RS.Fields.Item("MB_NUMBER").Value
        txtKeyword(0).Text = RS.Fields.Item("KEYWORD")
        txtDescription.Text = RS.Fields.Item("DESCRIPTION")
        txtSOPNumber.Text = RS.Fields.Item("SOP_NUMBER")
        txtJobNumber.Text = RS.Fields.Item("JOB_NUMBER")
        txtMMSBuyCode.Text = RS.Fields.Item("BUY_CODE")
        txtCoreCode.Text = RS.Fields.Item("CORE_CODE")
        
        If Trim(RS.Fields.Item("CORE_CODE")) = "" Then
            txtCoreCost.Text = Format("0", "currency")
        Else
            txtCoreCost.Text = Format(RS.Fields.Item("CORE_COST"), "currency")
        End If
        
        txtDateArchived.Text = RS.Fields.Item("DATE_ARCHIVED")
        txtArchivedBy.Text = RS.Fields.Item("ARCHIVED_BY")
        txtLabourSubtotal.Text = Format(RS.Fields.Item("LABOUR_COST"), "currency")
        txtLabourOverheadAmount.Text = Format(RS.Fields.Item("LABOUR_OVERHEAD_AMOUNT"), "currency")
        txtLabourTotal.Text = Format(RS.Fields.Item("LABOUR_TOTAL"), "currency")
        txtMaterialTotal.Text = Format(RS.Fields.Item("MATERIALS_TOTAL"), "currency")
        txtTotalRebuiltPartCost.Text = Format(RS.Fields.Item("TOTAL_MB_ESTIMATE_COST"), "currency")
        txtTaxTotal.Text = Format(RS.Fields.Item("TOTAL_TAX"), "currency")
        txtTotalRebuiltPartCostWithTax.Text = Format(RS.Fields.Item("TOTAL_COST_TAX"), "currency")
    End If
    
    Set RS = Nothing
    Set RS = modDBHelper.RetrieveArchMB("CES_ARCHIVE.GET_ARCH_MB_MATERIALS_CC_TOTAL", _
                                        m_str_EstimateNumberID)
    If RS.RecordCount > 0 Then
        Set grdMaterialsCostCentreTotals.DataSource = RS
    Else
        Set grdMaterialsCostCentreTotals.DataSource = Nothing
    End If
    
    Set RS = Nothing
    
    Set RS = modDBHelper.RetrieveMBListOfBuses("CES_ARCHIVE.GET_ARCH_MB_LIST_BUSES", _
                                               m_str_EstimateNumberID)
    Set cboBusSeries.RowSource = RS
    cboBusSeries.ListField = "BUS_DESCRIPTION"
    Set RS = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Populate", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub FormatColumns()
    On Error GoTo Error_Handler
    
    If Not grdLabour.Row Then
        grdLabour.Columns("CC").Width = 500
        grdLabour.Columns("TASK").Width = 1600
        grdLabour.Columns("LABOUR TYPE").Width = 2120
        grdLabour.Columns("USAGE").Width = 620
        grdLabour.Columns("USAGE").Alignment = dbgRight
        grdLabour.Columns("TIME").Width = 600
        grdLabour.Columns("TIME").Alignment = dbgRight
        grdLabour.Columns("ACTUAL TIME").Width = 1250
        grdLabour.Columns("ACTUAL TIME").Alignment = dbgRight
    End If

    If grdLabourCostCentreTotals.Columns.Count > 2 Then
        With grdLabourCostCentreTotals
            .Columns("LABOUR DEFINITION").Width = 2680
            .Columns("WAGE GROUP").Alignment = dbgCenter
            .Columns("RATE PER HOUR").Alignment = dbgRight
            .Columns("RATE PER HOUR").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("TOTAL COST").Alignment = dbgRight
            .Columns("TOTAL COST").NumberFormat = "$#,##0.00;($#,##0.00)"
        End With
    End If
        
    If Not grdMaterialsCostCentreTotals.Row Then
        With grdMaterialsCostCentreTotals
            .Columns("COST CENTRE").Width = 600
            .Columns("TOTAL COST").Alignment = dbgRight
            .Columns("TOTAL COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("TOTAL COST").Width = 1525
        End With
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "FormatColumns", g_l_ErrorLineNumber
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    SetDefaultCursor
End Sub

Private Sub tbMenu_ButtonMenuClick(ByVal ButtonMenu As MSComctlLib.ButtonMenu)
    On Error GoTo Error_Handler

    Select Case ButtonMenu
        Case "Close"
            Unload Me
        Case "Print"
             ArchCostEstimateReport m_str_EstimateNumberID, "MB"
        Case "Materials List"
            frmArchivedMBMaterials.m_str_EstimateNumberID = m_str_EstimateNumberID
            frmArchivedMBMaterials.Show
        Case "Make vs. Buy Information"
            frmMakeBuy.m_str_ArchiveID = m_str_EstimateNumberID
            frmMakeBuy.Show vbModal
            'frmMakeBuy.m_str_MBNumber = m_str_LinkCode
           
    End Select
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "tbMenu_ButtonMenuClick", g_l_ErrorLineNumber
    SetDefaultCursor
End Sub

frmArchivedMBMaterials.frm :
VERSION 5.00
Object = "{0D452EE1-E08F-101A-852E-02608C4D0BB4}#2.0#0"; "FM20.DLL"
Object = "{CDE57A40-8B86-11D0-B3C6-00A0C90AEA82}#1.0#0"; "msdatgrd.ocx"
Begin VB.Form frmArchivedMBMaterials 
   BorderStyle     =   1  'Fixed Single
   Caption         =   "Archived Materials List"
   ClientHeight    =   10530
   ClientLeft      =   45
   ClientTop       =   330
   ClientWidth     =   9885
   Icon            =   "frmArchivedMBMaterials.frx":0000
   LinkTopic       =   "Form2"
   MaxButton       =   0   'False
   MDIChild        =   -1  'True
   MinButton       =   0   'False
   ScaleHeight     =   10530
   ScaleWidth      =   9885
   Begin MSDataGridLib.DataGrid grdRebuiltPartsList 
      Height          =   2610
      Left            =   0
      TabIndex        =   0
      Top             =   675
      Width           =   9780
      _ExtentX        =   17251
      _ExtentY        =   4604
      _Version        =   393216
      BackColor       =   12648447
      ForeColor       =   16711680
      HeadLines       =   1
      RowHeight       =   15
      BeginProperty HeadFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Caption         =   "REBUILT PARTS LIST"
      ColumnCount     =   2
      BeginProperty Column00 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      BeginProperty Column01 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      SplitCount      =   1
      BeginProperty Split0 
         BeginProperty Column00 
         EndProperty
         BeginProperty Column01 
         EndProperty
      EndProperty
   End
   Begin MSDataGridLib.DataGrid grdStockCodedPartsList 
      Height          =   2940
      Left            =   0
      TabIndex        =   1
      Top             =   3270
      Width           =   9780
      _ExtentX        =   17251
      _ExtentY        =   5186
      _Version        =   393216
      BackColor       =   12648447
      ForeColor       =   16711680
      HeadLines       =   1
      RowHeight       =   15
      BeginProperty HeadFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Caption         =   "STOCK CODED PARTS LIST"
      ColumnCount     =   2
      BeginProperty Column00 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      BeginProperty Column01 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      SplitCount      =   1
      BeginProperty Split0 
         BeginProperty Column00 
            ColumnWidth     =   2160
         EndProperty
         BeginProperty Column01 
            ColumnWidth     =   2160
         EndProperty
      EndProperty
   End
   Begin MSDataGridLib.DataGrid grdNonStockCodedPartsList 
      Height          =   2625
      Left            =   0
      TabIndex        =   2
      Top             =   6195
      Width           =   9780
      _ExtentX        =   17251
      _ExtentY        =   4630
      _Version        =   393216
      BackColor       =   12648447
      ForeColor       =   16711680
      HeadLines       =   1
      RowHeight       =   15
      BeginProperty HeadFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Caption         =   "NON-STOCK CODED PARTS LIST"
      ColumnCount     =   2
      BeginProperty Column00 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      BeginProperty Column01 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      SplitCount      =   1
      BeginProperty Split0 
         BeginProperty Column00 
            ColumnWidth     =   2160
         EndProperty
         BeginProperty Column01 
            ColumnWidth     =   2160
         EndProperty
      EndProperty
   End
   Begin VB.Label lblArchive 
      Caption         =   "Archive #"
      Height          =   225
      Left            =   3465
      TabIndex        =   14
      Top             =   255
      Width           =   750
   End
   Begin VB.Label lblCoreCostTotal 
      Caption         =   "Core Cost Total"
      Height          =   255
      Left            =   6195
      TabIndex        =   13
      Top             =   9840
      Width           =   1290
   End
   Begin VB.Label lblRebuiltPartsTotal 
      Caption         =   "Rebuilt Parts Total"
      Height          =   195
      Left            =   6195
      TabIndex        =   12
      Top             =   8970
      Width           =   1380
   End
   Begin VB.Label lblTotalMaterialsCost 
      Caption         =   "Total Materials Cost"
      Height          =   255
      Left            =   6195
      TabIndex        =   11
      Top             =   10155
      Width           =   1455
   End
   Begin VB.Label lblNonStockCodedPartsTotal 
      Caption         =   "Non-Stock Coded Parts Total"
      Height          =   195
      Left            =   6195
      TabIndex        =   10
      Top             =   9540
      Width           =   2100
   End
   Begin VB.Label lblStockCodedPartsTotal 
      Caption         =   "Stock Coded Parts Total"
      Height          =   195
      Left            =   6195
      TabIndex        =   9
      Top             =   9240
      Width           =   1815
   End
   Begin MSForms.TextBox txtCoreCostTotal 
      BeginProperty DataFormat 
         Type            =   1
         Format          =   """$""#,##0.00;(""$""#,##0.00)"
         HaveTrueFalseNull=   0
         FirstDayOfWeek  =   0
         FirstWeekOfYear =   0
         LCID            =   4105
         SubFormatType   =   2
      EndProperty
      Height          =   300
      Left            =   8355
      TabIndex        =   8
      Top             =   9825
      Width           =   1215
      VariousPropertyBits=   746604569
      Size            =   "2143;529"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
   Begin MSForms.TextBox txtTotalMaterialsCost 
      Height          =   300
      Left            =   8355
      TabIndex        =   7
      Top             =   10125
      Width           =   1215
      VariousPropertyBits=   746604569
      BackColor       =   -2147483624
      Size            =   "2143;529"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
   Begin MSForms.TextBox txtNonStockCodedPartsTotal 
      Height          =   300
      Left            =   8355
      TabIndex        =   6
      Top             =   9525
      Width           =   1215
      VariousPropertyBits=   746604569
      Size            =   "2143;529"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
   Begin MSForms.TextBox txtStockCodedPartsTotal 
      Height          =   300
      Left            =   8355
      TabIndex        =   5
      Top             =   9225
      Width           =   1215
      VariousPropertyBits=   746604569
      Size            =   "2143;529"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
   Begin MSForms.TextBox txtRebuiltPartsTotal 
      Height          =   300
      Left            =   8355
      TabIndex        =   4
      Top             =   8925
      Width           =   1215
      VariousPropertyBits=   746604569
      Size            =   "2143;529"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
   Begin MSForms.TextBox txtRebuiltCode 
      Height          =   330
      Left            =   4290
      TabIndex        =   3
      Top             =   180
      Width           =   1170
      VariousPropertyBits=   746604569
      Size            =   "2064;582"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   3
   End
End
Attribute VB_Name = "frmArchivedMBMaterials"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
'---------------------------------------------------------------------------------------
' Module    : frmArchivedMBMaterials
' Purpose   : Displays the material list of an archived rebuilt part.
'---------------------------------------------------------------------------------------
'

Option Explicit
Private m_l_Result As Long
Private m_l_RetVal As Long


Public m_str_EstimateNumberID As String

'---------------------------------------------------------------------------------------
' Procedure : Form_Load
' Purpose   :
'---------------------------------------------------------------------------------------
'

Private Sub Form_Load()
    On Error GoTo Error_Handler

    Call SetWaitCursor  'start hour glass
    Call Populate
    Call SetDefaultCursor 'End hour glass
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

'---------------------------------------------------------------------------------------
' Procedure : Populate
' Purpose   : Populates the form with the archived data of a
'             specified rebuilt part estimate that has been archived.
'---------------------------------------------------------------------------------------
'
Private Sub Populate()
    Dim RS As ADODB.Recordset
    Dim cur_RBCoreCostTotal As Currency
    Dim cur_SCPCoreCostTotal As Currency
    Dim cur_NSPCoreCostTotal As Currency
    Dim cur_CoreCostTotal As Currency
    
    On Error GoTo Error_Handler
    
    txtRebuiltCode.Text = m_str_EstimateNumberID
    'Loads the employee labour table
    Set RS = modDBHelper.RetrieveArchMB("CES_ARCHIVE.GET_ARCH_MB_RB_PARTS_USED", _
                                        m_str_EstimateNumberID)
    If RS.RecordCount > 0 Then
        Set grdRebuiltPartsList.DataSource = RS
        cur_RBCoreCostTotal = Format(ColumnTotals(RS, "corecost"), "currency")
        RS.MoveFirst
        txtRebuiltPartsTotal.Text = Format(ColumnTotals(RS, "total_cost"), "currency")
    Else
        Set grdRebuiltPartsList.DataSource = Nothing
        cur_RBCoreCostTotal = Format(0#, "currency")
        txtRebuiltPartsTotal.Text = Format(0#, "currency")
    End If
       
    Set RS = Nothing
    
    'Loads the labour cost center totals table
    Set RS = modDBHelper.RetrieveArchMB("CES_ARCHIVE.GET_ARCH_MB_SC_PARTS_USED", _
                                              m_str_EstimateNumberID)
    If RS.RecordCount > 0 Then
        Set grdStockCodedPartsList.DataSource = RS
        cur_SCPCoreCostTotal = Format( _
                                    ColumnTotals(RS, "corecost"), "currency")
        RS.MoveFirst
        txtStockCodedPartsTotal.Text = Format( _
                                    ColumnTotals(RS, "total_cost"), "currency")
    Else
        Set grdStockCodedPartsList.DataSource = Nothing
        cur_SCPCoreCostTotal = Format(0#, "currency")
        txtStockCodedPartsTotal.Text = Format(0#, "currency")
    End If
    
    Set RS = Nothing
    Set RS = modDBHelper.RetrieveArchMB("CES_ARCHIVE.GET_ARCH_MB_NSC_PARTS_USED", _
                                              m_str_EstimateNumberID)
    If RS.RecordCount > 0 Then
        Set grdNonStockCodedPartsList.DataSource = RS
        cur_NSPCoreCostTotal = Format(ColumnTotals(RS, "Core Cost"), "currency")
        RS.MoveFirst
        txtNonStockCodedPartsTotal.Text = Format(ColumnTotals(RS, "Total Cost"), "currency")
    Else
        Set grdNonStockCodedPartsList.DataSource = Nothing
        cur_NSPCoreCostTotal = Format(0#, "currency")
        txtNonStockCodedPartsTotal.Text = Format(0#, "currency")
    End If
    
    Set RS = Nothing
    cur_CoreCostTotal = cur_RBCoreCostTotal + cur_SCPCoreCostTotal + cur_NSPCoreCostTotal
        
        'Calculate the materials total
    txtCoreCostTotal.Text = Format((cur_CoreCostTotal * -1), "currency")
    txtTotalMaterialsCost.Text = Format( _
                        CCur(txtRebuiltPartsTotal.Text) + _
                        CCur(txtNonStockCodedPartsTotal.Text) + _
                        CCur(txtStockCodedPartsTotal.Text) - cur_CoreCostTotal, "currency")
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Populate", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub
frmArchivedRBEstimateMain.frm :
VERSION 5.00
Object = "{0D452EE1-E08F-101A-852E-02608C4D0BB4}#2.0#0"; "FM20.DLL"
Object = "{CDE57A40-8B86-11D0-B3C6-00A0C90AEA82}#1.0#0"; "msdatgrd.ocx"
Object = "{F0D2F211-CCB0-11D0-A316-00AA00688B10}#1.0#0"; "msdatlst.ocx"
Object = "{831FDD16-0C5C-11D2-A9FC-0000F8754DA1}#2.0#0"; "Mscomctl.ocx"
Begin VB.Form frmArchivedRBEstimateMain 
   BorderStyle     =   1  'Fixed Single
   Caption         =   "Archived Rebuilt Part Estimate"
   ClientHeight    =   8880
   ClientLeft      =   45
   ClientTop       =   330
   ClientWidth     =   9045
   Icon            =   "frmArchivedRBEstimateMain.frx":0000
   LinkTopic       =   "Form1"
   MaxButton       =   0   'False
   MDIChild        =   -1  'True
   MinButton       =   0   'False
   ScaleHeight     =   8880
   ScaleWidth      =   9045
   Begin MSComctlLib.Toolbar tbMenu 
      Align           =   1  'Align Top
      Height          =   360
      Left            =   0
      TabIndex        =   39
      Top             =   0
      Width           =   9045
      _ExtentX        =   15954
      _ExtentY        =   635
      ButtonWidth     =   1296
      ButtonHeight    =   582
      Appearance      =   1
      Style           =   1
      TextAlignment   =   1
      _Version        =   393216
      BeginProperty Buttons {66833FE8-8583-11D1-B16A-00C0F0283628} 
         NumButtons      =   2
         BeginProperty Button1 {66833FEA-8583-11D1-B16A-00C0F0283628} 
            Caption         =   "File"
            Style           =   5
            BeginProperty ButtonMenus {66833FEC-8583-11D1-B16A-00C0F0283628} 
               NumButtonMenus  =   2
               BeginProperty ButtonMenu1 {66833FEE-8583-11D1-B16A-00C0F0283628} 
                  Text            =   "Print"
               EndProperty
               BeginProperty ButtonMenu2 {66833FEE-8583-11D1-B16A-00C0F0283628} 
                  Text            =   "Close"
               EndProperty
            EndProperty
         EndProperty
         BeginProperty Button2 {66833FEA-8583-11D1-B16A-00C0F0283628} 
            Caption         =   "View"
            Style           =   5
            BeginProperty ButtonMenus {66833FEC-8583-11D1-B16A-00C0F0283628} 
               NumButtonMenus  =   2
               BeginProperty ButtonMenu1 {66833FEE-8583-11D1-B16A-00C0F0283628} 
                  Text            =   "Materials List"
               EndProperty
               BeginProperty ButtonMenu2 {66833FEE-8583-11D1-B16A-00C0F0283628} 
               EndProperty
            EndProperty
         EndProperty
      EndProperty
   End
   Begin VB.TextBox txtArchivedBy 
      Height          =   285
      Left            =   5895
      TabIndex        =   38
      Top             =   2565
      Width           =   3015
   End
   Begin VB.TextBox txtDateArchived 
      Height          =   285
      Left            =   1320
      TabIndex        =   36
      Top             =   2565
      Width           =   3240
   End
   Begin MSDataListLib.DataCombo cboBusSeries 
      Height          =   315
      Left            =   135
      TabIndex        =   0
      Top             =   1155
      Width           =   2745
      _ExtentX        =   4842
      _ExtentY        =   556
      _Version        =   393216
      Style           =   2
      Text            =   ""
   End
   Begin MSDataGridLib.DataGrid grdMaterialsCostCentreTotals 
      Height          =   2115
      Left            =   0
      TabIndex        =   1
      Top             =   6720
      Width           =   4860
      _ExtentX        =   8573
      _ExtentY        =   3731
      _Version        =   393216
      BackColor       =   12648447
      ForeColor       =   16711680
      HeadLines       =   1
      RowHeight       =   15
      BeginProperty HeadFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Caption         =   "MATERIALS COST CENTRE TOTALS"
      ColumnCount     =   2
      BeginProperty Column00 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      BeginProperty Column01 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      SplitCount      =   1
      BeginProperty Split0 
         BeginProperty Column00 
         EndProperty
         BeginProperty Column01 
         EndProperty
      EndProperty
   End
   Begin MSDataGridLib.DataGrid grdLabourCostCentreTotals 
      Height          =   1830
      Left            =   0
      TabIndex        =   2
      Top             =   4845
      Width           =   4845
      _ExtentX        =   8546
      _ExtentY        =   3228
      _Version        =   393216
      AllowUpdate     =   -1  'True
      BackColor       =   12648447
      ForeColor       =   16711680
      HeadLines       =   1
      RowHeight       =   15
      BeginProperty HeadFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Caption         =   "LABOUR COST CENTRE TOTALS"
      ColumnCount     =   2
      BeginProperty Column00 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      BeginProperty Column01 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      SplitCount      =   1
      BeginProperty Split0 
         BeginProperty Column00 
         EndProperty
         BeginProperty Column01 
         EndProperty
      EndProperty
   End
   Begin MSDataGridLib.DataGrid grdLabour 
      Height          =   1875
      Left            =   -15
      TabIndex        =   3
      Top             =   2925
      Width           =   8955
      _ExtentX        =   15796
      _ExtentY        =   3307
      _Version        =   393216
      BackColor       =   12648447
      ForeColor       =   16711680
      HeadLines       =   1
      RowHeight       =   15
      BeginProperty HeadFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Caption         =   "LABOUR"
      ColumnCount     =   2
      BeginProperty Column00 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      BeginProperty Column01 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      SplitCount      =   1
      BeginProperty Split0 
         BeginProperty Column00 
         EndProperty
         BeginProperty Column01 
         EndProperty
      EndProperty
   End
   Begin VB.Label lblArchivedBy 
      Caption         =   "Archived By:"
      Height          =   255
      Left            =   4875
      TabIndex        =   37
      Top             =   2595
      Width           =   1095
   End
   Begin MSForms.TextBox txtRebuiltCode 
      Height          =   315
      Left            =   3210
      TabIndex        =   35
      Top             =   585
      Width           =   2625
      VariousPropertyBits=   746604569
      Size            =   "4630;556"
      SpecialEffect   =   6
      FontEffects     =   1073750017
      FontHeight      =   195
      FontCharSet     =   204
      FontPitchAndFamily=   2
      ParagraphAlign  =   3
      FontWeight      =   700
   End
   Begin MSForms.TextBox txtDescription 
      Height          =   795
      Left            =   525
      TabIndex        =   34
      Top             =   1710
      Width           =   7815
      VariousPropertyBits=   -1400879079
      Size            =   "13785;1402"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   3
   End
   Begin MSForms.TextBox txtKeyword 
      Height          =   315
      Index           =   0
      Left            =   3225
      TabIndex        =   33
      Top             =   1125
      Width           =   2610
      VariousPropertyBits=   746604569
      Size            =   "4604;556"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   3
   End
   Begin MSForms.TextBox txtTotalRebuiltPartCost 
      Height          =   330
      Left            =   7485
      TabIndex        =   32
      Top             =   6915
      Width           =   1455
      VariousPropertyBits=   746604569
      BackColor       =   -2147483624
      Size            =   "2566;582"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
   Begin VB.Label lblTotalRebuiltPartCost 
      Caption         =   "Total Rebuilt Part Cost"
      Height          =   255
      Left            =   5085
      TabIndex        =   31
      Top             =   7005
      Width           =   1665
   End
   Begin MSForms.TextBox txtMaterialTotal 
      Height          =   330
      Left            =   7485
      TabIndex        =   30
      Top             =   6555
      Width           =   1455
      VariousPropertyBits=   746604569
      Size            =   "2566;582"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
   Begin VB.Label lblMaterialsTotal 
      Caption         =   "Materials Total (Excluding Tax)"
      Height          =   255
      Left            =   5085
      TabIndex        =   29
      Top             =   6645
      Width           =   2235
   End
   Begin MSForms.TextBox txtLabourTotal 
      Height          =   330
      Left            =   7485
      TabIndex        =   28
      Top             =   5835
      Width           =   1455
      VariousPropertyBits=   746604569
      Size            =   "2566;582"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
   Begin VB.Label lblLabourTotal 
      Caption         =   "Labour Total"
      Height          =   255
      Left            =   5085
      TabIndex        =   27
      Top             =   5925
      Width           =   1020
   End
   Begin MSForms.TextBox txtLabourSubtotal 
      Height          =   330
      Left            =   7485
      TabIndex        =   26
      Top             =   5115
      Width           =   1455
      VariousPropertyBits=   746604569
      Size            =   "2566;582"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
   Begin VB.Label lblLabourSubtotal 
      Caption         =   "Labour Cost"
      Height          =   255
      Left            =   5085
      TabIndex        =   25
      Top             =   5205
      Width           =   1245
   End
   Begin MSForms.TextBox txtLabourOverheadAmount 
      Height          =   330
      Left            =   7485
      TabIndex        =   24
      Top             =   5475
      Width           =   1455
      VariousPropertyBits=   746604569
      Size            =   "2566;582"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
   Begin VB.Label lblLabourOverheadAmount 
      Caption         =   "Labour Overhead Amount"
      Height          =   255
      Left            =   5085
      TabIndex        =   23
      Top             =   5565
      Width           =   1920
   End
   Begin MSForms.Label lblSOPNumber 
      Height          =   225
      Left            =   5085
      TabIndex        =   22
      Top             =   8085
      Width           =   1230
      Caption         =   "S.O.P. Number"
      Size            =   "2170;397"
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
   End
   Begin MSForms.TextBox txtSOPNumber 
      Height          =   330
      Left            =   7485
      TabIndex        =   21
      Top             =   7995
      Width           =   1455
      VariousPropertyBits=   746604569
      Size            =   "2566;582"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   3
   End
   Begin VB.Label lblJobNumber 
      Caption         =   "Job Number:"
      Height          =   195
      Left            =   825
      TabIndex        =   20
      Top             =   405
      Width           =   975
   End
   Begin MSForms.TextBox txtJobNumber 
      Height          =   315
      Left            =   120
      TabIndex        =   19
      Top             =   585
      Width           =   2715
      VariousPropertyBits=   746604569
      Size            =   "4789;556"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   3
   End
   Begin VB.Label lblRebuiltNumber 
      Caption         =   "Rebuilt Number:"
      Height          =   195
      Left            =   3825
      TabIndex        =   18
      Top             =   405
      Width           =   1215
   End
   Begin VB.Label lblKeyword 
      Caption         =   "Keyword:"
      Height          =   195
      Left            =   4125
      TabIndex        =   17
      Top             =   945
      Width           =   735
   End
   Begin VB.Label lblDetailedDescription 
      Alignment       =   2  'Center
      Caption         =   "Description:"
      Height          =   195
      Left            =   3705
      TabIndex        =   16
      Top             =   1485
      Width           =   1395
   End
   Begin VB.Label lblMMSBuyCode 
      Caption         =   "MMS Buy Code:"
      Height          =   195
      Left            =   6945
      TabIndex        =   15
      Top             =   405
      Width           =   1215
   End
   Begin VB.Label lblCoreCode 
      Caption         =   "Core Code:"
      Height          =   195
      Left            =   7185
      TabIndex        =   14
      Top             =   945
      Width           =   915
   End
   Begin MSForms.TextBox txtCoreCode 
      Height          =   315
      Left            =   6435
      TabIndex        =   13
      Top             =   1125
      Width           =   2370
      VariousPropertyBits=   746604569
      Size            =   "4180;556"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   204
      FontPitchAndFamily=   2
      ParagraphAlign  =   3
   End
   Begin MSForms.TextBox txtMMSBuyCode 
      Height          =   315
      Left            =   6405
      TabIndex        =   12
      Top             =   585
      Width           =   2415
      VariousPropertyBits=   746604569
      Size            =   "4260;556"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   204
      FontPitchAndFamily=   2
      ParagraphAlign  =   3
   End
   Begin VB.Label lblBusSeries 
      Caption         =   "Bus Series:"
      Height          =   195
      Left            =   825
      TabIndex        =   11
      Top             =   945
      Width           =   855
   End
   Begin VB.Label lblCoreCost 
      Caption         =   "Core Cost (Excluding Tax)"
      Height          =   255
      Left            =   5085
      TabIndex        =   10
      Top             =   6285
      Width           =   2175
   End
   Begin MSForms.TextBox txtCoreCost 
      Height          =   330
      Left            =   7485
      TabIndex        =   9
      Top             =   6195
      Width           =   1455
      VariousPropertyBits=   746604569
      Size            =   "2566;582"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
   Begin VB.Label lblArchivedDate 
      Caption         =   "Date Archived:"
      Height          =   195
      Left            =   225
      TabIndex        =   8
      Top             =   2610
      Width           =   1095
   End
   Begin VB.Label lblTaxTotal 
      Caption         =   "Tax Total"
      Height          =   255
      Left            =   5085
      TabIndex        =   7
      Top             =   7365
      Width           =   1815
   End
   Begin VB.Label lblTotalWithTax 
      Caption         =   "Total Rebuilt Part Cost with Tax"
      Height          =   255
      Left            =   5085
      TabIndex        =   6
      Top             =   7725
      Width           =   2415
   End
   Begin MSForms.TextBox txtTaxTotal 
      Height          =   330
      Left            =   7485
      TabIndex        =   5
      Top             =   7275
      Width           =   1455
      VariousPropertyBits=   746604569
      Size            =   "2566;582"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
   Begin MSForms.TextBox txtTotalRebuiltPartCostWithTax 
      Height          =   330
      Left            =   7485
      TabIndex        =   4
      Top             =   7635
      Width           =   1455
      VariousPropertyBits=   746604569
      BackColor       =   -2147483624
      Size            =   "2566;582"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
End
Attribute VB_Name = "frmArchivedRBEstimateMain"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
'---------------------------------------------------------------------------------------
' Module    : frmArchivedRBEstimateMain
' Purpose   : This form loads an archived Rebuilt Part Estimate.
'---------------------------------------------------------------------------------------
'
Option Explicit

Private m_l_Result As Long
Private m_l_RetVal As Long

Public m_str_EstimateNumberID As String


'---------------------------------------------------------------------------------------
' Procedure : Form_Load
' Purpose   : Calls appropriate functions to populate the data on the form
'---------------------------------------------------------------------------------------
'
Private Sub Form_Load()
    On Error GoTo Error_Handler

    Call SetWaitCursor  'start hour glass
    Call Populate
    Call FormatColumns
    Call SetDefaultCursor 'End hour glass

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

'---------------------------------------------------------------------------------------
' Procedure : Populate
' Purpose   : Populates the form with the archived data of a
'             specified rebuilt part estimate that has been archived.
'---------------------------------------------------------------------------------------
'
Private Sub Populate()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    'Loads the employee labour table
    Set RS = modDBHelper.RetrieveArchRB("CES_ARCHIVE.GET_ARCH_RB_EMPLOYEE_LABOUR", _
                                        m_str_EstimateNumberID)
    If RS.RecordCount > 0 Then
        Set grdLabour.DataSource = RS
    Else
        Set grdLabour.DataSource = Nothing
    End If
    Set RS = Nothing
    
    'Loads the labour cost center totals table
    Set RS = modDBHelper.RetrieveArchRB("CES_ARCHIVE.GET_ARCH_RB_LABOUR_CC_TOTAL", _
                                        m_str_EstimateNumberID)
    If RS.RecordCount > 0 Then
        Set grdLabourCostCentreTotals.DataSource = RS
    Else
        Set grdLabourCostCentreTotals.DataSource = Nothing
    End If
    Set RS = Nothing
    Set RS = modDBHelper.RetrieveArchRB("CES_ARCHIVE.GET_ARCH_RB_MASTERLIST_BY_ID", _
                                        m_str_EstimateNumberID)
    
    'Load all text boxes stored in the database
    If RS.RecordCount > 0 Then
        txtRebuiltCode.Text = RS.Fields.Item("REBUILT_STOCK_NUM").Value
        txtKeyword(0).Text = RS.Fields.Item("KEYWORD")
        txtDescription.Text = RS.Fields.Item("DETAILED_DESC")
        txtSOPNumber.Text = RS.Fields.Item("SOP_NUMBER")
        txtJobNumber.Text = RS.Fields.Item("JOB_NUMBER")
        txtMMSBuyCode.Text = RS.Fields.Item("MMS_STOCK_CODE")
        txtCoreCode.Text = RS.Fields.Item("CORE_PART_NUM")
        
        If Trim(RS.Fields.Item("CORE_CHARGE")) = "" Then
            txtCoreCost.Text = Format("0", "currency")
        Else
            txtCoreCost.Text = Format(RS.Fields.Item("CORE_CHARGE"), "currency")
        End If
        
        txtDateArchived.Text = RS.Fields.Item("DATE_ARCHIVED")
        txtArchivedBy.Text = RS.Fields.Item("ARCHIVED_BY")
        txtLabourSubtotal.Text = Format(RS.Fields.Item("LABOUR_COST"), "currency")
        txtLabourOverheadAmount.Text = Format(RS.Fields.Item("LABOUR_OVERHEAD_AMOUNT"), "currency")
        txtLabourTotal.Text = Format(RS.Fields.Item("LABOUR_TOTAL"), "currency")
        txtMaterialTotal.Text = Format(RS.Fields.Item("MATERIALS_TOTAL"), "currency")
        txtTotalRebuiltPartCost.Text = Format(RS.Fields.Item("TOTAL_REBUILT_PART_COST"), "currency")
        txtTaxTotal.Text = Format(RS.Fields.Item("TAX_TOTAL"), "currency")
        txtTotalRebuiltPartCostWithTax.Text = Format(RS.Fields.Item("TOTAL_COST_TAX"), "currency")
    End If
    
    Set RS = Nothing
    Set RS = modDBHelper.RetrieveArchRB("CES_ARCHIVE.GET_ARCH_RB_MATERIALS_CC_TOTAL", _
                                        m_str_EstimateNumberID)
    If RS.RecordCount > 0 Then
        Set grdMaterialsCostCentreTotals.DataSource = RS
    Else
        Set grdMaterialsCostCentreTotals.DataSource = Nothing
    End If
    
    Set RS = Nothing
    
    Set RS = modDBHelper.RetrieveRBListOfBuses("CES_ARCHIVE.GET_ARCH_RB_LIST_BUSES", _
                                               m_str_EstimateNumberID)
    Set cboBusSeries.RowSource = RS
    cboBusSeries.ListField = "BUS_DESCRIPTION"
    Set RS = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Populate", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub FormatColumns()
    On Error GoTo Error_Handler
    
    If Not grdLabour.Row Then
        grdLabour.Columns("CC").Width = 500
        grdLabour.Columns("TASK").Width = 1600
        grdLabour.Columns("LABOUR TYPE").Width = 2120
        grdLabour.Columns("USAGE").Width = 620
        grdLabour.Columns("USAGE").Alignment = dbgRight
        grdLabour.Columns("TIME").Width = 600
        grdLabour.Columns("TIME").Alignment = dbgRight
        grdLabour.Columns("ACTUAL TIME").Width = 1250
        grdLabour.Columns("ACTUAL TIME").Alignment = dbgRight
    End If

    If grdLabourCostCentreTotals.Columns.Count > 2 Then
        With grdLabourCostCentreTotals
            .Columns("COST CENTRE").Width = 600
            .Columns("TOTAL COST").Alignment = dbgRight
            .Columns("TOTAL COST").NumberFormat = "$#,##0.00;($#,##0.00)"

        End With
    End If
        
    If Not grdMaterialsCostCentreTotals.Row Then
        With grdMaterialsCostCentreTotals
            .Columns("COST CENTRE").Width = 600
            .Columns("TOTAL COST").Alignment = dbgRight
            .Columns("TOTAL COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("TOTAL COST").Width = 1525
        End With
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "FormatColumns", g_l_ErrorLineNumber
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub tbMenu_ButtonMenuClick(ByVal ButtonMenu As MSComctlLib.ButtonMenu)
   On Error GoTo Error_Handler

    Select Case ButtonMenu
        Case "Close"
            Unload Me
        Case "Print"
            ArchCostEstimateReport m_str_EstimateNumberID, "RB"

        Case "Materials List"

            frmArchivedRBMaterials.m_str_EstimateNumberID = m_str_EstimateNumberID
            frmArchivedRBMaterials.Show

    End Select
    Exit Sub

Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "tbMenu_ButtonMenuClick", g_l_ErrorLineNumber
    SetDefaultCursor
End Sub

frmArchivedRBMaterials.frm :
VERSION 5.00
Object = "{0D452EE1-E08F-101A-852E-02608C4D0BB4}#2.0#0"; "FM20.DLL"
Object = "{CDE57A40-8B86-11D0-B3C6-00A0C90AEA82}#1.0#0"; "msdatgrd.ocx"
Begin VB.Form frmArchivedRBMaterials 
   BorderStyle     =   1  'Fixed Single
   Caption         =   "Archived Rebuilt Part Materials"
   ClientHeight    =   10635
   ClientLeft      =   45
   ClientTop       =   330
   ClientWidth     =   9855
   Icon            =   "frmArchivedRBMaterials.frx":0000
   LinkTopic       =   "Form1"
   MaxButton       =   0   'False
   MDIChild        =   -1  'True
   MinButton       =   0   'False
   ScaleHeight     =   10635
   ScaleWidth      =   9855
   Begin MSDataGridLib.DataGrid grdRebuiltPartsList 
      Height          =   2610
      Left            =   0
      TabIndex        =   0
      Top             =   840
      Width           =   9780
      _ExtentX        =   17251
      _ExtentY        =   4604
      _Version        =   393216
      BackColor       =   12648447
      ForeColor       =   16711680
      HeadLines       =   1
      RowHeight       =   15
      BeginProperty HeadFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Caption         =   "REBUILT PARTS LIST"
      ColumnCount     =   2
      BeginProperty Column00 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      BeginProperty Column01 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      SplitCount      =   1
      BeginProperty Split0 
         BeginProperty Column00 
         EndProperty
         BeginProperty Column01 
         EndProperty
      EndProperty
   End
   Begin MSDataGridLib.DataGrid grdStockCodedPartsList 
      Height          =   2610
      Left            =   0
      TabIndex        =   1
      Top             =   3600
      Width           =   9780
      _ExtentX        =   17251
      _ExtentY        =   4604
      _Version        =   393216
      BackColor       =   12648447
      ForeColor       =   16711680
      HeadLines       =   1
      RowHeight       =   15
      BeginProperty HeadFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Caption         =   "STOCK CODED PARTS LIST"
      ColumnCount     =   2
      BeginProperty Column00 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      BeginProperty Column01 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      SplitCount      =   1
      BeginProperty Split0 
         BeginProperty Column00 
            ColumnWidth     =   2160
         EndProperty
         BeginProperty Column01 
            ColumnWidth     =   2160
         EndProperty
      EndProperty
   End
   Begin MSDataGridLib.DataGrid grdNonStockCodedPartsList 
      Height          =   2610
      Left            =   0
      TabIndex        =   2
      Top             =   6360
      Width           =   9780
      _ExtentX        =   17251
      _ExtentY        =   4604
      _Version        =   393216
      BackColor       =   12648447
      ForeColor       =   16711680
      HeadLines       =   1
      RowHeight       =   15
      BeginProperty HeadFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Caption         =   "NON-STOCK CODED PARTS LIST"
      ColumnCount     =   2
      BeginProperty Column00 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      BeginProperty Column01 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      SplitCount      =   1
      BeginProperty Split0 
         BeginProperty Column00 
            ColumnWidth     =   2160
         EndProperty
         BeginProperty Column01 
            ColumnWidth     =   2160
         EndProperty
      EndProperty
   End
   Begin VB.Label lblMaterialsListing 
      Caption         =   "Archived Rebuilt Part Materials List"
      BeginProperty Font 
         Name            =   "Arial"
         Size            =   13.5
         Charset         =   204
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   390
      Left            =   2760
      TabIndex        =   14
      Top             =   0
      Width           =   4905
   End
   Begin MSForms.TextBox txtRebuiltCode 
      Height          =   330
      Left            =   4275
      TabIndex        =   13
      Top             =   405
      Width           =   1170
      VariousPropertyBits=   746604569
      Size            =   "2064;582"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   3
   End
   Begin MSForms.TextBox txtRebuiltPartsTotal 
      Height          =   300
      Left            =   5160
      TabIndex        =   12
      Top             =   9060
      Width           =   1215
      VariousPropertyBits=   746604569
      Size            =   "2143;529"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
   Begin MSForms.TextBox txtStockCodedPartsTotal 
      Height          =   300
      Left            =   5160
      TabIndex        =   11
      Top             =   9360
      Width           =   1215
      VariousPropertyBits=   746604569
      Size            =   "2143;529"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
   Begin MSForms.TextBox txtNonStockCodedPartsTotal 
      Height          =   300
      Left            =   5160
      TabIndex        =   10
      Top             =   9660
      Width           =   1215
      VariousPropertyBits=   746604569
      Size            =   "2143;529"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
   Begin MSForms.TextBox txtTotalMaterialsCost 
      Height          =   300
      Left            =   5160
      TabIndex        =   9
      Top             =   10260
      Width           =   1215
      VariousPropertyBits=   746604569
      BackColor       =   -2147483624
      Size            =   "2143;529"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
   Begin VB.Label lblStockCodedPartsTotal 
      Caption         =   "Stock Coded Parts Total"
      Height          =   195
      Left            =   3000
      TabIndex        =   8
      Top             =   9375
      Width           =   1815
   End
   Begin VB.Label lblNonStockCodedPartsTotal 
      Caption         =   "Non-Stock Coded Parts Total"
      Height          =   195
      Left            =   3000
      TabIndex        =   7
      Top             =   9675
      Width           =   2100
   End
   Begin VB.Label lblTotalMaterialsCost 
      Caption         =   "Total Materials Cost"
      Height          =   195
      Left            =   3000
      TabIndex        =   6
      Top             =   10275
      Width           =   1455
   End
   Begin VB.Label lblRebuiltPartsTotal 
      Caption         =   "Rebuilt Parts Total"
      Height          =   195
      Left            =   3000
      TabIndex        =   5
      Top             =   9090
      Width           =   1380
   End
   Begin MSForms.TextBox txtCoreCostTotal 
      BeginProperty DataFormat 
         Type            =   1
         Format          =   """$""#,##0.00;(""$""#,##0.00)"
         HaveTrueFalseNull=   0
         FirstDayOfWeek  =   0
         FirstWeekOfYear =   0
         LCID            =   4105
         SubFormatType   =   2
      EndProperty
      Height          =   300
      Left            =   5160
      TabIndex        =   4
      Top             =   9960
      Width           =   1215
      VariousPropertyBits=   746604569
      Size            =   "2143;529"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
   Begin VB.Label lblCoreCostTotal 
      Caption         =   "Core Cost Total"
      Height          =   255
      Left            =   3000
      TabIndex        =   3
      Top             =   10005
      Width           =   1410
   End
End
Attribute VB_Name = "frmArchivedRBMaterials"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
'---------------------------------------------------------------------------------------
' Module    : frmArchivedRBMaterials
' Purpose   : Displays the material list of an archived rebuilt part.
'---------------------------------------------------------------------------------------
'
Option Explicit
Private m_l_Result As Long
Private m_l_RetVal As Long

Public m_str_EstimateNumberID As String

'---------------------------------------------------------------------------------------
' Procedure : Form_Load
' Purpose   :
'---------------------------------------------------------------------------------------
'
Private Sub Form_Load()
    On Error GoTo Error_Handler

    Call SetWaitCursor
    Call Populate
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

'---------------------------------------------------------------------------------------
' Procedure : Populate
' Purpose   : Populates the form with the archived data of a
'             specified rebuilt part estimate that has been archived.
'---------------------------------------------------------------------------------------
'
Private Sub Populate()
    Dim RS As ADODB.Recordset
    Dim cur_RBCoreCostTotal As Currency
    Dim cur_SCPCoreCostTotal As Currency
    Dim cur_NSPCoreCostTotal As Currency
    Dim cur_CoreCostTotal As Currency
    
    On Error GoTo Error_Handler
    
    txtRebuiltCode.Text = m_str_EstimateNumberID
    'Loads the employee labour table
    Set RS = modDBHelper.RetrieveArchRB("CES_ARCHIVE.GET_ARCH_RB_RB_PARTS_USED", _
                                        m_str_EstimateNumberID)
    If RS.RecordCount > 0 Then
        Set grdRebuiltPartsList.DataSource = RS
        cur_RBCoreCostTotal = Format(ColumnTotals(RS, "corecost"), "currency")
        RS.MoveFirst
        txtRebuiltPartsTotal.Text = Format(ColumnTotals(RS, "total_cost"), "currency")
    Else
        Set grdRebuiltPartsList.DataSource = Nothing
        cur_RBCoreCostTotal = Format(0#, "currency")
        txtRebuiltPartsTotal.Text = Format(0#, "currency")
    End If
       
    Set RS = Nothing
    
    'Loads the labour cost center totals table
    Set RS = modDBHelper.RetrieveArchRB("CES_ARCHIVE.GET_ARCH_RB_SC_PARTS_USED", _
                                        m_str_EstimateNumberID)
    If RS.RecordCount > 0 Then
        Set grdStockCodedPartsList.DataSource = RS
        cur_SCPCoreCostTotal = Format( _
                                    ColumnTotals(RS, "corecost"), "currency")
        
        RS.MoveFirst
        txtStockCodedPartsTotal.Text = Format( _
                                    ColumnTotals(RS, "total_cost"), "currency")
    Else
        Set grdStockCodedPartsList.DataSource = Nothing
        cur_SCPCoreCostTotal = Format(0#, "currency")
        txtStockCodedPartsTotal.Text = Format(0#, "currency")
    End If
    
    Set RS = Nothing
    Set RS = modDBHelper.RetrieveArchRB("CES_ARCHIVE.GET_ARCH_RB_NSC_PARTS_USED", _
                                        m_str_EstimateNumberID)
    If RS.RecordCount > 0 Then
        Set grdNonStockCodedPartsList.DataSource = RS
        cur_NSPCoreCostTotal = Format(ColumnTotals(RS, "corecost"), "currency")
        RS.MoveFirst
        txtNonStockCodedPartsTotal.Text = Format(ColumnTotals(RS, "total_cost"), "currency")
    Else
        Set grdNonStockCodedPartsList.DataSource = Nothing
        cur_NSPCoreCostTotal = Format(0#, "currency")
        txtNonStockCodedPartsTotal.Text = Format(0#, "currency")
    End If
    
    Set RS = Nothing
    cur_CoreCostTotal = cur_RBCoreCostTotal + cur_SCPCoreCostTotal + cur_NSPCoreCostTotal
        
        'Calculate the materials total
    txtCoreCostTotal.Text = Format((cur_CoreCostTotal * -1), "currency")
    txtTotalMaterialsCost.Text = Format( _
                        CCur(txtRebuiltPartsTotal.Text) + _
                        CCur(txtNonStockCodedPartsTotal.Text) + _
                        CCur(txtStockCodedPartsTotal.Text) - cur_CoreCostTotal, "currency")
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Populate", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler

    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub
frmBusAddMaterials.frm :
VERSION 5.00
Object = "{0D452EE1-E08F-101A-852E-02608C4D0BB4}#2.0#0"; "FM20.DLL"
Object = "{CDE57A40-8B86-11D0-B3C6-00A0C90AEA82}#1.0#0"; "msdatgrd.ocx"
Begin VB.Form frmBusAddMaterials 
   BorderStyle     =   1  'Fixed Single
   Caption         =   "Vehicle Materials List"
   ClientHeight    =   10920
   ClientLeft      =   45
   ClientTop       =   330
   ClientWidth     =   9840
   Icon            =   "frmBusAddMaterials.frx":0000
   LinkTopic       =   "Form10"
   MDIChild        =   -1  'True
   ScaleHeight     =   10920
   ScaleWidth      =   9840
   ShowInTaskbar   =   0   'False
   Begin VB.CommandButton cmdRefresh 
      Caption         =   "Refresh"
      Height          =   360
      Left            =   4710
      TabIndex        =   23
      Top             =   720
      Width           =   1035
   End
   Begin VB.Frame frameFindPart 
      Caption         =   "Find Part"
      Height          =   1455
      Left            =   0
      TabIndex        =   16
      Top             =   9360
      Width           =   5295
      Begin VB.OptionButton optRBPart 
         Caption         =   "Rebuilt Part"
         Height          =   255
         Left            =   120
         TabIndex        =   21
         Top             =   240
         Value           =   -1  'True
         Width           =   1335
      End
      Begin VB.OptionButton optSCPart 
         Caption         =   "Stock Coded Part"
         Height          =   255
         Left            =   120
         TabIndex        =   20
         Top             =   600
         Width           =   1695
      End
      Begin VB.OptionButton optNSCPart 
         Caption         =   "Non-Stock Coded Part"
         Height          =   255
         Left            =   120
         TabIndex        =   19
         Top             =   960
         Width           =   2055
      End
      Begin VB.TextBox txtKeyToSearch 
         Height          =   330
         Left            =   2160
         TabIndex        =   18
         Top             =   480
         Width           =   3015
      End
      Begin VB.CommandButton cmdFindNext 
         Caption         =   "Find Next"
         Height          =   375
         Left            =   4080
         TabIndex        =   17
         Top             =   960
         Width           =   1095
      End
      Begin VB.Label lblKeyToSearch 
         Caption         =   "Rebuilt Number:"
         Height          =   255
         Left            =   2160
         TabIndex        =   22
         Top             =   240
         Width           =   1575
      End
   End
   Begin VB.CommandButton cmdAddPart 
      Caption         =   "Add Part"
      Height          =   360
      Left            =   3615
      TabIndex        =   1
      Top             =   720
      Width           =   1095
   End
   Begin MSDataGridLib.DataGrid grdStockCodedPartsList 
      Height          =   2730
      Left            =   0
      TabIndex        =   2
      Top             =   3855
      Width           =   9780
      _ExtentX        =   17251
      _ExtentY        =   4815
      _Version        =   393216
      AllowUpdate     =   0   'False
      BackColor       =   12648447
      ForeColor       =   16711680
      HeadLines       =   1
      RowHeight       =   15
      BeginProperty HeadFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Caption         =   "STOCK CODED PARTS LIST"
      ColumnCount     =   2
      BeginProperty Column00 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      BeginProperty Column01 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      SplitCount      =   1
      BeginProperty Split0 
         BeginProperty Column00 
            ColumnWidth     =   2160
         EndProperty
         BeginProperty Column01 
            ColumnWidth     =   2160
         EndProperty
      EndProperty
   End
   Begin MSDataGridLib.DataGrid grdNonStockCodedPartsList 
      Height          =   2730
      Left            =   0
      TabIndex        =   3
      Top             =   6585
      Width           =   9780
      _ExtentX        =   17251
      _ExtentY        =   4815
      _Version        =   393216
      AllowUpdate     =   0   'False
      BackColor       =   12648447
      ForeColor       =   16711680
      HeadLines       =   1
      RowHeight       =   15
      BeginProperty HeadFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Caption         =   "NON-STOCK CODED PARTS LIST"
      ColumnCount     =   2
      BeginProperty Column00 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      BeginProperty Column01 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      SplitCount      =   1
      BeginProperty Split0 
         BeginProperty Column00 
            ColumnWidth     =   2160
         EndProperty
         BeginProperty Column01 
            ColumnWidth     =   2160
         EndProperty
      EndProperty
   End
   Begin MSDataGridLib.DataGrid grdRebuiltPartsList 
      Height          =   2730
      Left            =   0
      TabIndex        =   15
      Top             =   1125
      Width           =   9780
      _ExtentX        =   17251
      _ExtentY        =   4815
      _Version        =   393216
      AllowUpdate     =   0   'False
      BackColor       =   12648447
      ForeColor       =   16711680
      HeadLines       =   1
      RowHeight       =   15
      BeginProperty HeadFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Caption         =   "REBUILT PARTS LIST"
      ColumnCount     =   2
      BeginProperty Column00 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      BeginProperty Column01 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      SplitCount      =   1
      BeginProperty Split0 
         BeginProperty Column00 
            ColumnWidth     =   2160
         EndProperty
         BeginProperty Column01 
            ColumnWidth     =   2160
         EndProperty
      EndProperty
   End
   Begin MSForms.TextBox txtRebuiltPartsTotal 
      Height          =   300
      Left            =   8490
      TabIndex        =   14
      Top             =   9360
      Width           =   1215
      VariousPropertyBits=   746604569
      Size            =   "2143;529"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
   Begin MSForms.TextBox txtStockCodedPartsTotal 
      Height          =   300
      Left            =   8490
      TabIndex        =   13
      Top             =   9660
      Width           =   1215
      VariousPropertyBits=   746604569
      Size            =   "2143;529"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
   Begin MSForms.TextBox txtNonStockCodedPartsTotal 
      Height          =   300
      Left            =   8490
      TabIndex        =   12
      Top             =   9960
      Width           =   1215
      VariousPropertyBits=   746604569
      Size            =   "2143;529"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
   Begin MSForms.TextBox txtTotalMaterialsCost 
      Height          =   300
      Left            =   8490
      TabIndex        =   11
      Top             =   10560
      Width           =   1215
      VariousPropertyBits=   746604569
      BackColor       =   -2147483624
      Size            =   "2143;529"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
   Begin VB.Label lblStockCodedPartsTotal 
      Caption         =   "Stock Coded Parts Total"
      Height          =   195
      Left            =   6330
      TabIndex        =   10
      Top             =   9675
      Width           =   1815
   End
   Begin VB.Label lblNonStockCodedPartsTotal 
      Caption         =   "Non-Stock Coded Parts Total"
      Height          =   195
      Left            =   6330
      TabIndex        =   9
      Top             =   9975
      Width           =   2100
   End
   Begin VB.Label lblTotalMaterialsCost 
      Caption         =   "Total Material Cost"
      Height          =   195
      Left            =   6330
      TabIndex        =   8
      Top             =   10575
      Width           =   1455
   End
   Begin VB.Label lblRebuiltPartsTotal 
      Caption         =   "Rebuilt Parts Total"
      Height          =   195
      Left            =   6330
      TabIndex        =   7
      Top             =   9390
      Width           =   1830
   End
   Begin MSForms.TextBox txtCoreCostTotal 
      BeginProperty DataFormat 
         Type            =   1
         Format          =   """$""#,##0.00;(""$""#,##0.00)"
         HaveTrueFalseNull=   0
         FirstDayOfWeek  =   0
         FirstWeekOfYear =   0
         LCID            =   4105
         SubFormatType   =   2
      EndProperty
      Height          =   300
      Left            =   8490
      TabIndex        =   6
      Top             =   10260
      Width           =   1215
      VariousPropertyBits=   746604569
      Size            =   "2143;529"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
   Begin VB.Label lblCoreCostTotal 
      Caption         =   "Core Cost Total"
      Height          =   255
      Left            =   6330
      TabIndex        =   5
      Top             =   10275
      Width           =   1410
   End
   Begin VB.Label lblVechicleMaterialsListing 
      Caption         =   "Vehicle Materials List"
      BeginProperty Font 
         Name            =   "Arial"
         Size            =   13.5
         Charset         =   204
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   375
      Left            =   3495
      TabIndex        =   4
      Top             =   0
      Width           =   2985
   End
   Begin MSForms.TextBox txtPart 
      Height          =   330
      Left            =   2820
      TabIndex        =   0
      Top             =   360
      Width           =   4200
      VariousPropertyBits=   746604569
      Size            =   "7408;582"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   3
   End
End
Attribute VB_Name = "frmBusAddMaterials"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Option Explicit

Private m_str_Msg As String
Public m_str_LinkNumber As String
Public m_l_VehicleListID As Long

' Holds the previous search string
Private m_str_PreviousSearch As String
Private m_str_PreviousSearchType As String
Private m_var_RowSelected As Variant

Private Sub UserPermissions()
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Then
        'Edit-box txtPart is disabled.
        txtPart.Enabled = False
        'Button <Add Part> is invisible.
        cmdAddPart.Visible = False
        'Controls at the bottom of the form are invisible.
        lblRebuiltPartsTotal.Visible = False
        lblStockCodedPartsTotal.Visible = False
        lblNonStockCodedPartsTotal.Visible = False
        lblCoreCostTotal.Visible = False
        lblTotalMaterialsCost.Visible = False
        txtRebuiltPartsTotal.Visible = False
        txtStockCodedPartsTotal.Visible = False
        txtNonStockCodedPartsTotal.Visible = False
        txtCoreCostTotal.Visible = False
        txtTotalMaterialsCost.Visible = False
        If grdRebuiltPartsList.Columns.Count > 2 Then
            'Grid "Rebuilt Parts List". Columns "UNIT_COST", "TOTAL_COST"
            'are invisible.
            grdRebuiltPartsList.Columns("UNIT COST").Visible = False
            grdRebuiltPartsList.Columns("TOTAL COST").Visible = False
        End If
        If grdStockCodedPartsList.Columns.Count > 2 Then
            'Grid "Stock Coded Parts List". Columns "UNIT_COST", "CORE_COST", "TOTAL_COST"
            'are invisible.
            grdStockCodedPartsList.Columns("UNIT COST").Visible = False
            grdStockCodedPartsList.Columns("CORE COST").Visible = False
            grdStockCodedPartsList.Columns("TOTAL COST").Visible = False
        End If
        If grdNonStockCodedPartsList.Columns.Count > 2 Then
            'Grid "Non-Stock Coded Parts List". Columns "COST", "CORE_COST", "TOTAL_COST"
            'are invisible.
            grdNonStockCodedPartsList.Columns("UNIT COST").Visible = False
            grdNonStockCodedPartsList.Columns("CORE COST").Visible = False
            grdNonStockCodedPartsList.Columns("TOTAL COST").Visible = False
        End If
    ElseIf g_l_AccessLevel = 2 Then
        'Button <Add Part> is invisible.
        cmdAddPart.Visible = False
        'Rest controls, except grids are disabled.
        txtPart.Enabled = False
        txtRebuiltPartsTotal.Enabled = False
        txtStockCodedPartsTotal.Enabled = False
        txtNonStockCodedPartsTotal.Enabled = False
        txtCoreCostTotal.Enabled = False
        txtTotalMaterialsCost.Enabled = False
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "UserPermissions", g_l_ErrorLineNumber
End Sub

Private Sub Populate()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    'Populate and format the data grids
    Call PopulateGrids
    Call FormatGrids
    Call UserPermissions
    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Populate", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub cmdAddPart_Click()
    On Error GoTo Error_Handler
    
    If frmTypeOfPart.WindowState = 1 Or frmTypeOfPart.WindowState = 2 Then
        frmTypeOfPart.WindowState = 0
    End If
    Dim formshow As New frmTypeOfPart
    formshow.m_str_LinkNumber = m_str_LinkNumber
    formshow.m_str_AuditReference = CStr(m_l_VehicleListID)
    formshow.m_str_FormType = "Bus"
    formshow.Show vbModal
    'Call frmVehCostEstimateMain.RefreshForm
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdAddPart_Click", g_l_ErrorLineNumber
End Sub

Public Sub PassValues(ByVal str_LinkNumber As String)
    On Error GoTo Error_Handler
    
    m_str_LinkNumber = str_LinkNumber
    
    Call SetWaitCursor
    Call Populate
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PassValues", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub cmdRefresh_Click()
    On Error GoTo Error_Handler
        Call frmVehCostEstimateMain.RefreshForm
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdRefresh_click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler

    Call SetDefaultCursor
    'Keep the form open until the Vehicle Part Form Closes
    If UnloadMode = 0 Then
        Cancel = True
        Me.Hide
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub PopulateGrids()
    Dim RS As ADODB.Recordset
    Dim SCPCoreCostTotal As Currency
    Dim NSPCoreCostTotal As Currency
    Dim CoreCostTotal As Currency
        
    On Error GoTo Error_Handler
        
    Set RS = New ADODB.Recordset
    
    'Populate the non-stock coded items
    Set RS = modDBHelper.RetrieveNSCPUsed("CES_INQUIRY.RETRIEVE_NSCP_USED", _
                                          m_str_LinkNumber, _
                                          "BUS")
    
    If RS.RecordCount > 0 Then
        Set grdNonStockCodedPartsList.DataSource = RS
        NSPCoreCostTotal = Format(ColumnTotals(RS, "core cost"), "currency")
        RS.MoveFirst
        txtNonStockCodedPartsTotal.Text = Format(ColumnTotals(RS, "total cost"), "currency")
    Else
        Set grdNonStockCodedPartsList.DataSource = Nothing
        NSPCoreCostTotal = Format(0#, "currency")
        txtNonStockCodedPartsTotal.Text = Format(0#, "currency")
    End If
        
    'Populate the stock coded items
    Set RS = modDBHelper.RetrieveSCPUsed("CES_INQUIRY.RETRIEVE_SCP_USED", _
                                         m_str_LinkNumber, _
                                         "N", _
                                         "BUS")
    If RS.RecordCount > 0 Then
        Set grdStockCodedPartsList.DataSource = RS
        SCPCoreCostTotal = Format( _
                                    ColumnTotals(RS, "core cost"), "currency")
        
        RS.MoveFirst
        txtStockCodedPartsTotal.Text = Format( _
                                    ColumnTotals(RS, "total cost"), "currency")
    Else
        Set grdStockCodedPartsList.DataSource = Nothing
        SCPCoreCostTotal = Format(0#, "currency")
        txtStockCodedPartsTotal.Text = Format(0#, "currency")
    End If
    'Populate the rebuilt items
    Set RS = modDBHelper.RetrieveRBPUsed("CES_INQUIRY.RETRIEVE_RBP_USED", _
                                         m_str_LinkNumber, _
                                         "BUS")
    
    If RS.RecordCount > 0 Then
        Set grdRebuiltPartsList.DataSource = RS
        RS.MoveFirst
        txtRebuiltPartsTotal.Text = Format(ColumnTotals(RS, "total cost"), "currency")
    Else
        Set grdRebuiltPartsList.DataSource = Nothing
        txtRebuiltPartsTotal.Text = Format(0#, "currency")
    End If
    
    CoreCostTotal = SCPCoreCostTotal + NSPCoreCostTotal
    
    'Calculate the materials total
    txtCoreCostTotal.Text = Format((CoreCostTotal * -1), "currency")
    txtTotalMaterialsCost.Text = Format( _
                                CCur(txtRebuiltPartsTotal.Text) + _
                                CCur(txtNonStockCodedPartsTotal.Text) + _
                                CCur(txtStockCodedPartsTotal.Text) - CoreCostTotal, "currency")
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateGrids", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub FormatGrids()
    On Error GoTo Error_Handler
     
    If grdNonStockCodedPartsList.Columns.Count > 2 Then
        With grdNonStockCodedPartsList
            .Columns("SUPPLIER NUMBER").Width = 1900
            .Columns("SUPPLIER NAME").Width = 1700
            .Columns("CC").Width = 500
            .Columns("QTY").Alignment = dbgRight
            .Columns("QTY").Width = 500
            .Columns("%").Alignment = dbgRight
            .Columns("%").Width = 500
            .Columns("UNIT COST").Alignment = dbgRight
            .Columns("UNIT COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("UNIT COST").Width = 1200
            .Columns("CORE COST").Alignment = dbgRight
            .Columns("CORE COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("CORE COST").Width = 1200
            .Columns("TOTAL COST").Alignment = dbgRight
            .Columns("TOTAL COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("TOTAL COST").Width = 1200
            .Columns("DESCRIPTION").Width = 4000
            .Columns("LAST MODIFIED DATE").Alignment = dbgRight
            .Columns("LAST MODIFIED DATE").Width = 2400
            .Columns("LAST MODIFIED DATE").NumberFormat = "yyyy-mmm-dd hh:mm:ss AMPM"
            .Columns("ID").Visible = False
            .Columns("ROWID").Visible = False
        End With
    End If
    
    If grdStockCodedPartsList.Columns.Count > 2 Then
        With grdStockCodedPartsList
            .Columns("UNIT COST").Alignment = dbgRight
            .Columns("UNIT COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("UNIT COST").Width = 1100
            .Columns("CC").Width = 500
            .Columns("QTY").Alignment = dbgRight
            .Columns("QTY").Width = 500
            .Columns("%").Alignment = dbgRight
            .Columns("%").Width = 500
            .Columns("CORE COST").Alignment = dbgRight
            .Columns("CORE COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("CORE COST").Width = 1200
            .Columns("TOTAL COST").Alignment = dbgRight
            .Columns("TOTAL COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("TOTAL COST").Width = 1200
            .Columns("DESCRIPTION").Width = 4000
            .Columns("DESCRIPTION").Caption = "DESCRIPTION"
            .Columns("OEM COST").Visible = False
            .Columns("MMS REBUILT CODE").Visible = False
            .Columns("REBUILT PART COST").Visible = False
            .Columns("REBUILT PART").Visible = False
            .Columns("ROWID").Visible = False
        End With
    End If
    
    If grdRebuiltPartsList.Columns.Count > 2 Then
        With grdRebuiltPartsList
            .Columns("UNIT COST").Alignment = dbgRight
            .Columns("UNIT COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("UNIT COST").Width = 1200
            .Columns("CC").Visible = False
            .Columns("QTY").Alignment = dbgRight
            .Columns("QTY").Width = 500
            .Columns("%").Alignment = dbgRight
            .Columns("%").Width = 500
            .Columns("CORE COST").Visible = False
            .Columns("TOTAL COST").Alignment = dbgRight
            .Columns("TOTAL COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("TOTAL COST").Width = 1200
            .Columns("DESCRIPTION").Width = 4000
            .Columns("ROWID").Visible = False
        End With
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "FormatGrids", g_l_ErrorLineNumber
End Sub

Private Sub grdNonStockCodedPartsList_DblClick()
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not go further, just exit sub.
        Exit Sub
    End If
    
    'Update the non stock coded part
    If grdNonStockCodedPartsList.Row >= 0 Then
          m_var_RowSelected = grdNonStockCodedPartsList.Bookmark
        Dim formshow As New frmAddNSCPToEstimate
        formshow.m_str_LinkNumber = m_str_LinkNumber
        formshow.Caption = "Edit a Non-Stock Coded Part in the Bus Estimate"
        formshow.m_str_AuditReference = CStr(m_l_VehicleListID)
        formshow.m_str_TypeCode = "BUS"
        formshow.PassValues grdNonStockCodedPartsList.Columns("SUPPLIER NUMBER").Value, _
                            grdNonStockCodedPartsList.Columns("SUPPLIER NAME").Value, _
                            grdNonStockCodedPartsList.Columns("CC").Value, _
                            grdNonStockCodedPartsList.Columns("%").Value, _
                            grdNonStockCodedPartsList.Columns("QTY").Value, _
                            grdNonStockCodedPartsList.Columns("ROWID").Value, _
                            grdNonStockCodedPartsList.Columns("CORE COST").Value
        formshow.Show vbModal
        Call frmVehCostEstimateMain.RefreshForm
          grdNonStockCodedPartsList.Bookmark = m_var_RowSelected
    End If
        
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdNonStockCodedPartsList_DblClick", g_l_ErrorLineNumber
End Sub

Private Sub grdNonStockCodedPartsList_KeyDown(KeyCode As Integer, Shift As Integer)
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_PartID As String
    
    On Error GoTo Error_Handler

    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not go further, just exit sub.
        Exit Sub
    End If
    
    If KeyCode = vbKeyDelete And grdNonStockCodedPartsList.Row >= 0 Then
        m_str_Msg = "Are you sure you want to delete this item?"
        l_Result = MsgBox(m_str_Msg, vbOKCancel Or vbQuestion, _
                          "Delete Materials of this Vehicle Estimate")
        If l_Result = vbOK Then
            str_PartID = grdNonStockCodedPartsList.Columns("ROWID").Text
            l_Result = modDBHelper.DeleteNSCPUsed("CES_DELETE.DELETE_NSCP_USED", _
                                                  l_RetVal, _
                                                  str_PartID)
            'Insert record into the AUDIT_MODIFY_HISTORY table.
            l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                    "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                    l_RetVal, _
                    "Delete Non-Stock Coded Part", _
                    CStr(m_l_VehicleListID), _
                    "BUS", _
                    "SUPPLIER NUMBER ---> " + grdNonStockCodedPartsList.Columns("SUPPLIER NUMBER").Text, _
                    "SUPPLIER NAME ---> " + grdNonStockCodedPartsList.Columns("SUPPLIER NAME").Text, _
                    "CC ---> " + grdNonStockCodedPartsList.Columns("CC").Text, _
                    "QTY ---> " + grdNonStockCodedPartsList.Columns("QTY").Text, _
                    "% ---> " + grdNonStockCodedPartsList.Columns("%").Text, _
                    "UNIT COST ---> " + grdNonStockCodedPartsList.Columns("UNIT COST").Text, _
                    "CORE COST ---> " + grdNonStockCodedPartsList.Columns("CORE COST").Text, _
                    "TOTAL COST ---> " + grdNonStockCodedPartsList.Columns("TOTAL COST").Text, _
                    "DESCRIPTION ---> " + grdNonStockCodedPartsList.Columns("DESCRIPTION").Text, _
                    "KEYWORD ---> " + grdNonStockCodedPartsList.Columns("KEYWORD").Text, _
                    "LAST MODIFIED DATE ---> " + grdNonStockCodedPartsList.Columns("LAST MODIFIED DATE").Text)
            Call frmVehCostEstimateMain.RefreshForm
        End If
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdNonStockCodedPartsList_KeyDown", g_l_ErrorLineNumber
End Sub

Private Sub grdStockCodedPartsList_DblClick()
    On Error GoTo Error_Handler

    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not go further, just exit sub.
        Exit Sub
    End If
    
    'Update the stock coded part
    If grdStockCodedPartsList.Row >= 0 Then
          m_var_RowSelected = grdStockCodedPartsList.Bookmark
        Dim formshow As New frmAddSCPToEstimate
        formshow.Caption = "Edit a Stock Coded Part in the Bus Estimate"
        formshow.m_str_AuditReference = CStr(m_l_VehicleListID)
        formshow.m_str_TypeCode = "BUS"
        formshow.m_str_MBNumber = m_str_LinkNumber
        formshow.PassValues grdStockCodedPartsList.Columns("STOCK CODE").Value, _
                            grdStockCodedPartsList.Columns("CC").Value, _
                            grdStockCodedPartsList.Columns("%").Value, _
                            grdStockCodedPartsList.Columns("QTY").Value, _
                            grdStockCodedPartsList.Columns("ROWID").Value, _
                            grdStockCodedPartsList.Columns("CORE COST").Value
        formshow.Show vbModal
        Call frmVehCostEstimateMain.RefreshForm
          grdStockCodedPartsList.Bookmark = m_var_RowSelected
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdStockCodedPartsList_DblClick", g_l_ErrorLineNumber
End Sub

Private Sub grdStockCodedPartsList_KeyDown(KeyCode As Integer, Shift As Integer)
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_PartID As String
    
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not go further, just exit sub.
        Exit Sub
    End If
    
    If KeyCode = vbKeyDelete And grdStockCodedPartsList.Row >= 0 Then
        m_str_Msg = "Are you sure you want to delete this item?"
        l_Result = MsgBox(m_str_Msg, vbOKCancel Or vbQuestion, _
                          "Delete Materials of Vehicle Estimate")
        If l_Result = vbOK Then
            str_PartID = grdStockCodedPartsList.Columns("ROWID").Text
            l_Result = modDBHelper.DeleteSCPUsed("CES_DELETE.DELETE_SCP_USED", _
                                                 l_RetVal, _
                                                 str_PartID)
            'Insert record into the AUDIT_MODIFY_HISTORY table.
            l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                    "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                    l_RetVal, _
                    "Delete Stock Coded Part", _
                    CStr(m_l_VehicleListID), _
                    "BUS", _
                    "STOCK CODE ---> " + grdStockCodedPartsList.Columns("STOCK CODE").Text, _
                    "UNIT COST ---> " + grdStockCodedPartsList.Columns("UNIT COST").Text, _
                    "CC ---> " + grdStockCodedPartsList.Columns("CC").Text, _
                    "QTY ---> " + grdStockCodedPartsList.Columns("QTY").Text, _
                    "% ---> " + grdStockCodedPartsList.Columns("%").Text, _
                    "CORE COST ---> " + grdStockCodedPartsList.Columns("CORE COST").Text, _
                    "TOTAL COST ---> " + grdStockCodedPartsList.Columns("TOTAL COST").Text, _
                    "DESCRIPTION ---> " + grdStockCodedPartsList.Columns("DESCRIPTION").Text, _
                    "KEYWORD ---> " + grdStockCodedPartsList.Columns("KEYWORD").Text)
            Call frmVehCostEstimateMain.RefreshForm
        End If
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdStockCodedPartsList_KeyDown", g_l_ErrorLineNumber
End Sub

Private Sub grdRebuiltPartsList_DblClick()
    On Error GoTo Error_Handler

    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not go further, just exit sub.
        Exit Sub
    End If
    
    'Update the stock coded part
    If grdRebuiltPartsList.Row >= 0 Then
          m_var_RowSelected = grdRebuiltPartsList.Bookmark
        Dim formshow As New frmAddRBPToEstimate
        formshow.Caption = "Edit a Rebuilt Part in the Bus Estimate"
        formshow.m_str_TypeCode = "BUS"
        formshow.m_str_AuditReference = CStr(m_l_VehicleListID)
        formshow.m_str_LinkNumber = m_str_LinkNumber
        formshow.PassValues grdRebuiltPartsList.Columns("REBUILT NUMBER").Value, _
                            grdRebuiltPartsList.Columns("%").Value, _
                            grdRebuiltPartsList.Columns("QTY").Value, _
                            grdRebuiltPartsList.Columns("ROWID").Value
        formshow.Show vbModal
        Call frmVehCostEstimateMain.RefreshForm
          grdRebuiltPartsList.Bookmark = m_var_RowSelected
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdRebuiltPartsList_DblClick", g_l_ErrorLineNumber
End Sub

Private Sub grdRebuiltPartsList_KeyDown(KeyCode As Integer, Shift As Integer)
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_PartID As String
    
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not go further, just exit sub.
        Exit Sub
    End If
    
    If KeyCode = vbKeyDelete And grdRebuiltPartsList.Row >= 0 Then
        m_str_Msg = "Are you sure you want to delete this item?"
        l_Result = MsgBox(m_str_Msg, vbOKCancel Or vbQuestion, _
                          "Delete Materials of Vehicle Estimate")
        If l_Result = vbOK Then
            str_PartID = grdRebuiltPartsList.Columns("ROWID").Text
            l_Result = modDBHelper.DeleteSCPUsed("CES_DELETE.DELETE_SCP_USED", _
                                                 l_RetVal, _
                                                 str_PartID)
            'Insert record into the AUDIT_MODIFY_HISTORY table.
            l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                    "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                    l_RetVal, _
                    "Delete Rebuilt Part", _
                    CStr(m_l_VehicleListID), _
                    "BUS", _
                    "UNIT COST ---> " + grdRebuiltPartsList.Columns("UNIT COST").Text, _
                    "REBUILT NUMBER ---> " + grdRebuiltPartsList.Columns("REBUILT NUMBER").Text, _
                    "CC ---> " + grdRebuiltPartsList.Columns("CC").Text, _
                    "QTY ---> " + grdRebuiltPartsList.Columns("QTY").Text, _
                    "% ---> " + grdRebuiltPartsList.Columns("%").Text, _
                    "TOTAL COST ---> " + grdRebuiltPartsList.Columns("TOTAL COST").Text, _
                    "DESCRIPTION ---> " + grdRebuiltPartsList.Columns("DESCRIPTION").Text, _
                    "KEYWORD ---> " + grdRebuiltPartsList.Columns("KEYWORD").Text)
            Call frmVehCostEstimateMain.RefreshForm
        End If
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdRebuiltPartsList_KeyDown", g_l_ErrorLineNumber
End Sub

Private Sub optNSCPart_Click()
    On Error GoTo Error_Handler
    
    Call ChangeSearchLabel
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "optNSCPart_Click", g_l_ErrorLineNumber
End Sub

Private Sub optRBPart_Click()
    On Error GoTo Error_Handler
    
    Call ChangeSearchLabel
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "optRBPart_Click", g_l_ErrorLineNumber
End Sub

Private Sub optSCPart_Click()
    On Error GoTo Error_Handler
    
    Call ChangeSearchLabel
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "optSCPart_Click", g_l_ErrorLineNumber
End Sub

Private Sub ChangeSearchLabel()
    On Error GoTo Error_Handler
    
    ' As the type to part to search by is changed, we must change
    ' the label to reflect this
    If optRBPart.Value = True Then
        lblKeyToSearch.Caption = "Rebuilt Number:"
    ElseIf optSCPart.Value = True Then
        lblKeyToSearch.Caption = "Stock Code:"
    ElseIf optNSCPart.Value = True Then
        lblKeyToSearch.Caption = "Supplier Number:"
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "ChangeSearchLabel", g_l_ErrorLineNumber
End Sub

Private Function SelectedOption()
    On Error GoTo Error_Handler
    
    ' As the type to part to search by is changed, we must change
    ' the label to reflect this
    If optRBPart.Value = True Then
        SelectedOption = "RB"
    ElseIf optSCPart.Value = True Then
        SelectedOption = "SC"
    ElseIf optNSCPart.Value = True Then
        SelectedOption = "NSC"
    Else
        SelectedOption = ""
    End If
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "SelectedOption", g_l_ErrorLineNumber
End Function

Private Sub cmdFindNext_Click()
    Dim RS As ADODB.Recordset
    Dim SearchGrid As DataGrid
    Dim str_SearchField As String
    Dim l_Counter As Long
    
    On Error GoTo Error_Handler:
        
    ' Must enter a value to search
    If txtKeyToSearch.Text = "" Then
        MsgBox "Enter a part to find.", vbExclamation, "Cost Estimate System"
        Exit Sub
    End If
    
    'Get the grid, seach filed and the record set used for searching
    Select Case SelectedOption()
        Case "RB"
            Set SearchGrid = grdRebuiltPartsList
            str_SearchField = "[REBUILT NUMBER]"
        Case "SC"
            Set SearchGrid = grdStockCodedPartsList
            str_SearchField = "[STOCK CODE]"
        Case "NSC"
            Set SearchGrid = grdNonStockCodedPartsList
            str_SearchField = "[SUPPLIER NUMBER]"
    End Select
    
    If Not SearchGrid.DataSource Is Nothing Then
        Set RS = SearchGrid.DataSource
    Else
        MsgBox "No parts to find.", vbExclamation, "Cost Estimate System"
        Exit Sub
    End If
    
    ' If the grid has lost focus then start seach again
    If RS.AbsolutePage < 0 Then
        m_str_PreviousSearch = ""
        m_str_PreviousSearchType = ""
    End If
   
    ' Determine whether or not they are performing the same
    ' search again or starting a new search
    If m_str_PreviousSearch = txtKeyToSearch.Text And m_str_PreviousSearchType = SelectedOption() Then
        ' Continue Search
        If RS.RecordCount > 0 Then
            RS.AbsolutePosition = RS.Bookmark + 1
            RS.Find str_SearchField & " LIKE '%" & txtKeyToSearch.Text & "%'"
            If RS.EOF Then
                MsgBox "All matching parts have been found.", vbExclamation, "Cost Estimate System"
                m_str_PreviousSearch = ""
                m_str_PreviousSearchType = ""
            Else
                With SearchGrid
                    For l_Counter = .SelBookmarks.Count - 1 To 0 Step -1
                        .SelBookmarks.Remove l_Counter
                    Next
                    .SelBookmarks.Add .RowBookmark(.Row)
                Select Case SelectedOption()
                    Case "RB"
                      Set SearchGrid = grdRebuiltPartsList
                      str_SearchField = "[REBUILT NUMBER]"
                  Case "SC"
                      Set SearchGrid = grdStockCodedPartsList
                      str_SearchField = "[STOCK CODE]"
                  Case "NSC"
                      Set SearchGrid = grdNonStockCodedPartsList
                      str_SearchField = "[SUPPLIER NUMBER]"
    End Select
                End With
                m_str_PreviousSearch = txtKeyToSearch.Text
                m_str_PreviousSearchType = SelectedOption()
            End If
        Else
            MsgBox "No parts to find.", vbExclamation, "Cost Estimate System"
            m_str_PreviousSearch = txtKeyToSearch.Text
            m_str_PreviousSearchType = SelectedOption()
        End If
    Else
        ' Start New Search
        If RS.RecordCount > 0 Then
            RS.MoveFirst
            RS.Find str_SearchField & " LIKE '%" & txtKeyToSearch.Text & "%'"
            If RS.EOF Then
                RS.MoveFirst
                MsgBox "Part not found.", vbExclamation, "Cost Estimate System"
                With SearchGrid
                    For l_Counter = .SelBookmarks.Count - 1 To 0 Step -1
                        .SelBookmarks.Remove l_Counter
                    Next
                End With
                m_str_PreviousSearch = ""
                m_str_PreviousSearchType = ""
            Else
                With SearchGrid
                    For l_Counter = .SelBookmarks.Count - 1 To 0 Step -1
                        .SelBookmarks.Remove l_Counter
                    Next
                    .SelBookmarks.Add .RowBookmark(.Row)
                     grdRebuiltPartsList.SetFocus
                End With
                m_str_PreviousSearch = txtKeyToSearch.Text
                m_str_PreviousSearchType = SelectedOption()
            End If
        Else
            MsgBox "No parts to find.", vbExclamation, "Cost Estimate System"
            m_str_PreviousSearch = txtKeyToSearch.Text
            m_str_PreviousSearchType = SelectedOption()
        End If
    End If
            
    Set RS = Nothing
    Set SearchGrid = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdFindNext_Click", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    If Not SearchGrid Is Nothing Then
        Set SearchGrid = Nothing
    End If
End Sub
frmConvertToRebuiltPart.frm :
VERSION 5.00
Begin VB.Form frmConvertToRebuiltPart 
   BorderStyle     =   3  'Fixed Dialog
   Caption         =   "Convert to Rebuilt Part"
   ClientHeight    =   2190
   ClientLeft      =   45
   ClientTop       =   330
   ClientWidth     =   3780
   Icon            =   "frmConvertToRebuiltPart.frx":0000
   LinkTopic       =   "Form1"
   MaxButton       =   0   'False
   MinButton       =   0   'False
   ScaleHeight     =   2190
   ScaleWidth      =   3780
   ShowInTaskbar   =   0   'False
   StartUpPosition =   2  'CenterScreen
   Begin VB.TextBox txtStockCodedNumber 
      Height          =   375
      Left            =   1260
      TabIndex        =   2
      Top             =   1020
      Width           =   2475
   End
   Begin VB.CommandButton cmdCancel 
      Caption         =   "&Cancel"
      Height          =   375
      Left            =   2115
      TabIndex        =   4
      Top             =   1500
      Width           =   1185
   End
   Begin VB.CommandButton cmdConvert 
      Caption         =   "&Convert"
      Default         =   -1  'True
      Height          =   375
      Left            =   510
      TabIndex        =   3
      Top             =   1485
      Width           =   1185
   End
   Begin VB.TextBox txtRebuiltPartNumber 
      Height          =   375
      Left            =   1260
      TabIndex        =   1
      Top             =   540
      Width           =   2475
   End
   Begin VB.TextBox txtMakeBuyNumber 
      BackColor       =   &H80000004&
      Enabled         =   0   'False
      Height          =   375
      Left            =   1260
      TabIndex        =   0
      Top             =   120
      Width           =   2475
   End
   Begin VB.Label lblStockCodeNumber 
      Caption         =   "Stock Code #"
      Height          =   240
      Left            =   150
      TabIndex        =   7
      Top             =   1035
      Width           =   1050
   End
   Begin VB.Label lblRebuiltPartNumber 
      Caption         =   "Rebuilt Part #"
      Height          =   240
      Left            =   135
      TabIndex        =   6
      Top             =   585
      Width           =   1050
   End
   Begin VB.Label lblMakeBuyNumber 
      Caption         =   "Make/Buy #"
      Height          =   240
      Left            =   180
      TabIndex        =   5
      Top             =   135
      Width           =   960
   End
End
Attribute VB_Name = "frmConvertToRebuiltPart"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Option Explicit
Private m_str_Msg As String
Private RS As ADODB.Recordset

Private Sub cmdCancel_Click()
    On Error GoTo Error_Handler

    Unload Me

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdCancel_Click", g_l_ErrorLineNumber
End Sub

Private Sub cmdConvert_Click()
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_MBNumber As String
    Dim str_MMSStockCode As String
    Dim str_RBStockCodeFromDB As String
    Dim str_MMSStockCodeFromDB As String
    Dim str_DetailedDescription As String
    Dim str_Keyword As String
    Dim str_CorePartNumber As String
    Dim str_RebuiltStockNumber As String
    Dim str_JobNumber As String
    Dim str_SOPNumber As String
    Dim str_LastModifiedBy As String
    Dim str_BuyCost As String
    Dim str_ExternalCost As String
    Dim str_RemanufacturedCost As String
    Dim str_core_charge As String
    Dim l_Count As Long
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    str_RebuiltStockNumber = Trim(txtRebuiltPartNumber.Text)
    'Make sure that data in the txtRebuiltPartNumber edit-box is not empty.
    If str_RebuiltStockNumber = "" Then
        Call SetWaitCursor
        m_str_Msg = "Rebuilt Part # should not be empty."
        MsgBox m_str_Msg, vbInformation + vbOKOnly
        txtRebuiltPartNumber.SetFocus
        Exit Sub
    End If
    
    'Make sure that data in the txtStockCodedNumber edit-box is not empty.
    str_MMSStockCode = Trim(txtStockCodedNumber.Text)
    If str_MMSStockCode = "" Then
        Call SetWaitCursor
        m_str_Msg = "Stock Code # should not be empty."
        MsgBox m_str_Msg, vbInformation + vbOKOnly
        txtStockCodedNumber.SetFocus
        Exit Sub
    End If
    
    'Make sure that data in the txtRebuiltPartNumber edit-box is not in the
    'RB_MASTERLIST.REBUILT_STOCK_NUM field.
    
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.RetrieveRB("CES_INQUIRY.RETRIEVE_RB")
    
    If RS.RecordCount > 0 Then
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
            str_RBStockCodeFromDB = RS.Fields.Item("REBUILT_STOCK_NUM")
            If str_RebuiltStockNumber = str_RBStockCodeFromDB Then
                Call SetWaitCursor
                Set RS = Nothing
                m_str_Msg = "Rebuilt Part Number is duplicated. Please provide another one."
                MsgBox m_str_Msg, vbInformation + vbOKOnly
                If txtRebuiltPartNumber.Enabled = True Then
                    txtRebuiltPartNumber.SetFocus
                End If
                Exit Sub
            End If
            RS.MoveNext
        Next l_Count
    End If
    
    'NOTE. NEXT INSERTS ARE NOT ATOMIC. ALL OF THEM SHOULD BE UNDER ONE TRANSACTION.
    '      IF, LET SAY, ONE INSERTION "CES_UPDATE.ADD_NSCP_USED" WILL FAIL, DATA IN THE
    '      DATABASE WILL NOT BE CONSISTANT.
    
    'Get information from the MB_LIST table.
    str_MBNumber = Trim(txtMakeBuyNumber.Text)
    Set RS = modDBHelper.RetrieveMBListByMBNumber( _
                                        "CES_INQUIRY.RETRIEVE_MB_LIST_BY_MB_NUMBER", _
                                        str_MBNumber)
    str_DetailedDescription = RS.Fields.Item("DESCRIPTION")
    str_Keyword = RS.Fields.Item("KEYWORD")
    str_CorePartNumber = RS.Fields.Item("CORE_CODE")
    str_JobNumber = RS.Fields.Item("BENCH_NUMBER")
    str_LastModifiedBy = modMain.g_str_UserName
    str_SOPNumber = RS.Fields.Item("SOP_Number")
    str_BuyCost = RS.Fields.Item("Buy_New_cost")
    str_ExternalCost = RS.Fields.Item("External_Cost")
    str_RemanufacturedCost = RS.Fields.Item("Reman_Cost")
    str_JobNumber = " "
    If IsNull(RS.Fields.Item("JOB_NUMBER")) = False Then
        str_JobNumber = RS.Fields.Item("JOB_NUMBER")
    End If
    
    str_core_charge = RS.Fields.Item("CORE_CHARGE")
    
    'Insert a new record into RB_MASTERLIST table.
    l_Result = modDBHelper.InsertRBMasterList("CES_UPDATE.INSERT_RB_MASTERLIST", _
                                              l_RetVal, _
                                              str_MMSStockCode, _
                                              str_DetailedDescription, _
                                              str_Keyword, _
                                              str_CorePartNumber, _
                                              str_RebuiltStockNumber, _
                                              str_JobNumber, _
                                              str_LastModifiedBy, _
                                              str_SOPNumber, _
                                              str_BuyCost, _
                                              str_RemanufacturedCost, _
                                              str_ExternalCost, _
                                              str_core_charge)

    'In the NSC_PARTS_USED table find all records with LINK_CODE = str_MBNumber and
    'LINK_TYPE = "MB".
    Set RS = modDBHelper.RetrieveNSCPUsed("CES_INQUIRY.RETRIEVE_NSCP_USED_COPY", _
                                        str_MBNumber, _
                                        "MB")
    
    'Add new records to the NSC_PARTS_USED table, with all fields = fields from the RS,
    'except:
    'ENTERED_BY = current user name
    'LAST_MODIFIED_BY = current user name (done in CES_UPDATE.ADD_NSCP_USED)
    'LINK_TYPE = "RB"
    'LINK_CODE = data from the txtRebuiltPartNumber edit-box
    'DATE_ENTERED = current date (done in CES_UPDATE.ADD_NSCP_USED)
    'LAST_MODIFIED_DATE = current date (done in CES_UPDATE.ADD_NSCP_USED)
    If RS.RecordCount > 0 Then
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
            l_Result = modDBHelper.AddNSCPUsed("CES_UPDATE.ADD_NSCP_USED", _
                                               l_RetVal, _
                                               RS.Fields.Item("SUPPLIER NUMBER"), _
                                               RS.Fields.Item("SUPPLIER NAME"), _
                                               RS.Fields.Item("CC"), _
                                               RS.Fields.Item("QTY"), _
                                               RS.Fields.Item("%"), _
                                               modMain.g_str_UserName, _
                                               str_RebuiltStockNumber, _
                                               RS.Fields.Item("UNIT COST"), _
                                               "RB", _
                                               RS.Fields.Item("CORE COST"), _
                                               RS.Fields.Item("ID"))
            RS.MoveNext
        Next l_Count
    End If
    
    'In the SC_PARTS_USED table find all records with LINK_CODE = str_MBNumber and
    'LINK_TYPE = "MB" and REBUILT_PART = "Y"
    Set RS = modDBHelper.RetrieveSCPUsed("CES_INQUIRY.RETRIEVE_SCP_USED_COPY", _
                                         str_MBNumber, _
                                         "Y", _
                                         "MB")
    
    'Add new records to the SC_PARTS_USED table, with all fields = fields from the RS,
    'except:
    'USER_ENTERED = current user name
    'LAST_MODIFIED_BY = current user name (done in CES_UPDATE.ADD_SCP_USED)
    'LINK_TYPE = "RB"
    'LINK_CODE = data from the txtRebuiltPartNumber edit-box
    'DATE_ENTERED = current date (done in CES_UPDATE.ADD_SCP_USED)
    'LAST_MODIFIED_DATE = current date (done in CES_UPDATE.ADD_SCP_USED)
    If RS.RecordCount > 0 Then
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
        l_Result = modDBHelper.AddSCPUsed("CES_UPDATE.ADD_SCP_USED", _
                                          l_RetVal, _
                                          RS.Fields.Item("STOCK CODE"), _
                                          RS.Fields.Item("CC"), _
                                          RS.Fields.Item("QTY"), _
                                          RS.Fields.Item("%"), _
                                          modMain.g_str_UserName, _
                                          RS.Fields.Item("UNIT COST"), _
                                          RS.Fields.Item("OEM COST"), _
                                          str_RebuiltStockNumber, _
                                          RS.Fields.Item("REBUILT PART"), _
                                          "RB", _
                                          RS.Fields.Item("CORE COST"), _
                                          RS.Fields.Item("MMS REBUILT CODE"), _
                                          RS.Fields.Item("REBUILT PART COST"))
            RS.MoveNext
        Next l_Count
    End If
    
    Set RS = modDBHelper.RetrieveSCPUsed("CES_INQUIRY.RETRIEVE_SCP_USED_COPY", _
                                     str_MBNumber, _
                                     "N", _
                                     "MB")
    
    'Add new records to the SC_PARTS_USED table, with all fields = fields from the RS,
    'except:
    'USER_ENTERED = current user name
    'LAST_MODIFIED_BY = current user name (done in CES_UPDATE.ADD_SCP_USED)
    'LINK_TYPE = "RB"
    'LINK_CODE = data from the txtRebuiltPartNumber edit-box
    'DATE_ENTERED = current date (done in CES_UPDATE.ADD_SCP_USED)
    'LAST_MODIFIED_DATE = current date (done in CES_UPDATE.ADD_SCP_USED)
    If RS.RecordCount > 0 Then
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
        l_Result = modDBHelper.AddSCPUsed("CES_UPDATE.ADD_SCP_USED", _
                                          l_RetVal, _
                                          RS.Fields.Item("STOCK CODE"), _
                                          RS.Fields.Item("CC"), _
                                          RS.Fields.Item("QTY"), _
                                          RS.Fields.Item("%"), _
                                          modMain.g_str_UserName, _
                                          RS.Fields.Item("UNIT COST"), _
                                          RS.Fields.Item("OEM COST"), _
                                          str_RebuiltStockNumber, _
                                          RS.Fields.Item("REBUILT PART"), _
                                          "RB", _
                                          RS.Fields.Item("CORE COST"), _
                                               " ", _
                                               0)
            RS.MoveNext
        Next l_Count
    End If
    'In the EMPLOYEE_LABOUR table find all records with LINK_NUMBER = str_MBNumber and
    'TYPEID = "MB"
    Set RS = modDBHelper.RetrieveEmployeeLabour("CES_INQUIRY.RETRIEVE_EMPLOYEE_LABOUR", _
                                                str_MBNumber, _
                                                "MB")
    'Add new records to the EMPLOYEE_LABOUR table, with all fields = fields from the RS,
    'except:
    'TYPEID = "RB"
    'LINK_NUMBER = data from the txtRebuiltPartNumber edit-box
    'DATE_ENTERED = current date (done in CES_UPDATE.ADD_LABOUR_TASKS)
    'DATE_REVISED = current date (done in CES_UPDATE.ADD_LABOUR_TASKS)
    
    If RS.RecordCount > 0 Then
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
        l_Result = modDBHelper.AddLabourTasks("CES_UPDATE.ADD_LABOUR_TASKS", _
                                              l_RetVal, _
                                              RS.Fields.Item("LABOUR_DEFN"), _
                                              str_RebuiltStockNumber, _
                                              "RB", _
                                              RS.Fields.Item("COSTCENTRE"), _
                                              RS.Fields.Item("TASK"), _
                                              RS.Fields.Item("LABOUR_TYPE"), _
                                              RS.Fields.Item("USAGE"), _
                                              RS.Fields.Item("HRS_REQD"), _
                                              RS.Fields.Item("ADJ_HRS"), _
                                              Replace(RS.Fields.Item("TIME_ADDITION").Value, ",", "."), _
                                              RS.Fields.Item("REBUILT_PART_NUM"), _
                                              g_str_UserName)
    
            RS.MoveNext
        Next l_Count
    End If
    
    'From the MB_LIST_OF_BUSES table get all records with
    'MB_NUMBER = data from the txtMakeBuyNumber edit-box.
    Set RS = modDBHelper.RetrieveMBListOfBuses("CES_INQUIRY.MB_LIST_BUSES", _
                                               str_MBNumber)
    'Go through all records in the RS, and insert records into the RB_LIST_OF_BUSES table.
    'Note: instead of field RS.Fields.Item("MB_NUMBER") we will insert data from the
    'txtRebuiltPartNumber edit-box ( = str_RebuiltStockNumber).
    If RS.RecordCount > 0 Then
        RS.MoveFirst
        For l_Count = 0 To RS.RecordCount - 1
            l_Result = modDBHelper.InsertRBListOFBuses( _
                                            "CES_UPDATE.INSERT_RB_LIST_OF_BUSES", _
                                            l_RetVal, _
                                            str_RebuiltStockNumber, _
                                            RS.Fields.Item("LIST_ID"))
            RS.MoveNext
        Next l_Count
    End If

    If l_Result = 0 Then
        
        'Add record to the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                                    "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                                    l_RetVal, _
                                    "Make Vs Buy was Converted to a Rebuilt Part #" & str_RebuiltStockNumber, _
                                    str_MBNumber, _
                                    "MB", _
                                    "Description ---> " + str_DetailedDescription, _
                                    "Keyword ---> " + str_Keyword)

        
        m_str_Msg = "Conversion is done."
        MsgBox m_str_Msg, vbInformation + vbOKOnly
    Else
        'Conversion is failed for some reason.
        m_str_Msg = "Conversion is failed. Please contact Supervisor."
        MsgBox m_str_Msg, vbInformation + vbOKOnly
    End If
    
    Call SetWaitCursor
    Set RS = Nothing
    
    Unload Me
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdConvert_Click", g_l_ErrorLineNumber
    Call SetWaitCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetWaitCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetWaitCursor
End Sub

Private Sub txtRebuiltPartNumber_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtRebuiltPartNumber edit-box to upper case.
    l_CursorPosition = txtRebuiltPartNumber.SelStart
    str_Data = txtRebuiltPartNumber.Text
    str_Data = UCase(str_Data)
    txtRebuiltPartNumber.Text = str_Data
    txtRebuiltPartNumber.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtRebuiltPartNumber_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtStockCodedNumber_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtStockCodedNumber edit-box to upper case.
    l_CursorPosition = txtStockCodedNumber.SelStart
    str_Data = txtStockCodedNumber.Text
    str_Data = UCase(str_Data)
    txtStockCodedNumber.Text = str_Data
    txtStockCodedNumber.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtStockCodedNumber_KeyUp", g_l_ErrorLineNumber
End Sub
frmCopyMBEstimate.frm :
VERSION 5.00
Object = "{F0D2F211-CCB0-11D0-A316-00AA00688B10}#1.0#0"; "MSDATLST.OCX"
Begin VB.Form frmCopyMBEstimate 
   BorderStyle     =   3  'Fixed Dialog
   Caption         =   "Copy Make Vs. Buy Estimate"
   ClientHeight    =   4312
   ClientLeft      =   42
   ClientTop       =   364
   ClientWidth     =   5026
   LinkTopic       =   "frmCopyMBEstimate"
   MaxButton       =   0   'False
   MinButton       =   0   'False
   ScaleHeight     =   4348.235
   ScaleMode       =   0  'User
   ScaleWidth      =   5025
   ShowInTaskbar   =   0   'False
   StartUpPosition =   3  'Windows Default
   Begin VB.CommandButton cmdCopy 
      Caption         =   "Copy"
      Default         =   -1  'True
      Height          =   375
      Left            =   1512
      TabIndex        =   14
      Top             =   3818
      Width           =   1095
   End
   Begin VB.CommandButton cmdCancel 
      Cancel          =   -1  'True
      Caption         =   "Cancel"
      Height          =   375
      Left            =   2772
      TabIndex        =   13
      Top             =   3818
      Width           =   1095
   End
   Begin VB.Frame frameMBToCopy 
      Caption         =   "Make Vs. Buy Estimate To Copy"
      Height          =   1575
      Left            =   120
      TabIndex        =   6
      Top             =   119
      Width           =   4815
      Begin VB.TextBox txtMBNumber 
         Enabled         =   0   'False
         Height          =   285
         Left            =   1440
         TabIndex        =   9
         Top             =   360
         Width           =   3255
      End
      Begin VB.TextBox txtKeyword 
         Enabled         =   0   'False
         Height          =   285
         Left            =   1440
         TabIndex        =   8
         Top             =   720
         Width           =   3255
      End
      Begin VB.TextBox txtRebuildNumber 
         Enabled         =   0   'False
         Height          =   285
         Left            =   1440
         TabIndex        =   7
         Top             =   1080
         Width           =   3255
      End
      Begin VB.Label lblMBNumber 
         Caption         =   "MB Number:"
         Height          =   255
         Left            =   120
         TabIndex        =   12
         Top             =   360
         Width           =   1335
      End
      Begin VB.Label lblKeyword 
         Caption         =   "Keyword:"
         Height          =   255
         Left            =   120
         TabIndex        =   11
         Top             =   720
         Width           =   1575
      End
      Begin VB.Label lblRebuildNumber 
         Caption         =   "Rebuild Number:"
         Height          =   255
         Left            =   120
         TabIndex        =   10
         Top             =   1080
         Width           =   1335
      End
   End
   Begin VB.Frame frameNewMB 
      Caption         =   "New Make Vs. Buy Estimate"
      Height          =   1646
      Left            =   126
      TabIndex        =   0
      Top             =   2016
      Width           =   4815
      Begin VB.TextBox txtNewMBNumber 
         Height          =   285
         Left            =   1440
         TabIndex        =   1
         Top             =   385
         Width           =   3255
      End
      Begin MSDataListLib.DataCombo cboRebuildNumber 
         Height          =   322
         Left            =   1440
         TabIndex        =   3
         Top             =   1134
         Width           =   3262
         _ExtentX        =   5860
         _ExtentY        =   528
         _Version        =   393216
         Text            =   ""
      End
      Begin MSDataListLib.DataCombo cboKeyword 
         Height          =   294
         Left            =   1442
         TabIndex        =   2
         Top             =   756
         Width           =   3318
         _ExtentX        =   5960
         _ExtentY        =   528
         _Version        =   393216
         Text            =   ""
      End
      Begin VB.Label lblNewMBNumber 
         Caption         =   "MB Number:"
         Height          =   252
         Left            =   120
         TabIndex        =   15
         Top             =   378
         Width           =   1582
      End
      Begin VB.Label lblNewKeyword 
         Caption         =   "Keyword:"
         Height          =   252
         Left            =   120
         TabIndex        =   5
         Top             =   756
         Width           =   1582
      End
      Begin VB.Label lblNewRebuildNumber 
         Caption         =   "Rebuild Number:"
         Height          =   252
         Left            =   120
         TabIndex        =   4
         Top             =   1150
         Width           =   1456
      End
   End
End
Attribute VB_Name = "frmCopyMBEstimate"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Option Explicit

Private m_str_MBNumber As String

'-------------------------------------------------------
' Purpose:
'    Allows the user to pass a MB Number to the form
'    and populates the form with the information for the
'    MB corresponding to this Number.
'-------------------------------------------------------
Public Sub PassMBNumber(str_MBNumber As String)
    On Error GoTo Error_Handler:
    
    ' Pass the MB Number
    m_str_MBNumber = str_MBNumber
    txtMBNumber.Text = Trim(m_str_MBNumber)
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PassMBNumber", g_l_ErrorLineNumber
End Sub


'-------------------------------------------------------
' Purpose:
'    Creates a new MB Estimate as a copy of an
'    existing MB Estimate
'-------------------------------------------------------
Private Sub cmdCopy_Click()
    Dim s_NewNum As String
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim l_count As Long
    Dim str_MBNumberFromDB As String
     
    Dim RS As ADODB.Recordset

    On Error GoTo Error_Handler:

    Call SetWaitCursor

    'Make sure that new MB Number is Provided
    If Trim(txtNewMBNumber.Text) = "" Then
        Call SetDefaultCursor
        MsgBox "Please provide a Make Vs. Buy number.", vbExclamation, "Copy Make Vs. Buy Estimate"
        txtNewMBNumber.SetFocus
        Exit Sub
    End If
    
    'Make sure that new MB Number is not the same as old MB Number to be copied.
    If UCase(Trim(txtNewMBNumber.Text)) = UCase(Trim(txtMBNumber.Text)) Then
        Call SetDefaultCursor
        MsgBox "Please provide a different Make Vs. Buy number for the new Make Vs. Buy Estimate.", vbExclamation, "Copy Make Vs. Buy Estimate"
        txtNewMBNumber.SetFocus
        Exit Sub
    End If
    
    'Make sure that new MB Number doesn't exist.
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.RetrieveRB("CES_INQUIRY.RETRIEVE_MB")
        
    If Not IsNull(RS) And RS.RecordCount > 0 Then
        RS.MoveFirst
        For l_count = 1 To RS.RecordCount
            str_MBNumberFromDB = RS.Fields.Item("MB_NUMBER")
            If UCase(Trim(txtNewMBNumber.Text)) = str_MBNumberFromDB Then
                Call SetDefaultCursor
                MsgBox "The new MB Number alreay exists. Please provide another one.", vbExclamation, "Copy Make Vs. Buy Estimate"
                Set RS = Nothing
                txtNewMBNumber.SetFocus
                Exit Sub
            End If
            RS.MoveNext
        Next l_count
        RS.MoveFirst
    End If
    Set RS = Nothing
    
    'Make sure that a Keyword is Provided
    If Trim(cboKeyword.Text) = "" Then
        Call SetDefaultCursor
        MsgBox "Please select a Keyword.", vbExclamation, "Copy Make Vs. Buy Estimate"
        cboKeyword.SetFocus
        Exit Sub
    End If

    'Copy the MB Estimate
    l_Result = CopyMBEstimate("CES_UPDATE.COPY_MB_ESTIMATE", _
                                   l_RetVal, _
                                   m_str_MBNumber, _
                                   Trim(txtNewMBNumber.Text), _
                                   Trim(cboKeyword.Text), _
                                   Trim(cboRebuildNumber.Text))

    ' Determine whether the copy was successful
    If l_Result = 0 Then
        Call SetDefaultCursor
        s_NewNum = UCase(Trim(txtNewMBNumber.Text))
        MsgBox "Make Vs. Buy Estimate was copied successfully." & _
                Chr(13) & "The new Make Vs. Buy Number is " & _
                Trim(s_NewNum) & ".", _
                vbInformation, _
                "Copy Make Vs. Buy Estimate"
    Else
        Call SetDefaultCursor
        MsgBox "There was an error while copying Make Vs. Buy Estimate information." & _
               Chr(13) & "Make Vs. Buy Estimate was not copied successfully.", _
               vbCritical, _
               "Copy Make Vs. Buy Estimate"
    End If
    Call SetDefaultCursor
    Unload Me

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdCopy_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

'-------------------------------------------------------
' Purpose:
'    When the form loads, populates the combo boxes
'-------------------------------------------------------
Private Sub Form_Load()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler:
    
    Call SetWaitCursor
    
    ' Populate the keyword and Rebuid Number combo box
    Set RS = modDBHelper.RetrieveMB("CES_INQUIRY.RETRIEVE_MB")
    
    Set cboKeyword.RowSource = RS
    Set cboRebuildNumber.RowSource = RS
    
    cboKeyword.ListField = "keyword"
    cboRebuildNumber.ListField = "rebuild_code"

    
    ' Populate the Keyword and Rebuild Number from the MB Number
    Set RS = modDBHelper.RetrieveMB("CES_INQUIRY.RETRIEVE_MB")
    If RS.RecordCount > 0 Then
        RS.Filter = "mb_number = '" + m_str_MBNumber + "'"
        txtKeyword.Text = RS.Fields.Item("keyword")
        txtRebuildNumber.Text = RS.Fields.Item("rebuild_code")
        cboKeyword.Text = RS.Fields.Item("keyword")
        cboRebuildNumber.Text = RS.Fields.Item("rebuild_code")
    End If

    Set RS = Nothing
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

'-------------------------------------------------------
' Purpose:
'    Closes the form without copying the MB estimate.
'-------------------------------------------------------
Private Sub cmdCancel_Click()
    On Error GoTo Error_Handler:
    
    Unload Me
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdCancel_Click", g_l_ErrorLineNumber
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub txtNewMBNumber_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtNewMBNumber edit-box to upper case.
    l_CursorPosition = txtNewMBNumber.SelStart
    str_Data = txtNewMBNumber.Text
    str_Data = UCase(str_Data)
    txtNewMBNumber.Text = str_Data
    txtNewMBNumber.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtNewMBNumber", g_l_ErrorLineNumber
End Sub
frmCopyRBEstimate.frm :
VERSION 5.00
Object = "{F0D2F211-CCB0-11D0-A316-00AA00688B10}#1.0#0"; "Msdatlst.ocx"
Begin VB.Form frmCopyRBEstimate 
   BorderStyle     =   3  'Fixed Dialog
   Caption         =   "Copy Rebuilt Part Estimate"
   ClientHeight    =   4320
   ClientLeft      =   45
   ClientTop       =   345
   ClientWidth     =   5025
   LinkTopic       =   "Form1"
   MaxButton       =   0   'False
   MinButton       =   0   'False
   ScaleHeight     =   4320
   ScaleWidth      =   5025
   ShowInTaskbar   =   0   'False
   Begin VB.TextBox txtNewMMSStockCode 
      Height          =   285
      Left            =   1560
      TabIndex        =   15
      Top             =   2792
      Width           =   3255
   End
   Begin VB.Frame frameNewRB 
      Caption         =   "New Rebuilt Part Estimate"
      Height          =   1646
      Left            =   126
      TabIndex        =   9
      Top             =   2030
      Width           =   4815
      Begin VB.TextBox txtNewRBNumber 
         Height          =   285
         Left            =   1440
         TabIndex        =   10
         Top             =   385
         Width           =   3255
      End
      Begin MSDataListLib.DataCombo cboKeyword 
         Height          =   322
         Left            =   1440
         TabIndex        =   11
         Top             =   1134
         Width           =   3262
         _ExtentX        =   5741
         _ExtentY        =   556
         _Version        =   393216
         Text            =   ""
      End
      Begin VB.Label lblNewKeyword 
         Caption         =   "Keyword:"
         Height          =   252
         Left            =   120
         TabIndex        =   14
         Top             =   1150
         Width           =   1456
      End
      Begin VB.Label lblNewMMSStockCode 
         Caption         =   "MMS Stock Code:"
         Height          =   252
         Left            =   120
         TabIndex        =   13
         Top             =   756
         Width           =   1300
      End
      Begin VB.Label lblNewRBNumber 
         Caption         =   "Rebuilt Number:"
         Height          =   252
         Left            =   120
         TabIndex        =   12
         Top             =   378
         Width           =   1582
      End
   End
   Begin VB.Frame frameRBToCopy 
      Caption         =   "Rebuilt Part Estimate To Copy"
      Height          =   1575
      Left            =   126
      TabIndex        =   2
      Top             =   126
      Width           =   4815
      Begin VB.TextBox txtKeyword 
         Enabled         =   0   'False
         Height          =   285
         Left            =   1440
         TabIndex        =   5
         Top             =   1080
         Width           =   3255
      End
      Begin VB.TextBox txtMMSStockCode 
         Enabled         =   0   'False
         Height          =   285
         Left            =   1440
         TabIndex        =   4
         Top             =   720
         Width           =   3255
      End
      Begin VB.TextBox txtRBNumber 
         Enabled         =   0   'False
         Height          =   285
         Left            =   1440
         TabIndex        =   3
         Top             =   360
         Width           =   3255
      End
      Begin VB.Label lblkeyword 
         Caption         =   "Keyword:"
         Height          =   255
         Left            =   120
         TabIndex        =   8
         Top             =   1080
         Width           =   1335
      End
      Begin VB.Label lblMMSStockCode 
         Caption         =   "MMS Stock Code:"
         Height          =   255
         Left            =   120
         TabIndex        =   7
         Top             =   720
         Width           =   1300
      End
      Begin VB.Label lblRBNumber 
         Caption         =   "Rebuilt Number:"
         Height          =   255
         Left            =   120
         TabIndex        =   6
         Top             =   360
         Width           =   1335
      End
   End
   Begin VB.CommandButton cmdCancel 
      Cancel          =   -1  'True
      Caption         =   "Cancel"
      Height          =   375
      Left            =   2772
      TabIndex        =   1
      Top             =   3822
      Width           =   1095
   End
   Begin VB.CommandButton cmdCopy 
      Caption         =   "Copy"
      Default         =   -1  'True
      Height          =   375
      Left            =   1512
      TabIndex        =   0
      Top             =   3822
      Width           =   1095
   End
End
Attribute VB_Name = "frmCopyRBEstimate"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Option Explicit

Private m_str_RBNumber As String
Private m_str_MMSStockCode As String


'-------------------------------------------------------
' Purpose:
'    Allows the user to pass a Rebuilt Number and a MMS Stock Code to the form
'    and populates the form with the information corresponding to the Numbers
'-------------------------------------------------------
Public Sub PassRBNumber(str_RBNumber As String, strMMSStockCode As String)
    On Error GoTo Error_Handler:
    
    ' Pass the RB Number
    m_str_RBNumber = str_RBNumber
    m_str_MMSStockCode = strMMSStockCode
    txtRBNumber.Text = Trim(m_str_RBNumber)
    txtMMSStockCode.Text = Trim(m_str_MMSStockCode)
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PassRBNumber", g_l_ErrorLineNumber
End Sub


'-------------------------------------------------------
' Purpose:
'    Creates a new Rebuilt Part Estimate as a copy of an
'    existing Rebuilt Part Estimate
'-------------------------------------------------------
Private Sub cmdCopy_Click()
    Dim s_NewNum As String
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim l_count As Long
    Dim str_RBStockCodeFromDB As String
    Dim str_MMSStockCodeFromDB As String
    
    Dim RS As ADODB.Recordset

    On Error GoTo Error_Handler:

    Call SetWaitCursor

    'Make sure that new RB Number is Provided
    If Trim(txtNewRBNumber.Text) = "" Then
        Call SetDefaultCursor
        MsgBox "Please provide a Rebuilt number.", vbExclamation, "Copy Rebuilt Part Estimate"
        txtNewRBNumber.SetFocus
        Exit Sub
    End If
    
    'Make sure that new RB Number is not the same as the one to be copied.
    If UCase(Trim(txtNewRBNumber.Text)) = UCase(Trim(txtRBNumber.Text)) Then
        Call SetDefaultCursor
        MsgBox "Please provide a different Rebuilt Number for the new Rebuilt Part Estimate.", vbExclamation, "Copy Rebuilt Part Estimate"
        txtNewRBNumber.SetFocus
        Exit Sub
    End If
    
    'Make sure that new Rebuilt Number doesn't exist in the database.
    Set RS = modDBHelper.RetrieveRB("CES_INQUIRY.RETRIEVE_RB")
        
    If Not IsNull(RS) And RS.RecordCount > 0 Then
        RS.MoveFirst
        For l_count = 1 To RS.RecordCount
            str_RBStockCodeFromDB = RS.Fields.Item("REBUILT_STOCK_NUM")
            If UCase(Trim(txtNewRBNumber.Text)) = str_RBStockCodeFromDB Then
                Call SetDefaultCursor
                MsgBox "The new Rebuilt Number alreay exists. Please provide another one.", vbExclamation, "Copy Rebuilt Part Estimate"
                Set RS = Nothing
                txtNewRBNumber.SetFocus
                Exit Sub
            End If
            RS.MoveNext
        Next l_count
        RS.MoveFirst
    End If
    
    
    'Make sure that new MMS Stock Code is Provided
    If Trim(txtNewMMSStockCode.Text) = "" Then
        Call SetDefaultCursor
        MsgBox "Please provide a MMS Stock code.", vbExclamation, "Copy Rebuilt Part Estimate"
        txtNewMMSStockCode.SetFocus
        Exit Sub
    End If
    
    'Make sure that new MMS Stock Code is not the same as the one to be copied.
    If UCase(Trim(txtNewMMSStockCode.Text)) = UCase(Trim(txtMMSStockCode.Text)) Then
        Call SetDefaultCursor
        MsgBox "Please provide a different MMS Stock Code for the new Rebuilt Part Estimate.", vbExclamation, "Copy Rebuilt Part Estimate"
        txtNewMMSStockCode.SetFocus
        Exit Sub
    End If
    
    'Make sure that new MMS Stock Code doesn't exist.
    If Not IsNull(RS) And RS.RecordCount > 0 Then
        RS.MoveFirst
        For l_count = 1 To RS.RecordCount
            str_MMSStockCodeFromDB = RS.Fields.Item("MMS_STOCK_CODE")
            If UCase(Trim(txtNewMMSStockCode.Text)) = str_MMSStockCodeFromDB Then
                Call SetDefaultCursor
                MsgBox "The new MMS Stock Code alreay exists. Please provide another one.", vbExclamation, "Copy Rebuilt Part Estimate"
                Set RS = Nothing
                txtNewMMSStockCode.SetFocus
                Exit Sub
            End If
            RS.MoveNext
        Next l_count
        RS.MoveFirst
    End If
    
    Set RS = Nothing

    'Make sure that a Keyword is Provided
    If Trim(cboKeyword.Text) = "" Then
        Call SetDefaultCursor
        MsgBox "Please select a Keyword.", vbExclamation, "Copy Rebuilt Part Estimate"
        cboKeyword.SetFocus
        Exit Sub
    End If
    
    'Copy the Rebuilt Part Estimate
    l_Result = CopyRBEstimate("CES_UPDATE.COPY_RB_ESTIMATE", _
                                   l_RetVal, _
                                   m_str_RBNumber, _
                                   Trim(txtNewRBNumber.Text), _
                                   Trim(cboKeyword.Text), _
                                   Trim(txtNewMMSStockCode.Text))

    ' Determine whether the copy was successful
    If l_Result = 0 Then
        Call SetDefaultCursor
        s_NewNum = UCase(Trim(txtNewRBNumber.Text))
        MsgBox "Rebuilt Part Estimate was copied successfully." & _
                Chr(13) & "The new Rebuilt Part Number is " & _
                Trim(s_NewNum) & ".", _
                vbInformation, _
                "Copy Rebuit Part Estimate"
    Else
        Call SetDefaultCursor
        MsgBox "There was an error while copying Rebuilt Part Estimate information." & _
               Chr(13) & "Rebuilt Part Estimate was not copied successfully.", _
               vbCritical, _
               "Copy Rebuit Part Estimate"
    End If
    Call SetDefaultCursor
    Unload Me

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdCopy_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

'-------------------------------------------------------
' Purpose:
'    When the form loads, populates the combo boxes
'-------------------------------------------------------
Private Sub Form_Load()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler:
    
    Call SetWaitCursor
    
    ' Populate the keyword and Description combo box
    Set RS = modDBHelper.RetrieveRB("CES_INQUIRY.RETRIEVE_RB")
    
    Set cboKeyword.RowSource = RS
    
    cboKeyword.ListField = "keyword"
    
    ' Populate the Keyword and Description from the RB Number
    Set RS = modDBHelper.RetrieveRB("CES_INQUIRY.RETRIEVE_RB")
    If RS.RecordCount > 0 Then
        RS.Filter = "rebuilt_stock_num = '" + m_str_RBNumber + "'"
        txtKeyword.Text = RS.Fields.Item("keyword")
        cboKeyword.Text = RS.Fields.Item("keyword")
    End If

    Set RS = Nothing
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

'-------------------------------------------------------
' Purpose:
'    Closes the form without copying the Rebuilt Part estimate.
'-------------------------------------------------------
Private Sub cmdCancel_Click()
    On Error GoTo Error_Handler:
    
    Unload Me
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdCancel_Click", g_l_ErrorLineNumber
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub txtNewRBNumber_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtNewRBNumber edit-box to upper case.
    l_CursorPosition = txtNewRBNumber.SelStart
    str_Data = txtNewRBNumber.Text
    str_Data = UCase(str_Data)
    txtNewRBNumber.Text = str_Data
    txtNewRBNumber.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtNewRBNumber_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtNewMMSStockCode_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtNewMMSStockCode edit-box to upper case.
    l_CursorPosition = txtNewMMSStockCode.SelStart
    str_Data = txtNewMMSStockCode.Text
    str_Data = UCase(str_Data)
    txtNewMMSStockCode.Text = str_Data
    txtNewMMSStockCode.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtNewMMSStockCode", g_l_ErrorLineNumber
End Sub
frmCopyVehicleEstimate.frm :
VERSION 5.00
Object = "{F0D2F211-CCB0-11D0-A316-00AA00688B10}#1.0#0"; "msdatlst.ocx"
Begin VB.Form frmCopyVehicleEstimate 
   BorderStyle     =   3  'Fixed Dialog
   Caption         =   "Copy Vehicle Estimate"
   ClientHeight    =   3600
   ClientLeft      =   45
   ClientTop       =   330
   ClientWidth     =   5055
   Icon            =   "frmCopyVehicleEstimate.frx":0000
   LinkTopic       =   "Form1"
   MaxButton       =   0   'False
   MinButton       =   0   'False
   ScaleHeight     =   3600
   ScaleWidth      =   5055
   ShowInTaskbar   =   0   'False
   StartUpPosition =   2  'CenterScreen
   Begin VB.Frame frameNewVehicle 
      Caption         =   "New Vehicle Estimate"
      Height          =   1215
      Left            =   120
      TabIndex        =   5
      Top             =   1800
      Width           =   4815
      Begin MSDataListLib.DataCombo cboDescription 
         Height          =   315
         Left            =   1440
         TabIndex        =   1
         Top             =   720
         Width           =   3255
         _ExtentX        =   5741
         _ExtentY        =   556
         _Version        =   393216
         Text            =   ""
      End
      Begin MSDataListLib.DataCombo cboBusSeries 
         Height          =   315
         Left            =   1440
         TabIndex        =   0
         Top             =   360
         Width           =   3255
         _ExtentX        =   5741
         _ExtentY        =   556
         _Version        =   393216
         Style           =   2
         Text            =   ""
      End
      Begin VB.Label lblNewDescription 
         Caption         =   "Description:"
         Height          =   255
         Left            =   120
         TabIndex        =   13
         Top             =   720
         Width           =   1455
      End
      Begin VB.Label lblNewBusSeries 
         Caption         =   "Vehicle Series:"
         Height          =   255
         Left            =   120
         TabIndex        =   12
         Top             =   360
         Width           =   1575
      End
   End
   Begin VB.Frame frameVehicleToCopy 
      Caption         =   "Vehicle Estimate To Copy"
      Height          =   1575
      Left            =   120
      TabIndex        =   4
      Top             =   120
      Width           =   4815
      Begin VB.TextBox txtDescription 
         Enabled         =   0   'False
         Height          =   285
         Left            =   1440
         TabIndex        =   11
         Top             =   1080
         Width           =   3255
      End
      Begin VB.TextBox txtBusSeries 
         Enabled         =   0   'False
         Height          =   285
         Left            =   1440
         TabIndex        =   10
         Top             =   720
         Width           =   3255
      End
      Begin VB.TextBox txtEstimateNumber 
         Enabled         =   0   'False
         Height          =   285
         Left            =   1440
         TabIndex        =   9
         Top             =   360
         Width           =   3255
      End
      Begin VB.Label lblDescription 
         Caption         =   "Description:"
         Height          =   255
         Left            =   120
         TabIndex        =   8
         Top             =   1080
         Width           =   1095
      End
      Begin VB.Label lblBusSeries 
         Caption         =   "Vehicle Series:"
         Height          =   255
         Left            =   120
         TabIndex        =   7
         Top             =   720
         Width           =   1575
      End
      Begin VB.Label lblEstimateNumber 
         Caption         =   "Estimate Number:"
         Height          =   255
         Left            =   120
         TabIndex        =   6
         Top             =   360
         Width           =   1335
      End
   End
   Begin VB.CommandButton cmdCancel 
      Cancel          =   -1  'True
      Caption         =   "Cancel"
      Height          =   375
      Left            =   2640
      TabIndex        =   3
      Top             =   3120
      Width           =   1095
   End
   Begin VB.CommandButton cmdCopy 
      Caption         =   "Copy"
      Default         =   -1  'True
      Height          =   375
      Left            =   1320
      TabIndex        =   2
      Top             =   3120
      Width           =   1095
   End
End
Attribute VB_Name = "frmCopyVehicleEstimate"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Option Explicit

Private m_l_VehicleID As Long

'-------------------------------------------------------
' Purpose:
'    Allows the user to pass a Vehicle ID to the form
'    and populates the form with the information for the
'    vehicle corresponding to this ID.
'-------------------------------------------------------
Public Sub PassVehicleID(l_VehicleID As Long)
    On Error GoTo Error_Handler:
    
    ' Pass the vehicle estimate ID
    m_l_VehicleID = l_VehicleID
    txtEstimateNumber.Text = Trim(CStr(m_l_VehicleID))
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PassVehicleID", g_l_ErrorLineNumber
End Sub

'-------------------------------------------------------
' Purpose:
'    Creates a new Vehicle Estimate as a copy of an
'    existing vehicle estimate
'-------------------------------------------------------
Private Sub cmdCopy_Click()
    Dim l_NewID As Long
    Dim l_RetVal As Long
    Dim l_Result As Long

    On Error GoTo Error_Handler:

    Call SetWaitCursor

    'Make sure that a Bus Series is Provided
    If Trim(cboBusSeries.Text) = "" Then
        Call SetDefaultCursor
        MsgBox "Please select a Vehicle Series.", vbExclamation, "Copy Vehicle Estimate"
        cboBusSeries.SetFocus
        Exit Sub
    End If

    'Make sure that a Description is Provided
    If Trim(cboDescription.Text) = "" Then
        Call SetDefaultCursor
        MsgBox "Please select a Description.", vbExclamation, "Copy Vehicle Estimate"
        cboDescription.SetFocus
        Exit Sub
    End If
    
    'Copy the Vehicle Estimate
    l_Result = CopyVehicleEstimate("CES_UPDATE.COPY_VEHICLE_ESTIMATE", _
                                   l_RetVal, _
                                   m_l_VehicleID, _
                                   UCase(Trim(cboBusSeries.Text)), _
                                   UCase(Trim(cboDescription.Text)))

    ' Determine whether the copy was successful
    If l_Result >= 0 Then
        Call SetDefaultCursor
        MsgBox "Vehicle Estimate was copied successfully." & _
                Chr(13) & "The new Vehicle Estimate Number is " & _
                Trim(CStr(l_Result)) & ".", _
                vbInformation, _
                "Copy Vehile Estimate"
    Else
        Call SetDefaultCursor
        MsgBox "There was an error while copying Vehicle Estimate." & _
               Chr(13) & "Vehicle Estimate was not copied successfully.", _
               vbCritical, _
               "Copy Vehicle Estimate"
    End If
    
    Call SetDefaultCursor
    Unload Me

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdCopy_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

'-------------------------------------------------------
' Purpose:
'    When the form loads, populates the combo boxes
'-------------------------------------------------------
Private Sub Form_Load()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler:
    
    Call SetWaitCursor
    
    ' Populate the vehicle series combo box
    Set RS = modDBHelper.RetrieveListOfBuses("CES_INQUIRY.RETRIEVE_LIST_OF_BUSES")
    Set cboBusSeries.RowSource = RS
    cboBusSeries.ListField = "DESCRIPTION"
    
    ' Populate the descripton combo box
    Set RS = modDBHelper.RetrieveVehicleEstimates("CES_INQUIRY.RETRIEVE_VEHICLE_ESTIMATES")
    Set cboDescription.RowSource = RS
    cboDescription.ListField = "PROJ_DESC"
    
    
    ' Populate the bus series and description from the ID
    Set RS = modDBHelper.RetrieveVehicleEstimates("CES_INQUIRY.RETRIEVE_VEHICLE_ESTIMATES")
    If RS.RecordCount > 0 Then
        RS.Filter = "VEHICLE_LIST_ID = " + CStr(m_l_VehicleID)
        txtBusSeries.Text = RS.Fields.Item("VEH_SERIES_CODE")
        txtDescription.Text = RS.Fields.Item("PROJ_DESC")
    End If

    Set RS = Nothing
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

'-------------------------------------------------------
' Purpose:
'    Closes the form without copying the vehicle.
'-------------------------------------------------------
Private Sub cmdCancel_Click()
    On Error GoTo Error_Handler:
    
    Unload Me
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdCancel_Click", g_l_ErrorLineNumber
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub
frmEditBusDescription.frm :
VERSION 5.00
Begin VB.Form frmEditBusDescription 
   BorderStyle     =   3  'Fixed Dialog
   Caption         =   "Edit Vehicle Description"
   ClientHeight    =   1995
   ClientLeft      =   45
   ClientTop       =   330
   ClientWidth     =   4485
   Icon            =   "frmEditBusDescription.frx":0000
   LinkTopic       =   "Form1"
   MaxButton       =   0   'False
   MinButton       =   0   'False
   ScaleHeight     =   1995
   ScaleWidth      =   4485
   ShowInTaskbar   =   0   'False
   StartUpPosition =   2  'CenterScreen
   Begin VB.CommandButton cmdSave 
      Caption         =   "Save"
      Default         =   -1  'True
      Height          =   375
      Left            =   720
      TabIndex        =   1
      Top             =   1500
      Width           =   1275
   End
   Begin VB.TextBox txtNewBusDescription 
      BackColor       =   &H00FFFFFF&
      Height          =   285
      Left            =   60
      MaxLength       =   80
      TabIndex        =   0
      Top             =   1020
      Width           =   4380
   End
   Begin VB.TextBox txtBusDescription 
      BackColor       =   &H00E0E0E0&
      Enabled         =   0   'False
      Height          =   285
      Left            =   60
      TabIndex        =   4
      TabStop         =   0   'False
      Top             =   360
      Width           =   4380
   End
   Begin VB.CommandButton cmdCancel 
      Caption         =   "Cancel"
      Height          =   375
      Left            =   2460
      TabIndex        =   2
      Top             =   1500
      Width           =   1275
   End
   Begin VB.Label lblNewBusDescription 
      Caption         =   "New Vehicle Description:"
      Height          =   195
      Left            =   1380
      TabIndex        =   5
      Top             =   720
      Width           =   2400
   End
   Begin VB.Label lblBusDescription 
      Caption         =   "Current Vehicle Description:"
      Height          =   255
      Left            =   1320
      TabIndex        =   3
      Top             =   60
      Width           =   2295
   End
End
Attribute VB_Name = "frmEditBusDescription"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Option Explicit

Private m_str_Msg As String

Public m_str_BusDescription As String
Public m_l_BusDescriptionID As Long

Private Sub cmdCancel_Click()
    On Error GoTo Error_Handler
    
    Unload Me
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdCancel_Click", g_l_ErrorLineNumber
End Sub

Private Sub cmdSave_Click()
    Dim RS As ADODB.Recordset
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_NewBusDescription As String
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor

    str_NewBusDescription = Trim(txtNewBusDescription.Text)
    
    'Check that Bus' Description can not be an empty string.
    If str_NewBusDescription = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Vehicle description should not be empty."
        MsgBox m_str_Msg, vbOKOnly + vbInformation
        txtNewBusDescription.SetFocus
        Exit Sub
    Else
        str_NewBusDescription = UCase(str_NewBusDescription)
    End If
    
    'Check that data from the txtNewBusDescription edit-box is not duplicated in the
    'LIST_OF_BUSES table
    Set RS = New ADODB.Recordset
   
    Set RS = modDBHelper.FindTaskDescription("CES_INQUIRY.FIND_BUS_DESCRIPTION", _
                                             str_NewBusDescription)
    If RS.RecordCount > 0 Then
        Call SetDefaultCursor
        Set RS = Nothing
        m_str_Msg = "The same vehicle description already exists. Please provide another one."
        MsgBox m_str_Msg, vbOKOnly + vbInformation
        txtNewBusDescription.SetFocus
        Exit Sub
    End If
    
    Set RS = Nothing
    
    'Update record in the LIST_OF_BUSES and VEHICLE_LIST tables.
    l_Result = modDBHelper.UpdateBusDescription( _
                                        "CES_UPDATE.UPDATE_BUS_DESCRIPTION", _
                                        l_RetVal, _
                                        m_str_BusDescription, _
                                        str_NewBusDescription, _
                                        m_l_BusDescriptionID)
    If l_Result = 0 Then
        Call SetDefaultCursor
        m_str_Msg = "Vehicle description is updated."
        MsgBox m_str_Msg, vbOKOnly + vbInformation
        'Refresh grdListOfBuses grid in the frmListOfBuses form.
        Call frmListOfBuses.FillGrid

        'Add record to the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                                    "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                                    l_RetVal, _
                                    "Vehicle Description was updated in the System", _
                                    0, _
                                    "MLB", _
                                    "Current Vehicle Description ---> " + m_str_BusDescription, _
                                    "New Vehicle Description ---> " + str_NewBusDescription)
        Unload Me
    Else
        'For some reason record was not updated in the LIST_OF_BUSES table.
        m_str_Msg = "Vehicle description was not updated. Please contact administrator."
        MsgBox m_str_Msg, vbOKOnly + vbInformation
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdSave_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    txtBusDescription.Text = m_str_BusDescription
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub
frmEditEmployeeGroup.frm :
VERSION 5.00
Object = "{F0D2F211-CCB0-11D0-A316-00AA00688B10}#1.0#0"; "msdatlst.ocx"
Begin VB.Form frmEditEmployeeGroup 
   BorderStyle     =   3  'Fixed Dialog
   Caption         =   "Edit Employee Group"
   ClientHeight    =   2205
   ClientLeft      =   45
   ClientTop       =   330
   ClientWidth     =   7365
   Icon            =   "frmEditEmployeeGroup.frx":0000
   LinkTopic       =   "Form1"
   MaxButton       =   0   'False
   MinButton       =   0   'False
   ScaleHeight     =   2205
   ScaleWidth      =   7365
   ShowInTaskbar   =   0   'False
   StartUpPosition =   2  'CenterScreen
   Begin VB.CommandButton cmdCancel 
      Caption         =   "Cancel"
      Height          =   375
      Left            =   3870
      TabIndex        =   11
      Top             =   1755
      Width           =   1275
   End
   Begin VB.CommandButton cmdSave 
      Caption         =   "Save"
      Default         =   -1  'True
      Height          =   375
      Left            =   2205
      TabIndex        =   10
      Top             =   1755
      Width           =   1275
   End
   Begin VB.ComboBox cboHoursPerWeek 
      Height          =   315
      Left            =   3600
      Style           =   2  'Dropdown List
      TabIndex        =   3
      Top             =   1140
      Width           =   1050
   End
   Begin VB.TextBox txtOverheadType 
      Enabled         =   0   'False
      Height          =   285
      Left            =   6030
      TabIndex        =   4
      Top             =   1125
      Width           =   1000
   End
   Begin VB.TextBox txtRatePerHour 
      BackColor       =   &H00E0E0E0&
      Enabled         =   0   'False
      Height          =   285
      Left            =   6030
      TabIndex        =   2
      Top             =   585
      Width           =   1000
   End
   Begin VB.TextBox txtLabourDefinition 
      Enabled         =   0   'False
      Height          =   285
      Left            =   1395
      TabIndex        =   0
      Top             =   180
      Width           =   5865
   End
   Begin MSDataListLib.DataCombo cboWageGroup 
      Height          =   315
      Left            =   3600
      TabIndex        =   1
      Top             =   600
      Width           =   1020
      _ExtentX        =   1799
      _ExtentY        =   556
      _Version        =   393216
      Style           =   2
      Text            =   ""
   End
   Begin VB.Label lblOverheadType 
      Caption         =   "Overhead Type:"
      Height          =   240
      Left            =   4770
      TabIndex        =   9
      Top             =   1170
      Width           =   1185
   End
   Begin VB.Label lblHoursPerWeek 
      Caption         =   "Hours Per Week:"
      Height          =   240
      Left            =   2205
      TabIndex        =   8
      Top             =   1170
      Width           =   1320
   End
   Begin VB.Label lblRatePerHour 
      Caption         =   "Rate Per Hour:"
      Height          =   240
      Left            =   4860
      TabIndex        =   7
      Top             =   630
      Width           =   1095
   End
   Begin VB.Label lblWageGroup 
      Caption         =   "Wage Group:"
      Height          =   240
      Left            =   2520
      TabIndex        =   6
      Top             =   630
      Width           =   960
   End
   Begin VB.Label lblLabourDefinition 
      Caption         =   "Labour Definition:"
      Height          =   240
      Left            =   90
      TabIndex        =   5
      Top             =   225
      Width           =   1365
   End
End
Attribute VB_Name = "frmEditEmployeeGroup"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Option Explicit

Private m_str_Msg As String

Public m_l_LabourType As Long
Public m_str_LabourDefinition As String
Public m_str_WageGroup As String
Public m_str_RatePerHour As String
Public m_str_HoursPerWeek As String
Public m_str_OverheadType As String

Private Sub cmdCancel_Click()
    On Error GoTo Error_Handler
    
    Unload Me
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdCancel_Click", g_l_ErrorLineNumber
End Sub

Private Sub cmdSave_Click()
    Dim str_LabourDefinition As String
    Dim str_HoursPerWeek As String
    Dim l_HoursPerWeek As Long
    Dim RS As ADODB.Recordset
    Dim str_RBNumber As String
    'Dim str_OverheadType As String
    Dim dbl_OverheadType As Double
    Dim l_Result As Long
    Dim l_RetVal As Long
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    'Check data from the txtLabourDefinition edit-box.
    str_LabourDefinition = Trim(txtLabourDefinition.Text)
    l_HoursPerWeek = CLng(cboHoursPerWeek)
    dbl_OverheadType = CDbl(txtOverheadType.Text)
    
    'Now update record in the EMPL_CLASS table.
    l_Result = modDBHelper.UpdateEmplClass("CES_UPDATE.UPDATE_EMPL_CLASS", _
                                           l_RetVal, _
                                           m_l_LabourType, _
                                           cboWageGroup.Text, _
                                           str_LabourDefinition, _
                                           l_HoursPerWeek, _
                                           dbl_OverheadType)
    If l_Result = 0 Then
        
        ' Propagate the changes of the salary rates to each of the rebuilt part estimates
        Set RS = modDBHelper.RetrieveRBPToPropagateLAB("CES_INQUIRY.RETRIEVE_RBP_TO_PROPAGATE_LAB", _
                                                        str_LabourDefinition)
        If RS.RecordCount > 0 Then
            While Not RS.EOF
                str_RBNumber = RS.Fields.Item("mms_rebuilt_code")
             '   PropagateRebuiltPartChanges str_RBNumber, False
                RS.MoveNext
            Wend
        End If
        Set RS = Nothing
        
        Call SetDefaultCursor
        m_str_Msg = "Employee group is updated."
        MsgBox m_str_Msg, vbOKOnly + vbInformation
        'Refresh the grdEmployeeGroup grid in the frmEmployeeGroup form.
        Call frmEmployeeGroup.PopulateGrid
        
        'Add record to the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "Employee Group was updated in the System", _
                            m_l_LabourType, _
                            "LT", _
                            "Labour Definition ---> " + Trim(txtLabourDefinition.Text), _
                            "Wage Group ---> " + Trim(cboWageGroup.Text), _
                            "Rate Per Hour ---> " + Trim(txtRatePerHour.Text), _
                            "Hours Per Week ---> " + Trim(cboHoursPerWeek.Text), _
                            "Overhead Type ---> " + Trim(txtOverheadType.Text))
        
        Unload Me
    Else
        m_str_Msg = "Employee group is not updated. Please contact administrator."
        MsgBox m_str_Msg, vbOKOnly + vbInformation
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdSave_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
      Set RS = Nothing
    End If
End Sub

Private Sub Form_Load()
    Dim l_Count As Long
    
    On Error GoTo Error_Handler

    Call SetWaitCursor
    Call PopulateWageGroup

    txtLabourDefinition.Text = m_str_LabourDefinition
    txtRatePerHour.Text = m_str_RatePerHour
    txtOverheadType.Text = m_str_OverheadType
    txtOverheadType.Text = CStr(g_dbl_NonProductiveTimeAdj)
    
    For l_Count = 1 To 168 ' 7 days x 24 hours = 168 hours in one week.
        cboHoursPerWeek.AddItem CStr(l_Count)
    Next l_Count
    cboHoursPerWeek.Text = "40"

    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub PopulateWageGroup()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.RetrieveEmployeeSalaries("CES_INQUIRY.RETRIEVE_EMPLOYEE_SALARIES")
    
    Set cboWageGroup.RowSource = RS
    cboWageGroup.ListField = "WAGE GROUP"
    
    Set RS = Nothing
    cboWageGroup.Text = m_str_WageGroup

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateWageGroup", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub txtLabourDefinition_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtLabourDefinition edit-box to upper case.
    l_CursorPosition = txtLabourDefinition.SelStart
    str_Data = txtLabourDefinition.Text
    str_Data = UCase(str_Data)
    txtLabourDefinition.Text = str_Data
    txtLabourDefinition.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtLabourDefinition_KeyUp", g_l_ErrorLineNumber
End Sub
frmEditListOfBuses.frm :
VERSION 5.00
Begin VB.Form frmEditListOfBuses 
   BorderStyle     =   3  'Fixed Dialog
   Caption         =   "Edit Bus Description"
   ClientHeight    =   1785
   ClientLeft      =   45
   ClientTop       =   330
   ClientWidth     =   6390
   Icon            =   "frmEditListOfBuses.frx":0000
   LinkTopic       =   "Form1"
   MaxButton       =   0   'False
   MinButton       =   0   'False
   ScaleHeight     =   1785
   ScaleWidth      =   6390
   ShowInTaskbar   =   0   'False
   StartUpPosition =   2  'CenterScreen
   Begin VB.TextBox txtListID 
      Height          =   285
      Left            =   5670
      TabIndex        =   5
      TabStop         =   0   'False
      Top             =   1170
      Visible         =   0   'False
      Width           =   510
   End
   Begin VB.CommandButton cmdOK 
      Caption         =   "&OK"
      Height          =   375
      Left            =   1680
      TabIndex        =   1
      Top             =   1260
      Width           =   1215
   End
   Begin VB.CommandButton cmdCancel 
      Caption         =   "&Cancel"
      Height          =   375
      Left            =   3240
      TabIndex        =   2
      Top             =   1260
      Width           =   1215
   End
   Begin VB.TextBox txtNewDescription 
      Height          =   330
      Left            =   1710
      TabIndex        =   0
      Top             =   675
      Width           =   4335
   End
   Begin VB.TextBox txtCurrenDescription 
      BackColor       =   &H00E0E0E0&
      Enabled         =   0   'False
      Height          =   330
      Left            =   1710
      TabIndex        =   6
      TabStop         =   0   'False
      Top             =   180
      Width           =   4335
   End
   Begin VB.Label lblNewDescription 
      Caption         =   "New Description:"
      Height          =   240
      Left            =   135
      TabIndex        =   4
      Top             =   720
      Width           =   1320
   End
   Begin VB.Label lblCurrenDescription 
      Caption         =   "Current Description:"
      Height          =   240
      Left            =   135
      TabIndex        =   3
      Top             =   225
      Width           =   1455
   End
End
Attribute VB_Name = "frmEditListOfBuses"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Option Explicit
Private m_str_Msg As String

Private Sub cmdCancel_Click()
    On Error GoTo Error_Handler

    Unload Me

    Exit Sub
Error_Handler:
    modDBHelper.LogErrorToDB Me.Name, "cmdCancel_Click", Erl
End Sub

Private Sub cmdOK_Click()
    Dim RS As ADODB.Recordset
    Dim str_BusDescription As String
    Dim l_Result As Long
    Dim l_RetVal As Long
    
    On Error GoTo Error_Handler

    Call SetWaitCursor
    
    str_BusDescription = Trim(txtNewDescription.Text)
    'Check that data in the txtBusDescription edit-box is not empty.
    If str_BusDescription = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Bus Description can not be empty string."
        MsgBox m_str_Msg, vbOKOnly + vbInformation
        txtNewDescription.SetFocus
        Exit Sub
    End If
    
    'Check that entered bus description is not duplicated in the LIST_OF_BUSES table.
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.RetrieveBusDescription("CES_INQUIRY.RETRIEVE_BUS_DESCRIPTION", _
                                                str_BusDescription)

    If RS.RecordCount > 0 Then
        Call SetDefaultCursor
        Set RS = Nothing
        m_str_Msg = "Bus with the same description already exists. Data will not be save."
        MsgBox m_str_Msg, vbOKOnly + vbInformation
        txtNewDescription.SetFocus
        Exit Sub
    End If

    'Update row in the LIST_OF_BUSES table.
    l_Result = modDBHelper.UpdateListOfBuses("CES_UPDATE.UPDATE_LIST_OF_BUSES", _
                                             l_RetVal, _
                                             CLng(txtListID.Text), _
                                             str_BusDescription)
    If l_Result = 0 Then
        m_str_Msg = "Bus Description was changed."
        MsgBox m_str_Msg, vbOKOnly + vbInformation
    Else
        'During insertion some error  is happened.
    End If

    Call SetDefaultCursor
    Set RS = Nothing

    Call frmListOfBuses.FillGrid
    Unload Me

    Exit Sub
Error_Handler:
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    modDBHelper.LogErrorToDB Me.Name, "cmdOK_Click", Erl
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    Call SetDefaultCursor
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", Erl
End Sub

Private Sub txtNewDescription_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtNewDescription edit-box to upper case.
    l_CursorPosition = txtNewDescription.SelStart
    str_Data = txtNewDescription.Text
    str_Data = UCase(str_Data)
    txtNewDescription.Text = str_Data
    txtNewDescription.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    modDBHelper.LogErrorToDB Me.Name, "txtNewDescription_KeyUp", Erl
End Sub
frmMain.frm :
VERSION 5.00
Begin VB.MDIForm frmMain 
   AutoShowChildren=   0   'False
   BackColor       =   &H8000000C&
   Caption         =   "Bus Maintenance Cost Estimate System"
   ClientHeight    =   9015
   ClientLeft      =   225
   ClientTop       =   870
   ClientWidth     =   12705
   Icon            =   "frmMain.frx":0000
   LinkTopic       =   "MDIForm1"
   NegotiateToolbars=   0   'False
   StartUpPosition =   3  'Windows Default
   WindowState     =   2  'Maximized
   Begin VB.Menu mnuFile 
      Caption         =   "File"
      Begin VB.Menu mnuExit 
         Caption         =   "Exit"
      End
   End
   Begin VB.Menu mnuRebuiltParts 
      Caption         =   "Material Parts"
      Begin VB.Menu mnuPartsSearch 
         Caption         =   "Search Part"
      End
      Begin VB.Menu mnuAddRebuiltPart 
         Caption         =   "Add Rebuilt Part"
      End
      Begin VB.Menu mnuAddNonStockPart 
         Caption         =   "Add Non-Stock Coded Part"
      End
   End
   Begin VB.Menu mnuBusEstimate 
      Caption         =   "Vehicle Estimate"
      Begin VB.Menu mnuSearchBus 
         Caption         =   "Search Vehicle Estimate"
      End
      Begin VB.Menu mnuNewVehicleEstimate 
         Caption         =   "Add Vehicle Estimate"
      End
      Begin VB.Menu mnuAddOEMKit 
         Caption         =   "Add OEM Kit"
      End
   End
   Begin VB.Menu mnuMakeBuy 
      Caption         =   "Make/Buy"
      Begin VB.Menu mnuSearchMakeBuy 
         Caption         =   "Search Make vs. Buy"
      End
      Begin VB.Menu mnuAddMakeBuy 
         Caption         =   "Add Make vs. Buys"
      End
   End
   Begin VB.Menu mnuReports 
      Caption         =   "Reports"
      Begin VB.Menu mnuEstimateReports 
         Caption         =   "Estimate Reports"
         Begin VB.Menu mnuCostEstimate 
            Caption         =   "Cost Estimate"
            Begin VB.Menu mnuCostEstView 
               Caption         =   "View"
            End
         End
         Begin VB.Menu mnuVehicleSummary 
            Caption         =   "Vehicle Summary"
            Begin VB.Menu mnuViewVehicleCostEstimate 
               Caption         =   "View"
            End
         End
         Begin VB.Menu mnuMakeBuySummary 
            Caption         =   "Make vs. Buy Summary"
            Begin VB.Menu mnuViewMakeBuySummary 
               Caption         =   "View"
            End
         End
         Begin VB.Menu mnuOEMKits 
            Caption         =   "OEM Kits "
            Begin VB.Menu mnuViewOEMKits 
               Caption         =   "View"
            End
         End
      End
      Begin VB.Menu mnuAnalysisReports 
         Caption         =   "Analysis Reports"
         Begin VB.Menu mnuMBConversions 
            Caption         =   "Make vs. Buy Conversions"
            Begin VB.Menu mnuViewMBConversions 
               Caption         =   "View"
            End
         End
         Begin VB.Menu mnuCostVariance 
            Caption         =   "Cost Variance"
            Begin VB.Menu mnuViewCostVariance 
               Caption         =   "View"
            End
         End
      End
      Begin VB.Menu mnuArchivedEstimates 
         Caption         =   "Archived Reports"
         Begin VB.Menu unitCostSummary 
            Caption         =   "Unit Cost Summary"
            Begin VB.Menu unitCostSummerView 
               Caption         =   "View"
            End
         End
         Begin VB.Menu mnuMaterialsComparison 
            Caption         =   "Materials Comparison"
            Begin VB.Menu mnuViewMaterialsComparison 
               Caption         =   "View"
            End
         End
         Begin VB.Menu mnuLabourComparison 
            Caption         =   "Labour Comparison"
            Begin VB.Menu mnuViewLabourComparison 
               Caption         =   "View"
            End
         End
      End
   End
   Begin VB.Menu mnuAdministration 
      Caption         =   "Administration"
      Begin VB.Menu mnuLabourLists 
         Caption         =   "Labour Lists"
         Begin VB.Menu mnuLabourTaskDescription 
            Caption         =   "Labour Task Description"
         End
         Begin VB.Menu mnuLabourGroups 
            Caption         =   "Labour Type"
         End
         Begin VB.Menu mnuSalaryRates 
            Caption         =   "Salary Rates"
         End
      End
      Begin VB.Menu mnuMasterLists 
         Caption         =   "Master Lists"
         Begin VB.Menu mnuEngTransDiff 
            Caption         =   "Engines/Transmissions/Differentials"
         End
         Begin VB.Menu mnuMakeModelYear 
            Caption         =   "Year/Make/Model"
         End
      End
      Begin VB.Menu mnuUsers 
         Caption         =   "Users"
      End
      Begin VB.Menu mnuChangePassword 
         Caption         =   "Change Password"
      End
      Begin VB.Menu mnuListOfBuses 
         Caption         =   "List of Vehicles"
      End
      Begin VB.Menu mnuChangeSettings 
         Caption         =   "Change Settings"
      End
      Begin VB.Menu mnuSearchArchivedEstimates 
         Caption         =   "Search Archived Estimates"
      End
      Begin VB.Menu mnuHistoryLog 
         Caption         =   "History Log"
         Begin VB.Menu mnuEstimateHistoryLog 
            Caption         =   "Estimate History Log"
         End
         Begin VB.Menu mnuSettingsHistoryLog 
            Caption         =   "Settings History Log"
         End
      End
      Begin VB.Menu mnuUtilities 
         Caption         =   "Utilities"
         Begin VB.Menu mnuCleanNSCPTables 
            Caption         =   "Clean NSCP Tables"
         End
      End
   End
   Begin VB.Menu mnuWindow 
      Caption         =   "Window"
      WindowList      =   -1  'True
      Begin VB.Menu mnuTileHor 
         Caption         =   "Tile Horizontally"
      End
      Begin VB.Menu mnuTileVer 
         Caption         =   "Tile Vertically"
      End
      Begin VB.Menu mnuCascade 
         Caption         =   "Cascade"
      End
      Begin VB.Menu mnuArrange 
         Caption         =   "Arrange Icons"
      End
   End
   Begin VB.Menu mnuHelp 
      Caption         =   "Help (Dev)"
      Begin VB.Menu mnuCESHelp 
         Caption         =   "CES Help"
      End
      Begin VB.Menu mnuViewSOP 
         Caption         =   "Open S.O.P. Viewer"
      End
      Begin VB.Menu mnuVersionInfo 
         Caption         =   "Version Info"
      End
      Begin VB.Menu mnuAbout 
         Caption         =   "About"
      End
   End
End
Attribute VB_Name = "frmMain"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
'=====================================================================
'frmMain.frm
'
'Used as the main navigation of the application.  User can access a
'variety of options/forms from the menu.
'
'=====================================================================

Option Explicit

Private Const SW_SHOWMAXIMIZED As Long = 3
Private m_str_Msg As String

'Retrieves the user's access level and restricts the user according to
'their specified access level
Private Sub UserPermissions()
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel <> 10 Then
        'Level 10 is fo programmers only!!!!
        mnuUtilities.Visible = False
    End If
    If g_l_AccessLevel = 4 Then
        'No restrictions for users with Level 4.
    ElseIf g_l_AccessLevel = 3 Then
        
        'Menu <File> and all it's submenues are enabled.
        'Menu <Rebuilt Parts> and all it's submenues are enabeld.
        'Menu <Bus Estimate> and all it's submenues are enabeld.
        'Menu <Make/Buy> and all it's submenues are enabeld.
        'Menu <S.O.P.> and all it's submenues are enabeld.
        'Menu <Reports> and all it's submenues are enabeld.
        'Menu <Archived Estimates> and all it's submenues are enabled.
        'Menu <Administration>. Only submenu <Change Password> and <Change Settings>
        'are enabled.
        mnuLabourLists.Enabled = False
        mnuMasterLists.Enabled = False
        
        mnuUsers.Enabled = False
        mnuListOfBuses.Enabled = False
        mnuHistoryLog.Enabled = False

    ElseIf g_l_AccessLevel = 2 Then
        'Menu <File> and all it's submenues are enabled.
        'Menu <Rebuilt Parts>. Only submenu <Search Parts> is enabled.
        mnuAddRebuiltPart.Enabled = False
        mnuAddNonStockPart.Enabled = False
        'Menu <Bus Estimate>. Only submenu <Search Bus Estimates> is enabled.
        mnuNewVehicleEstimate.Enabled = False
        mnuAddOEMKit.Enabled = False
        'Menu <Make/Buy>. Only submenu <Search Make vs. Buy> is enabled.
        mnuAddMakeBuy.Enabled = False
        'Menu <S.O.P.> and all it's submenues are enabeld.
        'Menu <Reports> and all it's submenues are enabeld.
        'Menu <Administration>. Only submenu <Change Password> and <Change Settings>
        'are enabled.
        mnuLabourLists.Enabled = False
        mnuMasterLists.Enabled = False
        
        mnuUsers.Enabled = False
        mnuListOfBuses.Enabled = False
        mnuHistoryLog.Enabled = False
        mnuSearchArchivedEstimates.Enabled = False
    ElseIf g_l_AccessLevel = 1 Then
        'Menu <File> and all it's submenues are enabled.
        mnuMakeBuy.Enabled = False
        mnuRebuiltParts.Enabled = False
        mnuBusEstimate.Enabled = False
        mnuHelp.Enabled = False
        mnuAnalysisReports.Enabled = False
        mnuArchivedEstimates.Enabled = False
        mnuMakeBuySummary.Enabled = False
        mnuOEMKits.Enabled = False
        

        'Menu <Rebuilt Parts>. Only submenu <Search Parts> is enabled.
        mnuAddRebuiltPart.Enabled = False
        mnuAddNonStockPart.Enabled = False
        'Menu <Bus Estimate>. Only submenu <Search Bus Estimates> is enabled.
        mnuNewVehicleEstimate.Enabled = False
        mnuAddOEMKit.Enabled = False
        'Menu <Make/Buy> and all submenues are disabled.
        mnuMakeBuy.Enabled = False
        'Menu <S.O.P.> and all it's submenues are enabled.
        
        'Menu <Administration>. Only submenu <Change Password> is enabled.
        mnuChangeSettings.Enabled = False
        mnuLabourLists.Enabled = False
        mnuMasterLists.Enabled = False
        mnuUsers.Enabled = False
        mnuListOfBuses.Enabled = False
        
        'Menu <Reports> and all it's submenues are enabled.
        mnuReports.Enabled = True
        mnuHistoryLog.Enabled = False
        mnuSearchArchivedEstimates.Enabled = False
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "UserPermissions", g_l_ErrorLineNumber
End Sub

Private Sub MDIForm_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    Dim l_Count As Long
    Dim str_FormName As String

    On Error GoTo Error_Handler
    
    Call SetDefaultCursor
    
    'Close all not closed forms, except frmMain.
    Dim frmToClose As Form
    For Each frmToClose In Forms
        If frmToClose.Name <> "frmMain" Then
            If Not frmToClose Is Nothing Then Unload frmToClose
        End If
    Next
    
    If Not g_Conn Is Nothing Then
        Set g_Conn = Nothing
    End If
    'Destroy the cursors
    Call DestroyCursors
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "MDIForm_QueryUnload", g_l_ErrorLineNumber
End Sub

Private Sub mnuAbout_Click()
    On Error GoTo Error_Handler
    
    frmAbout.Show vbModal
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuAbout_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuAddMakeBuy_Click()
    On Error GoTo Error_Handler
    
    frmMakeBuy.txtMakeBuyNumber.Enabled = True
    frmMakeBuy.Show vbModal
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuAddMakeBuy_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuAddNonStockPart_Click()
    On Error GoTo Error_Handler
    
    If frmAddNonStockCodedPart.WindowState = 1 Or _
       frmAddNonStockCodedPart.WindowState = 2 Then
        frmAddNonStockCodedPart.WindowState = 0
    End If
    frmAddNonStockCodedPart.Height = 2805
    frmAddNonStockCodedPart.Width = 9105
    frmAddNonStockCodedPart.Show

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuAddNonStockPart_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuAddOEMKit_Click()
    On Error GoTo Error_Handler
    
    frmAddOEMKit.Show vbModal

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuAddRebuiltPart_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuAddRebuiltPart_Click()
    On Error GoTo Error_Handler
    
    If frmAddRebuiltPart.WindowState = 1 Or frmAddRebuiltPart.WindowState = 2 Then
        frmAddRebuiltPart.WindowState = 0
    End If
    
    frmAddRebuiltPart.Show vbModal

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuAddRebuiltPart_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuCESHelp_Click()
    On Error GoTo Error_Handler

    frmHelp.Show vbModal

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuCESHelp_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuChangePassword_Click()
    On Error GoTo Error_Handler
    
    frmPassword.Show vbModal

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuChangePassword_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuChangeSettings_Click()
    On Error GoTo Error_Handler

    frmChangeSettings.Show vbModal

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuChangeSettings_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuCostEstSendTo_Click()
    On Error GoTo Error_Handler
    
    Call SendEmail

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuCostEstSendTo_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuCleanNSCPTables_Click()
    On Error GoTo Error_Handler

    frmUtilities.Show vbModal

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuCleanNSCPTables_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuCostEstView_Click()
    On Error GoTo Error_Handler

    frmParametersForReport.Show

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuCostEstView_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuEngTransDiff_Click()
    On Error GoTo Error_Handler

    frmVehEquipment.Show

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuEngTransDiff_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuEstimateHistoryLog_Click()
    On Error GoTo Error_Handler
    
    'Close the Audit form if it is opened.
    If Not frmViewAudit Is Nothing Then
        Unload frmViewAudit
    End If
    
    frmViewAudit.m_b_FromAdministration = True
    frmViewAudit.Caption = frmViewAudit.Caption + " - Estimates"
    frmViewAudit.Show

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuEstimateHistoryLog_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuExit_Click()
    On Error GoTo Error_Handler
    
    Unload Me

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuExit_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuLabourGroups_Click()
    On Error GoTo Error_Handler
    
    frmEmployeeGroup.Show

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuLabourDefinition_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuLabourTaskDescription_Click()
    On Error GoTo Error_Handler
    
    frmLabourTaskDescription.Show

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuLabourTaskDefinitions_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuListOfBuses_Click()
    On Error GoTo Error_Handler

    frmListOfBuses.Show
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuListOfBuses_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuMailRecipient_Click()
    On Error GoTo Error_Handler
    
    Call SendEmail

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuMailRecipient_Click", g_l_ErrorLineNumber
End Sub

Private Sub MDIForm_Load()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    Call UserPermissions
    
    g_dbl_NonProductiveTimeAdj = 1#

    Set RS = New ADODB.Recordset
    Set RS = _
        modDBHelper.RetrieveCESSettings("CES_INQUIRY.RETRIEVE_CES_SETTI", "NON_PRODUCTIVE_ADJUSTMENT")
    If RS.RecordCount = 1 Then
        g_dbl_NonProductiveTimeAdj = CDbl(Replace(RS.Fields.Item("VALUE"), ",", "."))
    Else
        m_str_Msg = "Can not retrieve NON_PRODUCTIVE_ADJUSTMENT from the CES_SETTINGS "
        m_str_Msg = m_str_Msg + "table. Please contact Supervisor."
        MsgBox m_str_Msg, vbCritical + vbExclamation
    End If

    If g_str_UserName = "ALEX" Then
        mnuSettingsHistoryLog.Visible = True
    Else
        mnuSettingsHistoryLog.Visible = False
    End If

    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "MDIForm_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub mnuMakeModelYear_Click()
    On Error GoTo Error_Handler
    
    If frmAddVehicleType.WindowState = 1 Or frmAddVehicleType.WindowState = 2 Then
        frmAddVehicleType.WindowState = 0
    End If
    frmAddVehicleType.Show

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuMakeModelYear_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuNewVehicleEstimate_Click()
    On Error GoTo Error_Handler

    If frmAddVehCostEstimate.WindowState = 1 Or frmAddVehCostEstimate.WindowState = 2 Then
        frmAddVehCostEstimate.WindowState = 0
    End If
 
    frmAddVehCostEstimate.Height = 3420
    frmAddVehCostEstimate.Width = 9030
    frmAddVehCostEstimate.Show vbModal

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuNewVehicleEstimate_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuPartsSearch_Click()
    On Error GoTo Error_Handler

    If frmSearchPart.WindowState = 1 Or frmSearchPart.WindowState = 2 Then
        frmSearchPart.WindowState = 0
    End If
    frmSearchPart.Show

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuPartsSearch_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuSalaryRates_Click()
    On Error GoTo Error_Handler

    frmSalaryRates.Show

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuSalaryRates_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuSearchArchivedEstimates_Click()
    On Error GoTo Error_Handler

    frmArchivedHistory.Show
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuSearchArchivedEstimates_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuSearchBus_Click()
    On Error GoTo Error_Handler

    If frmSearchVehEstimate.WindowState = 1 Or frmSearchVehEstimate.WindowState = 2 Then
        frmSearchVehEstimate.WindowState = 0
    End If
    
    frmSearchVehEstimate.Show

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuSearchBus_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuSearchMakeBuy_Click()
    On Error GoTo Error_Handler

    frmSearchMB.Show

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuSearchMakeBuy_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuSettingsHistoryLog_Click()
    On Error GoTo Error_Handler

    frmViewSettingsHistoryLog.Show
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuSettingsHistoryLog_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuTileHor_Click()
    On Error GoTo Error_Handler
    
    Me.Arrange vbTileHorizontal
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuTileHor_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuTileVer_Click()
    On Error GoTo Error_Handler
    
    Me.Arrange vbTileVertical
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuTileVer_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuCascade_Click()
    On Error GoTo Error_Handler
    
    Me.Arrange vbCascade
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuCascade_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuArrange_Click()
    On Error GoTo Error_Handler
    
    Me.Arrange vbArrangeIcons
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuArrange_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuUsers_Click()
    On Error GoTo Error_Handler
    
    frmUsers.Show

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuUsers_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuVersionInfo_Click()
On Error GoTo Error_Handler
  
    frmVersionInfo.Show
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuViewCostVariance_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuViewCostVariance_Click()
On Error GoTo Error_Handler
  
    showCostVarianceReport
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuViewCostVariance_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuViewLabourComparison_Click()
On Error GoTo Error_Handler

    frmParamLabourComparison.Show

   Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuViewLabourComparison_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuViewMakeBuySummary_Click()
    On Error GoTo Error_Handler

    frmParamMakeBuyReport.Show

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuViewMakeBuySummary_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuViewMaterialsComparison_Click()
On Error GoTo Error_Handler

    frmParamMaterialsComparison.Show

   Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuViewMaterialsComparison_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuViewMBConversions_Click()
On Error GoTo Error_Handler

    frmParamMBConversionsReport.Show

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuViewMBConversions_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuViewOEMKits_Click()
On Error GoTo Error_Handler

    frmParamOEMKitsReport.Show

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuViewOEMKits_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuViewSOP_Click()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.RetrieveCESSettings("CES_INQUIRY.RETRIEVE_CES_SETTI", _
                                             "SOP_FILE_NAME")
    
    If RS.EOF = False Then
        'Open the SOP PDF File using the default PDF viewer
        ShellExecute GetDesktopWindow, _
                     "Open", _
                     RS.Fields.Item("VALUE"), _
                     "", _
                     "C:\", _
                     SW_SHOWMAXIMIZED
    End If
    
    Set RS = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuViewSOP_Click", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub mnuViewVehicleCostEstimate_Click()
    On Error GoTo Error_Handler

    frmParamVehicleReport.Show

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuViewVehicleCostEstimate_Click", g_l_ErrorLineNumber
End Sub

Private Sub unitCostSummerView_Click()
 Dim RS As ADODB.Recordset
    On Error GoTo Error_Handler
        
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.RetrieveCESSettings("CES_INQUIRY.RETRIEVE_CES_SETTI", _
                                             "UNIT_COST_SUMMARY_PATH")
    
    If RS.EOF = False Then
        'Open the Unit Cost Excel File using the default viewer
        ShellExecute GetDesktopWindow, _
                     "Open", _
                     RS.Fields.Item("VALUE"), _
                     "", _
                     "C:\", _
                     SW_SHOWMAXIMIZED
    End If
    
    Set RS = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "unitCostSummerView_Click", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

frmMakeBuy.frm :
VERSION 5.00
Begin VB.Form frmMakeBuy 
   BorderStyle     =   3  'Fixed Dialog
   Caption         =   "Make vs. Buy"
   ClientHeight    =   7575
   ClientLeft      =   45
   ClientTop       =   330
   ClientWidth     =   10980
   HelpContextID   =   1
   Icon            =   "frmMakeBuy.frx":0000
   LinkTopic       =   "Form1"
   MaxButton       =   0   'False
   MinButton       =   0   'False
   ScaleHeight     =   7575
   ScaleWidth      =   10980
   ShowInTaskbar   =   0   'False
   StartUpPosition =   2  'CenterScreen
   WhatsThisHelp   =   -1  'True
   Begin VB.CommandButton cmdPrintDocument 
      Caption         =   "Print MS Word Document"
      Height          =   300
      Left            =   5100
      TabIndex        =   27
      Top             =   7200
      Width           =   2040
   End
   Begin VB.CommandButton cmdAdd 
      Caption         =   "Add"
      Height          =   300
      Left            =   4080
      TabIndex        =   26
      Top             =   7200
      Width           =   960
   End
   Begin VB.Frame fraRecommendation 
      Caption         =   "Recommendation"
      Height          =   495
      Left            =   135
      TabIndex        =   30
      Top             =   6660
      Width           =   10815
      Begin VB.OptionButton optRecommendation4 
         Caption         =   "4"
         Height          =   255
         Left            =   2760
         TabIndex        =   25
         Tag             =   "23"
         ToolTipText     =   "Recommendation: 4"
         Top             =   180
         Visible         =   0   'False
         WhatsThisHelpID =   1
         Width           =   975
      End
      Begin VB.OptionButton optRecommendation3 
         Caption         =   "3"
         Height          =   255
         Left            =   1920
         TabIndex        =   24
         Tag             =   "22"
         ToolTipText     =   "Recommendation: 3"
         Top             =   180
         WhatsThisHelpID =   1
         Width           =   855
      End
      Begin VB.OptionButton optRecommendation2 
         Caption         =   "2"
         Height          =   255
         Left            =   1080
         TabIndex        =   23
         Tag             =   "21"
         ToolTipText     =   "Recommendation: 2"
         Top             =   180
         WhatsThisHelpID =   1
         Width           =   735
      End
      Begin VB.OptionButton optRecommendation1 
         Caption         =   "1"
         Height          =   255
         Left            =   240
         TabIndex        =   22
         Tag             =   "20"
         ToolTipText     =   "Recommendation: 1"
         Top             =   180
         Value           =   -1  'True
         WhatsThisHelpID =   1
         Width           =   855
      End
   End
   Begin VB.Frame fraCost 
      Caption         =   "Cost"
      Height          =   1725
      Left            =   150
      TabIndex        =   29
      Top             =   4935
      Width           =   10815
      Begin VB.CheckBox chkbxUseManualEntry 
         Caption         =   "Use Manually Entered Price"
         Height          =   240
         Left            =   7305
         TabIndex        =   51
         Top             =   1020
         Width           =   2850
      End
      Begin VB.TextBox txtBuyNewCost 
         BackColor       =   &H80000018&
         BeginProperty DataFormat 
            Type            =   1
            Format          =   """$""#,##0.00;(""$""#,##0.00)"
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   2
         EndProperty
         Height          =   285
         Left            =   4305
         TabIndex        =   21
         Tag             =   "19"
         ToolTipText     =   "Buy New Cost"
         Top             =   1020
         WhatsThisHelpID =   1
         Width           =   2805
      End
      Begin VB.TextBox txtRemanufactured 
         BeginProperty DataFormat 
            Type            =   1
            Format          =   """$""#,##0.00;(""$""#,##0.00)"
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   2
         EndProperty
         Height          =   285
         Left            =   4305
         TabIndex        =   20
         Tag             =   "18"
         ToolTipText     =   "Remanufactured Exchange Cost"
         Top             =   630
         WhatsThisHelpID =   1
         Width           =   2805
      End
      Begin VB.TextBox txtInternalRebuilt 
         BackColor       =   &H80000018&
         BeginProperty DataFormat 
            Type            =   1
            Format          =   """$""#,##0.00;(""$""#,##0.00)"
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   2
         EndProperty
         Enabled         =   0   'False
         Height          =   285
         Left            =   4305
         TabIndex        =   19
         Tag             =   "17"
         Text            =   "0.00"
         ToolTipText     =   "Internal Rebuilt Cost Estimate"
         Top             =   255
         WhatsThisHelpID =   1
         Width           =   2805
      End
      Begin VB.TextBox txtExternalRebuilt 
         BackColor       =   &H80000018&
         BeginProperty DataFormat 
            Type            =   1
            Format          =   """$""#,##0.00;(""$""#,##0.00)"
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   2
         EndProperty
         ForeColor       =   &H00FFFFFF&
         Height          =   285
         Left            =   4305
         TabIndex        =   18
         Tag             =   "16"
         ToolTipText     =   "External Rebuilt Cost Estimate"
         Top             =   1365
         Visible         =   0   'False
         WhatsThisHelpID =   1
         Width           =   2805
      End
      Begin VB.Label lblInternalRebuilt 
         Caption         =   "1. Internal Rebuilt Cost (See Attached Estimate)"
         Height          =   255
         Left            =   105
         TabIndex        =   50
         Top             =   270
         Width           =   3795
      End
      Begin VB.Label lblBuyNewCost 
         Caption         =   "3. Buy New Cost"
         Height          =   255
         Left            =   105
         TabIndex        =   49
         Top             =   990
         Width           =   1515
      End
      Begin VB.Label lblRemanufactured 
         Caption         =   "2. Remanufactured Exchange Cost (If Applicable)"
         Height          =   255
         Left            =   105
         TabIndex        =   48
         Top             =   630
         Width           =   3915
      End
      Begin VB.Label lblExternalRebuiltCost 
         Caption         =   "OLD - REMOVED External Rebuilt Cost (See Attached Estimate)"
         Height          =   255
         Left            =   120
         TabIndex        =   43
         Top             =   1380
         Visible         =   0   'False
         Width           =   4545
      End
   End
   Begin VB.Frame fraMakeBuyImformation 
      Height          =   4455
      Left            =   180
      TabIndex        =   28
      Top             =   495
      Width           =   10815
      Begin VB.TextBox txtJobNumber 
         Height          =   285
         Left            =   2880
         MaxLength       =   25
         TabIndex        =   12
         Tag             =   "13"
         ToolTipText     =   "Bench Number"
         Top             =   3720
         WhatsThisHelpID =   1
         Width           =   2805
      End
      Begin VB.TextBox txtCoreCost 
         Height          =   285
         Left            =   2880
         TabIndex        =   8
         Tag             =   "9"
         Text            =   "0.00"
         ToolTipText     =   "Core Code"
         Top             =   2400
         WhatsThisHelpID =   1
         Width           =   2805
      End
      Begin VB.CommandButton cmdReload 
         Caption         =   "Reload"
         Height          =   345
         Left            =   6075
         TabIndex        =   15
         Top             =   180
         Width           =   1305
      End
      Begin VB.CommandButton cmdClearSelection 
         Caption         =   "Clear Selection"
         Height          =   345
         Left            =   9225
         TabIndex        =   16
         Top             =   180
         Width           =   1305
      End
      Begin VB.ListBox lstListOfBuses 
         Height          =   3375
         Left            =   5940
         MultiSelect     =   2  'Extended
         TabIndex        =   17
         Tag             =   "24"
         Top             =   615
         Width           =   4740
      End
      Begin VB.TextBox txtSOP 
         Height          =   285
         Left            =   2880
         MaxLength       =   25
         TabIndex        =   11
         Tag             =   "12"
         ToolTipText     =   "Bench Number"
         Top             =   3375
         WhatsThisHelpID =   1
         Width           =   2805
      End
      Begin VB.OptionButton optNo 
         Caption         =   "No"
         Height          =   255
         Left            =   3615
         TabIndex        =   14
         Tag             =   "15"
         ToolTipText     =   "Sample Provided: No"
         Top             =   4095
         WhatsThisHelpID =   1
         Width           =   615
      End
      Begin VB.OptionButton optYes 
         Caption         =   "Yes"
         Height          =   255
         Left            =   2895
         TabIndex        =   13
         Tag             =   "14"
         ToolTipText     =   "Sample Provided: Yes"
         Top             =   4095
         Value           =   -1  'True
         WhatsThisHelpID =   1
         Width           =   615
      End
      Begin VB.TextBox txtBenchNumber 
         Height          =   285
         Left            =   2880
         MaxLength       =   25
         TabIndex        =   10
         Tag             =   "11"
         ToolTipText     =   "Bench Number"
         Top             =   3060
         WhatsThisHelpID =   1
         Width           =   2805
      End
      Begin VB.TextBox txtProjectedAnnualUsage 
         Height          =   285
         Left            =   2880
         MaxLength       =   25
         TabIndex        =   9
         Tag             =   "10"
         ToolTipText     =   "Projected Annual Usage"
         Top             =   2745
         WhatsThisHelpID =   1
         Width           =   2805
      End
      Begin VB.TextBox txtCoreCode 
         Height          =   285
         Left            =   2880
         MaxLength       =   25
         TabIndex        =   7
         Tag             =   "8"
         ToolTipText     =   "Core Code"
         Top             =   2070
         WhatsThisHelpID =   1
         Width           =   2805
      End
      Begin VB.TextBox txtRebuildCode 
         Height          =   285
         Left            =   2880
         MaxLength       =   25
         TabIndex        =   6
         Tag             =   "7"
         ToolTipText     =   "Rebuild Code"
         Top             =   1755
         WhatsThisHelpID =   1
         Width           =   2805
      End
      Begin VB.TextBox txtBuyCode 
         Height          =   285
         Left            =   2880
         MaxLength       =   25
         TabIndex        =   5
         Tag             =   "6"
         ToolTipText     =   "Buy Code"
         Top             =   1440
         WhatsThisHelpID =   1
         Width           =   2805
      End
      Begin VB.TextBox txtVendorPartNumber 
         Height          =   285
         Left            =   2880
         MaxLength       =   25
         TabIndex        =   4
         Tag             =   "5"
         ToolTipText     =   "Vendor Part Number"
         Top             =   1125
         WhatsThisHelpID =   1
         Width           =   2805
      End
      Begin VB.TextBox txtNumberOfBus 
         Height          =   285
         Left            =   2880
         MaxLength       =   10
         TabIndex        =   3
         Tag             =   "4"
         ToolTipText     =   "Number Of Bus Using Component"
         Top             =   810
         WhatsThisHelpID =   1
         Width           =   2805
      End
      Begin VB.TextBox txtBriefDescription 
         Height          =   285
         Left            =   2880
         MaxLength       =   50
         TabIndex        =   2
         Tag             =   "3"
         ToolTipText     =   "Brief Description"
         Top             =   495
         WhatsThisHelpID =   1
         Width           =   2805
      End
      Begin VB.TextBox txtKeyword 
         Height          =   285
         HelpContextID   =   1
         Left            =   2880
         MaxLength       =   25
         TabIndex        =   1
         Tag             =   "2"
         ToolTipText     =   "Key Word"
         Top             =   180
         WhatsThisHelpID =   1
         Width           =   2805
      End
      Begin VB.Label lblProjectedAnnualUsage 
         Alignment       =   1  'Right Justify
         Caption         =   "Projected Annual Usage"
         Height          =   195
         Left            =   600
         TabIndex        =   47
         Top             =   2760
         Width           =   2055
      End
      Begin VB.Label lblBenchNumber 
         Alignment       =   1  'Right Justify
         Caption         =   "Bench Number"
         Height          =   255
         Left            =   1200
         TabIndex        =   46
         Top             =   3060
         Width           =   1455
      End
      Begin VB.Label lblSOPNumber 
         Alignment       =   1  'Right Justify
         Caption         =   "S.O.P. #"
         Height          =   255
         Left            =   1140
         TabIndex        =   45
         Top             =   3420
         Width           =   1515
      End
      Begin VB.Label lblSampleProvided 
         Alignment       =   1  'Right Justify
         Caption         =   "Sample Provided"
         Height          =   255
         Left            =   1380
         TabIndex        =   44
         Top             =   4080
         Width           =   1275
      End
      Begin VB.Label lblCoreCode 
         Alignment       =   1  'Right Justify
         Caption         =   "Core Code"
         Height          =   255
         Left            =   1080
         TabIndex        =   42
         Top             =   2100
         Width           =   1575
      End
      Begin VB.Label lblRebuildCode 
         Alignment       =   1  'Right Justify
         Caption         =   "Rebuild Code"
         Height          =   255
         Left            =   1020
         TabIndex        =   41
         Top             =   1800
         Width           =   1635
      End
      Begin VB.Label lblMMSBuyCode 
         Alignment       =   1  'Right Justify
         Caption         =   "MMS Buy Code"
         Height          =   255
         Left            =   1140
         TabIndex        =   40
         Top             =   1500
         Width           =   1515
      End
      Begin VB.Label lblKeyWord 
         Alignment       =   1  'Right Justify
         Caption         =   "Key Word"
         Height          =   255
         Left            =   1200
         TabIndex        =   39
         Top             =   240
         Width           =   1455
      End
      Begin VB.Label lblDescription 
         Alignment       =   1  'Right Justify
         Caption         =   "Description"
         Height          =   255
         Index           =   2
         Left            =   1320
         TabIndex        =   38
         Top             =   540
         Width           =   1335
      End
      Begin VB.Label lblVendorPartNumber 
         Alignment       =   1  'Right Justify
         Caption         =   "Vendor Part Number"
         Height          =   255
         Left            =   240
         TabIndex        =   37
         Top             =   1140
         Width           =   2415
      End
      Begin VB.Label lblNumberOfBusUsingComponent 
         Alignment       =   1  'Right Justify
         Caption         =   "Number Of Vehicle Using Component"
         Height          =   195
         Left            =   0
         TabIndex        =   36
         Top             =   840
         Width           =   2655
      End
      Begin VB.Label lblJobNumber 
         Caption         =   "Job Number"
         Height          =   195
         Left            =   1740
         TabIndex        =   34
         Tag             =   "13"
         Top             =   3720
         Width           =   915
      End
      Begin VB.Label lblCoreCost 
         Alignment       =   1  'Right Justify
         Caption         =   "Core Cost"
         Height          =   195
         Left            =   840
         TabIndex        =   33
         Tag             =   "9"
         Top             =   2460
         Width           =   1815
      End
      Begin VB.Label lblListOfBuses 
         Caption         =   "List of Vehicles"
         Height          =   240
         Left            =   7710
         TabIndex        =   32
         Top             =   225
         Width           =   1185
      End
   End
   Begin VB.Frame fraMakeVsBuy 
      Height          =   540
      Left            =   180
      TabIndex        =   31
      Top             =   -30
      Width           =   10755
      Begin VB.TextBox txtMakeBuyNumber 
         Alignment       =   2  'Center
         Enabled         =   0   'False
         Height          =   285
         Left            =   2880
         MaxLength       =   25
         TabIndex        =   0
         Tag             =   "1"
         ToolTipText     =   "Make vs Buy #"
         Top             =   180
         WhatsThisHelpID =   1
         Width           =   2805
      End
      Begin VB.Label lblMakeVsBuy 
         Caption         =   "Make Vs. Buy #"
         Height          =   195
         Left            =   1515
         TabIndex        =   35
         Tag             =   "1"
         Top             =   210
         Width           =   1275
      End
   End
End
Attribute VB_Name = "frmMakeBuy"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
'File location must be put in the table for retrieval
Option Explicit

Private m_str_Msg As String
'All public variables (i.e. variables set up from other form) in this form
'should be deinitialize in the Query_Unload event
Public m_str_MBNumber As String
Public m_str_ArchiveID As String
Dim objWdApp As Word.Application
Private m_str_OptSample As String
Private m_str_OptRecommend As String
Private m_var_RowID As Variant
Private m_l_Selected() As Long
Private m_l_ArraySize As Long

Private m_str_BusType As String
Public m_str_AuditReference As String
'Only up to 10 selected buses from the lstListOfBuses list-box will be saved into the
'AUDIT_MODIFY_HISTORY table. If you want increase this quantity, you should increase
'next constant variable, and make changes in the InsertIntoAuditModifyHistory call.
Private Const m_const_l_SelectedBusesSize As Long = 9
Private m_str_SelectedBuses() As String

Private Sub Check1_Click()

End Sub


Private Sub chkbxUseManualEntry_Click()
    Dim RS As ADODB.Recordset
    On Error GoTo Error_Handler
        Set RS = New ADODB.Recordset
        Set RS = modDBHelper.RetrieveMB("CES_INQUIRY.RETRIEVE_MB")
    
        RS.Filter = "MB_NUMBER = '" + m_str_MBNumber + "'"
        If chkbxUseManualEntry.Value = 1 Then
            txtBuyNewCost.Text = Format(RS.Fields.Item("BUY_NEW_COST"), "currency")
        End If
        Set RS = Nothing
        Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdAdd_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub cmdAdd_Click()
    Dim str_OptRecommend As String
    Dim str_OptSample As String
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim l_count As Long
    Dim l_Count1 As Long
    Dim str_MakeBuyNumber As String
    Dim str_Keyword As String
    Dim str_BriefDescription As String
    Dim str_NumberOfBus As String
    Dim str_VendorPartNumber As String
    Dim str_BuyCode As String
    Dim str_CoreCost As String
    Dim str_JobNumber As String
    Dim str_SampleProvided As String
    Dim strRecommendation As String
    
    On Error GoTo Error_Handler
    
    'Make sure that user typed something into the txtMakeBuyNumber edit-box.
    str_MakeBuyNumber = Trim(txtMakeBuyNumber.Text)
    If str_MakeBuyNumber = "" Then
        m_str_Msg = "Please provide Make or Buy Number."
        MsgBox m_str_Msg
        txtMakeBuyNumber.SetFocus
        Exit Sub
    End If
    
    'Make sure that user typed something into the txtKeyword edit-box.
    str_Keyword = Trim(txtKeyword.Text)
    If str_Keyword = "" Then
        m_str_Msg = "Please provide Keyword."
        MsgBox m_str_Msg
        txtKeyword.SetFocus
        Exit Sub
    End If
    
    'Make sure that user typed something into the txtBriefDescription edit-box.
    str_BriefDescription = Trim(txtBriefDescription.Text)
    If str_BriefDescription = "" Then
        m_str_Msg = "Please provide Brief Description."
        MsgBox m_str_Msg
        txtBriefDescription.SetFocus
        Exit Sub
    End If
    
    'Make sure that user typed something into the txtNumberOfBus edit-box.
    str_NumberOfBus = Trim(txtNumberOfBus.Text)
    If str_NumberOfBus = "" Then
        m_str_Msg = "Please provide Number Of Vehicle Using Component."
        MsgBox m_str_Msg
        txtNumberOfBus.SetFocus
        Exit Sub
    End If
    
    'Make sure that user typed something into the txtVendorPartNumber edit-box.
    str_VendorPartNumber = Trim(txtVendorPartNumber.Text)
    If str_VendorPartNumber = "" Then
        m_str_Msg = "Please provide Vendor Part Number."
        MsgBox m_str_Msg
        txtVendorPartNumber.SetFocus
        Exit Sub
    End If
    
    str_BuyCode = Trim(txtBuyCode.Text)
    
    'Make sure that user choused at least one bus from the lstListOfBuses list-box.
    If lstListOfBuses.ListCount > 0 Then
        If lstListOfBuses.SelCount = 0 Then
            m_str_Msg = "Please choose Vehicle."
            MsgBox m_str_Msg
            lstListOfBuses.SetFocus
            Exit Sub
        End If
    Else
        'No items in the lstListOfBuses list-box. But user should choose some bus.
        m_str_Msg = "No vehicles to choose from. Make Buy will not be "
        m_str_Msg = m_str_Msg + "added. Report this error to Supervisor."
        MsgBox m_str_Msg
        lstListOfBuses.SetFocus
        Exit Sub
    End If
    
    If optYes = True Then
        str_OptSample = "Y"
    Else
        str_OptSample = "N"
    End If
    
    If optRecommendation1 = True Then
        str_OptRecommend = "1"
    ElseIf optRecommendation2 = True Then
        str_OptRecommend = "2"
    ElseIf optRecommendation3 = True Then
        str_OptRecommend = "3"
    Else
        str_OptRecommend = "4"
    End If
    
    'If user typed some data into the txtCoreCost edit-box, this data should be double.
    str_CoreCost = Trim(txtCoreCost)
    If str_CoreCost = "" Then
        m_str_Msg = "Core Cost should be a positive number."
        MsgBox m_str_Msg
        txtCoreCost.SetFocus
        Exit Sub
    End If
    
    If IsNumeric(str_CoreCost) = False Then
        m_str_Msg = "Core Cost should be a positive number."
        MsgBox m_str_Msg
        txtCoreCost.SetFocus
        Exit Sub
    End If
    'Check that Core Cost > 0.
    If CDbl(str_CoreCost) < 0 Then
        m_str_Msg = "Core Cost should be a positive number."
        MsgBox m_str_Msg
        txtCoreCost.SetFocus
        Exit Sub
    End If
    str_CoreCost = "$" + CStr(CDbl(str_CoreCost))
    txtCoreCost.Text = str_CoreCost
    
    'Data from the txtJobNumber is not reqiured (can be empty). But, if data is provided
    'it should be a positive number (long).
    str_JobNumber = Trim(txtJobNumber.Text)
    If str_JobNumber <> "" Then
        If IsNumeric(str_JobNumber) = False Then
            m_str_Msg = "Job Number should be a positive number."
            MsgBox m_str_Msg
            txtJobNumber.SetFocus
            Exit Sub
        End If
        If CLng(str_JobNumber) < 1 Then
            m_str_Msg = "Job Number should be a positive number."
            MsgBox m_str_Msg
            txtJobNumber.SetFocus
            Exit Sub
        End If
        str_JobNumber = CStr(CLng(str_JobNumber))
        txtJobNumber.Text = str_JobNumber
    End If
    
    If optYes.Value = True Then
        str_SampleProvided = "Value Yes selected"
    Else
        str_SampleProvided = "Value No selected"
    End If

    If optRecommendation1.Value = True Then
        strRecommendation = "Value 1 selected"
    ElseIf optRecommendation2.Value = True Then
        strRecommendation = "Value 2 selected"
    ElseIf optRecommendation3.Value = True Then
        strRecommendation = "Value 3 selected"
    ElseIf optRecommendation4.Value = True Then
        strRecommendation = "Value 4 selected"
    End If
    
    If cmdAdd.Caption = "Add" Then
        l_Result = modDBHelper.AddMB("CES_UPDATE.ADD_MB", _
                                     l_RetVal, _
                                     txtBenchNumber.Text, _
                                     m_str_BusType, _
                                     str_BuyCode, _
                                     txtBuyNewCost.Text, _
                                     txtCoreCode.Text, _
                                     str_BriefDescription, _
                                     txtExternalRebuilt.Text, _
                                     str_Keyword, _
                                     str_MakeBuyNumber, _
                                     str_NumberOfBus, _
                                     txtProjectedAnnualUsage.Text, _
                                     txtRebuildCode.Text, _
                                     txtRemanufactured.Text, _
                                     str_OptRecommend, _
                                     str_OptSample, _
                                     str_VendorPartNumber, _
                                     txtInternalRebuilt.Text, _
                                     txtSOP.Text, _
                                     str_CoreCost, _
                                     str_JobNumber, _
                                     chkbxUseManualEntry.Value)
        'Now we need go through all items in the lstListOfBuses list-box,
        'find only selected items and save data to the MB_LIST_OF_BUSES table.
        ReDim m_str_SelectedBuses(m_const_l_SelectedBusesSize)
        l_Count1 = 0
        If l_Result = 0 Then
        For l_count = 0 To lstListOfBuses.ListCount - 1
            If lstListOfBuses.Selected(l_count) = True Then
                l_Result = modDBHelper.InsertMBListOFBuses( _
                                            "CES_UPDATE.INSERT_MB_LIST_OF_BUSES", _
                                            l_RetVal, _
                                            txtMakeBuyNumber.Text, _
                                            lstListOfBuses.ItemData(l_count))
                If l_Count1 < m_const_l_SelectedBusesSize + 1 Then
                    m_str_SelectedBuses(l_Count1) = lstListOfBuses.List(l_count)
                End If
                l_Count1 = l_Count1 + 1
            End If
        Next l_count
        End If
        If (l_Result = 0) Then
            Call SetDefaultCursor
            MsgBox "Make Buy Has been added"
            'Close
        Else
            Call SetDefaultCursor
            MsgBox "Error Adding Make vs. Buy, piece of information was entered Incorrectly or Make vs. Buy number already exists"
        End If
        'Add record to the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", l_RetVal, "Make Vs. Buy Info was added to the System", str_MakeBuyNumber, "MB", _
            "Make Vs. Buy # ---> " + Trim(txtMakeBuyNumber.Text), "Key Word ---> " + Trim(txtKeyword.Text), _
            "Description ---> " + Trim(txtBriefDescription.Text), "Number Of Bus Using Component ---> " + Trim(txtNumberOfBus.Text), _
            "Vendor Part Number ---> " + Trim(txtVendorPartNumber.Text), "MMS Buy Code ---> " + Trim(txtBuyCode.Text), _
            "Rebuild Code ---> " + Trim(txtRebuildCode.Text), "Core Code ---> " + Trim(txtCoreCode.Text), _
            "Core Cost ---> " + Trim(txtCoreCost.Text), "Projected Annual Usage ---> " + Trim(txtProjectedAnnualUsage.Text), _
            "Bench Number ---> " + Trim(txtBenchNumber.Text), "S.O.P. # ---> " + Trim(txtSOP.Text), _
            "Job Number ---> " + Trim(txtJobNumber.Text), "Sample Provided ---> " + str_SampleProvided, _
            "1. External Rebuilt Cost (See Attached Estimate) ---> " + Trim(txtExternalRebuilt.Text), _
            "2. Internal Rebuilt Cost (See Attached Estimate) ---> " + Trim(txtInternalRebuilt.Text), _
            "3. Remanufactured Exchange Cost (If Applicable) ---> " + Trim(txtRemanufactured.Text), _
            "4. Buy New Cost ---> " + Trim(txtBuyNewCost.Text), _
            "Recommendation ---> " + strRecommendation, _
            "Selected Bus 1 ---> " + m_str_SelectedBuses(0), _
            "Selected Bus 2 ---> " + m_str_SelectedBuses(1), _
            "Selected Bus 3 ---> " + m_str_SelectedBuses(2), _
            "Selected Bus 4 ---> " + m_str_SelectedBuses(3), _
            "Selected Bus 5 ---> " + m_str_SelectedBuses(4), _
            "Selected Bus 6 ---> " + m_str_SelectedBuses(5), _
            "Selected Bus 7 ---> " + m_str_SelectedBuses(6), _
            "Selected Bus 8 ---> " + m_str_SelectedBuses(7), _
            "Selected Bus 9 ---> " + m_str_SelectedBuses(8), _
            "Selected Bus 10 ---> " + m_str_SelectedBuses(9))
    ElseIf cmdAdd.Caption = "Update" Then
        l_Result = modDBHelper.UpdateMBList("CES_UPDATE.UPDATE_MB_LIST", _
                                            l_RetVal, _
                                            txtBenchNumber.Text, _
                                            m_str_BusType, _
                                            str_BuyCode, _
                                            txtBuyNewCost.Text, _
                                            txtCoreCode.Text, _
                                            str_BriefDescription, _
                                            txtExternalRebuilt.Text, _
                                            str_Keyword, _
                                            str_MakeBuyNumber, _
                                            str_NumberOfBus, _
                                            txtProjectedAnnualUsage.Text, _
                                            txtRebuildCode.Text, _
                                            txtRemanufactured.Text, _
                                            str_OptRecommend, _
                                            str_OptSample, _
                                            txtInternalRebuilt.Text, _
                                            str_VendorPartNumber, _
                                            txtSOP.Text, _
                                            str_CoreCost, _
                                            str_JobNumber, _
                                            chkbxUseManualEntry.Value, _
                                            m_var_RowID)
    
        'Delete all records from the MB_LIST_OF_BUSES table where
        'MB_LIST_OF_BUSES.MB_NUMBER = txtMakeBuyNumber.Text
        l_Result = modDBHelper.DeleteMBListOFBuses( _
                                    "CES_DELETE.DELETE_MB_LIST_OF_BUSES", _
                                    l_RetVal, _
                                    txtMakeBuyNumber.Text)

        'Now we need go through all items in the lstListOfBuses list-box,
        'find only selected items and save data to the MB_LIST_OF_BUSES table.
        ReDim m_str_SelectedBuses(m_const_l_SelectedBusesSize)
        l_Count1 = 0
        For l_count = 0 To lstListOfBuses.ListCount - 1
            If lstListOfBuses.Selected(l_count) = True Then
                l_Result = modDBHelper.InsertMBListOFBuses( _
                                            "CES_UPDATE.INSERT_MB_LIST_OF_BUSES", _
                                            l_RetVal, _
                                            txtMakeBuyNumber.Text, _
                                            lstListOfBuses.ItemData(l_count))
                If l_Count1 < m_const_l_SelectedBusesSize + 1 Then
                    m_str_SelectedBuses(l_Count1) = lstListOfBuses.List(l_count)
                End If
                l_Count1 = l_Count1 + 1
            End If
        Next l_count
        
        If (l_Result = 0) Then
            Call SetDefaultCursor
            MsgBox "Make vs Buy Has been updated."
        Else
            Call SetDefaultCursor
            MsgBox "Error, please try re-entering Part. " & CStr(l_Result)
        End If
    
        'Add record to the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", l_RetVal, "Edit Make Vs. Buy Info", m_str_AuditReference, "MB", _
            "Make Vs. Buy # ---> " + Trim(txtMakeBuyNumber.Text), "Key Word ---> " + Trim(txtKeyword.Text), _
            "Description ---> " + Trim(txtBriefDescription.Text), "Number Of Bus Using Component ---> " + Trim(txtNumberOfBus.Text), _
            "Vendor Part Number ---> " + Trim(txtVendorPartNumber.Text), "MMS Buy Code ---> " + Trim(txtBuyCode.Text), _
            "Rebuild Code ---> " + Trim(txtRebuildCode.Text), "Core Code ---> " + Trim(txtCoreCode.Text), _
            "Core Cost ---> " + Trim(txtCoreCost.Text), "Projected Annual Usage ---> " + Trim(txtProjectedAnnualUsage.Text), _
            "Bench Number ---> " + Trim(txtBenchNumber.Text), "S.O.P. # ---> " + Trim(txtSOP.Text), _
            "Job Number ---> " + Trim(txtJobNumber.Text), "Sample Provided ---> " + str_SampleProvided, _
            "1. External Rebuilt Cost (See Attached Estimate) ---> " + Trim(txtExternalRebuilt.Text), _
            "2. Internal Rebuilt Cost (See Attached Estimate) ---> " + Trim(txtInternalRebuilt.Text), _
            "3. Remanufactured Exchange Cost (If Applicable) ---> " + Trim(txtRemanufactured.Text), _
            "4. Buy New Cost ---> " + Trim(txtBuyNewCost.Text), _
            "Recommendation ---> " + strRecommendation, _
            "Selected Bus 1 ---> " + m_str_SelectedBuses(0), _
            "Selected Bus 2 ---> " + m_str_SelectedBuses(1), _
            "Selected Bus 3 ---> " + m_str_SelectedBuses(2), _
            "Selected Bus 4 ---> " + m_str_SelectedBuses(3), _
            "Selected Bus 5 ---> " + m_str_SelectedBuses(4), _
            "Selected Bus 6 ---> " + m_str_SelectedBuses(5), _
            "Selected Bus 7 ---> " + m_str_SelectedBuses(6), _
            "Selected Bus 8 ---> " + m_str_SelectedBuses(7), _
            "Selected Bus 9 ---> " + m_str_SelectedBuses(8), _
            "Selected Bus 10 ---> " + m_str_SelectedBuses(9))
    
    End If
    
    'Refresh "Search Results" grid on the frmSearchMB form.
    Call frmSearchMB.FillSearchGrid
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdAdd_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub cmdClearSelection_Click()
    Dim l_count As Long
    
    On Error GoTo Error_Handler

    'If some items are selected, make them unselected.
    For l_count = 0 To lstListOfBuses.ListCount - 1
        If lstListOfBuses.Selected(l_count) = True Then
            lstListOfBuses.Selected(l_count) = False
        End If
    Next l_count
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdClearSelection_Click", g_l_ErrorLineNumber
End Sub

Private Sub cmdReload_Click()
    Dim l_count As Long
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor

    'First remove all selection from the lstListOfBuses list-box
    For l_count = 0 To lstListOfBuses.ListCount - 1
        lstListOfBuses.Selected(l_count) = False
    Next l_count

    'Restore initial selections in the lstListOfBuses list-box.
    For l_count = 0 To m_l_ArraySize
        lstListOfBuses.Selected(m_l_Selected(l_count)) = True
    Next l_count
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdReload_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    Call PopulateListOfBuses
    If (m_str_MBNumber <> "") Then
        'Update labels because form is used to update not add
        cmdAdd.Caption = "Update"
        Me.Caption = "Update a Make vs. Buy"
        Call PopulateFields
        Call HighlightItemsInTheListBox
        cmdPrintDocument.Enabled = True
    ElseIf (m_str_ArchiveID <> "") Then
        Me.Caption = "Archived Make vs. Buy Information"
        cmdAdd.Visible = False
        Call populateFieldsArch
        cmdPrintDocument.Enabled = True
    Else
        'Show dollar sign in each edit-box of the "Cost" frame,
        'except txtInternalRebuilt.
        txtExternalRebuilt.Text = ""
        txtRemanufactured.Text = ""
        txtBuyNewCost.Text = ""
        cmdReload.Enabled = False
        cmdPrintDocument.Enabled = False
    End If
    
    Call UserPermissions
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor
    m_str_MBNumber = ""
    m_str_ArchiveID = ""
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub PopulateFields()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler

    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.RetrieveMB("CES_INQUIRY.RETRIEVE_MB")
    
    RS.Filter = "MB_NUMBER = '" + m_str_MBNumber + "'"
    m_var_RowID = RS.Fields.Item("rowid")
    'Load values into text boxes
     
    txtBenchNumber.Text = RS.Fields.Item("BENCH_NUMBER")
    m_str_BusType = RS.Fields.Item("BUS_TYPE")
    txtBuyCode.Text = RS.Fields.Item("BUY_CODE")
    
    chkbxUseManualEntry.Value = RS.Fields.Item("Manualprice")
    If chkbxUseManualEntry Then
        txtBuyNewCost.Text = Format(RS.Fields.Item("BUY_NEW_COST"), "currency") ' Taken out and recalculated as request Sept 2007
    End If
    
    txtCoreCode.Text = RS.Fields.Item("CORE_CODE")
    txtCoreCost.Text = Format(RS.Fields.Item("CORE_COST"), "currency")
    txtBriefDescription.Text = RS.Fields.Item("DESCRIPTION")
    txtExternalRebuilt.Text = Format(RS.Fields.Item("EXTERNAL_COST"), "currency")
    txtKeyword.Text = RS.Fields.Item("KEYWORD")
    txtMakeBuyNumber.Text = RS.Fields.Item("MB_NUMBER")
    txtNumberOfBus.Text = RS.Fields.Item("NUM_BUS_COMP")
    txtProjectedAnnualUsage.Text = RS.Fields.Item("ANNUAL_USAGE")
    txtRebuildCode.Text = RS.Fields.Item("REBUILD_CODE")
    txtRemanufactured.Text = Format(RS.Fields.Item("REMAN_COST"), "currency")
    txtVendorPartNumber.Text = RS.Fields.Item("VENDOR_PART_NUM")
    m_str_OptRecommend = Trim(RS.Fields.Item("RECOMMENDATION"))
    m_str_OptSample = Trim(RS.Fields.Item("SAMPLE_PROVIDED"))
    txtSOP.Text = RS.Fields.Item("SOP_NUMBER")
    frmMakeBuyEstimate.m_str_MBNumber = m_str_MBNumber
    txtInternalRebuilt.Text = Format(frmMakeBuyEstimate.txtTotalRebuiltCost, "currency")
    If IsNull(RS.Fields.Item("JOB_NUMBER")) = False Then
        txtJobNumber.Text = RS.Fields.Item("JOB_NUMBER")
    End If
    
    Set RS = Nothing
    '*****************************************************
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.SearchSCPart("CES_INQUIRY.SEARCH_SC_PART", _
                                            txtBuyCode.Text, _
                                            0, _
                                            "", _
                                            "", _
                                            2)
    '***********************************************************
    
    If RS.EOF And Not (chkbxUseManualEntry = 1) Then
        txtBuyNewCost.Text = Format(0, "currency")
    ElseIf Not (chkbxUseManualEntry = 1) Then
        txtBuyNewCost.Text = Format(RS.Fields.Item("PRICE"), "currency")
    End If
    
    
    If (m_str_OptSample = "Y") Then
        optYes.Value = True
    Else
        optNo.Value = True
    End If
    
    If (m_str_OptRecommend = "1") Then
        optRecommendation1.Value = True
    ElseIf (m_str_OptRecommend = "2") Then
        optRecommendation2.Value = True
    Else
        optRecommendation3.Value = True
    End If
        
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateFields", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

'---------------------------------------------------------------------------------------
' Procedure : PopulateFieldsArch
' Purpose   : Populate page from an Archived MB Estimate
'---------------------------------------------------------------------------------------
'
Private Sub populateFieldsArch()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    cmdClearSelection.Visible = False
    cmdReload.Visible = False
    lblListOfBuses.Visible = False
    lstListOfBuses.Visible = False
    
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.RetrieveArchMB("CES_ARCHIVE.GET_ARCH_MB_MASTERLIST_BY_ID", _
                                            m_str_ArchiveID)
    'Load values into text boxes
    txtBenchNumber.Text = RS.Fields.Item("BENCH_NUMBER")
    m_str_BusType = RS.Fields.Item("BUS_TYPE")
    txtBuyCode.Text = RS.Fields.Item("BUY_CODE")
    If chkbxUseManualEntry Then
        txtBuyNewCost.Text = RS.Fields.Item("BUY_NEW_COST")
    End If
    txtCoreCode.Text = RS.Fields.Item("CORE_CODE")
    txtCoreCost.Text = Format(RS.Fields.Item("CORE_COST"), "currency")
    txtBriefDescription.Text = RS.Fields.Item("DESCRIPTION")
    txtExternalRebuilt.Text = Format(RS.Fields.Item("EXTERNAL_COST"), "currency")
    txtKeyword.Text = RS.Fields.Item("KEYWORD")
    txtMakeBuyNumber.Text = RS.Fields.Item("MB_NUMBER")
    txtNumberOfBus.Text = RS.Fields.Item("NUM_BUS_COMP")
    txtProjectedAnnualUsage.Text = RS.Fields.Item("ANNUAL_USAGE")
    txtRebuildCode.Text = RS.Fields.Item("REBUILD_CODE")
    txtRemanufactured.Text = Format(RS.Fields.Item("REMAN_COST"), "currency")
    txtVendorPartNumber.Text = RS.Fields.Item("VENDOR_PART_NUM")
    m_str_OptRecommend = Trim(RS.Fields.Item("RECOMMENDATION"))
    m_str_OptSample = Trim(RS.Fields.Item("SAMPLE_PROVIDED"))
    txtInternalRebuilt.Text = Format(RS.Fields.Item("TOTAL_COST_TAX"), "currency")
    txtSOP.Text = RS.Fields.Item("SOP_NUMBER")
    frmMakeBuyEstimate.m_str_MBNumber = m_str_MBNumber

    If IsNull(RS.Fields.Item("JOB_NUMBER")) = False Then
        txtJobNumber.Text = RS.Fields.Item("JOB_NUMBER")
    End If
    
    Set RS = Nothing
    
    If (m_str_OptSample = "Y") Then
        optYes.Value = True
    Else
        optNo.Value = True
    End If
    
    If (m_str_OptRecommend = "1") Then
        optRecommendation1.Value = True
    ElseIf (m_str_OptRecommend = "2") Then
        optRecommendation2.Value = True
    Else
        optRecommendation3.Value = True
    End If
        
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateFieldsArch", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub cmdPrintDocument_Click()
    Dim objWdDoc As Word.Document
    Dim objwdRange As Word.Range
    'default with empty string for str_BusesSelected
    Dim str_BusesSelected As String
    Dim l_count As Long
    Dim str_DocumentPath As String
    Dim RS As ADODB.Recordset

    On Error GoTo Error_Handler
    If (m_str_MBNumber <> "") Then
        PopulateFields
    ElseIf (m_str_ArchiveID <> "") Then
        populateFieldsArch
    End If
    
    Call SetWaitCursor
    
    str_BusesSelected = ""

    Call CreateWApp

    'Create instance of Word Application
    Set RS = modDBHelper.RetrieveCESSettings("CES_INQUIRY.RETRIEVE_CES_SETTI", "WORD_DOC_PATH")
    'Total each of the sections
    If RS.RecordCount = 1 Then
        str_DocumentPath = RS.Fields.Item("VALUE")
    End If

    Set objWdDoc = objWdApp.Documents.Open(str_DocumentPath)

    Set RS = Nothing
    'Set the range equal to the entire word doc
    Set objwdRange = objWdDoc.Range
    
    'Loop through the list of buses and concatenate all buses that were selected to send
    'to the word document
    
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.RetrieveListOfBuses("CES_INQUIRY.RETRIEVE_LIST_OF_BUSES")
    
    If RS.RecordCount > 0 Then
        For l_count = 0 To lstListOfBuses.ListCount - 1
            If lstListOfBuses.Selected(l_count) = True Then
                str_BusesSelected = str_BusesSelected + lstListOfBuses.List(l_count) + ", "
            End If
         Next l_count
    
        str_BusesSelected = str_BusesSelected + "."
        str_BusesSelected = Replace(str_BusesSelected, ", .", "")
    End If
     
    If optYes.Value = True Then
        m_str_OptSample = "Y"
    Else
        m_str_OptSample = "N"
    End If
    
    With objwdRange
        .Fields(1).Result.Text = txtMakeBuyNumber.Text
        .Fields(2).Result.Text = txtKeyword.Text
        .Fields(3).Result.Text = txtBriefDescription.Text
        .Fields(4).Result.Text = str_BusesSelected
        .Fields(5).Result.Text = txtNumberOfBus.Text
        .Fields(6).Result.Text = txtVendorPartNumber.Text
        .Fields(7).Result.Text = txtBuyCode.Text
        .Fields(8).Result.Text = txtRebuildCode.Text
        .Fields(9).Result.Text = txtCoreCode.Text
        .Fields(10).Result.Text = txtJobNumber.Text
        .Fields(11).Result.Text = txtInternalRebuilt.Text
        .Fields(12).Result.Text = txtRemanufactured.Text
        .Fields(13).Result.Text = txtBuyNewCost.Text
        
        'Removed as per Request# 228626
        '.Fields(14).Result.Text = m_str_OptRecommend
        
    End With
    objWdApp.Visible = True

    Set objWdApp = Nothing
    Set objWdDoc = Nothing
    Set objwdRange = Nothing
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdPrintDocument_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub PopulateListOfBuses()
    Dim RS As ADODB.Recordset
    Dim l_count As Long
    
    On Error GoTo Error_Handler

    lstListOfBuses.Clear
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.RetrieveListOfBuses("CES_INQUIRY.RETRIEVE_LIST_OF_BUSES")
    
    'Here we will not use:
    'Set lstListOfBuses.DataSource = RS
    'but we will use loop because we need to add ItemData = RS.Fields.Item("LIST_ID")
    'to each added item.
    
    If RS.RecordCount > 0 Then
        RS.MoveFirst
        For l_count = 0 To RS.RecordCount - 1
            lstListOfBuses.AddItem RS.Fields.Item("DESCRIPTION")
            lstListOfBuses.ItemData(lstListOfBuses.NewIndex) = CLng(RS.Fields.Item("LIST_ID"))
            RS.MoveNext
        Next l_count
    Else
        'Make buttons cmdReload and cmdClearSelection disabled.
        cmdReload.Enabled = False
        cmdClearSelection.Enabled = False
    End If
    
    Set RS = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateListOfBuses", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub HighlightItemsInTheListBox()
    Dim RS As ADODB.Recordset
    Dim l_count As Long
    Dim l_Count1 As Long
    Dim l_ListID As Long
    
    On Error GoTo Error_Handler

    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.RetrieveMBListOfBuses("CES_INQUIRY.MB_LIST_BUSES", _
                                               txtMakeBuyNumber.Text)

    m_l_ArraySize = -1
    'Go through whole recordset and highlight all corresponded items in the
    'lstListOfBuses list-box.
    If RS.RecordCount > 0 Then
        RS.MoveFirst
        For l_count = 1 To RS.RecordCount
            l_ListID = CLng(RS.Fields.Item("LIST_ID"))
            For l_Count1 = 0 To lstListOfBuses.ListCount - 1
                If lstListOfBuses.ItemData(l_Count1) = l_ListID Then
                    lstListOfBuses.Selected(l_Count1) = True
                    'Save current l_ListID into array m_l_Selected. We can use this array
                    'later in case we want restore initial selections in the
                    'lstListOfBuses list-box (see cmdReload_Click(...))
                    m_l_ArraySize = m_l_ArraySize + 1
                    ReDim Preserve m_l_Selected(m_l_ArraySize)
                    m_l_Selected(m_l_ArraySize) = l_Count1
                    Exit For
                End If
            Next l_Count1
            
            RS.MoveNext
        Next l_count
    End If
    
    Set RS = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "HighlightItemsInTheListBox", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub txtBenchNumber_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtBenchNumber edit-box to upper case.
    l_CursorPosition = txtBenchNumber.SelStart
    str_Data = txtBenchNumber.Text
    str_Data = UCase(str_Data)
    txtBenchNumber.Text = str_Data
    txtBenchNumber.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtBenchNumber_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtBriefDescription_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String

    On Error GoTo Error_Handler

    'Convert data in the txtBriefDescription edit-box to upper case.
    l_CursorPosition = txtBriefDescription.SelStart
    str_Data = txtBriefDescription.Text
    str_Data = UCase(str_Data)
    txtBriefDescription.Text = str_Data
    txtBriefDescription.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtBriefDescription_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtBuyCode_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtBuyCode edit-box to upper case.
    l_CursorPosition = txtBuyCode.SelStart
    str_Data = txtBuyCode.Text
    str_Data = UCase(str_Data)
    txtBuyCode.Text = str_Data
    txtBuyCode.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtBuyCode_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtBuyNewCost_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtBuyNewCost edit-box to upper case.
    l_CursorPosition = txtBuyNewCost.SelStart
    str_Data = txtBuyNewCost.Text
    str_Data = UCase(str_Data)
    txtBuyNewCost.Text = str_Data
    txtBuyNewCost.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtBuyNewCost_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtBuyNewCost_GotFocus()
    On Error GoTo Error_Handler
    
    'Set cursor after last character.
    txtBuyNewCost.SelStart = Len(txtBuyNewCost.Text)
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtBuyNewCost_GotFocus", g_l_ErrorLineNumber
End Sub

Private Sub txtCoreCode_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtCoreCode edit-box to upper case.
    l_CursorPosition = txtCoreCode.SelStart
    str_Data = txtCoreCode.Text
    str_Data = UCase(str_Data)
    txtCoreCode.Text = str_Data
    txtCoreCode.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtCoreCode_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtCoreCost_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtCoreCost edit-box to upper case.
    l_CursorPosition = txtCoreCost.SelStart
    str_Data = txtCoreCost.Text
    str_Data = UCase(str_Data)
    txtCoreCost.Text = str_Data
    txtCoreCost.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtCoreCost_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtExternalRebuilt_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtExternalRebuilt edit-box to upper case.
    l_CursorPosition = txtExternalRebuilt.SelStart
    str_Data = txtExternalRebuilt.Text
    str_Data = UCase(str_Data)
    txtExternalRebuilt.Text = str_Data
    txtExternalRebuilt.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtExternalRebuilt_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtInternalRebuilt_GotFocus()
    On Error GoTo Error_Handler
    
    'Set cursor after last character.
    txtInternalRebuilt.SelStart = Len(txtInternalRebuilt.Text)
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtInternalRebuilt_GotFocus", g_l_ErrorLineNumber
End Sub

Private Sub txtJobNumber_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String

    On Error GoTo Error_Handler

    'Convert data in the txtJobNumber edit-box to upper case.
    l_CursorPosition = txtJobNumber.SelStart
    str_Data = txtJobNumber.Text
    str_Data = UCase(str_Data)
    txtJobNumber.Text = str_Data
    txtJobNumber.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtJobNumber_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtKeyword_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String

    On Error GoTo Error_Handler

    'Convert data in the txtKeyword edit-box to upper case.
    l_CursorPosition = txtKeyword.SelStart
    str_Data = txtKeyword.Text
    str_Data = UCase(str_Data)
    txtKeyword.Text = str_Data
    txtKeyword.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtKeyword_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtExternalRebuilt_GotFocus()
    On Error GoTo Error_Handler
    
    'Set cursor after last character.
    txtExternalRebuilt.SelStart = Len(txtExternalRebuilt.Text)
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtExternalRebuilt_GotFocus", g_l_ErrorLineNumber
End Sub

Private Sub txtMakeBuyNumber_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String

    On Error GoTo Error_Handler

    'Convert data in the txtMakeBuyNumber edit-box to upper case.
    l_CursorPosition = txtMakeBuyNumber.SelStart
    str_Data = txtMakeBuyNumber.Text
    str_Data = UCase(str_Data)
    txtMakeBuyNumber.Text = str_Data
    txtMakeBuyNumber.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtMakeBuyNumber_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtNumberOfBus_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtNumberOfBus edit-box to upper case.
    l_CursorPosition = txtNumberOfBus.SelStart
    str_Data = txtNumberOfBus.Text
    str_Data = UCase(str_Data)
    txtNumberOfBus.Text = str_Data
    txtNumberOfBus.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtNumberOfBus_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtProjectedAnnualUsage_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtProjectedAnnualUsage edit-box to upper case.
    l_CursorPosition = txtProjectedAnnualUsage.SelStart
    str_Data = txtProjectedAnnualUsage.Text
    str_Data = UCase(str_Data)
    txtProjectedAnnualUsage.Text = str_Data
    txtProjectedAnnualUsage.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtProjectedAnnualUsage_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtRebuildCode_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtRebuildCode edit-box to upper case.
    l_CursorPosition = txtRebuildCode.SelStart
    str_Data = txtRebuildCode.Text
    str_Data = UCase(str_Data)
    txtRebuildCode.Text = str_Data
    txtRebuildCode.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtRebuildCode_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtRemanufactured_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtRemanufactured edit-box to upper case.
    l_CursorPosition = txtRemanufactured.SelStart
    str_Data = txtRemanufactured.Text
    str_Data = UCase(str_Data)
    txtRemanufactured.Text = str_Data
    txtRemanufactured.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtRemanufactured_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtRemanufactured_GotFocus()
    On Error GoTo Error_Handler
    
    'Set cursor after last character.
    txtRemanufactured.SelStart = Len(txtRemanufactured.Text)
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtRemanufactured_GotFocus", g_l_ErrorLineNumber
End Sub

Private Sub txtSOP_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtSOP edit-box to upper case.
    l_CursorPosition = txtSOP.SelStart
    str_Data = txtSOP.Text
    str_Data = UCase(str_Data)
    txtSOP.Text = str_Data
    txtSOP.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtSOP_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtVendorPartNumber_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtVendorPartNumber edit-box to upper case.
    l_CursorPosition = txtVendorPartNumber.SelStart
    str_Data = txtVendorPartNumber.Text
    str_Data = UCase(str_Data)
    txtVendorPartNumber.Text = str_Data
    txtVendorPartNumber.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtVendorPartNumber_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub UserPermissions()
    On Error GoTo Error_Handler

    If g_l_AccessLevel = 1 Then
        'Button <Add> is invisible.
        cmdAdd.Visible = False
        'Button <Clear Selection> is invisible.
        cmdClearSelection.Visible = False
        'Frame "Cost" is invisible.
        fraCost.Visible = False
        txtCoreCost.Enabled = False
        'Rest controls, except <Reload> button, "List of Buses" list-box,
        '<Print MS Word Document> button, are disabled.
        txtMakeBuyNumber.Enabled = False
        txtKeyword.Enabled = False
        txtBriefDescription.Enabled = False
        txtNumberOfBus.Enabled = False
        txtVendorPartNumber.Enabled = False
        txtBuyCode.Enabled = False
        txtRebuildCode.Enabled = False
        txtExternalRebuilt.Enabled = True
        txtCoreCode.Enabled = False
        txtProjectedAnnualUsage.Enabled = False
        txtBenchNumber.Enabled = False
        txtSOP.Enabled = False
        optYes.Enabled = False
        optNo.Enabled = False
        optRecommendation1.Enabled = False
        optRecommendation2.Enabled = False
        optRecommendation3.Enabled = False
        optRecommendation4.Enabled = False
    ElseIf g_l_AccessLevel = 2 Then
        'Button <Add> is invisible.
        cmdAdd.Visible = False
        'Button <Clear Selection> is invisible.
        cmdClearSelection.Visible = False
        txtCoreCost.Enabled = False
        'Rest controls, except <Reload> button, "List of Buses" list-box,
        '<Print MS Word Document> button, are disabled.
        txtMakeBuyNumber.Enabled = False
        txtKeyword.Enabled = False
        txtBriefDescription.Enabled = False
        txtNumberOfBus.Enabled = False
        txtVendorPartNumber.Enabled = False
        txtBuyCode.Enabled = False
        txtRebuildCode.Enabled = False
        txtCoreCode.Enabled = False
        txtProjectedAnnualUsage.Enabled = False
        txtBenchNumber.Enabled = False
        txtSOP.Enabled = False
        optYes.Enabled = False
        optNo.Enabled = False
        txtExternalRebuilt.Enabled = True
        txtInternalRebuilt.Enabled = False
        txtRemanufactured.Enabled = False
        txtBuyNewCost.Enabled = True
        optRecommendation1.Enabled = False
        optRecommendation2.Enabled = False
        optRecommendation3.Enabled = False
        optRecommendation4.Enabled = False
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "UserPermissions", g_l_ErrorLineNumber
End Sub

Private Sub CreateWApp()
    On Error Resume Next
        Set objWdApp = CreateObject("Word.application.8")
    If Err.Number = 429 Then
        Set objWdApp = CreateObject("Word.application.9")
    Else
        Exit Sub
    End If
    If Err.Number = 429 Then
        Set objWdApp = CreateObject("Word.application.10")
    Exit Sub
    End If
    If Err.Number = 429 Then
        MsgBox "unable to create word app"
    End If
End Sub
frmMakeBuyEstimate.frm :
VERSION 5.00
Object = "{0D452EE1-E08F-101A-852E-02608C4D0BB4}#2.0#0"; "FM20.DLL"
Object = "{CDE57A40-8B86-11D0-B3C6-00A0C90AEA82}#1.0#0"; "MSDATGRD.OCX"
Object = "{831FDD16-0C5C-11D2-A9FC-0000F8754DA1}#2.1#0"; "MSCOMCTL.OCX"
Begin VB.Form frmMakeBuyEstimate 
   BorderStyle     =   1  'Fixed Single
   Caption         =   "Make Vs. Buy Estimate"
   ClientHeight    =   9090
   ClientLeft      =   45
   ClientTop       =   330
   ClientWidth     =   9390
   Icon            =   "frmMakeBuyEstimate.frx":0000
   LinkTopic       =   "Form1"
   MDIChild        =   -1  'True
   ScaleHeight     =   9090
   ScaleWidth      =   9390
   ShowInTaskbar   =   0   'False
   Begin VB.ComboBox cboBusSeries 
      Height          =   315
      Left            =   1200
      TabIndex        =   38
      Top             =   2280
      Width           =   3330
   End
   Begin VB.Frame Frame3 
      Height          =   1215
      Left            =   5280
      TabIndex        =   31
      Top             =   7320
      Width           =   4035
      Begin MSForms.TextBox txtTotalRebuiltPartCostWithTax 
         Height          =   330
         Left            =   2520
         TabIndex        =   37
         Top             =   840
         Width           =   1425
         VariousPropertyBits=   746604569
         BackColor       =   -2147483624
         Size            =   "2514;582"
         SpecialEffect   =   6
         FontEffects     =   1073750016
         FontHeight      =   165
         FontCharSet     =   0
         FontPitchAndFamily=   2
         ParagraphAlign  =   2
      End
      Begin VB.Label lblTotalRebuiltPartCostWithTax 
         Caption         =   "Total Rebuilt Part Cost with Tax"
         Height          =   255
         Left            =   120
         TabIndex        =   36
         Top             =   870
         Width           =   2295
      End
      Begin VB.Label lblTaxTotal 
         Caption         =   "Tax Total"
         Height          =   255
         Left            =   120
         TabIndex        =   35
         Top             =   510
         Width           =   2055
      End
      Begin MSForms.TextBox txtTaxTotal 
         Height          =   330
         Left            =   2520
         TabIndex        =   34
         Top             =   480
         Width           =   1425
         VariousPropertyBits=   746604569
         Size            =   "2514;582"
         SpecialEffect   =   6
         FontEffects     =   1073750016
         FontHeight      =   165
         FontCharSet     =   0
         FontPitchAndFamily=   2
         ParagraphAlign  =   2
      End
      Begin MSForms.TextBox txtTotalRebuiltCost 
         BeginProperty DataFormat 
            Type            =   1
            Format          =   """$""#,##0.00;(""$""#,##0.00)"
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   2
         EndProperty
         Height          =   330
         Left            =   2520
         TabIndex        =   33
         Top             =   120
         Width           =   1425
         VariousPropertyBits=   746604569
         BackColor       =   -2147483624
         Size            =   "2514;582"
         SpecialEffect   =   6
         FontEffects     =   1073750016
         FontHeight      =   165
         FontCharSet     =   0
         FontPitchAndFamily=   2
         ParagraphAlign  =   2
      End
      Begin VB.Label lblTotalRebuiltPartCost 
         Caption         =   "Total Rebuilt Part Cost"
         Height          =   330
         Left            =   120
         TabIndex        =   32
         Top             =   150
         Width           =   1665
      End
   End
   Begin VB.Frame Frame2 
      Height          =   1215
      Left            =   5280
      TabIndex        =   24
      Top             =   6120
      Width           =   4035
      Begin MSForms.TextBox txtLabourTotal 
         BeginProperty DataFormat 
            Type            =   1
            Format          =   """$""#,##0.00;(""$""#,##0.00)"
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   2
         EndProperty
         Height          =   330
         Left            =   2520
         TabIndex        =   30
         ToolTipText     =   "Labour Cost + Labour Overhead Total"
         Top             =   840
         Width           =   1425
         VariousPropertyBits=   746604569
         BackColor       =   -2147483628
         Size            =   "2514;582"
         BorderColor     =   -2147483640
         SpecialEffect   =   6
         FontEffects     =   1073750016
         FontHeight      =   165
         FontCharSet     =   0
         FontPitchAndFamily=   2
         ParagraphAlign  =   2
      End
      Begin VB.Label lblLabourTotal 
         Caption         =   "Labour Total"
         Height          =   225
         Left            =   120
         TabIndex        =   29
         Top             =   870
         Width           =   1695
      End
      Begin VB.Label lblLabourOverheadTotal 
         Caption         =   "Labour Overhead Total"
         Height          =   225
         Left            =   120
         TabIndex        =   28
         Top             =   510
         Width           =   1920
      End
      Begin MSForms.TextBox txtLabourOverheadTotal 
         BeginProperty DataFormat 
            Type            =   1
            Format          =   """$""#,##0.00;(""$""#,##0.00)"
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   4105
            SubFormatType   =   2
         EndProperty
         Height          =   330
         Left            =   2520
         TabIndex        =   27
         Top             =   480
         Width           =   1425
         VariousPropertyBits=   746604569
         Size            =   "2514;582"
         SpecialEffect   =   6
         FontEffects     =   1073750016
         FontHeight      =   165
         FontCharSet     =   0
         FontPitchAndFamily=   2
         ParagraphAlign  =   2
      End
      Begin VB.Label lblLabourCost 
         Caption         =   "Labour Cost"
         Height          =   330
         Left            =   120
         TabIndex        =   26
         Top             =   150
         Width           =   1245
      End
      Begin MSForms.TextBox txtLabourCost 
         Height          =   330
         Left            =   2520
         TabIndex        =   25
         Top             =   120
         Width           =   1425
         VariousPropertyBits=   746604569
         Size            =   "2514;582"
         SpecialEffect   =   6
         FontEffects     =   1073750016
         FontHeight      =   165
         FontCharSet     =   0
         FontPitchAndFamily=   2
         ParagraphAlign  =   2
      End
   End
   Begin VB.Frame Frame1 
      Height          =   855
      Left            =   5280
      TabIndex        =   19
      Top             =   5280
      Width           =   4035
      Begin MSForms.TextBox txtMaterialsTotal 
         BeginProperty DataFormat 
            Type            =   1
            Format          =   """$""#,##0.00;(""$""#,##0.00)"
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   2
         EndProperty
         Height          =   330
         Left            =   2520
         TabIndex        =   23
         Top             =   480
         Width           =   1425
         VariousPropertyBits=   746604569
         Size            =   "2514;582"
         SpecialEffect   =   6
         FontEffects     =   1073750016
         FontHeight      =   165
         FontCharSet     =   0
         FontPitchAndFamily=   2
         ParagraphAlign  =   2
      End
      Begin VB.Label lblMaterialsTotal 
         Caption         =   "Material Cost (Excl. Tax)"
         Height          =   270
         Left            =   120
         TabIndex        =   22
         Top             =   510
         Width           =   2235
      End
      Begin VB.Label lblCoreCost 
         Caption         =   "Core Cost (Excl. Tax)"
         Height          =   315
         Left            =   120
         TabIndex        =   21
         Top             =   150
         Width           =   2235
      End
      Begin MSForms.TextBox txtCoreCost 
         BeginProperty DataFormat 
            Type            =   1
            Format          =   """$""#,##0.00;(""$""#,##0.00)"
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   2
         EndProperty
         Height          =   330
         Left            =   2520
         TabIndex        =   20
         Top             =   120
         Width           =   1425
         VariousPropertyBits=   746604569
         Size            =   "2514;582"
         SpecialEffect   =   6
         FontEffects     =   1073750016
         FontHeight      =   165
         FontCharSet     =   0
         FontPitchAndFamily=   2
         ParagraphAlign  =   2
      End
   End
   Begin MSComctlLib.Toolbar tbMenu 
      Align           =   1  'Align Top
      Height          =   360
      Left            =   0
      TabIndex        =   16
      Top             =   0
      Width           =   9390
      _ExtentX        =   16563
      _ExtentY        =   635
      ButtonWidth     =   1376
      ButtonHeight    =   582
      Appearance      =   1
      Style           =   1
      TextAlignment   =   1
      _Version        =   393216
      BeginProperty Buttons {66833FE8-8583-11D1-B16A-00C0F0283628} 
         NumButtons      =   3
         BeginProperty Button1 {66833FEA-8583-11D1-B16A-00C0F0283628} 
            Caption         =   "File"
            Style           =   5
            BeginProperty ButtonMenus {66833FEC-8583-11D1-B16A-00C0F0283628} 
               NumButtonMenus  =   2
               BeginProperty ButtonMenu1 {66833FEE-8583-11D1-B16A-00C0F0283628} 
                  Text            =   "Print"
               EndProperty
               BeginProperty ButtonMenu2 {66833FEE-8583-11D1-B16A-00C0F0283628} 
                  Text            =   "Close"
               EndProperty
            EndProperty
         EndProperty
         BeginProperty Button2 {66833FEA-8583-11D1-B16A-00C0F0283628} 
            Caption         =   "Edit"
            Style           =   5
            BeginProperty ButtonMenus {66833FEC-8583-11D1-B16A-00C0F0283628} 
               NumButtonMenus  =   4
               BeginProperty ButtonMenu1 {66833FEE-8583-11D1-B16A-00C0F0283628} 
                  Text            =   "Add A Labour Task"
               EndProperty
               BeginProperty ButtonMenu2 {66833FEE-8583-11D1-B16A-00C0F0283628} 
                  Text            =   "Convert to Rebuilt Part"
               EndProperty
               BeginProperty ButtonMenu3 {66833FEE-8583-11D1-B16A-00C0F0283628} 
                  Text            =   "Make vs. Buy Information"
               EndProperty
               BeginProperty ButtonMenu4 {66833FEE-8583-11D1-B16A-00C0F0283628} 
                  Text            =   "Archive MB"
               EndProperty
            EndProperty
         EndProperty
         BeginProperty Button3 {66833FEA-8583-11D1-B16A-00C0F0283628} 
            Caption         =   "View"
            Style           =   5
            BeginProperty ButtonMenus {66833FEC-8583-11D1-B16A-00C0F0283628} 
               NumButtonMenus  =   4
               BeginProperty ButtonMenu1 {66833FEE-8583-11D1-B16A-00C0F0283628} 
                  Text            =   "Material Listings"
               EndProperty
               BeginProperty ButtonMenu2 {66833FEE-8583-11D1-B16A-00C0F0283628} 
                  Text            =   "Modify History"
               EndProperty
               BeginProperty ButtonMenu3 {66833FEE-8583-11D1-B16A-00C0F0283628} 
                  Text            =   "Archive Database"
               EndProperty
               BeginProperty ButtonMenu4 {66833FEE-8583-11D1-B16A-00C0F0283628} 
                  Text            =   "All Labour"
               EndProperty
            EndProperty
         EndProperty
      EndProperty
   End
   Begin VB.ComboBox cboChangesMadeBy 
      Height          =   315
      Left            =   5520
      Style           =   2  'Dropdown List
      TabIndex        =   14
      Top             =   2280
      Width           =   3855
   End
   Begin MSDataGridLib.DataGrid grdMaterialCostCentreTotal 
      Height          =   3675
      Left            =   2400
      TabIndex        =   4
      Top             =   5340
      Width           =   2805
      _ExtentX        =   4948
      _ExtentY        =   6482
      _Version        =   393216
      BackColor       =   12648447
      ForeColor       =   16711680
      HeadLines       =   1
      RowHeight       =   15
      BeginProperty HeadFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Caption         =   "MATERIAL COST SUMMARY"
      ColumnCount     =   2
      BeginProperty Column00 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      BeginProperty Column01 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      SplitCount      =   1
      BeginProperty Split0 
         BeginProperty Column00 
         EndProperty
         BeginProperty Column01 
         EndProperty
      EndProperty
   End
   Begin MSDataGridLib.DataGrid grdLabour 
      Height          =   2625
      Left            =   75
      TabIndex        =   3
      Top             =   2640
      Width           =   9240
      _ExtentX        =   16298
      _ExtentY        =   4630
      _Version        =   393216
      BackColor       =   12648447
      ForeColor       =   16711680
      HeadLines       =   1
      RowHeight       =   15
      BeginProperty HeadFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Caption         =   "LABOUR"
      ColumnCount     =   2
      BeginProperty Column00 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      BeginProperty Column01 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      SplitCount      =   1
      BeginProperty Split0 
         BeginProperty Column00 
         EndProperty
         BeginProperty Column01 
         EndProperty
      EndProperty
   End
   Begin MSDataGridLib.DataGrid grdTotalTime 
      Height          =   3675
      Left            =   60
      TabIndex        =   18
      Top             =   5340
      Width           =   2295
      _ExtentX        =   4048
      _ExtentY        =   6482
      _Version        =   393216
      BackColor       =   12648447
      ForeColor       =   16711680
      HeadLines       =   1
      RowHeight       =   17
      BeginProperty HeadFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Caption         =   "LABOUR HOURS SUMMARY"
      ColumnCount     =   2
      BeginProperty Column00 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   4105
            SubFormatType   =   0
         EndProperty
      EndProperty
      BeginProperty Column01 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   4105
            SubFormatType   =   0
         EndProperty
      EndProperty
      SplitCount      =   1
      BeginProperty Split0 
         BeginProperty Column00 
         EndProperty
         BeginProperty Column01 
         EndProperty
      EndProperty
   End
   Begin VB.Label lblBusSeries 
      Caption         =   "Vehicle Series"
      Height          =   195
      Left            =   105
      TabIndex        =   17
      Top             =   2325
      Width           =   1095
   End
   Begin VB.Label lblChangesMadeBy 
      Caption         =   "Last Modified"
      Height          =   195
      Left            =   4560
      TabIndex        =   15
      Top             =   2325
      Width           =   1095
   End
   Begin MSForms.TextBox txtJobNumber 
      Height          =   300
      Left            =   660
      TabIndex        =   13
      Top             =   720
      Width           =   1515
      VariousPropertyBits=   746604569
      Size            =   "2672;529"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   3
   End
   Begin VB.Label lblJobNumber 
      Caption         =   "Job Number"
      Height          =   195
      Left            =   960
      TabIndex        =   12
      Top             =   510
      Width           =   975
   End
   Begin MSForms.TextBox txtCoreCode 
      Height          =   300
      Left            =   7020
      TabIndex        =   11
      Top             =   1275
      Width           =   1515
      VariousPropertyBits=   746604569
      Size            =   "2672;529"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   3
   End
   Begin VB.Label lblCoreCode 
      Caption         =   "Core Code"
      Height          =   195
      Left            =   7380
      TabIndex        =   10
      Top             =   1080
      Width           =   795
   End
   Begin MSForms.TextBox txtMMSBuyCode 
      Height          =   300
      Left            =   7020
      TabIndex        =   9
      Top             =   750
      Width           =   1515
      VariousPropertyBits=   746604569
      Size            =   "2672;529"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   3
   End
   Begin VB.Label lblMMSBuyCode 
      Caption         =   "MMS Buy Code"
      Height          =   195
      Left            =   7200
      TabIndex        =   8
      Top             =   525
      Width           =   1155
   End
   Begin VB.Label lblDescription 
      Caption         =   "Description:"
      Height          =   195
      Left            =   4080
      TabIndex        =   7
      Top             =   1560
      Width           =   915
   End
   Begin VB.Label lblKeyword 
      Caption         =   "Keyword"
      Height          =   195
      Left            =   4245
      TabIndex        =   6
      Top             =   1020
      Width           =   735
   End
   Begin VB.Label lblMakeVsBuyNumber 
      Caption         =   "Make vs. Buy #"
      Height          =   195
      Left            =   3960
      TabIndex        =   5
      Top             =   405
      Width           =   1215
   End
   Begin MSForms.TextBox txtKeyword 
      Height          =   315
      Left            =   3090
      TabIndex        =   1
      Top             =   1215
      Width           =   2910
      VariousPropertyBits=   746604569
      Size            =   "5133;556"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   3
   End
   Begin MSForms.TextBox txtDescription 
      Height          =   435
      Left            =   675
      TabIndex        =   2
      Top             =   1770
      Width           =   7815
      VariousPropertyBits=   -1400879079
      Size            =   "13785;767"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   3
   End
   Begin MSForms.TextBox txtMBNumber 
      Height          =   360
      Left            =   3480
      TabIndex        =   0
      Top             =   630
      Width           =   2175
      VariousPropertyBits=   746604569
      Size            =   "3836;635"
      SpecialEffect   =   6
      FontEffects     =   1073750017
      FontHeight      =   195
      FontCharSet     =   204
      FontPitchAndFamily=   2
      ParagraphAlign  =   3
      FontWeight      =   700
   End
End
Attribute VB_Name = "frmMakeBuyEstimate"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Option Explicit

Private Const m_str_const_MsgBoxCaption As String = "Make Vs. Buy Estimate"
Private m_str_Msg As String

Public m_str_MBNumber As String
Public m_var_RowID As Variant

Private Sub UserPermissions()
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Then
        'Menu <Edit> with all submenues is disabled.
        tbMenu.Buttons(2).Enabled = False
        'Menu <View> with all submenues is disabled.
        tbMenu.Buttons(3).Enabled = False
       
        'All controls in the right bottom corner of the form are invisible.
        lblLabourCost.Visible = False
        lblLabourOverheadTotal.Visible = False
        lblLabourTotal.Visible = False
        lblMaterialsTotal.Visible = False
        lblTotalRebuiltPartCost.Visible = False
        txtLabourCost.Visible = False
        txtLabourOverheadTotal.Visible = False
        txtLabourTotal.Visible = False
        txtMaterialsTotal.Visible = False
        txtTotalRebuiltCost.Visible = False
        '3 edit-boxes at the top of the form are disabled.
        txtMBNumber.Enabled = False
        txtKeyword.Enabled = False
        txtDescription.Enabled = False
        If grdLabour.Columns.Count > 2 Then
            'Grid "Labour". Columns "Time", "Wrench Time" are invisible.
            grdLabour.Columns("TIME").Visible = False
            grdLabour.Columns("WRENCH TIME").Visible = False
        End If
        'Grid "Materials Cost Centre Totals". Column "Total Cost" is invisible.
        grdMaterialCostCentreTotal.Columns("TOTAL COST").Visible = False
    ElseIf g_l_AccessLevel = 2 Then
        'Menu <View><Archive Database> is disabled.
        tbMenu.Buttons(3).ButtonMenus(3).Enabled = False
        'Menu <View><Archive Estimate> is disabled.
        tbMenu.Buttons(2).ButtonMenus(4).Enabled = False
        
        
        'Menu <Edit> with all submenues is disabled.
        tbMenu.Buttons(2).Enabled = False
        'Rest controls, except grids and <Make vs. Buy Info> button, are disabled.
        txtMBNumber.Enabled = False
        txtKeyword.Enabled = False
        txtDescription.Enabled = False
        txtLabourCost.Enabled = False
        txtLabourOverheadTotal.Enabled = False
        txtLabourTotal.Enabled = False
        txtMaterialsTotal.Enabled = False
        txtTotalRebuiltCost.Enabled = False
    End If
    
    If g_l_AccessLevel < 4 Then
        tbMenu.Buttons(3).ButtonMenus(2).Enabled = False
        lblChangesMadeBy.Visible = False
        cboChangesMadeBy.Visible = False
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "UserPermissions", g_l_ErrorLineNumber
End Sub

Public Sub PassValues(ByVal str_MBNumber As String, ByVal var_RowID As Variant)

    On Error GoTo Error_Handler:

    Call SetWaitCursor
    
    m_str_MBNumber = str_MBNumber
    m_var_RowID = var_RowID
        
    ' Close the existing show all labour form
    If Not frmViewAllLabour Is Nothing Then
        Unload frmViewAllLabour
    End If
    
    Call PopulatePage
    Call InitColumns
    Call PopulateChangesMadeBy
    Call UserPermissions
    
    If g_str_UseOverheadFringe = "F" Then
        lblLabourOverheadTotal.Caption = "Fringe Value Total"
    End If
    
    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PassValues", g_l_ErrorLineNumber
End Sub

Public Sub RefreshForm()
    On Error GoTo Error_Handler:

    Call SetWaitCursor
    Call PopulatePage
    Call InitColumns
    Call PopulateChangesMadeBy
    Call UserPermissions
    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "RefreshForm", g_l_ErrorLineNumber
End Sub

Private Sub PopulatePage()
    'Determine which non stock coded items have since been converted into stock coded
    'items.
    Dim var_NSCRowID As Variant
    Dim str_FileText As String
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_MMSStockCode As String
    Dim str_MMSCost As String
    Dim fso As FileSystemObject
    Dim TS As TextStream
    Dim RS As ADODB.Recordset
    Dim RS2 As ADODB.Recordset
    Dim RSNewStock As Recordset
    Dim str_OrigSuppNum As String
    Dim dbl_TaxRate As Double
    Dim l_Hours As Long
    Dim l_Minutes As Long
    Dim l_count As Long
    Dim duplicate As Integer
    On Error GoTo Error_Handler
    
    duplicate = False
    'Get the table containing each of the non stock coded items.
    Set RS = New ADODB.Recordset

    Set RS = modDBHelper.RetrieveNSCPUsed("CES_INQUIRY.RETRIEVE_NSCP_USED", _
                                          m_str_MBNumber, _
                                          "MB")
        
    'Loop through each of the non stock coded items
    If RS.RecordCount > 0 Then
        RS.MoveFirst
        While Not RS.EOF
            'Get the original supplier number and row id
            str_OrigSuppNum = IIf(IsNull(RS.Fields.Item("SUPPLIER NUMBER").Value), "", RS.Fields.Item("SUPPLIER NUMBER").Value)
            var_NSCRowID = RS.Fields.Item("RowID")
            'Now attempt to get a stock coded part which matches the original supplier
            'number
            Set RSNewStock = New Recordset
            Set RSNewStock = modDBHelper.RetrieveSCOrigSupplierNum( _
                                        "CES_INQUIRY.RETRIEVE_SC_ORIG_SUPPLIER_NUM", _
                                        str_OrigSuppNum)
            If RSNewStock.RecordCount > 0 Then
                'There is a match
                'Get the MMS Stock Code for the item
                RSNewStock.MoveFirst
                str_MMSStockCode = RSNewStock.Fields.Item("mms_stock_code")
                str_MMSCost = Round(RSNewStock.Fields.Item("MMS_New_Cost"), 2)
                'Append the text entry to be logged
                str_FileText = str_FileText & Trim(str_OrigSuppNum) & " to " & _
                               Trim(str_MMSStockCode) & Chr(13) & Chr(10)
                               
                 'ensure a stockcoded part is not already attached to the estimate
                
                 Set RS2 = New ADODB.Recordset
        
                 Set RS2 = modDBHelper.RetrieveSCPUsed("CES_INQUIRY.RETRIEVE_SCP_USED", _
                                             m_str_MBNumber, _
                                             "N", _
                                             "MB")
                    If RS2.RecordCount > 0 Then
                        RS2.MoveFirst
                        For l_count = 0 To RS2.RecordCount - 1
                            If RS2.Fields.Item("STOCK CODE") = Trim(str_MMSStockCode) Then
                                Call SetDefaultCursor
                                Set RS2 = Nothing
                                m_str_Msg = "Did not convert Non-Stocked-Coded part to Stocked-Coded-Part since MMS Stock Code"
                                m_str_Msg = m_str_Msg + " " + str_MMSStockCode + " is already used in this estimate"
                                MsgBox m_str_Msg, vbOKOnly Or vbExclamation, "Warning"
                                duplicate = True
                                Exit For
                            End If
                            RS2.MoveNext
                        Next l_count
                    End If
                    Set RS2 = Nothing
                    
                'Transfer the entry to the stock coded make buy
                If duplicate = False Then
                l_Result = modDBHelper.TransferPartsUsed("CES_UPDATE.TRANSFER_PARTS_USED", _
                                                         l_RetVal, _
                                                         str_MMSStockCode, _
                                                         str_MMSCost, _
                                                         g_str_UserName, _
                                                         var_NSCRowID)
                                                         
                       'Now if there have been any conversions log them in text file and inform the user
                    If str_FileText <> "" Then
                        'Set FSO = New FileSystemObject
                        'Set TS = FSO.CreateTextFile("mb.log")
                        'TS.Write ("Make vs Buy #" & Trim(m_str_MBNumber) & " Part Conversions:" & _
                                  Chr(13) & Chr(10) & Chr(13) & Chr(10) & _
                                  "Vendor Part Number to Stock Code" & Chr(13) & Chr(10) & _
                                  "--------------------------------" & Chr(13) & Chr(10) & str_FileText)
                        m_str_Msg = "Parts in the Make vs Buy have been converted to Stock Coded "
                        m_str_Msg = m_str_Msg + "Parts." + Chr(13) + "Please see the log for details."
                        MsgBox m_str_Msg, vbOKOnly Or vbInformation, m_str_const_MsgBoxCaption
                        
                        'The code below was added to prevent a permission error when attempting
                        'to run FSO's CreateTextFile
                        Dim frmNoticeMessage As frmNotice
                        Set frmNoticeMessage = New frmNotice
                        frmNoticeMessage.SetMessage "mb.log", "Make vs Buy #" & Trim(m_str_MBNumber) & " Part Conversions:" & _
                            Chr(13) & Chr(10) & Chr(13) & Chr(10) & _
                            "Vendor Part Number to Stock Code" & Chr(13) & Chr(10) & _
                            "--------------------------------" & Chr(13) & Chr(10) & str_FileText
                        frmNoticeMessage.Show vbModal
                        
                        'TS.Close
                        'Set TS = Nothing
                        'Set FSO = Nothing
                        'ShellExecute GetDesktopWindow(), "Open", App.Path & "\mb.log", "", "C:\", 6
        
                     End If

                End If
            End If
            Set RSNewStock = Nothing
            RS.MoveNext
        Wend
    End If
            
  

    'Populate the labour tables
    Set RS = modDBHelper.RetrieveMBLabour("CES_INQUIRY.RETRIEVE_MB_LABOUR", _
                                          m_str_MBNumber, _
                                          "MB")
    
    If RS.RecordCount > 0 Then
        Set grdLabour.DataSource = RS
    Else
        Set grdLabour.DataSource = Nothing
    End If
    
    Set RS = modDBHelper.RetrieveMB("CES_INQUIRY.RETRIEVE_MB")
    
    'Fill in the text boxes
    txtMBNumber.Text = m_str_MBNumber

    If RS.RecordCount > 0 Then
        RS.Filter = "mb_number = '" + m_str_MBNumber + "'"
        txtKeyword.Text = RS.Fields.Item("KEYWORD")
        txtDescription.Text = RS.Fields.Item("DESCRIPTION")
        txtMMSBuyCode.Text = RS.Fields.Item("BUY_CODE")
        txtCoreCode.Text = RS.Fields.Item("CORE_CODE")
        If IsNull(RS.Fields.Item("JOB_NUMBER")) = False Then
           txtJobNumber.Text = RS.Fields.Item("JOB_NUMBER")
        Else
            txtJobNumber.Text = ""
        End If
        
        
        If IsNull(RS.Fields.Item("CORE_COST")) = False Then
            txtCoreCost.Text = Format(RS.Fields.Item("CORE_COST"), "currency")
        Else
            txtCoreCost.Text = Format(0, "currency")
        End If
    End If
    
    Set RS = modDBHelper.RetrieveAllLabourHours("CES_INQUIRY.RETRIEVE_ALL_LABOUR", m_str_MBNumber, "MB")
    
    If RS.RecordCount > 0 Then
        txtLabourCost.Text = Format(ColumnTotals(RS, "TOTAL COST"), "currency")
        RS.MoveFirst
        Set grdTotalTime.DataSource = RS
    Else
        txtLabourCost.Text = Format(0#, "currency")
        Set grdTotalTime.DataSource = Nothing
    End If


   Set RS = modDBHelper.RetrieveRBPTotalCost2("CES_INQUIRY.RETRIEVE_RBP_TOTAL_COST2", m_str_MBNumber, "MB")
        
    If RS.RecordCount > 0 Then
          txtMaterialsTotal.Text = Format(ColumnTotals(RS, "TOTAL COST"), "currency")
          RS.MoveFirst
    Else
        txtMaterialsTotal.Text = Format(0#, "currency")
    End If
 
   'Set RS = RetrieveAllMaterialSummary("CES_INQUIRY.RETRIEVE_ALL_MATERIAL_SUMMARY")


    If RS.RecordCount > 0 Then
        Set grdMaterialCostCentreTotal.DataSource = RS
    End If

    'Populate the List of Bus Series
    Set RS = modDBHelper.RetrieveMBListOfBuses("CES_INQUIRY.MB_LIST_BUSES", _
                                               m_str_MBNumber)
     If RS.RecordCount > 0 Then
        Do While Not RS.EOF
        cboBusSeries.AddItem (RS.Fields(1).Value)
        RS.MoveNext
        Loop
        cboBusSeries.Text = cboBusSeries.List(0)
    End If
    
    ' Retrieve the tax rate
    Set RS = modDBHelper.RetrieveCESSettings("CES_INQUIRY.RETRIEVE_CES_SETTI", _
                                             "TAX_RATE")
    If RS.RecordCount > 0 Then
        dbl_TaxRate = CDbl(Replace(RS.Fields("VALUE").Value, ",", "."))
    Else
        dbl_TaxRate = 0
    End If
    
    'Total each of the sections

    txtLabourOverheadTotal.Text = Format(CCur(txtLabourCost.Text) * _
                                         CCur(g_dbl_OverheadFringeValue), _
                                         "Currency")
    txtLabourTotal.Text = Format(Round(CCur(txtLabourCost.Text) + CCur(txtLabourOverheadTotal.Text), 2), "currency")
    
    frmAddMBMaterials.PassValues m_str_MBNumber
        
    'txtMaterialsTotal.Text = frmAddMBMaterials.txtTotalMaterialsCost.Text
    txtTotalRebuiltCost.Text = Format(CCur(txtLabourTotal.Text) + _
                                      CCur(txtMaterialsTotal.Text) - _
                                      CCur(txtCoreCost.Text), "currency")
    txtTaxTotal.Text = Format((dbl_TaxRate * txtMaterialsTotal.Text), "currency")
    txtTotalRebuiltPartCostWithTax.Text = Format(CCur(txtTaxTotal.Text) + CCur(txtTotalRebuiltCost.Text), "currency")
    
    Set RS = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulatePage", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    If Not RSNewStock Is Nothing Then
        Set RSNewStock = Nothing
    End If
    
    If Not TS Is Nothing Then
        Set TS = Nothing
    End If
    If Not fso Is Nothing Then
        Set fso = Nothing
    End If
End Sub

Private Sub Archive()
    Dim l_Result As Long
    Dim l_RetVal As Long
    
    On Error GoTo Error_Handler
    
    m_str_Msg = "Are you sure you want to Archive this Make vs. Buy?"
    l_Result = MsgBox(m_str_Msg, vbOKCancel Or vbQuestion, "Archive Make vs. Buy?")
    
    If l_Result = vbOK Then
        Call SetWaitCursor
    
        l_Result = modDBHelper.ArchiveMB("CES_ARCHIVE.ARCHIVE_MB", _
                                    l_RetVal, _
                                    txtMBNumber.Text, _
                                    g_str_UserName, _
                                    m_str_MBNumber, _
                                    "MB", _
                                    Trim(txtLabourCost.Text), _
                                    Trim(txtLabourOverheadTotal.Text), _
                                    Trim(txtLabourTotal.Text), _
                                    Trim(txtMaterialsTotal.Text), _
                                    Trim(txtTotalRebuiltCost.Text), _
                                    Trim(txtTaxTotal.Text), _
                                    Trim(txtTotalRebuiltPartCostWithTax.Text))
        If l_Result = 0 Then
            m_str_Msg = "Archiving Make vs. Buy " + txtMBNumber.Text + " is complete."
            MsgBox m_str_Msg, vbOKOnly Or vbInformation, "Make vs. Buy Archiving"
            Call SetDefaultCursor
        Else
            m_str_Msg = "Archiving Make vs. Buy = " + txtMBNumber.Text + " has failed."
            MsgBox m_str_Msg, vbInformation Or vbOKOnly, "Make vs. Buy Archiving"
            Call SetDefaultCursor
        End If
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "archive", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor

    'Close the Add Materials form if it is opened
    If Not frmAddMBMaterials Is Nothing Then
        Unload frmAddMBMaterials
    End If
    
    'Close the View All Labour form if it is opened
    If Not frmViewAllLabour Is Nothing Then
        Unload frmViewAllLabour
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub grdLabour_DblClick()
    Dim str_RowID As String
        
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not go further, just exit sub.
        Exit Sub
    End If
    
    Call SetWaitCursor
    If Not grdLabour.Row Then
        str_RowID = grdLabour.Columns("ROWID").Text
        frmAddLabourTask.m_str_AuditReference = Trim(txtMBNumber.Text)
        frmAddLabourTask.m_str_LinkNumber = m_str_MBNumber
        frmAddLabourTask.m_str_PartID = str_RowID
        frmAddLabourTask.m_str_TypeID = "MB"
        frmAddLabourTask.Show vbModal
        RefreshForm
    Else
        Call SetDefaultCursor
        m_str_Msg = "No Rows to select. Please Try Again."
        MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
    End If
        
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdLabour_DblClick", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub grdLabour_KeyDown(KeyCode As Integer, Shift As Integer)
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_PartID As String
    
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not go further, just exit sub.
        Exit Sub
    End If
    
    If KeyCode = vbKeyDelete Then
        m_str_Msg = "Are you sure you want to delete this item?"
        l_Result = MsgBox(m_str_Msg, vbOKCancel Or vbQuestion, m_str_const_MsgBoxCaption)
        If l_Result = vbOK Then
            Call SetWaitCursor
            str_PartID = grdLabour.Columns("ROWID").Text
            l_Result = modDBHelper.DeleteMBLabour("CES_DELETE.DELETE_MBLABOUR", _
                                                  l_RetVal, _
                                                  str_PartID)
            
            l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                                        "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                                        l_RetVal, _
                                        "Delete Labour", _
                                        txtMBNumber.Text, _
                                        "MB", _
                                        "LABOUR TYPE ---> " + grdLabour.Columns("LABOUR TYPE").Text, _
                                        "CC ---> " + grdLabour.Columns("CC").Text, _
                                        "TASK ---> " + grdLabour.Columns("TASK").Text, _
                                        "USAGE ---> " + grdLabour.Columns("USAGE").Text, _
                                        "TIME ---> " + grdLabour.Columns("TIME").Text, _
                                        "WRENCH TIME ---> " + grdLabour.Columns("WRENCH TIME").Text, _
                                        "DATE REVISED ---> " + grdLabour.Columns("DATE REVISED").Text)
            Call SetDefaultCursor
            Call RefreshForm
        End If
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdLabour_KeyDown", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub InitColumns()
    On Error GoTo Error_Handler
        
     If Not grdLabour.Row Then
        grdLabour.Columns("CC").Width = 500
       'grdLabour.Columns("CC").Visible = False
        grdLabour.Columns("TASK").Width = 1600
        grdLabour.Columns("LABOUR TYPE").Width = 2120
        grdLabour.Columns("USAGE").Width = 620
        grdLabour.Columns("USAGE").Alignment = dbgRight
        grdLabour.Columns("TIME").Width = 600
        grdLabour.Columns("TIME").Alignment = dbgRight
        grdLabour.Columns("WRENCH TIME").Width = 1200
        grdLabour.Columns("WRENCH TIME").Alignment = dbgRight
        grdLabour.Columns("DATE REVISED").Width = 1900 '1725
        grdLabour.Columns("DATE REVISED").Alignment = dbgRight
        grdLabour.Columns("DATE REVISED").NumberFormat = "yyyy-mmm-dd hh:mm AMPM"
        grdLabour.Columns("TIME ADDITION").Visible = False
        grdLabour.Columns("VALUE").Visible = False
        grdLabour.Columns("ROWID").Visible = False
    End If

    If Not grdMaterialCostCentreTotal.Row Then
        With grdMaterialCostCentreTotal
            .Columns("CC").Width = 500
            .Columns("CC").Caption = "CC"
            .Columns("TOTAL COST").Alignment = dbgRight
            .Columns("TOTAL COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("TOTAL COST").Width = 1400
            .Columns("TAXABLE COST").Visible = False
        End With
    End If
    
    If Not grdTotalTime.Row Then
        grdTotalTime.Columns("COST CENTRE").Width = 500
        grdTotalTime.Columns("COST CENTRE").Caption = "CC"
        grdTotalTime.Columns("LABOUR HRS").Width = 1200
        grdTotalTime.Columns("LABOUR HRS").Alignment = dbgRight
        grdTotalTime.Columns("TOTAL COST").Visible = False
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "InitColumns", g_l_ErrorLineNumber
End Sub

Private Sub cmdMakeVsBuyInfo_Click()
    On Error GoTo Error_Handler
    
    frmMakeBuy.m_str_MBNumber = m_str_MBNumber
    frmMakeBuy.m_str_AuditReference = Trim(txtMBNumber.Text)
    frmMakeBuy.Show vbModal
    RefreshForm
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdMakeVsBuyInfo_Click", g_l_ErrorLineNumber
End Sub

Private Sub PopulateChangesMadeBy()
    Dim l_count As Long
    Dim str_Temp As String
    Dim RS As ADODB.Recordset

    On Error GoTo Error_Handler
    
    cboChangesMadeBy.Clear
    
    Set RS = New ADODB.Recordset
    'Populate cboChangesMadeBy combo-box. Show only 5 recent items.
    Set RS = modDBHelper.RetrieveAudit6( _
                    "CES_INQUIRY.RETRIEVE_AUDIT_6", _
                    txtMBNumber.Text, _
                    "MB")
    
    If RS.RecordCount > 0 Then
        RS.MoveFirst
        For l_count = 0 To RS.RecordCount - 1
            If l_count = 5 Then
                Exit For
            End If
            str_Temp = Format(RS.Fields.Item("DATE_CHANGED"), "yyyy-mmm-dd hh:mm:ss AMPM")
            str_Temp = CStr(str_Temp)
            str_Temp = str_Temp + " ---> "
            str_Temp = str_Temp + CStr(RS.Fields.Item("USER_NAME"))
            cboChangesMadeBy.AddItem str_Temp
            RS.MoveNext
        Next l_count
    End If
    
    If RS.RecordCount > 0 Then
        cboChangesMadeBy.Text = cboChangesMadeBy.List(0)
    End If
    
    Set RS = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateChangesMadeBy", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub ConvertToRebuiltPart()
    Dim RS As ADODB.Recordset
    Dim str_RebuiltNum As String
    
    On Error GoTo Error_Handler
    
    Set RS = modDBHelper.RetrieveMBListByMBNumber( _
                                        "CES_INQUIRY.RETRIEVE_MB_LIST_BY_MB_NUMBER", _
                                        Trim(txtMBNumber.Text))
    str_RebuiltNum = RS("REBUILD_CODE")
    
    If str_RebuiltNum <> " " Then
        frmConvertToRebuiltPart.txtRebuiltPartNumber = str_RebuiltNum
        frmConvertToRebuiltPart.txtRebuiltPartNumber.Enabled = False
        frmConvertToRebuiltPart.txtRebuiltPartNumber.BackColor = -2147483644
    End If
    
    frmConvertToRebuiltPart.txtMakeBuyNumber = Trim(txtMBNumber.Text)
    frmConvertToRebuiltPart.Show vbModal

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuConvertToRebiultPart_Click", g_l_ErrorLineNumber
End Sub

Private Sub tbMenu_ButtonMenuClick(ByVal ButtonMenu As MSComctlLib.ButtonMenu)
    Dim str_Temp As String
    
    On Error GoTo Error_Handler
    
    Select Case ButtonMenu
        Case "Print"
            ShowMakeBuyCostEstimateReport m_str_MBNumber
        Case "Archive MB"
            Archive
            
        Case "Make vs. Buy Information"
            frmMakeBuy.m_str_MBNumber = m_str_MBNumber
            frmMakeBuy.m_str_AuditReference = Trim(txtMBNumber.Text)
            frmMakeBuy.Show vbModal
            RefreshForm
        Case "Close"
            Unload Me
        Case "Add A Labour Task"
            frmAddLabourTask.m_str_LinkNumber = m_str_MBNumber
            frmAddLabourTask.m_str_AuditReference = Trim(txtMBNumber.Text)
            frmAddLabourTask.m_str_TypeID = "MB"
            frmAddLabourTask.Show vbModal
            Call RefreshForm
        Case "Convert to Rebuilt Part"
            Call ConvertToRebuiltPart
        Case "Material Listings"
            frmAddMBMaterials.PassValues m_str_MBNumber
            If frmAddMBMaterials.WindowState = 1 Then
                frmAddMBMaterials.WindowState = 0
            End If
            frmAddMBMaterials.Show
            frmAddMBMaterials.SetFocus
        Case "Modify History"
            'Close the Audit form if it is opened.
            If Not frmViewAudit Is Nothing Then
                Unload frmViewAudit
            End If
            str_Temp = " - Make Vs. Buy Estimate for Make Vs. Buy #: " + txtMBNumber.Text
            frmViewAudit.m_str_EstimateNumber = Trim(txtMBNumber.Text)
            frmViewAudit.m_b_FromAdministration = False
            frmViewAudit.m_str_EstimateType = "MB"
            frmViewAudit.Caption = frmViewAudit.Caption + str_Temp
            frmViewAudit.Show
        Case "Archive Database"
            frmArchivedHistory.m_str_LinkCode = m_str_MBNumber
            frmArchivedHistory.m_str_EstimateType = "MB"
            frmArchivedHistory.Show
        Case "All Labour"
            frmViewAllLabour.PassValues m_str_MBNumber, "MB"
            If frmViewAllLabour.WindowState = 1 Then
                frmViewAllLabour.WindowState = 0
            End If
            frmViewAllLabour.Show
            frmViewAllLabour.SetFocus
    End Select
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "tbMenu_ButtonMenuClick", g_l_ErrorLineNumber
End Sub

frmMBEstimateOptions.frm :
VERSION 5.00
Begin VB.Form frmMBEstimateOptions 
   BorderStyle     =   3  'Fixed Dialog
   Caption         =   "Make Vs. Buy Estimate Options"
   ClientHeight    =   2280
   ClientLeft      =   45
   ClientTop       =   360
   ClientWidth     =   4680
   LinkTopic       =   "Form1"
   LockControls    =   -1  'True
   MaxButton       =   0   'False
   MinButton       =   0   'False
   ScaleHeight     =   2280
   ScaleWidth      =   4680
   ShowInTaskbar   =   0   'False
   StartUpPosition =   3  'Windows Default
   Begin VB.OptionButton optLoadMBEstimate 
      BackColor       =   &H80000004&
      Caption         =   "Load Make vs. Buy Estimate"
      Height          =   360
      Left            =   1275
      TabIndex        =   2
      Top             =   685
      Value           =   -1  'True
      Width           =   2540
   End
   Begin VB.CommandButton cmdContinue 
      Caption         =   "Continue"
      Default         =   -1  'True
      Height          =   345
      Left            =   1875
      TabIndex        =   1
      Top             =   1600
      Width           =   975
   End
   Begin VB.OptionButton optCopyMBEstimate 
      Caption         =   "Copy Make vs. Buy Estimate"
      Height          =   360
      Left            =   1275
      TabIndex        =   0
      Top             =   1067
      Width           =   2555
   End
   Begin VB.Label lblSelectAnOption 
      Alignment       =   2  'Center
      Caption         =   "Select An Option"
      BeginProperty Font 
         Name            =   "Times New Roman"
         Size            =   14.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   285
      Left            =   1275
      TabIndex        =   3
      Top             =   150
      Width           =   2145
   End
End
Attribute VB_Name = "frmMBEstimateOptions"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Option Explicit

Public m_str_MBNumber As String
Public m_v_RowID As Variant

Private Sub UserPermissions()
    On Error GoTo Error_Handler

    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        optLoadMBEstimate.Value = True
        optCopyMBEstimate.Visible = False
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "userPermissions", g_l_ErrorLineNumber
End Sub

Private Sub cmdContinue_Click()
    On Error GoTo Error_Handler

    Call SetWaitCursor
    
    If optLoadMBEstimate.Value = True Then
        frmMakeBuyEstimate.PassValues m_str_MBNumber, m_v_RowID
        Unload Me
        If frmMakeBuyEstimate.WindowState = 1 Then
           frmMakeBuyEstimate.WindowState = 0
        End If
        frmMakeBuyEstimate.Show
        frmMakeBuyEstimate.SetFocus
    ElseIf optCopyMBEstimate.Value = True Then
        Unload Me
        frmCopyMBEstimate.PassMBNumber m_str_MBNumber
        frmCopyMBEstimate.Show vbModal
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdContinue_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    Call UserPermissions
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub


Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

frmOEMKitMaterials.frm :
VERSION 5.00
Object = "{0D452EE1-E08F-101A-852E-02608C4D0BB4}#2.0#0"; "FM20.DLL"
Object = "{CDE57A40-8B86-11D0-B3C6-00A0C90AEA82}#1.0#0"; "msdatgrd.ocx"
Object = "{831FDD16-0C5C-11D2-A9FC-0000F8754DA1}#2.0#0"; "Mscomctl.ocx"
Begin VB.Form frmOEMKitMaterials 
   BorderStyle     =   1  'Fixed Single
   Caption         =   "OEM KIT PARTS"
   ClientHeight    =   8745
   ClientLeft      =   150
   ClientTop       =   435
   ClientWidth     =   9720
   Icon            =   "frmOEMKitMaterials.frx":0000
   LinkTopic       =   "Form11"
   MDIChild        =   -1  'True
   ScaleHeight     =   8745
   ScaleWidth      =   9720
   ShowInTaskbar   =   0   'False
   Begin MSDataGridLib.DataGrid grdPartList 
      Height          =   5865
      Left            =   120
      TabIndex        =   19
      Top             =   1260
      Width           =   9495
      _ExtentX        =   16748
      _ExtentY        =   10345
      _Version        =   393216
      BackColor       =   12648447
      ForeColor       =   16711680
      HeadLines       =   1
      RowHeight       =   17
      BeginProperty HeadFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Caption         =   "PARTS LIST"
      ColumnCount     =   2
      BeginProperty Column00 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   4105
            SubFormatType   =   0
         EndProperty
      EndProperty
      BeginProperty Column01 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   4105
            SubFormatType   =   0
         EndProperty
      EndProperty
      SplitCount      =   1
      BeginProperty Split0 
         BeginProperty Column00 
         EndProperty
         BeginProperty Column01 
         EndProperty
      EndProperty
   End
   Begin VB.Frame frameFindPart 
      Caption         =   "Find Part"
      Height          =   1455
      Left            =   120
      TabIndex        =   13
      Top             =   7200
      Width           =   5295
      Begin VB.CommandButton cmdFindNext 
         Caption         =   "Find Next"
         Height          =   375
         Left            =   4080
         TabIndex        =   17
         Top             =   960
         Width           =   1095
      End
      Begin VB.TextBox txtKeyToSearch 
         Height          =   330
         Left            =   2160
         TabIndex        =   16
         Top             =   480
         Width           =   3015
      End
      Begin VB.OptionButton optNSCPart 
         Caption         =   "Non-Stock Coded Part"
         Height          =   255
         Left            =   120
         TabIndex        =   15
         Top             =   240
         Value           =   -1  'True
         Width           =   2055
      End
      Begin VB.OptionButton optSCPart 
         Caption         =   "Stock Coded Part"
         Height          =   255
         Left            =   120
         TabIndex        =   14
         Top             =   600
         Width           =   1695
      End
      Begin VB.Label lblKeyToSearch 
         Caption         =   "Supplier Number:"
         Height          =   255
         Left            =   2160
         TabIndex        =   18
         Top             =   240
         Width           =   1575
      End
   End
   Begin MSComctlLib.Toolbar tbMenu 
      Align           =   1  'Align Top
      Height          =   360
      Left            =   0
      TabIndex        =   12
      Top             =   0
      Width           =   9720
      _ExtentX        =   17145
      _ExtentY        =   635
      ButtonWidth     =   1296
      ButtonHeight    =   582
      Appearance      =   1
      Style           =   1
      TextAlignment   =   1
      _Version        =   393216
      BeginProperty Buttons {66833FE8-8583-11D1-B16A-00C0F0283628} 
         NumButtons      =   2
         BeginProperty Button1 {66833FEA-8583-11D1-B16A-00C0F0283628} 
            Caption         =   "File"
            Style           =   5
            BeginProperty ButtonMenus {66833FEC-8583-11D1-B16A-00C0F0283628} 
               NumButtonMenus  =   2
               BeginProperty ButtonMenu1 {66833FEE-8583-11D1-B16A-00C0F0283628} 
                  Text            =   "Print"
               EndProperty
               BeginProperty ButtonMenu2 {66833FEE-8583-11D1-B16A-00C0F0283628} 
                  Text            =   "Close"
               EndProperty
            EndProperty
         EndProperty
         BeginProperty Button2 {66833FEA-8583-11D1-B16A-00C0F0283628} 
            Caption         =   "View"
            Style           =   5
            BeginProperty ButtonMenus {66833FEC-8583-11D1-B16A-00C0F0283628} 
               NumButtonMenus  =   2
               BeginProperty ButtonMenu1 {66833FEE-8583-11D1-B16A-00C0F0283628} 
                  Text            =   "Sub Kits"
               EndProperty
               BeginProperty ButtonMenu2 {66833FEE-8583-11D1-B16A-00C0F0283628} 
                  Text            =   "Modify History"
               EndProperty
            EndProperty
         EndProperty
      EndProperty
   End
   Begin VB.CommandButton cmdAddPart 
      Caption         =   "Add Part"
      Height          =   360
      Left            =   4275
      TabIndex        =   1
      Top             =   810
      Width           =   1095
   End
   Begin MSDataGridLib.DataGrid grdStockCodedPartsList 
      Height          =   810
      Left            =   6510
      TabIndex        =   2
      Top             =   1080
      Width           =   3000
      _ExtentX        =   5292
      _ExtentY        =   1429
      _Version        =   393216
      BackColor       =   12648447
      ForeColor       =   16711680
      HeadLines       =   1
      RowHeight       =   15
      BeginProperty HeadFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Caption         =   "STOCK CODED PARTS LIST"
      ColumnCount     =   2
      BeginProperty Column00 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      BeginProperty Column01 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      SplitCount      =   1
      BeginProperty Split0 
         BeginProperty Column00 
            ColumnWidth     =   2160
         EndProperty
         BeginProperty Column01 
            ColumnWidth     =   2160
         EndProperty
      EndProperty
   End
   Begin MSDataGridLib.DataGrid grdNonStockCodedPartsList 
      Height          =   810
      Left            =   135
      TabIndex        =   11
      Top             =   1110
      Width           =   2820
      _ExtentX        =   4974
      _ExtentY        =   1429
      _Version        =   393216
      BackColor       =   12648447
      ForeColor       =   16711680
      HeadLines       =   1
      RowHeight       =   15
      BeginProperty HeadFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Caption         =   "NON-STOCK CODED PARTS LIST"
      ColumnCount     =   2
      BeginProperty Column00 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      BeginProperty Column01 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      SplitCount      =   1
      BeginProperty Split0 
         BeginProperty Column00 
            ColumnWidth     =   2160
         EndProperty
         BeginProperty Column01 
            ColumnWidth     =   2160
         EndProperty
      EndProperty
   End
   Begin VB.Label lblCoreCostTotal 
      Alignment       =   1  'Right Justify
      Caption         =   "Core Cost "
      Height          =   210
      Left            =   7320
      TabIndex        =   10
      Top             =   8040
      Width           =   915
   End
   Begin MSForms.TextBox txtCoreCostTotal 
      Height          =   330
      Left            =   8310
      TabIndex        =   9
      Top             =   7950
      Width           =   1275
      VariousPropertyBits=   746604569
      Size            =   "2249;582"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   3
   End
   Begin MSForms.TextBox txtStockCodedPartsTotal 
      Height          =   330
      Left            =   8310
      TabIndex        =   4
      Top             =   7590
      Width           =   1275
      VariousPropertyBits=   746604569
      Size            =   "2249;582"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   3
   End
   Begin MSForms.TextBox txtNonStockCodedPartsTotal 
      Height          =   330
      Left            =   8310
      TabIndex        =   3
      Top             =   7230
      Width           =   1275
      VariousPropertyBits=   746604569
      Size            =   "2249;582"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   3
   End
   Begin MSForms.TextBox txtOEMKitTotalCost 
      Height          =   330
      Left            =   8310
      TabIndex        =   5
      Top             =   8310
      Width           =   1275
      VariousPropertyBits=   746604569
      Size            =   "2249;582"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   3
   End
   Begin VB.Label lblStockCodedParts 
      Alignment       =   1  'Right Justify
      Caption         =   "Stock Coded Parts"
      Height          =   210
      Left            =   6840
      TabIndex        =   8
      Top             =   7680
      Width           =   1395
   End
   Begin VB.Label lblOEMKitTotalCost 
      Alignment       =   1  'Right Justify
      Caption         =   "OEM Kit Total Cost "
      Height          =   240
      Left            =   6780
      TabIndex        =   7
      Top             =   8400
      Width           =   1455
   End
   Begin VB.Label lblNonStockCodedParts 
      Alignment       =   1  'Right Justify
      Caption         =   "Non-Stock Coded Parts"
      Height          =   255
      Left            =   6540
      TabIndex        =   6
      Top             =   7320
      Width           =   1695
   End
   Begin MSForms.TextBox txtVehicleNumber 
      Height          =   330
      Left            =   1350
      TabIndex        =   0
      Top             =   375
      Width           =   6750
      VariousPropertyBits=   746604569
      Size            =   "11906;582"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   3
   End
End
Attribute VB_Name = "frmOEMKitMaterials"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Option Explicit
Public m_str_KitNumber As String
Public m_l_VehicleListID As Long

Private m_str_PreviousSearch As String
Private m_str_PreviousSearchType As String
Private m_var_RowSelected As Variant

Public Sub PassValues(ByVal str_KitNumber As String, _
                      ByVal l_VehicleListID As Long)
    On Error GoTo Error_Handler
    
    m_str_KitNumber = str_KitNumber
    m_l_VehicleListID = l_VehicleListID
    Call RefreshForm
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PassValues", g_l_ErrorLineNumber
End Sub

Private Sub RefreshForm()
    Dim l_RetVal As Long
    Dim l_Result As Long
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    txtVehicleNumber.Text = m_str_KitNumber
    Call Populate_Page
    Call FormatGrids
    Call UserPermissions
    
    l_Result = modDBHelper.UpdateOEMKitCost("CES_UPDATE.UPDATE_OEMKit_COST", _
                                                l_RetVal, _
                                                m_str_KitNumber, _
                                                CCur(txtOEMKitTotalCost.Text))
    
    If Not frmVehCostEstimateMain Is Nothing Then
        Call frmVehCostEstimateMain.RefreshOEMKits
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "RefreshForm", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub UserPermissions()
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Then
        'Button <Add Part> is invisible.
        cmdAddPart.Visible = False
        'Controls at the bottom of the page are invisible.
        lblNonStockCodedParts.Visible = False
        lblStockCodedParts.Visible = False
        lblCoreCostTotal.Visible = False
        lblOEMKitTotalCost.Visible = False
        txtNonStockCodedPartsTotal.Visible = False
        txtStockCodedPartsTotal.Visible = False
        txtCoreCostTotal.Visible = False
        txtOEMKitTotalCost.Visible = False
        'Edit-box txtVehicleNumber is disabled.
        txtVehicleNumber.Enabled = False
        If grdNonStockCodedPartsList.Columns.Count > 2 Then
            'Grid "Non Stock Coded Parts List". Columns "COST", "CORE_COST", "TOTAL_COST"
            'are invisible.
            grdNonStockCodedPartsList.Columns("UNIT COST").Visible = False
            grdNonStockCodedPartsList.Columns("TOTAL COST").Visible = False
            grdNonStockCodedPartsList.Columns("CORE COST").Visible = False
        End If
        If grdStockCodedPartsList.Columns.Count > 2 Then
            'Grid "Stock Coded Parts List". Columns "UNIT_COST", "CORE_COST", "TOTAL_COST"
            'are invisible.
            grdStockCodedPartsList.Columns("UNIT COST").Visible = False
            grdStockCodedPartsList.Columns("TOTAL COST").Visible = False
            grdStockCodedPartsList.Columns("CORE COST").Visible = False
        End If
        If grdPartList.Columns.Count > 2 Then
            'Grid "Parts List". Columns "COST", "CORE_COST", "TOTAL_COST"
            'are invisible.
            grdPartList.Columns("UNIT COST").Visible = False
            grdPartList.Columns("TOTAL COST").Visible = False
            grdPartList.Columns("CORE COST").Visible = False
        End If
    ElseIf g_l_AccessLevel = 2 Then
        'Button <Add Part> is invisible.
        cmdAddPart.Visible = False
        'Rest controls, except grids, are disabled.
        txtVehicleNumber.Enabled = False
        txtNonStockCodedPartsTotal.Enabled = False
        txtStockCodedPartsTotal.Enabled = False
        txtCoreCostTotal.Enabled = False
        txtOEMKitTotalCost.Enabled = False
    End If
    
    If g_l_AccessLevel < 4 Then
        'Menu <View><Modify History> is disabled.
        tbMenu.Buttons(2).ButtonMenus(1).Enabled = False
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "UserPermissions", g_l_ErrorLineNumber
End Sub

Private Sub cmdAddPart_Click()
    On Error GoTo Error_Handler
    
    frmTypeOfPart.m_str_FormType = "OEMKit"
    frmTypeOfPart.m_str_LinkNumber = m_str_KitNumber
    frmTypeOfPart.optAddRebuiltPart.Visible = False
    frmTypeOfPart.Show vbModal
    Call RefreshForm
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdAddPart", g_l_ErrorLineNumber
End Sub

'Private Sub Form_Load()
'    On Error GoTo Error_Handler
'
'    Call SetWaitCursor
'
'    txtVehicleNumber.Text = m_str_KitNumber
'    Call Populate_Page
'    Call FormatGrids
'    Call UserPermissions
'
'    Call SetDefaultCursor
'    Exit Sub
'Error_Handler:
'    Call SetDefaultCursor
'    modDBHelper.LogErrorToDB Me.Name, "Form_Load", Erl
'End Sub

Private Sub Populate_Page()
    Dim RS As ADODB.Recordset
    Dim RBCoreCostTotal As Currency
    Dim SCPCoreCostTotal As Currency
    Dim NSPCoreCostTotal As Currency
    Dim CoreCostTotal As Currency
        
    On Error GoTo Error_Handler
        
    Set RS = New ADODB.Recordset
    
    'Grids grdNonStockCodedPartsList and grdStockCodedPartsList are hidden. They are
    'still used for making NSPCoreCostTotal and SCPCoreCostTotal calculations.
    'Populate the non-stock coded items
    Set RS = modDBHelper.RetrieveNSCPUsed("CES_INQUIRY.RETRIEVE_NSCP_USED", _
                                          m_str_KitNumber, _
                                          "KIT")
    
    If RS.RecordCount > 0 Then
        Set grdNonStockCodedPartsList.DataSource = RS
        NSPCoreCostTotal = Format(ColumnTotals(RS, "core cost"), "currency")
        RS.MoveFirst
        txtNonStockCodedPartsTotal.Text = Format(ColumnTotals(RS, "total cost"), "currency")
    Else
        Set grdNonStockCodedPartsList.DataSource = Nothing
        NSPCoreCostTotal = Format(0#, "currency")
        txtNonStockCodedPartsTotal.Text = Format(0#, "currency")
    End If
        
    'Populate the stock coded items
    Set RS = modDBHelper.RetrieveSCPUsed("CES_INQUIRY.RETRIEVE_SCP_USED", _
                                         m_str_KitNumber, _
                                         "N", _
                                         "KIT")
    If RS.RecordCount > 0 Then
        Set grdStockCodedPartsList.DataSource = RS
        SCPCoreCostTotal = Format( _
                                    ColumnTotals(RS, "core cost"), "currency")
        
        RS.MoveFirst
        txtStockCodedPartsTotal.Text = Format( _
                                    ColumnTotals(RS, "total cost"), "currency")
    Else
        Set grdStockCodedPartsList.DataSource = Nothing
        SCPCoreCostTotal = Format(0#, "currency")
        txtStockCodedPartsTotal.Text = Format(0#, "currency")
    End If

    'Populate the grdPartList grid
    Set RS = modDBHelper.GetKitParts("CES_INQUIRY.GET_KIT_PARTS", _
                                   m_str_KitNumber, _
                                   "KIT", _
                                   "N")
    If RS.RecordCount > 0 Then
        Set grdPartList.DataSource = RS
    Else
        Set grdPartList.DataSource = Nothing
    End If
    
    CoreCostTotal = SCPCoreCostTotal + NSPCoreCostTotal
        
    'Calculate the materials total
    txtCoreCostTotal.Text = Format((CoreCostTotal * -1), "currency")
    txtOEMKitTotalCost.Text = Format(CCur(txtNonStockCodedPartsTotal.Text) + _
                               CCur(txtStockCodedPartsTotal.Text) - CoreCostTotal, "currency")
    
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Populate_Page", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub FormatGrids()
    On Error GoTo Error_Handler
     
    If grdNonStockCodedPartsList.Columns.Count > 2 Then
        With grdNonStockCodedPartsList
            .Columns("SUPPLIER NUMBER").Width = 1900
            .Columns("SUPPLIER NAME").Width = 1700
            .Columns("CC").Width = 500
            .Columns("QTY").Alignment = dbgRight
            .Columns("QTY").Width = 500
            .Columns("%").Alignment = dbgRight
            .Columns("%").Width = 500
            .Columns("UNIT COST").Alignment = dbgRight
            .Columns("UNIT COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("UNIT COST").Width = 1200
            .Columns("CORE COST").Alignment = dbgRight
            .Columns("CORE COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("CORE COST").Width = 1200
            .Columns("TOTAL COST").Alignment = dbgRight
            .Columns("TOTAL COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("TOTAL COST").Width = 1200
            .Columns("DESCRIPTION").Width = 4000
            .Columns("LAST MODIFIED DATE").Alignment = dbgRight
            .Columns("LAST MODIFIED DATE").Width = 2400
            .Columns("LAST MODIFIED DATE").NumberFormat = "yyyy-mmm-dd hh:mm:ss AMPM"
            .Columns("ID").Visible = False
            .Columns("ROWID").Visible = False
        End With
    End If
    grdNonStockCodedPartsList.Visible = False
    
    If grdStockCodedPartsList.Columns.Count > 2 Then
        With grdStockCodedPartsList
            .Columns("UNIT COST").Alignment = dbgRight
            .Columns("UNIT COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("UNIT COST").Width = 1100
            .Columns("CC").Width = 500
            .Columns("QTY").Alignment = dbgRight
            .Columns("QTY").Width = 500
            .Columns("%").Alignment = dbgRight
            .Columns("%").Width = 500
            .Columns("CORE COST").Alignment = dbgRight
            .Columns("CORE COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("CORE COST").Width = 1200
            .Columns("TOTAL COST").Alignment = dbgRight
            .Columns("TOTAL COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("TOTAL COST").Width = 1200
            .Columns("DESCRIPTION").Width = 4000
            .Columns("DESCRIPTION").Caption = "DESCRIPTION"
            .Columns("OEM COST").Visible = False
            .Columns("MMS REBUILT CODE").Visible = False
            .Columns("REBUILT PART COST").Visible = False
            .Columns("REBUILT PART").Visible = False
            .Columns("ROWID").Visible = False
        End With
    End If
    grdStockCodedPartsList.Visible = False
    
    If grdPartList.Columns.Count > 2 Then
        grdPartList.Columns("PART TYPE").Visible = False
        grdPartList.Columns("ROWID").Visible = False
        grdPartList.Columns("SUPPLIER NUMBER").Width = 1900
        grdPartList.Columns("SUPPLIER NAME").Width = 1700
        grdPartList.Columns("STOCK CODE").Width = 1100
        grdPartList.Columns("CC").Width = 500
        grdPartList.Columns("QTY").Alignment = dbgRight
        grdPartList.Columns("QTY").Width = 500
        grdPartList.Columns("%").Alignment = dbgRight
        grdPartList.Columns("%").Width = 500
        grdPartList.Columns("UNIT COST").Alignment = dbgRight
        grdPartList.Columns("UNIT COST").NumberFormat = "$#,##0.00;($#,##0.00)"
        grdPartList.Columns("UNIT COST").Width = 1100
        grdPartList.Columns("CORE COST").Alignment = dbgRight
        grdPartList.Columns("CORE COST").NumberFormat = "$#,##0.00;($#,##0.00)"
        grdPartList.Columns("CORE COST").Width = 1200
        grdPartList.Columns("TOTAL COST").Alignment = dbgRight
        grdPartList.Columns("TOTAL COST").NumberFormat = "$#,##0.00;($#,##0.00)"
        grdPartList.Columns("TOTAL COST").Width = 1200
        grdPartList.Columns("DESCRIPTION").Width = 4000
        grdPartList.Columns("LAST MODIFIED DATE").Alignment = dbgRight
        grdPartList.Columns("LAST MODIFIED DATE").Width = 2000
        grdPartList.Columns("LAST MODIFIED DATE").NumberFormat = "yyyy-mmm-dd hh:mm:ss AMPM"
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "FormatGrids", g_l_ErrorLineNumber
End Sub

Private Sub cmdSubKits_Click()
    On Error GoTo Error_Handler
        
    frmSubKits.PassValues m_str_KitNumber, m_l_VehicleListID, grdPartList.DataSource
    frmSubKits.Show vbModal
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdSubKits_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub cmdPrint_Click()
 On Error GoTo Error_Handler
    
    showOEMKitsReport txtVehicleNumber.Text

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdPrint_click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub grdPartList_DblClick()
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not go further, just exit sub.
        Exit Sub
    End If
    
    Call SetWaitCursor
    If grdPartList.Row >= 0 Then
        m_var_RowSelected = grdPartList.Bookmark
        If grdPartList.Columns("PART TYPE") = "SC" Then
            'Update the stock coded part
             Dim formshow As New frmAddSCPToEstimate
             formshow.Caption = "Edit a Stock Coded Part in the OEM Kit " + m_str_KitNumber
             formshow.m_str_TypeCode = "KIT"
             formshow.m_str_MBNumber = m_str_KitNumber
             formshow.m_str_AuditReference = m_str_KitNumber
             formshow.PassValues grdPartList.Columns("STOCK CODE").Value, _
                                 grdPartList.Columns("CC").Value, _
                                 grdPartList.Columns("%").Value, _
                                 grdPartList.Columns("QTY").Value, _
                                 grdPartList.Columns("ROWID").Value, _
                                 grdPartList.Columns("CORE COST").Value
             formshow.Show vbModal
        ElseIf grdPartList.Columns("PART TYPE") = "NSC" Then
            'Update the non stock coded part
            Dim formshow1 As New frmAddNSCPToEstimate
            formshow1.m_str_LinkNumber = m_str_KitNumber
            formshow1.Caption = "Edit a Non-Stock Coded Part in the OEM Kit " + m_str_KitNumber
            formshow1.m_str_TypeCode = "KIT"
            formshow1.m_str_AuditReference = m_str_KitNumber
            formshow1.PassValues grdPartList.Columns("SUPPLIER NUMBER").Value, _
                                grdPartList.Columns("SUPPLIER NAME").Value, _
                                grdPartList.Columns("CC").Value, _
                                grdPartList.Columns("%").Value, _
                                grdPartList.Columns("QTY").Value, _
                                grdPartList.Columns("ROWID").Value, _
                                grdPartList.Columns("CORE COST").Value
            formshow1.Show vbModal
        End If
        
        Call RefreshForm
        grdPartList.Bookmark = m_var_RowSelected
    End If
        
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdPartList_DblClick", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub grdPartList_KeyDown(KeyCode As Integer, Shift As Integer)
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim m_str_Msg As String
    Dim str_PartID As String
    Dim RS As ADODB.Recordset
    Dim l_count As Long
    
    On Error GoTo Error_Handler

    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not go further, just exit sub.
        Exit Sub
    End If

    If KeyCode = vbKeyDelete And grdPartList.Row >= 0 Then
        m_str_Msg = "Are you sure you want to delete this item?"
        l_Result = MsgBox(m_str_Msg, vbOKCancel Or vbQuestion, _
                          "Delete Materials of Rebuilt Part")
        If l_Result = vbOK Then
            Call SetWaitCursor
            If grdPartList.Columns("PART TYPE") = "NSC" Then
                str_PartID = grdPartList.Columns("ROWID").Text
                l_Result = modDBHelper.DeleteNSCPUsed("CES_DELETE.DELETE_NSCP_USED", _
                                                      l_RetVal, _
                                                      str_PartID)
                'Insert record for the current OEM Kit into the AUDIT_MODIFY_HISTORY table.
                l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                        "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                        l_RetVal, _
                        "Delete Non-Stock Coded Part", _
                        m_str_KitNumber, _
                        "KIT", _
                        "SUPPLIER NUMBER ---> " + grdPartList.Columns.Item("SUPPLIER NUMBER"), _
                        "SUPPLIER NAME ---> " + grdPartList.Columns.Item("SUPPLIER NAME"), _
                        "CC ---> " + grdPartList.Columns.Item("CC"), _
                        "QTY ---> " + grdPartList.Columns.Item("QTY"), _
                        "% ---> " + grdPartList.Columns.Item("%"), _
                        "UNIT COST ---> " + grdPartList.Columns.Item("UNIT COST"), _
                        "CORE COST ---> " + grdPartList.Columns.Item("CORE COST"), _
                        "TOTAL COST ---> " + grdPartList.Columns.Item("TOTAL COST"), _
                        "DESCRIPTION ---> " + grdPartList.Columns.Item("DESCRIPTION"), _
                        "KEYWORD ---> " + grdPartList.Columns.Item("KEYWORD"), _
                        "LAST MODIFIED DATE ---> " + grdPartList.Columns.Item("LAST MODIFIED DATE"))
                
                'Delete all corresponded items from the SUB_KITS table.
                Call DeleteFromSubKits(m_str_KitNumber, _
                                       grdPartList.Columns.Item("SUPPLIER NUMBER"), _
                                       grdPartList.Columns.Item("SUPPLIER NAME"), _
                                       " ")
                
                'Find all Vehicle Estimates where the current OEM Kit is presented.
                Set RS = New ADODB.Recordset
                Set RS = modDBHelper.RetrieveBusFromKitsUsed("CES_INQUIRY.RETRIEVE_BUS_FROM_KITS_USED", _
                                                             m_str_KitNumber)
                'Insert records for all Vehicle Estimates (where the current OEM Kit is
                'presented) into the AUDIT_MODIFY_HISTORY table.
                If RS.RecordCount > 0 Then
                    RS.MoveFirst
                    For l_count = 0 To RS.RecordCount - 1
                        If IsNull(RS.Fields.Item("link_code")) = False Then
                            l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                                "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                                l_RetVal, _
                                "Indirect change. Non-Stock Coded Part was deleted from the OEM Kit " + m_str_KitNumber + " when user worked with Vehicle Estimate Number " + CStr(m_l_VehicleListID), _
                                RS.Fields.Item("link_code"), _
                                "BUS", _
                                "SUPPLIER NUMBER ---> " + grdPartList.Columns.Item("SUPPLIER NUMBER"), _
                                "SUPPLIER NAME ---> " + grdPartList.Columns.Item("SUPPLIER NAME"), _
                                "CC ---> " + grdPartList.Columns.Item("CC"), _
                                "QTY ---> " + grdPartList.Columns.Item("QTY"), _
                                "% ---> " + grdPartList.Columns.Item("%"), _
                                "UNIT COST ---> " + grdPartList.Columns.Item("UNIT COST"), _
                                "CORE COST ---> " + grdPartList.Columns.Item("CORE COST"), _
                                "TOTAL COST ---> " + grdPartList.Columns.Item("TOTAL COST"), _
                                "DESCRIPTION ---> " + grdPartList.Columns.Item("DESCRIPTION"), _
                                "KEYWORD ---> " + grdPartList.Columns.Item("KEYWORD"), _
                                "LAST MODIFIED DATE ---> " + grdPartList.Columns.Item("LAST MODIFIED DATE"))
                        End If
                        RS.MoveNext
                    Next l_count
                End If
                
                Set RS = Nothing
            ElseIf grdPartList.Columns("PART TYPE") = "SC" Then
                str_PartID = grdPartList.Columns("ROWID").Text
                l_Result = modDBHelper.DeleteSCPUsed("CES_DELETE.DELETE_SCP_USED", _
                                                     l_RetVal, _
                                                     str_PartID)
                'Insert record for the current OEM Kit into the AUDIT_MODIFY_HISTORY table.
                l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                        "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                        l_RetVal, _
                        "Delete Stock Coded Part", _
                        m_str_KitNumber, _
                        "KIT", _
                        "STOCK CODE ---> " + grdPartList.Columns.Item("STOCK CODE"), _
                        "UNIT COST ---> " + grdPartList.Columns.Item("UNIT COST"), _
                        "CC ---> " + grdPartList.Columns.Item("CC"), _
                        "QTY ---> " + grdPartList.Columns.Item("QTY"), _
                        "% ---> " + grdPartList.Columns.Item("%"), _
                        "CORE COST ---> " + grdPartList.Columns.Item("CORE COST"), _
                        "TOTAL COST ---> " + grdPartList.Columns.Item("TOTAL COST"), _
                        "DESCRIPTION ---> " + grdPartList.Columns.Item("DESCRIPTION"), _
                        "KEYWORD ---> " + grdPartList.Columns.Item("KEYWORD"))
    
                'Delete all corresponded items from the SUB_KITS table.
                Call DeleteFromSubKits(m_str_KitNumber, _
                                       " ", _
                                       " ", _
                                       grdPartList.Columns.Item("STOCK CODE"))
                
                'Find all Vehicle Estimates where the current OEM Kit is presented.
                Set RS = New ADODB.Recordset
                Set RS = modDBHelper.RetrieveBusFromKitsUsed("CES_INQUIRY.RETRIEVE_BUS_FROM_KITS_USED", _
                                                             m_str_KitNumber)
                'Insert records for all Vehicle Estimates (where the current OEM Kit is
                'presented) into the AUDIT_MODIFY_HISTORY table.
                If RS.RecordCount > 0 Then
                    RS.MoveFirst
                    For l_count = 0 To RS.RecordCount - 1
                        If IsNull(RS.Fields.Item("link_code")) = False Then
                            l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                                "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                                l_RetVal, _
                                "Indirect change. Stock Coded Part was deleted from the OEM Kit " + m_str_KitNumber + " when user worked with Vehicle Estimate Number " + CStr(m_l_VehicleListID), _
                                RS.Fields.Item("link_code"), _
                                "BUS", _
                                "STOCK CODE ---> " + grdPartList.Columns.Item("STOCK CODE"), _
                                "UNIT COST ---> " + grdPartList.Columns.Item("UNIT COST"), _
                                "CC ---> " + grdPartList.Columns.Item("CC"), _
                                "QTY ---> " + grdPartList.Columns.Item("QTY"), _
                                "% ---> " + grdPartList.Columns.Item("%"), _
                                "CORE COST ---> " + grdPartList.Columns.Item("CORE COST"), _
                                "TOTAL COST ---> " + grdPartList.Columns.Item("TOTAL COST"), _
                                "DESCRIPTION ---> " + grdPartList.Columns.Item("DESCRIPTION"), _
                                "KEYWORD ---> " + grdPartList.Columns.Item("KEYWORD"))
                        End If
                        RS.MoveNext
                    Next l_count
                End If
                Set RS = Nothing
            End If
            Call RefreshForm
        End If
    End If

    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdPartList_KeyDown", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub tbMenu_ButtonMenuClick(ByVal ButtonMenu As MSComctlLib.ButtonMenu)
    Dim str_Temp As String
    
    On Error GoTo Error_Handler
    
    Select Case ButtonMenu
        Case "Close"
            Unload Me
        Case "Print"
            showOEMKitsReport txtVehicleNumber.Text
        Case "Sub Kits"
                
            frmSubKits.PassValues m_str_KitNumber, m_l_VehicleListID, grdPartList.DataSource
            frmSubKits.Show vbModal
    
        Case "Modify History"
            'Close the Audit form if it is opened.
            If Not frmViewAudit Is Nothing Then
                Unload frmViewAudit
            End If
            'And open the Audit form again!
            str_Temp = " - OEM Kit: " + CStr(m_str_KitNumber)
            frmViewAudit.m_str_EstimateNumber = CStr(m_str_KitNumber)
            frmViewAudit.m_b_FromAdministration = False
            frmViewAudit.m_str_EstimateType = "KIT"
            frmViewAudit.Caption = frmViewAudit.Caption + str_Temp
            frmViewAudit.Show
    End Select
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "tbMenu_ButtonMenuClick", g_l_ErrorLineNumber
End Sub

Private Sub optNSCPart_Click()
    On Error GoTo Error_Handler
    
    Call ChangeSearchLabel
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "optNSCPart_Click", g_l_ErrorLineNumber
End Sub

Private Sub optSCPart_Click()
    On Error GoTo Error_Handler
    
    Call ChangeSearchLabel
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "optSCPart_Click", g_l_ErrorLineNumber
End Sub

Private Sub ChangeSearchLabel()
    On Error GoTo Error_Handler
    ' As the type to part to search by is changed, we must change
    ' the label to reflect this
    If optSCPart.Value = True Then
        lblKeyToSearch.Caption = "Stock Code:"
    ElseIf optNSCPart.Value = True Then
        lblKeyToSearch.Caption = "Supplier Number:"
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "ChangeSearchLabel", g_l_ErrorLineNumber
End Sub

Private Function SelectedOption()
    On Error GoTo Error_Handler
    ' As the type to part to search by is changed, we must change
    ' the label to reflect this
    If optSCPart.Value = True Then
        SelectedOption = "SC"
    ElseIf optNSCPart.Value = True Then
        SelectedOption = "NSC"
    Else
        SelectedOption = ""
    End If
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "SelectedOption", g_l_ErrorLineNumber
End Function

Private Sub cmdFindNext_Click()
    Dim RS As ADODB.Recordset
    Dim SearchGrid As DataGrid
    Dim str_SearchField As String
    Dim l_Counter As Long
    
    On Error GoTo Error_Handler
        
    ' Must enter a value to search
    If txtKeyToSearch.Text = "" Then
        MsgBox "Enter a part to find.", vbExclamation, "Cost Estimate System"
        Exit Sub
    End If
    
    ' Get the grid, seach filed and the record set used for searching
    Set SearchGrid = grdPartList
    Select Case SelectedOption()
        Case "SC"
            str_SearchField = "[STOCK CODE]"
        Case "NSC"
            str_SearchField = "[SUPPLIER NUMBER]"
    End Select
    
    If Not SearchGrid.DataSource Is Nothing Then
        Set RS = SearchGrid.DataSource
    Else
        MsgBox "No parts to find.", vbExclamation, "Cost Estimate System"
        Exit Sub
    End If
    
    ' If the grid has lost focus then start seach again
    If RS.AbsolutePage < 0 Then
        m_str_PreviousSearch = ""
        m_str_PreviousSearchType = ""
    End If
    
    ' Determine whether or not they are performing the same
    ' search again or starting a new search
    If m_str_PreviousSearch = txtKeyToSearch.Text And m_str_PreviousSearchType = SelectedOption() Then
        ' Continue Search
        If RS.RecordCount > 0 Then
            RS.AbsolutePosition = RS.Bookmark + 1
            RS.Find str_SearchField & " LIKE '%" & txtKeyToSearch.Text & "%'"
            If RS.EOF Then
                MsgBox "All matching parts have been found.", vbExclamation, "Cost Estimate System"
                m_str_PreviousSearch = ""
                m_str_PreviousSearchType = ""
            Else
                With SearchGrid
                    For l_Counter = .SelBookmarks.Count - 1 To 0 Step -1
                        .SelBookmarks.Remove l_Counter
                    Next
                    .SelBookmarks.Add .RowBookmark(.Row)
                End With
                m_str_PreviousSearch = txtKeyToSearch.Text
                m_str_PreviousSearchType = SelectedOption()
            End If
        Else
            MsgBox "No parts to find.", vbExclamation, "Cost Estimate System"
            m_str_PreviousSearch = txtKeyToSearch.Text
            m_str_PreviousSearchType = SelectedOption()
        End If
    Else
        ' Start New Search
        If RS.RecordCount > 0 Then
            RS.MoveFirst
            RS.Find str_SearchField & " LIKE '%" & txtKeyToSearch.Text & "%'"
            If RS.EOF Then
                RS.MoveFirst
                MsgBox "Part not found.", vbExclamation, "Cost Estimate System"
                With SearchGrid
                    For l_Counter = .SelBookmarks.Count - 1 To 0 Step -1
                        .SelBookmarks.Remove l_Counter
                    Next
                End With
                m_str_PreviousSearch = ""
                m_str_PreviousSearchType = ""
            Else
                With SearchGrid
                    For l_Counter = .SelBookmarks.Count - 1 To 0 Step -1
                        .SelBookmarks.Remove l_Counter
                    Next
                    .SelBookmarks.Add .RowBookmark(.Row)
                End With
                m_str_PreviousSearch = txtKeyToSearch.Text
                m_str_PreviousSearchType = SelectedOption()
            End If
        Else
            MsgBox "No parts to find.", vbExclamation, "Cost Estimate System"
            m_str_PreviousSearch = txtKeyToSearch.Text
            m_str_PreviousSearchType = SelectedOption()
        End If
    End If
            
    Set RS = Nothing
    Set SearchGrid = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdFindNext_Click", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    If Not SearchGrid Is Nothing Then
        Set SearchGrid = Nothing
    End If
End Sub

Private Sub DeleteFromSubKits(ByVal str_KitNumberPassed As String, _
                              ByVal str_SupplierNumber As String, _
                              ByVal str_SupplierName As String, _
                              ByVal str_StockCode As String)
    Dim RS As ADODB.Recordset
    Dim l_count As Long
    Dim str_KitNumber As String
    Dim str_PartType As String
    Dim str_OEMNumber As String
    Dim str_OEM As String
    Dim str_TTCCode As String
    Dim str_QTY As String
    Dim str_RefNumber As String
    Dim str_Description As String
    Dim l_SeqNumber As Long
    Dim l_RetVal As Long
    Dim l_Result As Long
    
    On Error GoTo Error_Handler
    
    'Delete all records from the SUB_KITS table where
    'kit_part_number = str_KitNumberPassed and
    'supplier_number = str_SupplierNumber and
    'supplier_name = str_SupplierName and
    'stock_code = str_StockCode
    l_Result = modDBHelper.DeleteSubKits1( _
                                "CES_DELETE.DELETE_SUB_KITS1", _
                                l_RetVal, _
                                str_KitNumberPassed, _
                                str_SupplierNumber, _
                                str_SupplierName, _
                                str_StockCode)
    'Get all records from the SUB_KIT table
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.GetAllFromSubKits("CES_INQUIRY.GET_ALL_FROM_SUB_KITS")
    
    'Delete ALL records from the SUB_KITS table.
    l_Result = modDBHelper.DeleteAllSubKits("CES_DELETE.DELETE_ALL_SUB_KITS", l_RetVal)
    
    'Go throufh each record, and change field SUB_KITS.sequence to be sequential
    '(i.e. 1,2,3,4,5,6, etc.)
    If RS.RecordCount > 0 Then
        RS.MoveFirst
        For l_count = 1 To RS.RecordCount
            str_KitNumber = modMain.ChangeNullToOneSpase(RS.Fields("KIT NUMBER"))
            str_PartType = modMain.ChangeNullToOneSpase(RS.Fields("PART TYPE"))
            str_OEMNumber = modMain.ChangeNullToOneSpase(RS.Fields("OEM #"))
            str_OEM = modMain.ChangeNullToOneSpase(RS.Fields("OEM"))
            str_TTCCode = modMain.ChangeNullToOneSpase(RS.Fields("TTC CODE"))
            str_QTY = modMain.ChangeNullToOneSpase(RS.Fields("QTY"))
            str_RefNumber = modMain.ChangeNullToOneSpase(RS.Fields("REF #"))
            str_Description = modMain.ChangeNullToOneSpase(RS.Fields("DESCRIPTION"))
            l_SeqNumber = l_count + 1
            
            l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", _
                        l_RetVal, _
                        str_KitNumber, _
                        str_PartType, _
                        str_OEMNumber, _
                        str_OEM, _
                        str_TTCCode, _
                        str_QTY, _
                        str_RefNumber, _
                        str_Description, _
                        l_SeqNumber)
            RS.MoveNext
        Next l_count
    End If

    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "DeleteFromSubKits", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

frmOEMKitMaterialsRegistered.frm :
VERSION 5.00
Object = "{0D452EE1-E08F-101A-852E-02608C4D0BB4}#2.0#0"; "FM20.DLL"
Begin VB.Form frmOEMKitMaterialsRegistered 
   BorderStyle     =   1  'Fixed Single
   Caption         =   "OEM Kit Materials "
   ClientHeight    =   9015
   ClientLeft      =   45
   ClientTop       =   330
   ClientWidth     =   8490
   Icon            =   "frmOEMKitMaterialsRegistered.frx":0000
   LinkTopic       =   "Form1"
   MDIChild        =   -1  'True
   ScaleHeight     =   9015
   ScaleWidth      =   8490
   Begin MSForms.ListBox lstOEMKitRegInfo 
      Height          =   9060
      Left            =   -75
      TabIndex        =   0
      Top             =   0
      Width           =   8580
      ScrollBars      =   3
      DisplayStyle    =   2
      Size            =   "15134;15981"
      MatchEntry      =   0
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
   End
End
Attribute VB_Name = "frmOEMKitMaterialsRegistered"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Option Explicit

Private m_str_OEMKitNumber As String

Public Sub PassValue(ByVal str_OEMKitNumber As String)
    On Error GoTo Error_Handler
    
    m_str_OEMKitNumber = str_OEMKitNumber
    Call RefreshForm
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PassValues", g_l_ErrorLineNumber
End Sub

Private Sub RefreshForm()
    Dim RS As ADODB.Recordset

    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    Me.Caption = "OEM KIT " & m_str_OEMKitNumber
    'Load current vehicle's kit list
    Set RS = modDBHelper.retrieveSCKitData("CES_INQUIRY.RETRIEVE_SC_KIT_DATA", _
                                                 m_str_OEMKitNumber)
      lstOEMKitRegInfo.Clear
    
      If RS.RecordCount > 0 Then
          RS.MoveFirst
      End If

      If Not RS.EOF Then
          Do While Not RS.EOF
              lstOEMKitRegInfo.AddItem RS.Fields("text_data")
              RS.MoveNext
         
          Loop
      Else
          lstOEMKitRegInfo.AddItem "No OEM Kit Details found in MMS"
      End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "RefreshForm", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler

    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub
frmParamCostVarianceReport.frm :
VERSION 5.00
Begin VB.Form frmParamCostVarianceReport 
   Caption         =   "Form1"
   ClientHeight    =   3195
   ClientLeft      =   60
   ClientTop       =   345
   ClientWidth     =   4680
   LinkTopic       =   "Form1"
   ScaleHeight     =   3195
   ScaleWidth      =   4680
   StartUpPosition =   3  'Windows Default
   Visible         =   0   'False
End
Attribute VB_Name = "frmParamCostVarianceReport"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Private Sub Form_Load()
On Error GoTo Error_Handler
    
    Call SetWaitCursor
       
    'Call the report to display the result of the above sp
    showCostVarianceReport
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdViewReport_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub
frmRebuiltPartsAddMaterials.frm :
VERSION 5.00
Object = "{0D452EE1-E08F-101A-852E-02608C4D0BB4}#2.0#0"; "FM20.DLL"
Object = "{CDE57A40-8B86-11D0-B3C6-00A0C90AEA82}#1.0#0"; "msdatgrd.ocx"
Begin VB.Form frmRebuiltPartsAddMaterials 
   BorderStyle     =   1  'Fixed Single
   Caption         =   "Rebuilt Part Materials List"
   ClientHeight    =   11070
   ClientLeft      =   45
   ClientTop       =   330
   ClientWidth     =   9900
   Icon            =   "frmRebuiltPartsAddMaterials.frx":0000
   LinkTopic       =   "Form9"
   MDIChild        =   -1  'True
   ScaleHeight     =   11070
   ScaleWidth      =   9900
   ShowInTaskbar   =   0   'False
   Begin VB.CommandButton cmdRefresh 
      Caption         =   "Refresh"
      Height          =   360
      Left            =   4860
      TabIndex        =   23
      Top             =   825
      Width           =   1140
   End
   Begin VB.Frame frameFindPart 
      Caption         =   "Find Part"
      Height          =   1455
      Left            =   120
      TabIndex        =   16
      Top             =   9480
      Width           =   5295
      Begin VB.OptionButton optRBPart 
         Caption         =   "Rebuilt Part"
         Height          =   255
         Left            =   120
         TabIndex        =   21
         Top             =   240
         Value           =   -1  'True
         Width           =   1335
      End
      Begin VB.OptionButton optSCPart 
         Caption         =   "Stock Coded Part"
         Height          =   255
         Left            =   120
         TabIndex        =   20
         Top             =   600
         Width           =   1695
      End
      Begin VB.OptionButton optNSCPart 
         Caption         =   "Non-Stock Coded Part"
         Height          =   255
         Left            =   120
         TabIndex        =   19
         Top             =   960
         Width           =   2055
      End
      Begin VB.TextBox txtKeyToSearch 
         Height          =   330
         Left            =   2160
         TabIndex        =   18
         Top             =   480
         Width           =   3015
      End
      Begin VB.CommandButton cmdFindNext 
         Caption         =   "Find Next"
         Height          =   375
         Left            =   4080
         TabIndex        =   17
         Top             =   960
         Width           =   1095
      End
      Begin VB.Label lblKeyToSearch 
         Caption         =   "Rebuilt Number:"
         Height          =   255
         Left            =   2160
         TabIndex        =   22
         Top             =   240
         Width           =   1575
      End
   End
   Begin MSDataGridLib.DataGrid grdRebuiltPartsList 
      Height          =   2610
      Left            =   0
      TabIndex        =   6
      Top             =   1320
      Width           =   9780
      _ExtentX        =   17251
      _ExtentY        =   4604
      _Version        =   393216
      BackColor       =   12648447
      ForeColor       =   16711680
      HeadLines       =   1
      RowHeight       =   15
      BeginProperty HeadFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Caption         =   "REBUILT PARTS LIST"
      ColumnCount     =   2
      BeginProperty Column00 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      BeginProperty Column01 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      SplitCount      =   1
      BeginProperty Split0 
         BeginProperty Column00 
         EndProperty
         BeginProperty Column01 
         EndProperty
      EndProperty
   End
   Begin VB.CommandButton cmdAddPart 
      Caption         =   "Add Part"
      Height          =   360
      Left            =   3660
      TabIndex        =   1
      Top             =   825
      Width           =   1215
   End
   Begin MSDataGridLib.DataGrid grdStockCodedPartsList 
      Height          =   2610
      Left            =   0
      TabIndex        =   7
      Top             =   4080
      Width           =   9780
      _ExtentX        =   17251
      _ExtentY        =   4604
      _Version        =   393216
      BackColor       =   12648447
      ForeColor       =   16711680
      HeadLines       =   1
      RowHeight       =   15
      BeginProperty HeadFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Caption         =   "STOCK CODED PARTS LIST"
      ColumnCount     =   2
      BeginProperty Column00 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      BeginProperty Column01 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      SplitCount      =   1
      BeginProperty Split0 
         BeginProperty Column00 
            ColumnWidth     =   2160
         EndProperty
         BeginProperty Column01 
            ColumnWidth     =   2160
         EndProperty
      EndProperty
   End
   Begin MSDataGridLib.DataGrid grdNonStockCodedPartsList 
      Height          =   2565
      Left            =   0
      TabIndex        =   8
      Top             =   6780
      Width           =   9780
      _ExtentX        =   17251
      _ExtentY        =   4524
      _Version        =   393216
      BackColor       =   12648447
      ForeColor       =   16711680
      HeadLines       =   1
      RowHeight       =   15
      BeginProperty HeadFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Caption         =   "NON-STOCK CODED PARTS LIST"
      ColumnCount     =   2
      BeginProperty Column00 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      BeginProperty Column01 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      SplitCount      =   1
      BeginProperty Split0 
         BeginProperty Column00 
            ColumnWidth     =   2160
         EndProperty
         BeginProperty Column01 
            ColumnWidth     =   2160
         EndProperty
      EndProperty
   End
   Begin VB.Label lblCoreCostTotal 
      Caption         =   "Core Cost Total"
      Height          =   255
      Left            =   6360
      TabIndex        =   15
      Top             =   10485
      Width           =   1410
   End
   Begin MSForms.TextBox txtCoreCostTotal 
      BeginProperty DataFormat 
         Type            =   1
         Format          =   """$""#,##0.00;(""$""#,##0.00)"
         HaveTrueFalseNull=   0
         FirstDayOfWeek  =   0
         FirstWeekOfYear =   0
         LCID            =   4105
         SubFormatType   =   2
      EndProperty
      Height          =   300
      Left            =   8520
      TabIndex        =   14
      Top             =   10440
      Width           =   1215
      VariousPropertyBits=   746604569
      Size            =   "2143;529"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
   Begin VB.Label lblRebuiltPartsTotal 
      Caption         =   "Rebuilt Parts Total"
      Height          =   195
      Left            =   6360
      TabIndex        =   13
      Top             =   9570
      Width           =   1380
   End
   Begin VB.Label lblTotalMaterialsCost 
      Caption         =   "Total Material Cost"
      Height          =   195
      Left            =   6360
      TabIndex        =   12
      Top             =   10755
      Width           =   1455
   End
   Begin VB.Label lblNonStockCodedPartsTotal 
      Caption         =   "Non-Stock Coded Parts Total"
      Height          =   195
      Left            =   6360
      TabIndex        =   11
      Top             =   10155
      Width           =   2100
   End
   Begin VB.Label lblStockCodedPartsTotal 
      Caption         =   "Stock Coded Parts Total"
      Height          =   195
      Left            =   6360
      TabIndex        =   10
      Top             =   9855
      Width           =   1815
   End
   Begin MSForms.TextBox txtTotalMaterialsCost 
      Height          =   300
      Left            =   8520
      TabIndex        =   5
      Top             =   10740
      Width           =   1215
      VariousPropertyBits=   746604569
      BackColor       =   -2147483624
      Size            =   "2143;529"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
   Begin MSForms.TextBox txtNonStockCodedPartsTotal 
      Height          =   300
      Left            =   8520
      TabIndex        =   4
      Top             =   10140
      Width           =   1215
      VariousPropertyBits=   746604569
      Size            =   "2143;529"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
   Begin MSForms.TextBox txtStockCodedPartsTotal 
      Height          =   300
      Left            =   8520
      TabIndex        =   3
      Top             =   9840
      Width           =   1215
      VariousPropertyBits=   746604569
      Size            =   "2143;529"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
   Begin MSForms.TextBox txtRebuiltPartsTotal 
      Height          =   300
      Left            =   8520
      TabIndex        =   2
      Top             =   9540
      Width           =   1215
      VariousPropertyBits=   746604569
      Size            =   "2143;529"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   2
   End
   Begin MSForms.TextBox txtRebuiltCode 
      Height          =   330
      Left            =   4275
      TabIndex        =   0
      Top             =   405
      Width           =   1170
      VariousPropertyBits=   746604569
      Size            =   "2064;582"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   3
   End
   Begin VB.Label lblMaterialsListing 
      Caption         =   "Rebuilt Part Materials List"
      BeginProperty Font 
         Name            =   "Arial"
         Size            =   13.5
         Charset         =   204
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   390
      Left            =   3150
      TabIndex        =   9
      Top             =   0
      Width           =   3465
   End
End
Attribute VB_Name = "frmRebuiltPartsAddMaterials"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Option Explicit

Private m_str_Msg As String
Private m_str_RBNumber As String
Private m_str_LinkNumber As String

' Holds the previous search string
Private m_str_PreviousSearch As String
Private m_str_PreviousSearchType As String
Private m_var_RowSelected As Variant

Public Sub PassValues(ByVal str_RBNumber, ByVal str_LinkNumber)
    On Error GoTo Error_Handler
    
    m_str_RBNumber = str_RBNumber
    m_str_LinkNumber = m_str_RBNumber
    Call Populate
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PassValues", g_l_ErrorLineNumber
End Sub

Private Sub UserPermissions()
    On Error GoTo Error_Handler
        
    If g_l_AccessLevel = 1 Then
        'Button <Add Part> is invisible.
        cmdAddPart.Visible = False
        'Controls at the bottom of the form are invisible.
        lblRebuiltPartsTotal.Visible = False
        lblStockCodedPartsTotal.Visible = False
        lblNonStockCodedPartsTotal.Visible = False
        lblCoreCostTotal.Visible = False
        lblTotalMaterialsCost.Visible = False
        txtRebuiltPartsTotal.Visible = False
        txtStockCodedPartsTotal.Visible = False
        txtNonStockCodedPartsTotal.Visible = False
        txtCoreCostTotal.Visible = False
        txtTotalMaterialsCost.Visible = False
        If grdRebuiltPartsList.Columns.Count > 2 Then
            'Grid "Rebuilt Parts List". Columns"UNIT_COST", "TOTAL_COST" are
            'invisible.
            grdRebuiltPartsList.Columns("UNIT COST").Visible = False
'            grdRebuiltPartsList.Columns("CORE COST").Visible = False
            grdRebuiltPartsList.Columns("TOTAL COST").Visible = False
        End If
        If grdStockCodedPartsList.Columns.Count > 2 Then
            'Grid "Stock Coded Parts List". Columns"UNIT_COST", "CORE COST", "TOTAL_COST"
            'are invisible.
            grdStockCodedPartsList.Columns("UNIT COST").Visible = False
            grdStockCodedPartsList.Columns("CORE COST").Visible = False
            grdStockCodedPartsList.Columns("TOTAL COST").Visible = False
        End If
        If grdNonStockCodedPartsList.Columns.Count > 2 Then
            'Grid "Non-Stock Coded Parts List". Columns"COST", "CORE COST", "TOTAL_COST"
            'are invisible.
            grdNonStockCodedPartsList.Columns("UNIT COST").Visible = False
            grdNonStockCodedPartsList.Columns("CORE COST").Visible = False
            grdNonStockCodedPartsList.Columns("TOTAL COST").Visible = False
        End If
    ElseIf g_l_AccessLevel = 2 Then
        'Button <Add Part> is invisible.
        cmdAddPart.Visible = False
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "UserPermissions", g_l_ErrorLineNumber
End Sub

Private Sub cmdAddPart_Click()
    On Error GoTo Error_Handler
    
    If frmTypeOfPart.WindowState = 1 Or frmTypeOfPart.WindowState = 2 Then
        frmTypeOfPart.WindowState = 0
    End If
    frmTypeOfPart.m_str_LinkNumber = m_str_RBNumber
    frmTypeOfPart.m_str_AuditReference = Trim(txtRebuiltCode.Text)
    frmTypeOfPart.m_str_FormType = "Rebuilt"
    frmTypeOfPart.Show vbModal
    'Call frmRebuiltPartsMain.RefreshForm
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdAddPart_Click", g_l_ErrorLineNumber
End Sub

Private Sub Populate()
    On Error GoTo Error_Handler
    
    txtRebuiltCode.Text = m_str_RBNumber
    
    Call PopulateGrids
    Call FormatGrids
    Call UserPermissions

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Populate", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub cmdRefresh_Click()
    On Error GoTo Error_Handler
    
    Call frmRebuiltPartsMain.RefreshForm
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdRefresh_click", g_l_ErrorLineNumber
    Call SetDefaultCursor
    
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler

    Call SetWaitCursor
    'Keep the form open until the frmRebuiltPartsMain closes
    If UnloadMode = 0 Then
        Cancel = True
        Call SetDefaultCursor
        Me.Hide
    End If
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub PopulateGrids()
    Dim RS As ADODB.Recordset
'    Dim curr_RBCoreCostTotal As Currency
    Dim curr_SCPCoreCostTotal As Currency
    Dim curr_NSPCoreCostTotal As Currency
    Dim curr_CoreCostTotal As Currency
    Dim l_RetVal As Long
    Dim l_Result As Long
        
    On Error GoTo Error_Handler
        
    Set RS = New ADODB.Recordset
    
    'Populate the non-stock coded items
    Set RS = modDBHelper.RetrieveNSCPUsed("CES_INQUIRY.RETRIEVE_NSCP_USED", _
                                          m_str_LinkNumber, _
                                          "RB")
    
    If RS.RecordCount > 0 Then
        Set grdNonStockCodedPartsList.DataSource = RS
        curr_NSPCoreCostTotal = Format(ColumnTotals(RS, "core cost"), "currency")
        RS.MoveFirst
        txtNonStockCodedPartsTotal.Text = Format(ColumnTotals(RS, "total cost"), "currency")
    Else
        Set grdNonStockCodedPartsList.DataSource = Nothing
        curr_NSPCoreCostTotal = Format(0#, "currency")
        txtNonStockCodedPartsTotal.Text = Format(0#, "currency")
    End If
    
    'Populate the stock coded items
    Set RS = modDBHelper.RetrieveSCPUsed("CES_INQUIRY.RETRIEVE_SCP_USED", _
                                         m_str_LinkNumber, _
                                         "N", _
                                         "RB")
    
    If RS.RecordCount > 0 Then
        Set grdStockCodedPartsList.DataSource = RS
        curr_SCPCoreCostTotal = Format(ColumnTotals(RS, "CORE COST"), "currency")
        
        RS.MoveFirst
        txtStockCodedPartsTotal.Text = Format( _
                                    ColumnTotals(RS, "total cost"), "currency")
    Else
        Set grdStockCodedPartsList.DataSource = Nothing
        curr_SCPCoreCostTotal = Format(0#, "currency")
        txtStockCodedPartsTotal.Text = Format(0#, "currency")
    End If

    Set RS = modDBHelper.RetrieveRBPUsed("CES_INQUIRY.RETRIEVE_RBP_USED", _
                                         m_str_LinkNumber, _
                                         "RB")
    If RS.RecordCount > 0 Then
        Set grdRebuiltPartsList.DataSource = RS
'       curr_RBCoreCostTotal = Format(ColumnTotals(RS, "core cost"), "currency")
        RS.MoveFirst
        txtRebuiltPartsTotal.Text = Format(ColumnTotals(RS, "total cost"), "currency")
    Else
        Set grdRebuiltPartsList.DataSource = Nothing
'       curr_RBCoreCostTotal = Format(0#, "currency")
        txtRebuiltPartsTotal.Text = Format(0#, "currency")
    End If
        
    curr_CoreCostTotal = curr_SCPCoreCostTotal + curr_NSPCoreCostTotal
    
    'Calculate the materials total
    txtCoreCostTotal.Text = Format((curr_CoreCostTotal * -1), "currency")
    txtTotalMaterialsCost.Text = Format( _
                                CCur(txtRebuiltPartsTotal.Text) + _
                                CCur(txtNonStockCodedPartsTotal.Text) + _
                                CCur(txtStockCodedPartsTotal.Text) - curr_CoreCostTotal, "currency")

    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateGrids", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub FormatGrids()
    On Error GoTo Error_Handler
     
    If grdNonStockCodedPartsList.Columns.Count > 2 Then
        With grdNonStockCodedPartsList
            .Columns("SUPPLIER NUMBER").Width = 1900
            .Columns("SUPPLIER NAME").Width = 1700
            .Columns("CC").Width = 500
            .Columns("QTY").Alignment = dbgRight
            .Columns("QTY").Width = 500
            .Columns("%").Alignment = dbgRight
            .Columns("%").Width = 500
            .Columns("UNIT COST").Alignment = dbgRight
            .Columns("UNIT COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("UNIT COST").Width = 1200

            .Columns("CORE COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("CORE COST").Width = 1200
            .Columns("TOTAL COST").Alignment = dbgRight
            .Columns("TOTAL COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("TOTAL COST").Width = 1200
            .Columns("DESCRIPTION").Width = 4000
            .Columns("LAST MODIFIED DATE").Alignment = dbgRight
            .Columns("LAST MODIFIED DATE").Width = 2400
            .Columns("LAST MODIFIED DATE").NumberFormat = "yyyy-mmm-dd hh:mm:ss AMPM"
            .Columns("ID").Visible = False
            .Columns("ROWID").Visible = False
        End With
    End If
    
    If grdStockCodedPartsList.Columns.Count > 2 Then
        With grdStockCodedPartsList
            .Columns("UNIT COST").Alignment = dbgRight
            .Columns("UNIT COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("UNIT COST").Width = 1100
            .Columns("CC").Width = 500
            .Columns("QTY").Alignment = dbgRight
            .Columns("QTY").Width = 500
            .Columns("%").Alignment = dbgRight
            .Columns("%").Width = 500
            .Columns("CORE COST").Alignment = dbgRight
            .Columns("CORE COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("CORE COST").Width = 1200
            .Columns("TOTAL COST").Alignment = dbgRight
            .Columns("TOTAL COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("TOTAL COST").Width = 1200
            .Columns("DESCRIPTION").Width = 4000
            .Columns("DESCRIPTION").Caption = "DESCRIPTION"
            .Columns("OEM COST").Visible = False
            .Columns("MMS REBUILT CODE").Visible = False
            .Columns("REBUILT PART COST").Visible = False
            .Columns("REBUILT PART").Visible = False
            .Columns("ROWID").Visible = False
        End With
    End If
    
    If grdRebuiltPartsList.Columns.Count > 2 Then
        With grdRebuiltPartsList
            '.Columns("CC").Width = 500
            .Columns("CC").Visible = False
            .Columns("QTY").Alignment = dbgRight
            .Columns("QTY").Width = 500
            .Columns("%").Alignment = dbgRight
            .Columns("%").Width = 500
            .Columns("UNIT COST").Alignment = dbgRight
            .Columns("UNIT COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("UNIT COST").Width = 1200
'            .Columns("CORE COST").Alignment = dbgRight
'            .Columns("CORE COST").NumberFormat = "$#,##0.00;($#,##0.00)"
'            .Columns("CORE COST").Width = 1200
            .Columns("CORE COST").Visible = False
            .Columns("TOTAL COST").Alignment = dbgRight
            .Columns("TOTAL COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("TOTAL COST").Width = 1200
            .Columns("DESCRIPTION").Width = 4000
            .Columns("ROWID").Visible = False
        End With
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "FormatGrids", g_l_ErrorLineNumber
End Sub

Private Sub grdNonStockCodedPartsList_DblClick()
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not allow user go further, just exit sub.
        Exit Sub
    End If
    
    'Update the non stock coded part
    If grdNonStockCodedPartsList.Row >= 0 Then
          m_var_RowSelected = grdNonStockCodedPartsList.Bookmark
        Dim formshow As New frmAddNSCPToEstimate
        Call SetWaitCursor
        formshow.m_str_LinkNumber = m_str_LinkNumber
        formshow.Caption = "Edit a Non-Stock Coded Part in the Rebuilt Part Estimate"
        formshow.m_str_TypeCode = "RB"
        formshow.m_str_AuditReference = Trim(txtRebuiltCode.Text)
        formshow.PassValues grdNonStockCodedPartsList.Columns("SUPPLIER NUMBER").Value, _
                            grdNonStockCodedPartsList.Columns("SUPPLIER NAME").Value, _
                            grdNonStockCodedPartsList.Columns("CC").Value, _
                            grdNonStockCodedPartsList.Columns("%").Value, _
                            grdNonStockCodedPartsList.Columns("QTY").Value, _
                            grdNonStockCodedPartsList.Columns("ROWID").Value, _
                            grdNonStockCodedPartsList.Columns("CORE COST").Value
        formshow.cboSupplierName.Enabled = False
        formshow.cmdAdd.Enabled = True
        formshow.Show vbModal
        Call frmRebuiltPartsMain.RefreshForm
          grdNonStockCodedPartsList.Bookmark = m_var_RowSelected
        Call SetDefaultCursor
    End If
        
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdNonStockCodedPartsList_DblClick", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub grdNonStockCodedPartsList_KeyDown(KeyCode As Integer, Shift As Integer)
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim l_count As Long
    Dim str_PartID As String
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler

    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not allow user go further, just exit sub.
        Exit Sub
    End If
    
    If KeyCode = vbKeyDelete And grdNonStockCodedPartsList.Row >= 0 Then
        m_str_Msg = "Are you sure you want to delete this item?"
        l_Result = MsgBox(m_str_Msg, vbOKCancel Or vbQuestion, _
                          "Delete Materials of this Rebuilt Part")
        If l_Result = vbOK Then
            str_PartID = grdNonStockCodedPartsList.Columns("ROWID").Text
            Call SetWaitCursor
            l_Result = modDBHelper.DeleteNSCPUsed("CES_DELETE.DELETE_NSCP_USED", _
                                                  l_RetVal, _
                                                  str_PartID)
                                                  
            '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT Begin >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            
            'Insert record into the AUDIT_MODIFY_HISTORY table.
            l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                    "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                    l_RetVal, _
                    "Delete Non-Stock Coded Part", _
                    Trim(txtRebuiltCode.Text), _
                    "RB", _
                    "SUPPLIER NUMBER ---> " + grdNonStockCodedPartsList.Columns("SUPPLIER NUMBER").Text, _
                    "SUPPLIER NAME ---> " + grdNonStockCodedPartsList.Columns("SUPPLIER NAME").Text, _
                    "CC ---> " + grdNonStockCodedPartsList.Columns("CC").Text, _
                    "QTY ---> " + grdNonStockCodedPartsList.Columns("QTY").Text, _
                    "% ---> " + grdNonStockCodedPartsList.Columns("%").Text, _
                    "UNIT COST ---> " + grdNonStockCodedPartsList.Columns("UNIT COST").Text, _
                    "CORE COST ---> " + grdNonStockCodedPartsList.Columns("CORE COST").Text, _
                    "TOTAL COST ---> " + grdNonStockCodedPartsList.Columns("TOTAL COST").Text, _
                    "DESCRIPTION ---> " + grdNonStockCodedPartsList.Columns("DESCRIPTION").Text, _
                    "KEYWORD ---> " + grdNonStockCodedPartsList.Columns("KEYWORD").Text, _
                    "LAST MODIFIED DATE ---> " + grdNonStockCodedPartsList.Columns("LAST MODIFIED DATE").Text)
            
            'Now find all estimates where current Rebuilt Part Estimate is present.
            Set RS = New ADODB.Recordset
            
            'In the SC_PARTS_USED table find all Estimates where the current RBE is present.
            Set RS = modDBHelper.RetrieveESTToPropagateRB("CES_INQUIRY.RETRIEVE_EST_TO_PROPAGATE_RB", _
                                                          m_str_RBNumber)
            If RS.RecordCount > 0 Then
                RS.MoveFirst
                    For l_count = 0 To RS.RecordCount - 1
                        'Add records to the AUDIT_MODIFY_HISTORY table.
                        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "Indirect change. Non-Stock Coded Part was deleted from the Rebuilt Part Estimate " + m_str_RBNumber, _
                            RS.Fields.Item("link_code"), _
                            RS.Fields.Item("link_type"), _
                            "SUPPLIER NUMBER ---> " + grdNonStockCodedPartsList.Columns("SUPPLIER NUMBER").Text, _
                            "SUPPLIER NAME ---> " + grdNonStockCodedPartsList.Columns("SUPPLIER NAME").Text, _
                            "CC ---> " + grdNonStockCodedPartsList.Columns("CC").Text, _
                            "QTY ---> " + grdNonStockCodedPartsList.Columns("QTY").Text, _
                            "% ---> " + grdNonStockCodedPartsList.Columns("%").Text, _
                            "UNIT COST ---> " + grdNonStockCodedPartsList.Columns("UNIT COST").Text, _
                            "CORE COST ---> " + grdNonStockCodedPartsList.Columns("CORE COST").Text, _
                            "TOTAL COST ---> " + grdNonStockCodedPartsList.Columns("TOTAL COST").Text, _
                            "DESCRIPTION ---> " + grdNonStockCodedPartsList.Columns("DESCRIPTION").Text, _
                            "KEYWORD ---> " + grdNonStockCodedPartsList.Columns("KEYWORD").Text, _
                            "LAST MODIFIED DATE ---> " + grdNonStockCodedPartsList.Columns("LAST MODIFIED DATE").Text)
                        RS.MoveNext
                    Next l_count
            End If
            Set RS = Nothing
            '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT End >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            Call frmRebuiltPartsMain.RefreshForm
            Call SetDefaultCursor
        End If
    End If

    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdNonStockCodedPartsList_KeyDown", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub grdStockCodedPartsList_DblClick()
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not allow user go further, just exit sub.
        Exit Sub
    End If
    
    'Update the stock coded part
    If grdStockCodedPartsList.Row >= 0 Then
          m_var_RowSelected = grdStockCodedPartsList.Bookmark
        Dim formshow As New frmAddSCPToEstimate
        Call SetWaitCursor
        formshow.Caption = "Edit a Stock Coded Part in the Rebuilt Part Estimate"
        formshow.m_str_TypeCode = "RB"
        'formshow.m_var_RowID = grdStockCodedPartsList.Columns("ROWID").Value
        formshow.m_str_MBNumber = m_str_LinkNumber
        formshow.m_str_AuditReference = Trim(txtRebuiltCode.Text)
        formshow.PassValues grdStockCodedPartsList.Columns("STOCK CODE").Value, _
                            grdStockCodedPartsList.Columns("CC").Value, _
                            grdStockCodedPartsList.Columns("%").Value, _
                            grdStockCodedPartsList.Columns("QTY").Value, _
                            grdStockCodedPartsList.Columns("ROWID").Value, _
                            grdStockCodedPartsList.Columns("CORE COST").Value
        formshow.Show vbModal
        Call frmRebuiltPartsMain.RefreshForm
          grdStockCodedPartsList.Bookmark = m_var_RowSelected
        Call SetDefaultCursor
    End If

    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdStockCodedPartsList_DblClick", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub grdStockCodedPartsList_KeyDown(KeyCode As Integer, Shift As Integer)
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim l_count As Long
    Dim str_PartID As String
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not allow user go further, just exit sub.
        Exit Sub
    End If
    
    If KeyCode = vbKeyDelete And grdStockCodedPartsList.Row >= 0 Then
        m_str_Msg = "Are you sure you want to delete this item?"
        l_Result = MsgBox(m_str_Msg, vbOKCancel Or vbQuestion, _
                          "Delete Materials of this Rebuilt Part")
        If l_Result = vbOK Then
            str_PartID = grdStockCodedPartsList.Columns("ROWID").Text
            Call SetWaitCursor
            l_Result = modDBHelper.DeleteSCPUsed("CES_DELETE.DELETE_SCP_USED", _
                                                 l_RetVal, _
                                                 str_PartID)
            '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT Begin >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            'Insert record into the AUDIT_MODIFY_HISTORY table.
            l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                    "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                    l_RetVal, _
                    "Delete Stock Coded Part", _
                    Trim(txtRebuiltCode.Text), _
                    "RB", _
                    "STOCK CODE ---> " + grdStockCodedPartsList.Columns("STOCK CODE").Text, _
                    "UNIT COST ---> " + grdStockCodedPartsList.Columns("UNIT COST").Text, _
                    "CC ---> " + grdStockCodedPartsList.Columns("CC").Text, _
                    "QTY ---> " + grdStockCodedPartsList.Columns("QTY").Text, _
                    "% ---> " + grdStockCodedPartsList.Columns("%").Text, _
                    "CORE COST ---> " + grdStockCodedPartsList.Columns("CORE COST").Text, _
                    "TOTAL COST ---> " + grdStockCodedPartsList.Columns("TOTAL COST").Text, _
                    "DESCRIPTION ---> " + grdStockCodedPartsList.Columns("DESCRIPTION").Text, _
                    "KEYWORD ---> " + grdStockCodedPartsList.Columns("KEYWORD").Text)
            
            'Now find all estimates where current Rebuilt Part Estimate is present.
            Set RS = New ADODB.Recordset
            
            'In the SC_PARTS_USED table find all Estimates where the current RBE is present.
            Set RS = modDBHelper.RetrieveESTToPropagateRB("CES_INQUIRY.RETRIEVE_EST_TO_PROPAGATE_RB", _
                                                          m_str_RBNumber)
            If RS.RecordCount > 0 Then
                RS.MoveFirst
                    For l_count = 0 To RS.RecordCount - 1
                        'Add records to the AUDIT_MODIFY_HISTORY table.
                        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "Indirect change. Stock Coded Part was deleted from the Rebuilt Part Estimate " + m_str_RBNumber, _
                            RS.Fields.Item("link_code"), _
                            RS.Fields.Item("link_type"), _
                            "STOCK CODE ---> " + grdStockCodedPartsList.Columns("STOCK CODE").Text, _
                            "UNIT COST ---> " + grdStockCodedPartsList.Columns("UNIT COST").Text, _
                            "CC ---> " + grdStockCodedPartsList.Columns("CC").Text, _
                            "QTY ---> " + grdStockCodedPartsList.Columns("QTY").Text, _
                            "% ---> " + grdStockCodedPartsList.Columns("%").Text, _
                            "CORE COST ---> " + grdStockCodedPartsList.Columns("CORE COST").Text, _
                            "TOTAL COST ---> " + grdStockCodedPartsList.Columns("TOTAL COST").Text, _
                            "DESCRIPTION ---> " + grdStockCodedPartsList.Columns("DESCRIPTION").Text, _
                            "KEYWORD ---> " + grdStockCodedPartsList.Columns("KEYWORD").Text)
                        RS.MoveNext
                    Next l_count
            End If
            Set RS = Nothing
            '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT End >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            Call frmRebuiltPartsMain.RefreshForm
            Call SetDefaultCursor
        End If
    End If
    
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdStockCodedPartsList_KeyDown", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    Call SetDefaultCursor
End Sub

Private Sub grdRebuiltPartsList_DblClick()
    On Error GoTo Error_Handler

    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not allow user go further, just exit sub.
        Exit Sub
    End If

    'Update the stock coded part
    If grdRebuiltPartsList.Row >= 0 Then
          m_var_RowSelected = grdRebuiltPartsList.Bookmark
        Dim formshow As New frmAddRBPToEstimate
        Call SetWaitCursor
        formshow.Caption = "Edit a Rebuilt Part in the Rebuilt Part Estimate"
        formshow.m_str_TypeCode = "RB"
        formshow.m_str_LinkNumber = m_str_LinkNumber
        formshow.m_str_AuditReference = Trim(txtRebuiltCode.Text)
        formshow.PassValues grdRebuiltPartsList.Columns("REBUILT NUMBER").Value, _
                            grdRebuiltPartsList.Columns("%").Value, _
                            grdRebuiltPartsList.Columns("QTY").Value, _
                            grdRebuiltPartsList.Columns("ROWID").Value
        formshow.Show vbModal
        Call frmRebuiltPartsMain.RefreshForm
          grdRebuiltPartsList.Bookmark = m_var_RowSelected
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdRebuiltPartsList_DblClick", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub grdRebuiltPartsList_KeyDown(KeyCode As Integer, Shift As Integer)
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim l_count As Long
    Dim str_PartID As String
    Dim RS As ADODB.Recordset
        
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not allow user go further, just exit sub.
        Exit Sub
    End If
    
    If KeyCode = vbKeyDelete And grdRebuiltPartsList.Row >= 0 Then
        m_str_Msg = "Are you sure you want to delete this item?"
        l_Result = MsgBox(m_str_Msg, vbOKCancel Or vbQuestion, _
                          "Delete Materials of this Rebuilt Part")
        If l_Result = vbOK Then
            str_PartID = grdRebuiltPartsList.Columns("ROWID").Text
            Call SetWaitCursor
            l_Result = modDBHelper.DeleteSCPUsed("CES_DELETE.DELETE_SCP_USED", _
                                                 l_RetVal, _
                                                 str_PartID)
            '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT Begin >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            'Insert record into the AUDIT_MODIFY_HISTORY table.
            l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                    "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                    l_RetVal, _
                    "Delete Rebuilt Part", _
                    Trim(txtRebuiltCode.Text), _
                    "RB", _
                    "UNIT COST ---> " + grdRebuiltPartsList.Columns("UNIT COST").Text, _
                    "REBUILT NUMBER ---> " + grdRebuiltPartsList.Columns("REBUILT NUMBER").Text, _
                    "CC ---> " + grdRebuiltPartsList.Columns("CC").Text, _
                    "QTY ---> " + grdRebuiltPartsList.Columns("QTY").Text, _
                    "% ---> " + grdRebuiltPartsList.Columns("%").Text, _
                    "TOTAL COST ---> " + grdRebuiltPartsList.Columns("TOTAL COST").Text, _
                    "DESCRIPTION ---> " + grdRebuiltPartsList.Columns("DESCRIPTION").Text, _
                    "KEYWORD ---> " + grdRebuiltPartsList.Columns("KEYWORD").Text)
            
            'Now find all estimates where current Rebuilt Part Estimate is present.
            Set RS = New ADODB.Recordset
            
            'In the SC_PARTS_USED table find all Estimates where the current RBE is present.
            Set RS = modDBHelper.RetrieveESTToPropagateRB("CES_INQUIRY.RETRIEVE_EST_TO_PROPAGATE_RB", _
                                                          m_str_RBNumber)
            If RS.RecordCount > 0 Then
                RS.MoveFirst
                    For l_count = 0 To RS.RecordCount - 1
                        'Add records to the AUDIT_MODIFY_HISTORY table.
                        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "Indirect change. Rebuilt Part was deleted from the Rebuilt Part Estimate " + m_str_RBNumber, _
                            RS.Fields.Item("link_code"), _
                            RS.Fields.Item("link_type"), _
                            "UNIT COST ---> " + grdRebuiltPartsList.Columns("UNIT COST").Text, _
                            "REBUILT NUMBER ---> " + grdRebuiltPartsList.Columns("REBUILT NUMBER").Text, _
                            "CC ---> " + grdRebuiltPartsList.Columns("CC").Text, _
                            "QTY ---> " + grdRebuiltPartsList.Columns("QTY").Text, _
                            "% ---> " + grdRebuiltPartsList.Columns("%").Text, _
                            "TOTAL COST ---> " + grdRebuiltPartsList.Columns("TOTAL COST").Text, _
                            "DESCRIPTION ---> " + grdRebuiltPartsList.Columns("DESCRIPTION").Text, _
                            "KEYWORD ---> " + grdRebuiltPartsList.Columns("KEYWORD").Text)
                        RS.MoveNext
                    Next l_count
            End If
            Set RS = Nothing
'>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT End >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            Call frmRebuiltPartsMain.RefreshForm
            Call SetDefaultCursor
        End If
    End If
    
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If

    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdRebuiltPartsList_KeyDown", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    Call SetDefaultCursor
End Sub

Private Sub optNSCPart_Click()
    On Error GoTo Error_Handler
    
    Call ChangeSearchLabel
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "optNSCPart_Click", g_l_ErrorLineNumber
End Sub

Private Sub optRBPart_Click()
    On Error GoTo Error_Handler
    
    Call ChangeSearchLabel
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "optRBPart_Click", g_l_ErrorLineNumber
End Sub

Private Sub optSCPart_Click()
    On Error GoTo Error_Handler
    
    Call ChangeSearchLabel
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "optSCPart_Click", g_l_ErrorLineNumber
End Sub

Private Sub ChangeSearchLabel()
    On Error GoTo Error_Handler:
    ' As the type to part to search by is changed, we must change
    ' the label to reflect this
    If optRBPart.Value = True Then
        lblKeyToSearch.Caption = "Rebuilt Number:"
    ElseIf optSCPart.Value = True Then
        lblKeyToSearch.Caption = "Stock Code:"
    ElseIf optNSCPart.Value = True Then
        lblKeyToSearch.Caption = "Supplier Number:"
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "ChangeSearchLabel", g_l_ErrorLineNumber
End Sub

Private Function SelectedOption()
    On Error GoTo Error_Handler:
    ' As the type to part to search by is changed, we must change
    ' the label to reflect this
    If optRBPart.Value = True Then
        SelectedOption = "RB"
    ElseIf optSCPart.Value = True Then
        SelectedOption = "SC"
    ElseIf optNSCPart.Value = True Then
        SelectedOption = "NSC"
    Else
        SelectedOption = ""
    End If
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "SelectedOption", g_l_ErrorLineNumber
End Function

Private Sub cmdFindNext_Click()
    Dim RS As ADODB.Recordset
    Dim SearchGrid As DataGrid
    Dim str_SearchField As String
    Dim l_Counter As Long
    
    On Error GoTo Error_Handler:
        
    ' Must enter a value to search
    If txtKeyToSearch.Text = "" Then
        MsgBox "Enter a part to find.", vbExclamation, "Cost Estimate System"
        Exit Sub
    End If
    
    ' Get the grid, seach filed and the record set used for searching
    Select Case SelectedOption()
        Case "RB"
            Set SearchGrid = grdRebuiltPartsList
            str_SearchField = "[REBUILT NUMBER]"
        Case "SC"
            Set SearchGrid = grdStockCodedPartsList
            str_SearchField = "[STOCK CODE]"
        Case "NSC"
            Set SearchGrid = grdNonStockCodedPartsList
            str_SearchField = "[SUPPLIER NUMBER]"
    End Select
    
    If Not SearchGrid.DataSource Is Nothing Then
        Set RS = SearchGrid.DataSource
    Else
        MsgBox "No parts to find.", vbExclamation, "Cost Estimate System"
        Exit Sub
    End If
    
    ' If the grid has lost focus then start seach again
    If RS.AbsolutePage < 0 Then
        m_str_PreviousSearch = ""
        m_str_PreviousSearchType = ""
    End If
    
    ' Determine whether or not they are performing the same
    ' search again or starting a new search
    If m_str_PreviousSearch = txtKeyToSearch.Text And m_str_PreviousSearchType = SelectedOption() Then
        ' Continue Search
        If RS.RecordCount > 0 Then
            RS.AbsolutePosition = RS.Bookmark + 1
            RS.Find str_SearchField & " LIKE '%" & txtKeyToSearch.Text & "%'"
            If RS.EOF Then
                MsgBox "All matching parts have been found.", vbExclamation, "Cost Estimate System"
                m_str_PreviousSearch = ""
                m_str_PreviousSearchType = ""
            Else
                With SearchGrid
                    For l_Counter = .SelBookmarks.Count - 1 To 0 Step -1
                        .SelBookmarks.Remove l_Counter
                    Next
                    .SelBookmarks.Add .RowBookmark(.Row)
                End With
                m_str_PreviousSearch = txtKeyToSearch.Text
                m_str_PreviousSearchType = SelectedOption()
            End If
        Else
            MsgBox "No parts to find.", vbExclamation, "Cost Estimate System"
            m_str_PreviousSearch = txtKeyToSearch.Text
            m_str_PreviousSearchType = SelectedOption()
        End If
    Else
        ' Start New Search
        If RS.RecordCount > 0 Then
            RS.MoveFirst
            RS.Find str_SearchField & " LIKE '%" & txtKeyToSearch.Text & "%'"
            If RS.EOF Then
                RS.MoveFirst
                MsgBox "Part not found.", vbExclamation, "Cost Estimate System"
                With SearchGrid
                    For l_Counter = .SelBookmarks.Count - 1 To 0 Step -1
                        .SelBookmarks.Remove l_Counter
                    Next
                End With
                m_str_PreviousSearch = ""
                m_str_PreviousSearchType = ""
            Else
                With SearchGrid
                    For l_Counter = .SelBookmarks.Count - 1 To 0 Step -1
                        .SelBookmarks.Remove l_Counter
                    Next
                    .SelBookmarks.Add .RowBookmark(.Row)
                End With
                m_str_PreviousSearch = txtKeyToSearch.Text
                m_str_PreviousSearchType = SelectedOption()
            End If
        Else
            MsgBox "No parts to find.", vbExclamation, "Cost Estimate System"
            m_str_PreviousSearch = txtKeyToSearch.Text
            m_str_PreviousSearchType = SelectedOption()
        End If
    End If
            
    Set RS = Nothing
    Set SearchGrid = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdFindNext_Click", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    If Not SearchGrid Is Nothing Then
        Set SearchGrid = Nothing
    End If
End Sub
frmRebuiltPartsMain.frm :
VERSION 5.00
Object = "{0D452EE1-E08F-101A-852E-02608C4D0BB4}#2.0#0"; "FM20.DLL"
Object = "{CDE57A40-8B86-11D0-B3C6-00A0C90AEA82}#1.0#0"; "MSDATGRD.OCX"
Object = "{831FDD16-0C5C-11D2-A9FC-0000F8754DA1}#2.1#0"; "MSCOMCTL.OCX"
Begin VB.Form frmRebuiltPartsMain 
   BorderStyle     =   1  'Fixed Single
   Caption         =   "Rebuilt Part Estimate"
   ClientHeight    =   8865
   ClientLeft      =   45
   ClientTop       =   330
   ClientWidth     =   9105
   Icon            =   "frmRebuiltPartsMain.frx":0000
   LinkTopic       =   "Form3"
   MDIChild        =   -1  'True
   NegotiateMenus  =   0   'False
   ScaleHeight     =   8865
   ScaleWidth      =   9105
   ShowInTaskbar   =   0   'False
   Begin VB.ComboBox cboBusSeries 
      Height          =   315
      Left            =   1080
      TabIndex        =   40
      Top             =   2715
      Width           =   3255
   End
   Begin VB.Frame Frame3 
      Height          =   1215
      Left            =   5160
      TabIndex        =   33
      Top             =   7080
      Width           =   3915
      Begin MSForms.TextBox txtTotalRebuiltPartCost 
         Height          =   330
         Left            =   2400
         TabIndex        =   39
         Top             =   120
         Width           =   1455
         VariousPropertyBits=   746604569
         BackColor       =   -2147483624
         Size            =   "2566;582"
         SpecialEffect   =   6
         FontEffects     =   1073750016
         FontHeight      =   165
         FontCharSet     =   0
         FontPitchAndFamily=   2
         ParagraphAlign  =   2
      End
      Begin VB.Label lblTotalRebuiltPartCost 
         Caption         =   "Total Rebuilt Part Cost"
         Height          =   255
         Left            =   60
         TabIndex        =   38
         Top             =   180
         Width           =   1665
      End
      Begin MSForms.TextBox txtTotalRebuiltPartCostWithTax 
         Height          =   330
         Left            =   2400
         TabIndex        =   37
         Top             =   840
         Width           =   1455
         VariousPropertyBits=   746604569
         BackColor       =   -2147483624
         Size            =   "2566;582"
         SpecialEffect   =   6
         FontEffects     =   1073750016
         FontHeight      =   165
         FontCharSet     =   0
         FontPitchAndFamily=   2
         ParagraphAlign  =   2
      End
      Begin VB.Label lblTotalWithTax 
         Caption         =   "Total Rebuilt Part Cost with Tax"
         Height          =   255
         Left            =   60
         TabIndex        =   36
         Top             =   900
         Width           =   2415
      End
      Begin MSForms.TextBox txtTaxTotal 
         Height          =   330
         Left            =   2400
         TabIndex        =   35
         Top             =   480
         Width           =   1455
         VariousPropertyBits=   746604569
         Size            =   "2566;582"
         SpecialEffect   =   6
         FontEffects     =   1073750016
         FontHeight      =   165
         FontCharSet     =   0
         FontPitchAndFamily=   2
         ParagraphAlign  =   2
      End
      Begin VB.Label lblTaxTotal 
         Caption         =   "Tax Total"
         Height          =   255
         Left            =   60
         TabIndex        =   34
         Top             =   540
         Width           =   1815
      End
   End
   Begin VB.Frame Frame2 
      Height          =   855
      Left            =   5160
      TabIndex        =   28
      Top             =   5040
      Width           =   3915
      Begin MSForms.TextBox txtMaterialTotal 
         Height          =   330
         Left            =   2400
         TabIndex        =   32
         Top             =   480
         Width           =   1455
         VariousPropertyBits=   746604569
         Size            =   "2566;582"
         SpecialEffect   =   6
         FontEffects     =   1073750016
         FontHeight      =   165
         FontCharSet     =   0
         FontPitchAndFamily=   2
         ParagraphAlign  =   2
      End
      Begin VB.Label lblMaterialsTotal 
         Caption         =   "Materials Cost (Excl. Tax)"
         Height          =   255
         Left            =   60
         TabIndex        =   31
         Top             =   540
         Width           =   1875
      End
      Begin MSForms.TextBox txtCoreCost 
         Height          =   330
         Left            =   2400
         TabIndex        =   30
         Top             =   120
         Width           =   1455
         VariousPropertyBits=   746604569
         Size            =   "2566;582"
         SpecialEffect   =   6
         FontEffects     =   1073750016
         FontHeight      =   165
         FontCharSet     =   0
         FontPitchAndFamily=   2
         ParagraphAlign  =   2
      End
      Begin VB.Label lblCoreCost 
         Caption         =   "Core Cost (Excl. Tax)"
         Height          =   255
         Left            =   60
         TabIndex        =   29
         Top             =   180
         Width           =   1695
      End
   End
   Begin MSDataGridLib.DataGrid grdTotalTime 
      Height          =   3675
      Left            =   0
      TabIndex        =   20
      Top             =   5100
      Width           =   2295
      _ExtentX        =   4048
      _ExtentY        =   6482
      _Version        =   393216
      BackColor       =   12648447
      ForeColor       =   16711680
      HeadLines       =   1
      RowHeight       =   17
      BeginProperty HeadFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Caption         =   "LABOUR HOUR SUMMARY"
      ColumnCount     =   2
      BeginProperty Column00 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   4105
            SubFormatType   =   0
         EndProperty
      EndProperty
      BeginProperty Column01 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   4105
            SubFormatType   =   0
         EndProperty
      EndProperty
      SplitCount      =   1
      BeginProperty Split0 
         BeginProperty Column00 
         EndProperty
         BeginProperty Column01 
         EndProperty
      EndProperty
   End
   Begin MSDataGridLib.DataGrid grdMaterialsCostCentreTotals 
      Height          =   3675
      Left            =   2280
      TabIndex        =   19
      Top             =   5100
      Width           =   2805
      _ExtentX        =   4948
      _ExtentY        =   6482
      _Version        =   393216
      BackColor       =   12648447
      ForeColor       =   16711680
      HeadLines       =   1
      RowHeight       =   15
      BeginProperty HeadFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Caption         =   "MATERIAL COST SUMMARY"
      ColumnCount     =   2
      BeginProperty Column00 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      BeginProperty Column01 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      SplitCount      =   1
      BeginProperty Split0 
         BeginProperty Column00 
         EndProperty
         BeginProperty Column01 
         EndProperty
      EndProperty
   End
   Begin MSComctlLib.Toolbar tbMenu 
      Align           =   1  'Align Top
      Height          =   330
      Left            =   0
      TabIndex        =   18
      Top             =   0
      Width           =   9105
      _ExtentX        =   16060
      _ExtentY        =   582
      ButtonWidth     =   1376
      ButtonHeight    =   582
      Style           =   1
      TextAlignment   =   1
      _Version        =   393216
      BeginProperty Buttons {66833FE8-8583-11D1-B16A-00C0F0283628} 
         NumButtons      =   3
         BeginProperty Button1 {66833FEA-8583-11D1-B16A-00C0F0283628} 
            Caption         =   "File"
            Style           =   5
            BeginProperty ButtonMenus {66833FEC-8583-11D1-B16A-00C0F0283628} 
               NumButtonMenus  =   2
               BeginProperty ButtonMenu1 {66833FEE-8583-11D1-B16A-00C0F0283628} 
                  Text            =   "Print"
               EndProperty
               BeginProperty ButtonMenu2 {66833FEE-8583-11D1-B16A-00C0F0283628} 
                  Text            =   "Close"
               EndProperty
            EndProperty
         EndProperty
         BeginProperty Button2 {66833FEA-8583-11D1-B16A-00C0F0283628} 
            Caption         =   "Edit"
            Style           =   5
            BeginProperty ButtonMenus {66833FEC-8583-11D1-B16A-00C0F0283628} 
               NumButtonMenus  =   3
               BeginProperty ButtonMenu1 {66833FEE-8583-11D1-B16A-00C0F0283628} 
                  Text            =   "Add a Labour Task"
               EndProperty
               BeginProperty ButtonMenu2 {66833FEE-8583-11D1-B16A-00C0F0283628} 
                  Text            =   "Edit Rebuilt Part Information"
               EndProperty
               BeginProperty ButtonMenu3 {66833FEE-8583-11D1-B16A-00C0F0283628} 
                  Text            =   "Archive Rebuilt Part"
               EndProperty
            EndProperty
         EndProperty
         BeginProperty Button3 {66833FEA-8583-11D1-B16A-00C0F0283628} 
            Caption         =   "View"
            Style           =   5
            BeginProperty ButtonMenus {66833FEC-8583-11D1-B16A-00C0F0283628} 
               NumButtonMenus  =   4
               BeginProperty ButtonMenu1 {66833FEE-8583-11D1-B16A-00C0F0283628} 
                  Text            =   "Materials Listing"
               EndProperty
               BeginProperty ButtonMenu2 {66833FEE-8583-11D1-B16A-00C0F0283628} 
                  Text            =   "Modify History"
               EndProperty
               BeginProperty ButtonMenu3 {66833FEE-8583-11D1-B16A-00C0F0283628} 
                  Text            =   "Archived Database"
               EndProperty
               BeginProperty ButtonMenu4 {66833FEE-8583-11D1-B16A-00C0F0283628} 
                  Text            =   "All Labour"
               EndProperty
            EndProperty
         EndProperty
      EndProperty
      OLEDropMode     =   1
   End
   Begin VB.ComboBox cboChangesMadeBy 
      Height          =   315
      Left            =   5280
      Style           =   2  'Dropdown List
      TabIndex        =   17
      Top             =   2715
      Width           =   3825
   End
   Begin MSDataGridLib.DataGrid grdLabour 
      Height          =   1905
      Left            =   0
      TabIndex        =   3
      Top             =   3120
      Width           =   9075
      _ExtentX        =   16007
      _ExtentY        =   3360
      _Version        =   393216
      BackColor       =   12648447
      ForeColor       =   16711680
      HeadLines       =   1
      RowHeight       =   15
      BeginProperty HeadFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Caption         =   "LABOUR"
      ColumnCount     =   2
      BeginProperty Column00 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      BeginProperty Column01 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      SplitCount      =   1
      BeginProperty Split0 
         BeginProperty Column00 
         EndProperty
         BeginProperty Column01 
         EndProperty
      EndProperty
   End
   Begin VB.Frame Frame1 
      Height          =   1215
      Left            =   5160
      TabIndex        =   21
      Top             =   5880
      Width           =   3915
      Begin MSForms.TextBox txtLabourTotal 
         Height          =   330
         Left            =   2400
         TabIndex        =   27
         Top             =   840
         Width           =   1455
         VariousPropertyBits=   746604569
         Size            =   "2566;582"
         SpecialEffect   =   6
         FontEffects     =   1073750016
         FontHeight      =   165
         FontCharSet     =   0
         FontPitchAndFamily=   2
         ParagraphAlign  =   2
      End
      Begin VB.Label lblLabourTotal 
         Caption         =   "Labour Total"
         Height          =   255
         Left            =   60
         TabIndex        =   26
         Top             =   900
         Width           =   1020
      End
      Begin MSForms.TextBox txtLabourOverheadAmount 
         Height          =   330
         Left            =   2400
         TabIndex        =   25
         Top             =   480
         Width           =   1455
         VariousPropertyBits=   746604569
         Size            =   "2566;582"
         SpecialEffect   =   6
         FontEffects     =   1073750016
         FontHeight      =   165
         FontCharSet     =   0
         FontPitchAndFamily=   2
         ParagraphAlign  =   2
      End
      Begin VB.Label lblLabourOverheadAmount 
         Caption         =   "Labour Overhead Total"
         Height          =   255
         Left            =   60
         TabIndex        =   24
         Top             =   540
         Width           =   1920
      End
      Begin MSForms.TextBox txtLabourSubtotal 
         Height          =   330
         Left            =   2400
         TabIndex        =   23
         Top             =   120
         Width           =   1455
         VariousPropertyBits=   746604569
         Size            =   "2566;582"
         SpecialEffect   =   6
         FontEffects     =   1073750016
         FontHeight      =   165
         FontCharSet     =   0
         FontPitchAndFamily=   2
         ParagraphAlign  =   2
      End
      Begin VB.Label lblLabourSubtotal 
         Caption         =   "Labour Cost"
         Height          =   255
         Left            =   60
         TabIndex        =   22
         Top             =   180
         Width           =   1245
      End
   End
   Begin VB.Label txtNonActive 
      Alignment       =   2  'Center
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   13.5
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H000000FF&
      Height          =   360
      Left            =   5265
      TabIndex        =   41
      Top             =   8415
      Width           =   3750
   End
   Begin VB.Label lblChangesMadeBy 
      Caption         =   "Last Modified:"
      Height          =   195
      Left            =   4320
      TabIndex        =   16
      Top             =   2775
      Width           =   1095
   End
   Begin VB.Label lblBusSeries 
      Caption         =   "Vehicle Series:"
      Height          =   195
      Left            =   0
      TabIndex        =   15
      Top             =   2790
      Width           =   1095
   End
   Begin MSForms.TextBox txtMMSBuyCode 
      Height          =   315
      Left            =   6900
      TabIndex        =   14
      Top             =   660
      Width           =   1515
      VariousPropertyBits=   746604569
      Size            =   "2672;556"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   204
      FontPitchAndFamily=   2
      ParagraphAlign  =   3
   End
   Begin MSForms.TextBox txtCoreCode 
      Height          =   315
      Left            =   6900
      TabIndex        =   13
      Top             =   1230
      Width           =   1515
      VariousPropertyBits=   746604569
      Size            =   "2672;556"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   204
      FontPitchAndFamily=   2
      ParagraphAlign  =   3
   End
   Begin VB.Label lblCoreCode 
      Caption         =   "Core Code:"
      Height          =   195
      Left            =   7260
      TabIndex        =   12
      Top             =   1020
      Width           =   915
   End
   Begin VB.Label lblMMSBuyCode 
      Caption         =   "MMS Buy Code:"
      Height          =   195
      Left            =   7080
      TabIndex        =   11
      Top             =   480
      Width           =   1215
   End
   Begin VB.Label lblDetailedDescription 
      Alignment       =   2  'Center
      Caption         =   "Description:"
      Height          =   195
      Left            =   3840
      TabIndex        =   10
      Top             =   1560
      Width           =   1515
   End
   Begin VB.Label lblKeyword 
      Caption         =   "Keyword:"
      Height          =   195
      Left            =   4200
      TabIndex        =   9
      Top             =   1020
      Width           =   735
   End
   Begin VB.Label lblRebuiltNumber 
      Caption         =   "Rebuilt Number:"
      Height          =   195
      Left            =   3900
      TabIndex        =   8
      Top             =   480
      Width           =   1215
   End
   Begin MSForms.TextBox txtJobNumber 
      Height          =   315
      Left            =   600
      TabIndex        =   7
      Top             =   660
      Width           =   1515
      VariousPropertyBits=   746604569
      Size            =   "2672;556"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   3
   End
   Begin VB.Label lblJobNumber 
      Caption         =   "Job Number:"
      Height          =   195
      Left            =   900
      TabIndex        =   6
      Top             =   480
      Width           =   975
   End
   Begin MSForms.TextBox txtSOPNumber 
      Height          =   330
      Left            =   585
      TabIndex        =   5
      Top             =   1230
      Width           =   1695
      VariousPropertyBits=   746604569
      Size            =   "2990;582"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   3
   End
   Begin MSForms.Label lblSOPNumber 
      Height          =   225
      Left            =   825
      TabIndex        =   4
      Top             =   1050
      Width           =   1230
      Caption         =   "S.O.P. Number"
      Size            =   "2170;397"
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
   End
   Begin MSForms.TextBox txtKeyword 
      Height          =   315
      Left            =   3240
      TabIndex        =   1
      Top             =   1245
      Width           =   2610
      VariousPropertyBits=   746604569
      Size            =   "4604;556"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   3
   End
   Begin MSForms.TextBox txtDescription 
      Height          =   795
      Left            =   600
      TabIndex        =   2
      Top             =   1800
      Width           =   7815
      VariousPropertyBits=   -1400879079
      Size            =   "13785;1402"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   3
   End
   Begin MSForms.TextBox txtRebuiltCode 
      Height          =   315
      Left            =   3360
      TabIndex        =   0
      Top             =   660
      Width           =   2175
      VariousPropertyBits=   746604569
      Size            =   "3836;556"
      SpecialEffect   =   6
      FontEffects     =   1073750017
      FontHeight      =   195
      FontCharSet     =   204
      FontPitchAndFamily=   2
      ParagraphAlign  =   3
      FontWeight      =   700
   End
End
Attribute VB_Name = "frmRebuiltPartsMain"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Option Explicit

Private m_str_Msg As String
Private l_Result As Long
Private l_RetVal As Long

Public m_str_LinkNumber As String
Public m_str_RBNumber As String
Public m_var_RowID As Variant
Public m_isRB As Boolean
Public m_silent_mode As Boolean


Public Sub PassValues(ByVal str_LinkNumber As String, ByVal str_RBNumber As String, var_RowID As Variant)
   On Error GoTo Error_Handler
    
    ' Close the existing show all labour form
    If Not frmViewAllLabour Is Nothing Then
        Unload frmViewAllLabour
    End If
    
    m_str_LinkNumber = str_LinkNumber
    m_str_RBNumber = str_RBNumber
    m_var_RowID = var_RowID
    Call RefreshForm
    
    If g_str_UseOverheadFringe = "F" Then
        lblLabourOverheadAmount.Caption = "Fringe Value Total"
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PassValues", g_l_ErrorLineNumber
End Sub

Public Sub RefreshForm()
    On Error GoTo Error_Handler

    Call SetWaitCursor
    frmRebuiltPartsAddMaterials.PassValues m_str_RBNumber, m_str_LinkNumber
    Call Populate
    Call PopulateChangesMadeBy
    Call UserPermissions
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "RefreshForm", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub UserPermissions()
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Then
        'Menu <Add a Labour Task> is disabled.
        tbMenu.Buttons(2).ButtonMenus(1).Enabled = False
        'Menu <View><Archived Database> is disabled.
        tbMenu.Buttons(3).ButtonMenus(3).Enabled = False

        'Menu <Edit><Archive> is disabled.
        tbMenu.Buttons(2).ButtonMenus(3).Enabled = False
        
        If grdLabour.Columns.Count > 2 Then
            'Grid "Labour". Columns "Time", "Wrench Time" are invisible.
            grdLabour.Columns("TIME").Visible = False
            grdLabour.Columns("WRENCH TIME").Visible = False
        End If
        'Grid "Materials Cost Centre Totals". Column "Total Cost" is invisible.
        grdMaterialsCostCentreTotals.Columns("TOTAL COST").Visible = False
        'Controls in the right bottom corner of the form are invisible.
        lblLabourSubtotal.Visible = False
        lblLabourOverheadAmount.Visible = False
        lblLabourTotal.Visible = False
        lblMaterialsTotal.Visible = False
        lblTotalRebuiltPartCost.Visible = False
        txtLabourSubtotal.Visible = False
        txtLabourOverheadAmount.Visible = False
        txtLabourTotal.Visible = False
        txtMaterialTotal.Visible = False
        txtTotalRebuiltPartCost.Visible = False
        lblCoreCost.Visible = False
        txtCoreCost.Visible = False
        lblTaxTotal.Visible = False
        txtTaxTotal.Visible = False
        lblTotalWithTax.Visible = False
        txtTotalRebuiltPartCostWithTax.Visible = False
        'Button "Edit Rebuilt Part Info" is invisible.
        'btnRebuiltPartEdit.Visible = False
        'tbMenu.Buttons.Item.Enabled
        tbMenu.Buttons(2).ButtonMenus(2).Enabled = False
        'Edit-box "S.O.P. Number" is disabled
        txtSOPNumber.Enabled = False
        'Edit-boxes at the top of the form are disabled.
        txtRebuiltCode.Enabled = False
        txtKeyword.Enabled = False
        txtDescription.Enabled = False
    ElseIf g_l_AccessLevel = 2 Then
        'Menu <Add a Labour Task> is disabled.
        tbMenu.Buttons(2).ButtonMenus(1).Enabled = False
        'Menu <View><Archived Database> is disabled.
        tbMenu.Buttons(3).ButtonMenus(3).Enabled = False
         'Menu <Edit><Archive> is disabled.
        tbMenu.Buttons(2).ButtonMenus(3).Enabled = False
        'Button "Edit Rebuilt Part Info" is invisible.
        tbMenu.Buttons(2).ButtonMenus(2).Enabled = False
        
        'All controls except grids, are disabled.
        txtRebuiltCode.Enabled = False
        txtKeyword.Enabled = False
        txtDescription.Enabled = False
        txtLabourSubtotal.Enabled = False
        txtLabourOverheadAmount.Enabled = False
        txtLabourTotal.Enabled = False
        txtMaterialTotal.Enabled = False
        txtTotalRebuiltPartCost.Enabled = False
        txtSOPNumber.Enabled = False
    End If
    
    If g_l_AccessLevel < 4 Then
        tbMenu.Buttons(3).ButtonMenus(2).Enabled = False
        lblChangesMadeBy.Visible = False
        cboChangesMadeBy.Visible = False
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "UserPermissions", g_l_ErrorLineNumber
End Sub

'Populates the grids on the form
Public Sub Populate()
    Dim var_MMSStockCode As String
    Dim cur_MMSCost As String
    Dim var_NSCRowID As Variant
    Dim str_OrigSuppNum As String
    Dim str_FileText As String
    Dim fso As FileSystemObject
    Dim TS As TextStream
    Dim RS As ADODB.Recordset
    Dim RS2 As ADODB.Recordset
    Dim RSNewStock As Recordset
    Dim str_LabourTotal As String
    Dim str_MaterialTotal As String
    Dim str_CoreCost As String
    Dim str_TotalRebuiltPartCost As String
    Dim dbl_TaxRate As Double
    Dim l_Hours As Long
    Dim l_Minutes As Long
    Dim l_count As Long
    Dim duplicate As Boolean
    
    On Error GoTo Error_Handler
    
    'First populate the rebuilt information
    Set RS = New ADODB.Recordset
    duplicate = False 'initialize as false
    Set RS = modDBHelper.RetrieveRB("CES_INQUIRY.RETRIEVE_RB")
    If RS.RecordCount > 0 Then
        RS.Filter = "mms_stock_code = '" + m_str_LinkNumber + "' and rebuilt_stock_num = '" + m_str_RBNumber + "'"
        txtRebuiltCode.Text = RS.Fields.Item("REBUILT_STOCK_NUM")
        txtKeyword.Text = RS.Fields.Item("KEYWORD")
        txtDescription.Text = RS.Fields.Item("DETAILED_DESC")
        txtSOPNumber.Text = RS.Fields.Item("SOP_NUMBER")
        txtJobNumber.Text = RS.Fields.Item("JOB_NUMBER")
        txtMMSBuyCode.Text = RS.Fields.Item("MMS_STOCK_CODE")
        txtCoreCode.Text = RS.Fields.Item("CORE_PART_NUM")
        If Trim(RS.Fields.Item("CORE_CHARGE")) = "" Then
            txtCoreCost.Text = Format("0", "currency")
        Else
            txtCoreCost.Text = Format(RS.Fields.Item("CORE_CHARGE"), "currency")
        End If
         If IsNull(Trim(RS.Fields.Item("ACTIVE"))) Then
            txtNonActive.Caption = ""
        Else
            txtNonActive.Caption = "NON-ACTIVE"
        End If
    End If
    m_str_RBNumber = txtRebuiltCode.Text 'used when opening materials page from menu
    'Determine which non stock coded items have since been converted into stock coded
    'items.
    'First get the table containing each of the non stock coded items
    Set RS = modDBHelper.RetrieveNSCPUsed("CES_INQUIRY.RETRIEVE_NSCP_USED", _
                                          m_str_RBNumber, _
                                          "RB")
        
    'Loop through each of the non stock coded items
    If RS.RecordCount > 0 Then
        RS.MoveFirst
        Set RSNewStock = New ADODB.Recordset
        While Not RS.EOF
            'Get the original supplier number and row id
            str_OrigSuppNum = IIf(IsNull(RS.Fields.Item("SUPPLIER NUMBER").Value), "", RS.Fields.Item("SUPPLIER NUMBER").Value)
            var_NSCRowID = RS.Fields.Item("RowID")
            'Now attempt to get a stock coded part which matches the original supplier
            'number
            Set RSNewStock = modDBHelper.RetrieveSCOrigSupplierNum( _
                                        "CES_INQUIRY.RETRIEVE_SC_ORIG_SUPPLIER_NUM", _
                                        str_OrigSuppNum)
            
           If RSNewStock.RecordCount > 0 Then
                'There is a match
                'Get the MMS Stock Code for the item
                RSNewStock.MoveFirst
                var_MMSStockCode = RSNewStock.Fields.Item("mms_stock_code")
                cur_MMSCost = RSNewStock.Fields.Item("MMS_New_Cost")
                'Append the text entry to be logged
                str_FileText = str_FileText & Trim(str_OrigSuppNum) & " to " & _
                               Trim(var_MMSStockCode) & Chr(13) & Chr(10)
                
                'ensure a stockcoded part is not already attached to the estimate
                
                 Set RS2 = New ADODB.Recordset
        
                 Set RS2 = modDBHelper.RetrieveSCPUsed("CES_INQUIRY.RETRIEVE_SCP_USED", _
                                             m_str_RBNumber, _
                                             "N", _
                                             "RB")
                    If RS2.RecordCount > 0 Then
                        RS2.MoveFirst
                        For l_count = 0 To RS2.RecordCount - 1
                            If RS2.Fields.Item("STOCK CODE") = Trim(var_MMSStockCode) Then
                                Call SetDefaultCursor
                                'Set RS2 = Nothing
                                'm_str_Msg = "Did not convert Non-Stocked-Coded part to Stocked-Coded-Part since MMS Stock Code"
                                'm_str_Msg = m_str_Msg + " " + var_MMSStockCode + " is already used in this estimate"
                                'MsgBox m_str_Msg, vbOKOnly Or vbExclamation, "Warning"
                                duplicate = True
                                Exit For
                            End If
                            RS2.MoveNext
                        Next l_count
                   
                    End If
                    Set RS2 = Nothing
                
                'Transfer the entry to the stock coded make buy
                If duplicate = False Then
                l_Result = modDBHelper.TransferPartsUsed( _
                                                    "CES_UPDATE.TRANSFER_PARTS_USED", _
                                                    l_RetVal, _
                                                    var_MMSStockCode, _
                                                    cur_MMSCost, _
                                                    g_str_UserName, _
                                                    var_NSCRowID)
                                                    
                  ' Now if there have been any conversions log them in text file and inform the user
                If str_FileText <> "" Then
                    'Set FSO = New FileSystemObject
                    'Set TS = FSO.CreateTextFile("rb.log")
                    'TS.Write ("Rebuilt Part #" & Trim(m_str_LinkNumber) & " Part Conversions:" & _
                              Chr(13) & Chr(10) & Chr(13) & Chr(10) & _
                              "Vendor Part Number to Stock Code" & Chr(13) & Chr(10) & _
                              "--------------------------------" & Chr(13) & Chr(10) & str_FileText)
                    m_str_Msg = "Parts in the Rebuilt Part have been converted to Stock Coded Parts."
                    m_str_Msg = m_str_Msg + Chr(13) + "Please see the log for details."
                    MsgBox m_str_Msg, vbOKOnly Or vbInformation, "Rebuilt Part Estimate"
                    
                    'The code below was added to prevent a permission error when attempting
                    'to run FSO's CreateTextFile
                    Dim frmNoticeMessage As frmNotice
                    Set frmNoticeMessage = New frmNotice
                    frmNoticeMessage.SetMessage "rb.log", "Rebuilt Part #" & Trim(m_str_LinkNumber) & " Part Conversions:" & _
                        Chr(13) & Chr(10) & Chr(13) & Chr(10) & _
                        "Vendor Part Number to Stock Code" & Chr(13) & Chr(10) & _
                        "--------------------------------" & Chr(13) & Chr(10) & str_FileText
                    frmNoticeMessage.Show vbModal
                    
                    'TS.Close
                    'ShellExecute GetDesktopWindow(), "Open", App.Path & "\rb.log", "", "C:\", 6
                    
                End If
                
                End If
            End If
            duplicate = False 'reset duplicate flag for next non-stock-coded part we check
            RSNewStock.Close
            RS.MoveNext
            
        Wend
    End If
    Set RSNewStock = Nothing
            
  
    'Then populate the labour information
    Set RS = modDBHelper.RetrieveMBLabour("CES_INQUIRY.RETRIEVE_MB_LABOUR", _
                                          m_str_RBNumber, _
                                          "RB")
    If RS.RecordCount > 0 Then
        Set grdLabour.DataSource = RS
    Else
        Set grdLabour.DataSource = Nothing
    End If
    
    
    Set RS = modDBHelper.RetrieveAllLabourHours("CES_INQUIRY.RETRIEVE_ALL_LABOUR", m_str_RBNumber, "RB")
    
    If RS.RecordCount > 0 Then
        txtLabourSubtotal.Text = Format(ColumnTotals(RS, "TOTAL COST"), "currency")
        RS.MoveFirst
        Set grdTotalTime.DataSource = RS
    Else
        txtLabourSubtotal.Text = Format(0#, "currency")
         Set grdTotalTime.DataSource = Nothing
    End If

    'Populate the ALL_LABOUR_SUMMARY table
    
    'Populate the ALL_MATERIALS_SUMMARY table
    
    'Set RS = modMain.CalculateAllMaterials(m_str_RBNumber, "RB")
        
    Set RS = modDBHelper.RetrieveRBPTotalCost2("CES_INQUIRY.RETRIEVE_RBP_TOTAL_COST2", m_str_RBNumber, "RB")
        
    If RS.RecordCount > 0 Then
          txtMaterialTotal.Text = Format(ColumnTotals(RS, "TOTAL COST"), "currency")
          RS.MoveFirst
    Else
        txtMaterialTotal.Text = Format(0#, "currency")
    End If
 
   'Set RS = RetrieveAllMaterialSummary("CES_INQUIRY.RETRIEVE_ALL_MATERIAL_SUMMARY")

    If RS.RecordCount > 0 Then
        Set grdMaterialsCostCentreTotals.DataSource = RS
    Else
        Set grdMaterialsCostCentreTotals.DataSource = Nothing
    End If
    
    'Total each of the sections
    txtLabourOverheadAmount.Text = Format(CCur(txtLabourSubtotal.Text) * _
                                          CCur(g_dbl_OverheadFringeValue), _
                                          "Currency")
    'cboBusSeries
    Set RS = modDBHelper.RetrieveRBListOfBuses("CES_INQUIRY.RB_LIST_BUSES", _
                                               Trim(txtRebuiltCode.Text))
        
    If RS.RecordCount > 0 Then
        Do While Not RS.EOF
        cboBusSeries.AddItem (RS.Fields(1).Value)
        RS.MoveNext
        Loop
        cboBusSeries.Text = cboBusSeries.List(0)
    End If
    
    
    ' Retrieve the tax rate
    Set RS = modDBHelper.RetrieveCESSettings("CES_INQUIRY.RETRIEVE_CES_SETTI", _
                                             "TAX_RATE")
    If RS.RecordCount > 0 Then
        dbl_TaxRate = CDbl(Replace(RS.Fields("VALUE").Value, ",", "."))
    Else
        dbl_TaxRate = 0
    End If
    Set RS = Nothing
    
    txtLabourTotal.Text = Format(CCur(txtLabourSubtotal.Text) + _
                                 CCur(txtLabourOverheadAmount.Text), _
                                 "Currency")
                                 
    'txtMaterialTotal.Text = frmRebuiltPartsAddMaterials.txtTotalMaterialsCost.Text
    
    str_LabourTotal = Trim(txtLabourTotal.Text)
    
    If str_LabourTotal = "" Then
        str_LabourTotal = "0"
    Else
        If IsNumeric(str_LabourTotal) = False Then
            str_LabourTotal = "0"
        End If
    End If
    
    str_MaterialTotal = Trim(txtMaterialTotal.Text)
    If str_MaterialTotal = "" Then
        str_MaterialTotal = "0"
    Else
        If IsNumeric(str_MaterialTotal) = False Then
            str_MaterialTotal = "0"
        End If
    End If
    
    str_CoreCost = Trim(txtCoreCost.Text)
    If str_CoreCost = "" Then
        str_CoreCost = "0"
    Else
        If IsNumeric(str_CoreCost) = False Then
            str_CoreCost = "0"
        End If
    End If
    
    txtTaxTotal.Text = Format(dbl_TaxRate * CCur(txtMaterialTotal), "currency")
    
    txtTotalRebuiltPartCost.Text = Format(CCur(str_LabourTotal) + CCur(str_MaterialTotal) - CCur(str_CoreCost), "currency")
        
    str_TotalRebuiltPartCost = Trim(txtTotalRebuiltPartCost.Text)
    If str_TotalRebuiltPartCost = "" Then
        str_TotalRebuiltPartCost = "0.00"
    End If
 
    txtTotalRebuiltPartCostWithTax.Text = Format(CCur(txtTaxTotal.Text) + CCur(txtTotalRebuiltPartCost.Text), "currency")

    'PropagateRebuiltPartChanges m_str_RBNumber, False
    
    'Format the columns of the data grids
    Call FormatColumns
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Populate", g_l_ErrorLineNumber
    If Not RSNewStock Is Nothing Then
        Set RSNewStock = Nothing
    End If
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub FormatColumns()
    On Error GoTo Error_Handler
    
    If Not grdLabour.Row Then
        grdLabour.Columns("CC").Width = 500
        'grdLabour.Columns("CC").Visible = False
        grdLabour.Columns("TASK").Width = 1600
        grdLabour.Columns("LABOUR TYPE").Width = 2120
        grdLabour.Columns("USAGE").Width = 620
        grdLabour.Columns("USAGE").Alignment = dbgRight
        grdLabour.Columns("TIME").Width = 600
        grdLabour.Columns("TIME").Alignment = dbgRight
        grdLabour.Columns("WRENCH TIME").Width = 1200
        grdLabour.Columns("WRENCH TIME").Alignment = dbgRight
        grdLabour.Columns("DATE REVISED").Width = 1900 '1725
        grdLabour.Columns("DATE REVISED").Alignment = dbgRight
        grdLabour.Columns("DATE REVISED").NumberFormat = "yyyy-mmm-dd hh:mm AMPM"
        grdLabour.Columns("TIME ADDITION").Visible = False
        grdLabour.Columns("VALUE").Visible = False
        grdLabour.Columns("ROWID").Visible = False
    End If

    If Not grdMaterialsCostCentreTotals.Row Then
        With grdMaterialsCostCentreTotals
            .Columns("CC").Width = 500
            .Columns("CC").Caption = "CC"
            .Columns("TOTAL COST").Alignment = dbgRight
            .Columns("TOTAL COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("TOTAL COST").Width = 1400
            .Columns("TAXABLE COST").Visible = False
        End With
    End If
    
    If Not grdTotalTime.Row Then
        grdTotalTime.Columns("COST CENTRE").Width = 500
        grdTotalTime.Columns("COST CENTRE").Caption = "CC"
        grdTotalTime.Columns("LABOUR HRS").Width = 1200
        grdTotalTime.Columns("LABOUR HRS").Alignment = dbgRight
          grdTotalTime.Columns("TOTAL COST").Visible = False
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "FormatColumns", g_l_ErrorLineNumber
End Sub

Private Sub btnRebuiltPartEdit_Click()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    frmAddRebuiltPart.m_str_MMSStockCode = m_str_LinkNumber
    frmAddRebuiltPart.m_str_RebuiltCode = m_str_RBNumber
    frmAddRebuiltPart.m_str_AuditReference = m_str_RBNumber
    frmAddRebuiltPart.Show vbModal
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "btnRebuiltPartEdit_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub cmdArchive_Click()
    
    On Error GoTo Error_Handler
    
    Archive_RB False
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdArchive_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub
Public Sub Archive_RB(ByVal silent_mode As Boolean)
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    If Not silent_mode Then
        m_str_Msg = "Are you sure you want to Archive Rebuilt Part # " + m_str_RBNumber + "?"
        l_Result = MsgBox(m_str_Msg, vbOKCancel Or vbQuestion, "Archive Rebuit Part?")
    Else
        l_Result = vbOK
        
        Set RS = New ADODB.Recordset
        Set RS = modDBHelper.RetrieveRBPUsed("CES_INQUIRY.RETRIEVE_RBP_USED", _
                                         txtRebuiltCode.Text, _
                                         "RB")
                                         
        '''Loops through any underlying RB parts and archives them, as well.
        If RS.RecordCount > 0 Then
            Do While RS.EOF = False
               
               'Calls up details and Archives
               ArchRBPSubsets (RS.Fields.Item("REBUILT NUMBER"))
               RS.MoveNext
            Loop
            
        End If
        Set RS = Nothing
        
    End If
     
     
    
    If l_Result = vbOK Then
        Call SetWaitCursor
             
        
        l_Result = modDBHelper.ArchiveRB("CES_ARCHIVE.ARCHIVE_RB", _
                                    l_RetVal, _
                                    txtRebuiltCode.Text, _
                                    g_str_UserName, _
                                    m_str_RBNumber, _
                                    "RB", _
                                    Trim(txtLabourSubtotal.Text), _
                                    Trim(txtLabourOverheadAmount.Text), _
                                    Trim(txtLabourTotal.Text), _
                                    Trim(txtMaterialTotal.Text), _
                                    Trim(txtTotalRebuiltPartCost.Text), _
                                    Trim(txtTaxTotal.Text), _
                                    Trim(txtTotalRebuiltPartCostWithTax.Text))
        
        If l_Result = 0 Then
            'Call SetDefaultCursor
            If Not silent_mode Then
                m_str_Msg = "Archiving Rebuilt Part Number = " + txtRebuiltCode.Text + " is complete."
                MsgBox m_str_Msg, vbOKOnly Or vbInformation, "Rebuilt Part Archiving"
            End If
        Else
            Call SetDefaultCursor
            m_str_Msg = "Archiving Rebuilt Part Number = " + txtRebuiltCode.Text + " has failed."
            MsgBox m_str_Msg, vbInformation Or vbOKOnly, "Rebuilt Part Archiving"
        End If
       
        
        
        '''''
    End If
    
    Call SetDefaultCursor
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdArchive_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor

End Sub



Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    Dim str_TotalRebuiltPartCost As String
    
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor
    
    'Unload the add materials form
    Unload frmRebuiltPartsAddMaterials
    
    ' Close the existing show all labour form
    If Not frmViewAllLabour Is Nothing Then
        Unload frmViewAllLabour
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub grdLabour_DblClick()
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not allow user go further, just exit sub.
        Exit Sub
    End If
    
    'Update the Labour in the Rebuilt Part
    If Not grdLabour.Row Then
        Call SetWaitCursor
        m_var_RowID = grdLabour.Columns("ROWID").Text
        frmAddLabourTask.m_str_AuditReference = Trim(txtRebuiltCode.Text)
        frmAddLabourTask.m_str_LinkNumber = m_str_RBNumber
        frmAddLabourTask.m_str_PartID = m_var_RowID
        frmAddLabourTask.m_str_TypeID = "RB"
        frmAddLabourTask.Show vbModal
        Call Populate
    End If

    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdLabour_DblClick", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub grdLabour_KeyDown(KeyCode As Integer, Shift As Integer)
    'Delete the Labour from the Rebuilt Part
    Dim str_PartID As String
    Dim RS As ADODB.Recordset
    Dim l_count As Long
    
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not allow user go further, just exit sub.
        Exit Sub
    End If
    
    If KeyCode = vbKeyDelete Then
        m_str_Msg = "Are you sure you want to delete this item?"
        l_Result = MsgBox(m_str_Msg, vbOKCancel Or vbQuestion, "Rebuit Part")
        If l_Result = vbOK Then
            Call SetWaitCursor
            str_PartID = grdLabour.Columns("ROWID").Text
            l_Result = modDBHelper.DeleteMBLabour("CES_DELETE.DELETE_MBLABOUR", _
                                                  l_RetVal, _
                                                  str_PartID)
            '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT Begin >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            'Add record to the AUDIT_MODIFY_HISTORY table.
            l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                                        "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                                        l_RetVal, _
                                        "Delete Labour", _
                                        txtRebuiltCode.Text, _
                                        "RB", _
                                        "LABOUR TYPE ---> " + grdLabour.Columns("LABOUR TYPE").Text, _
                                        "CC ---> " + grdLabour.Columns("CC").Text, _
                                        "TASK ---> " + grdLabour.Columns("TASK").Text, _
                                        "USAGE ---> " + grdLabour.Columns("USAGE").Text, _
                                        "TIME ---> " + grdLabour.Columns("TIME").Text, _
                                        "WRENCH TIME ---> " + grdLabour.Columns("WRENCH TIME").Text, _
                                        "DATE REVISED ---> " + grdLabour.Columns("DATE REVISED").Text)
            
            Set RS = New ADODB.Recordset
            
            'In the SC_PARTS_USED table find all Estimates where the current RBE is present.
            Set RS = modDBHelper.RetrieveESTToPropagateRB("CES_INQUIRY.RETRIEVE_EST_TO_PROPAGATE_RB", _
                                                          txtRebuiltCode.Text)
            If RS.RecordCount > 0 Then
                RS.MoveFirst
                    For l_count = 0 To RS.RecordCount - 1
                        'Add records to the AUDIT_MODIFY_HISTORY table.
                        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "Indirect change. Labour was deleted from the Rebuilt Part Estimate " + m_str_RBNumber, _
                            RS.Fields.Item("link_code"), _
                            RS.Fields.Item("link_type"), _
                            "LABOUR TYPE ---> " + grdLabour.Columns("LABOUR TYPE").Text, _
                            "CC ---> " + grdLabour.Columns("CC").Text, _
                            "TASK ---> " + grdLabour.Columns("TASK").Text, _
                            "USAGE ---> " + grdLabour.Columns("USAGE").Text, _
                            "TIME ---> " + grdLabour.Columns("TIME").Text, _
                            "WRENCH TIME ---> " + grdLabour.Columns("WRENCH TIME").Text, _
                            "DATE REVISED ---> " + grdLabour.Columns("DATE REVISED").Text)
                        
                        RS.MoveNext
                    Next l_count
            End If
    
            Set RS = Nothing
            '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT End >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            Call RefreshForm
            Call SetDefaultCursor
        End If
    End If
    
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdLabour_KeyDown", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    Call SetDefaultCursor
End Sub

Private Sub PopulateChangesMadeBy()
    Dim l_count As Long
    Dim str_Temp As String
    Dim RS As ADODB.Recordset

    On Error GoTo Error_Handler
    
    cboChangesMadeBy.Clear
    
    Set RS = New ADODB.Recordset
    'Populate cboChangesMadeBy combo-box. Show only 5 recent items.
    Set RS = modDBHelper.RetrieveAudit6( _
                    "CES_INQUIRY.RETRIEVE_AUDIT_6", _
                    txtRebuiltCode.Text, _
                    "RB")
    
    If RS.RecordCount > 0 Then
        RS.MoveFirst
        For l_count = 0 To RS.RecordCount - 1
            If l_count = 5 Then
                Exit For
            End If
            str_Temp = Format(RS.Fields.Item("DATE_CHANGED"), "yyyy-mmm-dd hh:mm:ss AMPM")
            str_Temp = CStr(str_Temp)
            str_Temp = str_Temp + " ---> "
            str_Temp = str_Temp + CStr(RS.Fields.Item("USER_NAME"))
            cboChangesMadeBy.AddItem str_Temp
            RS.MoveNext
        Next l_count
    End If
    
    If RS.RecordCount > 0 Then
        cboChangesMadeBy.Text = cboChangesMadeBy.List(0)
    End If
    
    Set RS = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateChangesMadeBy", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub tbMenu_ButtonMenuClick(ByVal ButtonMenu As MSComctlLib.ButtonMenu)
    Dim str_Temp As String
    
    On Error GoTo Error_Handler
    
    Select Case ButtonMenu
        Case "Send To Mail Recipient"
            Call modMain.SendEmail
        Case "Close"
            Unload Me
        Case "Add a Labour Task"
            Call SetWaitCursor
            frmAddLabourTask.m_str_AuditReference = Trim(txtRebuiltCode.Text)
            frmAddLabourTask.m_str_LinkNumber = m_str_RBNumber
            frmAddLabourTask.m_str_TypeID = "RB"
            frmAddLabourTask.Show vbModal
            Call RefreshForm
            Call SetDefaultCursor
        Case "Materials Listing"
            If frmRebuiltPartsAddMaterials.WindowState = 1 Then
                frmRebuiltPartsAddMaterials.WindowState = 0
            End If
            frmRebuiltPartsAddMaterials.Show
            frmRebuiltPartsAddMaterials.SetFocus
        Case "Modify History"
            'Close the Audit form if it is opened.
            If Not frmViewAudit Is Nothing Then
                Unload frmViewAudit
            End If
            str_Temp = " - Rebuilt Part Estimate for Rebuilt Number: " + txtRebuiltCode.Text
            frmViewAudit.m_str_EstimateNumber = txtRebuiltCode.Text
            frmViewAudit.m_b_FromAdministration = False
            frmViewAudit.m_str_EstimateType = "RB"
            frmViewAudit.Caption = frmViewAudit.Caption + str_Temp
            frmViewAudit.Show
         Case "Archived Database"
            frmArchivedHistory.m_str_LinkCode = txtRebuiltCode.Text
            frmArchivedHistory.m_str_EstimateType = "RB"
            frmArchivedHistory.Show
         Case "All Labour"
            frmViewAllLabour.PassValues m_str_RBNumber, "RB"
            If frmViewAllLabour.WindowState = 1 Then
                frmViewAllLabour.WindowState = 0
            End If
            frmViewAllLabour.Show
            frmViewAllLabour.SetFocus
          Case "Edit Rebuilt Part Information"
         
                frmAddRebuiltPart.m_str_MMSStockCode = m_str_LinkNumber
                frmAddRebuiltPart.m_str_RebuiltCode = m_str_RBNumber
                frmAddRebuiltPart.m_str_AuditReference = m_str_RBNumber
                frmAddRebuiltPart.Show vbModal
        
        Case "Archive Rebuilt Part"
            Archive_RB False
        
        Case "Print"
            showRebuiltCostEstimateReport m_str_RBNumber, m_str_LinkNumber
    End Select
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "tbMenu_ButtonMenuClick", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

frmSearchMB.frm :
VERSION 5.00
Object = "{CDE57A40-8B86-11D0-B3C6-00A0C90AEA82}#1.0#0"; "MSDATGRD.OCX"
Object = "{F0D2F211-CCB0-11D0-A316-00AA00688B10}#1.0#0"; "MSDATLST.OCX"
Begin VB.Form frmSearchMB 
   BorderStyle     =   1  'Fixed Single
   Caption         =   "Search Make Vs. Buy"
   ClientHeight    =   6270
   ClientLeft      =   45
   ClientTop       =   330
   ClientWidth     =   10740
   Icon            =   "frmSearchMB.frx":0000
   LinkTopic       =   "Form1"
   MDIChild        =   -1  'True
   ScaleHeight     =   6270
   ScaleWidth      =   10740
   Begin MSDataGridLib.DataGrid grdSearchResults 
      Height          =   3675
      Left            =   0
      TabIndex        =   4
      Tag             =   "7"
      Top             =   2550
      Width           =   10680
      _ExtentX        =   18838
      _ExtentY        =   6482
      _Version        =   393216
      BackColor       =   12648447
      ForeColor       =   16711680
      HeadLines       =   1
      RowHeight       =   15
      BeginProperty HeadFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Caption         =   "SEARCH RESULTS"
      ColumnCount     =   2
      BeginProperty Column00 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      BeginProperty Column01 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      SplitCount      =   1
      BeginProperty Split0 
         BeginProperty Column00 
         EndProperty
         BeginProperty Column01 
         EndProperty
      EndProperty
   End
   Begin VB.CommandButton cmdSearch 
      Caption         =   "Search"
      Height          =   300
      Left            =   4635
      TabIndex        =   3
      Top             =   2130
      Width           =   1485
   End
   Begin VB.Frame fraSearchCriteria 
      Caption         =   "Enter Search Criteria:"
      Height          =   2340
      Left            =   915
      TabIndex        =   5
      Top             =   105
      Width           =   8805
      Begin VB.ComboBox cboBusList 
         Height          =   315
         Left            =   5670
         Style           =   2  'Dropdown List
         TabIndex        =   13
         Tag             =   "6"
         Top             =   810
         Width           =   2850
      End
      Begin VB.OptionButton optSearchByBusType 
         Caption         =   "Search By Vehicle Type"
         Height          =   210
         Left            =   5925
         TabIndex        =   11
         Tag             =   "2"
         Top             =   330
         Width           =   2070
      End
      Begin VB.OptionButton optSearchMB 
         Caption         =   "Search Make vs. Buy"
         Height          =   210
         Left            =   1395
         TabIndex        =   10
         Tag             =   "1"
         Top             =   345
         Width           =   2070
      End
      Begin MSDataListLib.DataCombo cboRebuildNumber 
         Height          =   315
         Left            =   1680
         TabIndex        =   2
         Tag             =   "5"
         Top             =   1500
         Width           =   2190
         _ExtentX        =   3863
         _ExtentY        =   556
         _Version        =   393216
         Text            =   ""
      End
      Begin MSDataListLib.DataCombo cboMakeBuyNumber 
         Height          =   315
         Left            =   1680
         TabIndex        =   0
         Tag             =   "3"
         Top             =   780
         Width           =   2190
         _ExtentX        =   3863
         _ExtentY        =   556
         _Version        =   393216
         Text            =   ""
      End
      Begin MSDataListLib.DataCombo cboKeyword 
         Height          =   315
         Left            =   1680
         TabIndex        =   1
         Tag             =   "4"
         Top             =   1125
         Width           =   2190
         _ExtentX        =   3863
         _ExtentY        =   556
         _Version        =   393216
         Text            =   ""
      End
      Begin VB.Label lblBusList 
         BackColor       =   &H80000000&
         Caption         =   "Vehicle List:"
         Height          =   225
         Left            =   4785
         TabIndex        =   12
         Tag             =   "6"
         Top             =   855
         Width           =   915
      End
      Begin VB.Line Line1 
         BorderColor     =   &H80000003&
         BorderStyle     =   4  'Dash-Dot
         BorderWidth     =   3
         DrawMode        =   9  'Not Mask Pen
         X1              =   4455
         X2              =   4455
         Y1              =   120
         Y2              =   2040
      End
      Begin VB.Label lblKeyword 
         BackColor       =   &H80000000&
         Caption         =   "Keyword:"
         Height          =   225
         Left            =   915
         TabIndex        =   9
         Tag             =   "4"
         Top             =   1170
         Width           =   735
      End
      Begin VB.Label lblMakeBuyNumber 
         BackColor       =   &H80000000&
         Caption         =   "Make Vs. Buy #:"
         Height          =   225
         Left            =   420
         TabIndex        =   7
         Tag             =   "3"
         Top             =   810
         Width           =   1260
      End
      Begin VB.Label lblRebuildNumber 
         BackColor       =   &H80000000&
         Caption         =   "Rebuild Number:"
         Height          =   225
         Left            =   375
         TabIndex        =   6
         Tag             =   "5"
         Top             =   1545
         Width           =   1200
      End
   End
   Begin MSDataListLib.DataCombo DataCombo1 
      Height          =   315
      Left            =   4275
      TabIndex        =   8
      Top             =   915
      Width           =   2595
      _ExtentX        =   4577
      _ExtentY        =   556
      _Version        =   393216
      Text            =   ""
   End
End
Attribute VB_Name = "frmSearchMB"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
'==========================================================================
'frmSearchMB
'
'This form searches the database for Make Vs Buy Estimates.
'Returns the results in a grid.
'
'===========================================================================
Option Explicit

Private m_str_Msg As String

'================================================================
'Form_Load()
'
'When the form loads:
'
'1-Set restrictions for the page.
'2-Populate the dropdown section of the search criteria boxes
'================================================================

Private Sub Form_Load()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    optSearchMB.Value = True
    optSearchByBusType.Value = False
    cboBusList.Enabled = False
    optSearchMB.ForeColor = &HFF&
    optSearchByBusType.ForeColor = &H80000012

    Call PopulateDropdowns
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

'================================================================
'search_Click()
'
'Reads the search criteria and executes the query on the oracle database
'and populates the associated grid with the result information.
'================================================================
Private Sub cmdSearch_Click()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    Call FillSearchGrid
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdSearch_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Public Sub FillSearchGrid()
    Dim RS As ADODB.Recordset
    Dim l_BusID As Long

    On Error GoTo Error_Handler
    Call SetDefaultCursor

    Set RS = New ADODB.Recordset
    
    If optSearchMB.Value = True Then
        'From the input boxes execute the query on the database, returns a recordset
        Set RS = modDBHelper.SearchMB("CES_INQUIRY.SEARCH_MB", cboMakeBuyNumber.Text, _
                                      cboRebuildNumber.Text, cboKeyword.Text)
    Else 'If optSearchByBusType.Value = True
        If cboBusList.Text = "" Then
            MsgBox "Choose Vehicle Type."
            cboBusList.SetFocus
            Exit Sub
        End If
        l_BusID = cboBusList.ItemData(cboBusList.ListIndex)
        Set RS = modDBHelper.SearchMBByBus("CES_INQUIRY.SEARCH_MB_BY_BUS", _
                                           l_BusID)
    End If
    
    Set grdSearchResults.DataSource = RS
    Set RS = Nothing

    Call FormatGrid
    Call UserPermissions
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "FillSearchGrid", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

'================================================================
'grdSearchResults_DblClick()
'
'When double clicking on a row in the result grid, open a new form and
'pass some of the selected rows data to the new form.
'================================================================
Private Sub grdSearchResults_DblClick()
    On Error GoTo Error_Handler
    
    If Not grdSearchResults.Row Then
    ' Show frmMBEstimateOptions
        frmMBEstimateOptions.m_str_MBNumber = grdSearchResults.Columns("MB NUMBER").Text
        frmMBEstimateOptions.m_v_RowID = grdSearchResults.Columns("ROWID").Text
        
        frmMBEstimateOptions.Show vbModal
    Else
        MsgBox "No Rows to select, Please Try Again"
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdSearchResults_DblClick", g_l_ErrorLineNumber
End Sub

Public Sub FormatGrid()
    On Error GoTo Error_Handler
    
    'Hide the last column of the grid
    grdSearchResults.Columns("ROWID").Visible = False
    grdSearchResults.Columns("MB NUMBER").Width = 1300
    grdSearchResults.Columns("KEYWORD").Width = 2300
    grdSearchResults.Columns("DESCRIPTION").Width = 4000
    grdSearchResults.Columns("BUS TYPE").Width = 1500
    grdSearchResults.Columns("# BUSES USING COMP").Alignment = dbgRight
    grdSearchResults.Columns("# BUSES USING COMP").Width = 2200
    grdSearchResults.Columns("VENDOR PART #").Alignment = dbgRight
    grdSearchResults.Columns("VENDOR PART #").Width = 1700
    grdSearchResults.Columns("BUY CODE").Alignment = dbgRight
    grdSearchResults.Columns("BUY CODE").Width = 1500
    grdSearchResults.Columns("REBUILT CODE").Alignment = dbgRight
    grdSearchResults.Columns("CORE CODE").Alignment = dbgRight
    grdSearchResults.Columns("ANNUAL USAGE").Alignment = dbgRight
    grdSearchResults.Columns("BENCH NUMBER").Alignment = dbgRight
    grdSearchResults.Columns("SAMPLE PROVIDED").Alignment = dbgRight
    grdSearchResults.Columns("RECOMMENDATION").Alignment = dbgRight
    grdSearchResults.Columns("REMAN EX COST").Alignment = dbgRight
    grdSearchResults.Columns("REMAN EX COST").NumberFormat = "$#,##0.00;($#,##0.00)"
    grdSearchResults.Columns("EXTERNAL COST").Alignment = dbgRight
    grdSearchResults.Columns("EXTERNAL COST").NumberFormat = "$#,##0.00;($#,##0.00)"
    grdSearchResults.Columns("NEW COST").Alignment = dbgRight
    grdSearchResults.Columns("NEW COST").NumberFormat = "$#,##0.00;($#,##0.00)"
    grdSearchResults.Columns("INTERNAL COST").Alignment = dbgRight
    grdSearchResults.Columns("INTERNAL COST").NumberFormat = "$#,##0.00;($#,##0.00)"
    grdSearchResults.Columns("SOP NUMBER").Alignment = dbgRight
    grdSearchResults.Columns("CORE COST").Alignment = dbgRight
    grdSearchResults.Columns("CORE COST").NumberFormat = "$#,##0.00;($#,##0.00)"
    grdSearchResults.Columns("JOB NUMBER").Alignment = dbgRight
    grdSearchResults.Columns("DATE OPENED").NumberFormat = "yyyy-mmm-dd hh:mm AMPM"
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "FormatGrid", g_l_ErrorLineNumber
End Sub

Private Sub PopulateDropdowns()
    Dim RS As ADODB.Recordset
    Dim l_count As Long
    
    On Error GoTo Error_Handler
        
    'Load the data into the input forms for editing
    
    Set RS = New ADODB.Recordset
    
    Set RS = modDBHelper.RetrieveMB("CES_INQUIRY.RETRIEVE_MB")
    
    Set cboKeyword.RowSource = RS
    Set cboRebuildNumber.RowSource = RS
    Set cboMakeBuyNumber.RowSource = RS
    
    cboKeyword.ListField = "keyword"
    cboRebuildNumber.ListField = "rebuild_code"
    cboMakeBuyNumber.ListField = "mb_number"
        
    'Fill the cboBusList combo-box.
    cboBusList.Clear
    Set RS = modDBHelper.RetrieveListOfBuses("CES_INQUIRY.RETRIEVE_LIST_OF_BUSES")
    If RS.RecordCount > 0 Then
        RS.MoveFirst
        For l_count = 0 To RS.RecordCount - 1
            cboBusList.AddItem RS.Fields.Item("DESCRIPTION")
            cboBusList.ItemData(cboBusList.NewIndex) = CLng(RS.Fields.Item("LIST_ID"))
            RS.MoveNext
        Next l_count
    End If

    Set RS = Nothing
        
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateDropdowns", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

'Implement delete function for MB Estimate (request #232922)
Private Sub grdSearchResults_KeyDown(KeyCode As Integer, Shift As Integer)
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_MBNumber As String

    On Error GoTo Error_Handler

    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not allow go further, just exit sub.
        Exit Sub
    End If

    If (KeyCode = vbKeyDelete And Not grdSearchResults.Row) Then
        str_MBNumber = grdSearchResults.Columns("MB NUMBER").Text
        l_Result = MsgBox("Are you sure you want to delete the Make Vs. Buy Estimate '" + str_MBNumber + "' and all its associated material and labour cost?", vbOKCancel, "Confirm Make Vs. Buy Estimate Delete")
        If l_Result = vbOK Then
            'Delete MB Estimate from system.
            l_Result = modDBHelper.DeleteMBEstimate("CES_DELETE.DELETE_MB_ESTIMATE", _
                                            l_RetVal, _
                                            str_MBNumber)
            If l_Result = 0 Then
                m_str_Msg = "Make Vs. Buy Estimate '" & str_MBNumber & "' has been deleted."
                MsgBox m_str_Msg, vbOKOnly Or vbInformation, "Delete Make Vs. Buy Estimate"
                                            
                'Add record to the AUDIT_MODIFY_HISTORY table.
                l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                                "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                                l_RetVal, "Make Vs. Buy Estimate was deleted from the System", str_MBNumber, "MB", _
                                "MB NUMBER ---> " + grdSearchResults.Columns("MB NUMBER").Text, _
                                "KEYWORD ---> " + grdSearchResults.Columns("KEYWORD").Text, _
                                "DESCRIPTION ---> " + grdSearchResults.Columns("DESCRIPTION").Text, _
                                "BUS TYPE ---> " + grdSearchResults.Columns("BUS TYPE").Text, _
                                "# BUSES USING COMP ---> " + grdSearchResults.Columns("# BUSES USING COMP").Text, _
                                "VENDOR PART # ---> " + grdSearchResults.Columns("VENDOR PART #").Text, _
                                "BUY CODE ---> " + grdSearchResults.Columns("BUY CODE").Text, _
                                "REBUILT CODE ---> " + grdSearchResults.Columns("REBUILT CODE").Text, _
                                "CORE CODE ---> " + grdSearchResults.Columns("CORE CODE").Text, _
                                "ANNUAL USAGE ---> " + grdSearchResults.Columns("ANNUAL USAGE").Text, _
                                "BENCH NUMBER ---> " + grdSearchResults.Columns("BENCH NUMBER").Text, _
                                "SAMPLE PROVIDED ---> " + grdSearchResults.Columns("SAMPLE PROVIDED").Text, _
                                "RECOMMENDATION ---> " + grdSearchResults.Columns("RECOMMENDATION").Text, _
                                "REMAN EX COST ---> " + grdSearchResults.Columns("REMAN EX COST").Text, _
                                "EXTERNAL COST ---> " + grdSearchResults.Columns("EXTERNAL COST").Text, _
                                "NEW COST ---> " + grdSearchResults.Columns("NEW COST").Text, _
                                "INTERNAL COST ---> " + grdSearchResults.Columns("INTERNAL COST").Text, _
                                "SOP NUMBER ---> " + grdSearchResults.Columns("SOP NUMBER").Text, _
                                "CORE COST ---> " + grdSearchResults.Columns("CORE COST").Text, _
                                "JOB NUMBER ---> " + grdSearchResults.Columns("JOB NUMBER").Text)
                Call cmdSearch_Click
            Else
                m_str_Msg = "Make Vs. Buy Estimate '" & str_MBNumber & "' was not deleted."
                MsgBox m_str_Msg, vbOKOnly Or vbInformation, "Delete Make Vs. Buy Estimate"
            End If
        End If
    End If

    Exit Sub
Error_Handler:
     modDBHelper.LogErrorToDB Me.Name, "grdSearchResults_KeyDown", Erl
End Sub

Private Sub optSearchByBusType_Click()
    On Error GoTo Error_Handler

    cboBusList.Enabled = True
    cboMakeBuyNumber.Enabled = False
    cboKeyword.Enabled = False
    cboRebuildNumber.Enabled = False
    optSearchMB.ForeColor = &H80000012
    optSearchByBusType.ForeColor = &HFF&
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "optSearchByBusType_Click", g_l_ErrorLineNumber
End Sub

Private Sub optSearchMB_Click()
    On Error GoTo Error_Handler
    
    cboMakeBuyNumber.Enabled = True
    cboKeyword.Enabled = True
    cboRebuildNumber.Enabled = True
    cboBusList.Enabled = False
    optSearchMB.ForeColor = &HFF&
    optSearchByBusType.ForeColor = &H80000012
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "optSearchMB_Click", g_l_ErrorLineNumber
End Sub

Private Sub UserPermissions()
    On Error GoTo Error_Handler

    If g_l_AccessLevel = 1 Then
        If grdSearchResults.Columns.Count > 2 Then
            'Grid "Serach Results". Columns "REMAIN_COST", "EXTERNAL_COST",
            '"BUY_NEW_COST", "INTERNAL_COST", "CORE_COST" are invisible.
            grdSearchResults.Columns("REMAN EX COST").Visible = False
            grdSearchResults.Columns("EXTERNAL COST").Visible = False
            grdSearchResults.Columns("NEW COST").Visible = False
            grdSearchResults.Columns("INTERNAL COST").Visible = False
            grdSearchResults.Columns("CORE COST").Visible = False
        End If
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "UserPermissions", g_l_ErrorLineNumber
End Sub
frmSearchPart.frm :
VERSION 5.00
Object = "{0D452EE1-E08F-101A-852E-02608C4D0BB4}#2.0#0"; "FM20.DLL"
Object = "{CDE57A40-8B86-11D0-B3C6-00A0C90AEA82}#1.0#0"; "MSDATGRD.OCX"
Begin VB.Form frmSearchPart 
   BackColor       =   &H80000000&
   BorderStyle     =   1  'Fixed Single
   Caption         =   "Search Part"
   ClientHeight    =   8025
   ClientLeft      =   480
   ClientTop       =   765
   ClientWidth     =   12840
   Icon            =   "frmSearchPart.frx":0000
   LinkTopic       =   "Form4"
   MDIChild        =   -1  'True
   NegotiateMenus  =   0   'False
   ScaleHeight     =   8025
   ScaleWidth      =   12840
   Begin VB.ComboBox cboBusSeries 
      Height          =   315
      Left            =   2580
      Style           =   2  'Dropdown List
      TabIndex        =   6
      Top             =   1650
      Width           =   3075
   End
   Begin MSDataGridLib.DataGrid grdRebuiltParts 
      Height          =   1785
      Left            =   45
      TabIndex        =   12
      Top             =   6150
      Width           =   12660
      _ExtentX        =   22331
      _ExtentY        =   3149
      _Version        =   393216
      BackColor       =   12648447
      ForeColor       =   16711680
      HeadLines       =   1
      RowHeight       =   15
      BeginProperty HeadFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Caption         =   "REBUILT PARTS"
      ColumnCount     =   2
      BeginProperty Column00 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      BeginProperty Column01 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      SplitCount      =   1
      BeginProperty Split0 
         BeginProperty Column00 
         EndProperty
         BeginProperty Column01 
         EndProperty
      EndProperty
   End
   Begin MSDataGridLib.DataGrid grdNonStockCodedParts 
      Height          =   1830
      Left            =   60
      TabIndex        =   11
      ToolTipText     =   "Double Click the desired row to edit the record."
      Top             =   4320
      Width           =   12660
      _ExtentX        =   22331
      _ExtentY        =   3228
      _Version        =   393216
      AllowUpdate     =   0   'False
      BackColor       =   12648447
      Enabled         =   -1  'True
      ForeColor       =   16711680
      HeadLines       =   1
      RowHeight       =   15
      FormatLocked    =   -1  'True
      BeginProperty HeadFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Caption         =   "NON-STOCK CODED PARTS"
      ColumnCount     =   2
      BeginProperty Column00 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      BeginProperty Column01 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      SplitCount      =   1
      BeginProperty Split0 
         BeginProperty Column00 
         EndProperty
         BeginProperty Column01 
         EndProperty
      EndProperty
   End
   Begin MSDataGridLib.DataGrid grdStockCodedParts 
      Height          =   1920
      Left            =   45
      TabIndex        =   10
      ToolTipText     =   "Displays Stock Coded Parts matching any of the Search Criteria"
      Top             =   2400
      Width           =   12660
      _ExtentX        =   22331
      _ExtentY        =   3387
      _Version        =   393216
      BackColor       =   12648447
      ForeColor       =   16711680
      HeadLines       =   1
      RowHeight       =   15
      BeginProperty HeadFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Caption         =   "STOCK CODED PARTS"
      ColumnCount     =   2
      BeginProperty Column00 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      BeginProperty Column01 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      SplitCount      =   1
      BeginProperty Split0 
         BeginProperty Column00 
         EndProperty
         BeginProperty Column01 
         EndProperty
      EndProperty
   End
   Begin VB.ComboBox cboPrice 
      Height          =   315
      Left            =   2565
      Sorted          =   -1  'True
      Style           =   2  'Dropdown List
      TabIndex        =   4
      Top             =   1275
      Width           =   675
   End
   Begin VB.TextBox txtKeyword 
      Height          =   285
      Left            =   6780
      MaxLength       =   250
      TabIndex        =   7
      Top             =   930
      Width           =   3795
   End
   Begin VB.CommandButton cmdSearch 
      Caption         =   "Search"
      Default         =   -1  'True
      Height          =   300
      Left            =   5175
      TabIndex        =   9
      ToolTipText     =   "Click to execute search, any matches will be shown below"
      Top             =   2055
      Width           =   1485
   End
   Begin VB.TextBox txtDescription 
      Height          =   285
      Left            =   6795
      MaxLength       =   250
      TabIndex        =   8
      Top             =   1290
      Width           =   3795
   End
   Begin VB.TextBox txtPrice 
      Height          =   315
      Left            =   3255
      TabIndex        =   5
      Top             =   1275
      Width           =   1215
   End
   Begin VB.TextBox txtRebuiltNumber 
      Height          =   285
      Left            =   2565
      MaxLength       =   30
      TabIndex        =   3
      Top             =   915
      Width           =   1935
   End
   Begin VB.Frame fraTypeOfPart 
      Caption         =   "Type of Part"
      Height          =   615
      Left            =   2250
      TabIndex        =   16
      Top             =   90
      Width           =   8340
      Begin MSForms.OptionButton optTypeOfPart 
         Height          =   285
         Index           =   2
         Left            =   5490
         TabIndex        =   2
         ToolTipText     =   "Searches the CES application for Non Stock Coded Parts Using Criteria Below"
         Top             =   210
         Width           =   1935
         BackColor       =   -2147483648
         ForeColor       =   -2147483630
         DisplayStyle    =   5
         Size            =   "3413;503"
         Value           =   "0"
         Caption         =   "Non-Stock Coded Part"
         GroupName       =   "typepart"
         FontHeight      =   165
         FontCharSet     =   0
         FontPitchAndFamily=   2
      End
      Begin MSForms.OptionButton optTypeOfPart 
         Height          =   285
         Index           =   1
         Left            =   345
         TabIndex        =   0
         ToolTipText     =   "Searches the CES application for Rebuilt Part Estimates Using Criteria Below"
         Top             =   210
         Width           =   1635
         BackColor       =   -2147483648
         ForeColor       =   -2147483630
         DisplayStyle    =   5
         Size            =   "2884;503"
         Value           =   "1"
         Caption         =   "Rebuilt Part"
         GroupName       =   "typepart"
         FontHeight      =   165
         FontCharSet     =   0
         FontPitchAndFamily=   2
      End
      Begin MSForms.OptionButton optTypeOfPart 
         Height          =   285
         Index           =   0
         Left            =   2655
         TabIndex        =   1
         ToolTipText     =   "Searches MMS for a Stock Coded Part Using Criteria Below"
         Top             =   225
         Width           =   1635
         BackColor       =   -2147483648
         ForeColor       =   -2147483630
         DisplayStyle    =   5
         Size            =   "2884;503"
         Value           =   "0"
         Caption         =   "Stock Coded Part"
         GroupName       =   "typepart"
         FontHeight      =   165
         FontCharSet     =   0
         FontPitchAndFamily=   2
      End
   End
   Begin VB.Label Label1 
      Caption         =   "Parts Found"
      ForeColor       =   &H000000FF&
      Height          =   195
      Left            =   7755
      TabIndex        =   20
      Top             =   2100
      Width           =   1215
   End
   Begin VB.Label lblRecordsQty 
      Alignment       =   1  'Right Justify
      Caption         =   "0"
      ForeColor       =   &H000000FF&
      Height          =   195
      Left            =   6675
      TabIndex        =   19
      Top             =   2100
      Width           =   975
   End
   Begin VB.Label lblBusSeries 
      Caption         =   "Vehicle Series"
      Height          =   255
      Left            =   1440
      TabIndex        =   18
      Top             =   1710
      Width           =   1095
   End
   Begin VB.Label lblKeyword 
      Caption         =   "Keyword"
      Height          =   210
      Left            =   6045
      TabIndex        =   17
      Top             =   945
      Width           =   705
   End
   Begin VB.Label lblPrice 
      Caption         =   "Price"
      Height          =   210
      Left            =   2070
      TabIndex        =   15
      Top             =   1350
      Width           =   375
   End
   Begin VB.Label lblDescription 
      Caption         =   "Description"
      Height          =   225
      Left            =   5880
      TabIndex        =   14
      Top             =   1290
      Width           =   870
   End
   Begin VB.Label lblRebuiltNumber 
      Alignment       =   1  'Right Justify
      BackColor       =   &H80000000&
      Caption         =   "Rebuilt Number"
      Height          =   225
      Left            =   795
      TabIndex        =   13
      Top             =   975
      Width           =   1650
   End
End
Attribute VB_Name = "frmSearchPart"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
'=======================================================================================
'frmSearchPart.FRM
'
'This form is used to search for 3 types of parts
'1- Rebuilt Parts
'2- Non Stock Coded Parts
'3- Stock Coded Parts
'
'There are 5 different results the parts may appear in
'
'
'
'Rebuilt Parts
'Standard Operating Procedures
'Vehicle Summary
'Stock Coded Part List
'Non-Stock Coded Part List
'=======================================================================================
Option Explicit

Private m_str_Msg As String
Private Const m_str_const_All As String = "All"
Private Const m_str_const_NotAttached As String = "Not Attached"

'Used when Search Button is selected, initiates all the required searches
Private Sub cmdSearch_Click()
    On Error GoTo Error_Handler
    
    Call RefreshForm
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdSearch_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub RefreshForm()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    Call ClearGrids
    Call FillGrids
    Call UserPermissions
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "RefreshForm", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Public Sub FillGrids()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler

    Call SetWaitCursor
    lblRecordsQty.Caption = "0"
    lblRecordsQty.Refresh
    'Check what search criteria is chosen
    If (optTypeOfPart(1).Value = True) Then
        'Search for a rebuilt part populate the appropriate grid (grdRebuiltParts)
        Set RS = New ADODB.Recordset
        If Trim(cboBusSeries.Text) = "" Then
            'Search Rebuilt Parts regardless data in the cboBusSeries combo-box.
            Set RS = modDBHelper.SearchRBPart("CES_INQUIRY.SEARCH_RBPART", _
                                              txtRebuiltNumber.Text, _
                                              Val(txtPrice.Text), _
                                              txtDescription.Text, _
                                              txtKeyword.Text, _
                                              CLng(cboPrice.ListIndex))
            
            If RS.RecordCount <> 0 Then
                Set grdRebuiltParts.DataSource = RS
                lblRecordsQty.Caption = CStr(RS.RecordCount)
                Call InitRBColumns
            End If
        Else
            If Trim(cboBusSeries.Text) <> m_str_const_All And _
               Trim(cboBusSeries.Text) <> m_str_const_NotAttached Then
                'User selected one item (not "All" and not "Not Attached" from the
                'cboBusSeries combo-box.
                Set RS = modDBHelper.SearchRBPartBusSeries("CES_INQUIRY.SEARCH_RBPART_BUS_SERIES", _
                                        txtRebuiltNumber.Text, _
                                        txtDescription.Text, _
                                        txtKeyword.Text, _
                                        cboBusSeries.ItemData(cboBusSeries.ListIndex), _
                                        3)
                If RS.RecordCount <> 0 Then
                    Set grdRebuiltParts.DataSource = RS
                    lblRecordsQty.Caption = CStr(RS.RecordCount)
                    Call InitRBColumns
                End If
            End If
            
            If Trim(cboBusSeries.Text) = m_str_const_All Then
                'User selected "All" from the cboBusSeries combo-box.
                Set RS = modDBHelper.SearchRBPartBusSeries("CES_INQUIRY.SEARCH_RBPART_BUS_SERIES", _
                                        txtRebuiltNumber.Text, _
                                        txtDescription.Text, _
                                        txtKeyword.Text, _
                                        cboBusSeries.ItemData(cboBusSeries.ListIndex), _
                                        1)
                If RS.RecordCount <> 0 Then
                    Set grdRebuiltParts.DataSource = RS
                    lblRecordsQty.Caption = CStr(RS.RecordCount)
                    Call InitRBColumns
                End If
            End If

            If Trim(cboBusSeries.Text) = m_str_const_NotAttached Then
                'User selected "Not Attached" from the cboBusSeries combo-box.
                Set RS = modDBHelper.SearchRBPartBusSeries("CES_INQUIRY.SEARCH_RBPART_BUS_SERIES", _
                                        txtRebuiltNumber.Text, _
                                        txtDescription.Text, _
                                        txtKeyword.Text, _
                                        cboBusSeries.ItemData(cboBusSeries.ListIndex), _
                                        2)
                If RS.RecordCount <> 0 Then
                    Set grdRebuiltParts.DataSource = RS
                    lblRecordsQty.Caption = CStr(RS.RecordCount)
                    Call InitRBColumns
                End If
            End If

        End If
        
        If Not RS Is Nothing Then
            Set RS = Nothing
        End If
    ElseIf (optTypeOfPart(0).Value = True) Then
        'Search for a stock coded part in the rebuilt parts and populate
        'the appropriate grid.
        Set RS = New ADODB.Recordset
        Set RS = modDBHelper.SearchSCRBPartList("CES_INQUIRY.SEARCH_SC_RBPARTLIST", _
                                                txtRebuiltNumber.Text, _
                                                Val(txtPrice.Text), _
                                                txtDescription.Text, _
                                                CLng(cboPrice.ListIndex))
        
        If RS.RecordCount <> 0 Then
            Set grdRebuiltParts.DataSource = RS
            lblRecordsQty.Caption = CStr(RS.RecordCount)
            Call InitRBColumns
        End If
        
        'Search for a stock coded part in the system and populate
        'the appropriate grid.
        Set RS = modDBHelper.SearchSCPart("CES_INQUIRY.SEARCH_SC_PART", _
                                          txtRebuiltNumber.Text, _
                                          Val(txtPrice.Text), _
                                          txtDescription.Text, _
                                          txtKeyword.Text, _
                                          CLng(cboPrice.ListIndex))
            
        If RS.RecordCount <> 0 Then
            Set grdStockCodedParts.DataSource = RS
            lblRecordsQty.Caption = CStr(RS.RecordCount)
            Call InitSCColumns
        End If

        If Not RS Is Nothing Then
            Set RS = Nothing
        End If
    ElseIf (optTypeOfPart(2).Value = True) Then
        'Search for a non-stock coded part in the rebuilt parts and populate
        'the appropriate grid.
        Set RS = New ADODB.Recordset
        Set RS = modDBHelper.SearchNSCRBPartList("CES_INQUIRY.SEARCH_NSC_RBPARTLIST", _
                                                 txtRebuiltNumber.Text, _
                                                 Val(txtPrice.Text), _
                                                 txtDescription.Text, _
                                                 CLng(cboPrice.ListIndex))

        If RS.RecordCount <> 0 Then
            Set grdRebuiltParts.DataSource = RS
            lblRecordsQty.Caption = CStr(RS.RecordCount)
            Call InitRBColumns
        End If

        'Search for a non-stock coded part in the system and populate
        'the appropriate grid.
        Set RS = modDBHelper.SearchNSCPart("CES_INQUIRY.SEARCH_NSC_PART", _
                                           txtRebuiltNumber.Text, _
                                           Val(txtPrice.Text), _
                                           txtDescription.Text, _
                                           txtKeyword.Text, _
                                           CStr(cboPrice.ListIndex))
            
        If RS.RecordCount <> 0 Then
            Set grdNonStockCodedParts.DataSource = RS
            lblRecordsQty.Caption = CStr(RS.RecordCount)
            Call InitNonSCColumns
        End If
        If Not RS Is Nothing Then
            Set RS = Nothing
        End If
    End If

    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "FillGrids", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler
   
    Call SetWaitCursor
    Me.Height = 8430
    Me.Width = 12960
    Call ClearGrids
    cboPrice.AddItem "<="
    cboPrice.AddItem "="
    cboPrice.AddItem ">="
    cboPrice.ListIndex = 2  'select a default search options on load
    Call HidePrice
    Call FillBusSeriesCombo
    Call SetDefaultCursor
    cboBusSeries.Top = cboPrice.Top
    lblBusSeries.Top = lblPrice.Top
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub FillBusSeriesCombo()
    Dim RS As ADODB.Recordset
    Dim l_count As Long
    
    On Error GoTo Error_Handler

    cboBusSeries.Clear
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.RetrieveListOfBuses("CES_INQUIRY.RETRIEVE_LIST_OF_BUSES")
    
    'Here we will not use:
    'Set cboBusSeries.DataSource = RS
    'but we will use loop because we need to add ItemData = RS.Fields.Item("LIST_ID")
    'to each added item.
    
    cboBusSeries.AddItem ""
    cboBusSeries.AddItem m_str_const_All
    cboBusSeries.AddItem m_str_const_NotAttached
    If RS.RecordCount > 0 Then
        RS.MoveFirst
        For l_count = 0 To RS.RecordCount - 1
            cboBusSeries.AddItem RS.Fields.Item("DESCRIPTION")
            cboBusSeries.ItemData(cboBusSeries.NewIndex) = CLng(RS.Fields.Item("LIST_ID"))
            RS.MoveNext
        Next l_count
    End If
    cboBusSeries.ListIndex = 0
    
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "FillBusSeriesCombo", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

'Clear all grids on the form
Private Sub ClearGrids()
    On Error GoTo Error_Handler
    
    grdRebuiltParts.ClearFields
    grdStockCodedParts.ClearFields
    grdNonStockCodedParts.ClearFields
  
    Set grdRebuiltParts.DataSource = Nothing
    Set grdStockCodedParts.DataSource = Nothing
    Set grdNonStockCodedParts.DataSource = Nothing

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "ClearGrids", g_l_ErrorLineNumber
End Sub

'Initializes columns widths and headings for the Stock Coded grid
Private Sub InitSCColumns()
    On Error GoTo Error_Handler

    With grdStockCodedParts.Columns("STOCK CODE")
        .Width = 1300
        .Visible = True
    End With
    
    With grdStockCodedParts.Columns("DESCRIPTION")
        .Width = 5500
        .Visible = True
    End With
    
    With grdStockCodedParts.Columns("PRICE")
        .Width = 1000
        .Visible = True
        .Alignment = dbgRight
        .NumberFormat = "$#,##0.00;($#,##0.00)"
    End With
    
    With grdStockCodedParts.Columns("KEYWORD")
        .Width = 1500
        .Visible = True
    End With
    
    With grdStockCodedParts.Columns("LAST MODIFIED DATE")
        .Width = 2500
        .Visible = True
        .Alignment = dbgRight
        .NumberFormat = "yyyy-mmm-dd hh:mm:ss AMPM"
    End With

    grdStockCodedParts.Columns("OEM_PART_COST").Visible = False
    grdStockCodedParts.Columns("ROWID").Visible = False
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "InitSCColumns", g_l_ErrorLineNumber
End Sub

'Initializes columns widths and headings for the Non Stock Coded grid
Private Sub InitNonSCColumns()
    On Error GoTo Error_Handler

    With grdNonStockCodedParts.Columns("SUPPLIER NUMBER")
        .Width = 1900
        .Visible = True
    End With
    
    With grdNonStockCodedParts.Columns("SUPPLIER NAME")
        .Width = 1600
        .Visible = True
    End With

    With grdNonStockCodedParts.Columns("DESCRIPTION")
        .Width = 5500
        .Visible = True
    End With
    
    With grdNonStockCodedParts.Columns("PRICE")
        .Width = 1000
        .Visible = True
        .NumberFormat = "$#,##0.00;($#,##0.00)"
        .Alignment = dbgRight
    End With
    
    With grdNonStockCodedParts.Columns("KEYWORD")
        .Width = 2300
        .Visible = True
    End With
    
    With grdNonStockCodedParts.Columns("LAST MODIFIED DATE")
        .Width = 2500
        .Visible = True
        .Alignment = dbgRight
        .NumberFormat = "yyyy-mmm-dd hh:mm:ss AMPM"
    End With
        
    grdNonStockCodedParts.Columns("ID").Visible = False
    grdNonStockCodedParts.Columns("ROWID").Visible = False
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "InitNonSCColumns", g_l_ErrorLineNumber
End Sub

'Initializes columns widths and headings for the Rebuilt grid
Private Sub InitRBColumns()
    On Error GoTo Error_Handler
    
    With grdRebuiltParts.Columns("REBUILT NUMBER")
        .Width = 1800
        .Visible = True
    End With
    
    With grdRebuiltParts.Columns("KEYWORD")
        .Width = 2500
        .Visible = True
    End With
    
    With grdRebuiltParts.Columns("DESCRIPTION")
        .Width = 6000
        .Visible = True
    End With
    
    With grdRebuiltParts.Columns("ROWID")
            .Visible = False
    End With

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "InitRBColumns", g_l_ErrorLineNumber
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

'When the non-stock coded grid is double clicked the edit non-stock coded part
'form is loaded with all the information from the selected part on the grid
Private Sub grdNonStockCodedParts_DblClick()
    Dim str_SupplierNumber As String
    Dim str_SupplierName As String
    Dim str_PartDescription As String
    Dim str_PartUnitCost As String
    Dim var_RowID As Variant
    Dim l_ID As Long
    Dim str_Keyword As String
'    Dim str_AuditReference As String
    
    On Error GoTo Error_Handler

    Call SetWaitCursor
    
    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        Call SetDefaultCursor
        'Do not allow user go further, just exit sub.
        Exit Sub
    End If

    If (grdNonStockCodedParts.Row >= 0) Then
        'get values from the selected column
        str_SupplierNumber = grdNonStockCodedParts.Columns("SUPPLIER NUMBER").Value
        str_SupplierName = grdNonStockCodedParts.Columns("SUPPLIER NAME").Value
        str_PartDescription = grdNonStockCodedParts.Columns("DESCRIPTION").Value
        str_PartUnitCost = grdNonStockCodedParts.Columns("PRICE").Value
        var_RowID = CVar(grdNonStockCodedParts.Columns("ROWID").Value)
        str_Keyword = grdNonStockCodedParts.Columns("KEYWORD").Value
        l_ID = CLng(grdNonStockCodedParts.Columns("ID").Value)
'        str_AuditReference = grdNonStockCodedParts.Columns("REBUILT NUMBER").Value
 
 
        Call frmAddNonStockCodedPart.PassParameters(var_RowID, _
                                                    l_ID, _
                                                    str_SupplierNumber, _
                                                    str_SupplierName, _
                                                    str_PartDescription, _
                                                    str_PartUnitCost, _
                                                    str_Keyword, _
                                                    False)
        frmAddNonStockCodedPart.m_b_FromSearchPart = True
        frmAddNonStockCodedPart.cboSupplierName.Enabled = False
        frmAddNonStockCodedPart.cboSupplierNumber.Enabled = False
        frmAddNonStockCodedPart.Show vbModal
    End If

    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdNonStockCodedParts_DblClick", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub grdNonStockCodedParts_KeyDown(KeyCode As Integer, Shift As Integer)
    Dim str_PartID As String
    Dim l_Result As Long
    Dim l_RetVal As Long
    
    On Error GoTo Error_Handler

    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not go further, just exit sub.
        Exit Sub
    End If

    If KeyCode = vbKeyDelete And grdNonStockCodedParts.Row >= 0 Then
        l_Result = MsgBox("Are you sure you want to delete this item?", vbOKCancel)
        If l_Result = vbOK Then
            Call SetWaitCursor
            str_PartID = grdNonStockCodedParts.Columns("ROWID").Text
            l_Result = modDBHelper.DeleteNSCP("CES_DELETE.DELETE_NSCP", _
                                             l_RetVal, _
                                             str_PartID)
        'Add record to the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "Non-Stock Coded Part Info " + str_PartID + " was deleted from the System", _
                            str_PartID, _
                            "NSCP", _
                            "SUPPLIER NUMBER ---> " + grdNonStockCodedParts.Columns("SUPPLIER NUMBER").Text, _
                            "SUPPLIER NAME ---> " + grdNonStockCodedParts.Columns("SUPPLIER NAME").Text, _
                            "DESCRIPTION ---> " + grdNonStockCodedParts.Columns("DESCRIPTION").Text, _
                            "PRICE ---> " + grdNonStockCodedParts.Columns("PRICE").Text, _
                            "KEYWORD ---> " + grdNonStockCodedParts.Columns("KEYWORD").Text, _
                            "LAST MODIFIED DATE ---> " + grdNonStockCodedParts.Columns("LAST MODIFIED DATE").Text)
            Call RefreshForm
            Call SetDefaultCursor
        End If
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdNonStockCodedParts_KeyDown", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

'Implement delete function for Rebuilt Part Estimate (request #232922)
Private Sub grdRebuiltParts_KeyDown(KeyCode As Integer, Shift As Integer)
    Dim str_RowID As String
    Dim str_RebuiltNumber As String
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim RS As ADODB.Recordset
    Dim l_count As Long
    
    On Error GoTo Error_Handler

    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not go further, just exit sub.
        Exit Sub
    End If

    If KeyCode = vbKeyDelete And grdRebuiltParts.Row >= 0 Then
        str_RowID = grdRebuiltParts.Columns("ROWID").Text
        str_RebuiltNumber = grdRebuiltParts.Columns("REBUILT NUMBER").Text
        l_Result = MsgBox("Are you sure you want to delete the rebuilt part '" + str_RebuiltNumber + "'?", vbOKCancel)
        If l_Result = vbOK Then
        
            Set RS = New ADODB.Recordset
            Set RS = modDBHelper.RetrieveRB("CES_INQUIRY.RETRIEVE_RBP_USED_NUM")
        
            If Not IsNull(RS) And RS.RecordCount > 0 Then
                RS.MoveFirst
                For l_count = 1 To RS.RecordCount
                    If RS.Fields.Item("MMS_REBUILT_CODE") = str_RebuiltNumber Then
                        Call SetDefaultCursor
                        m_str_Msg = "The Rebuilt Part '" + str_RebuiltNumber + "' is currently used by the other estimate, it can't be deleted."
                        MsgBox m_str_Msg, vbInformation + vbOKOnly
                        Set RS = Nothing
                        Exit Sub
                    End If
                    RS.MoveNext
                Next l_count
                RS.MoveFirst
            End If
        
            Call SetWaitCursor
            l_Result = modDBHelper.DeleteRBEstimate("CES_DELETE.DELETE_RB_ESTIMATE", _
                                             l_RetVal, _
                                             str_RebuiltNumber)
                                             
            If l_Result = 0 Then
                m_str_Msg = "The Rebuilt Part '" & str_RebuiltNumber & "' has been deleted."
                MsgBox m_str_Msg, vbOKOnly Or vbInformation, "Delete Rebuilt Part Estimate"
                
                'Add record to the AUDIT_MODIFY_HISTORY table.
                l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "Rebuilt Part '" + str_RebuiltNumber + "' was deleted from the System", _
                            str_RebuiltNumber, _
                            "RB", _
                            "REBUILT NUMBER ---> " + grdRebuiltParts.Columns("REBUILT NUMBER").Text, _
                            "MMS STOCK CODE ---> " + grdRebuiltParts.Columns("MMS STOCK CODE").Text, _
                            "DESCRIPTION ---> " + grdRebuiltParts.Columns("DESCRIPTION").Text, _
                            "KEYWORD ---> " + grdRebuiltParts.Columns("KEYWORD").Text)
                            
                'Delete rebuilt part image if there is any.
                Call DeleteImage(str_RebuiltNumber)
                            
                Call RefreshForm
            Else
                m_str_Msg = "The Rebuilt Part Estimate '" & str_RebuiltNumber & "' was not deleted."
                MsgBox m_str_Msg, vbOKOnly Or vbInformation, "Delete Rebuilt Part Estimate"
            End If
            
            Call SetDefaultCursor
        End If
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdRebuiltParts_KeyDown", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub optTypeOfPart_Click(Index As Integer)
    On Error GoTo Error_Handler
     
    If optTypeOfPart(0).Value = True Then
       Call ShowPrice
       lblRebuiltNumber.Caption = "Stock Coded Number"
       lblBusSeries.Visible = False
       cboBusSeries.Visible = False
    ElseIf optTypeOfPart(1).Value = True Then
       Call HidePrice
       lblRebuiltNumber.Caption = "Rebuilt Number"
       lblBusSeries.Visible = True
       cboBusSeries.Visible = True
    ElseIf optTypeOfPart(2).Value = True Then
       Call ShowPrice
       lblRebuiltNumber.Caption = "Supplier Number"
       lblBusSeries.Visible = False
       cboBusSeries.Visible = False
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "optTypeOfPart_Click", g_l_ErrorLineNumber
End Sub

Private Sub grdRebuiltParts_dblClick()
    On Error GoTo Error_Handler
    
    SetWaitCursor
    
    If Not grdRebuiltParts.Row Then
        ' Show frmRebuiltPartEstimateOptions
        frmRebuiltPartEstimateOptions.m_str_MMSStockCode = grdRebuiltParts.Columns("MMS STOCK CODE").Value
        frmRebuiltPartEstimateOptions.m_str_RBNumber = grdRebuiltParts.Columns("REBUILT NUMBER").Value
        frmRebuiltPartEstimateOptions.m_v_RowID = grdRebuiltParts.Columns("ROWID").Value
        
        frmRebuiltPartEstimateOptions.Show vbModal
    End If
    
    SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdRebuiltParts_dblClick", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub grdStockCodedParts_DblClick()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    'Show the Stock Coded item in a window
    If Not grdStockCodedParts.Row Then
        Load frmViewStockCodedPart
        frmViewStockCodedPart.PopulateForm grdStockCodedParts.Columns("STOCK CODE").Value, _
                                           grdStockCodedParts.Columns("DESCRIPTION").Value, _
                                           grdStockCodedParts.Columns("KEYWORD").Value, _
                                           grdStockCodedParts.Columns("PRICE").Value
        frmViewStockCodedPart.Show vbModal
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdStockCodedParts_DblClick", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub HidePrice()
    On Error GoTo Error_Handler
    
    lblPrice.Visible = False
    txtPrice.Visible = False
    cboPrice.Visible = False
    cboPrice.ListIndex = 2
    txtPrice.Text = "0"
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "HidePrice", g_l_ErrorLineNumber
End Sub

Private Sub ShowPrice()
    On Error GoTo Error_Handler
    
    lblPrice.Visible = True
    txtPrice.Visible = True
    cboPrice.Visible = True
    cboPrice.ListIndex = 2
    txtPrice.Text = ""
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "ShowPrice", g_l_ErrorLineNumber
End Sub

Private Sub txtDescription_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtDescription edit-box to upper case.
    l_CursorPosition = txtDescription.SelStart
    str_Data = txtDescription.Text
    str_Data = UCase(str_Data)
    txtDescription.Text = str_Data
    txtDescription.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtDescription_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtKeyword_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtKeyword edit-box to upper case.
    l_CursorPosition = txtKeyword.SelStart
    str_Data = txtKeyword.Text
    str_Data = UCase(str_Data)
    txtKeyword.Text = str_Data
    txtKeyword.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtKeyword_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtPrice_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtPrice edit-box to upper case.
    l_CursorPosition = txtPrice.SelStart
    str_Data = txtPrice.Text
    str_Data = UCase(str_Data)
    txtPrice.Text = str_Data
    txtPrice.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtPrice_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtRebuiltNumber_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtRebuiltNumber edit-box to upper case.
    l_CursorPosition = txtRebuiltNumber.SelStart
    str_Data = txtRebuiltNumber.Text
    str_Data = UCase(str_Data)
    txtRebuiltNumber.Text = str_Data
    txtRebuiltNumber.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtRebuiltNumber_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub UserPermissions()
    On Error GoTo Error_Handler

    If g_l_AccessLevel = 1 Then
        If grdStockCodedParts.Columns.Count > 2 Then
            'Grid "Stock Coded Parts". Column "Price" is invisible.
            grdStockCodedParts.Columns("PRICE").Visible = False
        End If
        If grdNonStockCodedParts.Columns.Count > 2 Then
            'Grid "Non-Stock Coded Parts". Column "Price" is invisible.
            grdNonStockCodedParts.Columns("PRICE").Visible = False
        End If
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "UserPermissions", g_l_ErrorLineNumber
End Sub

Private Sub DeleteImage(ByVal str_RBNumber As String)
    Dim RS As ADODB.Recordset
    Dim fso As New FileSystemObject
    Dim m_str_RBPImgPath As String

    Set RS = modDBHelper.RetrieveCESSettings("CES_INQUIRY.RETRIEVE_CES_SETTI", "RBP_IMAGES_PATH")
    If RS.RecordCount = 1 Then
        m_str_RBPImgPath = RS.Fields.Item("VALUE")
    End If
        
    m_str_RBPImgPath = m_str_RBPImgPath & "IMG_" & str_RBNumber & ".jpg"
    
    If fso.FileExists(m_str_RBPImgPath) Then
        fso.DeleteFile (m_str_RBPImgPath)
    End If
    
    Set RS = Nothing
    Set fso = Nothing
        
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "DeleteImage", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    If Not fso Is Nothing Then
        Set fso = Nothing
    End If
End Sub
frmSearchVehEstimate.frm :
VERSION 5.00
Object = "{CDE57A40-8B86-11D0-B3C6-00A0C90AEA82}#1.0#0"; "msdatgrd.ocx"
Object = "{F0D2F211-CCB0-11D0-A316-00AA00688B10}#1.0#0"; "Msdatlst.ocx"
Begin VB.Form frmSearchVehEstimate 
   BorderStyle     =   1  'Fixed Single
   Caption         =   "Search Vehicle Estimate"
   ClientHeight    =   6990
   ClientLeft      =   45
   ClientTop       =   330
   ClientWidth     =   8970
   Icon            =   "frmSearchVehEstimate.frx":0000
   LinkTopic       =   "Form8"
   MDIChild        =   -1  'True
   ScaleHeight     =   6990
   ScaleWidth      =   8970
   Begin MSDataGridLib.DataGrid grdSearchResults 
      Height          =   4275
      Left            =   60
      TabIndex        =   9
      Top             =   2640
      Width           =   8835
      _ExtentX        =   15584
      _ExtentY        =   7541
      _Version        =   393216
      BackColor       =   12648447
      ForeColor       =   16711680
      HeadLines       =   1
      RowHeight       =   15
      BeginProperty HeadFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Caption         =   "SEARCH RESULTS"
      ColumnCount     =   2
      BeginProperty Column00 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      BeginProperty Column01 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      SplitCount      =   1
      BeginProperty Split0 
         BeginProperty Column00 
         EndProperty
         BeginProperty Column01 
         EndProperty
      EndProperty
   End
   Begin MSDataListLib.DataCombo cboEngine 
      Height          =   315
      Left            =   900
      TabIndex        =   2
      Top             =   1425
      Width           =   1875
      _ExtentX        =   3307
      _ExtentY        =   556
      _Version        =   393216
      Text            =   ""
   End
   Begin MSDataListLib.DataCombo cboTrans 
      Height          =   315
      Left            =   3750
      TabIndex        =   4
      Top             =   1440
      Width           =   1875
      _ExtentX        =   3307
      _ExtentY        =   556
      _Version        =   393216
      Text            =   ""
   End
   Begin MSDataListLib.DataCombo cboDifferential 
      Height          =   315
      Left            =   6825
      TabIndex        =   6
      Top             =   1425
      Width           =   1875
      _ExtentX        =   3307
      _ExtentY        =   556
      _Version        =   393216
      Text            =   ""
   End
   Begin MSDataListLib.DataCombo cboYear 
      Height          =   315
      Left            =   6825
      TabIndex        =   7
      Top             =   1770
      Width           =   1875
      _ExtentX        =   3307
      _ExtentY        =   556
      _Version        =   393216
      Text            =   ""
   End
   Begin MSDataListLib.DataCombo cboModel 
      Height          =   315
      Left            =   3750
      TabIndex        =   5
      Top             =   1770
      Width           =   1875
      _ExtentX        =   3307
      _ExtentY        =   556
      _Version        =   393216
      Text            =   ""
   End
   Begin MSDataListLib.DataCombo cboMake 
      Height          =   315
      Left            =   900
      TabIndex        =   3
      Top             =   1755
      Width           =   1875
      _ExtentX        =   3307
      _ExtentY        =   556
      _Version        =   393216
      Text            =   ""
   End
   Begin MSDataListLib.DataCombo cbolBusSeries 
      Height          =   315
      Left            =   1680
      TabIndex        =   0
      Top             =   510
      Width           =   4875
      _ExtentX        =   8599
      _ExtentY        =   556
      _Version        =   393216
      Text            =   ""
   End
   Begin MSDataListLib.DataCombo cboBusDescription 
      Height          =   315
      Left            =   1680
      TabIndex        =   1
      Top             =   945
      Width           =   4875
      _ExtentX        =   8599
      _ExtentY        =   556
      _Version        =   393216
      Text            =   ""
   End
   Begin VB.CommandButton cmdSearch 
      Caption         =   "Search"
      Height          =   300
      Left            =   3750
      TabIndex        =   8
      Top             =   2280
      Width           =   1485
   End
   Begin VB.Frame fraSearchCriteria 
      Caption         =   "Search Criteria"
      Height          =   2550
      Left            =   60
      TabIndex        =   10
      Top             =   120
      Width           =   8865
      Begin VB.Label lblBusSeries 
         BackColor       =   &H80000000&
         Caption         =   "Vehicle Series:"
         Height          =   225
         Left            =   120
         TabIndex        =   18
         Top             =   420
         Width           =   1080
      End
      Begin VB.Label lblBusDescription 
         BackColor       =   &H80000000&
         Caption         =   "Vehicle Description:"
         Height          =   225
         Left            =   135
         TabIndex        =   17
         Top             =   840
         Width           =   1440
      End
      Begin VB.Label lblMake 
         Caption         =   "Make"
         Height          =   195
         Left            =   210
         TabIndex        =   16
         Top             =   1680
         Width           =   480
      End
      Begin VB.Label lblModel 
         Caption         =   "Model"
         Height          =   195
         Left            =   3105
         TabIndex        =   15
         Top             =   1680
         Width           =   480
      End
      Begin VB.Label lblEngine 
         Caption         =   "Engine"
         Height          =   210
         Left            =   180
         TabIndex        =   14
         Top             =   1350
         Width           =   660
      End
      Begin VB.Label lblTrans 
         Caption         =   "Trans"
         Height          =   210
         Left            =   3090
         TabIndex        =   13
         Top             =   1350
         Width           =   480
      End
      Begin VB.Label lblYear 
         Caption         =   "Year"
         Height          =   195
         Left            =   6075
         TabIndex        =   12
         Top             =   1695
         Width           =   480
      End
      Begin VB.Label lblDifferential 
         Caption         =   "Differential"
         Height          =   210
         Left            =   5835
         TabIndex        =   11
         Top             =   1335
         Width           =   855
      End
   End
End
Attribute VB_Name = "frmSearchVehEstimate"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Option Explicit

Private m_str_Msg As String

Private Sub Form_Load()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    Call PopulateDropdowns
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub ClearGrids()
    On Error GoTo Error_Handler
    
    grdSearchResults.ClearFields
    grdSearchResults.BorderStyle = dbgFixedSingle
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "ClearGrids", g_l_ErrorLineNumber
End Sub

Private Sub cmdSearch_Click()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    Call ClearGrids
    
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.SearchVehicleEstimate("CES_INQUIRY.SEARCH_VEHICLE_ESTIMATE", _
                                               cbolBusSeries.Text, _
                                               cboBusDescription.Text, _
                                               cboMake.Text, _
                                               cboModel.Text, _
                                               cboYear.Text, _
                                               cboEngine.Text, _
                                               cboTrans.Text, _
                                               cboDifferential.Text)

    Set grdSearchResults.DataSource = RS
        
    Set RS = Nothing
    
    Call FormatGrid
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdSearch_Click", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    Call SetDefaultCursor
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub grdSearchResults_DblClick()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    If Not grdSearchResults.Row Then
        frmVehEstimateOptions.m_l_VehicleListID = CLng(grdSearchResults.Columns("ESTIMATE #").Text)
        frmVehEstimateOptions.m_str_LinkNumber = grdSearchResults.Columns("ESTIMATE #").Text
        
        frmVehEstimateOptions.Show vbModal
    Else
        MsgBox "No Rows to select, Please Try Again"
    End If

    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdSearchResults_DblClick", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub FormatGrid()
    On Error GoTo Error_Handler
    
    With grdSearchResults
        .Columns("VEHICLE SERIES CODE").Width = 2000
        .Columns("NUMBER OF VEHICLES").Width = 2000
        .Columns("PROJECT DESCRIPTION").Width = 4000
        .Columns("ESTIMATE #").Width = 1100
    End With
    
    'Make column "ROWID" invisible.
    grdSearchResults.Columns("ROWID").Visible = False
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "FormatGrid", g_l_ErrorLineNumber
End Sub

Private Sub PopulateDropdowns()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    Set RS = New ADODB.Recordset
        
    'Load the data into the input forms for editing
    
    Set RS = modDBHelper.RetrieveEngines("CES_INQUIRY.RETRIEVE_ENGINES")
    Set cboEngine.RowSource = RS
    cboEngine.ListField = "name"
    
    Set RS = modDBHelper.RetrieveTransmissions("CES_INQUIRY.RETRIEVE_TRANSMISSIONS")
    Set cboTrans.RowSource = RS
    cboTrans.ListField = "name"
    
    Set RS = modDBHelper.RetrieveDifferentials("CES_INQUIRY.RETRIEVE_DIFFERENTIALS")
    Set cboDifferential.RowSource = RS
    cboDifferential.ListField = "name"
        
    Set RS = modDBHelper.RetrieveVehicleTypes("CES_INQUIRY.RETRIEVE_VEHICLE_TYPES")
    Set cboMake.RowSource = RS
    Set cboModel.RowSource = RS
    Set cboYear.RowSource = RS
    cboMake.ListField = "make"
    cboModel.ListField = "model"
    cboYear.ListField = "year"
    
    Set RS = modDBHelper.RetrieveListOfBuses("CES_INQUIRY.RETRIEVE_LIST_OF_BUSES")
    Set cbolBusSeries.RowSource = RS
    cbolBusSeries.ListField = "DESCRIPTION"
    
    Set RS = modDBHelper.RetrieveVehicleEstimates("CES_INQUIRY.RETRIEVE_VEHICLE_ESTIMATES")
    Set cboBusDescription.RowSource = RS
    cboBusDescription.ListField = "PROJ_DESC"
        
    Set RS = Nothing
        
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateDropdowns", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Public Sub RefreshForm()

Call cmdSearch_Click

End Sub

'Implement delete function for Vehicle Estimate (request #232922)
Private Sub grdSearchResults_KeyDown(KeyCode As Integer, Shift As Integer)

    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_EstimateNum As String
    Dim l_Vehicle_List_ID As Long

    On Error GoTo Error_Handler

    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not allow go further, just exit sub.
        Exit Sub
    End If

    If (KeyCode = vbKeyDelete And Not grdSearchResults.Row) Then
        str_EstimateNum = grdSearchResults.Columns("ESTIMATE #").Text
        l_Vehicle_List_ID = CLng(grdSearchResults.Columns("ESTIMATE #").Text)
        
        l_Result = MsgBox("Are you sure you want to delete Vehicle Estimate '" + str_EstimateNum + "' and all its associated material and labour cost?", vbOKCancel, "Confirm Vehicle Estimate Delete")
        If l_Result = vbOK Then
            'Delete specified Vehicle Estimate from database.
            l_Result = modDBHelper.DeleteVehicleEstimateByID("CES_DELETE.DELETE_VEHICLE_FROM_LIST", _
                                            l_RetVal, _
                                            str_EstimateNum, _
                                            l_Vehicle_List_ID)
            If l_Result = 0 Then
                m_str_Msg = "Vehicle Estimate '" & str_EstimateNum & "' has been deleted."
                MsgBox m_str_Msg, vbOKOnly Or vbInformation, "Delete Vehicle Estimate"
                
                'Add record to the AUDIT_MODIFY_HISTORY table.
                l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                    "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                    l_RetVal, _
                    "Vehicle Estimate #" + str_EstimateNum + " was deleted from the System", _
                    str_EstimateNum, _
                    "BUS", _
                    "Number of Vehicles ---> " + grdSearchResults.Columns("NUMBER OF VEHICLES").Text, _
                    "Vehicle Series ---> " + grdSearchResults.Columns("VEHICLE SERIES CODE").Text, _
                    "SOP Number ---> " + grdSearchResults.Columns("SOPNUMBER").Text, _
                    "Estimate Description ---> " + grdSearchResults.Columns("PROJECT DESCRIPTION").Text, _
                    "Engine ---> " + grdSearchResults.Columns("ENGINE").Text, _
                    "Make ---> " + grdSearchResults.Columns("MAKE").Text, _
                    "Trans ---> " + grdSearchResults.Columns("TRANSMISSION").Text, _
                    "Model ---> " + grdSearchResults.Columns("MODEL").Text, _
                    "Differential ---> " + grdSearchResults.Columns("DIFFERENTIAL").Text, _
                    "Year ---> " + grdSearchResults.Columns("YEAR").Text)
                    
                Call cmdSearch_Click
            Else
                m_str_Msg = "Vehicle Estimate '" & str_EstimateNum & "' was not deleted."
                MsgBox m_str_Msg, vbOKOnly Or vbInformation, "Delete Vehicle Estimate"
            End If
                    
        End If
    End If

    Exit Sub
Error_Handler:
     modDBHelper.LogErrorToDB Me.Name, "grdSearchResults_KeyDown", Erl
End Sub

frmSubKits.frm :
VERSION 5.00
Object = "{0D452EE1-E08F-101A-852E-02608C4D0BB4}#2.0#0"; "FM20.DLL"
Object = "{CDE57A40-8B86-11D0-B3C6-00A0C90AEA82}#1.0#0"; "msdatgrd.ocx"
Begin VB.Form frmSubKits 
   BorderStyle     =   3  'Fixed Dialog
   Caption         =   "Managing Sub Kits"
   ClientHeight    =   10110
   ClientLeft      =   2715
   ClientTop       =   1155
   ClientWidth     =   13140
   Icon            =   "frmSubKits.frx":0000
   LinkTopic       =   "Form1"
   MaxButton       =   0   'False
   MinButton       =   0   'False
   ScaleHeight     =   10110
   ScaleWidth      =   13140
   ShowInTaskbar   =   0   'False
   StartUpPosition =   2  'CenterScreen
   Begin VB.Timer Timer1 
      Interval        =   1
      Left            =   480
      Top             =   60
   End
   Begin VB.CommandButton cmdExportToExcel 
      Caption         =   "Export To Excel"
      Height          =   375
      Left            =   6360
      TabIndex        =   11
      Top             =   9060
      Width           =   1335
   End
   Begin VB.CommandButton cmdMoveDown 
      Caption         =   "Move Down"
      Height          =   375
      Left            =   4440
      TabIndex        =   10
      Top             =   9060
      Width           =   1095
   End
   Begin VB.CommandButton cmdMoveUp 
      Caption         =   "Move Up"
      Height          =   375
      Left            =   3480
      TabIndex        =   9
      Top             =   9060
      Width           =   915
   End
   Begin VB.OptionButton optCancel 
      Caption         =   "Cancel"
      Height          =   375
      Left            =   5580
      Style           =   1  'Graphical
      TabIndex        =   7
      Top             =   9060
      Width           =   735
   End
   Begin VB.OptionButton optDone 
      Caption         =   "Done"
      Height          =   375
      Left            =   1800
      Style           =   1  'Graphical
      TabIndex        =   6
      Top             =   9060
      Width           =   615
   End
   Begin VB.OptionButton optMoveAfter 
      Caption         =   "Move After"
      Height          =   375
      Left            =   2460
      Style           =   1  'Graphical
      TabIndex        =   5
      Top             =   9060
      Width           =   975
   End
   Begin VB.OptionButton optChangeDescription 
      Caption         =   "Change Description"
      Height          =   375
      Left            =   60
      Style           =   1  'Graphical
      TabIndex        =   4
      Top             =   9060
      Width           =   1695
   End
   Begin VB.TextBox txtDescription 
      Height          =   315
      Left            =   7800
      MaxLength       =   500
      TabIndex        =   3
      Top             =   9060
      Visible         =   0   'False
      Width           =   4935
   End
   Begin MSDataGridLib.DataGrid grdSubKits 
      Height          =   8535
      Left            =   60
      TabIndex        =   0
      Top             =   420
      Width           =   13035
      _ExtentX        =   22992
      _ExtentY        =   15055
      _Version        =   393216
      BackColor       =   12648447
      ForeColor       =   16711680
      HeadLines       =   1
      RowHeight       =   17
      BeginProperty HeadFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Caption         =   "SUB KITS"
      ColumnCount     =   2
      BeginProperty Column00 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   4105
            SubFormatType   =   0
         EndProperty
      EndProperty
      BeginProperty Column01 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   4105
            SubFormatType   =   0
         EndProperty
      EndProperty
      SplitCount      =   1
      BeginProperty Split0 
         BeginProperty Column00 
         EndProperty
         BeginProperty Column01 
         EndProperty
      EndProperty
   End
   Begin VB.Label lblInstructions 
      Alignment       =   2  'Center
      BackColor       =   &H00C0FFFF&
      BeginProperty Font 
         Name            =   "Arial"
         Size            =   9
         Charset         =   204
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H00FF0000&
      Height          =   495
      Left            =   60
      TabIndex        =   8
      Top             =   9540
      Width           =   13035
   End
   Begin MSForms.TextBox txtKit 
      Height          =   330
      Left            =   4440
      TabIndex        =   2
      Top             =   0
      Width           =   2910
      VariousPropertyBits=   746604569
      Size            =   "5133;582"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   3
   End
   Begin VB.Label lblKit 
      Caption         =   "OEM Kit:"
      Height          =   195
      Left            =   3540
      TabIndex        =   1
      Top             =   60
      Width           =   735
   End
End
Attribute VB_Name = "frmSubKits"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Option Explicit

Private m_str_KitPartNumber As String
Private m_l_VehicleListID As Long
Private m_rs_PassedRS As New ADODB.Recordset
Private m_var_RowSelected As Variant
Private m_var_RowSelected1 As Variant
Private m_b_ChangeDescription As Boolean
Private m_b_MoveAfter As Boolean
Private m_str_TTCCode As String
Private m_str_OEM As String
Private m_str_OEMNumber As String
Private l_Clicks As Long
Private m_arr_str_ExcelKit() As String
Private m_l_ExcelKitSize As Long

Private Const m_str_const_Message As String = "PLEASE SELECT THE LOCATION THE SUB KIT PART WILL BE MOVED TO."

Private Sub Form_Load()
    On Error GoTo Error_Handler

    'Set the window style to 'Layered'. Set the opacity of the window.
    Call modMain.SetWindowLayered(Me)

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
End Sub

Public Sub PassValues(ByVal str_KitPartNumber As String, _
                      ByVal l_VehicleListID As Long, _
                      ByVal RS As ADODB.Recordset) ', _

    On Error GoTo Error_Handler
    
    m_str_KitPartNumber = str_KitPartNumber
    m_l_VehicleListID = l_VehicleListID
    Set m_rs_PassedRS.DataSource = RS.DataSource
    optDone.Enabled = False
    optCancel.Enabled = False
    txtDescription.Visible = False
    l_Clicks = 0
    
    Call RefreshForm
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PassValues", g_l_ErrorLineNumber
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call modMain.ChangeOpasityLayeredForm(Me, Me.Timer1, 255, 0, -10)
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub RefreshForm()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    m_b_ChangeDescription = False
    m_b_MoveAfter = False
    txtKit.Text = m_str_KitPartNumber
    
    'Get data from the SUB_KITS table for passed m_str_KitPartNumber
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.GetSubKits("CES_INQUIRY.GET_SUB_KITS", _
                                          m_str_KitPartNumber)

    If RS.RecordCount = 0 Then
        'No one sub-kit is attached to the current kit. Since each kit should have at
        'least one sub-kit, put all parts into the sub-kit "KIT A"
        Call AddSubKitsToKit
    
        Set RS = modDBHelper.GetSubKits("CES_INQUIRY.GET_SUB_KITS", _
                                        m_str_KitPartNumber)
        
        Set grdSubKits.DataSource = RS
    Else
        Set grdSubKits.DataSource = RS
    End If
    
    Set RS = Nothing
    
    Call FormatGrid
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "RefreshForm", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    Call SetDefaultCursor
End Sub

Private Sub AddSubKitsToKit()
    Dim l_RetVal As Long
    Dim l_Result As Long
    Dim l_Count As Long
    
    On Error GoTo Error_Handler
    
    l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", _
                                         l_RetVal, _
                                         m_str_KitPartNumber, _
                                         "", _
                                         " ", _
                                         " ", _
                                         " ", _
                                         "", _
                                         "KIT A", _
                                         "", _
                                         1)
    
    m_rs_PassedRS.MoveFirst
    For l_Count = 1 To m_rs_PassedRS.RecordCount
        l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", _
                                             l_RetVal, _
                                             m_str_KitPartNumber, _
                                             m_rs_PassedRS.Fields("PART TYPE"), _
                                             m_rs_PassedRS.Fields("SUPPLIER NUMBER"), _
                                             m_rs_PassedRS.Fields("SUPPLIER NAME"), _
                                             m_rs_PassedRS.Fields("STOCK CODE"), _
                                             m_rs_PassedRS.Fields("QTY"), _
                                             "A" + CStr(l_Count), _
                                             m_rs_PassedRS.Fields("DESCRIPTION"), _
                                             l_Count + 1)
        m_rs_PassedRS.MoveNext
    Next l_Count
    'And add lines "KIT B", "KIT C",...., "KIT Z"
    l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", l_RetVal, _
               m_str_KitPartNumber, "", " ", " ", " ", "", "KIT B", "", l_Count + 1)
    l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", l_RetVal, _
               m_str_KitPartNumber, "", " ", " ", " ", "", "KIT C", "", l_Count + 2)
    l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", l_RetVal, _
               m_str_KitPartNumber, "", " ", " ", " ", "", "KIT D", "", l_Count + 3)
    l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", l_RetVal, _
               m_str_KitPartNumber, "", " ", " ", " ", "", "KIT E", "", l_Count + 4)
    l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", l_RetVal, _
               m_str_KitPartNumber, "", " ", " ", " ", "", "KIT F", "", l_Count + 5)
    l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", l_RetVal, _
               m_str_KitPartNumber, "", " ", " ", " ", "", "KIT G", "", l_Count + 6)
    l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", l_RetVal, _
               m_str_KitPartNumber, "", " ", " ", " ", "", "KIT H", "", l_Count + 7)
    l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", l_RetVal, _
               m_str_KitPartNumber, "", " ", " ", " ", "", "KIT I", "", l_Count + 8)
    l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", l_RetVal, _
               m_str_KitPartNumber, "", " ", " ", " ", "", "KIT J", "", l_Count + 9)
    l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", l_RetVal, _
               m_str_KitPartNumber, "", " ", " ", " ", "", "KIT K", "", l_Count + 10)
    l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", l_RetVal, _
               m_str_KitPartNumber, "", " ", " ", " ", "", "KIT L", "", l_Count + 11)
    l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", l_RetVal, _
               m_str_KitPartNumber, "", " ", " ", " ", "", "KIT M", "", l_Count + 12)
    l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", l_RetVal, _
               m_str_KitPartNumber, "", " ", " ", " ", "", "KIT N", "", l_Count + 13)
    l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", l_RetVal, _
               m_str_KitPartNumber, "", " ", " ", " ", "", "KIT O", "", l_Count + 14)
    l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", l_RetVal, _
               m_str_KitPartNumber, "", " ", " ", " ", "", "KIT P", "", l_Count + 15)
    l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", l_RetVal, _
               m_str_KitPartNumber, "", " ", " ", " ", "", "KIT Q", "", l_Count + 16)
    l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", l_RetVal, _
               m_str_KitPartNumber, "", " ", " ", " ", "", "KIT R", "", l_Count + 17)
    l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", l_RetVal, _
               m_str_KitPartNumber, "", " ", " ", " ", "", "KIT S", "", l_Count + 18)
    l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", l_RetVal, _
               m_str_KitPartNumber, "", " ", " ", " ", "", "KIT T", "", l_Count + 19)
    l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", l_RetVal, _
               m_str_KitPartNumber, "", " ", " ", " ", "", "KIT U", "", l_Count + 20)
    l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", l_RetVal, _
               m_str_KitPartNumber, "", " ", " ", " ", "", "KIT V", "", l_Count + 21)
    l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", l_RetVal, _
               m_str_KitPartNumber, "", " ", " ", " ", "", "KIT W", "", l_Count + 22)
    l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", l_RetVal, _
               m_str_KitPartNumber, "", " ", " ", " ", "", "KIT X", "", l_Count + 23)
    l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", l_RetVal, _
               m_str_KitPartNumber, "", " ", " ", " ", "", "KIT Y", "", l_Count + 24)
    l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", l_RetVal, _
               m_str_KitPartNumber, "", " ", " ", " ", "", "KIT Z", "", l_Count + 25)

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "AddSubKitsToKit", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub FormatGrid()
    On Error GoTo Error_Handler

    If grdSubKits.Columns.Count > 2 Then
        grdSubKits.Columns("REF #").Width = 700
        grdSubKits.Columns("REF #").Alignment = dbgCenter
        grdSubKits.Columns("TTC CODE").Width = 1000
        grdSubKits.Columns("TTC CODE").Alignment = dbgCenter
        grdSubKits.Columns("OEM").Width = 2800
        grdSubKits.Columns("OEM").Alignment = dbgLeft
        grdSubKits.Columns("QTY").Width = 700
        grdSubKits.Columns("QTY").Alignment = dbgCenter
        grdSubKits.Columns("OEM #").Width = 2200
        grdSubKits.Columns("OEM #").Alignment = dbgLeft
        grdSubKits.Columns("DESCRIPTION").Width = 4950
        grdSubKits.Columns("DESCRIPTION").Alignment = dbgLeft
        grdSubKits.Columns("KIT NUMBER").Visible = False
        grdSubKits.Columns("PART TYPE").Visible = False
        grdSubKits.Columns("SEQUENCE").Visible = False
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "FormatGrid", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub cmdExportToExcel_Click()
    Dim xlApp As Excel.Application
    Dim xlBook As Excel.Workbook
    Dim xlSheet1 As Excel.Worksheet
    Dim l_Count As Long
    Dim str_Cell As String
    Dim str_Temp As String

    On Error GoTo Error_Handler
    
    Call SetWaitCursor

    Set xlApp = CreateObject("Excel.Application")
    Set xlBook = xlApp.Workbooks.Add
    Set xlSheet1 = xlBook.Worksheets(1)

    xlApp.ActiveWorkbook.Worksheets("Sheet2").Delete
    xlApp.ActiveWorkbook.Worksheets("Sheet3").Delete

    'When user try to close the Excel using cross in the right-top corner, do not show
    'any messages, just close the Excel.
    xlApp.DisplayAlerts = False

    'Begin "ALL LABOUR" worksheet
    xlSheet1.Activate
    xlSheet1.Range("A1:J1").Font.Bold = True
    xlSheet1.Range("A1:J1").Font.Name = "Arial"
    xlSheet1.Range("A1:J1").Font.Size = 8

    'Set columns' headers
    xlSheet1.Range("A1").Value = "REF #"
    xlSheet1.Range("B1").Value = "TTC CODE"
    xlSheet1.Range("C1").Value = "OEM"
    xlSheet1.Range("D1").Value = "QTY"
    xlSheet1.Range("E1").Value = "OEM #"
    xlSheet1.Range("F1").Value = "DESCRIPTION"

    'Center text in all columns' headers.
    xlSheet1.Range("A:A").HorizontalAlignment = xlCenter
    xlSheet1.Range("B:B").HorizontalAlignment = xlCenter
    xlSheet1.Range("C:C").HorizontalAlignment = xlLeft
    xlSheet1.Range("D:D").HorizontalAlignment = xlCenter
    xlSheet1.Range("E:E").HorizontalAlignment = xlLeft
    xlSheet1.Range("F:F").HorizontalAlignment = xlLeft

    'Set format for all columns = Text. In this case TTC CODE = 000024
    'will be shown as 000024, not 24
    xlSheet1.Range("A:A").NumberFormat = "@"
    xlSheet1.Range("B:B").NumberFormat = "@"
    xlSheet1.Range("C:C").NumberFormat = "@"
    xlSheet1.Range("D:D").NumberFormat = "@"
    xlSheet1.Range("E:E").NumberFormat = "@"
    xlSheet1.Range("F:F").NumberFormat = "@"

    'Set columns' width
    'Column "REF #"
    xlApp.ActiveWorkbook.Worksheets("Sheet1").Columns("A").ColumnWidth = 6
    'Column "TTC CODE"
    xlApp.ActiveWorkbook.Worksheets("Sheet1").Columns("B").ColumnWidth = 8
    'Column "OEM"
    xlApp.ActiveWorkbook.Worksheets("Sheet1").Columns("C").ColumnWidth = 8
    'Column "QTY"
    xlApp.ActiveWorkbook.Worksheets("Sheet1").Columns("D").ColumnWidth = 4
    'Column "OEM #"
    xlApp.ActiveWorkbook.Worksheets("Sheet1").Columns("E").ColumnWidth = 8
    'Column "DESCRIPTION"
    xlApp.ActiveWorkbook.Worksheets("Sheet1").Columns("F").ColumnWidth = 32

    xlApp.ActiveWorkbook.Worksheets("Sheet1").PageSetup.Orientation = xlPortrait

    str_Temp = "BUS KIT " + m_str_KitPartNumber

    Call MakeArrayForExcel
    
    If m_l_ExcelKitSize > -1 Then
        str_Cell = "A2:F" + CStr(m_l_ExcelKitSize + 2)
        xlSheet1.Range(str_Cell).Font.Name = "Arial"
        xlSheet1.Range(str_Cell).Font.Size = 7
        
        'Wrap text in the entire "TTC CODE" column
        xlSheet1.Range("B1:B" + CStr(m_l_ExcelKitSize + 2)).WrapText = True
        'Wrap text in the entire "OEM" column
        xlSheet1.Range("C1:C" + CStr(m_l_ExcelKitSize + 2)).WrapText = True
        'Wrap text in the entire "OEM #" column
        xlSheet1.Range("E1:E" + CStr(m_l_ExcelKitSize + 2)).WrapText = True
        'Wrap text in the entire "DESCRIPTION" column
        xlSheet1.Range("F1:F" + CStr(m_l_ExcelKitSize + 2)).WrapText = True
        
        For l_Count = 0 To m_l_ExcelKitSize
            'Data in the "REF #" column
            str_Cell = "A" + CStr(l_Count + 2)
            xlSheet1.Range(str_Cell).Value = m_arr_str_ExcelKit(0, l_Count)
            'Data in the "TTC CODE" column
            str_Cell = "B" + CStr(l_Count + 2)
            xlSheet1.Range(str_Cell).Value = m_arr_str_ExcelKit(1, l_Count)
            'Data in the "OEM" column
            str_Cell = "C" + CStr(l_Count + 2)
            xlSheet1.Range(str_Cell).Value = m_arr_str_ExcelKit(2, l_Count)
            'Data in the "QTY" column
            str_Cell = "D" + CStr(l_Count + 2)
            xlSheet1.Range(str_Cell).Value = m_arr_str_ExcelKit(3, l_Count)
            'Data in the "OEM #" column
            str_Cell = "E" + CStr(l_Count + 2)
            xlSheet1.Range(str_Cell).Value = m_arr_str_ExcelKit(4, l_Count)
            'Data in the "DESCRIPTION" column
            str_Cell = "F" + CStr(l_Count + 2)
            xlSheet1.Range(str_Cell).Value = m_arr_str_ExcelKit(5, l_Count)
        Next l_Count
    End If

    'Set headers and footers information
    xlApp.ActiveWorkbook.Worksheets("Sheet1").PageSetup.CenterHeader = _
                                "&""Arial""&10&B" + str_Temp + "&B"
    xlApp.ActiveWorkbook.Worksheets("Sheet1").PageSetup.LeftHeader = _
                                "&""Arial""&10&B" + "Bus Estimate # : " + CStr(m_l_VehicleListID) + "&B"
    xlApp.ActiveWorkbook.Worksheets("Sheet1").PageSetup.RightHeader = _
                                "&""Arial""&10&B" + Format(Now, "yyyy-mmm-dd") + "&B"
    xlApp.ActiveWorkbook.Worksheets("Sheet1").PageSetup.RightFooter = _
                                "&""Arial""&10&B Page &P of &N&B"

    'Print first row in all pages
    xlApp.ActiveWorkbook.Worksheets("Sheet1").PageSetup.PrintTitleRows = _
                        xlApp.ActiveWorkbook.Worksheets("Sheet1").Rows(1).Address
    xlApp.ActiveWorkbook.Worksheets("Sheet1").PageSetup.PrintTitleColumns = _
                        xlApp.ActiveWorkbook.Worksheets("Sheet1").Columns("A:J").Address

    xlApp.ActiveWorkbook.Worksheets("Sheet1").PageSetup.PrintGridlines = True

    xlSheet1.Activate

    xlApp.Caption = "BUS KIT - for " + g_str_UserName
    xlApp.ActiveWorkbook.Worksheets("Sheet1").Name = str_Temp
    xlApp.Visible = True

    If Not xlSheet1 Is Nothing Then
        Set xlSheet1 = Nothing
    End If
    If Not xlBook Is Nothing Then
        Set xlBook = Nothing
    End If
    If Not xlApp Is Nothing Then
        Set xlApp = Nothing
    End If

    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdExportToExcel_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not xlSheet1 Is Nothing Then
        Set xlSheet1 = Nothing
    End If
    If Not xlBook Is Nothing Then
        Set xlBook = Nothing
    End If
    If Not xlApp Is Nothing Then
        Set xlApp = Nothing
    End If
End Sub

Private Sub cmdMoveDown_Click()
    On Error GoTo Error_Handler

    m_str_TTCCode = Trim(grdSubKits.Columns("TTC CODE"))
    m_str_OEM = Trim(grdSubKits.Columns("OEM"))
    m_str_OEMNumber = Trim(grdSubKits.Columns("OEM #"))
    m_var_RowSelected = grdSubKits.Bookmark
    m_var_RowSelected1 = m_var_RowSelected + 1
    
    If m_var_RowSelected1 > grdSubKits.ApproxCount Then
        'Part can not be moved after last row.
        Exit Sub
    End If
    
    If m_var_RowSelected1 = 0 Then
        'Part can not be moved into the 1-st row
        Exit Sub
    End If
    Call CheckMoveAfter
    If lblInstructions.Caption = m_str_const_Message Then
        'Move the selected row do desired location.
        Call MoveRow
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdMoveDown_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub cmdMoveUp_Click()
    On Error GoTo Error_Handler
    
    m_str_TTCCode = Trim(grdSubKits.Columns("TTC CODE"))
    m_str_OEM = Trim(grdSubKits.Columns("OEM"))
    m_str_OEMNumber = Trim(grdSubKits.Columns("OEM #"))
    m_var_RowSelected = grdSubKits.Bookmark
    m_var_RowSelected1 = m_var_RowSelected - 2
    If m_var_RowSelected1 = 0 Then
        'Part can not be moved into the 1-st row
        Exit Sub
    End If
    Call CheckMoveAfter
    If lblInstructions.Caption = m_str_const_Message Then
        'Move the selected row do desired location.
        Call MoveRow
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdMoveUp_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub grdSubKits_Click()
    On Error GoTo Error_Handler
    
    If m_b_ChangeDescription = True Then
        m_str_TTCCode = Trim(grdSubKits.Columns("TTC CODE"))
        m_str_OEM = Trim(grdSubKits.Columns("OEM"))
        m_str_OEMNumber = Trim(grdSubKits.Columns("OEM #"))
        m_var_RowSelected = grdSubKits.Bookmark
        Call CheckChangeDescription
        Exit Sub
    End If
    
    If m_b_MoveAfter = True Then
        l_Clicks = l_Clicks + 1
        Call CheckMoveAfter
        If lblInstructions.Caption = m_str_const_Message Then
            'Move the selected row do desired location.
            m_var_RowSelected1 = grdSubKits.Bookmark
            Call MoveRow
        End If
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdSubKits_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub optCancel_Click()
    On Error GoTo Error_Handler

    txtDescription.Visible = False
    m_b_ChangeDescription = False
    m_b_MoveAfter = False
    optChangeDescription.Enabled = True
    optMoveAfter.Enabled = True
    lblInstructions.Caption = ""
    optDone.Enabled = False
    optCancel.Value = False
    optCancel.Enabled = False
    cmdMoveUp.Enabled = True
    cmdMoveDown.Enabled = True
    cmdExportToExcel.Enabled = True
    l_Clicks = 0
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "optCancel_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub optChangeDescription_Click()
    On Error GoTo Error_Handler
    
    m_b_ChangeDescription = True
    
    m_str_TTCCode = Trim(grdSubKits.Columns("TTC CODE"))
    m_str_OEM = Trim(grdSubKits.Columns("OEM"))
    m_str_OEMNumber = Trim(grdSubKits.Columns("OEM #"))
    
    m_var_RowSelected = grdSubKits.Bookmark
    
    Call CheckChangeDescription
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "optChangeDescription_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub optDone_Click()
    Dim RS As ADODB.Recordset
    Dim l_Count As Long
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim l_CurrentRow As Long
    Dim str_PartType As String
    Dim str_OEMNumber As String
    Dim str_OEM As String
    Dim str_TTCCode As String
    Dim str_QTY As String
    Dim str_RefNumber As String
    Dim str_Description As String
    Dim var_RowPosition As Variant
    
    On Error GoTo Error_Handler

    If m_b_ChangeDescription = True Then
        Set RS = New ADODB.Recordset
        Set RS.DataSource = grdSubKits.DataSource
        'Delete all records from the SUB_KITS table where
        'kit_part_number = m_str_KitPartNumber
        l_Result = modDBHelper.DeleteSubKits( _
                                    "CES_DELETE.DELETE_SUB_KITS", _
                                    l_RetVal, _
                                    m_str_KitPartNumber)
        'Insert all records (including that one where DESCRIPTION was changed) into the
        'SUB_KITS table.
        l_CurrentRow = CLng(m_var_RowSelected)
        If l_Result = 0 Then
            RS.MoveFirst
            'Insert all rows before changed row.
            For l_Count = 1 To l_CurrentRow - 1
                str_PartType = ChangeNullToOneSpase(RS.Fields("PART TYPE"))
                str_OEMNumber = ChangeNullToOneSpase(RS.Fields("OEM #"))
                str_OEM = ChangeNullToOneSpase(RS.Fields("OEM"))
                str_TTCCode = ChangeNullToOneSpase(RS.Fields("TTC CODE"))
                str_QTY = ChangeNullToOneSpase(RS.Fields("QTY"))
                str_RefNumber = ChangeNullToOneSpase(RS.Fields("REF #"))
                str_Description = ChangeNullToOneSpase(RS.Fields("DESCRIPTION"))
                l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", _
                            l_RetVal, _
                            m_str_KitPartNumber, _
                            str_PartType, _
                            str_OEMNumber, _
                            str_OEM, _
                            str_TTCCode, _
                            str_QTY, _
                            str_RefNumber, _
                            str_Description, _
                            l_Count)
                RS.MoveNext
            Next l_Count
            'Insert the changed row.
            RS.MoveFirst ' l_CurrentRow - 1
            RS.Move l_CurrentRow - 1
            str_PartType = ChangeNullToOneSpase(RS.Fields("PART TYPE"))
            str_OEMNumber = ChangeNullToOneSpase(RS.Fields("OEM #"))
            str_OEM = ChangeNullToOneSpase(RS.Fields("OEM"))
            str_TTCCode = ChangeNullToOneSpase(RS.Fields("TTC CODE"))
            str_QTY = ChangeNullToOneSpase(RS.Fields("QTY"))
            str_RefNumber = ChangeNullToOneSpase(RS.Fields("REF #"))
            str_Description = Trim(txtDescription.Text)
            
            l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", _
                                                                l_RetVal, _
                                                                m_str_KitPartNumber, _
                                                                str_PartType, _
                                                                str_OEMNumber, _
                                                                str_OEM, _
                                                                str_TTCCode, _
                                                                str_QTY, _
                                                                str_RefNumber, _
                                                                str_Description, _
                                                                l_Count)
            var_RowPosition = l_Count
            'Insert all rows after changed row
            RS.MoveFirst
            RS.Move l_CurrentRow
            For l_Count = l_CurrentRow + 1 To RS.RecordCount
                str_PartType = ChangeNullToOneSpase(RS.Fields("PART TYPE"))
                str_OEMNumber = ChangeNullToOneSpase(RS.Fields("OEM #"))
                str_OEM = ChangeNullToOneSpase(RS.Fields("OEM"))
                str_TTCCode = ChangeNullToOneSpase(RS.Fields("TTC CODE"))
                str_QTY = ChangeNullToOneSpase(RS.Fields("QTY"))
                str_RefNumber = ChangeNullToOneSpase(RS.Fields("REF #"))
                str_Description = ChangeNullToOneSpase(RS.Fields("DESCRIPTION"))
                l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", _
                            l_RetVal, _
                            m_str_KitPartNumber, _
                            str_PartType, _
                            str_OEMNumber, _
                            str_OEM, _
                            str_TTCCode, _
                            str_QTY, _
                            str_RefNumber, _
                            str_Description, _
                            l_Count)
                RS.MoveNext
            Next l_Count
        End If
        m_b_ChangeDescription = False
        txtDescription.Text = ""
        txtDescription.Visible = False
        optChangeDescription.Enabled = True
        optChangeDescription.Value = False
        optMoveAfter.Enabled = True
        optMoveAfter.Value = False
        optDone.Enabled = False
        optDone.Value = False
        optCancel.Enabled = False
        optCancel.Value = False
        lblInstructions.Caption = ""
        cmdMoveUp.Enabled = True
        cmdMoveDown.Enabled = True
        cmdExportToExcel.Enabled = True
        
        'Refresh the grdSubKits grid.
        Call RefreshForm
        'And select just moved row.
        grdSubKits.Bookmark = var_RowPosition
    End If

    If Not RS Is Nothing Then
        Set RS = Nothing
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "optDone_Click", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    Call SetDefaultCursor
End Sub

Private Sub optMoveAfter_Click()
    On Error GoTo Error_Handler
    
    m_b_MoveAfter = True
    
    m_str_TTCCode = Trim(grdSubKits.Columns("TTC CODE"))
    m_str_OEM = Trim(grdSubKits.Columns("OEM"))
    m_str_OEMNumber = Trim(grdSubKits.Columns("OEM #"))

    m_var_RowSelected = grdSubKits.Bookmark

    Call CheckMoveAfter

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "optMoveAfter_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub CheckChangeDescription()
    Dim str_Msg As String
    
    On Error GoTo Error_Handler
    
    If m_str_TTCCode = "" And m_str_OEM = "" And m_str_OEMNumber = "" Then
        str_Msg = "PLEASE ENTER A NEW DESCRIPTION, AND CLICK THE SAVE BUTTON TO COMMIT "
        str_Msg = str_Msg + "CHANGES. CLICK THE CANCEL BUTTON TO CONTINUE WITHOUT SAVING."
        lblInstructions.Caption = str_Msg
        optDone.Enabled = True
        optCancel.Enabled = True
        txtDescription.Visible = True
        txtDescription.SetFocus
        optMoveAfter.Enabled = False
        cmdMoveUp.Enabled = False
        cmdMoveDown.Enabled = False
        cmdExportToExcel.Enabled = False
    Else
        optDone.Enabled = False
        optCancel.Enabled = True
        txtDescription.Visible = False
        str_Msg = "DESCRIPTION CAN ONLY BE CHANGED FOR SUB KIT HEADINGS, NOT FOR PARTS."
        lblInstructions.Caption = str_Msg
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "CheckChangeDescription", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub CheckMoveAfter()
    Dim str_Msg As String
    
    On Error GoTo Error_Handler
    
    If m_str_TTCCode = "" And m_str_OEM = "" And m_str_OEMNumber = "" Then
        str_Msg = "SUB KIT HEADING CAN NOT BE MOVED."
        lblInstructions.Caption = str_Msg
        optMoveAfter.Value = False
        m_b_MoveAfter = False
        optDone.Enabled = False
        optCancel.Enabled = False
        txtDescription.Visible = False
        optChangeDescription.Enabled = True
        cmdMoveUp.Enabled = True
        cmdMoveDown.Enabled = True
        cmdExportToExcel.Enabled = True
        
        Exit Sub
    End If
    
    optDone.Enabled = False
    optCancel.Enabled = True
    txtDescription.Visible = False
    optChangeDescription.Enabled = False
    cmdMoveUp.Enabled = True
    cmdMoveDown.Enabled = True
    cmdExportToExcel.Enabled = True
    str_Msg = m_str_const_Message
    lblInstructions.Caption = str_Msg
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "CheckMoveAfter", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub MoveRow()
    Dim RS As ADODB.Recordset
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim l_CurrentRow As Long
    Dim l_Count As Long
    Dim l_Seq As Long
    Dim str_PartType As String
    Dim str_OEMNumber As String
    Dim str_OEM As String
    Dim str_TTCCode As String
    Dim str_QTY As String
    Dim str_RefNumber As String
    Dim str_Description As String
    Dim str_CurrentSubKitLetter As String
    Dim l_PartNumberInSubKit As Long
    Dim var_RowPosition As Variant
    
    On Error GoTo Error_Handler

    l_Seq = 1
    l_CurrentRow = CLng(m_var_RowSelected1)
    Set RS = New ADODB.Recordset
    Set RS.DataSource = grdSubKits.DataSource
    'Delete all records from the SUB_KITS table where
    'kit_part_number = m_str_KitPartNumber
    l_Result = modDBHelper.DeleteSubKits( _
                                "CES_DELETE.DELETE_SUB_KITS", _
                                l_RetVal, _
                                m_str_KitPartNumber)
    
    'Insert all records (including moved one) into the
    'SUB_KITS table.
    If l_Result = 0 Then
        RS.MoveFirst
        'Insert rows (excluding moved one) from the 1-st row to the destinated row
        For l_Count = 1 To l_CurrentRow
            str_TTCCode = modMain.ChangeNullToOneSpase(RS.Fields("TTC CODE"))
            str_OEM = modMain.ChangeNullToOneSpase(RS.Fields("OEM"))
            str_OEMNumber = modMain.ChangeNullToOneSpase(RS.Fields("OEM #"))
            If str_TTCCode = " " And str_OEM = " " And str_OEMNumber = " " Then
                'Record with "KIT A" - "KIT Z" in the "REF #" field.
                str_CurrentSubKitLetter = modMain.ChangeNullToOneSpase(RS.Fields("REF #"))
                str_CurrentSubKitLetter = Right(str_CurrentSubKitLetter, 1)
                l_PartNumberInSubKit = 1
            End If
            
            If l_Count <> CLng(m_var_RowSelected) Then
                str_PartType = modMain.ChangeNullToOneSpase(RS.Fields("PART TYPE"))
                str_OEMNumber = modMain.ChangeNullToOneSpase(RS.Fields("OEM #"))
                str_OEM = modMain.ChangeNullToOneSpase(RS.Fields("OEM"))
                str_TTCCode = modMain.ChangeNullToOneSpase(RS.Fields("TTC CODE"))
                str_QTY = modMain.ChangeNullToOneSpase(RS.Fields("QTY"))
                str_RefNumber = modMain.ChangeNullToOneSpase(RS.Fields("REF #"))
                str_Description = modMain.ChangeNullToOneSpase(RS.Fields("DESCRIPTION"))
                
                If str_TTCCode = " " And str_OEM = " " And str_OEMNumber = " " Then
                    'Do nothing
                Else
                    str_RefNumber = str_CurrentSubKitLetter + CStr(l_PartNumberInSubKit)
                    l_PartNumberInSubKit = l_PartNumberInSubKit + 1
                End If
                
                l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", _
                            l_RetVal, _
                            m_str_KitPartNumber, _
                            str_PartType, _
                            str_OEMNumber, _
                            str_OEM, _
                            str_TTCCode, _
                            str_QTY, _
                            str_RefNumber, _
                            str_Description, _
                            l_Seq)
                l_Seq = l_Seq + 1
            End If
            RS.MoveNext
        Next l_Count
        
        'Insert the moved row.
        RS.MoveFirst ' l_CurrentRow - 1
        RS.Move CLng(m_var_RowSelected - 1)
        str_PartType = modMain.ChangeNullToOneSpase(RS.Fields("PART TYPE"))
        str_OEMNumber = modMain.ChangeNullToOneSpase(RS.Fields("OEM #"))
        str_OEM = modMain.ChangeNullToOneSpase(RS.Fields("OEM"))
        str_TTCCode = modMain.ChangeNullToOneSpase(RS.Fields("TTC CODE"))
        str_QTY = modMain.ChangeNullToOneSpase(RS.Fields("QTY"))
        str_RefNumber = modMain.ChangeNullToOneSpase(RS.Fields("REF #"))
        str_Description = modMain.ChangeNullToOneSpase(RS.Fields("DESCRIPTION")) 'Trim(txtDescription.Text)
        If str_TTCCode = " " And str_OEM = " " And str_OEMNumber = " " Then
            'Do nothing
        Else
            str_RefNumber = str_CurrentSubKitLetter + CStr(l_PartNumberInSubKit)
            l_PartNumberInSubKit = l_PartNumberInSubKit + 1
        End If

        l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", _
                                                            l_RetVal, _
                                                            m_str_KitPartNumber, _
                                                            str_PartType, _
                                                            str_OEMNumber, _
                                                            str_OEM, _
                                                            str_TTCCode, _
                                                            str_QTY, _
                                                            str_RefNumber, _
                                                            str_Description, _
                                                            l_Seq)

        var_RowPosition = l_Seq
        'Insert rest rows.
        l_Seq = l_Seq + 1
        RS.MoveFirst
        RS.Move l_CurrentRow
        For l_Count = l_CurrentRow + 1 To RS.RecordCount
            str_TTCCode = modMain.ChangeNullToOneSpase(RS.Fields("TTC CODE"))
            str_OEM = modMain.ChangeNullToOneSpase(RS.Fields("OEM"))
            str_OEMNumber = modMain.ChangeNullToOneSpase(RS.Fields("OEM #"))
            If str_TTCCode = " " And str_OEM = " " And str_OEMNumber = " " Then
                str_CurrentSubKitLetter = modMain.ChangeNullToOneSpase(RS.Fields("REF #"))
                str_CurrentSubKitLetter = Right(str_CurrentSubKitLetter, 1)
                l_PartNumberInSubKit = 1
            End If
            If l_Count <> CLng(m_var_RowSelected) Then
                str_PartType = modMain.ChangeNullToOneSpase(RS.Fields("PART TYPE"))
                str_OEMNumber = modMain.ChangeNullToOneSpase(RS.Fields("OEM #"))
                str_OEM = modMain.ChangeNullToOneSpase(RS.Fields("OEM"))
                str_TTCCode = modMain.ChangeNullToOneSpase(RS.Fields("TTC CODE"))
                str_QTY = modMain.ChangeNullToOneSpase(RS.Fields("QTY"))
                str_RefNumber = modMain.ChangeNullToOneSpase(RS.Fields("REF #"))
                str_Description = modMain.ChangeNullToOneSpase(RS.Fields("DESCRIPTION"))
                
                If str_TTCCode = " " And str_OEM = " " And str_OEMNumber = " " Then
                    'Do nothing
                Else
                    str_RefNumber = str_CurrentSubKitLetter + CStr(l_PartNumberInSubKit)
                    l_PartNumberInSubKit = l_PartNumberInSubKit + 1
                End If
                
                l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", _
                            l_RetVal, _
                            m_str_KitPartNumber, _
                            str_PartType, _
                            str_OEMNumber, _
                            str_OEM, _
                            str_TTCCode, _
                            str_QTY, _
                            str_RefNumber, _
                            str_Description, _
                            l_Seq)
                l_Seq = l_Seq + 1
            End If
            RS.MoveNext
        Next l_Count
    
        l_Clicks = 0
        txtDescription.Text = ""
        txtDescription.Visible = False
        optChangeDescription.Enabled = True
        optChangeDescription.Value = False
        optMoveAfter.Enabled = True
        optMoveAfter.Value = False
        optDone.Enabled = False
        optDone.Value = False
        optCancel.Enabled = False
        optCancel.Value = False
        lblInstructions.Caption = ""
        m_b_MoveAfter = False
        
        'Refresh the grdSubKits grid.
        Call RefreshForm
        'And select just moved row.
        grdSubKits.Bookmark = var_RowPosition
    End If
    
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "MoveRow", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    Call SetDefaultCursor
End Sub

Private Sub Timer1_Timer()
    On Error GoTo Error_Handler
    
    Call modMain.ChangeOpasityLayeredForm(Me, Me.Timer1, 5, 255, 10)
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Timer1_Timer", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub txtDescription_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtUserName edit-box to upper case.
    l_CursorPosition = txtDescription.SelStart
    str_Data = txtDescription.Text
    str_Data = UCase(str_Data)
    txtDescription.Text = str_Data
    txtDescription.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtDescription_KeyUp", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub MakeArrayForExcel()
    'This sub will fill the m_arr_str_ExcelKit(5, m_l_ExcelKitSize) array. It will skip
    'all sub kits which DO NOT have parts attached. For example, column "REF #" has
    'next looks:
    ' | REF # |
    ' |-------|
    ' | KIT A |
    ' |  A1   |
    ' |  A2   |
    ' | KIT B |
    ' | KIT C |
    ' | KIT D |
    ' |  D1   |
    ' | KIT E |
    ' | ..... |
    'only lines ""KIT A", "A1", "A2", "KIT D", "D1" will be added to the
    'm_arr_str_ExcelKit(5, m_l_ExcelKitSize) array.
    
    Dim RS As ADODB.Recordset
    Dim str_SubKitLetter As String
    Dim str_SubKitPartLetter As String
    Dim l_Count As Long
    Dim str_RefNumber As String
    Dim str_TTCCode As String
    Dim str_OEM As String
    Dim str_QTY As String
    Dim str_OEMNumber As String
    Dim str_Description As String
    Dim str_RefNumberSK As String
    Dim str_TTCCodeSK As String
    Dim str_OEMSK As String
    Dim str_QTYSK As String
    Dim str_OEMNumberSK As String
    Dim str_DescriptionSK As String
    Dim b_SubKitSaved As Boolean
    
    On Error GoTo Error_Handler

    b_SubKitSaved = False
    m_l_ExcelKitSize = -1
    
    Set RS = New ADODB.Recordset
    Set RS.DataSource = grdSubKits.DataSource
    If RS.RecordCount > 0 Then
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
            str_RefNumber = modMain.ChangeNullToOneSpase(RS.Fields("REF #"))
            str_TTCCode = modMain.ChangeNullToOneSpase(RS.Fields("TTC CODE"))
            str_OEM = modMain.ChangeNullToOneSpase(RS.Fields("OEM"))
            str_QTY = modMain.ChangeNullToOneSpase(RS.Fields("QTY"))
            str_OEMNumber = modMain.ChangeNullToOneSpase(RS.Fields("OEM #"))
            str_Description = modMain.ChangeNullToOneSpase(RS.Fields("DESCRIPTION"))
            
            If str_TTCCode = " " And str_OEM = " " And str_OEMNumber = " " Then
                str_SubKitLetter = Right(str_RefNumber, 1)
                b_SubKitSaved = False
            
                str_RefNumberSK = str_RefNumber
                str_TTCCodeSK = str_TTCCode
                str_OEMSK = str_OEM
                str_QTYSK = str_QTY
                str_OEMNumberSK = str_OEMNumber
                str_DescriptionSK = str_Description
            Else
                str_SubKitPartLetter = Left(str_RefNumber, 1)
            End If
            
            If str_SubKitLetter = str_SubKitPartLetter Then
                If b_SubKitSaved = False Then
                    m_l_ExcelKitSize = m_l_ExcelKitSize + 2
                    ReDim Preserve m_arr_str_ExcelKit(5, m_l_ExcelKitSize)
                    
                    m_arr_str_ExcelKit(0, m_l_ExcelKitSize - 1) = str_RefNumberSK
                    m_arr_str_ExcelKit(1, m_l_ExcelKitSize - 1) = str_TTCCodeSK
                    m_arr_str_ExcelKit(2, m_l_ExcelKitSize - 1) = str_OEMSK
                    m_arr_str_ExcelKit(3, m_l_ExcelKitSize - 1) = str_QTYSK
                    m_arr_str_ExcelKit(4, m_l_ExcelKitSize - 1) = str_OEMNumberSK
                    m_arr_str_ExcelKit(5, m_l_ExcelKitSize - 1) = str_DescriptionSK
                    
                    m_arr_str_ExcelKit(0, m_l_ExcelKitSize) = str_RefNumber
                    m_arr_str_ExcelKit(1, m_l_ExcelKitSize) = str_TTCCode
                    m_arr_str_ExcelKit(2, m_l_ExcelKitSize) = str_OEM
                    m_arr_str_ExcelKit(3, m_l_ExcelKitSize) = str_QTY
                    m_arr_str_ExcelKit(4, m_l_ExcelKitSize) = str_OEMNumber
                    m_arr_str_ExcelKit(5, m_l_ExcelKitSize) = str_Description
                  
                    b_SubKitSaved = True
                Else
                    m_l_ExcelKitSize = m_l_ExcelKitSize + 1
                    ReDim Preserve m_arr_str_ExcelKit(5, m_l_ExcelKitSize)
                    m_arr_str_ExcelKit(0, m_l_ExcelKitSize) = str_RefNumber
                    m_arr_str_ExcelKit(1, m_l_ExcelKitSize) = str_TTCCode
                    m_arr_str_ExcelKit(2, m_l_ExcelKitSize) = str_OEM
                    m_arr_str_ExcelKit(3, m_l_ExcelKitSize) = str_QTY
                    m_arr_str_ExcelKit(4, m_l_ExcelKitSize) = str_OEMNumber
                    m_arr_str_ExcelKit(5, m_l_ExcelKitSize) = str_Description
                End If
            End If
            RS.MoveNext
        Next l_Count
    End If

    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "MakeArrayForExcel", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    Call SetDefaultCursor
End Sub
frmTypeOfPart.frm :
VERSION 5.00
Begin VB.Form frmTypeOfPart 
   BorderStyle     =   3  'Fixed Dialog
   Caption         =   "Part Selection"
   ClientHeight    =   2550
   ClientLeft      =   45
   ClientTop       =   330
   ClientWidth     =   3960
   Icon            =   "frmTypeOfPart.frx":0000
   LinkTopic       =   "Form1"
   MaxButton       =   0   'False
   MinButton       =   0   'False
   ScaleHeight     =   2550
   ScaleWidth      =   3960
   ShowInTaskbar   =   0   'False
   StartUpPosition =   2  'CenterScreen
   Begin VB.Frame fraSelectType 
      Caption         =   "Select Type of Part to Add"
      Height          =   2490
      Left            =   0
      TabIndex        =   4
      Top             =   0
      Width           =   3870
      Begin VB.CommandButton cmdContinue 
         Caption         =   "Continue"
         Default         =   -1  'True
         Height          =   345
         Left            =   1500
         TabIndex        =   3
         Top             =   1875
         Width           =   975
      End
      Begin VB.OptionButton optAddStockCodedPart 
         BackColor       =   &H80000004&
         Caption         =   "Add a Stock Coded Part"
         Height          =   195
         Left            =   788
         TabIndex        =   2
         Top             =   975
         Width           =   2055
      End
      Begin VB.OptionButton optAddNonStockCodedPart 
         BackColor       =   &H80000004&
         Caption         =   "Add a Non-Stock Coded Part"
         Height          =   315
         Left            =   788
         TabIndex        =   1
         Top             =   1320
         Width           =   2385
      End
      Begin VB.OptionButton optAddRebuiltPart 
         BackColor       =   &H80000004&
         Caption         =   "Add a Rebuilt Part"
         Height          =   225
         Left            =   788
         TabIndex        =   0
         Top             =   600
         Width           =   1635
      End
   End
End
Attribute VB_Name = "frmTypeOfPart"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Option Explicit

Public m_str_FormType As String
Public m_str_LinkNumber As String
Public m_str_AuditReference As String

Private Sub cmdContinue_Click()
    On Error GoTo Error_Handler

    Call SetWaitCursor
    If m_str_FormType = "MakeBuy" Then
        Call ShowMakeBuyForm
    End If
    If m_str_FormType = "Rebuilt" Then
        Call ShowRebuiltForm
    End If
     If m_str_FormType = "Bus" Then
        Call ShowBusForm
    End If
    If m_str_FormType = "OEMKit" Then
        Call ShowOEMKitForm
    End If

    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdContinue_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub ShowMakeBuyForm()
    On Error GoTo Error_Handler
    
    If optAddNonStockCodedPart.Value = True Then
        
        'If frmAddNSCPToEstimate.WindowState = 1 Or _
        '   frmAddNSCPToEstimate.WindowState = 2 Then
        '        frmAddNSCPToEstimate.WindowState = 0
        'End If
        Dim formshow As New frmAddNSCPToEstimate
        formshow.m_str_LinkNumber = m_str_LinkNumber
        formshow.m_str_AuditReference = m_str_AuditReference
        formshow.Caption = "Add a Non-Stock Coded Part to the Make Vs. Buy Estimate"
        formshow.m_str_TypeCode = "MB"
        Unload Me
        formshow.Show vbModal
    ElseIf optAddStockCodedPart.Value = True Then
        'If frmAddSCPToEstimate.WindowState = 1 Or frmAddSCPToEstimate.WindowState = 2 Then
        '    frmAddSCPToEstimate.WindowState = 0
        'End If
        Dim formshow2 As New frmAddSCPToEstimate
        formshow2.m_str_MBNumber = m_str_LinkNumber
        formshow2.m_str_AuditReference = m_str_AuditReference
        formshow2.Caption = "Add a Stock Coded Part to the Make Vs. Buy Estimate"
        formshow2.m_str_TypeCode = "MB"
        Unload Me
        formshow2.Show vbModal
    ElseIf optAddRebuiltPart.Value = True Then
        'If frmAddRBPToEstimate.WindowState = 1 Or frmAddRBPToEstimate.WindowState = 2 Then
        '    frmAddRBPToEstimate.WindowState = 0
        'End If
        Dim formshow3 As New frmAddRBPToEstimate
        formshow3.m_str_LinkNumber = m_str_LinkNumber
        formshow3.m_str_AuditReference = m_str_AuditReference
        formshow3.Caption = "Add a Rebuilt Part to the Make Vs. Buy Estimate"
        formshow3.m_str_TypeCode = "MB"
        Unload Me
        formshow3.Show vbModal
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "ShowMakeBuyForm", g_l_ErrorLineNumber
End Sub

Private Sub ShowRebuiltForm()
    On Error GoTo Error_Handler
    
    If optAddNonStockCodedPart.Value = True Then
        Dim formshow As New frmAddNSCPToEstimate
        formshow.m_str_LinkNumber = m_str_LinkNumber
        formshow.m_str_AuditReference = m_str_AuditReference
        formshow.Caption = "Add a Non-Stock Coded Part to the Rebuilt Part Estimate"
        formshow.m_str_TypeCode = "RB"
        Unload Me
        formshow.Show vbModal
    ElseIf optAddStockCodedPart.Value = True Then
        Dim formshow2 As New frmAddSCPToEstimate
        formshow2.m_str_MBNumber = m_str_LinkNumber
        formshow2.m_str_AuditReference = m_str_AuditReference
        formshow2.Caption = "Add a Stock Coded Part to the Rebuilt Part Estimate"
        formshow2.m_str_TypeCode = "RB"
        Unload Me
        formshow2.Show vbModal
    ElseIf optAddRebuiltPart.Value = True Then
        Dim formshow3 As New frmAddRBPToEstimate
        formshow3.m_str_LinkNumber = m_str_LinkNumber
        formshow3.m_str_AuditReference = m_str_AuditReference
        formshow3.Caption = "Add a Rebuilt Part to the Rebuilt Part Estimate"
        formshow3.m_str_TypeCode = "RB"
        Unload Me
        formshow3.Show vbModal
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "ShowRebuiltForm", g_l_ErrorLineNumber
End Sub

Private Sub ShowOEMKitForm()
    On Error GoTo Error_Handler

    optAddRebuiltPart.Visible = False
    If optAddNonStockCodedPart.Value = True Then
        frmAddNSCPToEstimate.m_str_LinkNumber = m_str_LinkNumber
        frmAddNSCPToEstimate.m_str_AuditReference = m_str_LinkNumber
        frmAddNSCPToEstimate.Caption = "Add a Non-Stock Coded Part to the OEM Kit " + m_str_LinkNumber
        frmAddNSCPToEstimate.m_str_TypeCode = "KIT"
        Unload Me
        frmAddNSCPToEstimate.Show vbModal
    ElseIf optAddStockCodedPart.Value = True Then
        frmAddSCPToEstimate.m_str_MBNumber = m_str_LinkNumber
        frmAddSCPToEstimate.m_str_AuditReference = m_str_LinkNumber
        frmAddSCPToEstimate.Caption = "Add a Stock Coded Part to the OEM Kit " + m_str_LinkNumber
        frmAddSCPToEstimate.m_str_TypeCode = "KIT"
        Unload Me
        frmAddSCPToEstimate.Show vbModal
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "ShowOEMKitForm", g_l_ErrorLineNumber
End Sub

Private Sub ShowBusForm()
    On Error GoTo Error_Handler
    
    If optAddNonStockCodedPart.Value = True Then
        If frmAddNSCPToEstimate.WindowState = 1 Or _
           frmAddNSCPToEstimate.WindowState = 2 Then
                frmAddNSCPToEstimate.WindowState = 0
        End If
        Dim formshow As New frmAddNSCPToEstimate
        formshow.m_str_LinkNumber = m_str_LinkNumber
        formshow.m_str_AuditReference = m_str_AuditReference
        formshow.Caption = "Add a Non-Stock Coded Part to the Vehicle Estimate"
        formshow.m_str_TypeCode = "BUS"
        Unload Me
        formshow.Show vbModal
    ElseIf optAddStockCodedPart.Value = True Then
        If frmAddSCPToEstimate.WindowState = 1 Or frmAddSCPToEstimate.WindowState = 2 Then
            frmAddSCPToEstimate.WindowState = 0
        End If
        Dim formshow2 As New frmAddSCPToEstimate
        formshow2.m_str_MBNumber = m_str_LinkNumber
        formshow2.m_str_AuditReference = m_str_AuditReference
        formshow2.Caption = "Add a Stock Coded Part to the Vehicle Estimate"
        formshow2.m_str_TypeCode = "BUS"
        Unload Me
        formshow2.Show vbModal
    ElseIf optAddRebuiltPart.Value = True Then
        If frmAddRBPToEstimate.WindowState = 1 Or frmAddRBPToEstimate.WindowState = 2 Then
            frmAddRBPToEstimate.WindowState = 0
        End If
        Dim formshow3 As New frmAddRBPToEstimate
        formshow3.m_str_LinkNumber = m_str_LinkNumber
        formshow3.m_str_AuditReference = m_str_AuditReference
        formshow3.Caption = "Add a Rebuilt Part to the Vehicle Estimate"
        formshow3.m_str_TypeCode = "BUS"
        Unload Me
        formshow3.Show vbModal
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "ShowBusForm", g_l_ErrorLineNumber
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub
frmUtilities.frm :
VERSION 5.00
Object = "{831FDD16-0C5C-11D2-A9FC-0000F8754DA1}#2.0#0"; "mscomctl.ocx"
Begin VB.Form frmUtilities 
   BorderStyle     =   3  'Fixed Dialog
   Caption         =   "Cleaning NON_STOCK_CODED_PARTS and NSC_PARTS_USED tables"
   ClientHeight    =   11595
   ClientLeft      =   45
   ClientTop       =   330
   ClientWidth     =   17175
   Icon            =   "frmUtilities.frx":0000
   LinkTopic       =   "Form1"
   MaxButton       =   0   'False
   MinButton       =   0   'False
   ScaleHeight     =   11595
   ScaleWidth      =   17175
   ShowInTaskbar   =   0   'False
   StartUpPosition =   2  'CenterScreen
   Begin VB.Frame Frame10 
      Caption         =   "Final Checks"
      Height          =   2055
      Left            =   60
      TabIndex        =   40
      Top             =   9480
      Width           =   17055
      Begin VB.Label Label16 
         BorderStyle     =   1  'Fixed Single
         Caption         =   "9.12. Check that each record in the NSC_PARTS_USED table has corresponded record in the NON_STOCK_CODED_PARTS table."
         ForeColor       =   &H00C00000&
         Height          =   495
         Left            =   8640
         TabIndex        =   52
         Top             =   1440
         Width           =   8355
      End
      Begin VB.Label Label15 
         BorderStyle     =   1  'Fixed Single
         Caption         =   "9.11. Check that combinations of ORIG_SUPPLIER_NUM + ORIG_SUPPLIER_NAME in the NON_STOCK_CODED_PARTS table are unique."
         ForeColor       =   &H00C00000&
         Height          =   495
         Left            =   8640
         TabIndex        =   51
         Top             =   960
         Width           =   8355
      End
      Begin VB.Label Label13 
         BorderStyle     =   1  'Fixed Single
         Caption         =   "9.10. Checks that fields NON_STOCK_CODED_PARTS.ORIG_SUPPLIER_NAME do not have only spaces."
         ForeColor       =   &H00C00000&
         Height          =   255
         Left            =   8640
         TabIndex        =   50
         Top             =   720
         Width           =   8355
      End
      Begin VB.Label Label12 
         BorderStyle     =   1  'Fixed Single
         Caption         =   "9.6. Checks that fields NON_STOCK_CODED_PARTS.ORIG_SUPPLIER_NUM do not have only spaces."
         ForeColor       =   &H00C00000&
         Height          =   255
         Left            =   60
         TabIndex        =   49
         Top             =   1440
         Width           =   8355
      End
      Begin VB.Label Label11 
         BorderStyle     =   1  'Fixed Single
         Caption         =   "9.9. Checks that fields NSC_PARTS_USED.ORIG_SUPPLIER_NAME do not have only spaces."
         ForeColor       =   &H00C00000&
         Height          =   255
         Left            =   8640
         TabIndex        =   48
         Top             =   480
         Width           =   8355
      End
      Begin VB.Label Label10 
         BorderStyle     =   1  'Fixed Single
         Caption         =   "9.8. Checks that fields NON_STOCK_CODED_PARTS.ORIG_SUPPLIER_NAME are not NULLs."
         ForeColor       =   &H00C00000&
         Height          =   255
         Left            =   8640
         TabIndex        =   47
         Top             =   240
         Width           =   8355
      End
      Begin VB.Label Label9 
         BorderStyle     =   1  'Fixed Single
         Caption         =   "9.7. Checks that fields NSC_PARTS_USED.ORIG_SUPPLIER_NAME are not NULLs."
         ForeColor       =   &H00C00000&
         Height          =   255
         Left            =   60
         TabIndex        =   46
         Top             =   1680
         Width           =   8355
      End
      Begin VB.Label Label8 
         BorderStyle     =   1  'Fixed Single
         Caption         =   "9.5. Check that fields NSC_PARTS_USED.ORIG_SUPP_NUM do not have only spaces."
         ForeColor       =   &H00C00000&
         Height          =   255
         Left            =   60
         TabIndex        =   45
         Top             =   1200
         Width           =   8355
      End
      Begin VB.Label Label6 
         BorderStyle     =   1  'Fixed Single
         Caption         =   "9.4. Checks that fields NON_STOCK_CODED_PARTS.ORIG_SUPPLIER_NUM are not NULLs."
         ForeColor       =   &H00C00000&
         Height          =   255
         Left            =   60
         TabIndex        =   44
         Top             =   960
         Width           =   8355
      End
      Begin VB.Label Label5 
         BorderStyle     =   1  'Fixed Single
         Caption         =   "9.3. Checks that fields NSC_PARTS_USED.ORIG_SUPP_NUM are not NULLs."
         ForeColor       =   &H00C00000&
         Height          =   255
         Left            =   60
         TabIndex        =   43
         Top             =   720
         Width           =   8355
      End
      Begin VB.Label Label4 
         BorderStyle     =   1  'Fixed Single
         Caption         =   "9.2. Checks that fields NON_STOCK_CODED_PARTS.ID are not NULLs."
         ForeColor       =   &H00C00000&
         Height          =   255
         Left            =   60
         TabIndex        =   42
         Top             =   480
         Width           =   8355
      End
      Begin VB.Label Label3 
         BorderStyle     =   1  'Fixed Single
         Caption         =   "9.1. Checks that fields NSC_PARTS_USED.ID are not NULLs."
         ForeColor       =   &H00C00000&
         Height          =   255
         Left            =   60
         TabIndex        =   41
         Top             =   240
         Width           =   8355
      End
   End
   Begin VB.Timer Timer1 
      Interval        =   1
      Left            =   8880
      Top             =   6840
   End
   Begin VB.Frame Frame3 
      Height          =   4635
      Left            =   60
      TabIndex        =   4
      Top             =   4860
      Width           =   17055
      Begin VB.Frame Frame9 
         Height          =   1815
         Left            =   8580
         TabIndex        =   32
         Top             =   2760
         Width           =   8415
         Begin VB.CommandButton cmdStep8 
            Caption         =   "Step 8"
            Height          =   315
            Left            =   60
            TabIndex        =   33
            Top             =   180
            Width           =   800
         End
         Begin VB.Label lblStep8 
            BorderStyle     =   1  'Fixed Single
            Caption         =   $"frmUtilities.frx":0442
            ForeColor       =   &H00C00000&
            Height          =   1515
            Left            =   900
            TabIndex        =   34
            Top             =   180
            Width           =   7455
         End
      End
      Begin VB.Frame Frame8 
         Height          =   1635
         Left            =   8580
         TabIndex        =   28
         Top             =   1140
         Width           =   8415
         Begin VB.CommandButton cmdStep7 
            Caption         =   "Step 7"
            Height          =   315
            Left            =   60
            TabIndex        =   29
            Top             =   180
            Width           =   800
         End
         Begin VB.Label lblStep72 
            BorderStyle     =   1  'Fixed Single
            Caption         =   $"frmUtilities.frx":0691
            ForeColor       =   &H00C00000&
            Height          =   915
            Left            =   900
            TabIndex        =   31
            Top             =   660
            Width           =   7455
         End
         Begin VB.Label lblStep71 
            BorderStyle     =   1  'Fixed Single
            Caption         =   "7.1. Find all records in the NSC_PARTS_USED table where combination ORIG_SUPP_NUM + ORIG_SUPPLIER_NAME is duplicated."
            ForeColor       =   &H00C00000&
            Height          =   495
            Left            =   900
            TabIndex        =   30
            Top             =   180
            Width           =   7455
         End
      End
      Begin VB.Frame Frame7 
         Height          =   1035
         Left            =   8580
         TabIndex        =   24
         Top             =   120
         Width           =   8415
         Begin VB.CommandButton cmdStep6 
            Caption         =   "Step 6"
            Height          =   315
            Left            =   60
            TabIndex        =   25
            Top             =   180
            Width           =   800
         End
         Begin VB.Label lblStep62 
            BorderStyle     =   1  'Fixed Single
            Caption         =   "6.2. If no record(s) found, delete all records from the NON_STOCK_CODED_PARTS table where ORIG_SUPPLIER_NAME has only spaces."
            ForeColor       =   &H00C00000&
            Height          =   480
            Left            =   900
            TabIndex        =   27
            Top             =   480
            Width           =   7455
         End
         Begin VB.Label lblStep61 
            BorderStyle     =   1  'Fixed Single
            Caption         =   "6.1. Find all records in the NSC_PARTS_USED table where ORIG_SUPPLIER_NAME has only spaces."
            ForeColor       =   &H00C00000&
            Height          =   315
            Left            =   900
            TabIndex        =   26
            Top             =   180
            Width           =   7455
         End
      End
      Begin VB.Frame Frame6 
         Height          =   1035
         Left            =   60
         TabIndex        =   20
         Top             =   3240
         Width           =   8415
         Begin VB.CommandButton cmdStep5 
            Caption         =   "Step 5"
            Height          =   315
            Left            =   60
            TabIndex        =   21
            Top             =   180
            Width           =   800
         End
         Begin VB.Label lblStep52 
            BorderStyle     =   1  'Fixed Single
            Caption         =   "5.2. If no record(s) found, delete all records from the NON_STOCK_CODED_PARTS table where ORIG_SUPPLIER_NAME has only spaces."
            ForeColor       =   &H00C00000&
            Height          =   480
            Left            =   900
            TabIndex        =   23
            Top             =   480
            Width           =   7455
         End
         Begin VB.Label lblStep51 
            BorderStyle     =   1  'Fixed Single
            Caption         =   "5.1. Find all records in the NSC_PARTS_USED table where ORIG_SUPPLIER_NAME is NULL."
            ForeColor       =   &H00C00000&
            Height          =   315
            Left            =   900
            TabIndex        =   22
            Top             =   180
            Width           =   7455
         End
      End
      Begin VB.Frame Frame5 
         Height          =   1035
         Left            =   60
         TabIndex        =   16
         Top             =   2220
         Width           =   8415
         Begin VB.CommandButton cmdStep4 
            Caption         =   "Step 4"
            Height          =   315
            Left            =   60
            TabIndex        =   17
            Top             =   180
            Width           =   800
         End
         Begin VB.Label lblStep42 
            BorderStyle     =   1  'Fixed Single
            Caption         =   "4.2. If no record(s) found, delete all records from the NON_STOCK_CODED_PARTS table where ORIG_SUPPLIER_NUM has only spaces."
            ForeColor       =   &H00C00000&
            Height          =   480
            Left            =   900
            TabIndex        =   19
            Top             =   480
            Width           =   7455
         End
         Begin VB.Label lblStep41 
            BorderStyle     =   1  'Fixed Single
            Caption         =   "4.1. Find all records in the NSC_PARTS_USED table where ORIG_SUPP_NUM has only spaces."
            ForeColor       =   &H00C00000&
            Height          =   315
            Left            =   900
            TabIndex        =   18
            Top             =   180
            Width           =   7455
         End
      End
      Begin VB.Frame Frame4 
         Height          =   1035
         Left            =   60
         TabIndex        =   12
         Top             =   1200
         Width           =   8415
         Begin VB.CommandButton cmdStep3 
            Caption         =   "Step 3"
            Height          =   315
            Left            =   60
            TabIndex        =   13
            Top             =   180
            Width           =   800
         End
         Begin VB.Label lblStep32 
            BorderStyle     =   1  'Fixed Single
            Caption         =   "3.2. If no record(s) found, delete all records from the NON_STOCK_CODED_PARTS table where ORIG_SUPPLIER_NUM is NULL."
            ForeColor       =   &H00C00000&
            Height          =   480
            Left            =   900
            TabIndex        =   15
            Top             =   480
            Width           =   7455
         End
         Begin VB.Label lblStep31 
            BorderStyle     =   1  'Fixed Single
            Caption         =   "3.1. Find all records in the NSC_PARTS_USED table where ORIG_SUPP_NUM is NULL."
            ForeColor       =   &H00C00000&
            Height          =   315
            Left            =   900
            TabIndex        =   14
            Top             =   180
            Width           =   7455
         End
      End
      Begin VB.Frame Frame2 
         Height          =   555
         Left            =   60
         TabIndex        =   9
         Top             =   660
         Width           =   8415
         Begin VB.CommandButton cmdStep2 
            Caption         =   "Step 2"
            Height          =   315
            Left            =   60
            TabIndex        =   10
            Top             =   180
            Width           =   800
         End
         Begin VB.Label lblStep2 
            BorderStyle     =   1  'Fixed Single
            Caption         =   "Delete all records from the NON_STOCK_CODED_PARTS table where ID is NULL."
            ForeColor       =   &H00C00000&
            Height          =   315
            Left            =   900
            TabIndex        =   11
            Top             =   180
            Width           =   7455
         End
      End
      Begin VB.Frame Frame1 
         Height          =   555
         Left            =   60
         TabIndex        =   6
         Top             =   120
         Width           =   8415
         Begin VB.CommandButton cmdStep1 
            Caption         =   "Step 1"
            Height          =   315
            Left            =   60
            TabIndex        =   7
            Top             =   180
            Width           =   800
         End
         Begin VB.Label lblStep1 
            BorderStyle     =   1  'Fixed Single
            Caption         =   "Delete all records from the NSC_PARTS_USED table where ID is NULL."
            ForeColor       =   &H00C00000&
            Height          =   315
            Left            =   900
            TabIndex        =   8
            Top             =   180
            Width           =   7455
         End
      End
   End
   Begin VB.Frame frmCleanNSCPTables 
      Height          =   4875
      Left            =   60
      TabIndex        =   0
      Top             =   0
      Width           =   17055
      Begin VB.ListBox lstCleanNSCPTables 
         Height          =   3960
         Left            =   60
         TabIndex        =   1
         Top             =   240
         Width           =   16920
      End
      Begin MSComctlLib.ProgressBar ProgressBar1 
         Height          =   195
         Left            =   60
         TabIndex        =   35
         Top             =   4260
         Width           =   16935
         _ExtentX        =   29871
         _ExtentY        =   344
         _Version        =   393216
         Appearance      =   1
         Scrolling       =   1
      End
      Begin VB.Label lblRecordsQty 
         BackColor       =   &H0080FFFF&
         Height          =   255
         Left            =   7440
         TabIndex        =   39
         Top             =   0
         Width           =   795
      End
      Begin VB.Label Label2 
         Caption         =   "of "
         Height          =   195
         Left            =   7200
         TabIndex        =   38
         Top             =   0
         Width           =   255
      End
      Begin VB.Label lblCurrentRecord 
         BackColor       =   &H0080FFFF&
         Height          =   255
         Left            =   6240
         TabIndex        =   37
         Top             =   0
         Width           =   795
      End
      Begin VB.Label Label1 
         Caption         =   "Now processing record:"
         Height          =   195
         Left            =   4500
         TabIndex        =   36
         Top             =   0
         Width           =   1815
      End
      Begin VB.Label lblMsg 
         Alignment       =   2  'Center
         BackColor       =   &H00FFC0FF&
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   204
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   315
         Left            =   60
         TabIndex        =   5
         Top             =   4500
         Width           =   16875
      End
      Begin VB.Label Label7 
         BackColor       =   &H0080FFFF&
         Caption         =   "   records was found"
         Height          =   255
         Left            =   2700
         TabIndex        =   3
         Top             =   0
         Width           =   1635
      End
      Begin VB.Label lblRecFound 
         Alignment       =   1  'Right Justify
         BackColor       =   &H0080FFFF&
         Caption         =   "0"
         Height          =   255
         Left            =   1860
         TabIndex        =   2
         Top             =   0
         Width           =   795
      End
   End
End
Attribute VB_Name = "frmUtilities"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Option Explicit

Private m_str_Msg As String
Private m_l_Result As Long
Private m_l_RetVal As Long
Private m_l_Duplications As Long

Private m_str_EstimateType As String
Private m_str_EstimateNumber As String
Private m_str_OrigSupplierNumber As String
Private m_str_OrigSupplierName As String
Private m_str_Cost As String
Private m_str_PartID As String

Private m_str_EstimateType_1 As String
Private m_str_EstimateNumber_1 As String
Private m_str_OrigSupplierNumber_1 As String
Private m_str_OrigSupplierName_1 As String
Private m_str_Cost_1 As String
Private m_str_PartID_1 As String

Private m_l_PartID As Long

Private m_b_1_StepDone As Boolean
Private m_b_2_StepDone As Boolean
Private m_b_3_StepDone As Boolean
Private m_b_4_StepDone As Boolean
Private m_b_5_StepDone As Boolean
Private m_b_6_StepDone As Boolean
Private m_b_7_StepDone As Boolean
Private m_b_8_StepDone As Boolean

Private m_b_InProgress As Boolean

Private Const m_str_const_BePatient As String = "Please be patient. Current task can take from few seconds to few minutes."

Private Sub FinalChecks()
    '9.1. Checks that fields NSC_PARTS_USED.ID are not NULLs.
    '9.2. Checks that fields NON_STOCK_CODED_PARTS.ID are not NULLs.
    '9.3. Checks that fields NSC_PARTS_USED.ORIG_SUPP_NUM are not NULLs.
    '9.4. Checks that fields NON_STOCK_CODED_PARTS.ORIG_SUPPLIER_NUM are not NULLs.
    '9.5. Check that fields NSC_PARTS_USED.ORIG_SUPP_NUM do not have only spaces.
    '9.6. Checks that fields NON_STOCK_CODED_PARTS.ORIG_SUPPLIER_NUM do not have only
    '     spaces.
    '9.7. Checks that fields NSC_PARTS_USED.ORIG_SUPPLIER_NAME are not NULLs.
    '9.8. Checks that fields NON_STOCK_CODED_PARTS.ORIG_SUPPLIER_NAME are not NULLs.
    '9.9. Checks that fields NSC_PARTS_USED.ORIG_SUPPLIER_NAME do not have only spaces.
    '9.10. Checks that fields NON_STOCK_CODED_PARTS.ORIG_SUPPLIER_NAME do not have only
    '      spaces.
    '9.11. Check that combinations of ORIG_SUPPLIER_NUM + ORIG_SUPPLIER_NAME in the
    '      NON_STOCK_CODED_PARTS table are unique.
    '9.12. Check that each record in the NSC_PARTS_USED table has corresponded record
    '      in the NON_STOCK_CODED_PARTS table.
    
    Dim RS As ADODB.Recordset
    Dim RS_1 As ADODB.Recordset
    Dim l_Count As Long
    Dim b_ErrorFound As Boolean
    Dim b_SpaceFound As Boolean
    Dim str_Spaces As String
    
    On Error GoTo Error_Handler

    m_b_InProgress = True
    Call MakeButtonsEnabled(True)
    
    Set RS = New ADODB.Recordset
    Set RS_1 = New ADODB.Recordset
    
    '9.1. Checks that fields NSC_PARTS_USED.ID are not NULLs.
    b_ErrorFound = False
    lstCleanNSCPTables.Clear
    m_str_Msg = "9.1. Checks that fields NSC_PARTS_USED.ID are not NULLs."
    lblMsg.Caption = m_str_Msg
    Set RS = modDBHelper.GetNSCPClean9("CES_INQUIRY.GET_NSCP_CLEAN_9")
    If RS.RecordCount > 0 Then
        ProgressBar1.Value = ProgressBar1.Min
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
            b_ErrorFound = True
            m_str_Msg = "Table NSC_PARTS_USED. Data in some ID field is NULL."
            lstCleanNSCPTables.AddItem m_str_Msg
            lstCleanNSCPTables.Refresh
            ProgressBar1.Value = ProgressBar1.Value + 1
            If ProgressBar1.Value = ProgressBar1.Max Then
                ProgressBar1.Value = ProgressBar1.Min
            End If
            RS.MoveNext
            DoEvents
        Next l_Count
    End If

    If b_ErrorFound = True Then
        If Not RS Is Nothing Then
            Set RS = Nothing
        End If
        If Not RS_1 Is Nothing Then
            Set RS_1 = Nothing
        End If
        ProgressBar1.Value = ProgressBar1.Min
        m_str_Msg = "Please fix all errors shown above before further processing."
        lblMsg.Caption = m_str_Msg
        MsgBox m_str_Msg
        Exit Sub
    End If
    lblRecFound.Caption = ""
    lblCurrentRecord.Caption = ""
    lblRecordsQty.Caption = ""
    
    '9.2. Checks that fields NON_STOCK_CODED_PARTS.ID are not NULLs.
    b_ErrorFound = False
    lstCleanNSCPTables.Clear
    m_str_Msg = "9.2. Checks that fields NON_STOCK_CODED_PARTS.ID are not NULLs."
    lblMsg.Caption = m_str_Msg
    Set RS = modDBHelper.GetNSCPClean10("CES_INQUIRY.GET_NSCP_CLEAN_10")
    If RS.RecordCount > 0 Then
        ProgressBar1.Value = ProgressBar1.Min
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
            b_ErrorFound = True
            m_str_Msg = "Table NON_STOCK_CODED_PARTS. Data in some ID field is NULL."
            lstCleanNSCPTables.AddItem m_str_Msg
            lstCleanNSCPTables.Refresh
            ProgressBar1.Value = ProgressBar1.Value + 1
            If ProgressBar1.Value = ProgressBar1.Max Then
                ProgressBar1.Value = ProgressBar1.Min
            End If
            RS.MoveNext
            DoEvents
        Next l_Count
    End If

    If b_ErrorFound = True Then
        If Not RS Is Nothing Then
            Set RS = Nothing
        End If
        If Not RS_1 Is Nothing Then
            Set RS_1 = Nothing
        End If
        ProgressBar1.Value = ProgressBar1.Min
        m_str_Msg = "Please fix all errors shown above before further processing."
        lblMsg.Caption = m_str_Msg
        MsgBox m_str_Msg
        Exit Sub
    End If
    lblRecFound.Caption = ""
    lblCurrentRecord.Caption = ""
    lblRecordsQty.Caption = ""
    
    '9.3. Checks that fields NSC_PARTS_USED.ORIG_SUPP_NUM are not NULLs.
    b_ErrorFound = False
    lstCleanNSCPTables.Clear
    m_str_Msg = "9.3. Checks that fields NSC_PARTS_USED.ORIG_SUPP_NUM are not NULLs."
    lblMsg.Caption = m_str_Msg
    Set RS = modDBHelper.GetNSCPClean11("CES_INQUIRY.GET_NSCP_CLEAN_11")
    If RS.RecordCount > 0 Then
        ProgressBar1.Value = ProgressBar1.Min
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
            b_ErrorFound = True
            m_str_PartID = CStr(RS.Fields("ID"))
            m_str_Msg = "Table NSC_PARTS_USED. ID = " + m_str_PartID
            m_str_Msg = m_str_Msg + ". Data in the ORIG_SUPP_NUM column is NULL."
            lstCleanNSCPTables.AddItem m_str_Msg
            lstCleanNSCPTables.Refresh
            ProgressBar1.Value = ProgressBar1.Value + 1
            If ProgressBar1.Value = ProgressBar1.Max Then
                ProgressBar1.Value = ProgressBar1.Min
            End If
            RS.MoveNext
            DoEvents
        Next l_Count
    End If

    If b_ErrorFound = True Then
        If Not RS Is Nothing Then
            Set RS = Nothing
        End If
        If Not RS_1 Is Nothing Then
            Set RS_1 = Nothing
        End If
        ProgressBar1.Value = ProgressBar1.Min
        m_str_Msg = "Please fix all errors shown above before further processing."
        lblMsg.Caption = m_str_Msg
        MsgBox m_str_Msg
        Exit Sub
    End If
    lblRecFound.Caption = ""
    lblCurrentRecord.Caption = ""
    lblRecordsQty.Caption = ""
    
    '9.4. Checks that fields NON_STOCK_CODED_PARTS.ORIG_SUPPLIER_NUM are not NULLs.
    b_ErrorFound = False
    lstCleanNSCPTables.Clear
    m_str_Msg = "9.4. Checks that fields NON_STOCK_CODED_PARTS.ORIG_SUPPLIER_NUM are "
    m_str_Msg = m_str_Msg + "not NULLs."
    lblMsg.Caption = m_str_Msg
    Set RS = modDBHelper.GetNSCPClean12("CES_INQUIRY.GET_NSCP_CLEAN_12")
    If RS.RecordCount > 0 Then
        ProgressBar1.Value = ProgressBar1.Min
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
            b_ErrorFound = True
            m_str_PartID = CStr(RS.Fields("ID"))
            m_str_Msg = "Table NON_STOCK_CODED_PARTS. ID = " + m_str_PartID
            m_str_Msg = m_str_Msg + ". Data in the ORIG_SUPPLIER_NUM column is NULL."
            lstCleanNSCPTables.AddItem m_str_Msg
            lstCleanNSCPTables.Refresh
            ProgressBar1.Value = ProgressBar1.Value + 1
            If ProgressBar1.Value = ProgressBar1.Max Then
                ProgressBar1.Value = ProgressBar1.Min
            End If
            RS.MoveNext
            DoEvents
        Next l_Count
    End If

    If b_ErrorFound = True Then
        If Not RS Is Nothing Then
            Set RS = Nothing
        End If
        If Not RS_1 Is Nothing Then
            Set RS_1 = Nothing
        End If
        ProgressBar1.Value = ProgressBar1.Min
        m_str_Msg = "Please fix all errors shown above before further processing."
        lblMsg.Caption = m_str_Msg
        MsgBox m_str_Msg
        Exit Sub
    End If
    lblRecFound.Caption = ""
    lblCurrentRecord.Caption = ""
    lblRecordsQty.Caption = ""
    
    '9.5. Check that fields NSC_PARTS_USED.ORIG_SUPP_NUM do not have only spaces.
    m_str_Msg = "9.5. Check that fields NSC_PARTS_USED.ORIG_SUPP_NUM do not have "
    m_str_Msg = m_str_Msg + "only spaces."
    lblMsg.Caption = m_str_Msg
    lblMsg.Refresh
    b_ErrorFound = False
    Set RS = modDBHelper.GetNSCPClean5("CES_INQUIRY.GET_NSCP_CLEAN_5")
    If RS.RecordCount > 0 Then
'        ProgressBar1.Value = ProgressBar1.Min
        lblRecordsQty.Caption = CLng(RS.RecordCount)
        lblRecordsQty.Refresh
        lblCurrentRecord.Caption = "0"
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
            lblCurrentRecord.Caption = CLng(l_Count)
            lblCurrentRecord.Refresh
            m_str_EstimateType = ""
            If IsNull(RS.Fields("LINK_TYPE")) = False Then
                m_str_EstimateType = RS.Fields("LINK_TYPE")
            End If
            m_str_EstimateNumber = ""
            If IsNull(RS.Fields("LINK_CODE")) = False Then
                m_str_EstimateNumber = RS.Fields("LINK_CODE")
            End If
            m_str_OrigSupplierName = ""
            If IsNull(RS.Fields("ORIG_SUPPLIER_NAME")) = False Then
                m_str_OrigSupplierName = RS.Fields("ORIG_SUPPLIER_NAME")
            End If
            m_str_OrigSupplierNumber = ""
            If IsNull(RS.Fields("ORIG_SUPP_NUM")) = False Then
                m_str_OrigSupplierNumber = RS.Fields("ORIG_SUPP_NUM")
                m_str_OrigSupplierNumber = Trim(m_str_OrigSupplierNumber)
            End If
            m_str_PartID = ""
            If IsNull(RS.Fields("ID")) = False Then
                If IsNumeric(RS.Fields("ID")) = True Then
                    m_str_PartID = RS.Fields("ID")
                End If
            End If
            If m_str_OrigSupplierNumber = "" Then
                b_ErrorFound = True
                m_str_Msg = "Table NSC_PARTS_USED. "
                m_str_Msg = m_str_Msg + "Est.Type = " + m_str_EstimateType + ". "
                m_str_Msg = m_str_Msg + "Est. Num = " + m_str_EstimateNumber + ". "
                m_str_Msg = m_str_Msg + "ORIG_SUPPLIER_NAME = "
                m_str_Msg = m_str_Msg + m_str_OrigSupplierName + ". "
                m_str_Msg = m_str_Msg + "ID = " + m_str_PartID
                m_str_Msg = m_str_Msg + ". Field ORIG_SUPP_NUM has spaces only."
                lstCleanNSCPTables.AddItem m_str_Msg
                lstCleanNSCPTables.Refresh
            End If
'            ProgressBar1.Value = ProgressBar1.Value + 1
'            If ProgressBar1.Value = ProgressBar1.Max Then
'                ProgressBar1.Value = ProgressBar1.Min
'            End If
            RS.MoveNext
            DoEvents
        Next l_Count
    End If
    
    If b_ErrorFound = True Then
        If Not RS Is Nothing Then
            Set RS = Nothing
        End If
        If Not RS_1 Is Nothing Then
            Set RS_1 = Nothing
        End If
'        ProgressBar1.Value = ProgressBar1.Min
        m_str_Msg = "Please fix all errors shown above before further processing."
        lblMsg.Caption = m_str_Msg
        MsgBox m_str_Msg
        Exit Sub
    End If
    lblRecFound.Caption = ""
    lblCurrentRecord.Caption = ""
    lblRecordsQty.Caption = ""
    
    '9.6. Checks that fields NON_STOCK_CODED_PARTS.ORIG_SUPPLIER_NUM do not have only
    '     spaces.
    m_str_Msg = "9.6. Checks that fields NON_STOCK_CODED_PARTS.ORIG_SUPPLIER_NUM do not "
    m_str_Msg = m_str_Msg + "have only spaces."
    lblMsg.Caption = m_str_Msg
    lblMsg.Refresh
    b_ErrorFound = False
    Set RS = modDBHelper.GetNSCPClean7("CES_INQUIRY.GET_NSCP_CLEAN_7")
    If RS.RecordCount > 0 Then
'        ProgressBar1.Value = ProgressBar1.Min
        lblRecordsQty.Caption = CLng(RS.RecordCount)
        lblRecordsQty.Refresh
        lblCurrentRecord.Caption = "0"
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
            lblCurrentRecord.Caption = CLng(l_Count)
            lblCurrentRecord.Refresh
            m_str_OrigSupplierName = ""
            If IsNull(RS.Fields("ORIG_SUPPLIER_NAME")) = False Then
                m_str_OrigSupplierName = RS.Fields("ORIG_SUPPLIER_NAME")
            End If
            m_str_OrigSupplierNumber = ""
            If IsNull(RS.Fields("ORIG_SUPPLIER_NUM")) = False Then
                m_str_OrigSupplierNumber = RS.Fields("ORIG_SUPPLIER_NUM")
                m_str_OrigSupplierNumber = Trim(m_str_OrigSupplierNumber)
            End If
            m_str_PartID = ""
            If IsNull(RS.Fields("ID")) = False Then
                If IsNumeric(RS.Fields("ID")) = True Then
                    m_str_PartID = RS.Fields("ID")
                End If
            End If
            If m_str_OrigSupplierNumber = "" Then
                b_ErrorFound = True
                m_str_Msg = "Table NON_STOCK_CODED_PARTS. ID = " + m_str_PartID + ". "
                m_str_Msg = m_str_Msg + "ORIG_SUPPLIER_NAME = "
                m_str_Msg = m_str_Msg + m_str_OrigSupplierName + ". "
                m_str_Msg = m_str_Msg + ". Field ORIG_SUPPLIER_NUM has spaces only."
                lstCleanNSCPTables.AddItem m_str_Msg
                lstCleanNSCPTables.Refresh
            End If
'            ProgressBar1.Value = ProgressBar1.Value + 1
'            If ProgressBar1.Value = ProgressBar1.Max Then
'                ProgressBar1.Value = ProgressBar1.Min
'            End If
            RS.MoveNext
            DoEvents
        Next l_Count
    End If
    
    If b_ErrorFound = True Then
        If Not RS Is Nothing Then
            Set RS = Nothing
        End If
        If Not RS_1 Is Nothing Then
            Set RS_1 = Nothing
        End If
'        ProgressBar1.Value = ProgressBar1.Min
        m_str_Msg = "Please fix all errors shown above before further processing."
        lblMsg.Caption = m_str_Msg
        MsgBox m_str_Msg
        Exit Sub
    End If
    lblRecFound.Caption = ""
    lblCurrentRecord.Caption = ""
    lblRecordsQty.Caption = ""
    
    '9.7. Checks that fields NSC_PARTS_USED.ORIG_SUPPLIER_NAME are not NULLs.
    b_ErrorFound = False
    lstCleanNSCPTables.Clear
    m_str_Msg = "9.7. Checks that fields NSC_PARTS_USED.ORIG_SUPPLIER_NAME are not "
    m_str_Msg = m_str_Msg + "NULLs."
    lblMsg.Caption = m_str_Msg
    Set RS = modDBHelper.GetNSCPClean3("CES_INQUIRY.GET_NSCP_CLEAN_3")
    If RS.RecordCount > 0 Then
        ProgressBar1.Value = ProgressBar1.Min
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
            b_ErrorFound = True
            m_str_PartID = CStr(RS.Fields("ID"))
            m_str_Msg = "Table NSC_PARTS_USED. ID = " + m_str_PartID
            m_str_Msg = m_str_Msg + ". Data in the ORIG_SUPPLIER_NAME column is NULL."
            lstCleanNSCPTables.AddItem m_str_Msg
            lstCleanNSCPTables.Refresh
            ProgressBar1.Value = ProgressBar1.Value + 1
            If ProgressBar1.Value = ProgressBar1.Max Then
                ProgressBar1.Value = ProgressBar1.Min
            End If
            RS.MoveNext
            DoEvents
        Next l_Count
    End If

    If b_ErrorFound = True Then
        If Not RS Is Nothing Then
            Set RS = Nothing
        End If
        If Not RS_1 Is Nothing Then
            Set RS_1 = Nothing
        End If
        ProgressBar1.Value = ProgressBar1.Min
        m_str_Msg = "Please fix all errors shown above before further processing."
        lblMsg.Caption = m_str_Msg
        MsgBox m_str_Msg
        Exit Sub
    End If
    lblRecFound.Caption = ""
    lblCurrentRecord.Caption = ""
    lblRecordsQty.Caption = ""
    
    '9.8. Checks that fields NON_STOCK_CODED_PARTS.ORIG_SUPPLIER_NAME are not NULLs.
    b_ErrorFound = False
    lstCleanNSCPTables.Clear
    m_str_Msg = "9.8. Checks that fields NON_STOCK_CODED_PARTS.ORIG_SUPPLIER_NAME are "
    m_str_Msg = m_str_Msg + "not NULLs."
    lblMsg.Caption = m_str_Msg
    Set RS = modDBHelper.GetNSCPClean13("CES_INQUIRY.GET_NSCP_CLEAN_13")
    If RS.RecordCount > 0 Then
        ProgressBar1.Value = ProgressBar1.Min
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
            b_ErrorFound = True
            m_str_PartID = CStr(RS.Fields("ID"))
            m_str_Msg = "Table NON_STOCK_CODED_PARTS. ID = " + m_str_PartID
            m_str_Msg = m_str_Msg + ". Data in the ORIG_SUPPLIER_NAME column is NULL."
            lstCleanNSCPTables.AddItem m_str_Msg
            lstCleanNSCPTables.Refresh
            ProgressBar1.Value = ProgressBar1.Value + 1
            If ProgressBar1.Value = ProgressBar1.Max Then
                ProgressBar1.Value = ProgressBar1.Min
            End If
            RS.MoveNext
            DoEvents
        Next l_Count
    End If

    If b_ErrorFound = True Then
        If Not RS Is Nothing Then
            Set RS = Nothing
        End If
        If Not RS_1 Is Nothing Then
            Set RS_1 = Nothing
        End If
        ProgressBar1.Value = ProgressBar1.Min
        m_str_Msg = "Please fix all errors shown above before further processing."
        lblMsg.Caption = m_str_Msg
        MsgBox m_str_Msg
        Exit Sub
    End If
    lblRecFound.Caption = ""
    lblCurrentRecord.Caption = ""
    lblRecordsQty.Caption = ""
    
    '9.9. Checks that fields NSC_PARTS_USED.ORIG_SUPPLIER_NAME do not have only spaces.
    m_str_Msg = "9.9. Checks that fields NSC_PARTS_USED.ORIG_SUPPLIER_NAME do not have "
    m_str_Msg = m_str_Msg + "only spaces."
    lblMsg.Caption = m_str_Msg
    lblMsg.Refresh
    b_ErrorFound = False
    Set RS = modDBHelper.GetNSCPClean5("CES_INQUIRY.GET_NSCP_CLEAN_5")
    If RS.RecordCount > 0 Then
'        ProgressBar1.Value = ProgressBar1.Min
        lblRecordsQty.Caption = CLng(RS.RecordCount)
        lblRecordsQty.Refresh
        lblCurrentRecord.Caption = "0"
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
            lblCurrentRecord.Caption = CLng(l_Count)
            lblCurrentRecord.Refresh
            m_str_EstimateType = ""
            If IsNull(RS.Fields("LINK_TYPE")) = False Then
                m_str_EstimateType = RS.Fields("LINK_TYPE")
            End If
            m_str_EstimateNumber = ""
            If IsNull(RS.Fields("LINK_CODE")) = False Then
                m_str_EstimateNumber = RS.Fields("LINK_CODE")
            End If
            m_str_OrigSupplierName = ""
            If IsNull(RS.Fields("ORIG_SUPPLIER_NAME")) = False Then
                m_str_OrigSupplierName = RS.Fields("ORIG_SUPPLIER_NAME")
                m_str_OrigSupplierName = Trim(m_str_OrigSupplierName)
            End If
            m_str_OrigSupplierNumber = ""
            If IsNull(RS.Fields("ORIG_SUPP_NUM")) = False Then
                m_str_OrigSupplierNumber = RS.Fields("ORIG_SUPP_NUM")
            End If
            m_str_PartID = ""
            If IsNull(RS.Fields("ID")) = False Then
                If IsNumeric(RS.Fields("ID")) = True Then
                    m_str_PartID = RS.Fields("ID")
                End If
            End If
            If m_str_OrigSupplierName = "" Then
                b_ErrorFound = True
                m_str_Msg = "Table NSC_PARTS_USED. "
                m_str_Msg = m_str_Msg + "Est.Type = " + m_str_EstimateType + ". "
                m_str_Msg = m_str_Msg + "Est. Num = " + m_str_EstimateNumber + ". "
                m_str_Msg = m_str_Msg + "ORIG_SUPP_NUM = "
                m_str_Msg = m_str_Msg + m_str_OrigSupplierNumber + ". "
                m_str_Msg = m_str_Msg + "ID = " + m_str_PartID
                m_str_Msg = m_str_Msg + ". Field ORIG_SUPPLIER_NAME has spaces only."
                lstCleanNSCPTables.AddItem m_str_Msg
                lstCleanNSCPTables.Refresh
            End If
'            ProgressBar1.Value = ProgressBar1.Value + 1
'            If ProgressBar1.Value = ProgressBar1.Max Then
'                ProgressBar1.Value = ProgressBar1.Min
'            End If
            RS.MoveNext
            DoEvents
        Next l_Count
    End If
    
    If b_ErrorFound = True Then
        If Not RS Is Nothing Then
            Set RS = Nothing
        End If
        If Not RS_1 Is Nothing Then
            Set RS_1 = Nothing
        End If
'        ProgressBar1.Value = ProgressBar1.Min
        m_str_Msg = "Please fix all errors shown above before further processing."
        lblMsg.Caption = m_str_Msg
        MsgBox m_str_Msg
        Exit Sub
    End If
    lblRecFound.Caption = ""
    lblCurrentRecord.Caption = ""
    lblRecordsQty.Caption = ""
    
    '9.10. Checks that fields NON_STOCK_CODED_PARTS.ORIG_SUPPLIER_NAME do not have only
    '      spaces.
    m_str_Msg = "9.10. Checks that fields NON_STOCK_CODED_PARTS.ORIG_SUPPLIER_NAME do "
    m_str_Msg = m_str_Msg + "not have only spaces."
    lblMsg.Caption = m_str_Msg
    lblMsg.Refresh
    b_ErrorFound = False
    Set RS = modDBHelper.GetNSCPClean7("CES_INQUIRY.GET_NSCP_CLEAN_7")
    If RS.RecordCount > 0 Then
'        ProgressBar1.Value = ProgressBar1.Min
        lblRecordsQty.Caption = CLng(RS.RecordCount)
        lblRecordsQty.Refresh
        lblCurrentRecord.Caption = "0"
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
            lblCurrentRecord.Caption = CLng(l_Count)
            lblCurrentRecord.Refresh
            m_str_OrigSupplierName = ""
            If IsNull(RS.Fields("ORIG_SUPPLIER_NAME")) = False Then
                m_str_OrigSupplierName = RS.Fields("ORIG_SUPPLIER_NAME")
                m_str_OrigSupplierName = Trim(m_str_OrigSupplierName)
            End If
            m_str_OrigSupplierNumber = ""
            If IsNull(RS.Fields("ORIG_SUPPLIER_NUM")) = False Then
                m_str_OrigSupplierNumber = RS.Fields("ORIG_SUPPLIER_NUM")
            End If
            m_str_PartID = ""
            If IsNull(RS.Fields("ID")) = False Then
                If IsNumeric(RS.Fields("ID")) = True Then
                    m_str_PartID = RS.Fields("ID")
                End If
            End If
            If m_str_OrigSupplierNumber = "" Then
                b_ErrorFound = True
                m_str_Msg = "Table NON_STOCK_CODED_PARTS. ID = " + m_str_PartID + ". "
                m_str_Msg = m_str_Msg + "ORIG_SUPPLIER_NUM = "
                m_str_Msg = m_str_Msg + m_str_OrigSupplierNumber + ". "
                m_str_Msg = m_str_Msg + ". Field ORIG_SUPPLIER_NAME has spaces only."
                lstCleanNSCPTables.AddItem m_str_Msg
                lstCleanNSCPTables.Refresh
            End If
'            ProgressBar1.Value = ProgressBar1.Value + 1
'            If ProgressBar1.Value = ProgressBar1.Max Then
'                ProgressBar1.Value = ProgressBar1.Min
'            End If
            RS.MoveNext
            DoEvents
        Next l_Count
    End If
    
    If b_ErrorFound = True Then
        If Not RS Is Nothing Then
            Set RS = Nothing
        End If
        If Not RS_1 Is Nothing Then
            Set RS_1 = Nothing
        End If
'        ProgressBar1.Value = ProgressBar1.Min
        m_str_Msg = "Please fix all errors shown above before further processing."
        lblMsg.Caption = m_str_Msg
        MsgBox m_str_Msg
        Exit Sub
    End If
    lblRecFound.Caption = ""
    lblCurrentRecord.Caption = ""
    lblRecordsQty.Caption = ""
    
    '9.11. Check that combinations of ORIG_SUPPLIER_NUM + ORIG_SUPPLIER_NAME in the
    '      NON_STOCK_CODED_PARTS table are unique.
    m_str_Msg = "9.11. Check that combinations of ORIG_SUPPLIER_NUM + "
    m_str_Msg = m_str_Msg + "ORIG_SUPPLIER_NAME in the NON_STOCK_CODED_PARTS "
    m_str_Msg = m_str_Msg + " table are unique."
    lblMsg.Caption = m_str_Msg
    lblMsg.Refresh
    b_ErrorFound = False
    m_l_Duplications = 0
    lblRecFound.Caption = CStr(m_l_Duplications)
    lblRecFound.Refresh

    Set RS = modDBHelper.GetNSCPClean7("CES_INQUIRY.GET_NSCP_CLEAN_7")
    If RS.RecordCount > 0 Then
        lblRecordsQty.Caption = CLng(RS.RecordCount)
        lblRecordsQty.Refresh
        ProgressBar1.Value = ProgressBar1.Min
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
            lblCurrentRecord.Caption = CLng(l_Count)
            Me.Refresh
            m_str_OrigSupplierNumber = ""
            If IsNull(RS.Fields("ORIG_SUPPLIER_NUM")) = False Then
                m_str_OrigSupplierNumber = RS.Fields("ORIG_SUPPLIER_NUM")
            End If
            m_str_OrigSupplierName = ""
            If IsNull(RS.Fields("ORIG_SUPPLIER_NAME")) = False Then
                m_str_OrigSupplierName = RS.Fields("ORIG_SUPPLIER_NAME")
            End If
            m_str_Cost = ""
            m_str_PartID = CStr(RS.Fields("ID"))

            Set RS_1 = modDBHelper.GetNSCPClean14("CES_INQUIRY.GET_NSCP_CLEAN_14", _
                                                  m_str_OrigSupplierNumber, _
                                                  m_str_OrigSupplierName)
            If RS_1.RecordCount > 1 Then
                b_ErrorFound = True
                m_str_OrigSupplierNumber_1 = ""
                If IsNull(RS_1.Fields("ORIG_SUPPLIER_NUM")) = False Then
                    m_str_OrigSupplierNumber_1 = RS_1.Fields("ORIG_SUPPLIER_NUM")
                End If
                m_str_OrigSupplierName_1 = ""
                If IsNull(RS_1.Fields("ORIG_SUPPLIER_NAME")) = False Then
                    m_str_OrigSupplierName_1 = RS_1.Fields("ORIG_SUPPLIER_NAME")
                End If
                m_str_PartID_1 = CStr(RS_1.Fields("ID"))

                m_str_Msg = "Table NON_STOCK_CODED_PARTS. "
                m_str_Msg = m_str_Msg + "(ORIG_SUPPLIER_NUM+ORIG_SUPPLIER_NAME) "
                m_str_Msg = m_str_Msg + "duplication. "
                m_str_Msg = m_str_Msg + "ORIG_SUPPLIER_NUM = " + m_str_OrigSupplierNumber + ". "
                m_str_Msg = m_str_Msg + "ORIG_SUPPLIER_NAME = " + m_str_OrigSupplierName
                m_str_Msg = m_str_Msg + ". ID = " + m_str_PartID
                m_str_Msg = m_str_Msg + ". Dup. ID = " + m_str_PartID_1

                lstCleanNSCPTables.AddItem m_str_Msg
                lstCleanNSCPTables.Refresh

                m_l_Duplications = m_l_Duplications + 1
                lblRecFound.Caption = CStr(m_l_Duplications)
                lblRecFound.Refresh
            End If
            RS.MoveNext
            ProgressBar1.Value = ProgressBar1.Value + 1
            If ProgressBar1.Value = ProgressBar1.Max Then
                ProgressBar1.Value = ProgressBar1.Min
            End If
            DoEvents
        Next l_Count
    End If
    
    If b_ErrorFound = True Then
        If Not RS Is Nothing Then
            Set RS = Nothing
        End If
        If Not RS_1 Is Nothing Then
            Set RS_1 = Nothing
        End If
        ProgressBar1.Value = ProgressBar1.Min
        m_str_Msg = "Please fix all errors shown above before further processing."
        lblMsg.Caption = m_str_Msg
        MsgBox m_str_Msg
        Exit Sub
    End If
    lblRecFound.Caption = ""
    lblCurrentRecord.Caption = ""
    lblRecordsQty.Caption = ""
    
    '9.12. Check that each record in the NSC_PARTS_USED table has corresponded record
    '      in the NON_STOCK_CODED_PARTS table.
    m_str_Msg = "9.12. Check that each record in the NSC_PARTS_USED table has "
    m_str_Msg = m_str_Msg + "corresponded record in the NON_STOCK_CODED_PARTS table."
    lblMsg.Caption = m_str_Msg
    lblMsg.Refresh
    b_ErrorFound = False
    m_l_Duplications = 0
    lblRecFound.Caption = CStr(m_l_Duplications)

    Set RS = modDBHelper.GetNSCPClean5("CES_INQUIRY.GET_NSCP_CLEAN_5")
    If RS.RecordCount > 0 Then
        lblRecordsQty.Caption = CLng(RS.RecordCount)
        lblRecordsQty.Refresh
        ProgressBar1.Value = ProgressBar1.Min
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
            lblCurrentRecord.Caption = CLng(l_Count)
            Me.Refresh
            m_str_OrigSupplierNumber = ""
            If IsNull(RS.Fields("ORIG_SUPP_NUM")) = False Then
                m_str_OrigSupplierNumber = RS.Fields("ORIG_SUPPLIER_NUM")
            End If
            m_str_OrigSupplierName = ""
            If IsNull(RS.Fields("ORIG_SUPP_NAME")) = False Then
                m_str_OrigSupplierName = RS.Fields("ORIG_SUPPLIER_NAME")
            End If
            m_str_Cost = ""
            m_str_PartID = CStr(RS.Fields("ID"))

            Set RS_1 = modDBHelper.GetNSCPClean15("CES_INQUIRY.GET_NSCP_CLEAN_15", _
                                                  m_str_OrigSupplierNumber, _
                                                  m_str_OrigSupplierName)
            
            If RS_1.RecordCount = 0 Then
                b_ErrorFound = True
                m_str_OrigSupplierNumber_1 = ""
                If IsNull(RS_1.Fields("ORIG_SUPPLIER_NUM")) = False Then
                    m_str_OrigSupplierNumber_1 = RS_1.Fields("ORIG_SUPPLIER_NUM")
                End If
                m_str_OrigSupplierName_1 = ""
                If IsNull(RS_1.Fields("ORIG_SUPPLIER_NAME")) = False Then
                    m_str_OrigSupplierName_1 = RS_1.Fields("ORIG_SUPPLIER_NAME")
                End If
                m_str_PartID_1 = CStr(RS_1.Fields("ID"))

                m_str_Msg = "Table NSC_PARTS_USED. ID = " + m_str_PartID
                m_str_Msg = m_str_Msg + ". Does not have corresponded record in the "
                m_str_Msg = m_str_Msg + "NON_STOCK_CODED_PARTS table."
                
                lstCleanNSCPTables.AddItem m_str_Msg
                lstCleanNSCPTables.Refresh

                m_l_Duplications = m_l_Duplications + 1
                lblRecFound.Caption = CStr(m_l_Duplications)
                lblRecFound.Refresh
                DoEvents
            End If
            RS.MoveNext
            ProgressBar1.Value = ProgressBar1.Value + 1
            If ProgressBar1.Value = ProgressBar1.Max Then
                ProgressBar1.Value = ProgressBar1.Min
            End If
            DoEvents
        Next l_Count
    End If
    
    If b_ErrorFound = True Then
        If Not RS Is Nothing Then
            Set RS = Nothing
        End If
        If Not RS_1 Is Nothing Then
            Set RS_1 = Nothing
        End If
        ProgressBar1.Value = ProgressBar1.Min
        m_str_Msg = "Please fix all errors shown above before further processing."
        lblMsg.Caption = m_str_Msg
        MsgBox m_str_Msg
        Exit Sub
    End If
    lblRecFound.Caption = ""
    lblCurrentRecord.Caption = ""
    lblRecordsQty.Caption = ""
    
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    If Not RS_1 Is Nothing Then
        Set RS_1 = Nothing
    End If
    
    Call SetDefaultCursor
    m_b_InProgress = False
    ProgressBar1.Value = ProgressBar1.Min
    m_str_Msg = "Tables NON_STOCK_CODED_PARTS and NSC_PARTS_USED are cleaned."
    lblMsg.Caption = m_str_Msg
    MsgBox m_str_Msg
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "FinalChecks", Erl
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    If Not RS_1 Is Nothing Then
        Set RS_1 = Nothing
    End If
    ProgressBar1.Value = ProgressBar1.Min
    m_b_InProgress = False
    Call MakeButtonsEnabled(True)
    Call SetDefaultCursor
End Sub

Private Sub cmdStep1_Click()
    'Delete all records from the NSC_PARTS_USED table where ID is NULL.
    
    On Error GoTo Error_Handler

    m_b_InProgress = True
    Call MakeButtonsEnabled(False)
    lblMsg.Caption = "Step 1. " + m_str_const_BePatient
    lblMsg.Refresh
   
    Call SetWaitCursor
    
    lstCleanNSCPTables.Clear
    m_l_Duplications = 0
    lblRecFound.Caption = CStr(m_l_Duplications)
    m_l_Result = modDBHelper.DeleteCleanNSCP1( _
                                        "CES_DELETE.DELETE_CLEAN_NSCP_1", _
                                        m_l_RetVal)
    If m_l_Result = 0 Then
        m_b_1_StepDone = True
        m_str_Msg = "Step 1 is done. You can proceed to Step 2."
        lblMsg.Caption = m_str_Msg
        MsgBox m_str_Msg
    Else
        m_str_Msg = "Step 1 is failed. Stored procedure CES_DELETE.DELETE_CLEAN_NSCP_1 "
        m_str_Msg = m_str_Msg + "proceed to Step 2."
        lblMsg.Caption = m_str_Msg
        MsgBox m_str_Msg
    End If

    m_b_InProgress = False
    Call MakeButtonsEnabled(True)
    Call SetDefaultCursor
    
'Call FinalChecks
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdStep1_Click", Erl
    m_b_InProgress = False
    Call MakeButtonsEnabled(True)
    Call SetDefaultCursor
End Sub

Private Sub cmdStep2_Click()
    'Delete all records from the NON_STOCK_CODED_PARTS table where ID is NULL.
    
    On Error GoTo Error_Handler

    If m_b_1_StepDone = False Then
        MsgBox "Please run Step 1 first."
        Exit Sub
    End If
    
    m_b_InProgress = True
    Call MakeButtonsEnabled(False)
    lblMsg.Caption = "Step 2. " + m_str_const_BePatient
    lblMsg.Refresh
    
    Call SetWaitCursor
    
    lstCleanNSCPTables.Clear
    m_l_Duplications = 0
    lblRecFound.Caption = CStr(m_l_Duplications)
    m_l_Result = modDBHelper.DeleteCleanNSCP2( _
                                        "CES_DELETE.DELETE_CLEAN_NSCP_2", _
                                        m_l_RetVal)

    If m_l_Result = 0 Then
        m_str_Msg = "Step 2 is done. You can proceed to Step 3."
        m_b_2_StepDone = True
        lblMsg.Caption = m_str_Msg
        MsgBox m_str_Msg
    Else
        m_str_Msg = "Step 2 is failed. Further investigation needs to be done before "
        m_str_Msg = m_str_Msg + "proceed to Step 3."
        lblMsg.Caption = m_str_Msg
        MsgBox m_str_Msg
    End If

    m_b_InProgress = False
    Call MakeButtonsEnabled(True)
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdStep2_Click", Erl
    m_b_InProgress = False
    Call MakeButtonsEnabled(True)
    Call SetDefaultCursor
End Sub

Private Sub cmdStep3_Click()
    '3.1. Find all records in the NSC_PARTS_USED table where ORIG_SUPP_NUM is NULL.
    '3.2. If no record(s) found, delete all records from the NON_STOCK_CODED_PARTS
    'table where ORIG_SUPPLIER_NUM is NULL.
    
    Dim RS As ADODB.Recordset
    Dim l_Count As Long
    Dim m_l_Duplications As Long
    
    On Error GoTo Error_Handler
    
    If m_b_2_StepDone = False Then
        MsgBox "Please run Step 2 first."
        Exit Sub
    End If
    
    m_b_InProgress = True
    Call MakeButtonsEnabled(False)
    lblMsg.Caption = "Step 3. " + m_str_const_BePatient
    lblMsg.Refresh
    
    Call SetWaitCursor
    
    lstCleanNSCPTables.Clear
    m_l_Duplications = 0
    lblRecFound.Caption = CStr(m_l_Duplications)
    
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.GetNSCPClean1("CES_INQUIRY.GET_NSCP_CLEAN_1")
    
    If RS.RecordCount > 0 Then
        lblMsg.Caption = "Step 3.1. " + m_str_const_BePatient
        lblMsg.Refresh
        lblRecordsQty.Caption = CLng(RS.RecordCount)
        lblRecordsQty.Refresh
        ProgressBar1.Value = ProgressBar1.Min
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
            lblCurrentRecord.Caption = CLng(l_Count)
            lblCurrentRecord.Refresh
            m_str_EstimateType = ""
            If IsNull(RS.Fields("LINK_TYPE")) = False Then
                m_str_EstimateType = RS.Fields("LINK_TYPE")
            End If
            m_str_EstimateNumber = ""
            If IsNull(RS.Fields("LINK_CODE")) = False Then
                m_str_EstimateNumber = RS.Fields("LINK_CODE")
            End If
            m_str_OrigSupplierName = ""
            If IsNull(RS.Fields("ORIG_SUPPLIER_NAME")) = False Then
                m_str_OrigSupplierName = RS.Fields("ORIG_SUPPLIER_NAME")
            End If
            m_str_PartID = ""
            If IsNull(RS.Fields("ID")) = False Then
                If IsNumeric(RS.Fields("ID")) = True Then
                    m_str_PartID = RS.Fields("ID")
                End If
            End If
            
            m_str_Msg = "Est.Type = " + m_str_EstimateType + ". "
            m_str_Msg = m_str_Msg + "Est. Num = " + m_str_EstimateNumber + ". "
            m_str_Msg = m_str_Msg + "ORIG_SUPPLIER_NAME = "
            m_str_Msg = m_str_Msg + m_str_OrigSupplierName + ". "
            m_str_Msg = m_str_Msg + "Part ID = " + m_str_PartID
            m_str_Msg = m_str_Msg + ". Field ORIG_SUPP_NUM is NULL."
            
            lstCleanNSCPTables.AddItem m_str_Msg
            lstCleanNSCPTables.Refresh
            m_l_Duplications = m_l_Duplications + 1
            lblRecFound.Caption = CStr(m_l_Duplications)
            lblRecFound.Refresh
            ProgressBar1.Value = ProgressBar1.Value + 1
            If ProgressBar1.Value = ProgressBar1.Max Then
                ProgressBar1.Value = ProgressBar1.Min
            End If
            RS.MoveNext
        Next l_Count
        m_str_Msg = "Please fix all estimates shown, before proceed to Step 4."
        lblMsg.Caption = m_str_Msg
        MsgBox m_str_Msg
        m_b_InProgress = False
        Call MakeButtonsEnabled(True)
    Else
        lblMsg.Caption = "Step 3.2. " + m_str_const_BePatient
        lblRecordsQty.Caption = ""
        lblCurrentRecord.Caption = ""
        Me.Refresh
        'DELETE FROM NON_STOCK_CODED_PARTS WHERE ORIG_SUPPLIER_NUM IS NULL
        m_l_Result = modDBHelper.DeleteCleanNSCP3( _
                                            "CES_DELETE.DELETE_CLEAN_NSCP_3", _
                                            m_l_RetVal)
        If m_l_Result = 0 Then
            m_b_3_StepDone = True
            m_str_Msg = "Step 3 is done. You can proceed to Step 4."
            lblMsg.Caption = m_str_Msg
            MsgBox m_str_Msg
        Else
            m_str_Msg = "Step 3 is failed. Further investigation needs to be done "
            m_str_Msg = m_str_Msg + "before proceed to Step 4."
            lblMsg.Caption = m_str_Msg
            MsgBox m_str_Msg
        End If
        m_b_InProgress = False
        Call MakeButtonsEnabled(True)
    End If
    
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    
    lblRecordsQty.Caption = ""
    lblCurrentRecord.Caption = ""
    ProgressBar1.Value = ProgressBar1.Min
    Call MakeButtonsEnabled(True)
    
    Call SetDefaultCursor
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdStep3_Click", Erl
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    m_b_InProgress = False
    lblRecordsQty.Caption = ""
    lblCurrentRecord.Caption = ""
    Call MakeButtonsEnabled(True)
    Call SetDefaultCursor
End Sub

Private Sub cmdStep4_Click()
    '4.1. Find all records in the NSC_PARTS_USED table where ORIG_SUPP_NUM has
    'only spaces.
    '4.2. If no record(s) found, delete all records from the NON_STOCK_CODED_PARTS
    'table where ORIG_SUPPLIER_NUM has only spaces.
    
    Dim RS As ADODB.Recordset
    Dim l_Count As Long
    Dim l_Count1 As Long
    Dim str_Spaces As String
    Dim b_SpaceFound As Boolean
    Dim b_Failed As Boolean
    Dim l_RecQty As Long
    
    On Error GoTo Error_Handler
    
    If m_b_3_StepDone = False Then
        MsgBox "Please run Step 3 first."
        Exit Sub
    End If
    
    m_b_InProgress = True
    Call MakeButtonsEnabled(False)
    lblMsg.Caption = "Step 4. " + m_str_const_BePatient
    lblMsg.Refresh
    
    Call SetWaitCursor
    
    lstCleanNSCPTables.Clear
    m_l_Duplications = 0
    lblRecFound.Caption = CStr(m_l_Duplications)

    Set RS = New ADODB.Recordset
    
    b_SpaceFound = False
    str_Spaces = ""
    For l_Count1 = 1 To 50 'Field NCS_PARTS_USED.ORIG_SUPP_NUM has length = 50
        lblMsg.Caption = "Step 4.1. " + m_str_const_BePatient
        lblMsg.Refresh
        ProgressBar1.Value = ProgressBar1.Min
        str_Spaces = str_Spaces + " "
        Set RS = modDBHelper.GetNSCPClean2("CES_INQUIRY.GET_NSCP_CLEAN_2", str_Spaces)
        If RS.RecordCount > 0 Then
            lblRecordsQty.Caption = CLng(RS.RecordCount)
            lblRecordsQty.Refresh
            b_SpaceFound = True
            RS.MoveFirst
            For l_Count = 1 To RS.RecordCount
                lblCurrentRecord.Caption = CLng(l_Count)
                lblCurrentRecord.Refresh
                m_str_EstimateType = ""
                If IsNull(RS.Fields("LINK_TYPE")) = False Then
                    m_str_EstimateType = RS.Fields("LINK_TYPE")
                End If
                m_str_EstimateNumber = ""
                If IsNull(RS.Fields("LINK_CODE")) = False Then
                    m_str_EstimateNumber = RS.Fields("LINK_CODE")
                End If
                m_str_OrigSupplierName = ""
                If IsNull(RS.Fields("ORIG_SUPPLIER_NAME")) = False Then
                    m_str_OrigSupplierName = RS.Fields("ORIG_SUPPLIER_NAME")
                End If
                m_str_PartID = ""
                If IsNull(RS.Fields("ID")) = False Then
                    If IsNumeric(RS.Fields("ID")) = True Then
                        m_str_PartID = RS.Fields("ID")
                    End If
                End If
                
                m_str_Msg = "Est.Type = " + m_str_EstimateType + ". "
                m_str_Msg = m_str_Msg + "Est. Num = " + m_str_EstimateNumber + ". "
                m_str_Msg = m_str_Msg + "ORIG_SUPPLIER_NAME = "
                m_str_Msg = m_str_Msg + m_str_OrigSupplierName + ". "
                m_str_Msg = m_str_Msg + "Part ID = " + m_str_PartID
                m_str_Msg = m_str_Msg + ". Field ORIG_SUPP_NUM has " + CStr(l_Count1)
                m_str_Msg = m_str_Msg + " spaces only."
                
                lstCleanNSCPTables.AddItem m_str_Msg
                lstCleanNSCPTables.Refresh
                m_l_Duplications = m_l_Duplications + 1
                lblRecFound.Caption = CStr(m_l_Duplications)
                lblRecFound.Refresh
                ProgressBar1.Value = ProgressBar1.Value + 1
                If ProgressBar1.Value = ProgressBar1.Max Then
                    ProgressBar1.Value = ProgressBar1.Min
                End If
                RS.MoveNext
                DoEvents
            Next l_Count
        End If
    Next l_Count1
    
    If b_SpaceFound = False Then
        lblMsg.Caption = "Step 4.2. " + m_str_const_BePatient
        lblMsg.Refresh
        'Delete all records in the NON_STOCK_CODED_PARTS table where ORIG_SUPPLIER_NUM
        'has only spaces.
        str_Spaces = ""
        b_Failed = False
        lblRecordsQty.Caption = "50"
        lblRecordsQty.Refresh
        For l_Count1 = 1 To 50 'Field NON_STOCK_CODED_PARTS.ORIG_SUPPLIER_NUM has length = 50
            lblCurrentRecord.Caption = CLng(l_Count1)
            lblCurrentRecord.Refresh
            str_Spaces = str_Spaces + " "
            m_l_Result = modDBHelper.DeleteCleanNSCP4( _
                                            "CES_DELETE.DELETE_CLEAN_NSCP_4", _
                                            m_l_RetVal, str_Spaces)
    
            If m_l_Result <> 0 Then
                Call SetDefaultCursor
                b_Failed = True
                m_str_Msg = "Step 4.2 is failed. Further investigation needs to be done "
                m_str_Msg = m_str_Msg + "before proceed to Step 5."
                lblMsg.Caption = m_str_Msg
                MsgBox m_str_Msg
                lblRecordsQty.Caption = ""
                lblCurrentRecord.Caption = ""
                m_b_InProgress = False
                Call MakeButtonsEnabled(True)
                Exit Sub
            End If
            ProgressBar1.Value = ProgressBar1.Value + 1
            If ProgressBar1.Value = ProgressBar1.Max Then
                ProgressBar1.Value = ProgressBar1.Min
            End If
            DoEvents
        Next l_Count1
    Else
        ProgressBar1.Value = ProgressBar1.Min
        Call SetDefaultCursor
        m_str_Msg = "Please fix all estimates shown, before proceed to Step 5."
        lblMsg.Caption = m_str_Msg
        MsgBox m_str_Msg
        lblRecordsQty.Caption = ""
        lblCurrentRecord.Caption = ""
        m_b_InProgress = False
        Call MakeButtonsEnabled(True)
        Exit Sub
    End If
    
    m_b_4_StepDone = True
    
    m_b_InProgress = False
    ProgressBar1.Value = ProgressBar1.Min
    Call SetDefaultCursor
    m_str_Msg = "Step 4 is done. You can proceed to Step 5."
    lblMsg.Caption = m_str_Msg
    MsgBox m_str_Msg
    lblRecordsQty.Caption = ""
    lblCurrentRecord.Caption = ""
    Call MakeButtonsEnabled(True)
    
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdStep4_Click", Erl
    m_b_InProgress = False
    ProgressBar1.Value = ProgressBar1.Min
    lblRecordsQty.Caption = ""
    lblCurrentRecord.Caption = ""
    Call MakeButtonsEnabled(True)
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    Call SetDefaultCursor
End Sub

Private Sub cmdStep5_Click()
    '5.1. Find all records in the NSC_PARTS_USED table where ORIG_SUPPLIER_NAME is NULL.
    '5.2. If no record(s) found, delete all records from the NON_STOCK_CODED_PARTS table
    'where ORIG_SUPPLIER_NAME has only spaces.
    
    Dim RS As ADODB.Recordset
    Dim l_Count As Long
    
    On Error GoTo Error_Handler
    
    If m_b_4_StepDone = False Then
        MsgBox "Please run Step 4 first."
        Exit Sub
    End If
    
    m_b_InProgress = True
    Call MakeButtonsEnabled(False)
    lblMsg.Caption = "Step 5. " + m_str_const_BePatient
    Me.Refresh
    
    Call SetWaitCursor
    
    lstCleanNSCPTables.Clear
    m_l_Duplications = 0
    lblRecFound.Caption = CStr(m_l_Duplications)
    
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.GetNSCPClean3("CES_INQUIRY.GET_NSCP_CLEAN_3")

    If RS.RecordCount > 0 Then
        lblMsg.Caption = "Step 5.1. " + m_str_const_BePatient
        ProgressBar1.Value = ProgressBar1.Min
        lblRecordsQty.Caption = CLng(RS.RecordCount)
        lblRecordsQty.Refresh
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
            lblCurrentRecord.Caption = CLng(l_Count)
            lblCurrentRecord.Refresh
            m_str_EstimateType = ""
            If IsNull(RS.Fields("LINK_TYPE")) = False Then
                m_str_EstimateType = RS.Fields("LINK_TYPE")
            End If
            m_str_EstimateNumber = ""
            If IsNull(RS.Fields("LINK_CODE")) = False Then
                m_str_EstimateNumber = RS.Fields("LINK_CODE")
            End If
            m_str_OrigSupplierNumber = ""
            If IsNull(RS.Fields("ORIG_SUPP_NUM")) = False Then
                m_str_OrigSupplierNumber = RS.Fields("ORIG_SUPP_NUM")
            End If
            m_str_PartID = ""
            If IsNull(RS.Fields("ID")) = False Then
                If IsNumeric(RS.Fields("ID")) = True Then
                    m_str_PartID = RS.Fields("ID")
                End If
            End If
            
            m_str_Msg = "Est.Type = " + m_str_EstimateType + ". "
            m_str_Msg = m_str_Msg + "Est. Num = " + m_str_EstimateNumber + ". "
            m_str_Msg = m_str_Msg + "ORIG_SUPP_NUM = " + m_str_OrigSupplierNumber + ". "
            m_str_Msg = m_str_Msg + "Part ID = " + m_str_PartID
            m_str_Msg = m_str_Msg + ". Field ORIG_SUPPLIER_NAME is NULL."
            
            lstCleanNSCPTables.AddItem m_str_Msg
            lstCleanNSCPTables.Refresh
            m_l_Duplications = m_l_Duplications + 1
            lblRecFound.Caption = CStr(m_l_Duplications)
            ProgressBar1.Value = ProgressBar1.Value + 1
            If ProgressBar1.Value = ProgressBar1.Max Then
                ProgressBar1.Value = ProgressBar1.Min
            End If
            RS.MoveNext
            DoEvents
        Next l_Count
        Call SetDefaultCursor
        m_str_Msg = "Please fix all estimates shown, before proceed to Step 6."
        lblMsg.Caption = m_str_Msg
        MsgBox m_str_Msg
        m_b_InProgress = False
        Call MakeButtonsEnabled(True)
    Else
        lblMsg.Caption = "Step 5.2. " + m_str_const_BePatient
        'DELETE FROM NON_STOCK_CODED_PARTS WHERE ORIG_SUPP_NAME IS NULL
        m_l_Result = modDBHelper.DeleteCleanNSCP5( _
                                            "CES_DELETE.DELETE_CLEAN_NSCP_5", _
                                            m_l_RetVal)
    
        If m_l_Result = 0 Then
            Call SetDefaultCursor
            m_b_5_StepDone = True
            m_str_Msg = "Step 5 is done. You can proceed to Step 6."
            lblMsg.Caption = m_str_Msg
            MsgBox m_str_Msg
            m_b_InProgress = False
            Call MakeButtonsEnabled(True)
        Else
            Call SetDefaultCursor
            m_str_Msg = "Step 5.2 is failed. Further investigation needs to be done "
            m_str_Msg = m_str_Msg + "before proceed to Step 6."
            lblMsg.Caption = m_str_Msg
            MsgBox m_str_Msg
            m_b_InProgress = False
            Call MakeButtonsEnabled(True)
        End If
    End If
    
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    
    lblRecordsQty.Caption = ""
    lblCurrentRecord.Caption = ""
    ProgressBar1.Value = ProgressBar1.Min
    m_b_InProgress = False
    Call MakeButtonsEnabled(True)
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdStep5_Click", Erl
    m_b_InProgress = False
    lblRecordsQty.Caption = ""
    lblCurrentRecord.Caption = ""
    ProgressBar1.Value = ProgressBar1.Min
    Call MakeButtonsEnabled(True)
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    Call SetDefaultCursor
End Sub

Private Sub cmdStep6_Click()
    '6.1. Find all records in the NSC_PARTS_USED table where ORIG_SUPPLIER_NAME has only
    'spaces.
    '6.2. If no record(s) found, delete all records from the NON_STOCK_CODED_PARTS table
    'where ORIG_SUPPLIER_NAME has only spaces.
    
    Dim RS As ADODB.Recordset
    Dim l_Count As Long
    Dim l_Count1 As Long
    Dim str_Spaces As String
    Dim b_SpaceFound As Boolean
    Dim b_Failed As Boolean
    
    On Error GoTo Error_Handler
    
    If m_b_5_StepDone = False Then
        MsgBox "Please run Step 5 first."
        Exit Sub
    End If
    
    m_b_InProgress = True
    Call MakeButtonsEnabled(False)
    lblMsg.Caption = "Step 6. " + m_str_const_BePatient
    lblMsg.Refresh
    
    Call SetWaitCursor
    
    lstCleanNSCPTables.Clear
    m_l_Duplications = 0
    lblRecFound.Caption = CStr(m_l_Duplications)

    Set RS = New ADODB.Recordset
    
    b_SpaceFound = False
    str_Spaces = ""
    ProgressBar1.Value = ProgressBar1.Min
    lblMsg.Caption = "Step 6.1. " + m_str_const_BePatient
    For l_Count1 = 1 To 50 'Field NCS_PARTS_USED.ORIG_SUPPLIER_NAME has length = 50
        str_Spaces = str_Spaces + " "
        Set RS = modDBHelper.GetNSCPClean4("CES_INQUIRY.GET_NSCP_CLEAN_4", str_Spaces)
        If RS.RecordCount > 0 Then
            lblRecordsQty.Caption = CLng(RS.RecordCount)
            lblRecordsQty.Refresh
            b_SpaceFound = True
            RS.MoveFirst
            For l_Count = 1 To RS.RecordCount
                lblCurrentRecord.Caption = CLng(l_Count)
                lblCurrentRecord.Refresh
                m_str_EstimateType = ""
                If IsNull(RS.Fields("LINK_TYPE")) = False Then
                    m_str_EstimateType = RS.Fields("LINK_TYPE")
                End If
                m_str_EstimateNumber = ""
                If IsNull(RS.Fields("LINK_CODE")) = False Then
                    m_str_EstimateNumber = RS.Fields("LINK_CODE")
                End If
                m_str_OrigSupplierNumber = ""
                If IsNull(RS.Fields("ORIG_SUPP_NUM")) = False Then
                    m_str_OrigSupplierNumber = RS.Fields("ORIG_SUPP_NUM")
                End If
                m_str_PartID = ""
                If IsNull(RS.Fields("ID")) = False Then
                    If IsNumeric(RS.Fields("ID")) = True Then
                        m_str_PartID = RS.Fields("ID")
                    End If
                End If
                
                m_str_Msg = "Est.Type = " + m_str_EstimateType + ". "
                m_str_Msg = m_str_Msg + "Est. Num = " + m_str_EstimateNumber + ". "
                m_str_Msg = m_str_Msg + "ORIG_SUPPLIER_NUM = "
                m_str_Msg = m_str_Msg + m_str_OrigSupplierNumber + ". "
                m_str_Msg = m_str_Msg + "Part ID = " + m_str_PartID + "."
                m_str_Msg = m_str_Msg + "Field ORIG_SUPPLIER_NAME has " + CStr(l_Count1)
                m_str_Msg = m_str_Msg + " spaces only."
                
                lstCleanNSCPTables.AddItem m_str_Msg
                lstCleanNSCPTables.Refresh
                m_l_Duplications = m_l_Duplications + 1
                lblRecFound.Caption = CStr(m_l_Duplications)
                lblRecFound.Refresh
                ProgressBar1.Value = ProgressBar1.Value + 1
                If ProgressBar1.Value = ProgressBar1.Max Then
                    ProgressBar1.Value = ProgressBar1.Min
                End If
                RS.MoveNext
                DoEvents
            Next l_Count
        End If
    Next l_Count1
    
    If b_SpaceFound = False Then
        'Delete all records in the NON_STOCK_CODED_PARTS table where ORIG_SUPPLIER_NAME
        'has only spaces.
        str_Spaces = ""
        b_Failed = False
        lblRecordsQty.Caption = "50"
        lblRecordsQty.Refresh
        lblMsg.Caption = "Step 6.2. " + m_str_const_BePatient
        For l_Count1 = 1 To 50 'Field NON_STOCK_CODED_PARTS.ORIG_SUPPLIER_NAME has length = 50
            lblCurrentRecord.Caption = CLng(l_Count1)
            lblCurrentRecord.Refresh
            str_Spaces = str_Spaces + " "
            m_l_Result = modDBHelper.DeleteCleanNSCP6( _
                                            "CES_DELETE.DELETE_CLEAN_NSCP_6", _
                                            m_l_RetVal, str_Spaces)
            If m_l_Result <> 0 Then
                Call SetDefaultCursor
                b_Failed = True
                m_str_Msg = "Step 6.2 is failed. Further investigation needs to be done "
                m_str_Msg = m_str_Msg + "before proceed to Step 7."
                lblMsg.Caption = m_str_Msg
                MsgBox m_str_Msg
                lblRecordsQty.Caption = ""
                lblCurrentRecord.Caption = ""
                m_b_InProgress = False
                ProgressBar1.Value = ProgressBar1.Min
                Call MakeButtonsEnabled(True)
                Exit Sub
            End If
            ProgressBar1.Value = ProgressBar1.Value + 1
            If ProgressBar1.Value = ProgressBar1.Max Then
                ProgressBar1.Value = ProgressBar1.Min
            End If
        Next l_Count1
        DoEvents
    Else
        Call SetDefaultCursor
        m_str_Msg = "Please fix all estimates shown, before proceed to Step 7."
        lblMsg.Caption = m_str_Msg
        MsgBox m_str_Msg
        m_b_InProgress = False
        Call MakeButtonsEnabled(True)
        Exit Sub
    End If
    
    ProgressBar1.Value = ProgressBar1.Min
    m_b_6_StepDone = True
    m_str_Msg = "Step 6 is done. You can proceed to Step 7. "
    lblMsg.Caption = m_str_Msg
    lblRecordsQty.Caption = ""
    lblCurrentRecord.Caption = ""
    
    Call SetDefaultCursor
    m_str_Msg = "Before run Step 7,  you should create table NON_STOCK_CODED_PARTS_TEMP "
    m_str_Msg = m_str_Msg + "exact the same as table NON_STOCK_CODED_PARTS."
    MsgBox m_str_Msg
    
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    
    m_b_InProgress = False
    Call MakeButtonsEnabled(True)
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdStep6_Click", Erl
    m_b_InProgress = False
    lblRecordsQty.Caption = ""
    lblCurrentRecord.Caption = ""
    ProgressBar1.Value = ProgressBar1.Min
    Call MakeButtonsEnabled(True)
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    Call SetDefaultCursor
End Sub

Private Sub cmdStep7_Click()
    '7.1. Find all records in the NSC_PARTS_USED table where combination
    '     ORIG_SUPP_NUM + ORIG_SUPPLIER_NAME is duplicated.
    '7.2. Once no duplicate records are found in NSC_PARTS_USED table. For each part
    '     in the NSC_PARTS_USED table, find the corresponded part in the
    '     NON_STOCK_CODED_PARTS table and move it into the NON_STOCK_CODED_PARTS_TEMP
    '     table. Once the part is moved, it is deleted from the NON_STOCK_CODED_PARTS
    '     table.
    
    
    Dim RS As ADODB.Recordset
    Dim RS_1 As ADODB.Recordset
    Dim l_Count As Long
    Dim l_Count1 As Long
    
    On Error GoTo Error_Handler
    
    If m_b_6_StepDone = False Then
        MsgBox "Please run Step 6 first."
        Exit Sub
    End If
    
    m_str_Msg = "Before run Step 7, you should create table NON_STOCK_CODED_PARTS_TEMP "
    m_str_Msg = m_str_Msg + "exact the same as table NON_STOCK_CODED_PARTS. "
    m_str_Msg = m_str_Msg + "Is this table created?"
    m_l_Result = MsgBox(m_str_Msg, vbYesNo + vbExclamation)
    If m_l_Result = vbNo Then
        m_str_Msg = "When NON_STOCK_CODED_PARTS_TEMP table will be created you "
        m_str_Msg = m_str_Msg + "can run Step 7 again."
        MsgBox m_str_Msg
        Exit Sub
    End If
    
    m_b_InProgress = True
    Call MakeButtonsEnabled(False)
    lstCleanNSCPTables.Clear
    lblMsg.Caption = "Step 7. " + m_str_const_BePatient
    lblMsg.Refresh
    
    Call SetWaitCursor
    
    m_l_Duplications = 0
    lblRecFound.Caption = CStr(m_l_Duplications)

    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.GetNSCPClean5("CES_INQUIRY.GET_NSCP_CLEAN_5")
    
    Set RS_1 = New ADODB.Recordset
    Set RS_1 = modDBHelper.GetNSCPClean5("CES_INQUIRY.GET_NSCP_CLEAN_5")
    
    If RS.RecordCount > 0 Then
        lblMsg.Caption = "Step 7.1. " + m_str_const_BePatient
        lblRecordsQty.Caption = CLng(RS.RecordCount)
        lblRecordsQty.Refresh
        ProgressBar1.Value = ProgressBar1.Min
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
            lblCurrentRecord.Caption = CLng(l_Count)
            Me.Refresh
            m_str_OrigSupplierNumber = ""
            If IsNull(RS.Fields("ORIG_SUPP_NUM")) = False Then
                m_str_OrigSupplierNumber = RS.Fields("ORIG_SUPP_NUM")
            End If
            m_str_OrigSupplierName = ""
            If IsNull(RS.Fields("ORIG_SUPPLIER_NAME")) = False Then
                m_str_OrigSupplierName = RS.Fields("ORIG_SUPPLIER_NAME")
            End If
            m_str_Cost = ""
            If IsNull(RS.Fields("COST")) = False Then
                m_str_Cost = CStr(RS.Fields("COST"))
            End If
            m_str_EstimateType = ""
            If IsNull(RS.Fields("LINK_TYPE")) = False Then
                m_str_EstimateType = RS.Fields("LINK_TYPE")
            End If
            m_str_EstimateNumber = ""
            If IsNull(RS.Fields("LINK_CODE")) = False Then
                m_str_EstimateNumber = RS.Fields("LINK_CODE")
            End If
            m_str_PartID = CStr(RS.Fields("ID"))

            RS_1.MoveFirst
            RS_1.Move l_Count ' + 1
            For l_Count1 = l_Count To RS_1.RecordCount - 1
                m_str_OrigSupplierNumber_1 = ""
                If IsNull(RS_1.Fields("ORIG_SUPP_NUM")) = False Then
                    m_str_OrigSupplierNumber_1 = RS_1.Fields("ORIG_SUPP_NUM")
                End If
                m_str_OrigSupplierName_1 = ""
                If IsNull(RS_1.Fields("ORIG_SUPPLIER_NAME")) = False Then
                    m_str_OrigSupplierName_1 = RS_1.Fields("ORIG_SUPPLIER_NAME")
                End If
                m_str_Cost_1 = ""
                If IsNull(RS_1.Fields("COST")) = False Then
                    m_str_Cost_1 = CStr(RS_1.Fields("COST"))
                End If
                m_str_EstimateType_1 = ""
                If IsNull(RS_1.Fields("LINK_TYPE")) = False Then
                    m_str_EstimateType_1 = RS_1.Fields("LINK_TYPE")
                End If
                m_str_EstimateNumber_1 = ""
                If IsNull(RS_1.Fields("LINK_CODE")) = False Then
                    m_str_EstimateNumber_1 = RS_1.Fields("LINK_CODE")
                End If
                m_str_PartID_1 = CStr(RS_1.Fields("ID"))

                If m_str_OrigSupplierNumber = m_str_OrigSupplierNumber_1 And _
                   m_str_OrigSupplierName = m_str_OrigSupplierName_1 And _
                   m_str_PartID <> m_str_PartID_1 Then
                    m_l_Duplications = m_l_Duplications + 1

                    m_str_Msg = "ORIG_SUPPLIER_NUM = "
                    m_str_Msg = m_str_Msg + m_str_OrigSupplierNumber + ". "
                    m_str_Msg = m_str_Msg + "ORIG_SUPPLIER_NAME = "
                    m_str_Msg = m_str_Msg + m_str_OrigSupplierName
                    m_str_Msg = m_str_Msg + ". " + "COST = " + m_str_Cost
                    m_str_Msg = m_str_Msg + ". COST 1 = " + m_str_Cost_1
                    m_str_Msg = m_str_Msg + ". Est. Type = " + m_str_EstimateType
                    m_str_Msg = m_str_Msg + ". Est. Type 1 = " + m_str_EstimateType_1
                    m_str_Msg = m_str_Msg + ". Est. # = " + m_str_EstimateNumber
                    m_str_Msg = m_str_Msg + ". Est. # 1 = " + m_str_EstimateNumber_1
                    m_str_Msg = m_str_Msg + ". ID = " + m_str_PartID
                    m_str_Msg = m_str_Msg + ". Dup. ID = " + m_str_PartID_1

                    lstCleanNSCPTables.AddItem m_str_Msg
                    lstCleanNSCPTables.Refresh

                    lblRecFound.Caption = CStr(m_l_Duplications)
                    lblRecFound.Refresh
                End If
                RS_1.MoveNext
                DoEvents
            Next l_Count1
            RS.MoveNext
            ProgressBar1.Value = ProgressBar1.Value + 1
            If ProgressBar1.Value = ProgressBar1.Max Then
                ProgressBar1.Value = ProgressBar1.Min
            End If
            DoEvents
        Next l_Count
    End If
    
    ProgressBar1.Value = ProgressBar1.Min
    If m_l_Duplications > 0 Then
        Call SetDefaultCursor
        m_str_Msg = "Please fix all estimates shown, before proceed to Step 8."
        lblMsg.Caption = m_str_Msg
        MsgBox m_str_Msg
        m_b_InProgress = False
        Call MakeButtonsEnabled(True)
        Exit Sub
    ElseIf m_l_Duplications = 0 Then
        lblRecFound.Caption = ""
        lstCleanNSCPTables.Clear
        lblMsg.Caption = "Step 7.2. " + m_str_const_BePatient
        'No duplication was found.
        'Delete all data from the NON_STOCK_CODED_PARTS_TEMP table.
        Call SetWaitCursor
        m_l_Result = modDBHelper.DeleteCleanNSCP7( _
                                            "CES_DELETE.DELETE_CLEAN_NSCP_7", _
                                            m_l_RetVal)
        If m_l_Result <> 0 Then
            Call SetDefaultCursor
            m_str_Msg = "Unable delete records from the NON_STOCK_CODED_PARTS_TEMP table."
            lblMsg.Caption = m_str_Msg
            MsgBox m_str_Msg
            m_b_InProgress = False
            Call MakeButtonsEnabled(True)
            Exit Sub
        End If
        
        Set RS = modDBHelper.GetNSCPClean5("CES_INQUIRY.GET_NSCP_CLEAN_5")
        If RS.RecordCount > 0 Then
            lblRecordsQty.Caption = CLng(RS.RecordCount)
            lblRecordsQty.Refresh
            ProgressBar1.Value = ProgressBar1.Min
            For l_Count = 1 To RS.RecordCount
                lblCurrentRecord = CLng(l_Count)
                lblCurrentRecord.Refresh
                If IsNumeric(RS.Fields("ID")) = True Then
                    m_l_PartID = CLng(RS.Fields("ID"))
                    Set RS_1 = modDBHelper.GetNSCPClean6("CES_INQUIRY.GET_NSCP_CLEAN_6", _
                                                         m_l_PartID)
                    If RS_1.RecordCount = 0 Then
                        'Insert record into the NON_STOCK_CODED_PARTS_TEMP table, and
                        'delete this record from the NON_STOCK_CODED_PARTS table.
                        m_l_Result = modDBHelper.UpdateCleanNSCP1( _
                                                            "CES_UPDATE.UPDATE_NSCP_CLEAN_1", _
                                                            m_l_RetVal, _
                                                            m_l_PartID)
                        If m_l_Result <> 0 Then
                            'SP CES_UPDATE.UPDATE_NSCP_CLEAN_1 is failed.
                            '
                            '
                        End If
                    End If
                End If
                ProgressBar1.Value = ProgressBar1.Value + 1
                If ProgressBar1.Value = ProgressBar1.Max Then
                    ProgressBar1.Value = ProgressBar1.Min
                End If
                RS.MoveNext
                DoEvents
            Next l_Count
        End If
    End If
    
    ProgressBar1.Value = ProgressBar1.Min
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    If Not RS_1 Is Nothing Then
        Set RS_1 = Nothing
    End If
    
    lblCurrentRecord.Caption = ""
    lblRecordsQty.Caption = ""
    m_b_7_StepDone = True
    m_str_Msg = "Step 7 is done. You can proceed to Step 8. "
    lblMsg.Caption = m_str_Msg
    MsgBox m_str_Msg
    m_b_InProgress = False
    Call MakeButtonsEnabled(True)
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdStep7_Click", Erl
    m_b_InProgress = False
    ProgressBar1.Value = ProgressBar1.Min
    lblCurrentRecord.Caption = ""
    lblRecordsQty.Caption = ""
    Call MakeButtonsEnabled(True)
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    If Not RS_1 Is Nothing Then
        Set RS_1 = Nothing
    End If
End Sub

Private Sub cmdStep8_Click()
    'Go through each record in the NON_STOCK_CODED_PARTS table. If there are multiple
    'parts with the same ORIG_SUPPLIER_NUM + ORIG_SUPPLIER_NAME, only the first record
    'is copied into the NON_STOCK_CODED_PARTS_TEMP table. If the record is unique, then
    'it is copied straight into the NON_STOCK_CODED_PARTS_TEMP table. After each record
    'is processed it is subsequently deleted from the NON_STOCK_CODED_PARTS table. Once
    'completed, all records from the NON_STOCK_CODED_PARTS_TEMP are moved into the
    'NON_STOCK_CODED_PARTS table. Finally, all records from the NON_STOCK_CODED_PARTS
    'will be deleted.
    
    Dim RS As ADODB.Recordset
    Dim RS_1 As ADODB.Recordset
    Dim l_Count As Long
    
    On Error GoTo Error_Handler
    
    If m_b_7_StepDone = False Then
        MsgBox "Please run Step 7 first."
        Exit Sub
    End If
    m_b_InProgress = True
    Call MakeButtonsEnabled(True)
    lblMsg.Caption = "Step 8. " + m_str_const_BePatient
    lstCleanNSCPTables.Clear
    m_l_Duplications = 0
    lblRecFound.Caption = CStr(m_l_Duplications)
    lblRecFound.Refresh
    
    Call SetWaitCursor
    

    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.GetNSCPClean7("CES_INQUIRY.GET_NSCP_CLEAN_7")
    Set RS_1 = New ADODB.Recordset
    If RS.RecordCount > 0 Then
        lblRecordsQty.Caption = CLng(RS.RecordCount)
        lblRecordsQty.Refresh
        ProgressBar1.Value = ProgressBar1.Min
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
            lblCurrentRecord.Caption = CLng(l_Count)
            lblCurrentRecord.Refresh
            m_str_OrigSupplierNumber = ""
            If IsNull(RS.Fields("ORIG_SUPPLIER_NUM")) = False Then
                m_str_OrigSupplierNumber = RS.Fields("ORIG_SUPPLIER_NUM")
            End If
            m_str_OrigSupplierName = ""
            If IsNull(RS.Fields("ORIG_SUPPLIER_NAME")) = False Then
                m_str_OrigSupplierName = RS.Fields("ORIG_SUPPLIER_NAME")
            End If
            If IsNumeric(RS.Fields("ID")) = True Then
                m_l_PartID = CLng(RS.Fields("ID"))
                Set RS_1 = modDBHelper.GetNSCPClean8("CES_INQUIRY.GET_NSCP_CLEAN_8", _
                                                     m_str_OrigSupplierNumber, _
                                                     m_str_OrigSupplierName)
                If RS_1.RecordCount = 0 Then
                    'Insert record into the NON_STOCK_CODED_PARTS_TEMP table, and
                    'delete this record from the NON_STOCK_CODED_PARTS table.
                    m_l_Result = modDBHelper.UpdateCleanNSCP1( _
                                                    "CES_UPDATE.UPDATE_NSCP_CLEAN_1", _
                                                    m_l_RetVal, _
                                                    m_l_PartID)
                    If m_l_Result <> 0 Then
                        'SP CES_UPDATE.UPDATE_NSCP_CLEAN_1 is failed.
                        '
                        '
                    End If
                End If
            End If
            RS.MoveNext
            ProgressBar1.Value = ProgressBar1.Value + 1
            If ProgressBar1.Value = ProgressBar1.Max Then
                ProgressBar1.Value = ProgressBar1.Min
            End If
            DoEvents
        Next l_Count
    End If

    'Delete all records from the NON_STOCK_CODED_PARTS table.
    'Move all records from the NON_STOCK_CODED_PARTS_TEMP table into the
    'NON_STOCK_CODED_PARTS table.
    'Delete all records from the NON_STOCK_CODED_PARTS_TEMP table.
    m_l_Result = modDBHelper.UpdateCleanNSCP2( _
                                        "CES_UPDATE.UPDATE_NSCP_CLEAN_2", _
                                        m_l_RetVal)
    If m_l_Result <> 0 Then
        ProgressBar1.Value = ProgressBar1.Min
        Call SetDefaultCursor
        m_b_8_StepDone = False
        m_str_Msg = "Updating NON_STOCK_CODED_PARTS table is failed."
        m_str_Msg = m_str_Msg + "Further investigation needs to be done before "
        m_str_Msg = m_str_Msg + "proceed to Step 9."
        lblMsg.Caption = m_str_Msg
        MsgBox m_str_Msg
        
        lblRecordsQty.Caption = ""
        lblCurrentRecord.Caption = ""
        
        m_b_InProgress = False
        Call MakeButtonsEnabled(True)
        
        If Not RS Is Nothing Then
            Set RS = Nothing
        End If
        If Not RS_1 Is Nothing Then
            Set RS_1 = Nothing
        End If
        Exit Sub
    End If

    ProgressBar1.Value = ProgressBar1.Min
    Call SetDefaultCursor
    m_b_8_StepDone = True
    
    lblRecordsQty.Caption = ""
    lblCurrentRecord.Caption = ""
    
    m_b_InProgress = False
    Call MakeButtonsEnabled(True)
    
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    If Not RS_1 Is Nothing Then
        Set RS_1 = Nothing
    End If

    Call FinalChecks

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdStep8_Click", Erl
    m_b_InProgress = False
    lblRecordsQty.Caption = ""
    lblCurrentRecord.Caption = ""
    ProgressBar1.Value = ProgressBar1.Min
    Call MakeButtonsEnabled(True)
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    If Not RS_1 Is Nothing Then
        Set RS_1 = Nothing
    End If
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler
    
    'Set the window style to 'Layered'. Set the opacity of the window.
    Call modMain.SetWindowLayered(Me)

    m_b_1_StepDone = False
    m_b_2_StepDone = False
    m_b_3_StepDone = False
    m_b_4_StepDone = False
    m_b_5_StepDone = False
    m_b_6_StepDone = False
    m_b_7_StepDone = False
    m_b_8_StepDone = False

    Call modMain.SetTopmost(Me, True)

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", Erl
    Call SetDefaultCursor
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler

    If m_b_InProgress = True Then
        Cancel = True
    Else
        Call modMain.ChangeOpasityLayeredForm(Me, Me.Timer1, 255, 0, -5)
        Call SetDefaultCursor
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Timer1_Timer()
    On Error GoTo Error_Handler
    
    Call modMain.ChangeOpasityLayeredForm(Me, Me.Timer1, 0, 255, 5)
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Timer1_Timer", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub MakeButtonsEnabled(ByVal b_Flag As Boolean)
    On Error GoTo Error_Handler
    
    If b_Flag = True Then
        cmdStep1.Enabled = True
        cmdStep2.Enabled = True
        cmdStep3.Enabled = True
        cmdStep4.Enabled = True
        cmdStep5.Enabled = True
        cmdStep6.Enabled = True
        cmdStep7.Enabled = True
        cmdStep8.Enabled = True
        If m_b_1_StepDone = True Then
            cmdStep1.Enabled = False
            cmdStep1.Caption = "Done"
        End If
        If m_b_2_StepDone = True Then
            cmdStep2.Enabled = False
            cmdStep2.Caption = "Done"
        End If
        If m_b_3_StepDone = True Then
            cmdStep3.Enabled = False
            cmdStep3.Caption = "Done"
        End If
        If m_b_4_StepDone = True Then
            cmdStep4.Enabled = False
            cmdStep4.Caption = "Done"
        End If
        If m_b_5_StepDone = True Then
            cmdStep5.Enabled = False
            cmdStep5.Caption = "Done"
        End If
        If m_b_6_StepDone = True Then
            cmdStep6.Enabled = False
            cmdStep6.Caption = "Done"
        End If
        If m_b_7_StepDone = True Then
            cmdStep7.Enabled = False
            cmdStep7.Caption = "Done"
        End If
        If m_b_8_StepDone = True Then
            cmdStep8.Enabled = False
            cmdStep8.Caption = "Done"
        End If
    Else
        cmdStep1.Enabled = False
        cmdStep2.Enabled = False
        cmdStep3.Enabled = False
        cmdStep4.Enabled = False
        cmdStep5.Enabled = False
        cmdStep6.Enabled = False
        cmdStep7.Enabled = False
        cmdStep8.Enabled = False
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Timer1_Timer", g_l_ErrorLineNumber
End Sub

frmVehCostEstimateMain.frm :
VERSION 5.00
Object = "{0D452EE1-E08F-101A-852E-02608C4D0BB4}#2.0#0"; "FM20.DLL"
Object = "{CDE57A40-8B86-11D0-B3C6-00A0C90AEA82}#1.0#0"; "msdatgrd.ocx"
Object = "{F0D2F211-CCB0-11D0-A316-00AA00688B10}#1.0#0"; "Msdatlst.ocx"
Object = "{831FDD16-0C5C-11D2-A9FC-0000F8754DA1}#2.0#0"; "MSCOMCTL.OCX"
Begin VB.Form frmVehCostEstimateMain 
   BackColor       =   &H80000004&
   BorderStyle     =   1  'Fixed Single
   Caption         =   "Vehicle Cost Estimate"
   ClientHeight    =   9960
   ClientLeft      =   150
   ClientTop       =   150
   ClientWidth     =   9270
   FillStyle       =   0  'Solid
   Icon            =   "frmVehCostEstimateMain.frx":0000
   LinkTopic       =   "Form6"
   MDIChild        =   -1  'True
   ScaleHeight     =   9960
   ScaleWidth      =   9270
   ShowInTaskbar   =   0   'False
   Begin VB.CommandButton cmdRefresh 
      Caption         =   "Refresh"
      Height          =   510
      Left            =   105
      TabIndex        =   41
      Top             =   9420
      Width           =   9075
   End
   Begin VB.Frame Frame3 
      Height          =   1215
      Left            =   5280
      TabIndex        =   33
      Top             =   8160
      Width           =   3915
      Begin MSForms.TextBox txtTotalVehicleCostWithTax 
         Height          =   315
         Left            =   2040
         TabIndex        =   39
         Top             =   840
         Width           =   1815
         VariousPropertyBits=   746604569
         BackColor       =   -2147483624
         Size            =   "3201;556"
         SpecialEffect   =   6
         FontEffects     =   1073750016
         FontHeight      =   165
         FontCharSet     =   0
         FontPitchAndFamily=   2
         ParagraphAlign  =   2
      End
      Begin VB.Label lblTotalVehicleCostWithTax 
         Alignment       =   1  'Right Justify
         Caption         =   "Total Vehicle Cost with Tax"
         Height          =   255
         Left            =   60
         TabIndex        =   38
         Top             =   900
         Width           =   1935
      End
      Begin MSForms.TextBox txtTaxTotal 
         Height          =   315
         Left            =   2040
         TabIndex        =   37
         Top             =   480
         Width           =   1815
         VariousPropertyBits=   746604569
         Size            =   "3201;556"
         SpecialEffect   =   6
         FontEffects     =   1073750016
         FontHeight      =   165
         FontCharSet     =   0
         FontPitchAndFamily=   2
         ParagraphAlign  =   2
      End
      Begin VB.Label lblTaxTotal 
         Alignment       =   1  'Right Justify
         Caption         =   "Tax Total"
         Height          =   255
         Left            =   1260
         TabIndex        =   36
         Top             =   540
         Width           =   705
      End
      Begin MSForms.TextBox txtTotalVehicleCost 
         Height          =   315
         Left            =   2040
         TabIndex        =   35
         Top             =   120
         Width           =   1815
         VariousPropertyBits=   746604569
         BackColor       =   -2147483624
         Size            =   "3201;556"
         SpecialEffect   =   6
         FontEffects     =   1073750016
         FontHeight      =   165
         FontCharSet     =   0
         FontPitchAndFamily=   2
         ParagraphAlign  =   2
      End
      Begin VB.Label lblTotalBusCost 
         Alignment       =   1  'Right Justify
         Caption         =   "Total Vehicle Cost"
         Height          =   255
         Left            =   600
         TabIndex        =   34
         Top             =   180
         Width           =   1365
      End
   End
   Begin VB.Frame Frame2 
      Height          =   1215
      Left            =   5280
      TabIndex        =   26
      Top             =   6960
      Width           =   3915
      Begin MSForms.TextBox txtLabourTotal 
         Height          =   315
         Left            =   2040
         TabIndex        =   32
         Top             =   840
         Width           =   1815
         VariousPropertyBits=   746604569
         Size            =   "3201;556"
         SpecialEffect   =   6
         FontEffects     =   1073750016
         FontHeight      =   165
         FontCharSet     =   0
         FontPitchAndFamily=   2
         ParagraphAlign  =   2
      End
      Begin VB.Label lblLabourTotal 
         Alignment       =   1  'Right Justify
         Caption         =   "Labour Total"
         Height          =   255
         Left            =   1020
         TabIndex        =   31
         Top             =   900
         Width           =   945
      End
      Begin MSForms.TextBox txtLabourOverheadAmount 
         Height          =   315
         Left            =   2040
         TabIndex        =   30
         Top             =   480
         Width           =   1815
         VariousPropertyBits=   746604569
         Size            =   "3201;556"
         SpecialEffect   =   6
         FontEffects     =   1073750016
         FontHeight      =   165
         FontCharSet     =   0
         FontPitchAndFamily=   2
         ParagraphAlign  =   2
      End
      Begin VB.Label lblLabourOverheadAmount 
         Alignment       =   1  'Right Justify
         Caption         =   "Labour Overhead Total"
         Height          =   255
         Left            =   120
         TabIndex        =   29
         Top             =   540
         Width           =   1845
      End
      Begin MSForms.TextBox txtLabourSubtotal 
         Height          =   315
         Left            =   2040
         TabIndex        =   28
         Top             =   120
         Width           =   1815
         VariousPropertyBits=   746604569
         Size            =   "3201;556"
         SpecialEffect   =   6
         FontEffects     =   1073750016
         FontHeight      =   165
         FontCharSet     =   0
         FontPitchAndFamily=   2
         ParagraphAlign  =   2
      End
      Begin VB.Label lblLabourSubtotal 
         Alignment       =   1  'Right Justify
         Caption         =   "Labour Subtotal"
         Height          =   255
         Left            =   720
         TabIndex        =   27
         Top             =   180
         Width           =   1245
      End
   End
   Begin VB.Frame Frame1 
      Height          =   1575
      Left            =   5280
      TabIndex        =   17
      Top             =   5400
      Width           =   3915
      Begin MSDataListLib.DataCombo cboOEMKitsList 
         Height          =   315
         Left            =   2040
         TabIndex        =   19
         Top             =   120
         Width           =   1815
         _ExtentX        =   3201
         _ExtentY        =   556
         _Version        =   393216
         Style           =   2
         Text            =   ""
      End
      Begin MSForms.TextBox txtMaterialTotal 
         Height          =   315
         Left            =   2040
         TabIndex        =   25
         Top             =   1200
         Width           =   1815
         VariousPropertyBits=   746604569
         Size            =   "3201;556"
         SpecialEffect   =   6
         FontEffects     =   1073750016
         FontHeight      =   165
         FontCharSet     =   0
         FontPitchAndFamily=   2
         ParagraphAlign  =   2
      End
      Begin VB.Label lblMaterialsTotal 
         Alignment       =   1  'Right Justify
         Caption         =   "Materials Total (Excl. Tax)"
         Height          =   255
         Left            =   120
         TabIndex        =   24
         Top             =   1260
         Width           =   1845
      End
      Begin MSForms.TextBox txtOEMKitsTotal 
         Height          =   315
         Left            =   2040
         TabIndex        =   23
         Top             =   840
         Width           =   1815
         VariousPropertyBits=   746604569
         BackColor       =   16777215
         Size            =   "3201;556"
         SpecialEffect   =   6
         FontEffects     =   1073750016
         FontHeight      =   165
         FontCharSet     =   0
         FontPitchAndFamily=   2
         ParagraphAlign  =   2
      End
      Begin VB.Label lblOEMKitPrice 
         Alignment       =   1  'Right Justify
         Caption         =   "OEM Kits Total (Excl. Tax) "
         Height          =   255
         Left            =   120
         TabIndex        =   22
         Top             =   900
         Width           =   1905
      End
      Begin MSForms.TextBox txtSelectedKitCost 
         Height          =   315
         Left            =   2040
         TabIndex        =   21
         Top             =   480
         Width           =   1815
         VariousPropertyBits=   746604569
         Size            =   "3201;556"
         Value           =   "$0.00"
         SpecialEffect   =   6
         FontEffects     =   1073750016
         FontHeight      =   165
         FontCharSet     =   0
         FontPitchAndFamily=   2
         ParagraphAlign  =   2
      End
      Begin VB.Label lblSelectedKitCost 
         Alignment       =   1  'Right Justify
         Caption         =   "Selected Kit Cost"
         Height          =   255
         Left            =   600
         TabIndex        =   20
         Top             =   540
         Width           =   1365
      End
      Begin VB.Label lblOEMKitsAttached 
         Alignment       =   1  'Right Justify
         Caption         =   "OEM Kits Attached "
         Height          =   255
         Left            =   420
         TabIndex        =   18
         Top             =   180
         Width           =   1545
      End
   End
   Begin VB.ComboBox cboChangesMadeBy 
      Height          =   315
      Left            =   2865
      Style           =   2  'Dropdown List
      TabIndex        =   14
      Top             =   2100
      Width           =   3735
   End
   Begin MSComctlLib.Toolbar tbMenu 
      Align           =   1  'Align Top
      Height          =   360
      Left            =   0
      TabIndex        =   13
      Top             =   0
      Width           =   9270
      _ExtentX        =   16351
      _ExtentY        =   635
      ButtonWidth     =   1826
      ButtonHeight    =   582
      Appearance      =   1
      Style           =   1
      TextAlignment   =   1
      _Version        =   393216
      BeginProperty Buttons {66833FE8-8583-11D1-B16A-00C0F0283628} 
         NumButtons      =   4
         BeginProperty Button1 {66833FEA-8583-11D1-B16A-00C0F0283628} 
            Caption         =   "File"
            Style           =   5
            BeginProperty ButtonMenus {66833FEC-8583-11D1-B16A-00C0F0283628} 
               NumButtonMenus  =   2
               BeginProperty ButtonMenu1 {66833FEE-8583-11D1-B16A-00C0F0283628} 
                  Text            =   "Print"
               EndProperty
               BeginProperty ButtonMenu2 {66833FEE-8583-11D1-B16A-00C0F0283628} 
                  Text            =   "Close"
               EndProperty
            EndProperty
         EndProperty
         BeginProperty Button2 {66833FEA-8583-11D1-B16A-00C0F0283628} 
            Caption         =   "Edit"
            Style           =   5
            BeginProperty ButtonMenus {66833FEC-8583-11D1-B16A-00C0F0283628} 
               NumButtonMenus  =   2
               BeginProperty ButtonMenu1 {66833FEE-8583-11D1-B16A-00C0F0283628} 
                  Text            =   "Add Labour Task"
               EndProperty
               BeginProperty ButtonMenu2 {66833FEE-8583-11D1-B16A-00C0F0283628} 
                  Text            =   "Archive Vehicle"
               EndProperty
            EndProperty
         EndProperty
         BeginProperty Button3 {66833FEA-8583-11D1-B16A-00C0F0283628} 
            Caption         =   "View"
            Style           =   5
            BeginProperty ButtonMenus {66833FEC-8583-11D1-B16A-00C0F0283628} 
               NumButtonMenus  =   5
               BeginProperty ButtonMenu1 {66833FEE-8583-11D1-B16A-00C0F0283628} 
                  Text            =   "View Bill of Materials (Excel)"
               EndProperty
               BeginProperty ButtonMenu2 {66833FEE-8583-11D1-B16A-00C0F0283628} 
                  Text            =   "Material Listing"
               EndProperty
               BeginProperty ButtonMenu3 {66833FEE-8583-11D1-B16A-00C0F0283628} 
                  Text            =   "Modify History"
               EndProperty
               BeginProperty ButtonMenu4 {66833FEE-8583-11D1-B16A-00C0F0283628} 
                  Text            =   "Archived Database"
               EndProperty
               BeginProperty ButtonMenu5 {66833FEE-8583-11D1-B16A-00C0F0283628} 
                  Text            =   "All Labour"
               EndProperty
            EndProperty
         EndProperty
         BeginProperty Button4 {66833FEA-8583-11D1-B16A-00C0F0283628} 
            Caption         =   "OEM Kits"
            Style           =   5
            BeginProperty ButtonMenus {66833FEC-8583-11D1-B16A-00C0F0283628} 
               NumButtonMenus  =   2
               BeginProperty ButtonMenu1 {66833FEE-8583-11D1-B16A-00C0F0283628} 
                  Text            =   "Add OEM Kit to Vehicle"
               EndProperty
               BeginProperty ButtonMenu2 {66833FEE-8583-11D1-B16A-00C0F0283628} 
                  Text            =   "View OEM Kits Attached"
               EndProperty
            EndProperty
         EndProperty
      EndProperty
   End
   Begin MSDataGridLib.DataGrid grdMaterialsCostCentreTotals 
      Height          =   3915
      Left            =   2400
      TabIndex        =   7
      Top             =   5460
      Width           =   2805
      _ExtentX        =   4948
      _ExtentY        =   6906
      _Version        =   393216
      BackColor       =   12648447
      ForeColor       =   16711680
      HeadLines       =   1
      RowHeight       =   15
      BeginProperty HeadFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Caption         =   "MATERIAL COST SUMMARY"
      ColumnCount     =   2
      BeginProperty Column00 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      BeginProperty Column01 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      SplitCount      =   1
      BeginProperty Split0 
         BeginProperty Column00 
         EndProperty
         BeginProperty Column01 
         EndProperty
      EndProperty
   End
   Begin MSDataGridLib.DataGrid grdLabour 
      Height          =   2865
      Left            =   120
      TabIndex        =   8
      Top             =   2490
      Width           =   9045
      _ExtentX        =   15954
      _ExtentY        =   5054
      _Version        =   393216
      AllowUpdate     =   0   'False
      BackColor       =   12648447
      ForeColor       =   16711680
      HeadLines       =   1
      RowHeight       =   15
      BeginProperty HeadFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Caption         =   "LABOUR"
      ColumnCount     =   2
      BeginProperty Column00 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      BeginProperty Column01 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      SplitCount      =   1
      BeginProperty Split0 
         BeginProperty Column00 
         EndProperty
         BeginProperty Column01 
         EndProperty
      EndProperty
   End
   Begin MSDataGridLib.DataGrid grdTotalTime 
      Height          =   3915
      Left            =   120
      TabIndex        =   16
      Top             =   5460
      Width           =   2295
      _ExtentX        =   4048
      _ExtentY        =   6906
      _Version        =   393216
      BackColor       =   12648447
      ForeColor       =   16711680
      HeadLines       =   1
      RowHeight       =   17
      BeginProperty HeadFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Caption         =   "LABOUR HOUR SUMMARY"
      ColumnCount     =   2
      BeginProperty Column00 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   4105
            SubFormatType   =   0
         EndProperty
      EndProperty
      BeginProperty Column01 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   4105
            SubFormatType   =   0
         EndProperty
      EndProperty
      SplitCount      =   1
      BeginProperty Split0 
         BeginProperty Column00 
         EndProperty
         BeginProperty Column01 
         EndProperty
      EndProperty
   End
   Begin VB.Label txtVehDescription 
      Caption         =   "Vehicle Description"
      Height          =   270
      Left            =   3945
      TabIndex        =   40
      Top             =   435
      Width           =   1395
   End
   Begin VB.Label lblChangesMadeBy 
      Caption         =   "Last Modified"
      Height          =   195
      Left            =   4095
      TabIndex        =   15
      Top             =   1875
      Width           =   1095
   End
   Begin VB.Label lblSOPNumber 
      Caption         =   "SOP Number"
      Height          =   180
      Left            =   7470
      TabIndex        =   12
      Top             =   1920
      Width           =   1005
   End
   Begin MSForms.TextBox txtSOPNumber 
      Height          =   300
      Left            =   6645
      TabIndex        =   11
      Top             =   2100
      Width           =   2505
      VariousPropertyBits=   746604569
      Size            =   "4410;529"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   3
   End
   Begin MSForms.TextBox txtLabourOverheadPercent 
      Height          =   300
      Left            =   135
      TabIndex        =   10
      Top             =   2100
      Width           =   2670
      VariousPropertyBits=   746604569
      Size            =   "4710;529"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   3
   End
   Begin MSForms.TextBox txtVehicleSeriesCode 
      Height          =   300
      Left            =   150
      TabIndex        =   9
      Top             =   1560
      Width           =   2670
      VariousPropertyBits=   746604569
      Size            =   "4710;529"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   3
   End
   Begin VB.Label lblVehicleSeriesCode 
      Caption         =   "Vehicle Series Code"
      Height          =   195
      Left            =   825
      TabIndex        =   6
      Top             =   1320
      Width           =   1530
   End
   Begin VB.Label lblLabourOverheadPercent 
      Caption         =   "Labour Overhead %"
      Height          =   255
      Left            =   855
      TabIndex        =   5
      Top             =   1920
      Width           =   1455
   End
   Begin VB.Label lblTotalHours 
      Caption         =   "Total Hours (Labour Grid)"
      Height          =   210
      Left            =   3720
      TabIndex        =   4
      Top             =   1320
      Width           =   1875
   End
   Begin MSForms.TextBox txtTotalHours 
      Height          =   300
      Left            =   3285
      TabIndex        =   2
      Top             =   1560
      Width           =   2805
      VariousPropertyBits=   746604569
      Size            =   "4948;529"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   3
   End
   Begin MSForms.TextBox txtNumberOfBuses 
      Height          =   300
      Left            =   6645
      TabIndex        =   1
      Top             =   1560
      Width           =   2505
      VariousPropertyBits=   746604569
      Size            =   "4410;529"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   3
   End
   Begin VB.Label lblNumberOfBuses 
      Caption         =   "Number of Vehicles"
      Height          =   210
      Left            =   7245
      TabIndex        =   3
      Top             =   1320
      Width           =   1410
   End
   Begin MSForms.TextBox txtDescription 
      Height          =   495
      Left            =   840
      TabIndex        =   0
      Top             =   690
      Width           =   7560
      VariousPropertyBits=   -1400879079
      Size            =   "13335;873"
      SpecialEffect   =   6
      FontEffects     =   1073750016
      FontHeight      =   165
      FontCharSet     =   0
      FontPitchAndFamily=   2
      ParagraphAlign  =   3
   End
End
Attribute VB_Name = "frmVehCostEstimateMain"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Option Explicit
Private Const SW_SHOWMAXIMIZED As Long = 3
Private m_str_Msg As String
Public m_str_LinkNumber As String
Public m_l_VehicleListID As Long
Public m_var_RowID As Variant

Private Sub UserPermissions()
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Then
        'Menu <View><Add Labour Task> is disabled.
        tbMenu.Buttons(2).ButtonMenus(1).Enabled = False
        'Menu <View><OEM KITS><Add OEM Kit To Vehicle> is disabled.
        tbMenu.Buttons(3).ButtonMenus(1).Enabled = False
        'Menu <View><Archived Database> is disabled.
        tbMenu.Buttons(3).ButtonMenus(4).Enabled = False
        'Menu <View><Archive Estimate>
        tbMenu.Buttons(2).ButtonMenus(2).Enabled = False

        'Menu <View><Modify History>
        tbMenu.Buttons(2).ButtonMenus(2).Enabled = False
        
        'Menu <OEM Kit><ADD OEM KIT TO VEHICLE>
        tbMenu.Buttons(4).ButtonMenus(1).Enabled = False
        
        txtDescription.Enabled = False
        txtVehicleSeriesCode.Enabled = False
        txtNumberOfBuses.Enabled = False
        txtSOPNumber.Enabled = False
        lblLabourOverheadPercent.Visible = False
        txtLabourOverheadPercent.Visible = False
        lblTotalHours.Visible = False
        txtTotalHours.Visible = False
        lblSelectedKitCost.Visible = False
        lblOEMKitPrice.Visible = False
        lblLabourSubtotal.Visible = False
        lblLabourOverheadAmount.Visible = False
        lblLabourTotal.Visible = False
        lblMaterialsTotal.Visible = False
        lblTotalBusCost.Visible = False
        txtSelectedKitCost.Visible = False
        txtOEMKitsTotal.Visible = False
        txtLabourSubtotal.Visible = False
        txtLabourOverheadAmount.Visible = False
        txtLabourTotal.Visible = False
        txtMaterialTotal.Visible = False
        txtTotalVehicleCost.Visible = False
        If grdLabour.Columns.Count > 2 Then
            'Grid "Labour". Columns "Time", "Wrench Time" is invisible.
            grdLabour.Columns("TIME").Visible = False
            grdLabour.Columns("WRENCH TIME").Visible = False
        End If
        'Grid "Materials Cost Centre Totals". Column "Total Cost" is invisible.
        grdMaterialsCostCentreTotals.Columns("TOTAL COST").Visible = False
        lblTaxTotal.Visible = False
        txtTaxTotal.Visible = False
        lblTotalVehicleCostWithTax.Visible = False
        txtTotalVehicleCostWithTax.Visible = False
    ElseIf g_l_AccessLevel = 2 Then
        
        'Menu <View><Add Labour Task> is disabled.
        tbMenu.Buttons(2).ButtonMenus(1).Enabled = False
        'Menu <View><OEM KITS><Add OEM Kit To Vehicle> is disabled.
        tbMenu.Buttons(3).ButtonMenus(1).Enabled = False
        'Menu <View><Archived Database> is disabled.
        tbMenu.Buttons(3).ButtonMenus(4).Enabled = False
        'Menu <View><Archive Estimate>
        tbMenu.Buttons(2).ButtonMenus(2).Enabled = False
        'Menu <View><Modify History>
        tbMenu.Buttons(2).ButtonMenus(2).Enabled = False
        
        'Menu <OEM Kit><ADD OEM KIT TO VEHICLE>
        tbMenu.Buttons(4).ButtonMenus(1).Enabled = False
        
        
        
        
        txtDescription.Enabled = False
        txtVehicleSeriesCode.Enabled = False
        txtLabourOverheadPercent.Enabled = False
        txtNumberOfBuses.Enabled = False
        txtTotalHours.Enabled = False
        txtSOPNumber.Enabled = False
        txtOEMKitsTotal.Enabled = False
        txtSelectedKitCost.Enabled = False
        txtLabourSubtotal.Enabled = False
        txtLabourOverheadAmount.Enabled = False
        txtLabourTotal.Enabled = False
        txtMaterialTotal.Enabled = False
        txtTotalVehicleCost.Enabled = False
    End If
    
    If g_l_AccessLevel < 4 Then
        tbMenu.Buttons(3).ButtonMenus(3).Enabled = False
        lblChangesMadeBy.Visible = False
        cboChangesMadeBy.Visible = False
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "UserPermissions", g_l_ErrorLineNumber
End Sub

'Populates the grids on the form
Private Sub Populate()

    Dim var_MMSStockCode As String
    Dim cur_MMSCost As String
    Dim var_NSCRowID As Variant
    Dim str_OrigSuppNum As String
    Dim str_FileText As String
    Dim FSO As FileSystemObject
    Dim TS As TextStream
    Dim RSNewStock As ADODB.Recordset
    Dim l_RetVal As Long
    Dim l_Result As Long
    Dim dbl_TaxRate As Double
    Dim RS As ADODB.Recordset
    Dim RS2 As ADODB.Recordset
    Dim l_Hours As Long
    Dim l_Minutes As Long
    Dim l_count As Long
    Dim duplicate As Boolean
    
    On Error GoTo Error_Handler
    
    
    duplicate = False
    'First populate the rebuilt information
    Set RS = New ADODB.Recordset
    
    Set RS = modDBHelper.RetrieveVehicleEstimates("CES_INQUIRY.RETRIEVE_VEHICLE_ESTIMATES")
    
    If RS.RecordCount > 0 Then
        RS.Filter = "VEHICLE_LIST_ID = " + CStr(m_l_VehicleListID)
        txtVehicleSeriesCode.Text = RS.Fields.Item("veh_series_code")
        txtNumberOfBuses.Text = RS.Fields.Item("NUM_OF_VEHICLES")
        txtDescription.Text = RS.Fields.Item("PROJ_DESC")
        txtSOPNumber.Text = RS.Fields.Item("SOPNumber")
    End If
    'm_str_RBNumber = txtRebuiltCode.Text 'used when opening materials page from menu
       
    'Then populate the labour information
    Set RS = modDBHelper.RetrieveMBLabour("CES_INQUIRY.RETRIEVE_MB_LABOUR", _
                                          m_str_LinkNumber, _
                                          "BUS")
                                          
    If RS.RecordCount > 0 Then
        Set grdLabour.DataSource = RS
        RS.MoveFirst
        txtTotalHours.Text = DecimalToMinutes(ColumnTotals(RS, "Time addition"))
        RS.MoveFirst
    Else
        Set grdLabour.DataSource = Nothing
        txtTotalHours.Text = 0
    End If

        'Determine which non stock coded items have since been converted into stock coded
    'items.
    
    'First get the table containing each of the non stock coded items
    Set RS = modDBHelper.RetrieveNSCPUsed("CES_INQUIRY.RETRIEVE_NSCP_USED", _
                                          m_str_LinkNumber, _
                                          "BUS")
        
    'Loop through each of the non stock coded items
    If RS.RecordCount > 0 Then
        RS.MoveFirst
        Set RSNewStock = New ADODB.Recordset
        While Not RS.EOF
            'Get the original supplier number and row id
            str_OrigSuppNum = IIf(IsNull(RS.Fields.Item("SUPPLIER NUMBER").Value), "", RS.Fields.Item("SUPPLIER NUMBER").Value)
            var_NSCRowID = RS.Fields.Item("RowID")
            'Now attempt to get a stock coded part which matches the original supplier
            'number
            Set RSNewStock = modDBHelper.RetrieveSCOrigSupplierNum( _
                                        "CES_INQUIRY.RETRIEVE_SC_ORIG_SUPPLIER_NUM", _
                                        str_OrigSuppNum)
            
           If RSNewStock.RecordCount > 0 Then
                'There is a match
                'Get the MMS Stock Code for the item
                RSNewStock.MoveFirst
                var_MMSStockCode = RSNewStock.Fields.Item("mms_stock_code")
                cur_MMSCost = Round(RSNewStock.Fields.Item("MMS_New_Cost"), 2)
                'Append the text entry to be logged
                str_FileText = str_FileText & Trim(str_OrigSuppNum) & " to " & _
                               Trim(var_MMSStockCode) & Chr(13) & Chr(10)
                               
                'ensure a stockcoded part is not already attached to the estimate
                
                 Set RS2 = New ADODB.Recordset
        
                 Set RS2 = modDBHelper.RetrieveSCPUsed("CES_INQUIRY.RETRIEVE_SCP_USED", _
                                             m_str_LinkNumber, _
                                             "N", _
                                             "BUS")
                    If RS2.RecordCount > 0 Then
                        RS2.MoveFirst
                        For l_count = 0 To RS2.RecordCount - 1
                            If RS2.Fields.Item("STOCK CODE") = Trim(var_MMSStockCode) Then
                                Call SetDefaultCursor
                                m_str_Msg = "Did not convert Non-Stocked-Coded part to Stocked-Coded-Part since MMS Stock Code"
                                m_str_Msg = m_str_Msg + " " + var_MMSStockCode + " is already used in this estimate"
                                MsgBox m_str_Msg, vbOKOnly Or vbExclamation, "Warning"
                                duplicate = True
                                Exit For
                            End If
                            RS2.MoveNext
                        Next l_count
                    End If
                    Set RS2 = Nothing
                  
                  
                If duplicate = False Then
                'Transfer the entry to the stock coded make buy
                    l_Result = modDBHelper.TransferPartsUsed( _
                                                        "CES_UPDATE.TRANSFER_PARTS_USED", _
                                                        l_RetVal, _
                                                        var_MMSStockCode, _
                                                        cur_MMSCost, _
                                                        g_str_UserName, _
                                                        var_NSCRowID)
                                                        
                    ' Now if there have been any conversions log them in text file and inform the user
                    If str_FileText <> "" And duplicate = False Then
                        'Set FSO = New FileSystemObject
                        'Set TS = FSO.CreateTextFile("bus.log")
                        'TS.Write ("Vehicle #" & Trim(m_str_LinkNumber) & " Part Conversions:" & _
                                  Chr(13) & Chr(10) & Chr(13) & Chr(10) & _
                                  "Vendor Part Number to Stock Code" & Chr(13) & Chr(10) & _
                                  "--------------------------------" & Chr(13) & Chr(10) & str_FileText)
                        m_str_Msg = "Parts in the Vehicle Estimate have been converted to Stock Coded Parts."
                        m_str_Msg = m_str_Msg + Chr(13) + "Please see the log for details."
                        MsgBox m_str_Msg, vbOKOnly Or vbInformation, "Rebuilt Part Estimate"
                        
                        'The code below was added to prevent a permission error when attempting
                        'to run FSO's CreateTextFile
                        Dim frmNoticeMessage As frmNotice
                        Set frmNoticeMessage = New frmNotice
                        frmNoticeMessage.SetMessage "bus.log", "Vehicle #" & Trim(m_str_LinkNumber) & _
                            " Part Conversions:" & Chr(13) & Chr(10) & Chr(13) & Chr(10) & _
                            "Vendor Part Number to Stock Code" & Chr(13) & Chr(10) & _
                            "--------------------------------" & Chr(13) & Chr(10) & str_FileText
                        frmNoticeMessage.Show vbModal
                        
                        'TS.Close
                        'ShellExecute GetDesktopWindow(), "Open", App.Path & "\bus.log", "", "C:\", 6
                        
                    End If
                End If
            End If
            RSNewStock.Close
            RS.MoveNext
            
        Wend
    End If
    Set RSNewStock = Nothing
            
  

    'Populate the MATERIAL SUMMARY
    
    Set RS = modDBHelper.RetrieveRBPTotalCost2("CES_INQUIRY.RETRIEVE_RBP_TOTAL_COST2", m_str_LinkNumber, "BUS")
              
    If RS.RecordCount > 0 Then
          txtMaterialTotal.Text = Format(ColumnTotals(RS, "TOTAL COST"), "currency")
          RS.MoveFirst
    Else
        txtMaterialTotal.Text = Format(0#, "currency")
    End If
    
    'Set RS = RetrieveAllMaterialSummary("CES_INQUIRY.RETRIEVE_ALL_MATERIAL_SUMMARY")
    If RS.RecordCount > 0 Then
        Set grdMaterialsCostCentreTotals.DataSource = RS
       Else
           Set grdMaterialsCostCentreTotals.DataSource = Nothing
    End If

    Set RS = modDBHelper.RetrieveAllLabourHours("CES_INQUIRY.RETRIEVE_ALL_LABOUR", m_str_LinkNumber, "BUS")
      
    If RS.RecordCount > 0 Then
        txtLabourSubtotal.Text = Format(ColumnTotals(RS, "TOTAL COST"), "currency")
        RS.MoveFirst
        Set grdTotalTime.DataSource = RS
    Else
        txtLabourSubtotal.Text = Format(0#, "currency")
        Set grdTotalTime.DataSource = Nothing
    End If

    txtLabourOverheadPercent = Format(CCur(g_dbl_OverheadFringeValue), "percent")
    'Total each of the sections
    txtLabourOverheadAmount.Text = Format(CCur(txtLabourSubtotal.Text) * _
                                         CCur(g_dbl_OverheadFringeValue), _
                                          "Currency")
    Set RS = modDBHelper.RetrieveOEMKitsAttached("CES_INQUIRY.RETRIEVE_OEMKITS_ATTACHED", _
                                                 m_str_LinkNumber)
   
    If RS.RecordCount > 0 Then
        Set cboOEMKitsList.RowSource = RS
        cboOEMKitsList.ListField = "Part_Number"
        cboOEMKitsList.Text = RS.Fields(0).Value
        RS.MoveFirst
        txtOEMKitsTotal.Text = Format(OEMKitsTotal(RS), "currency")
    Else
        Set cboOEMKitsList.RowSource = Nothing
        cboOEMKitsList.Text = ""
        txtSelectedKitCost.Text = Format(0, "currency")
        txtOEMKitsTotal.Text = Format(0, "currency")
    End If
    
    ' Retrieve the tax rate
    Set RS = modDBHelper.RetrieveCESSettings("CES_INQUIRY.RETRIEVE_CES_SETTI", _
                                             "TAX_RATE")
    If RS.RecordCount > 0 Then
        dbl_TaxRate = CDbl(Replace(RS.Fields("VALUE").Value, ",", "."))
    Else
        dbl_TaxRate = 0
    End If
    Set RS = Nothing
    
    txtLabourTotal.Text = Format(CCur(txtLabourSubtotal.Text) + _
                                 CCur(txtLabourOverheadAmount.Text), _
                                 "Currency")
                                 
    frmBusAddMaterials.PassValues m_str_LinkNumber
    txtMaterialTotal.Text = Format(CCur(txtMaterialTotal.Text) - CCur(txtOEMKitsTotal.Text), "currency")
    'txtMaterialTotal.Text = frmBusAddMaterials.txtTotalMaterialsCost.Text
    txtTotalVehicleCost.Text = Format(CCur(txtLabourTotal.Text) + CCur(txtMaterialTotal.Text) + CCur(txtOEMKitsTotal.Text), "currency")
    txtTaxTotal.Text = Format(dbl_TaxRate * (CCur(txtMaterialTotal) + CCur(txtOEMKitsTotal.Text)), "currency")
    txtTotalVehicleCostWithTax.Text = Format(CCur(txtTaxTotal.Text) + CCur(txtTotalVehicleCost.Text), "currency")
    
    Call FormatColumns
    
    frmViewOEMKitOption.PassValues m_str_LinkNumber
    
    Call PopulateChangesMadeBy
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Populate", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub FormatColumns()
    On Error GoTo Error_Handler
    
     If Not grdLabour.Row Then
        grdLabour.Columns("CC").Width = 500
        'grdLabour.Columns("CC").Visible = False
        grdLabour.Columns("TASK").Width = 1600
        grdLabour.Columns("LABOUR TYPE").Width = 2120
        grdLabour.Columns("USAGE").Width = 620
        grdLabour.Columns("USAGE").Alignment = dbgRight
        grdLabour.Columns("TIME").Width = 600
        grdLabour.Columns("TIME").Alignment = dbgRight
        grdLabour.Columns("WRENCH TIME").Width = 1200
        grdLabour.Columns("WRENCH TIME").Alignment = dbgRight
        grdLabour.Columns("DATE REVISED").Width = 1900 '1725
        grdLabour.Columns("DATE REVISED").Alignment = dbgRight
        grdLabour.Columns("DATE REVISED").NumberFormat = "yyyy-mmm-dd hh:mm AMPM"
        grdLabour.Columns("TIME ADDITION").Visible = False
        grdLabour.Columns("VALUE").Visible = False
        grdLabour.Columns("ROWID").Visible = False
    End If

    If Not grdMaterialsCostCentreTotals.Row Then
        grdMaterialsCostCentreTotals.Columns("CC").Width = 500
        grdMaterialsCostCentreTotals.Columns("CC").Caption = "CC"
        grdMaterialsCostCentreTotals.Columns("TOTAL COST").Alignment = dbgRight
        grdMaterialsCostCentreTotals.Columns("TOTAL COST").NumberFormat = "$#,##0.00;($#,##0.00)"
        grdMaterialsCostCentreTotals.Columns("TOTAL COST").Width = 1400
        grdMaterialsCostCentreTotals.Columns("TAXABLE COST").Visible = False
    End If
          
    If Not grdTotalTime.Row Then
        grdTotalTime.Columns("COST CENTRE").Width = 500
        grdTotalTime.Columns("COST CENTRE").Caption = "CC"
        grdTotalTime.Columns("LABOUR HRS").Width = 1200
        grdTotalTime.Columns("LABOUR HRS").Alignment = dbgRight
        grdTotalTime.Columns("TOTAL COST").Visible = False
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "FormatColumns", g_l_ErrorLineNumber
End Sub

Private Sub cboOEMKitsList_Change()
    Dim str_PartNumber As String
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler

    str_PartNumber = Trim(cboOEMKitsList.Text)
    If str_PartNumber <> "" Then
        Set RS = New ADODB.Recordset
    
        Set RS = modDBHelper.SearchSCPart("CES_INQUIRY.SEARCH_SC_PART", _
                                          str_PartNumber, _
                                          "0", _
                                          "", _
                                          "", _
                                          2)
    
        If RS.RecordCount > 0 Then
            txtSelectedKitCost.Text = Format(RS("PRICE").Value, "currency")
        Else
            Set RS = modDBHelper.SearchOEMKits("CES_INQUIRY.SEARCH_OEM_KITS", _
                                               str_PartNumber, _
                                               " ")
            If RS.RecordCount > 0 Then
                 txtSelectedKitCost.Text = Format(RS("estimated_cost").Value, "currency")
            End If
        End If
    End If

    If Not RS Is Nothing Then
        Set RS = Nothing
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cboOEMKitsList_Change", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Public Sub PassValues(ByVal str_LinkNumber As String, ByVal l_VehicleListID As Long)
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    If Not frmAddOEMKitBusEstimate Is Nothing Then
        Unload frmAddOEMKitBusEstimate
    End If
    
    If Not frmViewOEMKitOption Is Nothing Then
        Unload frmViewOEMKitOption
    End If
    
    If Not frmOEMKitMaterials Is Nothing Then
        Unload frmOEMKitMaterials
    End If
    
    If Not frmOEMKitMaterialsRegistered Is Nothing Then
        Unload frmOEMKitMaterialsRegistered
    End If

    If Not frmViewAllLabour Is Nothing Then
        Unload frmViewAllLabour
    End If
    
    m_str_LinkNumber = str_LinkNumber
    m_l_VehicleListID = l_VehicleListID
        
    Call Populate
    Call UserPermissions
        
    If g_str_UseOverheadFringe = "F" Then
        lblLabourOverheadAmount.Caption = "Fringe Value Total"
    End If
        
    frmBusAddMaterials.txtPart.Text = txtVehicleSeriesCode.Text
    frmAddOEMKitBusEstimate.m_str_Vehicle_number = m_str_LinkNumber
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PassValues", g_l_ErrorLineNumber
End Sub

Public Sub RefreshForm()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    Call Populate
    Call UserPermissions
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "RefreshForm", g_l_ErrorLineNumber
End Sub

Private Sub cmdArchive()
    Dim l_Result As Long
    Dim l_RetVal As Long
    
    On Error GoTo Error_Handler
    m_str_Msg = "Are you sure you want to Archive this Vehicle Estimate?"
    l_Result = MsgBox(m_str_Msg, vbOKCancel Or vbQuestion, "Archive Vehicle Estimate?")
    
    If l_Result = vbOK Then
        Call SetWaitCursor
        ArchVehicleRBParts m_str_LinkNumber
        
        l_Result = modDBHelper.ArchiveBUS("CES_ARCHIVE.ARCHIVE_VEHICLE", _
                                    l_RetVal, _
                                    txtVehicleSeriesCode.Text, _
                                    g_str_UserName, _
                                    m_str_LinkNumber, _
                                    "BUS", _
                                    Trim(txtLabourSubtotal.Text), _
                                    Trim(txtLabourOverheadAmount.Text), _
                                    Trim(txtLabourTotal.Text), _
                                    Trim(txtMaterialTotal.Text), _
                                    Trim(txtTotalVehicleCost.Text), _
                                    Trim(txtTaxTotal.Text), _
                                    Trim(txtTotalVehicleCostWithTax.Text), _
                                    Trim(txtOEMKitsTotal.Text))
        If l_Result = 0 Then
            m_str_Msg = "Archiving Vehicle Estimate " + txtVehicleSeriesCode.Text + " is complete."
            MsgBox m_str_Msg, vbOKOnly Or vbInformation, "Vehicle Estimate Archive"
            Call SetDefaultCursor
        Else
            m_str_Msg = "Archiving Vehicle Estimate = " + txtVehicleSeriesCode.Text + " has failed."
            MsgBox m_str_Msg, vbInformation Or vbOKOnly, "Vehicle Estimate Archive"
            Call SetDefaultCursor
        End If
        
    End If
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdArchive_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub
'Refresh the current vehicle estimate form
Private Sub cmdRefresh_Click()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    Call RefreshForm
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdRefresh_click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor
    
    'Unload the add materials form
    If Not frmBusAddMaterials Is Nothing Then
        Unload frmBusAddMaterials
    End If
    
    'Unload the add oem kit form
    If Not frmAddOEMKitBusEstimate Is Nothing Then
        Unload frmAddOEMKitBusEstimate
    End If
    
    'Unload the view oem kit form
    If Not frmViewOEMKitOption Is Nothing Then
        Unload frmViewOEMKitOption
    End If

    'Unload the registered oem kit form
    If Not frmOEMKitMaterialsRegistered Is Nothing Then
        Unload frmOEMKitMaterialsRegistered
    End If

    'Unload the temp oem kit form
    If Not frmOEMKitMaterials Is Nothing Then
        Unload frmOEMKitMaterials
    End If
    
    'Unload the View All Labour form
    If Not frmViewAllLabour Is Nothing Then
        Unload frmViewAllLabour
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub grdLabour_DblClick()
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not allow user to go further, just exit sub.
        Exit Sub
    End If
    
    'Update the Labour in the Rebuilt Part
    If Not grdLabour.Row Then
        Call SetWaitCursor
        m_var_RowID = grdLabour.Columns("ROWID").Text
        frmAddLabourTask.m_str_LinkNumber = m_str_LinkNumber
        frmAddLabourTask.m_str_PartID = m_var_RowID
        frmAddLabourTask.m_str_AuditReference = CStr(m_l_VehicleListID)
        frmAddLabourTask.m_str_TypeID = "BUS"
        frmAddLabourTask.Show vbModal
        Call RefreshForm
        Call SetDefaultCursor
    End If

    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdLabour_DblClick", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub grdLabour_KeyDown(KeyCode As Integer, Shift As Integer)
    'Delete the Labour from the Rebuilt Part
    Dim str_PartID As String
    Dim l_RetVal As Long
    Dim l_Result As Long
    
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not allow user to go further, just exit sub.
        Exit Sub
    End If
    
    If KeyCode = vbKeyDelete Then
        m_str_Msg = "Are you sure you want to delete this item?"
        l_Result = MsgBox(m_str_Msg, vbOKCancel Or vbQuestion, "Rebuit Part")
        If l_Result = vbOK Then
            Call SetWaitCursor
            str_PartID = grdLabour.Columns("ROWID").Text
            l_Result = modDBHelper.DeleteMBLabour("CES_DELETE.DELETE_MBLABOUR", _
                                                  l_RetVal, _
                                                  str_PartID)
            'Add record to the AUDIT_MODIFY_HISTORY table.
            l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                        "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                        l_RetVal, _
                        "Delete Labour", _
                        CStr(m_l_VehicleListID), _
                        "BUS", _
                        "LABOUR TYPE ---> " + grdLabour.Columns("LABOUR TYPE").Text, _
                        "CC ---> " + grdLabour.Columns("CC").Text, _
                        "TASK ---> " + grdLabour.Columns("TASK").Text, _
                        "USAGE ---> " + grdLabour.Columns("USAGE").Text, _
                        "TIME ---> " + grdLabour.Columns("TIME").Text, _
                        "WRENCH TIME ---> " + grdLabour.Columns("WRENCH TIME").Text, _
                        "DATE REVISED ---> " + grdLabour.Columns("DATE REVISED").Text)
            Call RefreshForm
            Call SetDefaultCursor
        End If
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdLabour_KeyDown", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Public Sub RefreshOEMKits()
    Dim RS As Recordset
    On Error GoTo Error_Handler:
    
    Set RS = modDBHelper.RetrieveOEMKitsAttached("CES_INQUIRY.RETRIEVE_OEMKITS_ATTACHED", _
                                                 m_str_LinkNumber)
   
    If RS.RecordCount > 0 Then
        Set cboOEMKitsList.RowSource = RS
        cboOEMKitsList.ListField = "Part_Number"
        cboOEMKitsList.Text = RS.Fields(0).Value
        RS.MoveFirst
        txtOEMKitsTotal.Text = Format(OEMKitsTotal(RS), "currency")
    Else
        Set cboOEMKitsList.RowSource = Nothing
        cboOEMKitsList.Text = ""
    End If
    
    cboOEMKitsList_Change
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "RefreshOEMKits", g_l_ErrorLineNumber
End Sub

Private Sub tbMenu_ButtonMenuClick(ByVal ButtonMenu As MSComctlLib.ButtonMenu)
    Dim str_Temp As String
    
    On Error GoTo Error_Handler

    ' Act depending on the menu that is clicked
        Select Case ButtonMenu
        Case "Close"
            Unload Me
        Case "Print"
            showVehicleEstimateReport m_str_LinkNumber
        Case "Archive Vehicle"
            cmdArchive
        Case "Add Labour Task"
            frmAddLabourTask.m_str_LinkNumber = m_str_LinkNumber
            frmAddLabourTask.m_str_AuditReference = CStr(m_l_VehicleListID)
            frmAddLabourTask.m_str_TypeID = "BUS"
            frmAddLabourTask.Show vbModal
            'Call RefreshForm
        Case "Material Listing"
            If frmBusAddMaterials.WindowState = 1 Then
                frmBusAddMaterials.WindowState = 0
            End If
            frmBusAddMaterials.m_l_VehicleListID = m_l_VehicleListID
            frmBusAddMaterials.Show
            frmBusAddMaterials.SetFocus
            'Call RefreshForm
        Case "Modify History"
            'Close the Audit form if it is opened.
            If Not frmViewAudit Is Nothing Then
                Unload frmViewAudit
            End If
            str_Temp = " - Vehicle Cost Estimate Number: " + CStr(m_l_VehicleListID)
            frmViewAudit.m_str_EstimateNumber = CStr(m_l_VehicleListID)
            frmViewAudit.m_b_FromAdministration = False
            frmViewAudit.m_str_EstimateType = "BUS"
            frmViewAudit.Caption = frmViewAudit.Caption + str_Temp
            frmViewAudit.Show
        Case "Add OEM Kit to Vehicle"
            If frmAddOEMKitBusEstimate.WindowState = 1 Then
                frmAddOEMKitBusEstimate.WindowState = 0
            End If
            frmAddOEMKitBusEstimate.Show
            frmAddOEMKitBusEstimate.SetFocus
            'Call RefreshForm
        Case "View OEM Kits Attached"
            If frmViewOEMKitOption.WindowState = 1 Then
                frmViewOEMKitOption.WindowState = 0
            End If
            frmViewOEMKitOption.Show
            frmViewOEMKitOption.SetFocus
            'Call RefreshForm
        Case "Archived Database"
            frmArchivedHistory.m_str_LinkCode = m_l_VehicleListID
            frmArchivedHistory.m_str_EstimateType = "BUS"
            frmArchivedHistory.Show
        Case "All Labour"
            frmViewAllLabour.PassValues m_str_LinkNumber, "BUS"
            If frmViewAllLabour.WindowState = 1 Then
                frmViewAllLabour.WindowState = 0
            End If
            frmViewAllLabour.Show
            frmViewAllLabour.SetFocus
        Case "View Bill of Materials (Excel)"
            mnuViewBillOfMaterials_Click
    End Select
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "tbMenu_ButtonMenuClick", g_l_ErrorLineNumber
End Sub

Private Sub PopulateChangesMadeBy()
    Dim l_count As Long
    Dim str_Temp As String
    Dim RS As ADODB.Recordset

    On Error GoTo Error_Handler

    cboChangesMadeBy.Clear

    Set RS = New ADODB.Recordset
    'Populate cboChangesMadeBy combo-box. Show only 5 recent items.
    Set RS = modDBHelper.RetrieveAudit6( _
                    "CES_INQUIRY.RETRIEVE_AUDIT_6", _
                    m_l_VehicleListID, _
                    "BUS")

    If RS.RecordCount > 0 Then
        RS.MoveFirst
        For l_count = 0 To RS.RecordCount - 1
            If l_count = 5 Then
                Exit For
            End If
            str_Temp = Format(RS.Fields.Item("DATE_CHANGED"), "yyyy-mmm-dd hh:mm:ss AMPM")
            str_Temp = CStr(str_Temp)
            str_Temp = str_Temp + " ---> "
            str_Temp = str_Temp + CStr(RS.Fields.Item("USER_NAME"))
            cboChangesMadeBy.AddItem str_Temp
            RS.MoveNext
        Next l_count
    End If

    If RS.RecordCount > 0 Then
        cboChangesMadeBy.Text = cboChangesMadeBy.List(0)
    End If

    Set RS = Nothing

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateChangesMadeBy", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub



Private Sub mnuViewBillOfMaterials_Click()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.RetrieveCESSettings("CES_INQUIRY.RETRIEVE_CES_SETTI", _
                                             "BILL_OF_MATERIALS_PATH")
    
    If RS.EOF = False Then
        'Open the SOP PDF File using the default PDF viewer
        ShellExecute GetDesktopWindow, _
                     "Open", _
                     RS.Fields.Item("VALUE"), _
                     "", _
                     "C:\", _
                     SW_SHOWMAXIMIZED
    End If
    
    Set RS = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuViewBillOfMaterials_Click", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub
frmVehEquipment.frm :
VERSION 5.00
Object = "{CDE57A40-8B86-11D0-B3C6-00A0C90AEA82}#1.0#0"; "msdatgrd.ocx"
Begin VB.Form frmVehEquipment 
   BorderStyle     =   1  'Fixed Single
   Caption         =   "Engines/Transmissions/Differentials"
   ClientHeight    =   5910
   ClientLeft      =   45
   ClientTop       =   330
   ClientWidth     =   7350
   FillStyle       =   2  'Horizontal Line
   Icon            =   "frmVehEquipment.frx":0000
   LinkTopic       =   "Form2"
   MDIChild        =   -1  'True
   ScaleHeight     =   5910
   ScaleWidth      =   7350
   Begin MSDataGridLib.DataGrid grdTransmissionTypes 
      Height          =   5355
      Left            =   2460
      TabIndex        =   1
      Top             =   60
      Width           =   2400
      _ExtentX        =   4233
      _ExtentY        =   9446
      _Version        =   393216
      BackColor       =   12648447
      ColumnHeaders   =   0   'False
      ForeColor       =   16711680
      HeadLines       =   1
      RowHeight       =   15
      BeginProperty HeadFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Caption         =   "TRANSMISSION TYPE"
      ColumnCount     =   2
      BeginProperty Column00 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      BeginProperty Column01 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      SplitCount      =   1
      BeginProperty Split0 
         BeginProperty Column00 
         EndProperty
         BeginProperty Column01 
         EndProperty
      EndProperty
   End
   Begin MSDataGridLib.DataGrid grdEngineTypes 
      Height          =   5355
      Left            =   0
      TabIndex        =   0
      Top             =   60
      Width           =   2400
      _ExtentX        =   4233
      _ExtentY        =   9446
      _Version        =   393216
      BackColor       =   12648447
      ColumnHeaders   =   0   'False
      ForeColor       =   16711680
      HeadLines       =   1
      RowHeight       =   15
      BeginProperty HeadFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Caption         =   "ENGINE TYPE"
      ColumnCount     =   2
      BeginProperty Column00 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      BeginProperty Column01 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      SplitCount      =   1
      BeginProperty Split0 
         BeginProperty Column00 
         EndProperty
         BeginProperty Column01 
         EndProperty
      EndProperty
   End
   Begin MSDataGridLib.DataGrid grdDifferentialTypes 
      Height          =   5355
      Left            =   4920
      TabIndex        =   2
      Top             =   60
      Width           =   2400
      _ExtentX        =   4233
      _ExtentY        =   9446
      _Version        =   393216
      BackColor       =   12648447
      ColumnHeaders   =   0   'False
      ForeColor       =   16711680
      HeadLines       =   1
      RowHeight       =   15
      BeginProperty HeadFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Caption         =   "DIFFERENTIAL TYPE"
      ColumnCount     =   2
      BeginProperty Column00 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      BeginProperty Column01 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   1033
            SubFormatType   =   0
         EndProperty
      EndProperty
      SplitCount      =   1
      BeginProperty Split0 
         BeginProperty Column00 
         EndProperty
         BeginProperty Column01 
         EndProperty
      EndProperty
   End
   Begin VB.CommandButton cmdAdd 
      Caption         =   "Add"
      Height          =   345
      Left            =   3000
      TabIndex        =   3
      Top             =   5520
      Width           =   1300
   End
End
Attribute VB_Name = "frmVehEquipment"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Option Explicit

Private Sub cmdAdd_Click()
    On Error GoTo Error_Handler

    Call SetWaitCursor
    frmAddVehOptions.Show vbModal
    Call RefreshForm
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdAdd_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub RefreshForm()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    Set RS = New ADODB.Recordset
    
    Set RS = modDBHelper.RetrieveEngines("CES_INQUIRY.RETRIEVE_ENGINES")
    Set grdEngineTypes.DataSource = RS
    
    Set RS = modDBHelper.RetrieveTransmissions("CES_INQUIRY.RETRIEVE_TRANSMISSIONS")
    Set grdTransmissionTypes.DataSource = RS
    
    Set RS = modDBHelper.RetrieveDifferentials("CES_INQUIRY.RETRIEVE_DIFFERENTIALS")
    Set grdDifferentialTypes.DataSource = RS
    
    Set RS = Nothing
    
    Call InitColumns

    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "RefreshForm", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    Call SetDefaultCursor
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler
    
    Call RefreshForm
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
End Sub

Private Sub InitColumns()
    On Error GoTo Error_Handler
    
    grdEngineTypes.Columns("ROWID").Visible = False
    grdTransmissionTypes.Columns("ROWID").Visible = False
    grdDifferentialTypes.Columns("ROWID").Visible = False
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "InitColumns", g_l_ErrorLineNumber
End Sub

Private Sub grdDifferentialTypes_KeyDown(KeyCode As Integer, Shift As Integer)
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_PartID As String
    
    On Error GoTo Error_Handler
    
    If KeyCode = vbKeyDelete Then
        l_Result = MsgBox("Are you sure you want to delete this item?", vbOKCancel)
        If l_Result = vbOK Then
            Call SetWaitCursor
            str_PartID = grdDifferentialTypes.Columns("ROWID").Text
            l_Result = modDBHelper.DeleteDiff("CES_DELETE.DELETE_DIFF", _
                                              l_RetVal, _
                                              str_PartID)
            ' Only delete the differential if it is not in
            ' any vehicle estimates
            If l_Result > 0 Then
                Call SetDefaultCursor
                MsgBox "Differential is currently in a vehicle estimate." & Chr(13) & _
                       "Please remove it from all vehicle estimates before deleting it.", _
                       vbCritical, "Cost Estimate System"
            Else
                'Add record to the AUDIT_MODIFY_HISTORY table.
                l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                    "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                    l_RetVal, _
                    "Differential was deleted from the System", _
                    0, _
                    "ETD", _
                    "DIFFERENTIAL TYPE ---> " + grdDifferentialTypes.Columns("NAME"), _
                    "")
                Call RefreshForm
            End If
            Call SetDefaultCursor
        End If
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdDifferentialTypes_KeyDown", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub grdEngineTypes_KeyDown(KeyCode As Integer, Shift As Integer)
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_PartID As String
    
    On Error GoTo Error_Handler
    
    If KeyCode = vbKeyDelete Then
        l_Result = MsgBox("Are you sure you want to delete this item?", vbOKCancel)
        If l_Result = vbOK Then
            Call SetWaitCursor
            str_PartID = grdEngineTypes.Columns("ROWID").Text
            l_Result = modDBHelper.DeleteEngine("CES_DELETE.DELETE_ENGINE", _
                                                l_RetVal, _
                                                str_PartID)
            ' Only delete the engine if it is not in any vehicle estimates
            If l_Result > 0 Then
                Call SetDefaultCursor
                MsgBox "Eninge is currently in a vehicle estimate." & Chr(13) & _
                       "Please remove it from all vehicle estimates before deleting it.", _
                       vbCritical, "Cost Estimate System"
            Else
                'Add record to the AUDIT_MODIFY_HISTORY table.
                l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                                "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                                l_RetVal, _
                                "Engine was deleted from the System", _
                                0, _
                                "ETD", _
                                "ENGINE TYPE ---> " + grdEngineTypes.Columns("NAME"), _
                                "")
                Call RefreshForm
            End If
            Call SetDefaultCursor
        End If
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdEngineTypes_KeyDown", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub grdTransmissionTypes_KeyDown(KeyCode As Integer, Shift As Integer)
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_PartID As String
    
    On Error GoTo Error_Handler
    
    If KeyCode = vbKeyDelete Then
        l_Result = MsgBox("Are you sure you want to delete this item?", vbOKCancel)
        If l_Result = vbOK Then
            str_PartID = grdTransmissionTypes.Columns("ROWID").Text
            Call SetWaitCursor
            l_Result = modDBHelper.DeleteTrans("CES_DELETE.DELETE_TRANS", _
                                               l_RetVal, _
                                               str_PartID)
            ' Only delete the transmission if it is not in any vehicle estimates
            If l_Result > 0 Then
                Call SetDefaultCursor
                MsgBox "Transmission is currently in a vehicle estimate." & Chr(13) & _
                       "Please remove it from all vehicle estimates before deleting it.", _
                       vbCritical, "Cost Estimate System"
            Else
                'Add record to the AUDIT_MODIFY_HISTORY table.
                l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                    "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                    l_RetVal, _
                    "Transmission was deleted from the System", _
                    0, _
                    "ETD", _
                    "TRANSMISSION TYPE ---> " + grdTransmissionTypes.Columns("NAME"), _
                    "")
                Call RefreshForm
            End If
            Call SetDefaultCursor
        End If
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdTransmissionTypes_KeyDown", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub
frmVehEstimateOptions.frm :
VERSION 5.00
Begin VB.Form frmVehEstimateOptions 
   BorderStyle     =   3  'Fixed Dialog
   Caption         =   "Vehicle Estimate Options"
   ClientHeight    =   2280
   ClientLeft      =   45
   ClientTop       =   330
   ClientWidth     =   4680
   Icon            =   "frmVehEstimateOptions.frx":0000
   LinkTopic       =   "Form1"
   MaxButton       =   0   'False
   MinButton       =   0   'False
   ScaleHeight     =   2280
   ScaleWidth      =   4680
   ShowInTaskbar   =   0   'False
   StartUpPosition =   2  'CenterScreen
   Begin VB.OptionButton optCopyVehicleEstimate 
      Caption         =   "Copy Vehicle Estimate"
      Height          =   360
      Left            =   1275
      TabIndex        =   2
      Top             =   1320
      Width           =   2055
   End
   Begin VB.CommandButton cmdContinue 
      Caption         =   "Continue"
      Default         =   -1  'True
      Height          =   345
      Left            =   1875
      TabIndex        =   3
      Top             =   1800
      Width           =   975
   End
   Begin VB.OptionButton optLoadPart 
      BackColor       =   &H80000004&
      Caption         =   "Load Vehicle Estimate"
      Height          =   360
      Left            =   1275
      TabIndex        =   1
      Top             =   967
      Width           =   2040
   End
   Begin VB.OptionButton optEditVehicleEstimate 
      BackColor       =   &H80000004&
      Caption         =   "Edit Vehicle Estimate"
      Height          =   360
      Left            =   1275
      TabIndex        =   0
      Top             =   585
      Value           =   -1  'True
      Width           =   2070
   End
   Begin VB.Label lblSelectAnOption 
      Alignment       =   2  'Center
      Caption         =   "Select An Option"
      BeginProperty Font 
         Name            =   "Times New Roman"
         Size            =   14.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   285
      Left            =   1275
      TabIndex        =   4
      Top             =   150
      Width           =   2145
   End
End
Attribute VB_Name = "frmVehEstimateOptions"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Option Explicit

Public m_str_LinkNumber As String
Public m_l_VehicleListID As Long

Private Sub UserPermissions()
    On Error GoTo Error_Handler

    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        optLoadPart.Value = True
        optEditVehicleEstimate.Visible = False
        optCopyVehicleEstimate.Visible = False
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "userPermissions", g_l_ErrorLineNumber
End Sub

Private Sub cmdContinue_Click()
    On Error GoTo Error_Handler

    Call SetWaitCursor
    
    If optEditVehicleEstimate.Value = True Then
        frmAddVehCostEstimate.m_l_VehicleListID = m_l_VehicleListID
        Unload Me
        frmAddVehCostEstimate.Show vbModal
    ElseIf optLoadPart.Value = True Then
        frmVehCostEstimateMain.PassValues m_str_LinkNumber, m_l_VehicleListID
        Unload Me
        frmVehCostEstimateMain.Caption = "Vehicle Cost Estimate Number " + CStr(m_l_VehicleListID)
        frmVehCostEstimateMain.Show
        If frmVehCostEstimateMain.WindowState = 1 Then
           frmVehCostEstimateMain.WindowState = 0
        End If
        frmVehCostEstimateMain.SetFocus
    ElseIf optCopyVehicleEstimate.Value = True Then
        Unload Me
        frmCopyVehicleEstimate.PassVehicleID m_l_VehicleListID
        frmCopyVehicleEstimate.Show vbModal
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdContinue_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    Call UserPermissions
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

frmViewAllLabour.frm :
VERSION 5.00
Object = "{CDE57A40-8B86-11D0-B3C6-00A0C90AEA82}#1.0#0"; "msdatgrd.ocx"
Begin VB.Form frmViewAllLabour 
   BorderStyle     =   1  'Fixed Single
   Caption         =   "All Labour"
   ClientHeight    =   8655
   ClientLeft      =   45
   ClientTop       =   330
   ClientWidth     =   12750
   Icon            =   "frmViewAllLabour.frx":0000
   LinkTopic       =   "Form1"
   MDIChild        =   -1  'True
   ScaleHeight     =   8655
   ScaleWidth      =   12750
   ShowInTaskbar   =   0   'False
   Begin VB.CommandButton cmdPrintDocument 
      Caption         =   "Export to Excel"
      Height          =   435
      Left            =   4020
      TabIndex        =   2
      Top             =   5880
      Width           =   1515
   End
   Begin MSDataGridLib.DataGrid grdTotalTime 
      Height          =   2715
      Left            =   60
      TabIndex        =   1
      Top             =   5880
      Width           =   3855
      _ExtentX        =   6800
      _ExtentY        =   4789
      _Version        =   393216
      BackColor       =   12648447
      ForeColor       =   16711680
      HeadLines       =   1
      RowHeight       =   17
      BeginProperty HeadFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Caption         =   "ALL LABOUR SUMMARY"
      ColumnCount     =   2
      BeginProperty Column00 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   4105
            SubFormatType   =   0
         EndProperty
      EndProperty
      BeginProperty Column01 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   4105
            SubFormatType   =   0
         EndProperty
      EndProperty
      SplitCount      =   1
      BeginProperty Split0 
         BeginProperty Column00 
         EndProperty
         BeginProperty Column01 
         EndProperty
      EndProperty
   End
   Begin MSDataGridLib.DataGrid grdLabour 
      Height          =   5715
      Left            =   60
      Negotiate       =   -1  'True
      TabIndex        =   0
      Top             =   60
      Width           =   12555
      _ExtentX        =   22146
      _ExtentY        =   10081
      _Version        =   393216
      AllowUpdate     =   0   'False
      AllowArrows     =   0   'False
      BackColor       =   12648447
      ForeColor       =   16711680
      HeadLines       =   1
      RowHeight       =   17
      BeginProperty HeadFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   0
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Caption         =   "ALL LABOUR"
      ColumnCount     =   2
      BeginProperty Column00 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   4105
            SubFormatType   =   0
         EndProperty
      EndProperty
      BeginProperty Column01 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   4105
            SubFormatType   =   0
         EndProperty
      EndProperty
      SplitCount      =   1
      BeginProperty Split0 
         BeginProperty Column00 
         EndProperty
         BeginProperty Column01 
         EndProperty
      EndProperty
   End
End
Attribute VB_Name = "frmViewAllLabour"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Option Explicit

'********************************************************
' frmViewAllLabour: Shows all the labour involved in a
'                   particular estimate including any
'                   rebuilt parts contained in it.
'********************************************************

Private m_str_EstimateNumber As String
Private m_str_EstimateType As String

'********************************************************
' PassValues:   Recieves the values telling the form
'               which estimate to display the labour for.
'               Proceeds to display the appropriate
'               labour.
'********************************************************
Public Sub PassValues(str_EstimateNumber As String, str_EstimateType As String)
    On Error GoTo Error_Handler
          
    'Store the estimate type and number
    m_str_EstimateNumber = str_EstimateNumber
    m_str_EstimateType = str_EstimateType

    'Populates then formats the form
    Call SetWaitCursor
    Call PopulatePage
    Call FormatPage
    Call UserPermissions
    Call SetDefaultCursor
          
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PassValues", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub UserPermissions()
    On Error GoTo Error_Handler

    If g_l_AccessLevel = 1 Then
        'For users with Access Level = 1 all times and dollars are invisible.
        If grdLabour.Columns.Count > 2 Then
            grdLabour.Columns("TIME").Visible = False
            grdLabour.Columns("WRENCH TIME").Visible = False
            grdLabour.Columns("RATE PER HOUR").Visible = False
            grdLabour.Columns("EXTENDED TIME").Visible = False
            cmdPrintDocument.Visible = False
        End If
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "UserPermissions", g_l_ErrorLineNumber
End Sub

'********************************************************
' PopulatePage:   Displays the labour for this estimate
'               and all rebuilt parts contained
'               somewhere in this estimate.
'********************************************************
Private Sub PopulatePage()
    Dim str_Caption As String
    Dim str_Label As String
    Dim RS As ADODB.Recordset
    Dim l_Hours As Long
    Dim l_Minutes As Long
    Dim RSSettings As ADODB.Recordset
    Dim l_Result As Long
    Dim l_RetVal As Long
    
    On Error GoTo Error_Handler

    'Display the appropriate caption and label
    Select Case m_str_EstimateType
        Case "RB"
            str_Caption = "Rebuilt Part"
        Case "MB"
            str_Caption = "Make vs. Buy"
        Case "BUS"
            str_Caption = "Vehicle"
    End Select
    Me.Caption = "All Labour for " & str_Caption & " Estimate " & m_str_EstimateNumber
    

    Set RS = New ADODB.Recordset
'    'Populate the ALL_LABOUR_SUMMARY table
    Set RS = modDBHelper.RetrieveAllLabourHours("CES_INQUIRY.RETRIEVE_ALL_LABOUR", m_str_EstimateNumber, m_str_EstimateType)
   
    Set grdTotalTime.DataSource = RS
    
    Set RS = modDBHelper.RetrieveAllLabourSummary("CES_INQUIRY.RETRIEVE_ALL_LABOUR_SUMMARY")

    'Populate the grdTotalTime grid
    Set grdLabour.DataSource = RS
    
    Set RS = Nothing
    Set RSSettings = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulatePage", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    If Not RSSettings Is Nothing Then
        Set RSSettings = Nothing
    End If
End Sub

'********************************************************
' FormatPage:   Formats the controls on this page.
'********************************************************
Private Sub FormatPage()
    On Error GoTo Error_Handler

    If grdLabour.Columns.Count > 2 Then
        grdLabour.Columns("CC").Width = 500
        grdLabour.Columns("TASK").Width = 2500 '1520
        grdLabour.Columns("LABOUR TYPE").Width = 4000
        grdLabour.Columns("USAGE").Width = 620
        grdLabour.Columns("USAGE").Alignment = dbgRight
        grdLabour.Columns("TIME").Width = 500
        grdLabour.Columns("TIME").Alignment = dbgRight
        grdLabour.Columns("WRENCH TIME").Width = 1280
        grdLabour.Columns("WRENCH TIME").Alignment = dbgRight
        grdLabour.Columns("RATE PER HOUR").Alignment = dbgRight
        grdLabour.Columns("RATE PER HOUR").Width = 1350
        grdLabour.Columns("EXTENDED TIME").Alignment = dbgRight
        grdLabour.Columns("EXTENDED TIME").Width = 1300
        grdLabour.Columns("ESTIMATE TYPE").Visible = False
        grdLabour.Columns("ESTIMATE NUMBER").Visible = False
        grdLabour.Columns("TOTAL COST").Visible = False
    End If
    
    If grdTotalTime.Columns.Count >= 2 Then
        grdTotalTime.Columns("COST CENTRE").Width = 1500
        grdTotalTime.Columns("LABOUR HRS").Width = 1600
        grdTotalTime.Columns("LABOUR HRS").Alignment = dbgRight
        grdTotalTime.Columns("TOTAL COST").Visible = False
    End If
         
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "FormatPage", g_l_ErrorLineNumber
End Sub

Private Sub cmdPrintDocument_Click()
     Dim RS As ADODB.Recordset
     Dim xlApp As Excel.Application
     Dim xlBook As Excel.Workbook
     Dim xlSheet1 As Excel.Worksheet
     Dim xlSheet2 As Excel.Worksheet
     Dim l_Count As Long
     Dim str_Cell As String
     Dim str_Temp As String

    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    Set xlApp = CreateObject("Excel.Application")
    Set xlBook = xlApp.Workbooks.Add
    Set xlSheet1 = xlBook.Worksheets(1)
    Set xlSheet2 = xlBook.Worksheets(2)

    xlApp.ActiveWorkbook.Worksheets("Sheet3").Delete
    
    'Begin "ALL LABOUR" worksheet
    xlSheet1.Activate
    xlSheet1.Range("A1:J1").Font.Bold = True
    xlSheet1.Range("A1:J1").Font.Name = "Arial"
    xlSheet1.Range("A1:J1").Font.Size = 8

    'Set columns' headers
    xlSheet1.Range("A1").Value = "LABOUR TYPE"
    xlSheet1.Range("B1").Value = "CC"
    xlSheet1.Range("C1").Value = "TASK"
    xlSheet1.Range("D1").Value = "USAGE"
    xlSheet1.Range("E1").Value = "TIME"
    xlSheet1.Range("F1").Value = "WRENCH TIME"
    xlSheet1.Range("G1").Value = "RATE PER HOUR"
    xlSheet1.Range("H1").Value = "EXTENDED TIME"
    xlSheet1.Range("I1").Value = "ESTIMATE TYPE"
    xlSheet1.Range("J1").Value = "ESTIMATE NUMBER"

    'Set format for all columns = Text. In this case ESTIMATE NUMBER = 000024
    'will be shown as 000024, not 24
    xlSheet1.Range("A:A").NumberFormat = "@"
    xlSheet1.Range("B:B").NumberFormat = "@"
    xlSheet1.Range("C:C").NumberFormat = "@"
    xlSheet1.Range("D:D").NumberFormat = "@"
    xlSheet1.Range("E:E").NumberFormat = "@"
    xlSheet1.Range("F:F").NumberFormat = "@"
    xlSheet1.Range("G:G").NumberFormat = "@"
    xlSheet1.Range("H:H").NumberFormat = "@"
    xlSheet1.Range("I:I").NumberFormat = "@"
    xlSheet1.Range("J:J").NumberFormat = "@"

    'Set columns' width
    'Column "LABOUR TYPE"
    xlApp.ActiveWorkbook.Worksheets("Sheet1").Columns("A").ColumnWidth = 22
    'Column "CC"
    xlApp.ActiveWorkbook.Worksheets("Sheet1").Columns("B").ColumnWidth = 3
    'Column "TASK"
    xlApp.ActiveWorkbook.Worksheets("Sheet1").Columns("C").ColumnWidth = 22
    'Column "USAGE"
    xlApp.ActiveWorkbook.Worksheets("Sheet1").Columns("D").ColumnWidth = 5
    'Column "TIME"
    xlApp.ActiveWorkbook.Worksheets("Sheet1").Columns("E").ColumnWidth = 6
    'Column "WRENCH TIME"
    xlApp.ActiveWorkbook.Worksheets("Sheet1").Columns("F").ColumnWidth = 6
    'Column "RATE PER HOUR"
    xlApp.ActiveWorkbook.Worksheets("Sheet1").Columns("G").ColumnWidth = 6
    'Column "EXTENDED TIME"
    xlApp.ActiveWorkbook.Worksheets("Sheet1").Columns("H").ColumnWidth = 7
    'Column "ESTIMATE TYPE"
    xlApp.ActiveWorkbook.Worksheets("Sheet1").Columns("I").ColumnWidth = 7
    'Column "ESTIMATE NUMBER"
    xlApp.ActiveWorkbook.Worksheets("Sheet1").Columns("J").ColumnWidth = 7

    'Wrap text in the first row of the "WRENCH TIME" column
    xlSheet1.Range("F1").WrapText = True
    'Wrap text in the first row of the "RATE PER HOUR" column
    xlSheet1.Range("G1").WrapText = True
    'Wrap text in the first row of the "EXTENDED TIME" column
    xlSheet1.Range("H1").WrapText = True
    'Wrap text in the first row of the "ESTIMATE TYPE" column
    xlSheet1.Range("I1").WrapText = True
    'Wrap text in the first row of the "ESTIMATE NUMBER" column
    xlSheet1.Range("J1").WrapText = True

    xlApp.ActiveWorkbook.Worksheets("Sheet1").PageSetup.Orientation = xlLandscape

    If m_str_EstimateType = "RB" Then
        str_Temp = "RB Estimate # : " + m_str_EstimateNumber
    ElseIf m_str_EstimateType = "MB" Then
        str_Temp = "MB Estimate # : " + m_str_EstimateNumber
    ElseIf m_str_EstimateType = "BUS" Then
        str_Temp = "Bus Estimate # : " + m_str_EstimateNumber
    End If

    Set RS = New ADODB.Recordset
    Set RS.DataSource = grdLabour.DataSource
    If RS.RecordCount > 0 Then
        str_Cell = "A2:J" + CStr(RS.RecordCount + 2)
        xlSheet1.Range(str_Cell).Font.Name = "Arial"
        xlSheet1.Range(str_Cell).Font.Size = 7
        'Wrap text in the entire "LABOUR TYPE" column
        xlSheet1.Range("A1:A" + CStr(RS.RecordCount)).WrapText = True
        'Wrap text in the entire "TASK" column
        xlSheet1.Range("C1:C" + CStr(RS.RecordCount)).WrapText = True
        RS.MoveFirst
        For l_Count = 0 To RS.RecordCount - 1
            'Data in the "LABOUR TYPE" column
            str_Cell = "A" + CStr(l_Count + 2)
            xlSheet1.Range(str_Cell).Value = RS.Fields.Item("LABOUR TYPE").Value
            'Data in the "CC" column
            str_Cell = "B" + CStr(l_Count + 2)
            xlSheet1.Range(str_Cell).Value = RS.Fields.Item("CC").Value
            'Data in the "TASK" column
            str_Cell = "C" + CStr(l_Count + 2)
            xlSheet1.Range(str_Cell).Value = RS.Fields.Item("TASK").Value
            'Data in the "USAGE" column
            str_Cell = "D" + CStr(l_Count + 2)
            xlSheet1.Range(str_Cell).Value = RS.Fields.Item("USAGE").Value
            'Data in the "TIME" column
            str_Cell = "E" + CStr(l_Count + 2)
            xlSheet1.Range(str_Cell).Value = RS.Fields.Item("TIME").Value
            'Data in the "WRENCH TIME" column
            str_Cell = "F" + CStr(l_Count + 2)
            xlSheet1.Range(str_Cell).Value = RS.Fields.Item("WRENCH TIME").Value
            'Data in the "RATE PER HOUR" column
            str_Cell = "G" + CStr(l_Count + 2)
            xlSheet1.Range(str_Cell).Value = RS.Fields.Item("RATE PER HOUR").Value
            'Data in the "EXTENDED TIME" column
            str_Cell = "H" + CStr(l_Count + 2)
            xlSheet1.Range(str_Cell).Value = RS.Fields.Item("EXTENDED TIME").Value
            'Data in the "ESTIMATE TYPE" column
            str_Cell = "I" + CStr(l_Count + 2)
            xlSheet1.Range(str_Cell).Value = RS.Fields.Item("ESTIMATE TYPE").Value
            'Data in the "ESTIMATE NUMBER" column
            str_Cell = "J" + CStr(l_Count + 2)
            xlSheet1.Range(str_Cell).Value = RS.Fields.Item("ESTIMATE NUMBER").Value
            RS.MoveNext
        Next l_Count
    End If
    'Set headers and footers information
    xlApp.ActiveWorkbook.Worksheets("Sheet1").PageSetup.LeftHeader = _
                                "&""Arial""&10&B" + str_Temp + "&B"
    xlApp.ActiveWorkbook.Worksheets("Sheet1").PageSetup.CenterHeader = _
                                "&""Arial""&10&B" + "ALL LABOUR" + "&B"
    xlApp.ActiveWorkbook.Worksheets("Sheet1").PageSetup.RightHeader = _
                                "&""Arial""&10&B" + Format(Now, "yyyy-mmm-dd") + "&B"
    xlApp.ActiveWorkbook.Worksheets("Sheet1").PageSetup.RightFooter = _
                                "&""Arial""&10&B Page &P of &N&B"

    'Print first row in all pages
    xlApp.ActiveWorkbook.Worksheets("Sheet1").PageSetup.PrintTitleRows = _
                        xlApp.ActiveWorkbook.Worksheets("Sheet1").Rows(1).Address
    xlApp.ActiveWorkbook.Worksheets("Sheet1").PageSetup.PrintTitleColumns = _
                        xlApp.ActiveWorkbook.Worksheets("Sheet1").Columns("A:J").Address
    
    xlApp.ActiveWorkbook.Worksheets("Sheet1").PageSetup.PrintGridlines = True
    'End "ALL LABOUR" worksheet
    
    'Begin "ALL LABOUR SUMMARY" worksheet
    xlSheet2.Activate
    xlSheet2.Range("A1:B1").Font.Bold = True
    xlSheet2.Range("A1:B1").Font.Name = "Arial"
    xlSheet2.Range("A1:B1").Font.Size = 8
    
    'Set columns' headers
    xlSheet2.Range("A1").Value = "COST CENTRE"
    xlSheet2.Range("B1").Value = "LABOUR HRS"
    
    'Set format for all columns = Text
    xlSheet2.Range("A:A").NumberFormat = "@"
    xlSheet2.Range("B:B").NumberFormat = "@"
    
    'Set columns' width
    'Column "COST CENTRE"
    xlApp.ActiveWorkbook.Worksheets("Sheet2").Columns("A").ColumnWidth = 10
    'Column "LABOUR HRS"
    xlApp.ActiveWorkbook.Worksheets("Sheet2").Columns("B").ColumnWidth = 10
    
    xlApp.ActiveWorkbook.Worksheets("Sheet2").PageSetup.Orientation = xlPortrait

    If m_str_EstimateType = "RB" Then
        str_Temp = "RB Estimate # : " + m_str_EstimateNumber
    ElseIf m_str_EstimateType = "MB" Then
        str_Temp = "MB Estimate # : " + m_str_EstimateNumber
    ElseIf m_str_EstimateType = "BUS" Then
        str_Temp = "Bus Estimate # : " + m_str_EstimateNumber
    End If

    Set RS.DataSource = grdTotalTime.DataSource
    If RS.RecordCount > 0 Then
        str_Cell = "A2:B" + CStr(RS.RecordCount + 2)
        xlSheet2.Range(str_Cell).Font.Name = "Arial"
        xlSheet2.Range(str_Cell).Font.Size = 7
        RS.MoveFirst
        For l_Count = 0 To RS.RecordCount - 1
            'Data in the "COST CENTRE" column
            str_Cell = "A" + CStr(l_Count + 2)
            xlSheet2.Range(str_Cell).Value = RS.Fields.Item("COST CENTRE").Value
            'Data in the "LABOUR HRS" column
            str_Cell = "B" + CStr(l_Count + 2)
            xlSheet2.Range(str_Cell).Value = RS.Fields.Item("LABOUR HRS").Value
            RS.MoveNext
        Next l_Count
    End If
    
    'Set headers and footers information
    xlApp.ActiveWorkbook.Worksheets("Sheet2").PageSetup.LeftHeader = _
                                "&""Arial""&10&B" + str_Temp + "&B"
    xlApp.ActiveWorkbook.Worksheets("Sheet2").PageSetup.CenterHeader = _
                                "&""Arial""&10&B" + "ALL LABOUR SUMMARY" + "&B"
    xlApp.ActiveWorkbook.Worksheets("Sheet2").PageSetup.RightHeader = _
                                "&""Arial""&10&B" + Format(Now, "yyyy-mmm-dd") + "&B"
    xlApp.ActiveWorkbook.Worksheets("Sheet2").PageSetup.RightFooter = _
                                "&""Arial""&10&B Page &P of &N&B"

    'Print first row in all pages
    xlApp.ActiveWorkbook.Worksheets("Sheet2").PageSetup.PrintTitleRows = _
                                xlApp.ActiveWorkbook.Worksheets("Sheet2").Rows(1).Address
    xlApp.ActiveWorkbook.Worksheets("Sheet2").PageSetup.PrintTitleColumns = _
                        xlApp.ActiveWorkbook.Worksheets("Sheet2").Columns("A:B").Address
    
    xlApp.ActiveWorkbook.Worksheets("Sheet2").PageSetup.PrintGridlines = True
    'End "ALL LABOUR SUMMARY" worksheet
    
    xlSheet1.Activate
    
    xlApp.Caption = "ALL LABOUR - for " + g_str_UserName
    xlApp.ActiveWorkbook.Worksheets("Sheet1").Name = "ALL LABOUR"
    xlApp.ActiveWorkbook.Worksheets("Sheet2").Name = "ALL LABOUR SUMMARY"
    xlApp.Visible = True
    
    Set xlSheet1 = Nothing
    Set xlSheet2 = Nothing
    Set xlBook = Nothing
    Set xlApp = Nothing
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdPrintDocument_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    If Not xlSheet1 Is Nothing Then
        Set xlSheet1 = Nothing
    End If
    If Not xlSheet2 Is Nothing Then
        Set xlSheet2 = Nothing
    End If
    If Not xlBook Is Nothing Then
        Set xlBook = Nothing
    End If
    If Not xlApp Is Nothing Then
        Set xlApp = Nothing
    End If
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
          
    Call SetDefaultCursor
          
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

frmViewAudit.frm :
VERSION 5.00
Object = "{CDE57A40-8B86-11D0-B3C6-00A0C90AEA82}#1.0#0"; "Msdatgrd.ocx"
Object = "{8E27C92E-1264-101C-8A2F-040224009C02}#7.0#0"; "mscal.ocx"
Begin VB.Form frmViewAudit 
   BorderStyle     =   3  'Fixed Dialog
   Caption         =   "Modify History"
   ClientHeight    =   7695
   ClientLeft      =   45
   ClientTop       =   330
   ClientWidth     =   14100
   Icon            =   "frmViewAudit.frx":0000
   LinkTopic       =   "Form1"
   MaxButton       =   0   'False
   MDIChild        =   -1  'True
   MinButton       =   0   'False
   ScaleHeight     =   7695
   ScaleWidth      =   14100
   ShowInTaskbar   =   0   'False
   Begin MSACAL.Calendar calDateFrom 
      Height          =   2295
      Left            =   7500
      TabIndex        =   17
      Top             =   780
      Visible         =   0   'False
      Width           =   3555
      _Version        =   524288
      _ExtentX        =   6271
      _ExtentY        =   4048
      _StockProps     =   1
      BackColor       =   -2147483624
      Year            =   2005
      Month           =   2
      Day             =   22
      DayLength       =   1
      MonthLength     =   1
      DayFontColor    =   0
      FirstDay        =   7
      GridCellEffect  =   1
      GridFontColor   =   10485760
      GridLinesColor  =   -2147483632
      ShowDateSelectors=   -1  'True
      ShowDays        =   -1  'True
      ShowHorizontalGrid=   -1  'True
      ShowTitle       =   -1  'True
      ShowVerticalGrid=   -1  'True
      TitleFontColor  =   10485760
      ValueIsNull     =   0   'False
      BeginProperty DayFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty GridFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   0
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty TitleFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   12
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
   End
   Begin MSACAL.Calendar calDateTo 
      Height          =   2295
      Left            =   9900
      TabIndex        =   12
      Top             =   780
      Visible         =   0   'False
      Width           =   3555
      _Version        =   524288
      _ExtentX        =   6271
      _ExtentY        =   4048
      _StockProps     =   1
      BackColor       =   -2147483624
      Year            =   2005
      Month           =   2
      Day             =   22
      DayLength       =   1
      MonthLength     =   1
      DayFontColor    =   0
      FirstDay        =   7
      GridCellEffect  =   1
      GridFontColor   =   10485760
      GridLinesColor  =   -2147483632
      ShowDateSelectors=   -1  'True
      ShowDays        =   -1  'True
      ShowHorizontalGrid=   -1  'True
      ShowTitle       =   -1  'True
      ShowVerticalGrid=   -1  'True
      TitleFontColor  =   10485760
      ValueIsNull     =   0   'False
      BeginProperty DayFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty GridFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   0
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty TitleFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   12
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
   End
   Begin VB.Frame fraFilterBy 
      Caption         =   "Filter By:"
      Height          =   1035
      Left            =   60
      TabIndex        =   1
      Top             =   0
      Width           =   13935
      Begin VB.OptionButton optAllEsimate 
         Caption         =   "All"
         Height          =   195
         Left            =   120
         TabIndex        =   18
         Top             =   780
         Width           =   615
      End
      Begin VB.ComboBox cboUserName 
         Height          =   315
         Left            =   5160
         Sorted          =   -1  'True
         Style           =   2  'Dropdown List
         TabIndex        =   4
         Top             =   480
         Width           =   2535
      End
      Begin VB.ComboBox cboEstimate 
         Height          =   315
         ItemData        =   "frmViewAudit.frx":0442
         Left            =   1680
         List            =   "frmViewAudit.frx":0444
         Style           =   2  'Dropdown List
         TabIndex        =   16
         Top             =   600
         Width           =   2115
      End
      Begin VB.ComboBox cboEstimateType 
         Height          =   315
         ItemData        =   "frmViewAudit.frx":0446
         Left            =   1680
         List            =   "frmViewAudit.frx":0448
         Style           =   2  'Dropdown List
         TabIndex        =   15
         Top             =   240
         Width           =   2115
      End
      Begin VB.OptionButton optEsimate 
         Caption         =   "Estimate"
         Height          =   255
         Left            =   120
         TabIndex        =   14
         Top             =   480
         Width           =   975
      End
      Begin VB.OptionButton optCurrentEsimate 
         Caption         =   "Current Estimate"
         Height          =   255
         Left            =   120
         TabIndex        =   13
         Top             =   240
         Width           =   1515
      End
      Begin VB.TextBox txtDateTo 
         Enabled         =   0   'False
         Height          =   315
         Left            =   11400
         TabIndex        =   11
         Top             =   480
         Width           =   1095
      End
      Begin VB.CommandButton cmdDateTo 
         Caption         =   ">>"
         Enabled         =   0   'False
         Height          =   315
         Left            =   11040
         TabIndex        =   10
         Top             =   480
         Width           =   315
      End
      Begin VB.TextBox txtDateFrom 
         Enabled         =   0   'False
         Height          =   315
         Left            =   9540
         TabIndex        =   8
         Top             =   480
         Width           =   1095
      End
      Begin VB.CommandButton cmdDateFrom 
         Caption         =   ">>"
         Enabled         =   0   'False
         Height          =   315
         Left            =   9180
         TabIndex        =   7
         Top             =   480
         Width           =   315
      End
      Begin VB.CheckBox chkAndDate 
         Height          =   195
         Left            =   7680
         TabIndex        =   5
         Top             =   540
         Width           =   195
      End
      Begin VB.CommandButton cmdShow 
         Caption         =   "Show Results"
         Height          =   315
         Left            =   12540
         TabIndex        =   3
         Top             =   480
         Width           =   1335
      End
      Begin VB.Label lblDateTo 
         Caption         =   "To:"
         Height          =   195
         Left            =   10740
         TabIndex        =   9
         Top             =   540
         Width           =   375
      End
      Begin VB.Label lblDateFrom 
         Caption         =   "And Dates From:"
         Height          =   255
         Left            =   7920
         TabIndex        =   6
         Top             =   540
         Width           =   1275
      End
      Begin VB.Label lblUserName 
         Caption         =   "And User Name:"
         Height          =   195
         Left            =   3960
         TabIndex        =   2
         Top             =   540
         Width           =   1215
      End
   End
   Begin MSDataGridLib.DataGrid grdModifyHistory 
      Height          =   6495
      Left            =   60
      TabIndex        =   0
      Top             =   1140
      Width           =   13995
      _ExtentX        =   24686
      _ExtentY        =   11456
      _Version        =   393216
      BackColor       =   12648447
      ForeColor       =   16711680
      HeadLines       =   1
      RowHeight       =   15
      BeginProperty HeadFont {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   204
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Caption         =   "HISTORY LOG"
      ColumnCount     =   2
      BeginProperty Column00 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   4105
            SubFormatType   =   0
         EndProperty
      EndProperty
      BeginProperty Column01 
         DataField       =   ""
         Caption         =   ""
         BeginProperty DataFormat {6D835690-900B-11D0-9484-00A0C91110ED} 
            Type            =   0
            Format          =   ""
            HaveTrueFalseNull=   0
            FirstDayOfWeek  =   0
            FirstWeekOfYear =   0
            LCID            =   4105
            SubFormatType   =   0
         EndProperty
      EndProperty
      SplitCount      =   1
      BeginProperty Split0 
         BeginProperty Column00 
         EndProperty
         BeginProperty Column01 
         EndProperty
      EndProperty
   End
End
Attribute VB_Name = "frmViewAudit"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Option Explicit

Public m_str_EstimateNumber As String
Public m_str_EstimateType As String
Public m_b_FromAdministration As Boolean

Private m_str_Msg As String
Private Const m_str_const_RBEstimate As String = "Rebuilt Part Estimate"
Private Const m_str_const_MBEstimate As String = "Make Vs. Buy Estimate"
Private Const m_str_const_VehEstimate As String = "Vehicle Estimate"
Private Const m_str_const_OEMKit As String = "OEM Kit"
Private Const m_str_const_NSCP As String = "Non-Stock Coded Part"

Private Sub calDateFrom_Click()
    On Error GoTo Error_Handler
    
    txtDateFrom.Text = Format(calDateFrom.Value, "yyyy-mmm-dd")
    calDateFrom.Visible = False
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "calDateFrom_Click", g_l_ErrorLineNumber
End Sub

Private Sub calDateTo_Click()
    On Error GoTo Error_Handler
    
    txtDateTo.Text = Format(calDateTo.Value, "yyyy-mmm-dd")
    calDateTo.Visible = False
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "calDateTo_Click", g_l_ErrorLineNumber
End Sub

Private Sub cboEstimateType_Click()
    Dim l_Count As Long
    Dim RS As ADODB.Recordset
'    Dim str_EstimateType As String
    
    On Error GoTo Error_Handler
    
    If optEsimate.Value = True Then
        If Trim(cboEstimateType.Text) = m_str_const_RBEstimate Then
            m_str_EstimateType = "RB"
        ElseIf Trim(cboEstimateType.Text) = m_str_const_MBEstimate Then
            m_str_EstimateType = "MB"
        ElseIf Trim(cboEstimateType.Text) = m_str_const_VehEstimate Then
            m_str_EstimateType = "BUS"
        ElseIf Trim(cboEstimateType.Text) = m_str_const_OEMKit Then
            m_str_EstimateType = "KIT"
        ElseIf Trim(cboEstimateType.Text) = m_str_const_NSCP Then
            m_str_EstimateType = "NSCP"
        End If
        'Based on data in the cboEstimateType combo-box, fill the cboEstimate combo-box.
        Set RS = New ADODB.Recordset
        
        Set RS = modDBHelper.RetrieveAudit3( _
                            "CES_INQUIRY.RETRIEVE_AUDIT_3", _
                            m_str_EstimateType)

        cboEstimate.Clear
        If RS.RecordCount > 0 Then
            RS.MoveFirst
            cboEstimate.AddItem "*"
            For l_Count = 0 To RS.RecordCount - 1
                cboEstimate.AddItem RS.Fields.Item("estimate_number")
                RS.MoveNext
            Next l_Count
        End If
        
        Set RS = Nothing
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cboEstimateType_Click", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub chkAndDate_Click()
    On Error GoTo Error_Handler

    If chkAndDate.Value = 1 Then
        cmdDateFrom.Enabled = True
        cmdDateTo.Enabled = True
    Else
        cmdDateFrom.Enabled = False
        calDateFrom.Visible = False
        cmdDateTo.Enabled = False
        calDateTo.Visible = False
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "chkAndDate_Click", g_l_ErrorLineNumber
End Sub

Private Sub cmdDateFrom_Click()
    On Error GoTo Error_Handler
    
    calDateTo.Visible = False
    calDateFrom.Visible = True
    calDateFrom.Today
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdDateFrom_Click", g_l_ErrorLineNumber
End Sub

Private Sub cmdDateTo_Click()
    On Error GoTo Error_Handler
    
    calDateFrom.Visible = False
    calDateTo.Visible = True
    calDateTo.Today
   
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdDateTo_Click", g_l_ErrorLineNumber
End Sub

Private Sub cmdShow_Click()
    Dim l_Count As Long
    Dim RS As ADODB.Recordset
    Dim b_DateIsChecked As Boolean
'    Dim str_EstimateType As String
    
    On Error GoTo Error_Handler
    
    calDateFrom.Visible = False
    calDateTo.Visible = False
    
    
    If optEsimate.Value = True Then
        If Trim(cboEstimate.Text) = "" Then
            m_str_Msg = "Please provide Estimate."
            MsgBox m_str_Msg
            cboEstimate.SetFocus
            Exit Sub
        End If
    End If
    
    b_DateIsChecked = False
    If chkAndDate.Value = 1 Then
        If IsDate(txtDateFrom.Text) = False Then
            m_str_Msg = "Please provide Date From."
            MsgBox m_str_Msg
            Exit Sub
        End If
        If IsDate(txtDateTo.Text) = False Then
            m_str_Msg = "Please provide Date To."
            MsgBox m_str_Msg
            Exit Sub
        End If
        If CDate(txtDateFrom.Text) >= CDate(txtDateTo.Text) Then
            m_str_Msg = "Date From should be less than Date To."
            MsgBox m_str_Msg
            Exit Sub
        End If
        b_DateIsChecked = True
    End If
    
    Call SetWaitCursor
    
    If Trim(cboEstimateType.Text) = m_str_const_RBEstimate Then
        m_str_EstimateType = "RB"
    ElseIf Trim(cboEstimateType.Text) = m_str_const_MBEstimate Then
        m_str_EstimateType = "MB"
    ElseIf Trim(cboEstimateType.Text) = m_str_const_VehEstimate Then
        m_str_EstimateType = "BUS"
    ElseIf Trim(cboEstimateType.Text) = m_str_const_OEMKit Then
        m_str_EstimateType = "KIT"
    ElseIf Trim(cboEstimateType.Text) = m_str_const_NSCP Then
        m_str_EstimateType = "NSCP"
    End If

    Set RS = New ADODB.Recordset
    
    If optAllEsimate.Value = True Then
        If cboUserName.Text = "ALL USERS" Then
            If b_DateIsChecked = False Then
                Set RS = modDBHelper.RetrieveAudit1( _
                                "CES_INQUIRY.RETRIEVE_AUDIT_1")
            Else
                Set RS = modDBHelper.RetrieveAudit2( _
                                "CES_INQUIRY.RETRIEVE_AUDIT_2", _
                                txtDateFrom.Text, _
                                txtDateTo.Text)
            End If
        Else
            If b_DateIsChecked = False Then
                Set RS = modDBHelper.RetrieveAudit4( _
                                "CES_INQUIRY.RETRIEVE_AUDIT_4", _
                                cboUserName.Text)
            
            Else
                Set RS = modDBHelper.RetrieveAudit5( _
                                "CES_INQUIRY.RETRIEVE_AUDIT_5", _
                                cboUserName.Text, _
                                txtDateFrom.Text, _
                                txtDateTo.Text)
            
            End If
        End If
        Set grdModifyHistory.DataSource = RS
        grdModifyHistory.Columns("ESTIMATE_NUMBER").Visible = True
        grdModifyHistory.Columns("ESTIMATE_TYPE").Visible = True
    Else 'If optAllEsimate.Value = False Then
        If cboUserName.Text = "ALL USERS" Then
            If b_DateIsChecked = False Then
                Set RS = modDBHelper.RetrieveAudit6( _
                                "CES_INQUIRY.RETRIEVE_AUDIT_6", _
                                Trim(cboEstimate.Text), _
                                m_str_EstimateType)
            Else
                Set RS = modDBHelper.RetrieveAudit7( _
                                "CES_INQUIRY.RETRIEVE_AUDIT_7", _
                                Trim(cboEstimate.Text), _
                                m_str_EstimateType, _
                                txtDateFrom.Text, _
                                txtDateTo.Text)
            End If
        Else
            If b_DateIsChecked = False Then
                Set RS = modDBHelper.RetrieveAudit8( _
                                "CES_INQUIRY.RETRIEVE_AUDIT_8", _
                                Trim(cboEstimate.Text), _
                                m_str_EstimateType, _
                                cboUserName.Text)
            Else
                Set RS = modDBHelper.RetrieveAudit9( _
                                "CES_INQUIRY.RETRIEVE_AUDIT_9", _
                                Trim(cboEstimate.Text), _
                                m_str_EstimateType, _
                                cboUserName.Text, _
                                txtDateFrom.Text, _
                                txtDateTo.Text)
            End If
        End If
        Set grdModifyHistory.DataSource = RS
        grdModifyHistory.Columns("ESTIMATE_NUMBER").Visible = False
        grdModifyHistory.Columns("ESTIMATE_TYPE").Visible = False
    End If
                        
    Set RS = Nothing
    grdModifyHistory.Columns("ID").Visible = False
    grdModifyHistory.Columns("DATE_CHANGED").NumberFormat = "yyyy-mmm-dd hh:mm:ss AMPM"
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdShow_Click", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    Call SetDefaultCursor
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    Call PopulateControls
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub PopulateControls()
    Dim l_Count As Long
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    cboEstimateType.AddItem m_str_const_RBEstimate
    cboEstimateType.AddItem m_str_const_VehEstimate
    cboEstimateType.AddItem m_str_const_MBEstimate
    cboEstimateType.AddItem m_str_const_OEMKit
    cboEstimateType.AddItem m_str_const_NSCP
    
    If m_str_EstimateType = "MB" Then
        cboEstimateType.Text = m_str_const_MBEstimate
    ElseIf m_str_EstimateType = "BUS" Then
        cboEstimateType.Text = m_str_const_VehEstimate
    ElseIf m_str_EstimateType = "RB" Then
        cboEstimateType.Text = m_str_const_RBEstimate
    ElseIf m_str_EstimateType = "KIT" Then
        cboEstimateType.Text = m_str_const_OEMKit
    End If

    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.RetrieveAllUsers("CES_INQUIRY.RETRIEVE_ALL_USERS")
    If RS.RecordCount > 0 Then
        RS.MoveFirst
        For l_Count = 0 To RS.RecordCount - 1
            cboUserName.AddItem RS.Fields.Item("USER NAME")
            RS.MoveNext
        Next l_Count
    End If
    Set RS = Nothing
    
    cboUserName.AddItem "ALL USERS"
    cboUserName.Text = "ALL USERS"
    
    Set grdModifyHistory.DataSource = Nothing
    
    If m_b_FromAdministration = False Then
        cboEstimate.Clear
        cboEstimate.AddItem m_str_EstimateNumber
        cboEstimate.Text = m_str_EstimateNumber
        
        Set RS = modDBHelper.RetrieveAudit6( _
                        "CES_INQUIRY.RETRIEVE_AUDIT_6", _
                        Trim(cboEstimate.Text), _
                        m_str_EstimateType)
        
        Set grdModifyHistory.DataSource = RS
        grdModifyHistory.Columns("ID").Visible = False
        grdModifyHistory.Columns("DATE_CHANGED").NumberFormat = "yyyy-mmm-dd hh:mm:ss AMPM"
        grdModifyHistory.Columns("ESTIMATE_NUMBER").Visible = False
        grdModifyHistory.Columns("ESTIMATE_TYPE").Visible = False
        
        optCurrentEsimate.Visible = True
        optCurrentEsimate.Value = True
        optEsimate.Value = False
        optAllEsimate.Value = False
        
        cboEstimateType.Visible = True
        cboEstimate.Visible = True
        cboEstimateType.Enabled = False
        cboEstimate.Enabled = False
    Else
        optCurrentEsimate.Visible = False
        optEsimate.Value = False
        optAllEsimate.Value = True
        Set RS = modDBHelper.RetrieveAudit1( _
                        "CES_INQUIRY.RETRIEVE_AUDIT_1")

        Set grdModifyHistory.DataSource = RS
        grdModifyHistory.Columns("ID").Visible = False
        grdModifyHistory.Columns("DATE_CHANGED").NumberFormat = "yyyy-mmm-dd hh:mm:ss AMPM"
        grdModifyHistory.Columns("ESTIMATE_NUMBER").Visible = True
        grdModifyHistory.Columns("ESTIMATE_TYPE").Visible = True
    End If

    If Not RS Is Nothing Then
        Set RS = Nothing
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateControls", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    Call SetDefaultCursor
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler

    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub optAllEsimate_Click()
    On Error GoTo Error_Handler
    
    cboEstimateType.Enabled = False
    cboEstimateType.Visible = False
    cboEstimate.Enabled = False
    cboEstimate.Visible = False

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "optAllEsimate_Click", g_l_ErrorLineNumber
End Sub

Private Sub optCurrentEsimate_Click()
    On Error GoTo Error_Handler

    If optCurrentEsimate = True Then
        cboEstimateType.Visible = True
        cboEstimate.Visible = True
        cboEstimateType.Enabled = True
        If m_str_EstimateType = "MB" Then
            cboEstimateType.Text = m_str_const_MBEstimate
        ElseIf m_str_EstimateType = "BUS" Then
            cboEstimateType.Text = m_str_const_VehEstimate
        ElseIf m_str_EstimateType = "RB" Then
            cboEstimateType.Text = m_str_const_RBEstimate
        ElseIf m_str_EstimateType = "KIT" Then
            cboEstimateType.Text = m_str_const_OEMKit
        End If
        cboEstimateType.Enabled = False
        
        cboEstimate.Enabled = True
        cboEstimate.Clear
        cboEstimate.AddItem m_str_EstimateNumber
        cboEstimate.Text = m_str_EstimateNumber
        cboEstimate.Enabled = False
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "optCurrentEsimate_Click", g_l_ErrorLineNumber
End Sub

Private Sub optEsimate_Click()
    Dim l_Count As Long
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler

    Call SetWaitCursor
    
    If optEsimate.Value = True Then
        cboEstimateType.Visible = True
        cboEstimate.Visible = True
        cboEstimateType.Enabled = True
        cboEstimate.Enabled = True
        If Trim(cboEstimateType.Text) = m_str_const_RBEstimate Then
            m_str_EstimateType = "RB"
        ElseIf Trim(cboEstimateType.Text) = m_str_const_MBEstimate Then
            m_str_EstimateType = "MB"
        ElseIf Trim(cboEstimateType.Text) = m_str_const_VehEstimate Then
            m_str_EstimateType = "BUS"
        ElseIf Trim(cboEstimateType.Text) = m_str_const_OEMKit Then
            m_str_EstimateType = "KIT"
        ElseIf Trim(cboEstimateType.Text) = m_str_const_NSCP Then
            m_str_EstimateType = "NSCP"
        End If
        'Based on data in the cboEstimateType combo-box, fill the cboEstimate combo-box.
        Set RS = New ADODB.Recordset
        
        Set RS = modDBHelper.RetrieveAudit3( _
                            "CES_INQUIRY.RETRIEVE_AUDIT_3", _
                            m_str_EstimateType)
        cboEstimate.Clear
        If RS.RecordCount > 0 Then
            RS.MoveFirst
            cboEstimate.AddItem "*"
            For l_Count = 0 To RS.RecordCount - 1
                cboEstimate.AddItem RS.Fields.Item("estimate_number")
                RS.MoveNext
            Next l_Count
        End If
        
        Set RS = Nothing
    Else
        cboEstimateType.Enabled = False
        cboEstimate.Enabled = False
    End If

    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "optEsimate_Click", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    Call SetDefaultCursor
End Sub
frmViewOEMKitOption.frm :
VERSION 5.00
Object = "{F0D2F211-CCB0-11D0-A316-00AA00688B10}#1.0#0"; "msdatlst.ocx"
Begin VB.Form frmViewOEMKitOption 
   BorderStyle     =   1  'Fixed Single
   Caption         =   "View OEM Kit For Bus Cost Estimate"
   ClientHeight    =   2235
   ClientLeft      =   45
   ClientTop       =   330
   ClientWidth     =   4395
   Icon            =   "frmViewOEMKitOption.frx":0000
   LinkTopic       =   "Form13"
   MaxButton       =   0   'False
   MDIChild        =   -1  'True
   ScaleHeight     =   2235
   ScaleWidth      =   4395
   ShowInTaskbar   =   0   'False
   Begin VB.CommandButton cmdDeleteOEMKit 
      Caption         =   "Delete OEM Kit"
      Height          =   345
      Left            =   2265
      TabIndex        =   3
      Top             =   1605
      Width           =   1350
   End
   Begin VB.CommandButton cmdViewOEMKit 
      Caption         =   "View OEM Kit"
      Default         =   -1  'True
      Height          =   345
      Left            =   780
      TabIndex        =   0
      Top             =   1605
      Width           =   1350
   End
   Begin MSDataListLib.DataCombo cboOEMKitsList 
      Height          =   315
      Left            =   1335
      TabIndex        =   2
      Top             =   390
      Width           =   1785
      _ExtentX        =   3149
      _ExtentY        =   556
      _Version        =   393216
      Text            =   ""
   End
   Begin VB.Label lblInstructions 
      Alignment       =   2  'Center
      Caption         =   "Select the OEM kit you want to view for this Cost Estimate"
      BeginProperty Font 
         Name            =   "Times New Roman"
         Size            =   9.75
         Charset         =   0
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   540
      Left            =   150
      TabIndex        =   1
      Top             =   810
      Width           =   4155
   End
End
Attribute VB_Name = "frmViewOEMKitOption"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Option Explicit

Private m_str_VehicleNumber As String

Public Sub PassValues(ByVal str_Vehicle_Number As String)
    On Error GoTo Error_Handler
    
    m_str_VehicleNumber = str_Vehicle_Number
    Call RefreshForm
    Call UserPermissions
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PassValues", g_l_ErrorLineNumber
End Sub

Private Sub RefreshForm()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    'Load current vehicle's kit list
    Set RS = modDBHelper.RetrieveOEMKitsAttached("CES_INQUIRY.RETRIEVE_OEMKITS_ATTACHED", _
                                                 m_str_VehicleNumber)
       
    If RS.RecordCount > 0 Then
        Set cboOEMKitsList.RowSource = RS
        cboOEMKitsList.ListField = "Part_Number"
        cboOEMKitsList.Text = RS.Fields(0).Value
        cmdDeleteOEMKit.Enabled = True
    Else
        cboOEMKitsList.Text = ""
        cmdDeleteOEMKit.Enabled = False
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "RefreshForm", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub cmdDeleteOEMKit_Click()
    Dim str_Msg As String
    Dim str_PartID As String
    Dim l_RetVal As Long
    Dim l_Result As Long
    Dim m_str_Msg As String
    On Error GoTo Error_Handler
    
    m_str_Msg = "Are you sure you want to delete this OEM Kit from the Bus Estimate?"
    l_Result = MsgBox(m_str_Msg, vbOKCancel Or vbQuestion, "Delete OEM KIT from Estimate")
    If l_Result = vbOK Then
        Call SetWaitCursor
        l_Result = modDBHelper.DeleteOEMKitAttached("CES_DELETE.DELETE_OEMKIT_ATTACHED", _
                                              l_RetVal, _
                                              m_str_VehicleNumber, _
                                              cboOEMKitsList.Text)
        Call SetDefaultCursor
        MsgBox ("OEM Kit has been deleted from the Bus Estimate")
        'Add record to the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                                    "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                                    l_RetVal, _
                                    "Delete OEM Kit from Vehicle Estimate", _
                                    m_str_VehicleNumber, _
                                    "BUS", _
                                    "OEM Kit Number ---> " + cboOEMKitsList.Text, _
                                    "")
    End If
    
    Call frmVehCostEstimateMain.RefreshForm
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdDeleteOEMKit_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub cmdViewOEMKit_Click()
    Dim RS As Recordset
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    Set RS = modDBHelper.SearchSCPart("CES_INQUIRY.SEARCH_SC_PART", _
                                                  cboOEMKitsList.Text, _
                                                  "0", _
                                                  "", _
                                                  "", _
                                                  2)
                                                  
    If RS.RecordCount > 0 Then
        frmOEMKitMaterialsRegistered.PassValue cboOEMKitsList.Text
        If frmOEMKitMaterialsRegistered.WindowState = 1 Then
            frmOEMKitMaterialsRegistered.WindowState = 0
        End If
        frmOEMKitMaterialsRegistered.Show
        frmOEMKitMaterialsRegistered.SetFocus
    Else
        frmOEMKitMaterials.PassValues cboOEMKitsList.Text, CLng(m_str_VehicleNumber)
        If frmOEMKitMaterials.WindowState = 1 Then
            frmOEMKitMaterials.WindowState = 0
        End If
        frmOEMKitMaterials.Show
        frmOEMKitMaterials.SetFocus
    End If
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdViewOEMKit_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub UserPermissions()
    On Error GoTo Error_Handler

    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        cmdDeleteOEMKit.Visible = False
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "UserPermissions", g_l_ErrorLineNumber
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler

    Call RefreshForm
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor
    'Keep the form open until the Make Buy Estimate Closes
    If UnloadMode = 0 Then
        Cancel = True
        Me.Hide
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub
frmViewReports.frm :
VERSION 5.00
Object = "{00025600-0000-0000-C000-000000000046}#5.2#0"; "Crystl32.OCX"
Begin VB.Form frmViewReports 
   Caption         =   "CES Report"
   ClientHeight    =   3195
   ClientLeft      =   60
   ClientTop       =   345
   ClientWidth     =   4680
   Icon            =   "frmViewReports.frx":0000
   LinkTopic       =   "Form1"
   ScaleHeight     =   3195
   ScaleWidth      =   4680
   StartUpPosition =   3  'Windows Default
   Begin Crystal.CrystalReport CrystalReport1 
      Left            =   1920
      Top             =   840
      _ExtentX        =   741
      _ExtentY        =   741
      _Version        =   348160
      WindowControlBox=   -1  'True
      WindowMaxButton =   -1  'True
      WindowMinButton =   -1  'True
      PrintFileLinesPerPage=   60
      WindowShowNavigationCtls=   -1  'True
      WindowShowCancelBtn=   -1  'True
      WindowShowPrintBtn=   -1  'True
      WindowShowExportBtn=   -1  'True
      WindowShowZoomCtl=   -1  'True
      WindowShowProgressCtls=   -1  'True
   End
End
Attribute VB_Name = "frmViewReports"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Option Explicit

frmViewStockCodedPart.frm :
VERSION 5.00
Begin VB.Form frmViewStockCodedPart 
   BorderStyle     =   3  'Fixed Dialog
   Caption         =   "View Stock Coded Part"
   ClientHeight    =   2640
   ClientLeft      =   45
   ClientTop       =   330
   ClientWidth     =   6570
   Icon            =   "frmViewStockCodedPart.frx":0000
   LinkTopic       =   "Form1"
   MaxButton       =   0   'False
   MinButton       =   0   'False
   ScaleHeight     =   2640
   ScaleWidth      =   6570
   StartUpPosition =   2  'CenterScreen
   Begin VB.CommandButton cmdClose 
      Caption         =   "Close"
      Default         =   -1  'True
      Height          =   375
      Left            =   2640
      TabIndex        =   4
      Top             =   2160
      Width           =   1215
   End
   Begin VB.Label lblPriceValue 
      BackColor       =   &H00FFFFFF&
      BorderStyle     =   1  'Fixed Single
      Height          =   285
      Left            =   1320
      TabIndex        =   3
      Top             =   1680
      Width           =   5055
   End
   Begin VB.Label lblKeywordValue 
      BackColor       =   &H00FFFFFF&
      BorderStyle     =   1  'Fixed Single
      Height          =   285
      Left            =   1320
      TabIndex        =   2
      Top             =   1320
      Width           =   5055
   End
   Begin VB.Label lblDescriptionValue 
      BackColor       =   &H00FFFFFF&
      BorderStyle     =   1  'Fixed Single
      Height          =   285
      Left            =   1320
      TabIndex        =   1
      Top             =   960
      Width           =   5055
   End
   Begin VB.Label lblStockCodeValue 
      BackColor       =   &H00FFFFFF&
      BorderStyle     =   1  'Fixed Single
      Height          =   285
      Left            =   1320
      TabIndex        =   0
      Top             =   600
      Width           =   5055
   End
   Begin VB.Label lblPrice 
      Alignment       =   1  'Right Justify
      Caption         =   "Price:"
      Height          =   255
      Left            =   120
      TabIndex        =   9
      Top             =   1680
      Width           =   1095
   End
   Begin VB.Label lblKeyword 
      Alignment       =   1  'Right Justify
      Caption         =   "Keyword:"
      Height          =   255
      Left            =   120
      TabIndex        =   8
      Top             =   1320
      Width           =   1095
   End
   Begin VB.Label lblDescription 
      Alignment       =   1  'Right Justify
      Caption         =   "Description:"
      Height          =   255
      Left            =   120
      TabIndex        =   7
      Top             =   960
      Width           =   1095
   End
   Begin VB.Label lblStockCode 
      Alignment       =   1  'Right Justify
      Caption         =   "Stock Code:"
      Height          =   255
      Left            =   120
      TabIndex        =   6
      Top             =   600
      Width           =   1095
   End
   Begin VB.Label lblViewStockCodedPart 
      Alignment       =   2  'Center
      Caption         =   "View Stock Coded Part"
      BeginProperty Font 
         Name            =   "Times New Roman"
         Size            =   14.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   375
      Left            =   1560
      TabIndex        =   5
      Top             =   120
      Width           =   3495
   End
End
Attribute VB_Name = "frmViewStockCodedPart"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Option Explicit

Public Sub PopulateForm(ByVal str_StockCode As String, _
                        ByVal str_Description As String, _
                        ByVal str_Keyword As String, _
                        ByVal str_Price As String)
    
    On Error GoTo Error_Handler
    
    'Display the values in the text fields
    lblStockCodeValue.Caption = " " & str_StockCode
    lblDescriptionValue.Caption = " " & str_Description
    lblKeywordValue.Caption = " " & str_Keyword
    lblPriceValue.Caption = " " & str_Price
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateForm", g_l_ErrorLineNumber
End Sub

Private Sub cmdClose_Click()
    On Error GoTo Error_Handler
    
    Unload Me
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdClose_Click", g_l_ErrorLineNumber
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler

    If g_l_AccessLevel = 1 Then
        lblPrice.Visible = False
        lblPriceValue.Visible = False
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Oracle Queries :
Oracle Functions :
CES_ARCHIVE :
create or replace PACKAGE BODY CES_ARCHIVE
IS

-- To modify this template, edit file PKGBODY.TXT in TEMPLATE
-- directory of SQL Navigator
--
-- Purpose: Briefly explain the functionality of the package body
--
-- MODIFICATION HISTORY
-- Person      Date    Comments
-- ---------   ------  ------------------------------------------
-- Enter procedure, function bodies as shown below

FUNCTION ARCHIVE_RB
    (vi_rebuilt_stock_num IN ARCH_RB_MASTERLIST.rebuilt_stock_num%TYPE,
     vi_username IN ARCH_RB_MASTERLIST.archived_by%TYPE,
     vi_link_number IN EMPLOYEE_LABOUR.link_number%TYPE,
     vi_typeid IN EMPLOYEE_LABOUR.typeid%TYPE,
     vi_labour_cost IN ARCH_RB_MASTERLIST.labour_cost%TYPE,
     vi_labour_overhead_amount IN ARCH_RB_MASTERLIST.labour_overhead_amount%TYPE,
     vi_labour_total IN ARCH_RB_MASTERLIST.labour_total%TYPE,
     vi_materials_total IN ARCH_RB_MASTERLIST.materials_total%TYPE,
     vi_total_rebuilt_part_cost IN ARCH_RB_MASTERLIST.total_rebuilt_part_cost%TYPE,
     vi_tax_total IN ARCH_RB_MASTERLIST.tax_total%TYPE,
     vi_total_cost_tax IN ARCH_RB_MASTERLIST.total_cost_tax%TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS

arch_id NUMBER;
V_PRICE NUMBER;
BEGIN
    -- 1. Insert new record into the ARCH_RB_MASTERLIST table
    INSERT INTO ARCH_RB_MASTERLIST
        (
         mms_stock_code,
         item_ref_number,
         detailed_desc,
         keyword,
         core_part_num,
         rebuilt_stock_num,
         core_charge,
         job_number,
         estimated_cost,
         sop_number,
         date_archived,
         archived_by,
         arch_rb_masterlist_id,
         labour_cost,
         labour_overhead_amount,
         labour_total,
         materials_total,
         total_rebuilt_part_cost,
         tax_total,
         total_cost_tax
        )
    SELECT
        mms_stock_code,
        item_ref_number,
        detailed_desc,
        keyword,
        core_part_num,
        rebuilt_stock_num,
        core_charge,
        job_number,
        estimated_cost,
        sop_number,
        SYSDATE,
        vi_username,
        ARCH_RB_MASTERLIST_SEQ.NEXTVAL,
        vi_labour_cost,
        vi_labour_overhead_amount,
        vi_labour_total,
        vi_materials_total,
        vi_total_rebuilt_part_cost,
        vi_tax_total,
        vi_total_cost_tax
    FROM
        RB_MASTERLIST
    WHERE
        UPPER(rebuilt_stock_num) = vi_rebuilt_stock_num;
    SELECT
        max(arch_rb_masterlist_id)
    INTO
        arch_id
    FROM ARCH_RB_MASTERLIST;
-- 2. Insert record(s) into the ARCH_RB_EMPLOYEE_LABOUR table
    INSERT INTO ARCH_RB_EMPLOYEE_LABOUR
        (
         labour_defn,
         date_entered,
         link_number,
         typeid,
         costcentre,
         ARCH_RB_EMPLOYEE_LABOUR.task,
         labour_type,
         usage,
         hrs_reqd,
         adj_hrs,
         time_addition,
         arch_rb_masterlist_id
        )
    SELECT
        labour_defn,
        date_entered,
        link_number,
        typeid,
        costcentre,
        EMPLOYEE_LABOUR.task,
        labour_type,
        usage,
        hrs_reqd,
        adj_hrs,
        time_addition,
        ARCH_RB_MASTERLIST_SEQ.CURRVAL
    FROM
        EMPLOYEE_LABOUR
    WHERE
        link_number = vi_link_number AND
        typeid = vi_typeid;


V_PRICE := get_material_cost(vi_link_number,vi_typeid);
    -- 3. Insert record(s) into the ARCH_RB_SC_PARTS_USED table
    INSERT INTO ARCH_RB_SC_PARTS_USED
        (
         mms_stock_code,
         date_entered,
         reb_part_cost,
         user_entered,
         mms_cost,
         oem_cost,
         mms_rebuilt_code,
         cost_centre,
         qty_reqd,
         percent_usage,
         link_code,
         rebuilt_part,
         link_type,
         corecost,
         arch_rb_masterlist_id,
         total_cost,
         SC_KEYWORD,
         SC_DESCRIPTION)

        SELECT
            upper(SC_PARTS_USED.mms_stock_code),
            SC_PARTS_USED.date_entered,
            nvl(A.RB_UNIT_COST,0) AS "UNIT COST",
            upper(SC_PARTS_USED.user_entered),
            nvl(SC_PARTS_USED.mms_cost,0),
            nvl(SC_PARTS_USED.oem_cost,0),
            UPPER(SC_PARTS_USED.mms_rebuilt_code) AS "REBUILT NUMBER",
            UPPER(SC_PARTS_USED.cost_centre) AS "CC",
            UPPER(SC_PARTS_USED.qty_reqd) AS "QTY",
            REPLACE(SC_PARTS_USED.percent_usage,',','.') AS "%",
            vi_link_number,
            'Y',
            'RB',
            SC_PARTS_USED.corecost AS "CORE COST",
            arch_id,
            nvl(A.RB_COST,0) AS "TOTAL COST",
            UPPER(RB_MASTERLIST.keyword) AS "KEYWORD",
            UPPER(RB_MASTERLIST.detailed_desc) AS "DESCRIPTION"
        FROM
            SC_PARTS_USED,
            RB_MASTERLIST,
            (SELECT
            round(sum(total_cost),2) as RB_COST, round(sum(total_unit_cost),2) as RB_UNIT_COST , rb_reference
        FROM
            TEMP_materials_list
        group by
            rb_reference) A
        WHERE
            SC_PARTS_USED.link_code = vi_link_number AND
            SC_PARTS_USED.rebuilt_part = 'Y' AND
            SC_PARTS_USED.link_type = vi_typeid AND
            RB_MASTERLIST.rebuilt_stock_num(+)= SC_PARTS_USED.mms_rebuilt_code AND
            rb_reference (+)= SC_PARTS_USED.mms_rebuilt_code;

   -- 3b. Insert record(s) into the ARCH_RB_SC_PARTS_USED table
    INSERT INTO ARCH_RB_SC_PARTS_USED
        (
         mms_stock_code,
         date_entered,
         reb_part_cost,
         user_entered,
         mms_cost,
         oem_cost,
         mms_rebuilt_code,
         cost_centre,
         qty_reqd,
         percent_usage,
         link_code,
         rebuilt_part,
         link_type,
         corecost,
         arch_rb_masterlist_id,
         total_cost,
         SC_KEYWORD,
         SC_DESCRIPTION)
    SELECT
        A.mms_stock_code,
        A.date_entered,
        A.reb_part_cost,
        A.user_entered,
        A.mms_cost,
        A.oem_cost,
        A.mms_rebuilt_code,
        A.cost_centre,
        A.qty_reqd,
        A.percent_usage,
        A.link_code,
        A.rebuilt_part,
        A.link_type,
        cast(FINAL_COST(a.percent_usage, a.qty_reqd, a.corecost, 0)as number) as CORECOST,
        ARCH_RB_MASTERLIST_SEQ.CURRVAL,
        A.mms_cost * cast(A.qty_reqd as number) * (to_number(replace(nvl(A.percent_usage,'0'),',','.'))/ 100),
        NVL(B.part_type,'') ,
        NVL(B.detailed_desc,'')
    FROM
        SC_PARTS_USED A, STOCK_CODED_PARTS B
    WHERE
        B.mms_stock_code (+)= A.mms_stock_code AND
        link_code = vi_link_number AND
        link_type = vi_typeid and
        rebuilt_part = 'N';

    -- 4. Insert record(s) into the ARCH_RB_NSC_PARTS_USED table
    INSERT INTO ARCH_RB_NSC_PARTS_USED
        (orig_supp_num,
         orig_supplier_name,
         cost_centre,
         qty_reqd,
         percent_usage,
         date_entered,
         entered_by,
         link_code,
         cost,
         link_type,
         corecost,
         arch_rb_masterlist_id,
         total_cost)
    SELECT
        orig_supp_num,
        orig_supplier_name,
        cost_centre,
        qty_reqd,
        percent_usage,
        date_entered,
        entered_by,
        link_code,
        cost,
        link_type,
        CAST(FINAL_COST(percent_usage, qty_reqd, corecost, 0) AS NUMBER) as CORECOST,
        arch_id,
        cost * cast(qty_reqd as number) * (to_number(replace(nvl(percent_usage,'0'),',','.'))/ 100)
    FROM
         NSC_PARTS_USED
    WHERE
        link_code = vi_link_number AND
        link_type = vi_typeid;



     V_PRICE := get_labour_cost(vi_link_number,vi_typeid);

    -- 5. Insert record(s) into the ARCH_RB_LABOUR_CC_TOTAL table
    INSERT INTO ARCH_RB_LABOUR_CC_TOTAL
        (

         cost_centre,
         total_hours,
         ARCH_RB_MASTERLIST_ID
        )
       SELECT
            CC AS "COST CENTRE",
            SUM(extended_time) AS "LABOUR HRS",
            arch_id
        FROM
            TEMP_LABOUR_LIST
        GROUP BY
            CC;

-- 6. Insert record(s) into the ARCH_RB_MATERIALS_CC_TOTAL table
/*    INSERT INTO ARCH_RB_MATERIALS_CC_TOTAL
        (
         cost_centre,
         total_cost,
         arch_rb_masterlist_id
        )


    SELECT
        a.cost_centre AS cost_centre,
        sum(a.cost) AS total_cost,
        arch_id
    FROM
        (SELECT
            cost_centre,
            FINAL_COST(percent_usage, qty_reqd, mms_cost, corecost) AS cost
         FROM
            SC_PARTS_USED
         WHERE
            link_code = vi_link_number AND
            rebuilt_part = 'N' AND
            link_type =vi_typeid
            UNION ALL
                SELECT
                    cost_centre,
                    FINAL_COST(percent_usage, qty_reqd, reb_part_cost, corecost) as cost
                FROM
                    SC_PARTS_USED
                WHERE
                    link_code = vi_link_number AND
                    rebuilt_part = 'Y' AND
                    link_type =vi_typeid
                    UNION ALL
                        SELECT
                            cost_centre,
                            FINAL_COST(percent_usage, qty_reqd, cost, corecost) as cost
                        FROM
                            NSC_PARTS_USED
                        WHERE
                            link_code = vi_link_number AND
                            link_type =vi_typeid) a
        GROUP BY
            A.cost_centre;
  */

   INSERT INTO ARCH_RB_LIST_BUSES
        (
         bus_description,
         arch_rb_masterlist_id
        )

    SELECT
        LIST_OF_BUSES.description,
        arch_id
    FROM
        RB_LIST_OF_BUSES,
        LIST_OF_BUSES
    WHERE
        rebuilt_stock_num = vi_link_number AND
        RB_LIST_OF_BUSES.list_id = LIST_OF_BUSES.list_id;


V_PRICE := get_material_cost(vi_link_number,vi_typeid);

INSERT INTO ARCH_RB_MATERIALS_CC_TOTAL
        (COST_CENTRE,
        TOTAL_COST,
        ARCH_RB_MASTERLIST_ID

        )
        SELECT
            COST_CENTRE AS "CC",
            SUM(TOTAL_COST) AS "TOTAL COST",
            arch_id
        FROM
            TEMP_MATERIALS_LIST
        GROUP BY
            COST_CENTRE;


     vo_ret_val := 0;
    RETURN 0;




    EXCEPTION
        WHEN no_data_found THEN
            ROLLBACK;
		    vo_ret_val := -1;
		    RETURN -1;
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -2;
            RETURN -2;
END ARCHIVE_RB;





FUNCTION ARCHIVE_VEHICLE
    (vi_veh_series_code IN ARCH_VEHICLE_LIST.veh_series_code%TYPE,
     vi_username IN ARCH_VEHICLE_LIST.archived_by%TYPE,
     vi_link_number IN EMPLOYEE_LABOUR.link_number%TYPE,
     vi_typeid IN EMPLOYEE_LABOUR.typeid%TYPE,
     vi_labour_cost IN ARCH_VEHICLE_LIST.labour_cost%TYPE,
     vi_labour_overhead_amount IN ARCH_VEHICLE_LIST.labour_overhead_amount%TYPE,
     vi_labour_total IN ARCH_VEHICLE_LIST.labour_total%TYPE,
     vi_materials_total IN ARCH_VEHICLE_LIST.materials_total%TYPE,
     vi_total_bus_estimate_cost IN ARCH_VEHICLE_LIST.total_bus_estimate_cost%TYPE,
     vi_tax_total IN ARCH_VEHICLE_LIST.total_tax%TYPE,
     vi_total_cost_tax IN ARCH_VEHICLE_LIST.total_cost_tax%TYPE,
     vi_oem_kits_total IN ARCH_VEHICLE_LIST.oem_kits_total%TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS

arch_id NUMBER;
 V_PRICE NUMBER;
 emesg VARCHAR2(250);

BEGIN
    -- 1. Insert new record into the ARCH_RB_MASTERLIST table
    INSERT INTO ARCH_VEHICLE_LIST
        (veh_series_code,
         proj_desc,
         make,
         model,
         year,
         engine,
         transmission,
         differential,
         date_archived,
         archived_by,
         arch_vehicle_list_id,
         labour_cost,
         labour_overhead_amount,
         labour_total,
         materials_total,
         total_bus_estimate_cost,
         total_tax,
         total_cost_tax,
         oem_kits_total,
         sopnumber,
         OLD_ID,
         num_of_vehicles
        )
    SELECT
        veh_series_code,
        proj_desc,
        make,
        model,
        year,
        engine,
        transmission,
        differential,
        SYSDATE,
        vi_username,
        ARCH_VEHICLE_LIST_SEQ.NEXTVAL,
        vi_labour_cost,
        vi_labour_overhead_amount,
        vi_labour_total,
        vi_materials_total,
        vi_total_bus_estimate_cost,
        vi_tax_total,
        vi_total_cost_tax,
        vi_oem_kits_total,
        sopnumber,
        vehicle_list_id,
        num_of_vehicles
    FROM
        VEHICLE_LIST
    WHERE
        vehicle_list_id = VI_LINK_NUMBER;

-- 2. Insert record(s) into the ARCH_RB_EMPLOYEE_LABOUR table
    INSERT INTO ARCH_VEH_EMPLOYEE_LABOUR
        (
         labour_defn,
         date_entered,
         link_number,
         typeid,
         costcentre,
         ARCH_VEH_EMPLOYEE_LABOUR.task,
         labour_type,
         usage,
         hrs_reqd,
         adj_hrs,
         time_addition,
         arch_vehicle_list_id
        )
    SELECT
        labour_defn,
        date_entered,
        link_number,
        typeid,
        costcentre,
        EMPLOYEE_LABOUR.task,
        labour_type,
        usage,
        hrs_reqd,
        adj_hrs,
        time_addition,
        ARCH_VEHICLE_LIST_SEQ.CURRVAL
    FROM
        EMPLOYEE_LABOUR
    WHERE
        link_number = vi_link_number AND
        typeid = vi_typeid;

    -- 3. Insert record(s) into the ARCH_VEH_SC_PARTS_USED table
V_PRICE := get_material_cost(vi_link_number,vi_typeid);

    INSERT INTO ARCH_VEH_SC_PARTS_USED
        (
         mms_stock_code,
         date_entered,
         reb_part_cost,
         user_entered,
         mms_cost,
         oem_cost,
         mms_rebuilt_code,
         cost_centre,
         qty_reqd,
         percent_usage,
         link_code,
         rebuilt_part,
         link_type,
         corecost,
         arch_vehicle_list_id,
         total_cost,
         SC_KEYWORD,
         SC_DESCRIPTION)

        SELECT
            upper(SC_PARTS_USED.mms_stock_code),
            SC_PARTS_USED.date_entered,
            nvl(A.RB_UNIT_COST,0) AS "UNIT COST",
            upper(SC_PARTS_USED.user_entered),
            nvl(SC_PARTS_USED.mms_cost,0),
            nvl(SC_PARTS_USED.oem_cost,0),
            UPPER(SC_PARTS_USED.mms_rebuilt_code) AS "REBUILT NUMBER",
            UPPER(SC_PARTS_USED.cost_centre) AS "CC",
            UPPER(SC_PARTS_USED.qty_reqd) AS "QTY",
            REPLACE(SC_PARTS_USED.percent_usage,',','.') AS "%",
            vi_link_number,
            'Y',
            'RB',
            SC_PARTS_USED.corecost AS "CORE COST",
            ARCH_VEHICLE_LIST_SEQ.CURRVAL,
            nvl(A.RB_COST,0) AS "TOTAL COST",
            UPPER(RB_MASTERLIST.keyword) AS "KEYWORD",
            UPPER(RB_MASTERLIST.detailed_desc) AS "DESCRIPTION"
        FROM
            SC_PARTS_USED,
            RB_MASTERLIST,
            (SELECT
            round(sum(total_cost),2) as RB_COST, round(sum(total_unit_cost),2) as RB_UNIT_COST , rb_reference
        FROM
            TEMP_materials_list
        group by
            rb_reference) A
        WHERE
            SC_PARTS_USED.link_code = vi_link_number AND
            SC_PARTS_USED.rebuilt_part = 'Y' AND
            SC_PARTS_USED.link_type = vi_typeid AND
            RB_MASTERLIST.rebuilt_stock_num(+)= SC_PARTS_USED.mms_rebuilt_code AND
            rb_reference (+)= SC_PARTS_USED.mms_rebuilt_code;

   -- 3b. Insert record(s) into the ARCH_VEH_SC_PARTS_USED table
    INSERT INTO ARCH_VEH_SC_PARTS_USED
        (
         mms_stock_code,
         date_entered,
         reb_part_cost,
         user_entered,
         mms_cost,
         oem_cost,
         mms_rebuilt_code,
         cost_centre,
         qty_reqd,
         percent_usage,
         link_code,
         rebuilt_part,
         link_type,
         corecost,
         arch_vehicle_list_id,
         total_cost,
         SC_KEYWORD,
         SC_DESCRIPTION)
    SELECT
        A.mms_stock_code,
        A.date_entered,
        A.reb_part_cost,
        A.user_entered,
        A.mms_cost,
        A.oem_cost,
        A.mms_rebuilt_code,
        A.cost_centre,
        A.qty_reqd,
        A.percent_usage,
        A.link_code,
        A.rebuilt_part,
        A.link_type,
        cast(FINAL_COST(a.percent_usage, a.qty_reqd, a.corecost, 0)as number) as CORECOST,
        ARCH_VEHICLE_LIST_SEQ.CURRVAL,
        A.mms_cost * cast(A.qty_reqd as number) * (to_number(replace(nvl(A.percent_usage,'0'),',','.'))/ 100),
        NVL(B.part_type,'') ,
        NVL(B.detailed_desc,'')
    FROM
        SC_PARTS_USED A, STOCK_CODED_PARTS B
    WHERE
        B.mms_stock_code (+)= A.mms_stock_code AND
        link_code = vi_link_number AND
        link_type = vi_typeid and
        rebuilt_part = 'N';

    -- 4. Insert record(s) into the ARCH_VEH_NSC_PARTS_USED table
    INSERT INTO ARCH_VEH_NSC_PARTS_USED
        (orig_supp_num,
         orig_supplier_name,
         cost_centre,
         qty_reqd,
         percent_usage,
         date_entered,
         entered_by,
         link_code,
         cost,
         link_type,
         corecost,
         arch_vehicle_list_id,
         total_cost)
    SELECT
        orig_supp_num,
        orig_supplier_name,
        cost_centre,
        qty_reqd,
        percent_usage,
        date_entered,
        entered_by,
        link_code,
        cost,
        link_type,
        cast(FINAL_COST(percent_usage, qty_reqd, corecost, 0)as number) as CORECOST,
        ARCH_VEHICLE_LIST_SEQ.CURRVAL,
        cost * cast(qty_reqd as number) * (to_number(replace(nvl(percent_usage,'0'),',','.'))/ 100)
    FROM
         NSC_PARTS_USED
    WHERE
        link_code = vi_link_number AND
        link_type = vi_typeid;



    SELECT
        max(arch_vehicle_list_id)
    INTO
        arch_id
    FROM ARCH_VEHICLE_LIST;

    -- 5. Insert record(s) into the ARCH_RB_LABOUR_CC_TOTAL table
      V_PRICE := get_labour_cost(vi_link_number,vi_typeid);

    -- 5. Insert record(s) into the ARCH_RB_LABOUR_CC_TOTAL table
    INSERT INTO ARCH_VEH_LABOUR_CC_TOTAL
        (

         cost_centre,
         total_hours,
         ARCH_VEHICLE_LIST_ID
        )
       SELECT
            CC AS "COST CENTRE",
            SUM(extended_time) AS "LABOUR HRS",
            arch_id
        FROM
            TEMP_LABOUR_LIST
        GROUP BY
            CC;
/*
-- 6. Insert record(s) into the ARCH_RB_MATERIALS_CC_TOTAL table
    INSERT INTO ARCH_VEH_MATERIALS_CC_TOTAL
        (
         cost_centre,
         total_cost,
         arch_vehicle_list_id
        )


    SELECT
        a.cost_centre AS cost_centre,
        sum(a.cost) AS total_cost,
        arch_id
    FROM
        (SELECT
            cost_centre,
            FINAL_COST(percent_usage, qty_reqd, mms_cost, corecost) AS cost
         FROM
            SC_PARTS_USED
         WHERE
            link_code = vi_link_number AND
            rebuilt_part = 'N' AND
            link_type =vi_typeid
            UNION ALL
                SELECT
                    cost_centre,
                    FINAL_COST(percent_usage, qty_reqd, reb_part_cost, corecost) as cost
                FROM
                    SC_PARTS_USED
                WHERE
                    link_code = vi_link_number AND
                    rebuilt_part = 'Y' AND
                    link_type =vi_typeid
                    UNION ALL
                        SELECT
                            cost_centre,
                            FINAL_COST(percent_usage, qty_reqd, cost, corecost) as cost
                        FROM
                            NSC_PARTS_USED
                        WHERE
                            link_code = vi_link_number AND
                            link_type =vi_typeid) a
        GROUP BY
            A.cost_centre; */
/*Archive the kits attached to the vehicle estimate along with their prices */
     INSERT INTO ARCH_VEH_KITS
        (
         part_number,
         estimated_cost,
         arch_vehicle_list_id
        )
    SELECT
        KITS_USED.part_number,
        KITS_MASTERLIST.estimated_cost,
        ARCH_VEHICLE_LIST_SEQ.CURRVAL
    FROM
        KITS_USED,
        KITS_MASTERLIST
    WHERE
        KITS_USED.part_number = KITS_MASTERLIST.part_number and
        KITS_USED.link_code = vi_link_number;

V_PRICE := get_material_cost(vi_link_number,vi_typeid);

INSERT INTO ARCH_VEH_MATERIALS_CC_TOTAL
        (COST_CENTRE,
        TOTAL_COST,
        ARCH_VEHICLE_LIST_ID

        )
        SELECT
            COST_CENTRE AS "CC",
            SUM(TOTAL_COST) AS "TOTAL COST",
            arch_id
        FROM
            TEMP_MATERIALS_LIST
        GROUP BY
            COST_CENTRE;
 --ARCHIVE RB PARTS IN VEHICLE


    vo_ret_val := 0;
    RETURN 0;

    EXCEPTION
        WHEN no_data_found THEN
            ROLLBACK;
            emesg := SQLERRM;
            dbms_output.put_line(emesg);
		    vo_ret_val := -1;
		    RETURN -1;
        WHEN others THEN
            ROLLBACK;
            emesg := SQLERRM;
            dbms_output.put_line(emesg);

            vo_ret_val := -2;
            RETURN -1;
END ARCHIVE_VEHICLE;



FUNCTION ARCHIVE_MB
    (vi_mb_number IN ARCH_MB_MASTERLIST.mb_number%TYPE,
     vi_username IN NSC_PARTS_USED.entered_by%TYPE,
     vi_link_number IN EMPLOYEE_LABOUR.link_number%TYPE,
     vi_typeid IN EMPLOYEE_LABOUR.typeid%TYPE,
     vi_labour_cost IN ARCH_MB_MASTERLIST.labour_cost%TYPE,
     vi_labour_overhead_amount IN ARCH_MB_MASTERLIST.labour_overhead_amount%TYPE,
     vi_labour_total IN ARCH_MB_MASTERLIST.labour_total%TYPE,
     vi_materials_total IN ARCH_MB_MASTERLIST.materials_total%TYPE,
     vi_total_mb_estimate_cost IN ARCH_MB_MASTERLIST.total_mb_estimate_cost%TYPE,
     vi_tax_total IN ARCH_MB_MASTERLIST.total_tax%TYPE,
     vi_total_cost_tax IN ARCH_MB_MASTERLIST.total_cost_tax%TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS
arch_id NUMBER;
V_PRICE NUMBER;
BEGIN


    -- 1. Insert new record into the ARCH_RB_MASTERLIST table
    INSERT INTO ARCH_MB_MASTERLIST
        (mb_number,
         keyword,
         description,
         bus_type,
         num_bus_comp,
         vendor_part_num,
         buy_code,
         rebuild_code,
         core_code,
         annual_usage,
         bench_number,
         sample_provided,
         recommendation,
         reman_cost,
         external_cost,
         buy_new_cost,
         internal_cost,
         sop_number,
         core_cost,
         job_number,
         date_archived,
         archived_by,
         labour_cost,
         labour_overhead_amount,
         labour_total,
         materials_total,
         total_mb_estimate_cost,
         arch_mb_masterlist_id,
         total_tax,
         total_cost_tax
        )
    SELECT
         MB_LIST.mb_number,
         MB_LIST.keyword,
         MB_LIST.description,
         MB_LIST.bus_type,
         MB_LIST.num_bus_comp,
         MB_LIST.vendor_part_num,
         MB_LIST.buy_code,
         MB_LIST.rebuild_code,
         MB_LIST.core_code,
         MB_LIST.annual_usage,
         MB_LIST.bench_number,
         MB_LIST.sample_provided,
         MB_LIST.recommendation,
         MB_LIST.reman_cost,
         MB_LIST.external_cost,
         nvl(STOCK_CODED_PARTS.MMS_NEW_COST,0),
         MB_LIST.internal_cost,
         MB_LIST.sop_number,
         MB_LIST.core_cost,
         NVL(MB_LIST.job_number, ' '),
         SYSDATE,
         vi_username,
         vi_labour_cost,
         vi_labour_overhead_amount,
         vi_labour_total,
         vi_materials_total,
         vi_total_mb_estimate_cost,
         ARCH_MB_LIST_SEQ.NEXTVAL,
         vi_tax_total,
         vi_total_cost_tax

    FROM
        MB_LIST MB_LIST, stock_coded_parts stock_coded_parts WHERE MB_LIST.buy_code = STOCK_CODED_PARTS.mms_stock_code(+) and

        MB_LIST.mb_number = vi_mb_number;

-- 2. Insert record(s) into the ARCH_RB_EMPLOYEE_LABOUR table
    INSERT INTO ARCH_MB_EMPLOYEE_LABOUR
        (
         labour_defn,
         date_entered,
         link_number,
         typeid,
         costcentre,
         ARCH_MB_EMPLOYEE_LABOUR.task,
         labour_type,
         usage,
         hrs_reqd,
         adj_hrs,
         time_addition,
         arch_MB_masterlist
        )
    SELECT
        labour_defn,
        date_entered,
        link_number,
        typeid,
        costcentre,
        EMPLOYEE_LABOUR.task,
        labour_type,
        usage,
        hrs_reqd,
        adj_hrs,
        time_addition,
        ARCH_MB_LIST_SEQ.CURRVAL
    FROM
        EMPLOYEE_LABOUR
    WHERE
        link_number = vi_link_number AND
        typeid = vi_typeid;

    -- 3. Insert record(s) into the ARCH_MB_SC_PARTS_USED table
V_PRICE := get_material_cost(vi_link_number,vi_typeid);
    INSERT INTO ARCH_MB_SC_PARTS_USED
        (
         mms_stock_code,
         date_entered,
         reb_part_cost,
         user_entered,
         mms_cost,
         oem_cost,
         mms_rebuilt_code,
         cost_centre,
         qty_reqd,
         percent_usage,
         link_code,
         rebuilt_part,
         link_type,
         corecost,
         arch_mb_masterlist_id,
         total_cost,
         SC_KEYWORD,
         SC_DESCRIPTION)

        SELECT
            upper(SC_PARTS_USED.mms_stock_code),
            SC_PARTS_USED.date_entered,
            nvl(A.RB_UNIT_COST,0) AS "UNIT COST",
            upper(SC_PARTS_USED.user_entered),
            nvl(SC_PARTS_USED.mms_cost,0),
            nvl(SC_PARTS_USED.oem_cost,0),
            UPPER(SC_PARTS_USED.mms_rebuilt_code) AS "REBUILT NUMBER",
            UPPER(SC_PARTS_USED.cost_centre) AS "CC",
            UPPER(SC_PARTS_USED.qty_reqd) AS "QTY",
            REPLACE(SC_PARTS_USED.percent_usage,',','.') AS "%",
            vi_link_number,
            'Y',
            'RB',
            SC_PARTS_USED.corecost AS "CORE COST",
            ARCH_MB_LIST_SEQ.CURRVAL,
            nvl(A.RB_COST,0) AS "TOTAL COST",
            UPPER(RB_MASTERLIST.keyword) AS "KEYWORD",
            UPPER(RB_MASTERLIST.detailed_desc) AS "DESCRIPTION"
        FROM
            SC_PARTS_USED,
            RB_MASTERLIST,
            (SELECT
            round(sum(total_cost),2) as RB_COST, round(sum(total_unit_cost),2) as RB_UNIT_COST , rb_reference
        FROM
            TEMP_materials_list
        group by
            rb_reference) A
        WHERE
            SC_PARTS_USED.link_code = vi_link_number AND
            SC_PARTS_USED.rebuilt_part = 'Y' AND
            SC_PARTS_USED.link_type = vi_typeid AND
            RB_MASTERLIST.rebuilt_stock_num(+)= SC_PARTS_USED.mms_rebuilt_code AND
            rb_reference (+)= SC_PARTS_USED.mms_rebuilt_code;

   -- 3b. Insert record(s) into the ARCH_MB_SC_PARTS_USED table
    INSERT INTO ARCH_MB_SC_PARTS_USED
        (
         mms_stock_code,
         date_entered,
         reb_part_cost,
         user_entered,
         mms_cost,
         oem_cost,
         mms_rebuilt_code,
         cost_centre,
         qty_reqd,
         percent_usage,
         link_code,
         rebuilt_part,
         link_type,
         corecost,
         arch_mb_masterlist_id,
         total_cost,
         SC_KEYWORD,
         SC_DESCRIPTION)
    SELECT
        A.mms_stock_code,
        A.date_entered,
        A.reb_part_cost,
        A.user_entered,
        A.mms_cost,
        A.oem_cost,
        A.mms_rebuilt_code,
        A.cost_centre,
        A.qty_reqd,
        A.percent_usage,
        A.link_code,
        A.rebuilt_part,
        A.link_type,
        cast(FINAL_COST(a.percent_usage, a.qty_reqd, a.corecost, 0)as number) as CORECOST,
        ARCH_MB_LIST_SEQ.CURRVAL,
        A.mms_cost * cast(A.qty_reqd as number) * (to_number(replace(nvl(A.percent_usage,'0'),',','.'))/ 100),
        NVL(B.part_type,'') ,
        NVL(B.detailed_desc,'')
    FROM
        SC_PARTS_USED A, STOCK_CODED_PARTS B
    WHERE
        B.mms_stock_code (+)= A.mms_stock_code AND
        link_code = vi_link_number AND
        link_type = vi_typeid and
        rebuilt_part = 'N';

    -- 4. Insert record(s) into the ARCH_RB_NSC_PARTS_USED table
    INSERT INTO ARCH_MB_NSC_PARTS_USED
        (orig_supp_num,
         orig_supplier_name,
         cost_centre,
         qty_reqd,
         percent_usage,
         date_entered,
         entered_by,
         link_code,
         cost,
         link_type,
         corecost,
         arch_mb_masterlist_id,
         total_cost)
    SELECT
        orig_supp_num,
        orig_supplier_name,
        cost_centre,
        qty_reqd,
        percent_usage,
        date_entered,
        entered_by,
        link_code,
        cost,
        link_type,
        cast(FINAL_COST(percent_usage, qty_reqd, corecost, 0)as number) as CORECOST,
        ARCH_MB_LIST_SEQ.CURRVAL,
        cost * cast(qty_reqd as number) * (to_number(replace(nvl(percent_usage,'0'),',','.'))/ 100)
    FROM
         NSC_PARTS_USED
    WHERE
        link_code = vi_link_number AND
        link_type = vi_typeid;

    SELECT
        max(arch_mb_masterlist_id)
    INTO
        arch_id
    FROM ARCH_MB_MASTERLIST;

    -- 5. Insert record(s) into the ARCH_RB_LABOUR_CC_TOTAL table
  INSERT INTO ARCH_MB_LABOUR_CC_TOTAL
        (
         cost_centre,
         total_hours,
         ARCH_MB_MASTERLIST_ID
        )
       SELECT
            CC AS "COST CENTRE",
            SUM(extended_time) AS "LABOUR HRS",
            arch_id
        FROM
            TEMP_LABOUR_LIST
        GROUP BY
            CC;

-- 6. Insert record(s) into the ARCH_RB_MATERIALS_CC_TOTAL table
/*    INSERT INTO ARCH_MB_MATERIALS_CC_TOTAL
        (
         cost_centre,
         total_cost,
         arch_mb_masterlist_id
        )
    SELECT
        a.cost_centre AS cost_centre,
        sum(a.cost) AS total_cost,
        arch_id
    FROM
        (SELECT
            cost_centre,
            FINAL_COST(percent_usage, qty_reqd, mms_cost, corecost) AS cost
         FROM
            SC_PARTS_USED
         WHERE
            link_code = vi_link_number AND
            rebuilt_part = 'N' AND
            link_type =vi_typeid
            UNION ALL
                SELECT
                    cost_centre,
                    FINAL_COST(percent_usage, qty_reqd, reb_part_cost, corecost) as cost
                FROM
                    SC_PARTS_USED
                WHERE
                    link_code = vi_link_number AND
                    rebuilt_part = 'Y' AND
                    link_type =vi_typeid
                    UNION ALL
                        SELECT
                            cost_centre,
                            FINAL_COST(percent_usage, qty_reqd, cost, corecost) as cost
                        FROM
                            NSC_PARTS_USED
                        WHERE
                            link_code = vi_link_number AND
                            link_type =vi_typeid) a
        GROUP BY
            A.cost_centre;
*/
 INSERT INTO ARCH_MB_LIST_BUSES
        (
         bus_description,
         arch_mb_masterlist_id
        )

    SELECT
        LIST_OF_BUSES.description,
        arch_id
    FROM
        MB_LIST_OF_BUSES,
        LIST_OF_BUSES
    WHERE
        mb_number = vi_link_number AND
        MB_LIST_OF_BUSES.list_id = LIST_OF_BUSES.list_id;


--V_PRICE := get_material_cost(vi_link_number,vi_typeid);

INSERT INTO ARCH_MB_MATERIALS_CC_TOTAL
        (COST_CENTRE,
        TOTAL_COST,
        ARCH_MB_MASTERLIST_ID

        )
        SELECT
            COST_CENTRE AS "CC",
            SUM(TOTAL_COST) AS "TOTAL COST",
            arch_id
        FROM
            TEMP_MATERIALS_LIST
        GROUP BY
            COST_CENTRE;


    vo_ret_val := 0;
    RETURN 0;

    EXCEPTION
        WHEN no_data_found THEN
            ROLLBACK;
		    vo_ret_val := -1;
		    RETURN -1;
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -2;
            RETURN -1;
END ARCHIVE_MB;

PROCEDURE GET_ARCH_RB_LIST_BUSES
    (vi_arch_rb_masterlist_id IN ARCH_RB_SC_PARTS_USED.arch_rb_masterlist_id%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
            bus_description
        FROM
            ARCH_RB_LIST_BUSES
        WHERE
            arch_rb_masterlist_id = vi_arch_rb_masterlist_id;
END GET_ARCH_RB_LIST_BUSES;


PROCEDURE GET_ARCH_RB_NSC_PARTS_USED
    (vi_arch_rb_masterlist_id IN ARCH_RB_NSC_PARTS_USED.arch_rb_masterlist_id%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
            *
        FROM
            ARCH_RB_NSC_PARTS_USED
        WHERE
            arch_rb_masterlist_id = vi_arch_rb_masterlist_id;
END GET_ARCH_RB_NSC_PARTS_USED;

PROCEDURE GET_ARCH_RB_RB_PARTS_USED
    (vi_arch_rb_masterlist_id IN ARCH_RB_SC_PARTS_USED.arch_rb_masterlist_id%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
            *
        FROM
            ARCH_RB_SC_PARTS_USED
        WHERE
            arch_rb_masterlist_id = vi_arch_rb_masterlist_id  and
            rebuilt_part = 'Y';
END GET_ARCH_RB_RB_PARTS_USED;

PROCEDURE GET_ARCH_RB_MASTERLIST_RBNUM
    (vi_rebuilt_code IN ARCH_RB_MASTERLIST.rebuilt_stock_num%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
         MMS_STOCK_CODE,
         ITEM_REF_NUMBER,
         DETAILED_DESC,
         KEYWORD,
         CORE_PART_NUM,
         UPPER(REBUILT_STOCK_NUM) AS "REBUILT_STOCK_NUM",
         CORE_CHARGE,
         JOB_NUMBER,
         ESTIMATED_COST,
         SOP_NUMBER,
         DATE_ARCHIVED,
         ARCHIVED_BY,
         ARCH_RB_MASTERLIST_ID,
         LABOUR_COST,
         LABOUR_OVERHEAD_AMOUNT,
         LABOUR_TOTAL,
         MATERIALS_TOTAL,
         TOTAL_REBUILT_PART_COST,
         TAX_TOTAL,
         TOTAL_COST_TAX
        FROM
            ARCH_RB_MASTERLIST
        WHERE
            UPPER(REBUILT_STOCK_NUM) = vi_rebuilt_code;
END GET_ARCH_RB_MASTERLIST_RBNUM;


PROCEDURE GET_ARCH_RB_MASTERLIST_BY_ID
    (vi_arch_rb_masterlist_id IN ARCH_RB_EMPLOYEE_LABOUR.arch_rb_masterlist_id%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
            *
        FROM
            ARCH_RB_MASTERLIST
        WHERE
            arch_rb_masterlist_id = vi_arch_rb_masterlist_id;
END GET_ARCH_RB_MASTERLIST_BY_ID;

PROCEDURE RETRIEVE_ARCH_RB
    (vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
        SELECT
            ARCH_RB_MASTERLIST_ID,
            MMS_STOCK_CODE AS "MMS Stock Code",
            DETAILED_DESC AS "Detailed Description",
            KEYWORD AS "Keyword",
            DATE_ARCHIVED AS "Date Archived",
            ESTIMATED_COST AS "Estimated Cost"
        FROM
            ARCH_RB_MASTERLIST;
END RETRIEVE_ARCH_RB;


PROCEDURE GET_ARCH_RB_EMPLOYEE_LABOUR
    (vi_arch_rb_masterlist_id IN ARCH_RB_EMPLOYEE_LABOUR.arch_rb_masterlist_id%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
             labour_defn AS "Labour Type",
             costcentre AS "CC",
             task AS "Task",
             usage AS "Usage",
             hrs_reqd AS "Time",
             adj_hrs AS "Actual Time"
        FROM
            ARCH_RB_EMPLOYEE_LABOUR
        WHERE
            arch_rb_masterlist_id = vi_arch_rb_masterlist_id;
END GET_ARCH_RB_EMPLOYEE_LABOUR;

PROCEDURE GET_ARCH_RB_LABOUR_CC_TOTAL
    (vi_arch_rb_masterlist_id IN ARCH_RB_LABOUR_CC_TOTAL.arch_rb_masterlist_id%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
            cost_centre AS "Cost Centre",
            DECIMAL_MINUTES_TO_HHMM(total_hours) AS "Total Hours"
        FROM
            ARCH_RB_LABOUR_CC_TOTAL
        WHERE
            arch_rb_masterlist_id = vi_arch_rb_masterlist_id;
END GET_ARCH_RB_LABOUR_CC_TOTAL;

PROCEDURE GET_ARCH_RB_MATERIALS_CC_TOTAL
    (vi_arch_rb_masterlist_id IN ARCH_RB_MATERIALS_CC_TOTAL.arch_rb_masterlist_id%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
            cost_centre AS "Cost Centre",
            total_cost AS "Total Cost"
        FROM
            ARCH_RB_MATERIALS_CC_TOTAL
        WHERE
            arch_rb_masterlist_id = vi_arch_rb_masterlist_id;
END GET_ARCH_RB_MATERIALS_CC_TOTAL;

PROCEDURE GET_ARCH_RB_SC_PARTS_USED
    (vi_arch_rb_masterlist_id IN ARCH_RB_SC_PARTS_USED.arch_rb_masterlist_id%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
            *
        FROM
            ARCH_RB_SC_PARTS_USED
        WHERE
            arch_rb_masterlist_id = vi_arch_rb_masterlist_id  and
            rebuilt_part = 'N';
END GET_ARCH_RB_SC_PARTS_USED;

/*****************************************************************************/
PROCEDURE GET_ARCH_MB_LIST_BUSES
    (vi_arch_mb_masterlist_id IN ARCH_MB_SC_PARTS_USED.arch_mb_masterlist_id%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
            bus_description
        FROM
            ARCH_MB_LIST_BUSES
        WHERE
            arch_mb_masterlist_id = vi_arch_mb_masterlist_id;
END GET_ARCH_MB_LIST_BUSES;


PROCEDURE GET_ARCH_MB_EMPLOYEE_LABOUR
    (vi_arch_mb_masterlist_id IN ARCH_MB_EMPLOYEE_LABOUR.arch_mb_masterlist%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
             labour_defn AS "Labour Type",
             costcentre AS "CC",
             task AS "Task",
             usage AS "Usage",
             hrs_reqd AS "Time",
             adj_hrs AS "Actual Time"
        FROM
            ARCH_MB_EMPLOYEE_LABOUR
        WHERE
            arch_mb_masterlist = vi_arch_mb_masterlist_id;
END GET_ARCH_MB_EMPLOYEE_LABOUR;

PROCEDURE GET_ARCH_MB_LABOUR_CC_TOTAL
    (vi_arch_mb_masterlist_id IN ARCH_MB_LABOUR_CC_TOTAL.arch_mb_masterlist_id%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
            cost_centre AS "Cost Centre",
            DECIMAL_MINUTES_TO_HHMM(total_hours) AS "Total Hours"
        FROM
            ARCH_MB_LABOUR_CC_TOTAL
        WHERE
            arch_mb_masterlist_id = vi_arch_mb_masterlist_id;
END GET_ARCH_MB_LABOUR_CC_TOTAL;

PROCEDURE GET_ARCH_MB_MATERIALS_CC_TOTAL
    (vi_arch_mb_masterlist_id IN ARCH_MB_MATERIALS_CC_TOTAL.arch_mb_masterlist_id%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
            cost_centre AS "Cost Centre",
            total_cost AS "Total Cost"
        FROM
            ARCH_MB_MATERIALS_CC_TOTAL
        WHERE
            arch_mb_masterlist_id = vi_arch_mb_masterlist_id;
END GET_ARCH_MB_MATERIALS_CC_TOTAL;

PROCEDURE GET_ARCH_MB_SC_PARTS_USED
    (vi_arch_mb_masterlist_id IN ARCH_MB_SC_PARTS_USED.arch_mb_masterlist_id%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
            *
        FROM
            ARCH_MB_SC_PARTS_USED
        WHERE
            arch_mb_masterlist_id = vi_arch_mb_masterlist_id  and
            rebuilt_part = 'N';
END GET_ARCH_MB_SC_PARTS_USED;


PROCEDURE GET_ARCH_MB_NSC_PARTS_USED
    (vi_arch_mb_masterlist_id IN ARCH_MB_NSC_PARTS_USED.arch_mb_masterlist_id%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
            UPPER(ARCH_MB_NSC_PARTS_USED.orig_supp_num) AS "Orig Supp Num",
            UPPER(ARCH_MB_NSC_PARTS_USED.orig_supplier_name) AS "Orig Supplier Name",

            ARCH_MB_NSC_PARTS_USED.cost AS "Unit Cost",
            UPPER(ARCH_MB_NSC_PARTS_USED.qty_reqd) AS "QTY",
            REPLACE(ARCH_MB_NSC_PARTS_USED.percent_usage,',','.') AS "%",
            REPLACE(FINAL_COST(ARCH_MB_NSC_PARTS_USED.percent_usage, ARCH_MB_NSC_PARTS_USED.qty_reqd,ARCH_MB_NSC_PARTS_USED.corecost,0),',','.') AS "CORE COST",
            REPLACE(FINAL_COST(ARCH_MB_NSC_PARTS_USED.percent_usage, ARCH_MB_NSC_PARTS_USED.qty_reqd, ARCH_MB_NSC_PARTS_USED.cost, 0),',','.') AS "TOTAL COST",
            UPPER(ARCH_MB_NSC_PARTS_USED.cost_centre) AS "CC"
        FROM
            ARCH_MB_NSC_PARTS_USED
        WHERE
            arch_mb_masterlist_id = vi_arch_mb_masterlist_id;
END GET_ARCH_MB_NSC_PARTS_USED;

PROCEDURE GET_ARCH_MB_RB_PARTS_USED
    (vi_arch_mb_masterlist_id IN ARCH_MB_SC_PARTS_USED.arch_mb_masterlist_id%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
            *
        FROM
            ARCH_MB_SC_PARTS_USED
        WHERE
            arch_mb_masterlist_id = vi_arch_mb_masterlist_id  and
            rebuilt_part = 'Y';
END GET_ARCH_MB_RB_PARTS_USED;

PROCEDURE GET_ARCH_MB_MASTERLIST_MBNUM
    (vi_mb_number IN ARCH_MB_MASTERLIST.mb_number%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
            *
        FROM
            ARCH_MB_MASTERLIST
        WHERE
            mb_number = vi_mb_number;
END GET_ARCH_MB_MASTERLIST_MBNUM;


PROCEDURE GET_ARCH_MB_MASTERLIST_BY_ID
    (vi_arch_mb_masterlist_id IN ARCH_MB_EMPLOYEE_LABOUR.arch_mb_masterlist%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
            *
        FROM
            ARCH_MB_MASTERLIST
        WHERE
            arch_mb_masterlist_id = vi_arch_mb_masterlist_id;
END GET_ARCH_MB_MASTERLIST_BY_ID;

/*****************************************************************************************/

PROCEDURE GET_ARCH_VEH_EMPLOYEE_LABOUR
     (vi_arch_veh_masterlist_id IN ARCH_VEH_SC_PARTS_USED.arch_vehicle_list_id%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
             labour_defn AS "Labour Type",
             costcentre AS "CC",
             task AS "Task",
             usage AS "Usage",
             hrs_reqd AS "Time",
             adj_hrs AS "Actual Time",
             time_addition as "Time Addition"
        FROM
            ARCH_VEH_EMPLOYEE_LABOUR
        WHERE
            arch_vehicle_list_id = vi_arch_veh_masterlist_id;
END GET_ARCH_VEH_EMPLOYEE_LABOUR;

PROCEDURE GET_ARCH_VEH_LABOUR_CC_TOTAL
     (vi_arch_veh_masterlist_id IN ARCH_VEH_SC_PARTS_USED.arch_vehicle_list_id%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT

            cost_centre AS "Cost Centre",

            DECIMAL_MINUTES_TO_HHMM(total_hours) AS "Total Hours"
        FROM
            ARCH_VEH_LABOUR_CC_TOTAL
        WHERE
            arch_vehicle_list_id = vi_arch_veh_masterlist_id;
END GET_ARCH_VEH_LABOUR_CC_TOTAL;

PROCEDURE GET_ARCH_VEH_MAT_CC_TOTAL
     (vi_arch_veh_masterlist_id IN ARCH_VEH_SC_PARTS_USED.arch_vehicle_list_id%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
            cost_centre AS "Cost Centre",
            total_cost AS "Total Cost"
        FROM
            ARCH_VEH_MATERIALS_CC_TOTAL
        WHERE
            arch_vehicle_list_id = vi_arch_veh_masterlist_id;
END GET_ARCH_VEH_MAT_CC_TOTAL;

PROCEDURE GET_ARCH_VEH_SC_PARTS_USED
     (vi_arch_veh_masterlist_id IN ARCH_VEH_SC_PARTS_USED.arch_vehicle_list_id%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
            *
        FROM
            ARCH_VEH_SC_PARTS_USED
        WHERE
            arch_vehicle_list_id = vi_arch_veh_masterlist_id and
            rebuilt_part = 'N';
END GET_ARCH_VEH_SC_PARTS_USED;


PROCEDURE GET_ARCH_VEH_NSC_PARTS_USED
    (vi_arch_veh_masterlist_id IN ARCH_VEH_SC_PARTS_USED.arch_vehicle_list_id%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
            *
        FROM
            ARCH_VEH_NSC_PARTS_USED
        WHERE
            arch_vehicle_list_id = vi_arch_veh_masterlist_id;
END GET_ARCH_VEH_NSC_PARTS_USED;

PROCEDURE GET_ARCH_VEH_RB_PARTS_USED
    (vi_arch_veh_masterlist_id IN ARCH_VEH_SC_PARTS_USED.arch_vehicle_list_id%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
            *
        FROM
            ARCH_VEH_SC_PARTS_USED
        WHERE
            arch_vehicle_list_id = vi_arch_veh_masterlist_id and
            rebuilt_part = 'Y';
END GET_ARCH_VEH_RB_PARTS_USED;




PROCEDURE GET_ARCH_VEH_MASTERLIST_BY_ID
   (vi_arch_veh_masterlist_id IN ARCH_VEH_SC_PARTS_USED.arch_vehicle_list_id%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
            *
        FROM
             ARCH_VEHICLE_LIST
        WHERE
            arch_vehicle_list_id = vi_arch_veh_masterlist_id;
END GET_ARCH_VEH_MASTERLIST_BY_ID;

PROCEDURE GET_ARCH_VEH_MASTERLIST
   (vi_arch_veh_bus_id IN ARCH_VEHICLE_LIST.old_id%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
            *
        FROM
             ARCH_VEHICLE_LIST
        where
            UPPER(NVL(old_id,0)) LIKE '%' ||TRIM(upper(vi_arch_veh_bus_id))||'%' ORDER BY VEH_SERIES_CODE, OLD_ID, DATE_ARCHIVED;

END GET_ARCH_VEH_MASTERLIST;

PROCEDURE GET_ARCH_VEH_BY_OLDID
   (vi_arch_veh_old_id IN ARCH_VEHICLE_LIST.old_id%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
            *
        FROM
             ARCH_VEHICLE_LIST
        WHERE
            old_id = vi_arch_veh_old_id;
END GET_ARCH_VEH_BY_OLDID;

PROCEDURE GET_ARCH_VEH_KIT_LIST
   (vi_arch_veh_masterlist_id IN ARCH_VEH_SC_PARTS_USED.arch_vehicle_list_id%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
            *
        FROM
             ARCH_VEH_KITS
        WHERE
            arch_vehicle_list_id = vi_arch_veh_masterlist_id;
END GET_ARCH_VEH_KIT_LIST;

PROCEDURE GET_ARCH_VEH_KIT_LIST_PART
   (vi_kit_number in arch_veh_kits.part_number%TYPE,
    vi_arch_veh_masterlist_id IN ARCH_VEH_SC_PARTS_USED.arch_vehicle_list_id%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
            *
        FROM
             ARCH_VEH_KITS
        WHERE
            arch_vehicle_list_id = vi_arch_veh_masterlist_id AND
            UPPER(part_number) = UPPER(vi_kit_number);
END GET_ARCH_VEH_KIT_LIST_PART;

PROCEDURE SEARCH_ARCHIVE_HISTORY
   (vi_estimate_number in VARCHAR,
   vi_estimate_type in VARCHAR,
   vi_chkDate IN INTEGER,
   vi_date_from IN VARCHAR,
   vi_date_to IN VARCHAR,

     vo_Cursor OUT query_cur) IS
BEGIN
    IF (vi_estimate_type  = 'RB') THEN

        IF (vi_chkDate = 1) THEN
            if (vi_estimate_number = '*') then
                OPEN vo_cursor FOR
                SELECT
                *
                FROM
                ARCH_RB_MASTERLIST where
                date_archived >= TO_DATE(vi_date_from) AND
                date_archived <= TO_DATE(vi_date_to);
             else

                 OPEN vo_cursor FOR
                SELECT
                *
                FROM
                ARCH_RB_MASTERLIST where
                rebuilt_stock_num = vi_estimate_number AND
                date_archived >= TO_DATE(vi_date_from) AND
                date_archived <= TO_DATE(vi_date_to);
             end if;
         else
            if (vi_estimate_number = '*') then
                 OPEN vo_cursor FOR
                SELECT
                *
                FROM
                ARCH_RB_MASTERLIST;
            else

                OPEN vo_cursor FOR
                SELECT
                *
                FROM
                ARCH_RB_MASTERLIST where
                rebuilt_stock_num = vi_estimate_number;
            end if;
         end if;

    ELSIF (vi_estimate_type  = 'MB') THEN
        IF (vi_chkDate = 1) THEN
            if (vi_estimate_number = '*') then
                OPEN vo_cursor FOR
                SELECT
                *
                FROM
                  ARCH_MB_MASTERLIST where
                  date_archived >= TO_DATE(vi_date_from) AND
                  date_archived <= TO_DATE(vi_date_to);
            else

                OPEN vo_cursor FOR
                SELECT
                    *
                FROM
                ARCH_MB_MASTERLIST where
                mb_number = vi_estimate_number and
                date_archived >= TO_DATE(vi_date_from) AND
                date_archived <= TO_DATE(vi_date_to);
             end if;

        ELSE
             if (vi_estimate_number = '*') then
                OPEN vo_cursor FOR
                SELECT
                *
                FROM
                  ARCH_MB_MASTERLIST;
            else

                OPEN vo_cursor FOR
                SELECT
                    *
                FROM
                 ARCH_MB_MASTERLIST where
                mb_number = vi_estimate_number;
            end if;
        END IF;
    ELSIF (vi_estimate_type  = 'BUS') THEN
        IF (vi_chkDate = 1) THEN
             if (vi_estimate_number = '*') then
                OPEN vo_cursor FOR
                SELECT *
                FROM
                ARCH_VEHICLE_LIST  where
                date_archived >= TO_DATE(vi_date_from) AND
                date_archived <= TO_DATE(vi_date_to);
              else
                OPEN vo_cursor FOR
                SELECT *
                FROM
                ARCH_VEHICLE_LIST  where
                old_id = vi_estimate_number and
                date_archived >= TO_DATE(vi_date_from) AND
                date_archived <= TO_DATE(vi_date_to);
              end if;

        else
             if (vi_estimate_number = '*') then
                OPEN vo_cursor FOR
                SELECT *
                FROM
                ARCH_VEHICLE_LIST ORDER BY OLD_ID ASC,DATE_ARCHIVED ASC;
            else
                OPEN vo_cursor FOR
                SELECT
                *
                FROM
                ARCH_VEHICLE_LIST where
                old_id = vi_estimate_number;
               END IF;
         END IF;
      END IF;
END SEARCH_ARCHIVE_HISTORY;

END CES_ARCHIVE;

CES_INQUIRY :
create or replace PACKAGE BODY ces_inquiry AS
--The package body PCTS_INQUIRY Purpose is to get user input from ASP and DLL
--and retrieve  and pass (active recordset) data from PCTS tables:
--
-- MODIFICATION HISTORY
-- Person      Date    Comments
-- ---------   ------  ----------------------------------------
-- Anthony C   5/25/04 Created procedures SEARCH_NSC_RBPARTLIST
-- Anthony C   5/27/04 Created procedures SEARCH_NSC_PART
-- Scott B     8/13/04 Created procedures SEARCH_SC_PART
-- Dhaksayan S 4/30/09 Created procedures RPT_COST_VARIANCE_2

--  Search the incident table when given the
--  input parameters declared in the Procedure

PROCEDURE SEARCH_NSC_RBPARTLIST
   (vi_orig_supplier_num IN NSC_PARTS_USED.orig_supp_num%TYPE,
    vi_oem_part_cost IN NON_STOCK_CODED_PARTS.oem_part_cost%TYPE,
    vi_description IN NON_STOCK_CODED_PARTS.detailed_desc%TYPE,
    vi_cost_comparetype IN INTEGER,
    vo_Cursor OUT query_cur) IS
BEGIN
    IF (vi_cost_comparetype = 0) THEN
        OPEN vo_cursor FOR SELECT
            UPPER(RB_MASTERLIST.rebuilt_stock_num) AS "REBUILT NUMBER",
            UPPER(RB_MASTERLIST.mms_stock_code) AS "MMS STOCK CODE",
            UPPER(RB_MASTERLIST.keyword) AS "KEYWORD",
            UPPER(RB_MASTERLIST.detailed_desc) AS "DESCRIPTION",
            RB_MASTERLIST.rowid
            /*UPPER(RB_MASTERLIST.rebuilt_stock_num) AS "REBUILT NUMBER",
            UPPER(RB_MASTERLIST.detailed_desc) AS "DESCRIPTION",
            UPPER(RB_MASTERLIST.mms_stock_code) AS "MMS STOCK CODE",
            RB_MASTERLIST.rowid */
        FROM
            NSC_PARTS_USED,
            NON_STOCK_CODED_PARTS,
            RB_MASTERLIST
        WHERE
            NVL(NSC_PARTS_USED.orig_supp_num,' ') LIKE
                TRIM(vi_orig_supplier_num) AND
            UPPER(NVL(NON_STOCK_CODED_PARTS.detailed_desc, ' ')) LIKE
                '%'||TRIM(UPPER(vi_description))||'%' AND
            NSC_PARTS_USED.orig_supp_num = NON_STOCK_CODED_PARTS.orig_supplier_num AND
            NSC_PARTS_USED.link_code = RB_MASTERLIST.rebuilt_stock_num AND
            NON_STOCK_CODED_PARTS.oem_part_cost <= vi_oem_part_cost AND
            NSC_PARTS_USED.link_type = 'RB';
    ELSIF (vi_cost_comparetype = 1) THEN
        OPEN vo_cursor FOR
            SELECT
                UPPER(RB_MASTERLIST.rebuilt_stock_num) AS "REBUILT NUMBER",
                UPPER(RB_MASTERLIST.mms_stock_code) AS "MMS STOCK CODE",
                UPPER(RB_MASTERLIST.keyword) AS "KEYWORD",
                UPPER(RB_MASTERLIST.detailed_desc) AS "DESCRIPTION",
                RB_MASTERLIST.rowid
                /* UPPER(RB_MASTERLIST.rebuilt_stock_num) AS "REBUILT NUMBER",
                UPPER(RB_MASTERLIST.detailed_desc) AS "DESCRIPTION",
                UPPER(RB_MASTERLIST.mms_stock_code) AS "MMS STOCK CODE",
                RB_MASTERLIST.rowid */
            FROM
                NSC_PARTS_USED,
                NON_STOCK_CODED_PARTS,
                RB_MASTERLIST
            WHERE
                NVL(NSC_PARTS_USED.orig_supp_num,' ') LIKE
                    TRIM(vi_orig_supplier_num) AND
                UPPER(NVL(NON_STOCK_CODED_PARTS.detailed_desc, ' ')) LIKE
                    '%'||TRIM(UPPER(vi_description))||'%' AND
                NSC_PARTS_USED.orig_supp_num = NON_STOCK_CODED_PARTS.orig_supplier_num AND
                NSC_PARTS_USED.link_code  = RB_MASTERLIST.rebuilt_stock_num AND
                NON_STOCK_CODED_PARTS.oem_part_cost = vi_oem_part_cost AND
                NSC_PARTS_USED.link_type = 'RB';
    ELSIF (vi_cost_comparetype = 2) THEN
        OPEN vo_cursor FOR
            SELECT
                UPPER(RB_MASTERLIST.rebuilt_stock_num) AS "REBUILT NUMBER",
                UPPER(RB_MASTERLIST.mms_stock_code) AS "MMS STOCK CODE",
                UPPER(RB_MASTERLIST.keyword) AS "KEYWORD",
                UPPER(RB_MASTERLIST.detailed_desc) AS "DESCRIPTION",
                RB_MASTERLIST.rowid
            /*
                UPPER(RB_MASTERLIST.rebuilt_stock_num) AS "REBUILT NUMBER",
                UPPER(RB_MASTERLIST.detailed_desc) AS "DESCRIPTION",
                UPPER(RB_MASTERLIST.mms_stock_code) AS "MMS STOCK CODE",
                RB_MASTERLIST.rowid */
            FROM
                NSC_PARTS_USED,
                NON_STOCK_CODED_PARTS,
                RB_MASTERLIST
            WHERE
                NVL(NSC_PARTS_USED.orig_supp_num,' ') LIKE
                    TRIM(vi_orig_supplier_num) AND
                UPPER(NVL(NON_STOCK_CODED_PARTS.detailed_desc, ' ')) LIKE
                    '%'||TRIM(UPPER(vi_description))||'%' AND
                NSC_PARTS_USED.orig_supp_num = NON_STOCK_CODED_PARTS.orig_supplier_num AND
                NSC_PARTS_USED.link_code  = RB_MASTERLIST.rebuilt_stock_num AND
                NON_STOCK_CODED_PARTS.oem_part_cost >= vi_oem_part_cost AND
                NSC_PARTS_USED.link_type = 'RB';
    END IF;
END SEARCH_NSC_RBPARTLIST;

-- Search / Retreive any part by input criteria in all non
-- stock coded parts.  Return the non-stock coded part satisfying the search criteria.
PROCEDURE SEARCH_NSC_PART
   (vi_orig_supplier_num IN NON_STOCK_CODED_PARTS.orig_supplier_num%TYPE,
    vi_oem_part_cost IN NON_STOCK_CODED_PARTS.oem_part_cost%TYPE,
    vi_description IN NON_STOCK_CODED_PARTS.detailed_desc%TYPE,
    vi_keyword IN NON_STOCK_CODED_PARTS.keyword%TYPE,
    vi_cost_comparetype IN INTEGER,
    vo_Cursor OUT query_cur) IS
BEGIN
     IF (vi_cost_comparetype = 0) THEN
        OPEN vo_cursor FOR
            SELECT
                UPPER(orig_supplier_num) AS "SUPPLIER NUMBER",
                UPPER(NVL(orig_supplier_name, ' ')) AS "SUPPLIER NAME",
                UPPER(NVL(detailed_desc, ' ')) AS "DESCRIPTION",
                NVL(oem_part_cost, 0) AS "PRICE",
                NVL(keyword, ' ') AS "KEYWORD",
                last_modified_date AS "LAST MODIFIED DATE",
                ID AS "ID",
                ROWID
            FROM
                NON_STOCK_CODED_PARTS
            WHERE
                NVL(orig_supplier_num,' ') LIKE
                    vi_orig_supplier_num||'%' AND
                UPPER(NVL(detailed_desc,' ')) LIKE
                    '%'||TRIM(UPPER(vi_description))||'%' AND
                UPPER(NVL(keyword, ' ')) LIKE
                    '%'||TRIM(UPPER(vi_keyword))||'%' AND
            oem_part_cost <= vi_oem_part_cost order by orig_supplier_num asc;
    ELSIF (vi_cost_comparetype = 1) THEN
        OPEN vo_cursor FOR
            SELECT
               UPPER(orig_supplier_num) AS "SUPPLIER NUMBER",
                UPPER(NVL(orig_supplier_name, ' ')) AS "SUPPLIER NAME",
                UPPER(NVL(detailed_desc, ' ')) AS "DESCRIPTION",
                NVL(oem_part_cost, 0) AS "PRICE",
                NVL(keyword, ' ') AS "KEYWORD",
                last_modified_date AS "LAST MODIFIED DATE",
                ID AS "ID",
                ROWID
            FROM
                NON_STOCK_CODED_PARTS
            WHERE
                NVL(orig_supplier_num,' ') LIKE
                    vi_orig_supplier_num||'%' AND
                UPPER(NVL(detailed_desc,' ')) LIKE
                    '%'||TRIM(UPPER(vi_description))||'%' AND
                UPPER(NVL(keyword, ' ')) LIKE
                    '%'||TRIM(UPPER(vi_keyword))||'%' AND
                oem_part_cost = vi_oem_part_cost order by orig_supplier_num asc;
    ELSIF (vi_cost_comparetype = 2) THEN
        OPEN vo_cursor FOR
            SELECT
                UPPER(orig_supplier_num) AS "SUPPLIER NUMBER",
                UPPER(NVL(orig_supplier_name, ' ')) AS "SUPPLIER NAME",
                UPPER(NVL(detailed_desc, ' ')) AS "DESCRIPTION",
                NVL(oem_part_cost, 0) AS "PRICE",
                NVL(keyword, ' ') AS "KEYWORD",
                last_modified_date AS "LAST MODIFIED DATE",
                ID AS "ID",
                ROWID
            FROM
                NON_STOCK_CODED_PARTS
            WHERE
                NVL(orig_supplier_num,' ') LIKE
                    vi_orig_supplier_num||'%' AND
                UPPER(NVL(detailed_desc,' ')) LIKE
                    '%'||TRIM(UPPER(vi_description))||'%' AND
                UPPER(NVL(keyword, ' ')) LIKE
                    '%'||TRIM(UPPER(vi_keyword))||'%' AND
                oem_part_cost >= vi_oem_part_cost order by orig_supplier_num asc;
    END IF;
END SEARCH_NSC_PART;

-- Search / Retreive any part by input criteria in all
-- stock coded parts.  Return the stock coded part satisfying the search criteria.
PROCEDURE SEARCH_SC_PART
   (vi_orig_supplier_num IN STOCK_CODED_PARTS.mms_stock_code%TYPE,
    vi_oem_part_cost IN STOCK_CODED_PARTS.oem_part_cost%TYPE,
    vi_description IN STOCK_CODED_PARTS.detailed_desc%TYPE,
    vi_keyword IN STOCK_CODED_PARTS.part_type%TYPE,
    vi_cost_comparetype IN INTEGER,
    vo_Cursor OUT query_cur) IS
BEGIN
    IF (vi_cost_comparetype = 0) THEN
        OPEN vo_cursor FOR
            SELECT
                UPPER(mms_stock_code) AS "STOCK CODE",
                UPPER(NVL(detailed_desc, ' ')) AS "DESCRIPTION",
                NVL(oem_part_cost,0) AS "OEM_PART_COST",
                NVL(mms_new_cost,0) AS "PRICE",
                UPPER(NVL(part_type, ' ')) AS "KEYWORD",
                last_modified_date AS "LAST MODIFIED DATE",
                ROWID
            FROM
                STOCK_CODED_PARTS
            WHERE
                NVL(mms_stock_code,' ') LIKE
                    '%'||TRIM(vi_orig_supplier_num)||'%' AND
                UPPER(NVL(detailed_desc,' ')) LIKE
                    '%'||TRIM(UPPER(vi_description))||'%' AND
                UPPER(NVL(part_type, ' ')) LIKE
                    '%'||TRIM(UPPER(vi_keyword))||'%' AND
                mms_new_cost <= vi_oem_part_cost
            ORDER BY mms_stock_code;
    ELSIF (vi_cost_comparetype = 1) THEN
        OPEN vo_cursor FOR
            SELECT
                UPPER(mms_stock_code) AS "STOCK CODE",
                UPPER(NVL(detailed_desc, ' ')) AS "DESCRIPTION",
                NVL(oem_part_cost,0) AS "OEM_PART_COST",
                NVL(mms_new_cost,0) AS "PRICE",
                UPPER(NVL(part_type, ' ')) AS "KEYWORD",
                last_modified_date AS "LAST MODIFIED DATE",
                ROWID
            FROM
                STOCK_CODED_PARTS
            WHERE
                NVL(mms_stock_code,' ') LIKE
                    '%'||TRIM(vi_orig_supplier_num)||'%' AND
                UPPER(NVL(detailed_desc,' ')) LIKE
                    '%'||TRIM(UPPER(vi_description))||'%' AND
                UPPER(NVL(part_type, ' ')) LIKE
                    '%'||TRIM(UPPER(vi_keyword))||'%' AND
                mms_new_cost = vi_oem_part_cost
            ORDER BY mms_stock_code;
    ELSIF (vi_cost_comparetype = 2) THEN
       OPEN vo_cursor FOR
            SELECT
                UPPER(mms_stock_code) AS "STOCK CODE",
                UPPER(NVL(detailed_desc, ' ')) AS "DESCRIPTION",
                NVL(oem_part_cost,0) AS "OEM_PART_COST",
                NVL(mms_new_cost,0) AS "PRICE",
                UPPER(NVL(part_type, ' ')) AS "KEYWORD",
                last_modified_date AS "LAST MODIFIED DATE",
                ROWID
            FROM
                STOCK_CODED_PARTS
            WHERE
                NVL(mms_stock_code,' ') LIKE
                    '%'||TRIM(vi_orig_supplier_num)||'%' AND
                UPPER(NVL(detailed_desc,' ')) LIKE
                    '%'||TRIM(UPPER(vi_description))||'%' AND
                UPPER(NVL(part_type, ' ')) LIKE
                    '%'||TRIM(UPPER(vi_keyword))||'%' AND
                (mms_new_cost >= vi_oem_part_cost OR mms_new_cost IS NULL)
            ORDER BY mms_stock_code;
    END IF;

END SEARCH_SC_PART;

-- Return the rebuilt part satisfying the search criteria.
PROCEDURE SEARCH_RBPART
   (vi_orig_supplier_num IN RB_MASTERLIST.rebuilt_stock_num%TYPE,
    vi_oem_part_cost IN RB_MASTERLIST.estimated_cost%TYPE,
    vi_description IN RB_MASTERLIST.detailed_desc%TYPE,
    vi_keyword IN RB_MASTERLIST.keyword%TYPE,
    vi_cost_comparetype IN INTEGER,
    vo_Cursor OUT query_cur) IS
BEGIN
    IF (vi_cost_comparetype = 0) THEN
        OPEN vo_cursor FOR
            SELECT
                UPPER(rebuilt_stock_num) AS "REBUILT NUMBER",
                UPPER(mms_stock_code) AS "MMS STOCK CODE",
                UPPER(keyword) AS "KEYWORD",
                UPPER(detailed_desc) AS "DESCRIPTION",
                ROWID
            FROM
                RB_MASTERLIST
            WHERE
                UPPER(NVL(rebuilt_stock_num,' ')) LIKE
                    '%'||TRIM(vi_orig_supplier_num)||'%' AND
                UPPER(NVL(detailed_desc,' ')) LIKE
                    '%'||TRIM(UPPER(vi_description))||'%' AND
                UPPER(NVL(keyword,' ')) LIKE
                    '%'||TRIM(UPPER(vi_keyword))||'%' AND
                estimated_cost <= vi_oem_part_cost;
    ELSIF (vi_cost_comparetype = 1) THEN
        OPEN vo_cursor FOR
            SELECT
                UPPER(rebuilt_stock_num) AS "REBUILT NUMBER",
                UPPER(mms_stock_code) AS "MMS STOCK CODE",
                UPPER(keyword) AS "KEYWORD",
                UPPER(detailed_desc) AS "DESCRIPTION",
                ROWID
            FROM
                RB_MASTERLIST
            WHERE
                UPPER(NVL(rebuilt_stock_num,' ')) LIKE
                    '%'||TRIM(vi_orig_supplier_num)||'%' AND
                UPPER(NVL(detailed_desc,' ')) LIKE
                    '%'||TRIM(UPPER(vi_description))||'%' AND
                UPPER(NVL(keyword,' ')) LIKE
                    '%'||TRIM(UPPER(vi_keyword))||'%' AND
                estimated_cost = vi_oem_part_cost;
    ELSIF (vi_cost_comparetype = 2) THEN
        OPEN vo_cursor FOR
            SELECT
                UPPER(rebuilt_stock_num) AS "REBUILT NUMBER",
                UPPER(mms_stock_code) AS "MMS STOCK CODE",
                UPPER(keyword) AS "KEYWORD",
                UPPER(detailed_desc) AS "DESCRIPTION",
                ROWID
            FROM
                RB_MASTERLIST
            WHERE
                UPPER(NVL(rebuilt_stock_num,' ')) LIKE
                    '%'||TRIM(vi_orig_supplier_num)||'%' AND
                UPPER(NVL(detailed_desc,' ')) LIKE
                    '%'||TRIM(UPPER(vi_description))||'%' AND
                UPPER(NVL(keyword,' ')) LIKE
                    '%'||TRIM(UPPER(vi_keyword))||'%' AND
                estimated_cost >= vi_oem_part_cost;
    END IF;
END SEARCH_RBPART;

--
-- Return the stock coded part satisfying the search criteria.
PROCEDURE SEARCH_SC_RBPARTLIST
   (vi_orig_supplier_num IN SC_PARTS_USED.mms_stock_code%TYPE,
    vi_oem_part_cost IN STOCK_CODED_PARTS.oem_part_cost%TYPE,
    vi_description IN STOCK_CODED_PARTS.detailed_desc%TYPE,
    vi_cost_comparetype IN INTEGER,
    vo_Cursor OUT query_cur) IS
BEGIN
    IF (vi_cost_comparetype = 0) THEN
        OPEN vo_cursor FOR
            SELECT
                UPPER(RB_MASTERLIST.rebuilt_stock_num) AS "REBUILT NUMBER",
                UPPER(RB_MASTERLIST.mms_stock_code) AS "MMS STOCK CODE",
                UPPER(RB_MASTERLIST.detailed_desc) AS "DESCRIPTION",
                RB_MASTERLIST.rowid
            FROM
                SC_PARTS_USED,
                STOCK_CODED_PARTS,
                RB_MASTERLIST
            WHERE
                NVL(SC_PARTS_USED.mms_stock_code,' ') LIKE
                    '%'||TRIM(vi_orig_supplier_num)||'%' AND
                UPPER(STOCK_CODED_PARTS.detailed_desc) LIKE
                    '%'||TRIM(UPPER(vi_description))||'%' AND
                SC_PARTS_USED.mms_stock_code = STOCK_CODED_PARTS.mms_stock_code AND
                SC_PARTS_USED.link_code = RB_MASTERLIST.rebuilt_stock_num AND
                STOCK_CODED_PARTS.oem_part_cost <= vi_oem_part_cost AND
                SC_PARTS_USED.link_type = 'RB';
    ELSIF (vi_cost_comparetype = 1) THEN
        OPEN vo_cursor FOR
            SELECT
                UPPER(RB_MASTERLIST.rebuilt_stock_num) AS "REBUILT NUMBER",
                UPPER(RB_MASTERLIST.mms_stock_code) AS "MMS STOCK CODE",
                UPPER(RB_MASTERLIST.detailed_desc) AS "DESCRIPTION",
                RB_MASTERLIST.rowid
            FROM
                SC_PARTS_USED,
                STOCK_CODED_PARTS,
                RB_MASTERLIST
            WHERE
                NVL(SC_PARTS_USED.mms_stock_code,' ') LIKE
                    '%'||TRIM(vi_orig_supplier_num)||'%' AND
                UPPER(STOCK_CODED_PARTS.detailed_desc) LIKE
                    '%'||TRIM(UPPER(vi_description))||'%' AND
                SC_PARTS_USED.mms_stock_code = STOCK_CODED_PARTS.mms_stock_code AND
                SC_PARTS_USED.link_code = RB_MASTERLIST.rebuilt_stock_num AND
                STOCK_CODED_PARTS.oem_part_cost = vi_oem_part_cost AND
                SC_PARTS_USED.link_type = 'RB';
    ELSIF (vi_cost_comparetype = 2) THEN
        OPEN vo_cursor FOR
            SELECT
                UPPER(RB_MASTERLIST.rebuilt_stock_num) AS "REBUILT NUMBER",
                UPPER(RB_MASTERLIST.mms_stock_code) AS "MMS STOCK CODE",
                UPPER(RB_MASTERLIST.detailed_desc) AS "DESCRIPTION",
                RB_MASTERLIST.rowid
            FROM
                SC_PARTS_USED,
                STOCK_CODED_PARTS,
                RB_MASTERLIST
            WHERE
                NVL(SC_PARTS_USED.mms_stock_code,' ') LIKE
                    '%'||TRIM(vi_orig_supplier_num)||'%' AND
                UPPER(STOCK_CODED_PARTS.detailed_desc) LIKE
                    '%'||TRIM(UPPER(vi_description))||'%' AND
                SC_PARTS_USED.mms_stock_code = STOCK_CODED_PARTS.mms_stock_code AND
                SC_PARTS_USED.link_code = RB_MASTERLIST.rebuilt_stock_num AND
                STOCK_CODED_PARTS.oem_part_cost >= vi_oem_part_cost AND
                SC_PARTS_USED.link_type = 'RB';
    END IF;
END SEARCH_SC_RBPARTLIST;

PROCEDURE POPULATE_SC_COMBOXES
    (vi_cost_comparetype IN INTEGER,
     vo_Cursor OUT query_cur) IS
BEGIN
    IF (vi_cost_comparetype = 1) THEN
        OPEN vo_cursor FOR
            SELECT DISTINCT
                UPPER(mms_stock_code) AS mms_stock_code,
                UPPER(mms_sync_date) AS mms_sync_date
            FROM
                STOCK_CODED_PARTS;
    ELSIF (vi_cost_comparetype = 2) THEN
        OPEN vo_cursor FOR
            SELECT DISTINCT
                UPPER(part_type) AS part_type
            FROM
                STOCK_CODED_PARTS;
    ELSIF (vi_cost_comparetype = 3) THEN
        OPEN vo_cursor FOR
            SELECT DISTINCT
                UPPER(detailed_desc) AS detailed_desc
            FROM
                STOCK_CODED_PARTS;
    END IF;
END POPULATE_SC_COMBOXES;

PROCEDURE POPULATE_RB_COMBOXES
    (vi_cost_comparetype IN INTEGER,
     vo_Cursor OUT query_cur) IS
BEGIN
    IF (vi_cost_comparetype = 1) THEN
        OPEN vo_cursor FOR
            SELECT DISTINCT
                UPPER(rebuilt_stock_num) AS rebuilt_stock_num
            FROM
                RB_MASTERLIST;
    ELSIF (vi_cost_comparetype = 2) THEN
        OPEN vo_cursor FOR
            SELECT DISTINCT
                UPPER(keyword) AS keyword
            FROM
                RB_MASTERLIST;
    ELSIF (vi_cost_comparetype = 3) THEN
        OPEN vo_cursor FOR
            SELECT DISTINCT
                UPPER(detailed_desc) AS detailed_desc
            FROM
                RB_MASTERLIST;
    END IF;
END POPULATE_RB_COMBOXES;

PROCEDURE POPULATE_NSC_COMBOXES
    (vi_cost_comparetype IN INTEGER,
     vo_Cursor OUT query_cur) IS
BEGIN
    IF (vi_cost_comparetype = 0) THEN
        OPEN vo_cursor FOR
            SELECT DISTINCT
                UPPER(orig_supplier_name) AS orig_supplier_name
            FROM
                NON_STOCK_CODED_PARTS;
    ELSIF (vi_cost_comparetype = 1) THEN
        OPEN vo_cursor FOR
            SELECT DISTINCT
                UPPER(orig_supplier_num) AS orig_supplier_num
            FROM
                NON_STOCK_CODED_PARTS;
    ELSIF (vi_cost_comparetype = 2) THEN
        OPEN vo_cursor FOR
            SELECT DISTINCT
                UPPER(keyword) AS keyword
            FROM
                NON_STOCK_CODED_PARTS;
    ELSIF (vi_cost_comparetype = 3) THEN
        OPEN vo_cursor FOR
            SELECT DISTINCT
                UPPER(detailed_desc) AS detailed_desc
            FROM
                NON_STOCK_CODED_PARTS;
    END IF;
END POPULATE_NSC_COMBOXES;

PROCEDURE RETRIEVE_VEHICLE_TYPES
    (vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
            UPPER(make) AS make,
            UPPER(model) AS model,
            UPPER(year) AS year,
            ROWID
        FROM
            TYPE_OF_VEHICLE;
END RETRIEVE_VEHICLE_TYPES;

PROCEDURE RETRIEVE_VEHICLE_ESTIMATES
    (vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
            UPPER(vehicle_list_id) AS vehicle_list_id,
            UPPER(veh_series_code) AS veh_series_code,
            UPPER(num_of_vehicles) AS num_of_vehicles,
            UPPER(proj_desc) AS proj_desc,
            UPPER(date_entered) AS date_entered,
            UPPER(entered_by) AS entered_by,
            UPPER(modified_last_by) AS modified_last_by,
            UPPER(modified_last_date) AS modified_last_date,
            UPPER(make) AS make,
            UPPER(model) AS model,
            UPPER(year) AS year,
            UPPER(engine) AS engine,
            UPPER(transmission) AS transmission,
            UPPER(differential) AS differential,
            UPPER(sopnumber) AS sopnumber,
            ROWID
        FROM
            VEHICLE_LIST A;
END RETRIEVE_VEHICLE_ESTIMATES;

PROCEDURE RETRIEVE_ENGINES
    (vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
            UPPER(ENGINES.name) AS name,
            ROWID
        FROM
            ENGINES;
END RETRIEVE_ENGINES;

PROCEDURE RETRIEVE_TRANSMISSIONS
    (vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
            UPPER(TRANSMISSIONS.name) AS name,
            ROWID
        FROM
            TRANSMISSIONS;
END RETRIEVE_TRANSMISSIONS;

PROCEDURE RETRIEVE_DIFFERENTIALS
    (vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
            UPPER(DIFFERENTIAL.name) AS name,
            ROWID
        FROM
            DIFFERENTIAL;
END RETRIEVE_DIFFERENTIALS;

PROCEDURE SEARCH_VEHICLE_ESTIMATE
    (vi_veh_series IN VEHICLE_LIST.veh_series_code %TYPE,
     vi_proj_desc IN VEHICLE_LIST.proj_desc%TYPE,
     vi_make IN VEHICLE_LIST.make%TYPE,
     vi_model IN VEHICLE_LIST.model%TYPE,
     vi_year IN VEHICLE_LIST.year%TYPE,
     vi_engine IN ENGINES.name%TYPE,
     vi_trans IN TRANSMISSIONS.name%TYPE,
     vi_diff IN DIFFERENTIAL.name%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
            vehicle_list_id AS "ESTIMATE #",
            UPPER(veh_series_code) AS "VEHICLE SERIES CODE",
            UPPER(num_of_vehicles) AS "NUMBER OF VEHICLES",
            UPPER(proj_desc) AS "PROJECT DESCRIPTION",
            UPPER(make) AS "MAKE",
            UPPER(model) AS "MODEL",
            UPPER(year) AS "YEAR",
            UPPER(engine) AS "ENGINE",
            UPPER(transmission) AS "TRANSMISSION",
            UPPER(differential) AS "DIFFERENTIAL",
            UPPER(sopnumber) AS "SOPNUMBER",
            ROWID
        FROM
            VEHICLE_LIST
        WHERE
            upper(NVL(veh_series_code,' ')) LIKE
                '%'||TRIM(upper(vi_veh_series))||'%' AND
            UPPER(NVL(proj_desc,' ')) LIKE
                '%'||TRIM(UPPER(vi_proj_desc))||'%' AND
            UPPER(NVL(make, ' ')) LIKE
                '%'||TRIM(UPPER(vi_make))||'%' AND
            UPPER(NVL(model,' ')) LIKE
                '%'||TRIM(UPPER(vi_model))||'%' AND
            UPPER(NVL(year, ' ')) LIKE
                '%'||TRIM(UPPER(vi_year))||'%' AND
            UPPER(NVL(engine, ' ')) LIKE
                '%'||TRIM(UPPER(vi_engine))||'%' AND
            UPPER(NVL(transmission,' ')) LIKE
                '%'||TRIM(UPPER(vi_trans))||'%' AND
            UPPER(NVL(differential, ' ')) LIKE
                '%'||TRIM(UPPER(vi_diff))||'%'
         order by vehicle_list_id asc;
END SEARCH_VEHICLE_ESTIMATE;

PROCEDURE RETRIEVE_RB_ESTIMATES
    (vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
            UPPER(mms_stock_code) AS mms_stock_code,
            UPPER(rebuilt_stock_num) AS rebuilt_stock_num,
            UPPER(job_number) AS job_number,
            UPPER(keyword) AS keyword,
            UPPER(detailed_desc) AS detailed_desc,
            UPPER(core_charge) AS core_charge,
            UPPER(rebuilt_stock_num) AS rebuilt_stock_num,
            UPPER(core_part_num) AS core_part_num,
            UPPER(mms_stock_code) AS mms_stock_code,
            UPPER(sop_number) AS sop_number,
            UPPER(buy_new_cost) AS buy_new_cost,
            UPPER(reman_cost) AS reman_cost,
            UPPER(external_cost) AS external_cost,
            active as Active,
            ROWID
        FROM
            RB_MASTERLIST;
END RETRIEVE_RB_ESTIMATES;

PROCEDURE SEARCH_MB
    (vi_mb_num IN MB_LIST.mb_number%TYPE,
     vi_rebuild_code IN MB_LIST.rebuild_code%TYPE,
     vi_keyword IN MB_LIST.keyword%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
            UPPER(mb_number) AS "MB NUMBER",
            UPPER(keyword) AS "KEYWORD",
            UPPER(description) AS "DESCRIPTION",
            UPPER(bus_type) AS "BUS TYPE",
            UPPER(num_bus_comp) AS "# BUSES USING COMP",
            UPPER(vendor_part_num) AS "VENDOR PART #",
            UPPER(buy_code) AS "BUY CODE",
            UPPER(rebuild_code) AS "REBUILT CODE",
            UPPER(core_code) AS "CORE CODE",
            UPPER(annual_usage) AS "ANNUAL USAGE",
            UPPER(bench_number) AS "BENCH NUMBER",
            UPPER(sample_provided) AS "SAMPLE PROVIDED",
            UPPER(recommendation) AS "RECOMMENDATION",
            UPPER(reman_cost) AS "REMAN EX COST",
            UPPER(external_cost) AS "EXTERNAL COST",
            UPPER(buy_new_cost) AS "NEW COST",
            UPPER(internal_cost) AS "INTERNAL COST",
            UPPER(sop_number) AS "SOP NUMBER",
            UPPER(core_cost) AS "CORE COST",
            UPPER(job_number) AS "JOB NUMBER",
            DATE_OPENED AS "DATE OPENED",
            ROWID
        FROM
            MB_LIST
        WHERE
            upper(NVL(mb_number,' ')) LIKE
                '%'||TRIM(upper(vi_mb_num))||'%' AND
            UPPER(NVL(rebuild_code,' ')) LIKE
                '%'||TRIM(upper(vi_rebuild_code))||'%' AND
            UPPER(NVL(keyword,' ')) LIKE
                '%'||TRIM(upper(vi_keyword))||'%' order by mb_number desc;
END SEARCH_MB;

PROCEDURE RETRIEVE_MB
    (vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
            UPPER(mb_number) AS mb_number,
            UPPER(keyword) AS keyword,
            UPPER(description) AS description,
            UPPER(bus_type) AS bus_type,
            UPPER(num_bus_comp) AS num_bus_comp,
            UPPER(vendor_part_num) AS vendor_part_num,
            UPPER(buy_code) AS buy_code,
            UPPER(rebuild_code) AS rebuild_code,
            UPPER(core_code) AS core_code,
            UPPER(annual_usage) AS annual_usage,
            UPPER(bench_number) AS bench_number,
            UPPER(sample_provided) AS sample_provided,
            UPPER(recommendation) AS recommendation,
            UPPER(reman_cost) AS reman_cost,
            UPPER(external_cost) AS external_cost,
            UPPER(buy_new_cost) AS buy_new_cost,
            UPPER(internal_cost) AS internal_cost,
            UPPER(sop_number) AS sop_number,
            UPPER(core_cost) AS core_cost,
            UPPER(job_number) AS job_number,
            NVL(readmanualnewprice,0) as manualprice,
            ROWID
        FROM
            MB_LIST;
END RETRIEVE_MB;

PROCEDURE RETRIEVE_RB
    (vo_Cursor IN OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
            UPPER(rebuilt_stock_num) AS "rebuilt_stock_num",
            mms_stock_code,
            keyword,
            detailed_desc,
            NVL(sop_number,' ') AS "sop_number",
            NVL(job_number,' ') AS "job_number",
            core_part_num,
            core_charge,
            estimated_cost,
            date_modified,
            active,
            ROWID
        FROM
            RB_MASTERLIST;
END RETRIEVE_RB;

PROCEDURE RETRIEVE_MB_LABOUR
    (vi_idnum IN MB_LIST.MB_NUMBER%TYPE,
     vi_type IN VARCHAR,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
            EMPLOYEE_LABOUR.labour_defn AS "LABOUR TYPE",
            EMPLOYEE_LABOUR.costcentre AS "CC",
            EMPLOYEE_LABOUR.task AS "TASK",
            REPLACE(EMPLOYEE_LABOUR.usage,',','.') AS "USAGE",
            EMPLOYEE_LABOUR.hrs_reqd AS "TIME",
            EMPLOYEE_LABOUR.adj_hrs AS "WRENCH TIME",
            EMPLOYEE_LABOUR.date_revised AS "DATE REVISED",
            EMPLOYEE_LABOUR.time_addition AS "TIME ADDITION",
            CES_SETTINGS.value AS "VALUE",
            EMPLOYEE_LABOUR.ROWID
        FROM
            EMPLOYEE_LABOUR,
            (SELECT
                CES_SETTINGS.value
             FROM
                CES_SETTINGS
             WHERE
                CES_SETTINGS.parameter = 'NON_PRODUCTIVE_ADJUSTMENT') CES_SETTINGS
        WHERE
            EMPLOYEE_LABOUR.link_number = vi_idnum AND
            EMPLOYEE_LABOUR.typeid = vi_type
        ORDER BY
            EMPLOYEE_LABOUR.costcentre;
END RETRIEVE_MB_LABOUR;

PROCEDURE RETRIEVE_LABOUR_WITH_TOTALS
    (vi_idnum IN MB_LIST.MB_NUMBER%TYPE,
     vi_type IN VARCHAR,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
            EMPLOYEE_LABOUR.labour_defn AS "LABOUR TYPE",
            EMPLOYEE_LABOUR.costcentre AS "CC",
            EMPLOYEE_LABOUR.task AS "TASK",
            REPLACE(EMPLOYEE_LABOUR.usage,',','.') AS "USAGE",
            EMPLOYEE_LABOUR.hrs_reqd AS "TIME",
            EMPLOYEE_LABOUR.adj_hrs AS "WRENCH TIME",
            EMPLOYEE_SALARIES.rate_per_hour AS "RATE PER HOUR"
        FROM
            EMPLOYEE_LABOUR,
            EMPLOYEE_SALARIES,
            EMPL_CLASS
        WHERE
            EMPLOYEE_LABOUR.labour_defn = UPPER(EMPL_CLASS.labour_defn) AND
            EMPLOYEE_SALARIES.wage_group = EMPL_CLASS.wage_group AND
            EMPLOYEE_LABOUR.link_number = vi_idnum AND
            EMPLOYEE_LABOUR.typeid = vi_type;
END RETRIEVE_LABOUR_WITH_TOTALS;

PROCEDURE RETRIEVE_USERS
    (vi_username IN USERS.username%TYPE,
     vi_password IN USERS.password%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
            pswd_change_date AS pswd_change_date,
            UPPER(access_level) AS access_level,
            UPPER(previous_access_level) AS previous_access_level,
            date_changed_back AS date_changed_back,
            use_overhead_fringe AS use_overhead_fringe,
            ROWID
        FROM
            USERS
        WHERE
            TRIM(UPPER(username)) = trim(upper(vi_username)) AND
            TRIM(UPPER(password)) = trim(upper(vi_password));
END RETRIEVE_USERS;

PROCEDURE RPT_COST_VARIANCE
    (vo_Cursor OUT query_cur) IS


BEGIN
    INTERNAL_RB_PRICE;


    OPEN vo_cursor FOR
        SELECT
            *
        FROM
            TEMP_RBP_COST;
END RPT_COST_VARIANCE;

--After CES 10g upgrade, NLS_LANGUAGE has been set to ENGLISH
PROCEDURE RPT_COST_VARIANCE_2
    (vo_Cursor OUT query_cur) IS
BEGIN
    --execute immediate 'ALTER SESSION SET NLS_LANGUAGE  = "ENGLISH"';
    --execute immediate 'ALTER SESSION SET NLS_TERRITORY  = "CANADA"';
    INTERNAL_RB_PRICE;
    OPEN vo_cursor FOR
        SELECT
            TOTAL_COST, RB_NUMBER, DETAILED_DESC, EXTERNAL_COST, ACTIVE, KEYWORD, DECODE(to_number(replace(NVL(EXTERNAL_COST,'0'),',','.')), 0,0,nvl(TOTAL_COST,0)/to_number(replace(NVL(EXTERNAL_COST,'0'),',','.'))) AS COST_VARIANCE
        FROM
            TEMP_RBP_COST
        ORDER BY ACTIVE DESC, COST_VARIANCE DESC, RB_NUMBER;
END RPT_COST_VARIANCE_2;

PROCEDURE RETRIEVE_TASK_DESCRIPTION
    (vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
            task_id,
            UPPER(task_description) AS "TASK DESCRIPTION"
        FROM
            LABOUR_TASK_DESCRIPTIONS
        ORDER BY
            TASK_DESCRIPTION ASC;
END RETRIEVE_TASK_DESCRIPTION;

PROCEDURE RETRIEVE_LABOUR_POSITION
    (vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
            UPPER(labour_defn) AS labour_defn
        FROM
            EMPL_CLASS
        ORDER BY
            labour_defn;
END RETRIEVE_LABOUR_POSITION;

PROCEDURE RETRIEVE_COST_CENTRES
    (vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
            UPPER(cost_centre) AS cost_centre
        FROM
            COST_CENTRES
        ORDER BY
            COST_CENTRE;
END RETRIEVE_COST_CENTRES;

PROCEDURE RETRIEVE_MB_ALL_LABOUR
    (vo_Cursor OUT query_cur,
     vi_RowID IN string) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
            UPPER(hrs_reqd) AS hrs_reqd,
            UPPER(usage) AS usage,
            UPPER(task) AS task,
            UPPER(costcentre) AS costcentre,
            UPPER(labour_defn) AS labour_defn,
            ROWID
        FROM
            EMPLOYEE_LABOUR
        WHERE
            ROWID = vi_RowID
        ORDER BY
            costcentre;
END RETRIEVE_MB_ALL_LABOUR;

PROCEDURE RETRIEVE_MB_CC_LAB
    (vi_mb_num IN EMPLOYEE_LABOUR.link_number%TYPE,
     vi_typeid IN EMPLOYEE_LABOUR.typeid%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
            temptable.labour_defn AS "LABOUR TYPE",
            temptable.costcentre AS "CC",
            temptable.WAGE_GROUP AS "WAGE GROUP",
            temptable.rate_per_hour AS "RATE PER HOUR",
            SUM(total_cost) AS "TOTAL COST",
            SUM(time_addition) AS "TIME ADDITION"
        FROM
            (SELECT
                EMPLOYEE_LABOUR.labour_defn,
                EMPLOYEE_LABOUR.costcentre,
                B.WAGE_GROUP,
                B.rate_per_hour,
                ROUND((EMPLOYEE_LABOUR.time_addition * B.rate_per_hour * (EMPLOYEE_LABOUR.usage/100)),2) AS Total_Cost,
                EMPLOYEE_LABOUR.time_addition
            FROM
                EMPLOYEE_LABOUR,
                EMPLOYEE_SALARIES B,
                EMPL_CLASS C
            WHERE
                EMPLOYEE_LABOUR.labour_defn = upper(C.labour_defn) AND
                B.wage_group = C.wage_group AND
                EMPLOYEE_LABOUR.link_number = vi_mb_num AND
                EMPLOYEE_LABOUR.typeid = vi_typeid) tempTable
        GROUP BY
            tempTable.labour_defn,
            tempTable.costcentre,
            tempTable.WAGE_GROUP,
            tempTable.rate_per_hour
        ORDER BY
            costcentre;
END RETRIEVE_MB_CC_LAB;

PROCEDURE RETRIEVE_NSCP_USED
    (vi_idnum IN NSC_PARTS_USED.link_code%TYPE,
     vi_link_type IN NSC_PARTS_USED.link_type%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR

        SELECT
            UPPER(NON_STOCK_CODED_PARTS.orig_supplier_num) AS "SUPPLIER NUMBER",
            UPPER(NON_STOCK_CODED_PARTS.orig_supplier_name) AS "SUPPLIER NAME",

            NON_STOCK_CODED_PARTS.oem_part_cost AS "UNIT COST",
            UPPER(NSC_PARTS_USED.qty_reqd) AS "QTY",
            REPLACE(NSC_PARTS_USED.percent_usage,',','.') AS "%",
            REPLACE(FINAL_COST(NSC_PARTS_USED.percent_usage, NSC_PARTS_USED.qty_reqd,NSC_PARTS_USED.corecost,0),',','.') AS "CORE COST",
            REPLACE(FINAL_COST(NSC_PARTS_USED.percent_usage, NSC_PARTS_USED.qty_reqd, NON_STOCK_CODED_PARTS.oem_part_cost, 0),',','.') AS "TOTAL COST",
            UPPER(NSC_PARTS_USED.cost_centre) AS "CC",
            NVL(UPPER(NON_STOCK_CODED_PARTS.detailed_desc),'') AS "DESCRIPTION",
            NVL(UPPER(NON_STOCK_CODED_PARTS.keyword), '' ) AS "KEYWORD",
            UPPER(NSC_PARTS_USED.id) AS "ID",
            UPPER(NSC_PARTS_USED.last_modified_date) AS "LAST MODIFIED DATE",
            NSC_PARTS_USED.ROWID
        FROM
            NSC_PARTS_USED NSC_PARTS_USED,
            NON_STOCK_CODED_PARTS NON_STOCK_CODED_PARTS
        WHERE
            NSC_PARTS_USED.link_code = vi_idnum AND
            NSC_PARTS_USED.link_type = vi_link_type AND
            NON_STOCK_CODED_PARTS.id (+)= NSC_PARTS_USED.id
        ORDER BY
            NON_STOCK_CODED_PARTS.orig_supplier_num;

            /* not used
                SELECT
            UPPER(NSC_PARTS_USED.orig_supp_num) AS "SUPPLIER NUMBER",
            UPPER(NSC_PARTS_USED.orig_supplier_name) AS "SUPPLIER NAME",
            UPPER(NSC_PARTS_USED.cost_centre) AS "CC",
            UPPER(NSC_PARTS_USED.qty_reqd) AS "QTY",
            REPLACE(NSC_PARTS_USED.percent_usage,',','.') AS "%",
            NSC_PARTS_USED.cost AS "UNIT COST",
            REPLACE(FINAL_COST(NSC_PARTS_USED.percent_usage, NSC_PARTS_USED.qty_reqd,NSC_PARTS_USED.corecost,0),',','.') AS "CORE COST",
            UPPER(NSC_PARTS_USED.id) AS "ID",
            REPLACE(FINAL_COST(NSC_PARTS_USED.percent_usage, NSC_PARTS_USED.qty_reqd, NSC_PARTS_USED.cost, 0),',','.') AS "TOTAL COST",
            NVL(UPPER(NON_STOCK_CODED_PARTS.detailed_desc),'') AS "DESCRIPTION",
            NVL(UPPER(NON_STOCK_CODED_PARTS.keyword), '' ) AS "KEYWORD",
            UPPER(NSC_PARTS_USED.last_modified_date) AS "LAST MODIFIED DATE",
            NSC_PARTS_USED.ROWID
        FROM
            NSC_PARTS_USED_prod NSC_PARTS_USED,
            NON_STOCK_CODED_PARTS_prod NON_STOCK_CODED_PARTS
        WHERE
            NSC_PARTS_USED.link_code = vi_idnum AND
            NSC_PARTS_USED.link_type = vi_link_type AND
            NON_STOCK_CODED_PARTS.id (+)= NSC_PARTS_USED.id
        ORDER BY
            NSC_PARTS_USED.orig_supp_num;  */

END RETRIEVE_NSCP_USED;
/*  Not used
PROCEDURE RETRIEVE_NSCP_USED_COPY
    (vi_idnum IN NSC_PARTS_USED.link_code%TYPE,
     vi_link_type IN NSC_PARTS_USED.link_type%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
            UPPER(NSC_PARTS_USED.orig_supp_num) AS "SUPPLIER NUMBER",
            UPPER(NSC_PARTS_USED.orig_supplier_name) AS "SUPPLIER NAME",
            UPPER(NSC_PARTS_USED.cost_centre) AS "CC",
            UPPER(NSC_PARTS_USED.qty_reqd) AS "QTY",
            REPLACE(NSC_PARTS_USED.percent_usage,',','.') AS "%",
            NSC_PARTS_USED.cost AS "UNIT COST",
            NSC_PARTS_USED.corecost AS "CORE COST",
            UPPER(NSC_PARTS_USED.id) AS "ID",
            REPLACE(FINAL_COST(NSC_PARTS_USED.percent_usage, NSC_PARTS_USED.qty_reqd, NSC_PARTS_USED.cost, 0),',','.') AS "TOTAL COST",
            NVL(UPPER(NON_STOCK_CODED_PARTS.detailed_desc),'') AS "DESCRIPTION",
            NVL(UPPER(NON_STOCK_CODED_PARTS.keyword), '' ) AS "KEYWORD",
            UPPER(NSC_PARTS_USED.last_modified_date) AS "LAST MODIFIED DATE",
            NSC_PARTS_USED.ROWID
        FROM
            NSC_PARTS_USED,
            NON_STOCK_CODED_PARTS
        WHERE
            NSC_PARTS_USED.link_code = vi_idnum AND
            NSC_PARTS_USED.link_type = vi_link_type AND
            NON_STOCK_CODED_PARTS.id (+)= NSC_PARTS_USED.id
        ORDER BY
            NSC_PARTS_USED.orig_supp_num;
END RETRIEVE_NSCP_USED_COPY;
*/

/* invalid not used
PROCEDURE RETRIEVE_ALL_NSCP_USED
    (vi_idnum IN NSC_PARTS_USED.link_code%TYPE,
     vi_link_type IN NSC_PARTS_USED.link_type%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
            A.*,
            REPLACE(FINAL_COST(A.percent_usage, A.qty_reqd, A.cost, 0),',','.') AS final_cost,
            A.rowid
        FROM
            NSC_PARTS_USED A
        WHERE
            A.link_code = vi_idnum and
            A.link_type = vi_link_type;
END RETRIEVE_ALL_NSCP_USED;
*/
PROCEDURE RETRIEVE_SCP_USED
    (vi_link_code IN SC_PARTS_USED.LINK_CODE%TYPE,
     vi_rebuilt_part_choice IN VARCHAR,
     vi_link_type IN SC_PARTS_USED.LINK_TYPE%TYPE,
     vo_Cursor OUT query_cur) IS

begin
    OPEN vo_cursor FOR
        SELECT
            UPPER(SC_PARTS_USED.mms_stock_code) AS "STOCK CODE",
            NVL(SC_PARTS_USED.mms_cost,0) AS "UNIT COST",
            UPPER(SC_PARTS_USED.qty_reqd) AS "QTY",
            REPLACE(SC_PARTS_USED.percent_usage,',','.') AS "%",
            replace(FINAL_COST(SC_PARTS_USED.percent_usage, SC_PARTS_USED.qty_reqd,SC_PARTS_USED.corecost,0),',','.') AS "CORE COST",
            REPLACE(FINAL_COST(SC_PARTS_USED.percent_usage, SC_PARTS_USED.qty_reqd, SC_PARTS_USED.mms_cost, 0),',','.') AS "TOTAL COST",
            UPPER(SC_PARTS_USED.cost_centre) AS "CC",
            NVL(UPPER(STOCK_CODED_PARTS.detailed_desc),'') AS "DESCRIPTION",
            NVL(UPPER(STOCK_CODED_PARTS.part_type),'') AS "KEYWORD",
            SC_PARTS_USED.oem_cost AS "OEM COST",
            SC_PARTS_USED.mms_rebuilt_code AS "MMS REBUILT CODE",
            SC_PARTS_USED.reb_part_cost AS "REBUILT PART COST",
            UPPER(SC_PARTS_USED.rebuilt_part) AS "REBUILT PART",
            SC_PARTS_USED.rowid
        FROM
            SC_PARTS_USED,
            STOCK_CODED_PARTS
        WHERE
            SC_PARTS_USED.link_code = vi_link_code AND
            SC_PARTS_USED.rebuilt_part = vi_rebuilt_part_choice AND
            SC_PARTS_USED.link_type = vi_link_type AND
            STOCK_CODED_PARTS.mms_stock_code (+)= SC_PARTS_USED.mms_stock_code
        ORDER BY
            SC_PARTS_USED.mms_stock_code;
END RETRIEVE_SCP_USED;


PROCEDURE RETRIEVE_SCP_USED_COPY
    (vi_link_code IN SC_PARTS_USED.LINK_CODE%TYPE,
     vi_rebuilt_part_choice IN VARCHAR,
     vi_link_type IN SC_PARTS_USED.LINK_TYPE%TYPE,
     vo_Cursor OUT query_cur) IS

begin
    OPEN vo_cursor FOR
        SELECT
            UPPER(SC_PARTS_USED.mms_stock_code) AS "STOCK CODE",
            NVL(SC_PARTS_USED.mms_cost,0) AS "UNIT COST",
            UPPER(SC_PARTS_USED.cost_centre) AS "CC",
            UPPER(SC_PARTS_USED.qty_reqd) AS "QTY",
            REPLACE(SC_PARTS_USED.percent_usage,',','.') AS "%",
            SC_PARTS_USED.corecost AS "CORE COST",
            REPLACE(FINAL_COST(SC_PARTS_USED.percent_usage, SC_PARTS_USED.qty_reqd, SC_PARTS_USED.mms_cost, 0),',','.') AS "TOTAL COST",
            NVL(UPPER(STOCK_CODED_PARTS.detailed_desc),'') AS "DESCRIPTION",
            NVL(UPPER(STOCK_CODED_PARTS.part_type),'') AS "KEYWORD",
            SC_PARTS_USED.oem_cost AS "OEM COST",
            SC_PARTS_USED.mms_rebuilt_code AS "MMS REBUILT CODE",
            SC_PARTS_USED.reb_part_cost AS "REBUILT PART COST",
            UPPER(SC_PARTS_USED.rebuilt_part) AS "REBUILT PART",
            SC_PARTS_USED.rowid
        FROM
            SC_PARTS_USED,
            STOCK_CODED_PARTS
        WHERE
            SC_PARTS_USED.link_code = vi_link_code AND
            SC_PARTS_USED.rebuilt_part = vi_rebuilt_part_choice AND
            SC_PARTS_USED.link_type = vi_link_type AND
            STOCK_CODED_PARTS.mms_stock_code (+)= SC_PARTS_USED.mms_stock_code
        ORDER BY
            SC_PARTS_USED.mms_stock_code;
END RETRIEVE_SCP_USED_COPY;

PROCEDURE RETRIEVE_RBP_USED
    (vi_idnum IN SC_PARTS_USED.LINK_CODE%TYPE,
     vi_link_type IN SC_PARTS_USED.LINK_TYPE%TYPE,
     vo_Cursor OUT query_cur) IS
V_PRICE number (20,10);
BEGIN

V_PRICE := get_material_cost(vi_idnum,vi_link_type);
    OPEN vo_cursor FOR

        SELECT


            UPPER(SC_PARTS_USED.mms_rebuilt_code) AS "REBUILT NUMBER",
            nvl(A.RB_UNIT_COST,0) AS "UNIT COST",
            UPPER(SC_PARTS_USED.cost_centre) AS "CC",
            UPPER(SC_PARTS_USED.qty_reqd) AS "QTY",
            REPLACE(SC_PARTS_USED.percent_usage,',','.') AS "%",
            SC_PARTS_USED.corecost AS "CORE COST",
            nvl(A.RB_COST,0) AS "TOTAL COST",
            UPPER(RB_MASTERLIST.detailed_desc) AS "DESCRIPTION",
            UPPER(RB_MASTERLIST.keyword) AS "KEYWORD",
            SC_PARTS_USED.rowid
        FROM
            SC_PARTS_USED,
            RB_MASTERLIST,
            (SELECT
            round(sum(total_cost),2) as RB_COST, round(sum(total_unit_cost),2) as RB_UNIT_COST , rb_reference
        FROM
            TEMP_materials_list
        group by
            rb_reference) A
        WHERE
            SC_PARTS_USED.link_code = vi_idnum AND
            SC_PARTS_USED.rebuilt_part = 'Y' AND
            SC_PARTS_USED.link_type = vi_link_type AND
            RB_MASTERLIST.rebuilt_stock_num(+)= SC_PARTS_USED.mms_rebuilt_code AND
            rb_reference (+)= SC_PARTS_USED.mms_rebuilt_code
        ORDER BY
            SC_PARTS_USED.mms_rebuilt_code;
END RETRIEVE_RBP_USED;


/*
PROCEDURE RETRIEVE_CC_TOTALS
    (vi_idnum IN MB_LIST.MB_NUMBER%TYPE,
     vi_link_type IN SC_PARTS_USED.link_type%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
        SELECT
            nvl(C.name,'NONE') AS "ASSEMBLY AREA",
            nvl(A.cost_centre, 0) AS "CC",
            nvl(sum(A.cost),0) AS "TOTAL COST",
            nvl(sum(A.taxcost), 0 )AS "TAXABLE COST"

        FROM
            (SELECT
                cost_centre,
                (FINAL_COST(percent_usage, qty_reqd, mms_cost, corecost)- FINAL_COST(percent_usage, qty_reqd, corecost, 0)) AS cost,
                FINAL_COST(percent_usage, qty_reqd, mms_cost, 0) AS taxcost
             FROM
                SC_PARTS_USED
             WHERE
                link_code = vi_idnum AND
                rebuilt_part = 'N' AND
                link_type =vi_link_type
             UNION ALL */ /*
                SELECT
                    cost_centre,
                    FINAL_COST(percent_usage, qty_reqd, reb_part_cost, corecost) as cost,
                    FINAL_COST(percent_usage, qty_reqd, reb_part_cost, 0) AS taxcost
                FROM
                    SC_PARTS_USED
                WHERE
                    link_code = vi_idnum AND
                    rebuilt_part = 'Y' AND
                    link_type =vi_link_type
                UNION ALL */ /*
                     SELECT
                        NSC_PARTS_USED.cost_centre,
                        FINAL_COST(NSC_PARTS_USED.percent_usage, NSC_PARTS_USED.qty_reqd, NON_STOCK_CODED_PARTS.oem_part_cost, 0) as cost,
                        FINAL_COST(NSC_PARTS_USED.percent_usage, NSC_PARTS_USED.qty_reqd, NON_STOCK_CODED_PARTS.oem_part_cost, 0) AS taxcost
                    FROM
                        NSC_PARTS_USED NSC_PARTS_USED, NON_STOCK_CODED_PARTS NON_STOCK_CODED_PARTS
                    WHERE
                        link_code = upper(vi_IDnum) AND
                        link_type = UPPER(vi_link_type) AND
                        NON_STOCK_CODED_PARTS.ID (+)= NSC_PARTS_USED.ID) A,
            cost_centres C
        WHERE
            C.cost_centre = A.cost_centre
        GROUP BY
            A.cost_centre,
            C.name;
END RETRIEVE_CC_TOTALS;
*/

--new procedure for request #232922
PROCEDURE RETRIEVE_RBP_USED_NUM
    (vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
        SELECT
            DISTINCT(mms_rebuilt_code) AS mms_rebuilt_code
            FROM
                SC_PARTS_USED
            WHERE
                SC_PARTS_USED.rebuilt_part = 'Y';
END RETRIEVE_RBP_USED_NUM;

PROCEDURE RETRIEVE_SC_ORIG_SUPPLIER_NUM
    (vi_osn IN STOCK_CODED_PARTS.ORIG_SUPPLIER_NUM%TYPE,
    vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
    SELECT
        UPPER(mms_stock_code) AS mms_stock_code,
        replace(UPPER(mms_new_cost), ',','.') AS mms_new_cost
    FROM
        STOCK_CODED_PARTS
    WHERE rtrim(orig_supplier_num) = rtrim(vi_osn);
END RETRIEVE_SC_ORIG_SUPPLIER_NUM;

PROCEDURE RETRIEVE_USER_BY_USERNAME
    (vi_username IN USERS.username%TYPE,
    vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
    SELECT
        UPPER(username) AS username,
        UPPER(date_changed) AS date_changed,
        UPPER(password) AS password,
        UPPER(pswd_change_date) AS pswd_change_date,
        UPPER(access_level) AS access_level,
        UPPER(previous_access_level) AS previous_access_level,
        UPPER(date_changed_back) AS date_changed_back,
        ROWID
    FROM
        USERS
    WHERE
        TRIM(UPPER(username)) = trim(upper(vi_username));
END RETRIEVE_USER_BY_USERNAME;

PROCEDURE RETRIEVE_ALL_USERS
    (vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
    SELECT
        username AS "USER NAME",
        date_changed AS "DATE CHANGED",
        access_level AS "ACCESS LEVEL",
        date_changed_back AS "DATE CHANGED BACK",
        previous_access_level AS "PREV ACCESS LEVEL"
    FROM
        USERS;
END RETRIEVE_ALL_USERS;

PROCEDURE RETRIEVE_PASSWORD
    (vi_username in USERS.username%TYPE,
    vo_Cursor OUT query_cur) is
BEGIN
    open vo_Cursor for
    select
        password
    from
        USERS
    where
        username = vi_username;
END RETRIEVE_PASSWORD;

PROCEDURE RETRIEVE_LIST_OF_BUSES
    (vo_Cursor IN OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
    SELECT
        list_id,
        UPPER(description) AS description
    FROM
        LIST_OF_BUSES
    ORDER BY
        description;
END RETRIEVE_LIST_OF_BUSES;

PROCEDURE MB_LIST_BUSES
    (vi_mb_number IN MB_LIST_OF_BUSES.mb_number%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
    SELECT
        MB_LIST_OF_BUSES.list_id AS list_id,
        UPPER(LIST_OF_BUSES.description) AS description
    FROM
        MB_LIST_OF_BUSES,
        LIST_OF_BUSES
    WHERE
        MB_LIST_OF_BUSES.mb_number = vi_mb_number AND
        MB_LIST_OF_BUSES.list_id = LIST_OF_BUSES.list_id;
END MB_LIST_BUSES;

PROCEDURE RETRIEVE_MB_LIST_BY_MB_NUMBER
    (vi_mb_number IN MB_LIST.mb_number%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
    SELECT
        UPPER(rebuild_code) AS rebuild_code,
        UPPER(description) AS description,
        UPPER(keyword) AS keyword,
        UPPER(core_code) AS core_code,
        UPPER(bench_number) AS bench_number,
        UPPER(sop_number) AS sop_number,
        UPPER(buy_new_cost) AS buy_new_cost,
        UPPER(external_cost) AS external_cost,
        UPPER(reman_cost) AS reman_cost,
        UPPER(job_number) AS job_number,
        UPPER(core_cost) AS core_charge

    FROM
        MB_LIST
    WHERE
        mb_number = vi_mb_number;
END RETRIEVE_MB_LIST_BY_MB_NUMBER;

PROCEDURE RETRIEVE_EMPLOYEE_LABOUR
    (vi_link_number IN EMPLOYEE_LABOUR.link_number%TYPE,
     vi_typeid IN EMPLOYEE_LABOUR.typeid%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
    SELECT
        UPPER(labour_defn) AS labour_defn,
        UPPER(costcentre) AS costcentre,
        UPPER(task) AS task,
        UPPER(labour_type) AS labour_type,
        UPPER(usage) AS usage,
        UPPER(hrs_reqd) AS hrs_reqd,
        UPPER(adj_hrs) AS adj_hrs,
        UPPER(time_addition) AS time_addition,
        UPPER(rebuilt_part_num) AS rebuilt_part_num
    FROM
        EMPLOYEE_LABOUR
    WHERE
        link_number = vi_link_number AND
        typeid = vi_typeid;
END RETRIEVE_EMPLOYEE_LABOUR;

PROCEDURE RETRIEVE_BUS_DESCRIPTION
    (vi_description IN LIST_OF_BUSES.description%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
        SELECT
            list_id,
            description
        FROM
            LIST_OF_BUSES
        WHERE
            description = vi_description;

END RETRIEVE_BUS_DESCRIPTION;

PROCEDURE GET_MB_LIST_OF_BUSES_BY_LISTID
    (vi_list_id IN MB_LIST_OF_BUSES.list_id%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
        SELECT
            UPPER(mb_number) AS mb_number,
            UPPER(list_id) AS list_id
        FROM
            MB_LIST_OF_BUSES
        WHERE
            list_id = vi_list_id;
END GET_MB_LIST_OF_BUSES_BY_LISTID;

PROCEDURE RETRIEVE_ACCESS_LEVELS
    (vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
        SELECT
            UPPER(access_level_id) AS access_level_id
        FROM
            ACCESS_LEVEL;
END RETRIEVE_ACCESS_LEVELS;

PROCEDURE FIND_TASK_DESCRIPTION
    (vi_task_description IN LABOUR_TASK_DESCRIPTIONS.task_description%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
        SELECT
            UPPER(task_id) AS task_id,
            UPPER(task_description) AS task_description
        FROM
            LABOUR_TASK_DESCRIPTIONS
        WHERE
            task_description = vi_task_description;
END FIND_TASK_DESCRIPTION;

PROCEDURE RETRIEVE_EMPL_CLASS
    (vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
        SELECT
            EMPL_CLASS.labour_type AS "LABOUR TYPE ID",
            EMPL_CLASS.labour_defn AS "LABOUR TYPE",
            EMPL_CLASS.wage_group AS "WAGE GROUP",
            EMPLOYEE_SALARIES.rate_per_hour AS "RATE PER HOUR",
            EMPL_CLASS.hrs_per_week AS "HRS PER WEEK",
            EMPL_CLASS.overheadtype AS "OVERHEAD TYPE"
        FROM
            EMPL_CLASS,
            EMPLOYEE_SALARIES
        WHERE
            EMPL_CLASS.wage_group = EMPLOYEE_SALARIES.wage_group;

END RETRIEVE_EMPL_CLASS;

PROCEDURE RETRIEVE_EMPLOYEE_SALARIES
    (vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
        SELECT
            wage_group AS "WAGE GROUP",
            rate_per_hour AS "RATE PER HOUR"
        FROM
            EMPLOYEE_SALARIES;
END RETRIEVE_EMPLOYEE_SALARIES;

PROCEDURE SEARCH_EMPLOYEE_SALARIES
    (vi_rate_per_hour in EMPLOYEE_SALARIES.rate_per_hour%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
        SELECT
            wage_group,
            rate_per_hour,
            date_entered
        FROM
            EMPLOYEE_SALARIES
        WHERE
            rate_per_hour = vi_rate_per_hour;
END SEARCH_EMPLOYEE_SALARIES;

PROCEDURE SEARCH_EMPL_CLASS_WAGE_GROUP
    (vi_wage_group IN EMPL_CLASS.wage_group%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
        SELECT
            labour_type,
            labour_defn,
            wage_group,
            hrs_per_week,
            date_entered,
            overheadtype
        FROM
            EMPL_CLASS
        WHERE
            wage_group = vi_wage_group;
END SEARCH_EMPL_CLASS_WAGE_GROUP;

PROCEDURE SEARCH_EMPL_CLASS_LABOUR_DEFN
    (vi_labour_defn IN EMPL_CLASS.labour_defn%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
        SELECT
            UPPER(labour_type) AS labour_type,
            UPPER(labour_defn) AS labour_defn,
            UPPER(wage_group) AS wage_group,
            UPPER(hrs_per_week) AS hrs_per_week,
            UPPER(date_entered) AS date_entered,
            UPPER(overheadtype) AS overheadtype
        FROM
            EMPL_CLASS
        WHERE
            labour_defn = vi_labour_defn;
END SEARCH_EMPL_CLASS_LABOUR_DEFN;

PROCEDURE SEARCH_WAGE_GROUP
    (vi_wage_group IN EMPLOYEE_SALARIES.wage_group%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
        SELECT
            UPPER(wage_group) AS wage_group,
            UPPER(rate_per_hour) AS rate_per_hour,
            UPPER(date_entered) AS date_entered
        FROM
            EMPLOYEE_SALARIES
        WHERE
            wage_group = vi_wage_group;
END SEARCH_WAGE_GROUP;

PROCEDURE SEARCH_OEM_KITS
    (vi_part_number IN KITS_MASTERLIST.part_number%TYPE,
     vi_description IN KITS_MASTERLIST.detailed_desc%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
    SELECT
        part_number AS "PART NUMBER",
        detailed_desc AS "DESCRIPTION",
        keyword AS "KEYWORD",
        'YESDELETE' AS "ID",
        estimated_cost
    FROM
        KITS_MASTERLIST
    WHERE
        UPPER(NVL(part_number,' ')) LIKE '%'||TRIM(upper(vi_part_number))||'%' AND
        UPPER(NVL(detailed_desc,' ')) LIKE  '%'||TRIM(upper(vi_description))||'%';
END SEARCH_OEM_KITS;

PROCEDURE RETRIEVE_OEMKITS_ATTACHED
    (vi_link_code IN KITS_USED.link_code%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
        SELECT
            UPPER(part_number) AS part_number
        FROM
            KITS_USED
        WHERE
            link_code = vi_link_code;

END RETRIEVE_OEMKITS_ATTACHED;

PROCEDURE RETRIEVE_SC_KIT_DATA
    (vi_mms_stock_code in SC_OEMKITS_TEXT_DATA.mms_new_code%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
        SELECT
            UPPER(text_data) AS text_data
        FROM
            SC_OEMKITS_TEXT_DATA
        WHERE mms_new_code = vi_mms_stock_code;

END RETRIEVE_SC_KIT_DATA;

PROCEDURE RETRIEVE_ARCH_RB
    (vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
        SELECT
            ARCH_RB_MASTERLIST_ID,
            MMS_STOCK_CODE AS "MMS Stock Code",
            DETAILED_DESC AS "Detailed Description",
            KEYWORD AS "Keyword",
            DATE_ARCHIVED AS "Date Archived",
            ESTIMATED_COST AS "Estimated Cost"
        FROM
            ARCH_RB_MASTERLIST;
END RETRIEVE_ARCH_RB;

PROCEDURE GET_ARCH_RB_MASTERLIST
    (vi_mms_stock_code IN ARCH_RB_MASTERLIST.mms_stock_code%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
            *
        FROM
            ARCH_RB_MASTERLIST
        WHERE
            mms_stock_code = vi_mms_stock_code;
END GET_ARCH_RB_MASTERLIST;

PROCEDURE GET_ARCH_RB_EMPLOYEE_LABOUR
    (vi_arch_rb_masterlist_id IN ARCH_RB_EMPLOYEE_LABOUR.arch_rb_masterlist_id%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
             labour_defn AS "Labour Type",
             costcentre AS "CC",
             task AS "Task",
             usage AS "Usage",
             hrs_reqd AS "Time",
             adj_hrs AS "Actual Time"
        FROM
            ARCH_RB_EMPLOYEE_LABOUR
        WHERE
            arch_rb_masterlist_id = vi_arch_rb_masterlist_id;
END GET_ARCH_RB_EMPLOYEE_LABOUR;

PROCEDURE GET_ARCH_RB_LABOUR_CC_TOTAL
    (vi_arch_rb_masterlist_id IN ARCH_RB_LABOUR_CC_TOTAL.arch_rb_masterlist_id%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
            cost_centre AS "Cost Centre",
            total_hours AS "Total Cost"
        FROM
            ARCH_RB_LABOUR_CC_TOTAL
        WHERE
            arch_rb_masterlist_id = vi_arch_rb_masterlist_id;
END GET_ARCH_RB_LABOUR_CC_TOTAL;

PROCEDURE GET_ARCH_RB_MATERIALS_CC_TOTAL
    (vi_arch_rb_masterlist_id IN ARCH_RB_MATERIALS_CC_TOTAL.arch_rb_masterlist_id%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
            cost_centre AS "Cost Centre",
            total_cost AS "Total Cost"
        FROM
            ARCH_RB_MATERIALS_CC_TOTAL
        WHERE
            arch_rb_masterlist_id = vi_arch_rb_masterlist_id;
END GET_ARCH_RB_MATERIALS_CC_TOTAL;

PROCEDURE GET_ARCH_RB_SC_PARTS_USED
    (vi_arch_rb_masterlist_id IN ARCH_RB_SC_PARTS_USED.arch_rb_masterlist_id%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
            *
        FROM
            ARCH_RB_SC_PARTS_USED
        WHERE
            arch_rb_masterlist_id = vi_arch_rb_masterlist_id;
END GET_ARCH_RB_SC_PARTS_USED;

PROCEDURE SEARCH_MB_BY_BUS
    (vi_bus_id IN LIST_OF_BUSES.list_id%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
            UPPER(MB_LIST.mb_number) AS "MB NUMBER",
            UPPER(MB_LIST.keyword) AS "KEYWORD",
            UPPER(MB_LIST.description) AS "DESCRIPTION",
            UPPER(MB_LIST.bus_type) AS "BUS TYPE",
            UPPER(MB_LIST.num_bus_comp) AS "# BUSES USING COMP",
            UPPER(MB_LIST.vendor_part_num) AS "VENDOR PART #",
            UPPER(MB_LIST.buy_code) AS "BUY CODE",
            UPPER(MB_LIST.rebuild_code) AS "REBUILT CODE",
            UPPER(MB_LIST.core_code) AS "CORE CODE",
            UPPER(MB_LIST.annual_usage) AS "ANNUAL USAGE",
            UPPER(MB_LIST.bench_number) AS "BENCH NUMBER",
            UPPER(MB_LIST.sample_provided) AS "SAMPLE PROVIDED",
            UPPER(MB_LIST.recommendation) AS "RECOMMENDATION",
            UPPER(MB_LIST.reman_cost) AS "REMAN EX COST",
            UPPER(MB_LIST.external_cost) AS "EXTERNAL COST",
            UPPER(MB_LIST.buy_new_cost) AS "NEW COST",
            UPPER(MB_LIST.internal_cost) AS "INTERNAL COST",
            UPPER(MB_LIST.sop_number) AS "SOP NUMBER",
            UPPER(MB_LIST.core_cost) AS "CORE COST",
            UPPER(MB_LIST.job_number) AS "JOB NUMBER",
            DATE_OPENED AS "DATE OPENED",
            MB_LIST.ROWID
        FROM
            MB_LIST,
            MB_LIST_OF_BUSES
        WHERE
            MB_LIST.mb_number = MB_LIST_OF_BUSES.mb_number AND
            MB_LIST_OF_BUSES.list_id = vi_bus_id;
END SEARCH_MB_BY_BUS;

PROCEDURE RETRIEVE_CES_SETTI
    (vi_parameter IN CES_SETTINGS.parameter%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
        SELECT
            ces_settings_id,
            value
        FROM
            CES_SETTINGS
        WHERE
            parameter = vi_parameter;
END RETRIEVE_CES_SETTI;

PROCEDURE SERCH_KIT_BY_NUMBER
    (vi_part_number KITS_MASTERLIST.part_number%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
        SELECT
            UPPER(estimated_cost) AS estimated_cost,
            UPPER(keyword) AS keyword,
            UPPER(detailed_desc) AS detailed_desc,
            UPPER(modified_last_by) AS modified_last_by,
            UPPER(modified_last_date) AS modified_last_date,
            UPPER(date_entered) AS date_entered,
            UPPER(part_number) AS part_number
        FROM
            KITS_MASTERLIST
        WHERE
            part_number = vi_part_number;

END SERCH_KIT_BY_NUMBER;

PROCEDURE SERACH_NSCP_BY_ORIG_SUPPL_NUM
    (vi_orig_supplier_num NON_STOCK_CODED_PARTS.orig_supplier_num%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
        SELECT
            UPPER(orig_supplier_num) AS orig_supplier_num,
            UPPER(orig_supplier_name) AS orig_supplier_name,
            UPPER(date_entered) AS date_entered,
            UPPER(oem_part_cost) AS oem_part_cost,
            UPPER(detailed_desc) AS detailed_desc,
            UPPER(part_added_by) AS part_added_by,
            UPPER(last_modified_by) AS last_modified_by,
            UPPER(last_modified_date) AS last_modified_date,
            UPPER(keyword) AS keyword,
            UPPER(id) AS id
        FROM
            NON_STOCK_CODED_PARTS
        WHERE
            orig_supplier_num = vi_orig_supplier_num;
END SERACH_NSCP_BY_ORIG_SUPPL_NUM;

PROCEDURE SERCH_ENGINE_BY_NAME
    (vi_name ENGINES.name%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
        SELECT
            UPPER(ENGINES.name) AS name
        FROM
            ENGINES
        WHERE
            ENGINES.name = vi_name;
END SERCH_ENGINE_BY_NAME;

PROCEDURE SERCH_DIFFERENTIAL_BY_NAME
    (vi_name DIFFERENTIAL.name%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
        SELECT
            UPPER(DIFFERENTIAL.name) AS name
        FROM
            DIFFERENTIAL
        WHERE
            DIFFERENTIAL.name = vi_name;
END SERCH_DIFFERENTIAL_BY_NAME;

PROCEDURE SERCH_TRANSMISSION_BY_NAME
    (vi_name TRANSMISSIONS.name%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
        SELECT
            UPPER(TRANSMISSIONS.name)AS name
        FROM
            TRANSMISSIONS
        WHERE
            TRANSMISSIONS.name = vi_name;
END SERCH_TRANSMISSION_BY_NAME;

PROCEDURE SEARCH_VEH_TYPE_BY_KEY
    (vi_make TYPE_OF_VEHICLE.make%TYPE,
     vi_model TYPE_OF_VEHICLE.model%TYPE,
     vi_year TYPE_OF_VEHICLE.year%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
        SELECT
            make,
            model,
            year
        FROM
            TYPE_OF_VEHICLE
        WHERE
            make = vi_make AND
            model = vi_model AND
            year = vi_year;
END SEARCH_VEH_TYPE_BY_KEY;

PROCEDURE RB_LIST_BUSES
    (vi_rebuilt_stock_num IN RB_LIST_OF_BUSES.rebuilt_stock_num%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
    SELECT
        RB_LIST_OF_BUSES.list_id,
        LIST_OF_BUSES.description
    FROM
        RB_LIST_OF_BUSES,
        LIST_OF_BUSES
    WHERE
        RB_LIST_OF_BUSES.rebuilt_stock_num = vi_rebuilt_stock_num AND
        RB_LIST_OF_BUSES.list_id = LIST_OF_BUSES.list_id;
END RB_LIST_BUSES;

PROCEDURE GET_ALL_NSCP
    (vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
        SELECT
            *
        FROM
            NON_STOCK_CODED_PARTS;
END GET_ALL_NSCP;

PROCEDURE SEARCH_NSCP_PART_BY_2_FIELDS
    (vi_orig_supplier_num IN NON_STOCK_CODED_PARTS.orig_supplier_num%TYPE,
     vi_orig_supplier_name IN NON_STOCK_CODED_PARTS.orig_supplier_name%TYPE,
     vo_Cursor OUT query_cur) IS
 position varchar2(500);
 name varchar(500)   ;

BEGIN


 position := INSTR(vi_orig_supplier_name,' Price:',1,1);
 if position > 0 then
    name := substr (vi_orig_supplier_name,1,(position -1));
 else
    name := vi_orig_supplier_name;
 end if;
    OPEN vo_Cursor FOR
        SELECT
            nvl(keyword, ' ') AS "KEYWORD",
            nvl(detailed_desc, ' ') AS "DESCRIPTION",
            nvl(oem_part_cost, 0) AS "PRICE",
            last_modified_date AS "LAST MODIFIED DATE",
            id AS "ID",
            rowid AS "ROWID"
        FROM
            NON_STOCK_CODED_PARTS
        WHERE
            orig_supplier_num = vi_orig_supplier_num AND
            orig_supplier_name = name;
END SEARCH_NSCP_PART_BY_2_FIELDS;

PROCEDURE FIND_SUPPLIER_NAME_BY_NUMBER
    (vi_orig_supplier_num IN NON_STOCK_CODED_PARTS.orig_supplier_num%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
        SELECT
            nvl(orig_supplier_name, ' ') || ' Price: $' || nvl(oem_part_cost, 0 ) as orig_supplier_name
        FROM
            NON_STOCK_CODED_PARTS
        WHERE
            orig_supplier_num = vi_orig_supplier_num;
END FIND_SUPPLIER_NAME_BY_NUMBER;

PROCEDURE RETRIEVE_RBP_USED_DISTINCT
    (vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
        SELECT
            DISTINCT(mms_rebuilt_code) AS mms_rebuilt_code
        FROM
        (
            SELECT
                SC_PARTS_USED.mms_rebuilt_code
            FROM
                SC_PARTS_USED
            WHERE
                SC_PARTS_USED.rebuilt_part = 'Y' AND
                SC_PARTS_USED.link_type = 'RB'
        UNION
            SELECT
                SC_PARTS_USED.link_code
            FROM
                SC_PARTS_USED
            WHERE
                SC_PARTS_USED.rebuilt_part = 'Y' AND
                SC_PARTS_USED.link_type = 'RB'
        );
END RETRIEVE_RBP_USED_DISTINCT;

PROCEDURE RETRIEVE_RBP_USED_LINKS
    (vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
        SELECT
            SC_PARTS_USED.mms_rebuilt_code AS mms_rebuilt_code,
            SC_PARTS_USED.link_code AS link_code
        FROM
            SC_PARTS_USED
        WHERE
                SC_PARTS_USED.rebuilt_part = 'Y' AND
                SC_PARTS_USED.link_type = 'RB';
END RETRIEVE_RBP_USED_LINKS;

PROCEDURE RETRIEVE_RBP_TO_PROPAGATE_RB
    (vi_idnum IN SC_PARTS_USED.mms_rebuilt_code%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
        SELECT
            UPPER(SC_PARTS_USED.link_code) AS mms_rebuilt_code
        FROM
            SC_PARTS_USED
        WHERE
            SC_PARTS_USED.rebuilt_part = 'Y' AND
            SC_PARTS_USED.link_type = 'RB' AND
            SC_PARTS_USED.mms_rebuilt_code = vi_idnum;
END RETRIEVE_RBP_TO_PROPAGATE_RB;

PROCEDURE RETRIEVE_RBP_TO_PROPAGATE_NSC
    (vi_idnum IN NSC_PARTS_USED.id%TYPE,
     vo_Cursor OUT query_cur)IS
BEGIN
    OPEN vo_Cursor FOR
        SELECT
            UPPER(NSC_PARTS_USED.link_code) AS mms_rebuilt_code
        FROM
            NSC_PARTS_USED
        WHERE
            NSC_PARTS_USED.link_type = 'RB' AND
            NSC_PARTS_USED.id = vi_idnum;
END RETRIEVE_RBP_TO_PROPAGATE_NSC;

PROCEDURE RETRIEVE_RBP_TO_PROPAGATE_SAL
    (vi_idnum IN EMPL_CLASS.wage_group%TYPE,
     vo_Cursor OUT query_cur)IS
BEGIN
    OPEN vo_Cursor FOR
        SELECT
            UPPER(EMPLOYEE_LABOUR.link_number) AS mms_rebuilt_code
        FROM
            EMPLOYEE_LABOUR,
            EMPL_CLASS
        WHERE
            EMPLOYEE_LABOUR.typeid = 'RB' AND
            EMPLOYEE_LABOUR.labour_defn = UPPER(EMPL_CLASS.labour_defn) AND
            EMPL_CLASS.wage_group = vi_idnum;
END RETRIEVE_RBP_TO_PROPAGATE_SAL;

PROCEDURE RETRIEVE_RBP_TO_PROPAGATE_LAB
    (vi_idnum IN EMPLOYEE_LABOUR.labour_defn%TYPE,
     vo_Cursor OUT query_cur)IS
BEGIN
    OPEN vo_Cursor FOR
        SELECT
            UPPER(EMPLOYEE_LABOUR.link_number) AS mms_rebuilt_code
        FROM
            EMPLOYEE_LABOUR
        WHERE
            EMPLOYEE_LABOUR.typeid = 'RB' AND
            EMPLOYEE_LABOUR.labour_defn = UPPER(vi_idnum);
END RETRIEVE_RBP_TO_PROPAGATE_LAB;

PROCEDURE RETRIEVE_KIT_TO_PROPAGATE_NSC
    (vi_idnum IN NSC_PARTS_USED.id%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
        SELECT
            UPPER(NSC_PARTS_USED.link_code) AS part_number
        FROM
            NSC_PARTS_USED
        WHERE
            NSC_PARTS_USED.link_type = 'KIT' AND
            NSC_PARTS_USED.id = vi_idnum;
END RETRIEVE_KIT_TO_PROPAGATE_NSC;

PROCEDURE RETRIEVE_EST_TO_PROPAGATE_RB
    (vi_idnum IN SC_PARTS_USED.mms_rebuilt_code%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
        SELECT
            UPPER(SC_PARTS_USED.link_code) AS "link_code",
            UPPER(SC_PARTS_USED.link_type) AS "link_type"
        FROM
            SC_PARTS_USED
        WHERE
            SC_PARTS_USED.rebuilt_part = 'Y' AND
            SC_PARTS_USED.mms_rebuilt_code = vi_idnum;
END RETRIEVE_EST_TO_PROPAGATE_RB;
/*
FUNCTION RETRIEVE_RBP_TOTAL_COST
    (vi_rbnum IN RB_MASTERLIST.rebuilt_stock_num%TYPE,
     vi_link_type IN SC_PARTS_USED.link_type%TYPE,
     vo_total_cost OUT NUMBER) RETURN NUMBER IS
     labour_subtotal NUMBER;
     labour_overhead NUMBER;
     labour_total NUMBER;
     nscp_total NUMBER;
     scp_total NUMBER;
     rbp_total NUMBER;
     materials_total NUMBER;
     core_cost_str VARCHAR2(25);
     core_cost NUMBER;
BEGIN
    -- Calculate the Labour Subtotal
    SELECT
        NVL(SUM(ROUND(EMPLOYEE_LABOUR.time_addition * EMPLOYEE_SALARIES.rate_per_hour * (EMPLOYEE_LABOUR.usage/100), 2)), 0)
    INTO
        labour_subtotal
    FROM
        EMPLOYEE_LABOUR,
        EMPLOYEE_SALARIES,
        EMPL_CLASS
    WHERE
        EMPLOYEE_LABOUR.labour_defn = UPPER(EMPL_CLASS.labour_defn) AND
        EMPLOYEE_SALARIES.wage_group = EMPL_CLASS.wage_group AND
        EMPLOYEE_LABOUR.link_number = vi_rbnum AND
        EMPLOYEE_LABOUR.typeid = vi_link_type;
    -- Calculate the Labour Overhead
    SELECT
        (MAX(CES_SETTINGS.value) * labour_subtotal)
    INTO
        labour_overhead
    FROM
        CES_SETTINGS
    WHERE
        CES_SETTINGS.parameter = 'OVERHEAD';
    -- Calculate the Labour Total
    labour_total := labour_subtotal + labour_overhead;
    -- Calculate the Non-Stock Coded Parts Total
    SELECT
        NVL(SUM(FINAL_COST(NSC_PARTS_USED.percent_usage, NSC_PARTS_USED.qty_reqd, NSC_PARTS_USED.cost, 0) - NSC_PARTS_USED.corecost), 0)
    INTO
        nscp_total
    FROM
        NSC_PARTS_USED
    WHERE
        NSC_PARTS_USED.link_code = vi_rbnum AND
        NSC_PARTS_USED.link_type = vi_link_type;
    -- Calculate the Stock Coded Parts Total
    SELECT
        NVL(SUM(FINAL_COST(SC_PARTS_USED.percent_usage, SC_PARTS_USED.qty_reqd, SC_PARTS_USED.mms_cost, 0) - SC_PARTS_USED.corecost), 0)
    INTO
        scp_total
    FROM
        SC_PARTS_USED
    WHERE
        SC_PARTS_USED.link_code = vi_rbnum AND
        SC_PARTS_USED.link_type = vi_link_type AND
        SC_PARTS_USED.rebuilt_part = 'N';
    -- Calculate the Rebult Parts Total
    SELECT
        NVL(SUM(FINAL_COST(SC_PARTS_USED.percent_usage, SC_PARTS_USED.qty_reqd, SC_PARTS_USED.reb_part_cost, 0) - SC_PARTS_USED.corecost), 0)
    INTO
        rbp_total
    FROM
        SC_PARTS_USED
    WHERE
        SC_PARTS_USED.link_code = vi_rbnum AND
        SC_PARTS_USED.link_type = vi_link_type AND
        SC_PARTS_USED.rebuilt_part = 'Y';
    -- Calculate the Materials Total
    materials_total := nscp_total + scp_total + rbp_total;
    -- Calculate the Core Cost
    SELECT
        core_charge
    INTO
        core_cost_str
    FROM
        RB_MASTERLIST
    WHERE
        UPPER(RB_MASTERLIST.rebuilt_stock_num) = vi_rbnum;
    -- Convert the Core Cost into a number
    IF core_cost_str = '' OR core_cost_str = ' ' OR core_cost_str IS NULL THEN
        core_cost := 0;
    ELSE
        core_cost := CAST(REPLACE(core_cost_str, '.', ',') AS NUMBER);
    END IF;
    -- Calculate the Total Cost
    vo_total_cost := materials_total - core_cost;
    RETURN 0;
END RETRIEVE_RBP_TOTAL_COST;  */



/*Retrieves the complete cost minus tax of a rebuilt part estimate.  Input the rebuilt part number and
the type RB,BUS,MB Used in cost variance report*/


FUNCTION RPT_RBP_COST
    (vi_rbnum  IN RB_MASTERLIST.rebuilt_stock_num%TYPE,
     vi_link_type IN SC_PARTS_USED.link_type%TYPE) RETURN NUMBER IS

     emesg varchar2(30);
     vo_total_cost_ret NUMBER(20,10);
     labour_subtotal NUMBER(20,10);
     labour_overhead NUMBER(20,10);
     labour_total NUMBER(20,10);
     nscp_total NUMBER(20,10);
     scp_total NUMBER(20,10);
     rbp_total NUMBER(20,10);
     materials_total NUMBER(20,10);
     core_cost_str VARCHAR2(30);
     core_cost NUMBER(20,10);
     V_PRICE number (20,10);

BEGIN

--Get the total material cost
    V_PRICE := NVL(get_material_cost(vi_rbnum,vi_link_type),0);

      SELECT
        NVL(SUM(TOTAL_COST),0) AS "TOTAL COST"
      INTO
        MATERIALS_TOTAL
      FROM
        TEMP_MATERIALS_LIST;

--get the total labour costs
    V_PRICE := NVL(get_labour_cost(vi_rbnum,vi_link_type),0);


        SELECT
           NVL(SUM(TOTAL_COST),0) AS "TOTAL COST"
        INTO
            labour_subtotal
        FROM
            TEMP_LABOUR_LIST;

--retrieve the labour overhead amount
    SELECT
        nvl( (MAX( to_number(replace(CES_SETTINGS.value,',','.'))) * labour_subtotal),0)
    INTO
        labour_overhead
    FROM
        CES_SETTINGS
    WHERE
        CES_SETTINGS.parameter = 'OVERHEAD';

    -- Calculate the Labour Total with overhead

    labour_total := labour_subtotal + labour_overhead;

    SELECT
        nvl(core_charge,'0')
    INTO
        core_cost_str
    FROM
        RB_MASTERLIST
    WHERE
        UPPER(RB_MASTERLIST.rebuilt_stock_num) = vi_rbnum;

    -- Convert the Core Cost into a number
    -- vhou 2010-06-07 Add replace function to get rid of '$' synbol in the data
    IF core_cost_str = '' OR core_cost_str = ' ' OR core_cost_str IS NULL THEN
        core_cost := 0;
    ELSE
        core_cost := to_number(REPLACE(REPLACE(core_cost_str, ',', '.'),'$',''));
    END IF;

    -- Calculate the Total Cost of the rebuilt part
    V_PRICE:= round(nvl(((materials_total - core_cost + labour_total )),0), 2) ;

    RETURN nvl(V_PRICE,0);

END RPT_RBP_COST;


PROCEDURE RETRIEVE_RBP_TOTAL_COST2
    (vi_idnum IN RB_MASTERLIST.rebuilt_stock_num%TYPE,
     vi_type IN SC_PARTS_USED.link_type%TYPE,
     vo_Cursor OUT query_cur) IS

V_LINK_CODE VARCHAR2(30);
V_PRICE number (20,10);
V_RET_VAL VARCHAR2(25);

CURSOR C_RB_LIST_To_Prop (vi_IDnum IN varchar2)
IS
SELECT DISTINCT UPPER(SC_PARTS_USED.link_code) AS "link_code",
                SC_PARTS_USED.qty_reqd AS "QTY",
                SC_PARTS_USED.percent_usage AS "%",
                SC_PARTS_USED.mms_rebuilt_code AS "Rebuilt Code"
        FROM
            SC_PARTS_USED
        WHERE
            SC_PARTS_USED.rebuilt_part = 'Y' AND
            SC_PARTS_USED.link_type = vi_type AND
            upper(SC_PARTS_USED.link_code) = upper(vi_IDnum);

cur_RBRec C_RB_LIST_To_Prop%ROWTYPE;
/*

  CURSOR cur_Material (vi_IDnum IN varchar)
IS

       SELECT
            nvl(C.name,'NONE') AS "ASSEMBLY AREA",
            nvl(A.cost_centre, '0') AS "CC",
            nvl(sum(A.cost), '0') AS "TOTAL COST",
            nvl(sum(A.taxcost), '0')AS "TAXABLE COST"
        FROM
            (SELECT
                cost_centre,
                FINAL_COST(percent_usage, qty_reqd, mms_cost, corecost) AS cost,
                FINAL_COST(percent_usage, qty_reqd, mms_cost, 0) AS taxcost
             FROM
                SC_PARTS_USED
             WHERE
                link_code = upper(vi_idnum) AND
                rebuilt_part = 'N' AND
                link_type =upper(vi_type)
             UNION ALL
                    SELECT
                        cost_centre,
                        FINAL_COST(percent_usage, qty_reqd, cost, corecost) as cost,
                        FINAL_COST(percent_usage, qty_reqd, cost, 0) AS taxcost
                    FROM
                        NSC_PARTS_USED
                    WHERE
                        link_code = upper(vi_IDnum) AND
                        link_type = UPPER(vi_type)) A,
            cost_centres C
        WHERE
            C.cost_centre = A.cost_centre
        GROUP BY
            A.cost_centre,
            C.name;

cur_MaterialRec cur_Material%ROWTYPE;
V_PRICE number (20,10);
*/

BEGIN

V_PRICE := get_material_cost(vi_idnum,vi_type);

/*
open cur_Material(upper(vi_idnum));
LOOP
    FETCH cur_Material
    INTO cur_MaterialRec;
    EXIT WHEN cur_Material%NOTFOUND;

    insert into TEMP_MATERIALS_LIST values  (cur_MaterialRec."ASSEMBLY AREA",cur_MaterialRec."CC" ,cur_MaterialRec."TOTAL COST",cur_MaterialRec."TAXABLE COST",vi_IDnum,cur_MaterialRec."TOTAL COST");

END LOOP;
CLOSE cur_Material;

--checks to see how many rebuilt parts are attached to the rebuilt part number
-- inputted(rb_num) into this procedure
SELECT count(*) INTO V_PRICE FROM SC_PARTS_USED WHERE
            SC_PARTS_USED.rebuilt_part = 'Y' AND
            SC_PARTS_USED.link_type = UPPER(vi_type) AND
            upper(SC_PARTS_USED.link_code) = upper(vi_idnum);
--commit;

--if this current rebuilt part (rb_num) in this procedure resides
--in any other rebuilt parts update the prices of those rebuilt parts as well.
if V_PRICE > 0 then

open C_RB_LIST_To_Prop(upper(vi_idnum));
LOOP

    FETCH C_RB_LIST_To_Prop
    INTO cur_RBRec;
    EXIT WHEN C_RB_LIST_To_Prop%NOTFOUND;

    WRITE_MATERIALS (cur_RBRec."Rebuilt Code",cur_RBRec."QTY" * cur_RBRec."%"/100 , upper(vi_IDnum) );

END LOOP;
CLOSE C_RB_LIST_To_Prop;
end if; */

 OPEN vo_Cursor FOR
        SELECT
            COST_CENTRE AS "CC",
            SUM(TOTAL_COST) AS "TOTAL COST",
            SUM(TAXABLE_COST)AS "TAXABLE COST"
        FROM
            TEMP_MATERIALS_LIST
        GROUP BY
            COST_CENTRE
        ORDER BY
            COST_CENTRE ASC;
/*
    EXCEPTION
        WHEN others THEN
            ROLLBACK;
 */
END RETRIEVE_RBP_TOTAL_COST2;






FUNCTION RETRIEVE_KIT_TOTAL_COST
    (vi_idnum IN SC_PARTS_USED.link_code%TYPE,
     vo_total_cost OUT NUMBER) RETURN NUMBER IS
     nscp_total NUMBER;
     scp_total NUMBER;
BEGIN
    -- Calculate the Non-Stock Coded Part Cost
    SELECT
        NVL(SUM(FINAL_COST(NSC_PARTS_USED.percent_usage, NSC_PARTS_USED.qty_reqd, NSC_PARTS_USED.cost, 0) - NSC_PARTS_USED.corecost), 0)
    INTO
        nscp_total
    FROM
        NSC_PARTS_USED
    WHERE
        NSC_PARTS_USED.link_code = vi_idnum AND
        NSC_PARTS_USED.link_type = 'KIT';
    -- Calculate the Stock Coded Part Cost
    SELECT
        NVL(SUM(FINAL_COST(SC_PARTS_USED.percent_usage, SC_PARTS_USED.qty_reqd, SC_PARTS_USED.mms_cost, 0) - SC_PARTS_USED.corecost), 0)
    INTO
        scp_total
    FROM
        SC_PARTS_USED
    WHERE
        SC_PARTS_USED.link_code = vi_idnum AND
        SC_PARTS_USED.link_type = 'KIT' AND
        SC_PARTS_USED.rebuilt_part = 'N';
    -- Calculate the Total Cost
    vo_total_cost := nscp_total + scp_total;
    RETURN 0;
END RETRIEVE_KIT_TOTAL_COST;

PROCEDURE GET_NSC_PARTS_USED_BY_SUPPLIER
    (vi_orig_supp_num IN NSC_PARTS_USED.orig_supp_num%TYPE,
     vi_orig_supplier_name IN NSC_PARTS_USED.orig_supplier_name%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
        SELECT
            NSC_PARTS_USED.link_code AS "LINK CODE",
            NSC_PARTS_USED.link_type AS "LINK TYPE"
        FROM
            NSC_PARTS_USED NSC_PARTS_USED
       WHERE
            NSC_PARTS_USED.orig_supp_num = vi_orig_supp_num AND
            NSC_PARTS_USED.orig_supplier_name = vi_orig_supplier_name;

END GET_NSC_PARTS_USED_BY_SUPPLIER;

PROCEDURE RETRIEVE_BUS_FROM_KITS_USED
    (vi_kit_number IN KITS_USED.part_number%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
        SELECT
            link_code
        FROM
            KITS_USED
        WHERE
            part_number = vi_kit_number;
END RETRIEVE_BUS_FROM_KITS_USED;

-- Next procedure is called from the frmViewAudit screen when:
-- optAllEsimate is checked
-- cboUserName has data "ALL USERS"
-- chkAndDate is unchecked
PROCEDURE RETRIEVE_AUDIT_1
    (vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
        SELECT
            *
        FROM
            AUDIT_MODIFY_HISTORY
        WHERE
            ESTIMATE_TYPE IN
                ('MB','RB','BUS','KIT','NSCP')
        ORDER BY
            date_changed DESC;
END RETRIEVE_AUDIT_1;

-- Next procedure is called from the frmViewAudit screen when:
-- optAllEsimate is checked
-- cboUserName has data "ALL USERS"
-- chkAndDate is checked
-- data in the txtDateFrom is not empty
-- data in the txtDateTo is not empty
PROCEDURE RETRIEVE_AUDIT_2
    (vi_date_from IN VARCHAR,
     vi_date_to IN VARCHAR,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
        SELECT
            *
        FROM
            AUDIT_MODIFY_HISTORY
        WHERE
            date_changed >= TO_DATE(vi_date_from) AND
            date_changed <= TO_DATE(vi_date_to) AND
            ESTIMATE_TYPE IN
                ('MB','RB','BUS','KIT','NSCP')
        ORDER BY
            date_changed DESC;
END RETRIEVE_AUDIT_2;

-- Next procedure is called from the frmViewAudit screen when:
-- optEsimate is checked
-- User choosed some data from the cboEstimateType combo-box.
-- In this moment we will fill cboEstimate combo-box from this procedure.
PROCEDURE RETRIEVE_AUDIT_3
    (vi_estimate_type IN AUDIT_MODIFY_HISTORY.estimate_type%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
        OPEN vo_Cursor FOR
            SELECT DISTINCT
                estimate_number
            FROM
                AUDIT_MODIFY_HISTORY
            WHERE
                estimate_type = vi_estimate_type;
END RETRIEVE_AUDIT_3;

-- Next procedure is called from the frmViewAudit screen when:
-- optAllEsimate is checked
-- cboUserName has data other than "ALL USERS"
-- chkAndDate is unchecked
PROCEDURE RETRIEVE_AUDIT_4
    (vi_user_name IN AUDIT_MODIFY_HISTORY.user_name%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
        SELECT
            *
        FROM
            AUDIT_MODIFY_HISTORY
        WHERE
            user_name = vi_user_name AND
            ESTIMATE_TYPE IN
                ('MB','RB','BUS','KIT','NSCP')
        ORDER BY
            date_changed DESC;
END RETRIEVE_AUDIT_4;

-- Next procedure is called from the frmViewAudit screen when:
-- optAllEsimate is checked
-- cboUserName has data other than "ALL USERS"
-- chkAndDate is checked
-- data in the txtDateFrom is not empty
-- data in the txtDateTo is not empty
PROCEDURE RETRIEVE_AUDIT_5
    (vi_user_name IN AUDIT_MODIFY_HISTORY.user_name%TYPE,
     vi_date_from IN VARCHAR,
     vi_date_to IN VARCHAR,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
        SELECT
            *
        FROM
            AUDIT_MODIFY_HISTORY
        WHERE
            user_name = vi_user_name AND
            date_changed >= TO_DATE(vi_date_from) AND
            date_changed <= TO_DATE(vi_date_to) AND
            ESTIMATE_TYPE IN
                ('MB','RB','BUS','KIT','NSCP')
        ORDER BY
            date_changed DESC;
END RETRIEVE_AUDIT_5;

-- Next procedure is called from the frmViewAudit screen when:
-- optEsimate or optCurrentEsimate is checked
-- data from the cboEstimateType combo-box is not empty
-- data from the cboEstimate combo-box is not empty
-- cboUserName has data "ALL USERS"
-- chkAndDate is unchecked
-- NOTE. The same procedure is called from the frmMakeBuyEstimate,
--       frmRebuiltPartsMain, frmVehCostEstimateMain screens to fill
--       the cboChangesMadeBy combo-boxes.
PROCEDURE RETRIEVE_AUDIT_6
    (vi_estimate_number IN AUDIT_MODIFY_HISTORY.estimate_number%TYPE,
     vi_estimate_type IN AUDIT_MODIFY_HISTORY.estimate_type%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN



        IF (vi_estimate_number = '*') THEN
        OPEN vo_Cursor FOR
            SELECT
            *
            FROM
                AUDIT_MODIFY_HISTORY
            WHERE
                estimate_number like '%%' AND
                estimate_type = vi_estimate_type AND
                ESTIMATE_TYPE IN
                    ('MB','RB','BUS','KIT','NSCP')
            ORDER BY
                date_changed DESC;

        else
        OPEN vo_Cursor FOR
            SELECT
            *
            FROM
                AUDIT_MODIFY_HISTORY
            WHERE
                estimate_number = vi_estimate_number AND
                estimate_type = vi_estimate_type AND
                ESTIMATE_TYPE IN
                    ('MB','RB','BUS','KIT','NSCP')
            ORDER BY
              date_changed DESC;
        end if;

END RETRIEVE_AUDIT_6;

-- Next procedure is called from the frmViewAudit screen when:
-- optEsimate or optCurrentEsimate is checked
-- data from the cboEstimateType combo-box is not empty
-- data from the cboEstimate combo-box is not empty
-- cboUserName has data "ALL USERS"
-- chkAndDate is checked
-- data in the txtDateFrom is not empty
-- data in the txtDateTo is not empty
PROCEDURE RETRIEVE_AUDIT_7
    (vi_estimate_number IN AUDIT_MODIFY_HISTORY.estimate_number%TYPE,
     vi_estimate_type IN AUDIT_MODIFY_HISTORY.estimate_type%TYPE,
     vi_date_from IN VARCHAR,
     vi_date_to IN VARCHAR,
     vo_Cursor OUT query_cur) IS
BEGIN



    IF (vi_estimate_number = '*') THEN
    OPEN vo_Cursor FOR
        SELECT
            *
        FROM
            AUDIT_MODIFY_HISTORY
        WHERE
            estimate_number like '%%' AND
            estimate_type = vi_estimate_type AND
            date_changed >= TO_DATE(vi_date_from) AND
            date_changed <= TO_DATE(vi_date_to) AND
            ESTIMATE_TYPE IN
                ('MB','RB','BUS','KIT','NSCP')
        ORDER BY
            date_changed DESC;
     else
        OPEN vo_Cursor FOR
        SELECT
            *
        FROM
            AUDIT_MODIFY_HISTORY
        WHERE
            estimate_number = vi_estimate_number AND
            estimate_type = vi_estimate_type AND
            date_changed >= TO_DATE(vi_date_from) AND
            date_changed <= TO_DATE(vi_date_to) AND
            ESTIMATE_TYPE IN
                ('MB','RB','BUS','KIT','NSCP')
        ORDER BY
            date_changed DESC;
      end if;

END RETRIEVE_AUDIT_7;

-- Next procedure is called from the frmViewAudit screen when:
-- optEsimate or optCurrentEsimate is checked
-- data from the cboEstimateType combo-box is not empty
-- data from the cboEstimate combo-box is not empty
-- cboUserName has data other than "ALL USERS"
-- chkAndDate is unchecked
PROCEDURE RETRIEVE_AUDIT_8
    (vi_estimate_number IN AUDIT_MODIFY_HISTORY.estimate_number%TYPE,
     vi_estimate_type IN AUDIT_MODIFY_HISTORY.estimate_type%TYPE,
     vi_user_name IN AUDIT_MODIFY_HISTORY.user_name%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN

    IF (vi_estimate_number = '*') then
    OPEN vo_Cursor FOR
        SELECT
            *
        FROM
            AUDIT_MODIFY_HISTORY
        WHERE
            user_name = vi_user_name AND
            estimate_number like '%%' AND
            estimate_type = vi_estimate_type AND
            ESTIMATE_TYPE IN
                ('MB','RB','BUS','KIT','NSCP')
        ORDER BY
            date_changed DESC;
      else
       OPEN vo_Cursor FOR
         SELECT
            *
        FROM
            AUDIT_MODIFY_HISTORY
        WHERE
            user_name = vi_user_name AND
            estimate_number = vi_estimate_number AND
            estimate_type = vi_estimate_type AND
            ESTIMATE_TYPE IN
                ('MB','RB','BUS','KIT','NSCP')
        ORDER BY
            date_changed DESC;

      end if;

END RETRIEVE_AUDIT_8;

-- Next procedure is called from the frmViewAudit screen when:
-- optEsimate or optCurrentEsimate is checked
-- data from the cboEstimateType combo-box is not empty
-- data from the cboEstimate combo-box is not empty
-- cboUserName has data other than "ALL USERS"
-- chkAndDate is checked
-- data in the txtDateFrom is not empty
-- data in the txtDateTo is not empty
PROCEDURE RETRIEVE_AUDIT_9
    (vi_estimate_number IN AUDIT_MODIFY_HISTORY.estimate_number%TYPE,
     vi_estimate_type IN AUDIT_MODIFY_HISTORY.estimate_type%TYPE,
     vi_user_name IN AUDIT_MODIFY_HISTORY.user_name%TYPE,
     vi_date_from IN VARCHAR,
     vi_date_to IN VARCHAR,
     vo_Cursor OUT query_cur) IS
BEGIN


      IF (vi_estimate_number = '*') then
        OPEN vo_Cursor FOR
        SELECT
            *
        FROM
            AUDIT_MODIFY_HISTORY
        WHERE
            estimate_type = vi_estimate_type AND
            estimate_number like '%%' AND
            user_name = vi_user_name AND
            date_changed >= TO_DATE(vi_date_from) AND
            date_changed <= TO_DATE(vi_date_to) AND
            ESTIMATE_TYPE IN
                ('MB','RB','BUS','KIT','NSCP')
            ORDER BY
                date_changed DESC;
       else
       OPEN vo_Cursor FOR
        SELECT
            *
        FROM
            AUDIT_MODIFY_HISTORY
        WHERE
            estimate_type = vi_estimate_type AND
            estimate_number = vi_estimate_number AND
            user_name = vi_user_name AND
            date_changed >= TO_DATE(vi_date_from) AND
            date_changed <= TO_DATE(vi_date_to) AND
            ESTIMATE_TYPE IN
                ('MB','RB','BUS','KIT','NSCP')
            ORDER BY
                date_changed DESC;
        end if;



END;

-- Next procedure is called from the frmViewSettingsHistoryLog screen when:
-- optAllEsimate is checked
-- cboUserName has data "ALL USERS"
-- chkAndDate is unchecked
PROCEDURE RETRIEVE_AUDIT_10
    (vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
        SELECT
            *
        FROM
            AUDIT_MODIFY_HISTORY
        WHERE
            ESTIMATE_TYPE IN
                ('LTD','LT','SR','ETD','MVI','UAA','CP','MLB','CS')
        ORDER BY
            date_changed DESC;
END RETRIEVE_AUDIT_10;

-- Next procedure is called from the frmViewSettingsHistoryLog screen when:
-- optAllEsimate is checked
-- cboUserName has data "ALL USERS"
-- chkAndDate is checked
-- data in the txtDateFrom is not empty
-- data in the txtDateTo is not empty
PROCEDURE RETRIEVE_AUDIT_11
    (vi_date_from IN VARCHAR,
     vi_date_to IN VARCHAR,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
        SELECT
            *
        FROM
            AUDIT_MODIFY_HISTORY
        WHERE
            date_changed >= TO_DATE(vi_date_from) AND
            date_changed <= TO_DATE(vi_date_to) AND
            ESTIMATE_TYPE IN
                ('LTD','LT','SR','ETD','MVI','UAA','CP','MLB','CS')
        ORDER BY
            date_changed DESC;
END RETRIEVE_AUDIT_11;

-- Next procedure is called from the frmViewSettingsHistoryLog screen when:
-- optAllEsimate is checked
-- cboUserName has data other than "ALL USERS"
-- chkAndDate is unchecked
PROCEDURE RETRIEVE_AUDIT_12
    (vi_user_name IN AUDIT_MODIFY_HISTORY.user_name%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
        SELECT
            *
        FROM
            AUDIT_MODIFY_HISTORY
        WHERE
            user_name = vi_user_name AND
            ESTIMATE_TYPE IN
                ('LTD','LT','SR','ETD','MVI','UAA','CP','MLB','CS')
        ORDER BY
            date_changed DESC;
END RETRIEVE_AUDIT_12;

-- Next procedure is called from the frmViewSettingsHistoryLog screen when:
-- optAllEsimate is checked
-- cboUserName has data other than "ALL USERS"
-- chkAndDate is checked
-- data in the txtDateFrom is not empty
-- data in the txtDateTo is not empty
PROCEDURE RETRIEVE_AUDIT_13
    (vi_user_name IN AUDIT_MODIFY_HISTORY.user_name%TYPE,
     vi_date_from IN VARCHAR,
     vi_date_to IN VARCHAR,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
        SELECT
            *
        FROM
            AUDIT_MODIFY_HISTORY
        WHERE
            user_name = vi_user_name AND
            date_changed >= TO_DATE(vi_date_from) AND
            date_changed <= TO_DATE(vi_date_to) AND
            ESTIMATE_TYPE IN
                ('LTD','LT','SR','ETD','MVI','UAA','CP','MLB','CS')
        ORDER BY
            date_changed DESC;
END RETRIEVE_AUDIT_13;

-- Next procedure is called from the frmViewSettingsHistoryLog screen when:
-- optSettings is checked
-- data from the cboSettings combo-box is not empty
-- cboUserName has data "ALL USERS"
-- chkAndDate is unchecked
PROCEDURE RETRIEVE_AUDIT_14
    (vi_estimate_type IN AUDIT_MODIFY_HISTORY.estimate_type%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
        SELECT
            *
        FROM
            AUDIT_MODIFY_HISTORY
        WHERE
            estimate_type = vi_estimate_type AND
            ESTIMATE_TYPE IN
                ('LTD','LT','SR','ETD','MVI','UAA','CP','MLB','CS')
        ORDER BY
            date_changed DESC;
END RETRIEVE_AUDIT_14;

-- Next procedure is called from the frmViewSettingsHistoryLog screen when:
-- optSettings is checked
-- data from the cboSettings combo-box is not empty
-- cboUserName has data "ALL USERS"
-- chkAndDate is checked
-- data in the txtDateFrom is not empty
-- data in the txtDateTo is not empty
PROCEDURE RETRIEVE_AUDIT_15
    (vi_estimate_type IN AUDIT_MODIFY_HISTORY.estimate_type%TYPE,
     vi_date_from IN VARCHAR,
     vi_date_to IN VARCHAR,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
        SELECT
            *
        FROM
            AUDIT_MODIFY_HISTORY
        WHERE
            estimate_type = vi_estimate_type AND
            date_changed >= TO_DATE(vi_date_from) AND
            date_changed <= TO_DATE(vi_date_to) AND
            ESTIMATE_TYPE IN
                ('LTD','LT','SR','ETD','MVI','UAA','CP','MLB','CS')
        ORDER BY
            date_changed DESC;
END RETRIEVE_AUDIT_15;

-- Next procedure is called from the frmViewSettingsHistoryLog screen when:
-- optSettings is checked
-- data from the cboSettings combo-box is not empty
-- cboUserName has data other than "ALL USERS"
-- chkAndDate is unchecked
PROCEDURE RETRIEVE_AUDIT_16
    (vi_estimate_type IN AUDIT_MODIFY_HISTORY.estimate_type%TYPE,
     vi_user_name IN AUDIT_MODIFY_HISTORY.user_name%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
        SELECT
            *
        FROM
            AUDIT_MODIFY_HISTORY
        WHERE
            estimate_type = vi_estimate_type AND
            user_name = vi_user_name AND
            ESTIMATE_TYPE IN
                ('LTD','LT','SR','ETD','MVI','UAA','CP','MLB','CS')
        ORDER BY
            date_changed DESC;
END RETRIEVE_AUDIT_16;

-- Next procedure is called from the frmViewSettingsHistoryLog screen when:
-- optSettings is checked
-- data from the cboSettings combo-box is not empty
-- cboUserName has data other than "ALL USERS"
-- chkAndDate is checked
-- data in the txtDateFrom is not empty
-- data in the txtDateTo is not empty
PROCEDURE RETRIEVE_AUDIT_17
    (vi_estimate_type IN AUDIT_MODIFY_HISTORY.estimate_type%TYPE,
     vi_user_name IN AUDIT_MODIFY_HISTORY.user_name%TYPE,
     vi_date_from IN VARCHAR,
     vi_date_to IN VARCHAR,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
        SELECT
            *
        FROM
            AUDIT_MODIFY_HISTORY
        WHERE
            estimate_type = vi_estimate_type AND
            user_name = vi_user_name AND
            date_changed >= TO_DATE(vi_date_from) AND
            date_changed <= TO_DATE(vi_date_to) AND
            ESTIMATE_TYPE IN
                ('LTD','LT','SR','ETD','MVI','UAA','CP','MLB','CS')
        ORDER BY
            date_changed DESC;
END RETRIEVE_AUDIT_17;

PROCEDURE RETRIEVE_ALL_LABOUR_SUMMARY
    (vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
        SELECT
            LABOUR_TYPE AS "LABOUR TYPE",
            CC AS "CC",
            TASK AS "TASK",
            USAGE AS "USAGE",
            DECIMAL_MINUTES_TO_HHMM(TIME) AS "TIME",
            DECIMAL_MINUTES_TO_HHMM(WRENCH_TIME) AS "WRENCH TIME",
            RATE_PER_HOUR AS "RATE PER HOUR",
            TOTAL_COST AS "TOTAL COST",
            DECIMAL_MINUTES_TO_HHMM(round(EXTENDED_TIME)) AS "EXTENDED TIME",
            ESTIMATE_TYPE AS "ESTIMATE TYPE",
            ESTIMATE_NUMBER AS "ESTIMATE NUMBER"
        FROM
            TEMP_LABOUR_LIST
        ORDER BY
            CC ASC, TASK ASC;
END RETRIEVE_ALL_LABOUR_SUMMARY;

PROCEDURE RETRIEVE_ALL_MATERIAL_SUMMARY
    (vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
        SELECT
            COST_CENTRE AS "CC",
            SUM(TOTAL_COST)AS "TOTAL COST",
            SUM(TAXABLE_COST)AS "TAXABLE COST"
        FROM
            TEMP_MATERIALS_LIST
        GROUP BY
            COST_CENTRE
        ORDER BY
            COST_CENTRE ASC;
END RETRIEVE_ALL_MATERIAL_SUMMARY;

PROCEDURE RETRIEVE_ALL_RB
    (vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
        SELECT
            round(sum(total_cost),2) as RB_PRICE, rb_reference
        FROM
            all_material_summary
        group by
            rb_reference;
END RETRIEVE_ALL_RB;


PROCEDURE REPORT_LABOUR_SUM
    (vi_idnum IN varchar2,
     vi_type IN SC_PARTS_USED.link_type%TYPE,
     vo_Cursor OUT query_cur) IS

  V_PRICE NUMBER(20,2);
BEGIN

V_PRICE := get_labour_cost(vi_idnum,vi_type);

 OPEN vo_Cursor FOR
       SELECT
            CC AS "COST CENTRE",
            SUM(extended_time) AS "LABOUR HRS",
            SUM(TOTAL_COST) AS "TOTAL COST"
        FROM
            TEMP_LABOUR_LIST
        GROUP BY
            CC
        ORDER BY
            CC ASC;
    EXCEPTION
        WHEN others THEN
            ROLLBACK;

END REPORT_LABOUR_SUM;

PROCEDURE REPORT_MAT_SUM
    (vi_idnum IN RB_MASTERLIST.rebuilt_stock_num%TYPE,
     vi_type IN SC_PARTS_USED.link_type%TYPE,
     vo_Cursor OUT query_cur) IS
   V_PRICE NUMBER(20,2);

BEGIN

V_PRICE := get_material_cost(vi_idnum,vi_type);

 OPEN vo_Cursor FOR
        SELECT
            COST_CENTRE AS "CC",
            SUM(TOTAL_COST) AS "TOTAL COST",
            SUM(TAXABLE_COST)AS "TAXABLE COST"
        FROM
            TEMP_MATERIALS_LIST
        GROUP BY
            COST_CENTRE
        ORDER BY
            COST_CENTRE ASC;
END REPORT_MAT_SUM;



PROCEDURE R_MAT_SUM
    (vi_idnum IN RB_MASTERLIST.rebuilt_stock_num%TYPE,
     vi_type IN SC_PARTS_USED.link_type%TYPE,
     vo_Cursor OUT query_cur) IS
   V_PRICE NUMBER(20,2);

BEGIN

V_PRICE := get_material_cost(vi_idnum,vi_type);

 OPEN vo_Cursor FOR
        SELECT
            COST_CENTRE AS "CC",
            SUM(TOTAL_COST) AS "TOTAL COST",
            SUM(TAXABLE_COST)AS "TAXABLE COST"
        FROM
            TEMP_MATERIALS_LIST
        GROUP BY
            COST_CENTRE
        ORDER BY
            COST_CENTRE ASC;
END R_MAT_SUM;

PROCEDURE RETRIEVE_ALL_LABOUR
    (vi_idnum IN varchar2,
     vi_type IN SC_PARTS_USED.link_type%TYPE,
     vo_Cursor OUT query_cur) IS
     V_PRICE NUMBER(20,2);
BEGIN

V_PRICE := get_labour_cost(vi_idnum,vi_type);

 OPEN vo_Cursor FOR
       SELECT
            CC AS "COST CENTRE",
            DECIMAL_MINUTES_TO_HHMM(SUM(extended_time)) AS "LABOUR HRS",
            SUM(TOTAL_COST) AS "TOTAL COST"
        FROM
            TEMP_LABOUR_LIST
        GROUP BY
            CC
        ORDER BY
            CC ASC;
    EXCEPTION
        WHEN others THEN
            ROLLBACK;

END RETRIEVE_ALL_LABOUR;


procedure RETRIEVE_ONE_SCP_USED
    (vi_rowid IN string,
    vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
    select * FROM
        sc_parts_used
    WHERE
        ROWID = vi_rowid;

END RETRIEVE_ONE_SCP_USED;

procedure RETRIEVE_ONE_NSCP_USED
    (vi_rowid IN string,
    vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
    select *  FROM
        nsc_parts_used
    WHERE
        ROWID = vi_rowid;

END RETRIEVE_ONE_NSCP_USED;

PROCEDURE FIND_BUS_DESCRIPTION
    (vi_bus_description IN LIST_OF_BUSES.description%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
        SELECT
            UPPER(LIST_OF_BUSES.list_id) AS list_id,
            UPPER(LIST_OF_BUSES.description) AS bus_description
        FROM
            LIST_OF_BUSES
        WHERE
            description = vi_bus_description;
END FIND_BUS_DESCRIPTION;

PROCEDURE GET_KIT_PARTS
    (vi_link_code IN VARCHAR,
     vi_link_type IN VARCHAR,
     vi_rebuilt_part_choice IN VARCHAR,
     vo_cursor OUT query_cur) IS
BEGIN
    EXECUTE IMMEDIATE 'TRUNCATE TABLE TEMP_KIT_PARTS';
    INSERT INTO TEMP_KIT_PARTS
    (
        TEMP_KIT_PARTS.part_type,
        TEMP_KIT_PARTS.supplier_number,
        TEMP_KIT_PARTS.supplier_name,
        TEMP_KIT_PARTS.stock_code,
        TEMP_KIT_PARTS.cost_centre,
        TEMP_KIT_PARTS.qty,
        TEMP_KIT_PARTS.percent_usage,
        TEMP_KIT_PARTS.unit_cost,
        TEMP_KIT_PARTS.core_cost,
        TEMP_KIT_PARTS.cost,
        TEMP_KIT_PARTS.description,
        TEMP_KIT_PARTS.keyword,
        TEMP_KIT_PARTS.last_modified_date,
        TEMP_KIT_PARTS.row_id
    )
    SELECT
        'NSC',
        NSC_PARTS_USED.orig_supp_num,
        NSC_PARTS_USED.orig_supplier_name,
        ' ',
        NSC_PARTS_USED.cost_centre,
        NSC_PARTS_USED.qty_reqd,
        NSC_PARTS_USED.percent_usage,
        NSC_PARTS_USED.cost,
        NSC_PARTS_USED.corecost,
        NSC_PARTS_USED.cost,
        NON_STOCK_CODED_PARTS.detailed_desc,
        NON_STOCK_CODED_PARTS.keyword,
        NSC_PARTS_USED.last_modified_date,
        NSC_PARTS_USED.ROWID
    FROM
        NSC_PARTS_USED,
        NON_STOCK_CODED_PARTS
    WHERE
        NSC_PARTS_USED.link_code = vi_link_code AND
        NSC_PARTS_USED.link_type = vi_link_type AND
        NON_STOCK_CODED_PARTS.id (+)= NSC_PARTS_USED.id;

    INSERT INTO TEMP_KIT_PARTS
    (
        TEMP_KIT_PARTS.part_type,
        TEMP_KIT_PARTS.supplier_number,
        TEMP_KIT_PARTS.supplier_name,
        TEMP_KIT_PARTS.stock_code,
        TEMP_KIT_PARTS.cost_centre,
        TEMP_KIT_PARTS.qty,
        TEMP_KIT_PARTS.percent_usage,
        TEMP_KIT_PARTS.unit_cost,
        TEMP_KIT_PARTS.core_cost,
        TEMP_KIT_PARTS.cost,
        TEMP_KIT_PARTS.description,
        TEMP_KIT_PARTS.keyword,
        TEMP_KIT_PARTS.last_modified_date,
        TEMP_KIT_PARTS.row_id
    )
    SELECT
        'SC',
        SC_PARTS_USED.orig_sup_num,
        SC_PARTS_USED.orig_supplier_name,
        SC_PARTS_USED.mms_stock_code,
        SC_PARTS_USED.cost_centre,
        SC_PARTS_USED.qty_reqd,
        SC_PARTS_USED.percent_usage,
        SC_PARTS_USED.mms_cost,
        SC_PARTS_USED.corecost,
        SC_PARTS_USED.mms_cost,
        STOCK_CODED_PARTS.detailed_desc,
        STOCK_CODED_PARTS.part_type,
        SC_PARTS_USED.last_modified_date,
        SC_PARTS_USED.ROWID
    FROM
        SC_PARTS_USED,
        STOCK_CODED_PARTS
    WHERE
        SC_PARTS_USED.link_code = vi_link_code AND
        SC_PARTS_USED.rebuilt_part = vi_rebuilt_part_choice AND
        STOCK_CODED_PARTS.mms_stock_code (+)= SC_PARTS_USED.mms_stock_code;

    OPEN vo_Cursor FOR
        SELECT
            NVL(UPPER(TEMP_KIT_PARTS.part_type),' ') AS "PART TYPE",
            NVL(UPPER(TEMP_KIT_PARTS.supplier_number),' ') AS "SUPPLIER NUMBER",
            NVL(UPPER(TEMP_KIT_PARTS.supplier_name),' ') AS "SUPPLIER NAME",
            NVL(UPPER(TEMP_KIT_PARTS.stock_code),' ') AS "STOCK CODE",
            NVL(UPPER(TEMP_KIT_PARTS.cost_centre),' ') AS "CC",
            UPPER(TEMP_KIT_PARTS.qty) AS "QTY",
            REPLACE(TEMP_KIT_PARTS.percent_usage,',','.') AS "%",
            TEMP_KIT_PARTS.unit_cost AS "UNIT COST",
            REPLACE(FINAL_COST(TEMP_KIT_PARTS.percent_usage, TEMP_KIT_PARTS.qty, TEMP_KIT_PARTS.core_cost,0),',','.') AS "CORE COST",
            REPLACE(FINAL_COST(TEMP_KIT_PARTS.percent_usage, TEMP_KIT_PARTS.qty, TEMP_KIT_PARTS.cost,0),',','.') AS "TOTAL COST",
            NVL(UPPER(TEMP_KIT_PARTS.description),' ') AS "DESCRIPTION",
            NVL(UPPER(TEMP_KIT_PARTS.keyword),' ') AS "KEYWORD",
            TEMP_KIT_PARTS.last_modified_date AS "LAST MODIFIED DATE",
            TEMP_KIT_PARTS.row_id AS "ROWID"
        FROM
            TEMP_KIT_PARTS
        ORDER BY
            TEMP_KIT_PARTS.supplier_number,
            TEMP_KIT_PARTS.stock_code;
END GET_KIT_PARTS;

PROCEDURE GET_SUB_KITS
    (vi_kit_part_number IN SUB_KITS.kit_part_number%TYPE,
     vo_cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
        SELECT
            UPPER(SUB_KITS.sub_kit_letter) AS "REF #",
            UPPER(SUB_KITS.stock_code) AS "TTC CODE",
            UPPER(SUB_KITS.supplier_name) AS "OEM",
            SUB_KITS.qty AS "QTY",
            UPPER(SUB_KITS.supplier_number) AS "OEM #",
            UPPER(SUB_KITS.description) AS "DESCRIPTION",
            UPPER(SUB_KITS.kit_part_number) AS "KIT NUMBER",
            UPPER(SUB_KITS.part_type) AS "PART TYPE",
            SUB_KITS.sequence AS "SEQUENCE"
        FROM
            SUB_KITS
        WHERE
            SUB_KITS.kit_part_number = vi_kit_part_number
        ORDER BY
            SUB_KITS.sequence;
END GET_SUB_KITS;

PROCEDURE GET_ALL_FROM_SUB_KITS
    (vo_cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
        SELECT
            UPPER(SUB_KITS.sub_kit_letter) AS "REF #",
            UPPER(SUB_KITS.stock_code) AS "TTC CODE",
            UPPER(SUB_KITS.supplier_name) AS "OEM",
            SUB_KITS.qty AS "QTY",
            UPPER(SUB_KITS.supplier_number) AS "OEM #",
            UPPER(SUB_KITS.description) AS "DESCRIPTION",
            UPPER(SUB_KITS.kit_part_number) AS "KIT NUMBER",
            UPPER(SUB_KITS.part_type) AS "PART TYPE",
            SUB_KITS.sequence AS "SEQUENCE"
        FROM
            SUB_KITS
        ORDER BY
            SUB_KITS.sequence;

END GET_ALL_FROM_SUB_KITS;

PROCEDURE GET_NSCP_CLEAN_1
    (vo_cursor OUT query_cur) IS
BEGIN
    -- Current stored procedure is used for cleaning the NON_STOCK_CODED_PARTS and
    -- NSC_PARTS_USED tables only. Please do not use it somewhere else.
    OPEN vo_Cursor FOR
        SELECT * FROM NSC_PARTS_USED WHERE ORIG_SUPP_NUM IS NULL;
END GET_NSCP_CLEAN_1;

PROCEDURE GET_NSCP_CLEAN_2
    (vi_orig_supp_num IN NSC_PARTS_USED.orig_supp_num%TYPE,
     vo_cursor OUT query_cur) IS
BEGIN
    -- Current stored procedure is used for cleaning the NON_STOCK_CODED_PARTS and
    -- NSC_PARTS_USED tables only. Please do not use it somewhere else.
    OPEN vo_Cursor FOR
        SELECT * FROM NSC_PARTS_USED where orig_supp_num = vi_orig_supp_num;
END GET_NSCP_CLEAN_2;

PROCEDURE GET_NSCP_CLEAN_3
    (vo_cursor OUT query_cur)  IS
BEGIN
    -- Current stored procedure is used for cleaning the NON_STOCK_CODED_PARTS and
    -- NSC_PARTS_USED tables only. Please do not use it somewhere else.
    OPEN vo_Cursor FOR
        SELECT * FROM NSC_PARTS_USED WHERE ORIG_SUPPLIER_NAME IS NULL;
END GET_NSCP_CLEAN_3;

PROCEDURE GET_NSCP_CLEAN_4
    (vi_orig_supplier_name IN NSC_PARTS_USED.orig_supplier_name%TYPE,
     vo_cursor OUT query_cur) IS
BEGIN
    -- Current stored procedure is used for cleaning the NON_STOCK_CODED_PARTS and
    -- NSC_PARTS_USED tables only. Please do not use it somewhere else.
    OPEN vo_Cursor FOR
        SELECT * FROM NSC_PARTS_USED WHERE orig_supplier_name = vi_orig_supplier_name;
END GET_NSCP_CLEAN_4;

PROCEDURE GET_NSCP_CLEAN_5
    (vo_cursor OUT query_cur) IS
BEGIN
    -- Current stored procedure is used for cleaning the NON_STOCK_CODED_PARTS and
    -- NSC_PARTS_USED tables only. Please do not use it somewhere else.
    OPEN vo_Cursor FOR
        SELECT * FROM NSC_PARTS_USED ORDER BY ROWID;
END GET_NSCP_CLEAN_5;

PROCEDURE GET_NSCP_CLEAN_6
    (vi_id IN NON_STOCK_CODED_PARTS.id%TYPE,
     vo_cursor OUT query_cur) IS
BEGIN
    -- Current stored procedure is used for cleaning the NON_STOCK_CODED_PARTS and
    -- NSC_PARTS_USED tables only. Please do not use it somewhere else.
    OPEN vo_Cursor FOR
        SELECT *
        FROM NON_STOCK_CODED_PARTS_TEMP
        WHERE id = vi_id;
END GET_NSCP_CLEAN_6;

PROCEDURE GET_NSCP_CLEAN_7
    (vo_cursor OUT query_cur) IS
BEGIN
    -- Current stored procedure is used for cleaning the NON_STOCK_CODED_PARTS and
    -- NSC_PARTS_USED tables only. Please do not use it somewhere else.
    OPEN vo_Cursor FOR
        SELECT * FROM NON_STOCK_CODED_PARTS;
END GET_NSCP_CLEAN_7;

PROCEDURE GET_NSCP_CLEAN_8
    (vi_orig_supplier_num IN NON_STOCK_CODED_PARTS_TEMP.orig_supplier_num%TYPE,
     vi_orig_supplier_name IN NON_STOCK_CODED_PARTS_TEMP.orig_supplier_name%TYPE,
     vo_cursor OUT query_cur) IS
BEGIN
    -- Current stored procedure is used for cleaning the NON_STOCK_CODED_PARTS and
    -- NSC_PARTS_USED tables only. Please do not use it somewhere else.
    OPEN vo_Cursor FOR
        SELECT
            *
        FROM
            NON_STOCK_CODED_PARTS_TEMP
        WHERE
            orig_supplier_num = vi_orig_supplier_num AND
            orig_supplier_name = vi_orig_supplier_name;
END GET_NSCP_CLEAN_8;

PROCEDURE GET_NSCP_CLEAN_9
    (vo_cursor OUT query_cur) IS
BEGIN
    -- Current stored procedure is used for cleaning the NON_STOCK_CODED_PARTS and
    -- NSC_PARTS_USED tables only. Please do not use it somewhere else.
    OPEN vo_Cursor FOR
        SELECT * FROM NSC_PARTS_USED WHERE id IS NULL;
END GET_NSCP_CLEAN_9;

PROCEDURE GET_NSCP_CLEAN_10
    (vo_cursor OUT query_cur) IS
BEGIN
    -- Current stored procedure is used for cleaning the NON_STOCK_CODED_PARTS and
    -- NSC_PARTS_USED tables only. Please do not use it somewhere else.
    OPEN vo_Cursor FOR
        SELECT * FROM NON_STOCK_CODED_PARTS WHERE id IS NULL;
END GET_NSCP_CLEAN_10;

PROCEDURE GET_NSCP_CLEAN_11
    (vo_cursor OUT query_cur) IS
BEGIN
    -- Current stored procedure is used for cleaning the NON_STOCK_CODED_PARTS and
    -- NSC_PARTS_USED tables only. Please do not use it somewhere else.
    OPEN vo_Cursor FOR
        SELECT * FROM NSC_PARTS_USED WHERE ORIG_SUPP_NUM IS NULL;
END GET_NSCP_CLEAN_11;

PROCEDURE GET_NSCP_CLEAN_12
    (vo_cursor OUT query_cur) IS
BEGIN
    -- Current stored procedure is used for cleaning the NON_STOCK_CODED_PARTS and
    -- NSC_PARTS_USED tables only. Please do not use it somewhere else.
    OPEN vo_Cursor FOR
        SELECT * FROM NON_STOCK_CODED_PARTS WHERE ORIG_SUPPLIER_NUM IS NULL;
END GET_NSCP_CLEAN_12;

PROCEDURE GET_NSCP_CLEAN_13
    (vo_cursor OUT query_cur) IS
BEGIN
    -- Current stored procedure is used for cleaning the NON_STOCK_CODED_PARTS and
    -- NSC_PARTS_USED tables only. Please do not use it somewhere else.
    OPEN vo_Cursor FOR
        SELECT * FROM NON_STOCK_CODED_PARTS WHERE ORIG_SUPPLIER_NAME IS NULL;
END GET_NSCP_CLEAN_13;

PROCEDURE GET_NSCP_CLEAN_14
    (vi_orig_supp_num IN NSC_PARTS_USED.orig_supp_num%TYPE,
     vi_orig_supplier_name IN NSC_PARTS_USED.orig_supplier_name%TYPE,
     vo_cursor OUT query_cur) IS
BEGIN
    -- Current stored procedure is used for cleaning the NON_STOCK_CODED_PARTS and
    -- NSC_PARTS_USED tables only. Please do not use it somewhere else.
    OPEN vo_Cursor FOR
        SELECT * FROM NSC_PARTS_USED WHERE
        orig_supp_num = vi_orig_supp_num AND orig_supplier_name = vi_orig_supplier_name;
END GET_NSCP_CLEAN_14;

PROCEDURE GET_NSCP_CLEAN_15
    (vi_orig_supplier_num IN NON_STOCK_CODED_PARTS.orig_supplier_num%TYPE,
     vi_orig_supplier_name IN NON_STOCK_CODED_PARTS.orig_supplier_name%TYPE,
     vo_cursor OUT query_cur) IS
BEGIN
    -- Current stored procedure is used for cleaning the NON_STOCK_CODED_PARTS and
    -- NSC_PARTS_USED tables only. Please do not use it somewhere else.
    OPEN vo_Cursor FOR
        SELECT * FROM NON_STOCK_CODED_PARTS WHERE
        orig_supplier_num = vi_orig_supplier_num AND
        orig_supplier_name = vi_orig_supplier_name;
END GET_NSCP_CLEAN_15;

--Retrieves the last user to modifify the specified estimate.  Only one entry is returned
PROCEDURE LAST_MOD_DATE
    (vi_estimate_number IN AUDIT_MODIFY_HISTORY.estimate_number%TYPE,
     vi_estimate_type IN AUDIT_MODIFY_HISTORY.estimate_type%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_Cursor FOR
        select * from (SELECT date_changed, user_name, estimate_type, estimate_number
        FROM
            AUDIT_MODIFY_HISTORY
        WHERE
            estimate_number = vi_estimate_number AND
            estimate_type = vi_estimate_type order by date_changed desc) where rownum = 1;
END LAST_MOD_DATE;


PROCEDURE SEARCH_RBPART_BUS_SERIES
    (vi_rebuilt_num IN RB_MASTERLIST.rebuilt_stock_num%TYPE,
     vi_description IN RB_MASTERLIST.detailed_desc%TYPE,
     vi_keyword IN RB_MASTERLIST.keyword%TYPE,
     vi_bus_series_id IN INTEGER,
     vi_search_option IN INTEGER,
     vo_Cursor OUT query_cur) IS
BEGIN

    IF (vi_search_option = 1) THEN
        -- Search for ALL Bus series
        OPEN vo_cursor FOR
            SELECT DISTINCT
                UPPER(RB_MASTERLIST.rebuilt_stock_num) AS "REBUILT NUMBER",
                UPPER(RB_MASTERLIST.mms_stock_code) AS "MMS STOCK CODE",
                UPPER(RB_MASTERLIST.keyword) AS "KEYWORD",
                UPPER(RB_MASTERLIST.detailed_desc) AS "DESCRIPTION",
                RB_MASTERLIST.ROWID
            FROM
                RB_MASTERLIST,
                RB_LIST_OF_BUSES
            WHERE
                RB_MASTERLIST.rebuilt_stock_num = RB_LIST_OF_BUSES.rebuilt_stock_num
                AND  UPPER(NVL(RB_MASTERLIST.rebuilt_stock_num,' ')) LIKE
                    '%'||TRIM(vi_rebuilt_num)||'%'
                AND UPPER(NVL(RB_MASTERLIST.detailed_desc,' ')) LIKE
                    '%'||TRIM(UPPER(vi_description))||'%'
                AND UPPER(NVL(RB_MASTERLIST.keyword,' ')) LIKE
                    '%'||TRIM(UPPER(vi_keyword))||'%';
    ELSIF (vi_search_option = 2) THEN
        -- Search for Not Attached Bus series
        OPEN vo_cursor FOR
            SELECT DISTINCT
                UPPER(RB_MASTERLIST.rebuilt_stock_num) AS "REBUILT NUMBER",
                UPPER(RB_MASTERLIST.mms_stock_code) AS "MMS STOCK CODE",
                UPPER(RB_MASTERLIST.keyword) AS "KEYWORD",
                UPPER(RB_MASTERLIST.detailed_desc) AS "DESCRIPTION",
                RB_MASTERLIST.ROWID
            FROM
                RB_MASTERLIST,
                RB_LIST_OF_BUSES
            WHERE
                RB_MASTERLIST.rebuilt_stock_num NOT IN
                    (select RB_LIST_OF_BUSES.rebuilt_stock_num from RB_LIST_OF_BUSES)
                AND NVL(RB_MASTERLIST.rebuilt_stock_num,' ') LIKE
                    '%'||TRIM(vi_rebuilt_num)||'%'
                AND UPPER(NVL(RB_MASTERLIST.detailed_desc,' ')) LIKE
                    '%'||TRIM(UPPER(vi_description))||'%'
                AND UPPER(NVL(RB_MASTERLIST.keyword,' ')) LIKE
                    '%'||TRIM(UPPER(vi_keyword))||'%';

    ELSIF (vi_search_option = 3) THEN
        -- Search for Particular one Bus series
        OPEN vo_cursor FOR
            SELECT
                UPPER(RB_MASTERLIST.rebuilt_stock_num) AS "REBUILT NUMBER",
                UPPER(RB_MASTERLIST.mms_stock_code) AS "MMS STOCK CODE",
                UPPER(RB_MASTERLIST.keyword) AS "KEYWORD",
                UPPER(RB_MASTERLIST.detailed_desc) AS "DESCRIPTION",
                RB_MASTERLIST.ROWID
            FROM
                RB_MASTERLIST,
                RB_LIST_OF_BUSES
            WHERE
                RB_LIST_OF_BUSES.rebuilt_stock_num = RB_MASTERLIST.rebuilt_stock_num
                AND RB_LIST_OF_BUSES.list_id = vi_bus_series_id
                AND NVL(RB_MASTERLIST.rebuilt_stock_num,' ') LIKE
                    '%'||TRIM(vi_rebuilt_num)||'%'
                AND UPPER(NVL(RB_MASTERLIST.detailed_desc,' ')) LIKE
                    '%'||TRIM(UPPER(vi_description))||'%'
                AND UPPER(NVL(RB_MASTERLIST.keyword,' ')) LIKE
                    '%'||TRIM(UPPER(vi_keyword))||'%';
    END IF;
END SEARCH_RBPART_BUS_SERIES;

PROCEDURE RETRIEVE_NSCP_USED_COPY
    (vi_idnum IN NSC_PARTS_USED.link_code%TYPE,
     vi_link_type IN NSC_PARTS_USED.link_type%TYPE,
     vo_Cursor OUT query_cur) IS
BEGIN
    OPEN vo_cursor FOR
         SELECT
            UPPER(NON_STOCK_CODED_PARTS.orig_supplier_name) AS "SUPPLIER NAME",
            UPPER(NON_STOCK_CODED_PARTS.orig_supplier_num) AS "SUPPLIER NUMBER",
            UPPER(NSC_PARTS_USED.cost_centre) AS "CC",
            UPPER(NSC_PARTS_USED.qty_reqd) AS "QTY",
            REPLACE(NSC_PARTS_USED.percent_usage,',','.') AS "%",
            NON_STOCK_CODED_PARTS.oem_part_cost AS "UNIT COST",
            REPLACE(FINAL_COST(NSC_PARTS_USED.percent_usage, NSC_PARTS_USED.qty_reqd,NSC_PARTS_USED.corecost,0),',','.') AS "CORE COST",
            UPPER(NSC_PARTS_USED.id) AS "ID",
            REPLACE(FINAL_COST(NSC_PARTS_USED.percent_usage, NSC_PARTS_USED.qty_reqd, NSC_PARTS_USED.cost, 0),',','.') AS "TOTAL COST",
            NVL(UPPER(NON_STOCK_CODED_PARTS.detailed_desc),'') AS "DESCRIPTION",
            NVL(UPPER(NON_STOCK_CODED_PARTS.keyword), '' ) AS "KEYWORD",
            UPPER(NSC_PARTS_USED.last_modified_date) AS "LAST MODIFIED DATE",
            NSC_PARTS_USED.ROWID
        FROM
            NSC_PARTS_USED,
            NON_STOCK_CODED_PARTS
        WHERE
            NSC_PARTS_USED.link_code = vi_idnum AND
            NSC_PARTS_USED.link_type = vi_link_type AND
            NON_STOCK_CODED_PARTS.id (+)= NSC_PARTS_USED.id
        ORDER BY
            NSC_PARTS_USED.orig_supp_num;
END RETRIEVE_NSCP_USED_COPY;
END CES_INQUIRY;
CES_Update :
create or replace PACKAGE BODY ces_update 



--FOR J In 1..12 LOOP
 -- statements;
--END LOOP;
IS


-- To modify this template, edit file PKGBODY.TXT in TEMPLATE
-- directory of SQL Navigator
--
-- Purpose: This package holds all the procedures used to modify the tables
-- in the CES database.

FUNCTION ADD_NSCP
    (vi_orig_supplier_num IN NON_STOCK_CODED_PARTS.orig_supplier_num%TYPE,
	 vi_orig_supplier_name IN NON_STOCK_CODED_PARTS.orig_supplier_name%TYPE,
     vi_oem_part_cost IN NON_STOCK_CODED_PARTS.oem_part_cost%TYPE,
     vi_detailed_desc IN NON_STOCK_CODED_PARTS.detailed_desc%TYPE,
     vi_keyword IN NON_STOCK_CODED_PARTS.keyword%TYPE,
	 vi_entered_by IN NON_STOCK_CODED_PARTS.part_added_by%TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS

    n_id NUMBER;
    n_count NUMBER;

BEGIN


    SELECT
        COUNT(*)
    INTO
        n_count
    FROM
        NON_STOCK_CODED_PARTS;

    IF n_count <> 0 THEN
        SELECT
            MAX(id)
        INTO
            n_id
        FROM
            NON_STOCK_CODED_PARTS;
        n_id := n_id + 1;
    ELSE
        n_id := 1;
    END IF;

    INSERT INTO NON_STOCK_CODED_PARTS
        (
         orig_supplier_num,
         orig_supplier_name,
         oem_part_cost,
         detailed_desc,
         keyword,
         part_added_by,
         date_entered,
         last_modified_by,
         last_modified_date,
         ID
        )
      VALUES
        (
         UPPER(vi_orig_supplier_num),
         UPPER(vi_orig_supplier_name),
         vi_oem_part_cost,
         UPPER(vi_detailed_desc),
         UPPER(vi_keyword),
         UPPER(vi_entered_by),
         SYSDATE,
         UPPER(vi_entered_by),
         SYSDATE,
         n_id
        );
    COMMIT;
    vo_ret_val:=n_id;
    RETURN 0;

    EXCEPTION
        WHEN no_data_found THEN
            ROLLBACK;
    		vo_ret_val := -1;
		    RETURN -1;
        WHEN DUP_VAL_ON_INDEX THEN
            ROLLBACK;
            vo_ret_val := -2;
            RETURN -1;
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -3;
            RETURN -1;
END ADD_NSCP;

FUNCTION ADD_ERROR_LOG
    (vi_user_name IN ERRORS.user_name%TYPE,
     vi_date_time IN ERRORS.date_time%TYPE,
     vi_module_name IN ERRORS.module_name%TYPE,
     vi_function_name IN ERRORS.function_name%TYPE,
     vi_line_num IN ERRORS.line_num%TYPE,
     vi_error_desc IN ERRORS.error_desc%TYPE,
     vi_err_num IN ERRORS.err_num%TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS
BEGIN
    INSERT INTO ERRORS
        (
         LOG_ID,
         USER_NAME,
         DATE_TIME,
         MODULE_NAME,
         FUNCTION_NAME,
         LINE_NUM,
         ERROR_DESC,
         ERR_NUM
        )
    VALUES
        (
         ERROR_ID.NEXTVAL,
         vi_user_name,
         vi_date_time,
         vi_module_name,
         vi_function_name,
         vi_line_num,
         vi_error_desc,
         vi_err_num
        );
    COMMIT;
    vo_ret_val:=0;
    RETURN 0;

    EXCEPTION
        WHEN no_data_found THEN
            ROLLBACK;
    		vo_ret_val := -4;
	    	RETURN -1;
        WHEN DUP_VAL_ON_INDEX THEN
            ROLLBACK;
            vo_ret_val := -5;
            RETURN -1;
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -6;
            RETURN -1;
END ADD_ERROR_LOG;

FUNCTION UPDATE_NSCP
    (vi_orig_supplier_num IN NON_STOCK_CODED_PARTS.orig_supplier_num%TYPE,
	 vi_orig_supplier_name IN NON_STOCK_CODED_PARTS.orig_supplier_name%TYPE,
     vi_oem_part_cost IN NON_STOCK_CODED_PARTS.oem_part_cost%TYPE,
     vi_detailed_desc IN NON_STOCK_CODED_PARTS.detailed_desc%TYPE,
     vi_keyword IN NON_STOCK_CODED_PARTS.keyword%TYPE,
     vi_entered_by IN NON_STOCK_CODED_PARTS.part_added_by%TYPE,
     vi_id IN ROWID,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS

n_id NUMBER;

BEGIN
    UPDATE
        NON_STOCK_CODED_PARTS
    SET
        orig_supplier_num = UPPER(vi_orig_supplier_num),
        orig_supplier_name = UPPER(vi_orig_supplier_name),
        oem_part_cost = vi_oem_part_cost,
        detailed_desc =  UPPER(vi_detailed_desc),
        keyword = UPPER(vi_keyword),
        last_modified_by = UPPER(vi_entered_by),
        last_modified_date = SYSDATE
    WHERE
        ROWID = vi_id;
    SELECT
        ID INTO n_id
    FROM
        NON_STOCK_CODED_PARTS
    WHERE
        orig_supplier_num = UPPER(vi_orig_supplier_num) AND
        orig_supplier_name = UPPER(vi_orig_supplier_name);
    COMMIT;
    vo_ret_val:=n_id;
    RETURN 0;

    EXCEPTION
        WHEN no_data_found THEN
            ROLLBACK;
		    vo_ret_val := -7;
		    RETURN -1;
        WHEN DUP_VAL_ON_INDEX THEN
            ROLLBACK;
            vo_ret_val := -8;
            RETURN -1;
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -9;
            RETURN -1;
END UPDATE_NSCP;

FUNCTION UPDATE_NSCP2
    (vi_newID IN NON_STOCK_CODED_PARTS.id%type,
     vi_id IN ROWID,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS
BEGIN
    UPDATE
        NON_STOCK_CODED_PARTS
    SET
        id = vi_newID,
        last_modified_date = SYSDATE
    WHERE
        ROWID = vi_id;
    COMMIT;
    vo_ret_val:=0;
    RETURN 0;

    EXCEPTION
        WHEN no_data_found THEN
            ROLLBACK;
		    vo_ret_val := -10;
    		RETURN -1;
        WHEN DUP_VAL_ON_INDEX THEN
            ROLLBACK;
            vo_ret_val := -11;
            RETURN -1;
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -12;
            RETURN -1;
END UPDATE_NSCP2;

FUNCTION ADD_VEH_TYPES
    (vi_make IN TYPE_OF_VEHICLE.make%TYPE,
	 vi_model IN TYPE_OF_VEHICLE.model%TYPE,
     vi_year IN TYPE_OF_VEHICLE.year%TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS
BEGIN
    INSERT INTO TYPE_OF_VEHICLE
        (
         make,
         model,
         year
        )
    VALUES
        (
         UPPER(vi_make),
         UPPER(vi_model),
         vi_year
        );
    COMMIT;
    vo_ret_val:=0;
    RETURN 0;

    EXCEPTION
        WHEN no_data_found THEN
            ROLLBACK;
    		vo_ret_val := -13;
	    	RETURN -1;
        WHEN DUP_VAL_ON_INDEX THEN
            ROLLBACK;
            vo_ret_val := -14;
            RETURN -1;
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -15;
            RETURN -1;
END ADD_VEH_TYPES;

FUNCTION UPDATE_VEH_TYPES
    (vi_make IN TYPE_OF_VEHICLE.make%TYPE,
	 vi_model IN TYPE_OF_VEHICLE.model%TYPE,
     vi_year IN TYPE_OF_VEHICLE.year%TYPE,
     vi_rowid IN ROWID,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS
BEGIN
    UPDATE
        TYPE_OF_VEHICLE
    SET
        make = UPPER(vi_make),
        model = UPPER(vi_model),
        year = UPPER(vi_year)
    WHERE
        ROWID = vi_rowid;
    COMMIT;
    vo_ret_val:=0;
    RETURN 0;

    EXCEPTION
        WHEN no_data_found THEN
            ROLLBACK;
    		vo_ret_val := -16;
	    	RETURN -1;
        WHEN DUP_VAL_ON_INDEX THEN
            ROLLBACK;
            vo_ret_val := -17;
            RETURN -1;
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -18;
            RETURN -1;
END UPDATE_VEH_TYPES;

FUNCTION ADD_ENGINES
    (vi_type IN ENGINES.name%TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS
BEGIN
    INSERT INTO ENGINES
        (
         name
        )
    VALUES
        (
         UPPER(vi_type)
        );
    COMMIT;
    vo_ret_val :=0;
    RETURN 0;

    EXCEPTION
        WHEN no_data_found THEN
            ROLLBACK;
            vo_ret_val := -19;
	    	RETURN -1;
        WHEN DUP_VAL_ON_INDEX THEN
            ROLLBACK;
            vo_ret_val := -20;
            RETURN -1;
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -21;
            RETURN -1;
END ADD_ENGINES;

FUNCTION UPDATE_ENGINES
    (vi_type IN ENGINES.name%TYPE,
	 vi_rowid IN ROWID,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS
BEGIN
    UPDATE
        ENGINES
    SET
        name = UPPER(NVL(vi_type,' '))
    WHERE
        ROWID = vi_rowid;
    COMMIT;
    vo_ret_val :=0;
    RETURN 0;

    EXCEPTION
        WHEN no_data_found THEN
            ROLLBACK;
            vo_ret_val := -22;
	    	RETURN -1;
        WHEN DUP_VAL_ON_INDEX THEN
            ROLLBACK;
            vo_ret_val := -23;
            RETURN -1;
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -24;
            RETURN -1;
END UPDATE_ENGINES;

FUNCTION ADD_TRANSMISSIONS
    (vi_type IN TRANSMISSIONS.NAME%TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS
BEGIN
    INSERT INTO TRANSMISSIONS
        (
         name
        )
    VALUES
        (
         UPPER(NVL(vi_type, ' '))
        );
    COMMIT;
    vo_ret_val :=0;
    RETURN 0;

    EXCEPTION
        WHEN no_data_found THEN
            ROLLBACK;
            vo_ret_val := -25;
	    	RETURN -1;
        WHEN DUP_VAL_ON_INDEX THEN
            ROLLBACK;
            vo_ret_val := -26;
            RETURN -1;
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -27;
            RETURN -1;
END ADD_TRANSMISSIONS;

FUNCTION UPDATE_TRANSMISSIONS
    (vi_type IN TRANSMISSIONS.NAME%TYPE,
	 vi_rowid IN ROWID,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS
BEGIN
    UPDATE
        TRANSMISSIONS
    SET
        name = UPPER(NVL(vi_type,' '))
    WHERE
        ROWID = vi_rowid;
    COMMIT;
    vo_ret_val :=0;
    RETURN 0;

    EXCEPTION
        WHEN no_data_found THEN
            ROLLBACK;
            vo_ret_val := -28;
	    	RETURN -1;
        WHEN DUP_VAL_ON_INDEX THEN
            ROLLBACK;
            vo_ret_val := -29;
            RETURN -1;
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -30;
            RETURN -1;
END UPDATE_TRANSMISSIONS;

FUNCTION ADD_DIFFERENTIALS
    (vi_type IN DIFFERENTIAL.NAME%TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS
BEGIN
    INSERT INTO DIFFERENTIAL
        (
         name
        )
    VALUES
        (
         UPPER(NVL(vi_type, ' '))
        );
    COMMIT;
    vo_ret_val :=0;
    RETURN 0;

    EXCEPTION
        WHEN no_data_found THEN
            ROLLBACK;
            vo_ret_val := -31;
	    	RETURN -1;
        WHEN DUP_VAL_ON_INDEX THEN
            ROLLBACK;
            vo_ret_val := -32;
            RETURN -1;
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -33;
            RETURN -1;
END ADD_DIFFERENTIALS;

FUNCTION UPDATE_DIFFERENTIALS
    (vi_type IN DIFFERENTIAL.NAME%TYPE,
	 vi_rowid IN ROWID,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS
BEGIN
    UPDATE
        DIFFERENTIAL
    SET
        name = UPPER(NVL(vi_type, ' '))
    WHERE
        ROWID = vi_rowid;
    COMMIT;
    vo_ret_val :=0;
    RETURN 0;

    EXCEPTION
        WHEN no_data_found THEN
            ROLLBACK;
            vo_ret_val := -34;
	    	RETURN -1;
        WHEN DUP_VAL_ON_INDEX THEN
            ROLLBACK;
            vo_ret_val := -35;
            RETURN -1;
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -36;
            RETURN -1;
END UPDATE_DIFFERENTIALS;

FUNCTION ADD_VEHICLE_ESTIMATE
    (vi_veh_series IN VEHICLE_LIST.veh_series_code %TYPE,
	 vi_proj_desc IN VEHICLE_LIST.proj_desc%TYPE,
     vi_num_of_vehicles IN VEHICLE_LIST.num_of_vehicles%TYPE,
     vi_make IN TYPE_OF_VEHICLE.make%TYPE,
	 vi_model IN TYPE_OF_VEHICLE.model%TYPE,
     vi_year IN TYPE_OF_VEHICLE.year%TYPE,
     vi_engine IN ENGINES.name%TYPE,
	 vi_trans IN TRANSMISSIONS.name%TYPE,
     vi_diff IN DIFFERENTIAL.name%TYPE,
     vi_entered_by IN VEHICLE_LIST.entered_by%TYPE,
     vi_SOPNumber IN VEHICLE_LIST.sopnumber%TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS

new_id NUMBER;
BEGIN
    INSERT INTO VEHICLE_LIST
        (
         vehicle_list_id,
         veh_series_code,
         proj_desc,
         num_of_vehicles,
         make,
         model,
         year,
         engine,
         transmission,
         differential,
         date_entered,
         entered_by,
         modified_last_by,
         modified_last_date,
         sopnumber)
      VALUES
        (
         vehicle_list_seq.NEXTVAL,
         UPPER(NVL(vi_veh_series,' ')),
         UPPER(NVL(vi_proj_desc, ' ')),
         NVL(vi_num_of_vehicles, 0),
         UPPER(NVL(vi_make, ' ')),
         UPPER(NVL(vi_model, ' ')),
         NVL(vi_year,0),
         UPPER(NVL(vi_engine, ' ')),
         UPPER(NVL(vi_trans, ' ')),
         UPPER(NVL(vi_diff, ' ')),
         SYSDATE,
         UPPER(NVL(vi_entered_by, ' ')),
         UPPER(NVL(vi_entered_by, ' ')),
         SYSDATE,
         UPPER(NVL(vi_SOPNumber, ' '))
        );
    SELECT vehicle_list_seq.CURRVAL INTO new_id FROM dual;
    COMMIT;
    vo_ret_val := new_id;
    RETURN 0;

    EXCEPTION
        WHEN no_data_found THEN
            ROLLBACK;
            vo_ret_val := -37;
	    	RETURN -1;
        WHEN DUP_VAL_ON_INDEX THEN
            ROLLBACK;
            vo_ret_val := -38;
            RETURN -1;
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -39;
            RETURN -1;
END ADD_VEHICLE_ESTIMATE;

FUNCTION UPDATE_VEHICLE_ESTIMATE
    (vi_veh_series IN VEHICLE_LIST.veh_series_code %TYPE,
	 vi_proj_desc IN VEHICLE_LIST.proj_desc%TYPE,
     vi_num_of_vehicles IN VEHICLE_LIST.num_of_vehicles%TYPE,
     vi_make IN TYPE_OF_VEHICLE.make%TYPE,
     vi_model IN TYPE_OF_VEHICLE.model%TYPE,
     vi_year IN TYPE_OF_VEHICLE.year%TYPE,
     vi_engine IN ENGINES.name%TYPE,
     vi_trans IN TRANSMISSIONS.name%TYPE,
     vi_diff IN DIFFERENTIAL.name%TYPE,
     vi_entered_by IN VEHICLE_LIST.modified_last_by%TYPE,
     vi_vehicle_list_id IN VEHICLE_LIST.vehicle_list_id%TYPE,
     vi_SOPNumber IN VEHICLE_LIST.sopnumber%TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS
BEGIN
    UPDATE
        VEHICLE_LIST
    SET
        veh_series_code = UPPER(vi_veh_series),
        proj_desc = UPPER(NVL(vi_proj_desc, ' ')),
        num_of_vehicles = NVL(vi_num_of_vehicles, 0 ),
        make = UPPER(NVL(vi_make, ' ')),
        model = UPPER(NVL(vi_model, ' ')),
        year = vi_year,
        engine = UPPER(NVL(vi_engine, ' ')),
        transmission = UPPER(NVL(vi_trans, ' ')),
        differential = UPPER(NVL(vi_diff, ' ')),
        entered_by = UPPER(NVL(vi_entered_by,' ')),
        modified_last_by =UPPER(NVL(vi_entered_by, ' ')),
        modified_last_date = SYSDATE,
        sopnumber = vi_SOPNumber
    WHERE
        vehicle_list_id = vi_vehicle_list_id;
    COMMIT;
    vo_ret_val :=0;
    RETURN 0;

    EXCEPTION
        WHEN no_data_found THEN
            ROLLBACK;
            vo_ret_val := -40;
	    	RETURN -1;
        WHEN DUP_VAL_ON_INDEX THEN
            ROLLBACK;
            vo_ret_val := -41;
            RETURN -1;
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -42;
        RETURN -1;
END UPDATE_VEHICLE_ESTIMATE;


FUNCTION ADD_RB_ESTIMATE
    (vi_modified_by IN RB_MASTERLIST.last_modified_by%TYPE,
     vi_job_number IN RB_MASTERLIST.job_number%TYPE,
     vi_core_charge IN RB_MASTERLIST.core_charge%TYPE,
	 vi_rebuilt_stock_num IN RB_MASTERLIST.rebuilt_stock_num%TYPE,
     vi_core_part_num IN RB_MASTERLIST.core_part_num%TYPE,
     vi_keyword IN RB_MASTERLIST.keyword%TYPE,
	 vi_detailed_desc IN RB_MASTERLIST.detailed_desc%TYPE,
     vi_mms_stock_code IN RB_MASTERLIST.mms_stock_code%TYPE,
     vi_sop_number IN RB_MASTERLIST.sop_number%TYPE,
     vi_reman_cost IN RB_MASTERLIST.reman_cost%TYPE,
     vi_buy_new_cost IN RB_MASTERLIST.buy_new_cost%TYPE,
     vi_external_cost IN RB_MASTERLIST.external_cost%TYPE,
     vi_active IN RB_MASTERLIST.active%TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS
BEGIN
    INSERT INTO RB_MASTERLIST
        (
         last_modified_by,
         date_modified,
         job_number,
         core_charge,
         rebuilt_stock_num,
         core_part_num,
         keyword,
         detailed_desc,
         mms_stock_code,
         estimated_cost,
         sop_number,
         buy_new_cost,
         reman_cost,
         external_cost,
         active
        )
    VALUES
        (
         UPPER(NVL(vi_modified_by, ' ')),
         SYSDATE,
         UPPER(NVL(vi_job_number, ' ')),
         NVL(vi_core_charge, ' '),
         NVL(vi_rebuilt_stock_num,' '),
         NVL(vi_core_part_num,' '),
         UPPER(NVL(vi_keyword, ' ')),
         UPPER(NVL(vi_detailed_desc, ' ')),
         NVL(vi_mms_stock_code, ' '),
         0,
         NVL(vi_sop_number, ' '),
         NVL(vi_buy_new_cost, ''),
         NVL(vi_reman_cost, ''),
         NVL(vi_external_cost, ''),
         vi_active
        );
    COMMIT;
    vo_ret_val :=0;
    RETURN 0;

    EXCEPTION
        WHEN no_data_found THEN
            ROLLBACK;
            vo_ret_val := -43;
	    	RETURN -1;
        WHEN DUP_VAL_ON_INDEX THEN
            ROLLBACK;
            vo_ret_val := -44;
            RETURN -1;
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -45;
            RETURN -1;
END ADD_RB_ESTIMATE;

FUNCTION UPDATE_RB_ESTIMATE
    (vi_modified_by IN RB_MASTERLIST.last_modified_by%TYPE,
     vi_job_number IN RB_MASTERLIST.job_number%TYPE,
     vi_core_charge IN RB_MASTERLIST.core_charge%TYPE,
	 vi_rebuilt_stock_num IN RB_MASTERLIST.rebuilt_stock_num%TYPE,
     vi_core_part_num IN RB_MASTERLIST.core_part_num%TYPE,
     vi_keyword IN RB_MASTERLIST.keyword%TYPE,
	 vi_detailed_desc IN RB_MASTERLIST.detailed_desc%TYPE,
     vi_mms_stock_code IN RB_MASTERLIST.mms_stock_code%TYPE,
     vi_sop_number IN RB_MASTERLIST.sop_number%TYPE,
     vi_buy_new_cost IN RB_MASTERLIST.buy_new_cost%TYPE,
     vi_reman_cost IN RB_MASTERLIST.reman_cost%TYPE,
     vi_external_cost IN RB_MASTERLIST.external_cost%TYPE,
     vi_active IN RB_MASTERLIST.active%TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS
BEGIN
    UPDATE
        RB_MASTERLIST
    SET
        last_modified_by = UPPER(NVL(vi_modified_by, ' ')),
        date_modified = SYSDATE,
        job_number = NVL(vi_job_number, ' '),
        core_charge = NVL(vi_core_charge, ' '),
        core_part_num = NVL(vi_core_part_num,' '),
        keyword = UPPER(NVL(vi_keyword, ' ')),
        detailed_desc = UPPER(NVL(vi_detailed_desc, ' ')),
        mms_stock_code = NVL(vi_mms_stock_code, ' '),
        sop_number = NVL(vi_sop_number, ' '),
        buy_new_cost= NVL(vi_buy_new_cost, ''),
        reman_cost = NVL(vi_reman_cost, ''),
        external_cost = NVL(vi_external_cost, ''),
        active = vi_active
    WHERE
        UPPER(rebuilt_stock_num) = vi_rebuilt_stock_num;
    COMMIT;
    vo_ret_val :=0;
    RETURN 0;

    EXCEPTION
        WHEN no_data_found THEN
            ROLLBACK;
            vo_ret_val := -46;
	    	RETURN -1;
        WHEN DUP_VAL_ON_INDEX THEN
            ROLLBACK;
            vo_ret_val := -47;
            RETURN -1;
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -48;
            RETURN -1;
END UPDATE_RB_ESTIMATE;

FUNCTION ADD_MB
    (vi_bench_number IN MB_LIST.bench_number%TYPE,
     vi_bus_type IN MB_LIST.bus_type%TYPE,
     vi_buy_code IN MB_LIST.buy_code%TYPE,
     vi_buy_new_cost IN MB_LIST.buy_new_cost%TYPE,
     vi_core_code IN MB_LIST.core_code%TYPE,
     vi_description IN MB_LIST.description%TYPE,
     vi_external_cost IN MB_LIST.external_cost%TYPE,
     vi_keyword IN MB_LIST.keyword%TYPE,
     vi_mb_number IN MB_LIST.mb_number%TYPE,
     vi_num_bus_comp IN MB_LIST.num_bus_comp%TYPE,
     vi_annual_usage IN MB_LIST.annual_usage%TYPE,
     vi_rebuild_code IN MB_LIST.rebuild_code%TYPE,
     vi_reman_cost IN MB_LIST.reman_cost%TYPE,
     vi_recommendation IN MB_LIST.recommendation%TYPE,
     vi_sample_provided IN MB_LIST.sample_provided%TYPE,
     vi_vendor_part_num IN MB_LIST.vendor_part_num%TYPE,
     vi_internal_cost IN MB_LIST.internal_cost%TYPE,
     vi_sop_num IN MB_LIST.sop_number%TYPE,
     vi_core_cost IN MB_LIST.core_cost%TYPE,
     vi_job_number IN MB_LIST.job_number%TYPE,
     vi_manualReadNewPrice in MB_LIST.readmanualnewprice%TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS
BEGIN
    INSERT INTO MB_LIST
        (
         mb_number,
         keyword,
         description,
         bus_type,
         num_bus_comp,
         vendor_part_num,
         buy_code,
         rebuild_code,
         core_code,
         annual_usage,
         bench_number,
         sample_provided,
         recommendation,
         reman_cost,
         external_cost,
         buy_new_cost,
         internal_cost,
         sop_number,
         core_cost,
         job_number,
         date_opened,
         readmanualnewprice
        )
    VALUES
        (
         UPPER(NVL(vi_mb_number, ' ')),
         UPPER(NVL(vi_keyword, ' ')),
         UPPER(NVL(vi_description, ' ')),
         UPPER(NVL(vi_bus_type, ' ')),
         UPPER(NVL(vi_num_bus_comp, ' ')),
         UPPER(NVL(vi_vendor_part_num, ' ')),
         UPPER(NVL(vi_buy_code, ' ')),
         UPPER(NVL(vi_rebuild_code, ' ')),
         UPPER(NVL(vi_core_code, ' ')),
         NVL(vi_annual_usage, ' '),
         UPPER(NVL(vi_bench_number, ' ')),
         vi_sample_provided,
         vi_recommendation,
         UPPER(NVL(vi_reman_cost, ' ')),
         NVL(vi_external_cost, ' '),
         NVL(vi_buy_new_cost, ' '),
         NVL(vi_internal_cost, ' '),
         UPPER(NVL(vi_sop_num, ' ')),
         vi_core_cost,
         vi_job_number,
         SYSDATE,
         vi_manualReadNewPrice
        );
    COMMIT;
    vo_ret_val :=0;
    RETURN 0;

    EXCEPTION
        WHEN no_data_found THEN
            ROLLBACK;
            vo_ret_val := -49;
	    	RETURN -1;
        WHEN DUP_VAL_ON_INDEX THEN
            ROLLBACK;
            vo_ret_val := -50;
            RETURN -1;
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -51;
            RETURN -1;
END ADD_MB;

FUNCTION UPDATE_MB_LIST
     (vi_bench_number IN MB_LIST.bench_number%TYPE,
      vi_bus_type IN MB_LIST.bus_type%TYPE,
      vi_buy_code IN MB_LIST.buy_code%TYPE,
      vi_buy_new_cost IN MB_LIST.buy_new_cost%TYPE,
      vi_core_code IN MB_LIST.core_code%TYPE,
      vi_description IN MB_LIST.description%TYPE,
      vi_external_cost IN MB_LIST.external_cost%TYPE,
      vi_keyword IN MB_LIST.keyword%TYPE,
      vi_mb_number IN MB_LIST.mb_number%TYPE,
      vi_num_bus_comp IN MB_LIST.num_bus_comp%TYPE,
      vi_annual_usage IN MB_LIST.annual_usage%TYPE,
      vi_rebuild_code IN MB_LIST.rebuild_code%TYPE,
      vi_reman_cost IN MB_LIST.reman_cost%TYPE,
      vi_recommendation IN MB_LIST.recommendation%TYPE,
      vi_sample_provided IN MB_LIST.sample_provided%TYPE,
      vi_internal_cost IN MB_LIST.internal_cost%TYPE,
      vi_vendor_part_num IN MB_LIST.vendor_part_num%TYPE,
      vi_sop_num IN MB_LIST.sop_number%TYPE,
      vi_core_cost IN MB_LIST.core_cost%TYPE,
      vi_job_number IN MB_LIST.job_number%TYPE,
      vi_manualReadNewPrice in MB_LIST.readmanualnewprice%TYPE,
      vi_partid IN ROWID,
      vo_ret_val OUT NUMBER) RETURN NUMBER IS

emesg VARCHAR2(250);

BEGIN
    UPDATE
        MB_LIST
    SET
        mb_number = UPPER(NVL(vi_mb_number, ' ')),
        keyword = UPPER(NVL(vi_keyword, ' ')),
        description = UPPER(NVL(vi_description, ' ')),
        bus_type = UPPER(NVL(vi_bus_type, ' ')),
        num_bus_comp = UPPER(NVL(vi_num_bus_comp, ' ')),
        vendor_part_num = UPPER(NVL(vi_vendor_part_num, ' ')),
        buy_code = UPPER(NVL(vi_buy_code, ' ')),
        rebuild_code = UPPER(NVL(vi_rebuild_code, ' ')),
        core_code = UPPER(NVL(vi_core_code, ' ')),
        annual_usage = UPPER(NVL(vi_annual_usage, ' ')),
        bench_number = UPPER(NVL(vi_bench_number, ' ')) ,
        sample_provided = vi_sample_provided,
        recommendation = vi_recommendation ,
        reman_cost = UPPER(NVL(vi_reman_cost, ' ')),
        external_cost = NVL(vi_external_cost, ' '),
        buy_new_cost = NVL(vi_buy_new_cost, ' '),
        internal_cost = NVL(vi_internal_cost, ' '),
        sop_number = upper(nvl(vi_sop_num, ' ')),
        core_cost = vi_core_cost,
        job_number = vi_job_number,
        readmanualnewprice= vi_manualReadNewPrice
    WHERE
        ROWID = vi_partid;
    COMMIT;
    vo_ret_val :=0;
    RETURN 0;

    EXCEPTION
        WHEN no_data_found THEN
            ROLLBACK;
            vo_ret_val := -52;
		    RETURN -1;
        WHEN DUP_VAL_ON_INDEX THEN
            ROLLBACK;
            vo_ret_val := -53;
            RETURN -1;
        WHEN others THEN
            ROLLBACK;
            emesg := SQLERRM;
            dbms_output.put_line(emesg);
            vo_ret_val := -54;
            RETURN -1;
END UPDATE_MB_LIST;

FUNCTION ADD_LABOUR_TASKS
    (vi_labour_defn IN EMPLOYEE_LABOUR.labour_defn%TYPE,
     vi_link_number IN EMPLOYEE_LABOUR.link_number%TYPE,
     vi_typeid IN EMPLOYEE_LABOUR.typeid%TYPE,
     vi_costcentre IN EMPLOYEE_LABOUR.costcentre%TYPE,
     vi_task IN EMPLOYEE_LABOUR.task%TYPE,
     vi_labour_type IN EMPLOYEE_LABOUR.labour_type%TYPE,
     vi_usage IN EMPLOYEE_LABOUR.usage%TYPE,
     vi_hrs_reqd IN EMPLOYEE_LABOUR.hrs_reqd%TYPE,
     vi_adj_hrs IN EMPLOYEE_LABOUR.adj_hrs%TYPE,
     vi_time_addition IN EMPLOYEE_LABOUR.time_addition%TYPE,
     vi_rb_part_num IN EMPLOYEE_LABOUR.rebuilt_part_num%TYPE,
     vi_last_modified_by IN EMPLOYEE_LABOUR.last_modified_by%TYPE,
     vo_ret_val OUT NUMBER)  RETURN NUMBER IS
BEGIN
    INSERT INTO EMPLOYEE_LABOUR
        (
         labour_defn,
         date_entered,
         link_number,
         typeid,
         costcentre,
         EMPLOYEE_LABOUR.task,
         labour_type,
         usage,
         hrs_reqd,
         adj_hrs,
         date_revised,
         time_addition,
         rebuilt_part_num,
         last_modified_by
        )
    VALUES
        (
         UPPER(NVL(vi_labour_defn, ' ')),
         SYSDATE,
         UPPER(NVL(vi_link_number, ' ')),
         UPPER(NVL(vi_typeid, ' ')),
         UPPER(NVL(vi_costcentre, ' ')),
         UPPER(NVL(vi_task, ' ')),
         UPPER(NVL(vi_labour_type, ' ')),
         UPPER(NVL(vi_usage, ' ')),
         NVL(vi_hrs_reqd, 0),
         NVL(vi_adj_hrs, 0),
         SYSDATE,
         NVL(vi_time_addition,0),
         UPPER(NVL(vi_rb_part_num, ' ')),
         vi_last_modified_by
        );
    COMMIT;
    vo_ret_val :=0;
    RETURN 0;

    EXCEPTION
        WHEN no_data_found THEN
            ROLLBACK;
            vo_ret_val := -55;
	    	RETURN -1;
        WHEN DUP_VAL_ON_INDEX THEN
            ROLLBACK;
            vo_ret_val := -56;
            RETURN -1;
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -57;
            RETURN -1;
END ADD_LABOUR_TASKS;

FUNCTION UPDATE_LABOUR_TASKS
    (vi_labour_defn IN EMPLOYEE_LABOUR.labour_defn%TYPE,
     vi_link_number IN EMPLOYEE_LABOUR.link_number%TYPE,
     vi_typeid IN EMPLOYEE_LABOUR.typeid%TYPE,
     vi_costcentre IN EMPLOYEE_LABOUR.costcentre%TYPE,
     vi_task IN EMPLOYEE_LABOUR.task%TYPE,
     vi_labour_type IN EMPLOYEE_LABOUR.labour_type%TYPE,
     vi_usage IN EMPLOYEE_LABOUR.usage%TYPE,
     vi_hrs_reqd IN EMPLOYEE_LABOUR.hrs_reqd%TYPE,
     vi_adj_hrs IN EMPLOYEE_LABOUR.adj_hrs%TYPE,
     vi_partid IN ROWID,
     vi_time_addition IN EMPLOYEE_LABOUR.time_addition%TYPE,
     vi_last_modified_by IN EMPLOYEE_LABOUR.last_modified_by%TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS
BEGIN
    UPDATE
        EMPLOYEE_LABOUR
    SET
        labour_defn = UPPER(NVL(vi_labour_defn, ' ')),
        link_number = UPPER(NVL(vi_link_number, ' ')),
        typeid = UPPER(NVL(vi_typeid, ' ')),
        costcentre = UPPER(NVL(vi_costcentre, ' ')),
        EMPLOYEE_LABOUR.task = UPPER(NVL(vi_task, ' ')),
        labour_type = UPPER(NVL(vi_labour_type, ' ')),
        usage = UPPER(NVL(vi_usage, ' ')),
        hrs_reqd = NVL(vi_hrs_reqd, 0),
        adj_hrs = NVL(vi_adj_hrs, 0),
        date_revised = SYSDATE,
        time_addition = vi_time_addition,
        last_modified_by = vi_last_modified_by
    WHERE
        ROWID = vi_partid;
    COMMIT;
    vo_ret_val :=0;
    RETURN 0;

    EXCEPTION
        WHEN no_data_found THEN
            ROLLBACK;
            vo_ret_val := -58;
    		RETURN -1;
        WHEN DUP_VAL_ON_INDEX THEN
            ROLLBACK;
            vo_ret_val := -59;
            RETURN -1;
          WHEN others THEN
            ROLLBACK;
            vo_ret_val := -60;
            RETURN -1;
END UPDATE_LABOUR_TASKS;

FUNCTION ADD_NSCP_USED
    (vi_orig_supplier_num IN NSC_PARTS_USED.orig_supp_num%TYPE,
	 vi_orig_supplier_name IN NSC_PARTS_USED.orig_supplier_name%TYPE,
     vi_cost_centre IN NSC_PARTS_USED.cost_centre%TYPE,
     vi_qty_reqd IN NSC_PARTS_USED.qty_reqd%TYPE,
     vi_percent_usage IN NSC_PARTS_USED.percent_usage%TYPE,
	 vi_entered_by IN NSC_PARTS_USED.entered_by%TYPE,
     vi_mb_num IN NSC_PARTS_USED.link_code %TYPE,
     vi_cost IN NSC_PARTS_USED.cost%TYPE,
     vi_link_type IN NSC_PARTS_USED.link_type%TYPE,
     vi_core_cost IN NSC_PARTS_USED.corecost%TYPE,
     vi_ID IN NSC_PARTS_USED.id%TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS

 position varchar2(500);
 name varchar(500)   ;
BEGIN

position := INSTR(vi_orig_supplier_name,' Price:',1,1);
 if position > 0 then
    name := substr (vi_orig_supplier_name,1,(position -1));
 else
    name := vi_orig_supplier_name;
 end if;

    INSERT INTO NSC_PARTS_USED
        (
         orig_supp_num,
         orig_supplier_name,
         cost_centre,
         percent_usage,
         entered_by,
         date_entered,
         last_modified_by,
         last_modified_date,
         link_code,
         qty_reqd,
         cost,
         link_type,
         corecost,
         id
        )
    VALUES
        (
         NVL(UPPER(vi_orig_supplier_num), ' '),
         NVL(UPPER(name), ' '),
         NVL(UPPER(vi_cost_centre), ' '),
         NVL(vi_percent_usage,'0'),
         UPPER(vi_entered_by),
         SYSDATE,
         UPPER(vi_entered_by),
         SYSDATE,
         vi_mb_num ,
         NVL(vi_qty_reqd, '0'),
         NVL(vi_cost, 0),
         vi_link_type,
         NVL(vi_core_cost, 1),
         vi_ID
        );
    COMMIT;
    vo_ret_val:=0;
    RETURN 0;

    EXCEPTION
        WHEN no_data_found THEN
            ROLLBACK;
		    vo_ret_val := -61;
		    RETURN -1;
        WHEN DUP_VAL_ON_INDEX THEN
            ROLLBACK;
            vo_ret_val := -62;
            RETURN -1;
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -63;
            RETURN -1;
END ADD_NSCP_USED;

FUNCTION ADD_SCP_USED
    (vi_mms_stock_code IN SC_PARTS_USED.mms_stock_code%TYPE,
        vi_cost_centre IN SC_PARTS_USED.cost_centre%TYPE,
        vi_qty_reqd IN SC_PARTS_USED.qty_reqd%TYPE,
        vi_percent_usage IN SC_PARTS_USED.percent_usage%TYPE,
		vi_user_entered IN SC_PARTS_USED.user_entered%TYPE,
        vi_makebuy_code IN SC_PARTS_USED.link_code %TYPE,
        vi_mms_cost IN SC_PARTS_USED.mms_cost %TYPE,
        vi_oem_cost IN SC_PARTS_USED.oem_cost %TYPE,
        vi_is_rebuilt_part IN SC_PARTS_USED.rebuilt_part%TYPE,
        vi_link_type IN SC_PARTS_USED.link_type%TYPE,
        vi_core_cost IN SC_PARTS_USED.corecost%TYPE,
        vi_mms_rebuilt_code IN SC_PARTS_USED.mms_rebuilt_code%TYPE,
        vi_rebuilt_cost IN SC_PARTS_USED.reb_part_cost%TYPE,
        vo_ret_val OUT NUMBER) RETURN NUMBER IS
BEGIN
    INSERT INTO SC_PARTS_USED
        (
         mms_stock_code,
         date_entered,
         user_entered,
         mms_cost,
         oem_cost,
         last_modified_by,
         last_modified_date,
         cost_centre,
         qty_reqd,
         percent_usage,
         link_code,
         rebuilt_part,
         link_type,
         mms_rebuilt_code,
         corecost,
         reb_part_cost
        )
    VALUES
        (
         UPPER(vi_mms_stock_code),
         SYSDATE,
         NVL(UPPER(vi_user_entered), ' '),
         NVL(vi_mms_cost, 0),
         NVL(vi_oem_cost, 0),
         UPPER(vi_user_entered),
         SYSDATE,
         NVL(UPPER(vi_cost_centre), ' '),
         NVL(vi_qty_reqd,'0'),
         NVL(vi_percent_usage, '0'),
         vi_makebuy_code,
         vi_is_rebuilt_part,
         vi_link_type,
         NVL(vi_mms_rebuilt_code, ' '),
         NVL(vi_core_cost, 0),
         NVL(vi_rebuilt_cost, 0)
        );
    COMMIT;
    vo_ret_val:=0;
    RETURN 0;

    EXCEPTION
        WHEN no_data_found THEN
            ROLLBACK;
		    vo_ret_val := -64;
		    RETURN -1;
        WHEN DUP_VAL_ON_INDEX THEN
            ROLLBACK;
            vo_ret_val := -65;
            RETURN -1;
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -66;
        RETURN -1;
END ADD_SCP_USED;

FUNCTION ADD_RBP_USED
    (   vi_mms_stock_code IN SC_PARTS_USED.mms_stock_code%TYPE,
        vi_cost_centre IN SC_PARTS_USED.cost_centre%TYPE,
        vi_qty_reqd IN SC_PARTS_USED.qty_reqd%TYPE,
        vi_percent_usage IN SC_PARTS_USED.percent_usage%TYPE,
		vi_user_entered IN SC_PARTS_USED.user_entered%TYPE,
        vi_makebuy_code IN SC_PARTS_USED.link_code%TYPE,
        vi_estimated_cost IN SC_PARTS_USED.reb_part_cost%TYPE,
        vi_mms_rebuilt_code IN SC_PARTS_USED.mms_rebuilt_code%TYPE,
        vi_link_type IN SC_PARTS_USED.link_type%TYPE,
        vi_core_cost IN SC_PARTS_USED.corecost%TYPE,
        vo_ret_val OUT NUMBER) RETURN NUMBER IS

temp2 NUMBER;
BEGIN
    INSERT INTO SC_PARTS_USED
        (
         mms_stock_code,
         cost_centre,
         percent_usage,
         user_entered,
         date_entered,
         last_modified_by,
         last_modified_date,
         link_code,
         qty_reqd,
         reb_part_cost,
         mms_rebuilt_code,
         rebuilt_part,
         link_type,
         corecost,
         mms_cost,
         oem_cost
        )
    VALUES
        (
         UPPER(vi_mms_stock_code),
         NVL(UPPER(vi_cost_centre), ' '),
         NVL(vi_percent_usage, '0'),
         UPPER(vi_user_entered),
         SYSDATE,
         UPPER(vi_user_entered),
         SYSDATE,
         vi_makebuy_code,
         vi_qty_reqd,
         vi_estimated_cost,
         vi_mms_rebuilt_code,
         'Y',
         vi_link_type,
         NVL(vi_core_cost, 0),
         0,
         0
        );
      --ces_inquiry.retrieve_mb_labour(vi_makebuy_code,vi_link_type);
    COMMIT;
    vo_ret_val:=0;
    RETURN 0;

    EXCEPTION
        WHEN no_data_found THEN
            ROLLBACK;
    		vo_ret_val := -67;
    		RETURN -1;
        WHEN DUP_VAL_ON_INDEX THEN
            ROLLBACK;
            vo_ret_val := -68;
            RETURN -1;
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -69;
            RETURN -1;
END ADD_RBP_USED;

FUNCTION UPDATE_NSCP_USED
    (vi_orig_supplier_num IN NSC_PARTS_USED.orig_supp_num%TYPE,
	 vi_orig_supplier_name IN NSC_PARTS_USED.orig_supplier_name%TYPE,
     vi_cost_centre IN NSC_PARTS_USED.cost_centre%TYPE,
     vi_qty_reqd IN NSC_PARTS_USED.qty_reqd%TYPE,
     vi_percent_usage IN NSC_PARTS_USED.percent_usage%TYPE,
	 vi_entered_by IN NSC_PARTS_USED.entered_by%TYPE,
     vi_mb_num IN NSC_PARTS_USED.link_code %TYPE,
     vi_cost IN NSC_PARTS_USED.cost %TYPE,
     vi_id IN ROWID,
     vi_core_cost IN NSC_PARTS_USED.corecost %TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS
BEGIN
--orig_supp_num, orig_supplier_name,cost  no longer used but still
--copied because of overhead to remove the fields in the nsc_parts_used table

    UPDATE
        NSC_PARTS_USED
    SET
        orig_supp_num = UPPER(vi_orig_supplier_num),
        orig_supplier_name = UPPER(vi_orig_supplier_name),
        qty_reqd = NVL(vi_qty_reqd,'0'),
        percent_usage = NVL(vi_percent_usage,'0'),
        cost_centre = NVL(vi_cost_centre, ' '),
        last_modified_by = UPPER(vi_entered_by),
        last_modified_date = SYSDATE,
        cost = vi_cost,
        corecost = NVL(vi_core_cost,0)
    WHERE
        ROWID = vi_id;
    COMMIT;
    vo_ret_val:=0;
    RETURN 0;

    EXCEPTION
        WHEN no_data_found THEN
            ROLLBACK;
    		vo_ret_val := -70;
	    	RETURN -1;
        WHEN DUP_VAL_ON_INDEX THEN
            ROLLBACK;
            vo_ret_val := -71;
            RETURN -1;
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -72;
            RETURN -1;
END UPDATE_NSCP_USED;

FUNCTION UPDATE_SCP_USED
    (vi_mms_stock_code IN SC_PARTS_USED.mms_stock_code%TYPE,
     vi_cost_centre IN SC_PARTS_USED.cost_centre%TYPE,
     vi_qty_reqd IN SC_PARTS_USED.qty_reqd%TYPE,
     vi_percent_usage IN SC_PARTS_USED.percent_usage%TYPE,
	 vi_user_entered IN SC_PARTS_USED.user_entered%TYPE,
     vi_makebuy_code IN SC_PARTS_USED.link_code %TYPE,
     vi_mms_cost IN SC_PARTS_USED.mms_cost %TYPE,
     vi_oem_cost IN SC_PARTS_USED.oem_cost %TYPE,
     vi_id IN ROWID,
     vi_core_cost IN SC_PARTS_USED.corecost %TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS
BEGIN
    UPDATE
        SC_PARTS_USED
    SET
        mms_stock_code = UPPER(vi_mms_stock_code),
        qty_reqd = NVL(vi_qty_reqd,'0'),
        percent_usage = NVL(vi_percent_usage,'0'),
        cost_centre = NVL(vi_cost_centre, ' '),
        last_modified_by = UPPER(vi_user_entered),
        last_modified_date = SYSDATE,
        mms_cost = vi_mms_cost,
        oem_cost = vi_oem_cost,
        corecost = NVL(vi_core_cost, 0)
    WHERE
        ROWID = vi_id;
    COMMIT;
    vo_ret_val:=0;
    RETURN 0;

    EXCEPTION
        WHEN no_data_found THEN
            ROLLBACK;
		    vo_ret_val := -73;
    		RETURN -1;
        WHEN DUP_VAL_ON_INDEX THEN
            ROLLBACK;
            vo_ret_val := -74;
            RETURN -1;
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -75;
            RETURN -1;
END UPDATE_SCP_USED;

FUNCTION UPDATE_RBP_USED
    (vi_cost_centre IN SC_PARTS_USED.cost_centre%TYPE,
     vi_qty_reqd IN SC_PARTS_USED.qty_reqd%TYPE,
     vi_percent_usage IN SC_PARTS_USED.percent_usage%TYPE,
	 vi_user_entered IN SC_PARTS_USED.user_entered%TYPE,
     vi_makebuy_code IN SC_PARTS_USED.link_code%TYPE,
     vi_estimated_cost IN SC_PARTS_USED.reb_part_cost%TYPE,
     vi_rebuilt_num IN SC_PARTS_USED.mms_rebuilt_code%TYPE,
     vi_id IN ROWID,
     vi_core_cost IN SC_PARTS_USED.corecost %TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS
BEGIN
    UPDATE
        SC_PARTS_USED
    SET
        mms_rebuilt_code = UPPER(vi_rebuilt_num),
        qty_reqd = NVL(vi_qty_reqd,'0'),
        percent_usage = NVL(vi_percent_usage,'0'),
        cost_centre = NVL(vi_cost_centre, ' '),
        last_modified_by = UPPER(vi_user_entered),
        last_modified_date = SYSDATE,
        reb_part_cost = vi_estimated_cost,
        corecost = NVL(vi_core_cost, 0)
    WHERE
        ROWID = vi_id;
    COMMIT;
    vo_ret_val:=0;
    RETURN 0;

    EXCEPTION
        WHEN no_data_found THEN
            ROLLBACK;
    		vo_ret_val := -76;
    		RETURN -1;
        WHEN DUP_VAL_ON_INDEX THEN
            ROLLBACK;
            vo_ret_val := -77;
            RETURN -1;
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -78;
            RETURN -1;
END UPDATE_RBP_USED;

FUNCTION TRANSFER_PARTS_USED
    (vi_mms_stock_code IN SC_PARTS_USED.mms_stock_code%TYPE,
     vi_mms_cost IN SC_PARTS_USED.mms_cost%TYPE,
     vi_user_entered IN NSC_PARTS_USED.entered_by%TYPE,
     vi_id IN ROWID,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS
BEGIN
    INSERT INTO SC_PARTS_USED
        (
         mms_stock_code,
         cost_centre,
         qty_reqd,
         percent_usage,
         user_entered,
         date_entered,
         last_modified_by,
         last_modified_date,
         link_code,
         mms_cost,
         oem_cost,
         rebuilt_part,
         link_type,
         corecost
        )
    SELECT
        UPPER(vi_mms_stock_code),
        A.cost_centre,
        A.qty_reqd,
        A.percent_usage,
        UPPER(vi_user_entered),
        SYSDATE,
        UPPER(vi_user_entered),
        SYSDATE,
        A.link_code,
        NVL(vi_mms_cost,0),
        NVL(A.cost,0),
        'N',
        A.link_type,
        nvl(a.corecost,0)
    FROM
        NSC_PARTS_USED A
    WHERE
        A.rowid = vi_id;
        DELETE FROM NSC_PARTS_USED WHERE ROWID = vi_id;
    COMMIT;
    vo_ret_val:=0;
    RETURN 0;

    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            vo_ret_val := -79;
            RETURN -1;
END TRANSFER_PARTS_USED;

FUNCTION SET_DEFAULT_PASSWORD
    (vi_username IN USERS.username%TYPE,
     vi_password IN USERS.password%TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS
BEGIN
    UPDATE
        USERS
    SET
        password = vi_password
    WHERE
        username = vi_username;
    COMMIT;
    vo_ret_val:=0;
    RETURN 0;

    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            vo_ret_val := -80;
            RETURN -1;
END SET_DEFAULT_PASSWORD;

FUNCTION UPDATE_PASSWORD
     (vi_password IN USERS.password%TYPE,
      vi_user_name IN USERS.username%TYPE,
      vi_date_cahanged IN USERS.date_changed%TYPE,
      vo_ret_val OUT NUMBER) RETURN NUMBER IS
BEGIN
    UPDATE
        USERS
    SET
        password = vi_password,
        date_changed = vi_date_cahanged
    WHERE
        username = UPPER(vi_user_name);
    COMMIT;
    vo_ret_val:=0;
    RETURN 0;

    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            vo_ret_val := -81;
            RETURN -1;
END UPDATE_PASSWORD;

FUNCTION ADD_USER
     (vi_username IN USERS.username%TYPE,
      vi_access_level IN USERS.access_level%TYPE,
      vi_password IN users.password%TYPE,
      vi_ForceChangePassword IN integer,
      vo_ret_val OUT NUMBER) RETURN NUMBER IS

BEGIN
    IF (vi_ForceChangePassword = 0) THEN
        INSERT INTO USERS
            (
             username,
             date_changed,
             access_level,
             password,
             use_overhead_fringe
            )
        VALUES
            (
             vi_username,
             SYSDATE,
             vi_access_level,
             vi_password,
             'O'
            );
    ELSIF (vi_ForceChangePassword = 1) THEN
        INSERT INTO USERS
            (
             username,
             date_changed,
             access_level,
             password,
             pswd_change_date,
             use_overhead_fringe
           )
        VALUES
            (
             vi_username,
             SYSDATE,
             vi_access_level,
             vi_password,
             SYSDATE,
             'O'
        );
    END IF;
    COMMIT;
    vo_ret_val := 0;
    RETURN 0;

    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            vo_ret_val := -82;
            RETURN -1;
END ADD_USER;

FUNCTION UPDATE_ACCESS_LEVEL
    (vi_access_level IN USERS.access_level%TYPE,
     vi_previous_access_level IN USERS.previous_access_level%TYPE,
     vi_access_level_days IN INTEGER,
     vi_username IN USERS.username%TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS
BEGIN
    UPDATE
        users
    SET
        access_level = vi_access_level,
        previous_access_level = vi_previous_access_level,
        date_changed = SYSDATE
    WHERE
        username = vi_username;

    IF vi_access_level_days = 0 THEN
        UPDATE
            users
        SET
            date_changed_back = NULL
        WHERE
            username = vi_username;
    ELSE
        UPDATE
            users
        SET
            date_changed_back = SYSDATE + vi_access_level_days
        WHERE
            username = vi_username;
    END IF;
    COMMIT;
    vo_ret_val := 0;
    RETURN 0;

    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            vo_ret_val := -83;
            RETURN -1;
END UPDATE_ACCESS_LEVEL;

FUNCTION SET_PSWD_CHANGE_DATE_NULL
    (vi_username IN USERS.username%TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS
BEGIN
    UPDATE
        USERS
    SET
        pswd_change_date = NULL
    WHERE
        username = vi_username;
    COMMIT;
    vo_ret_val := 0;
    RETURN 0;

    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            vo_ret_val := -84;
            RETURN -1;
END SET_PSWD_CHANGE_DATE_NULL;

FUNCTION INSERT_MB_LIST_OF_BUSES
    (vi_mb_number IN MB_LIST_OF_BUSES.mb_number%TYPE,
     vi_list_id IN MB_LIST_OF_BUSES.list_id%TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS
BEGIN
    INSERT INTO MB_LIST_OF_BUSES
        (
         mb_number,
         list_id
        )
    VALUES
        (
         vi_mb_number,
         vi_list_id);
    COMMIT;
    vo_ret_val := 0;
    RETURN 0;

    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            vo_ret_val := -85;
            RETURN -1;
END INSERT_MB_LIST_OF_BUSES;

FUNCTION INSERT_RB_MASTERLIST
    (vi_mms_stock_code IN RB_MASTERLIST.mms_stock_code%TYPE,
     vi_detailed_desc IN RB_MASTERLIST.detailed_desc%TYPE,
     vi_keyword IN RB_MASTERLIST.keyword%TYPE,
     vi_core_part_num IN RB_MASTERLIST.core_part_num%TYPE,
     vi_rebuilt_stock_num IN RB_MASTERLIST.rebuilt_stock_num%TYPE,
     vi_job_number IN RB_MASTERLIST.job_number%TYPE,
     vi_last_modified_by IN RB_MASTERLIST.last_modified_by%TYPE,
     vi_sop_number IN RB_MASTERLIST.sop_number%TYPE,
     vi_buy_new_cost IN RB_MASTERLIST.buy_new_cost%TYPE,
     vi_reman_cost IN RB_MASTERLIST.reman_cost%TYPE,
     vi_external_cost IN RB_MASTERLIST.external_cost%TYPE,
     vi_core_cost IN RB_MASTERLIST.core_charge%TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS
BEGIN
    INSERT INTO RB_MASTERLIST
        (
         mms_stock_code,
         detailed_desc,
         keyword,
         core_part_num,
         rebuilt_stock_num,
         job_number,
         estimated_cost,
         date_modified,
         last_modified_by,
         sop_number,
         core_charge,
         buy_new_cost,
         reman_cost,
         external_cost,
         DATE_CONVERTED
        )
    VALUES
        (
         vi_mms_stock_code,
         vi_detailed_desc,
         vi_keyword,
         vi_core_part_num,
         vi_rebuilt_stock_num,
         vi_job_number,
         1,
         SYSDATE,
         vi_last_modified_by,
         vi_sop_number,
         nvl(vi_core_cost, ' '),
         vi_buy_new_cost,
         vi_reman_cost,
         vi_external_cost,
         SYSDATE
        );
    COMMIT;
    vo_ret_val := 0;
    RETURN 0;

    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            vo_ret_val := -86;
            RETURN -1;
END INSERT_RB_MASTERLIST;

FUNCTION INSERT_LIST_OF_BUSES
    (vi_description IN LIST_OF_BUSES.description%TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS

n_list_id NUMBER;
n_count NUMBER;

BEGIN
    SELECT
        count(*)
    INTO
        n_count
    FROM
        LIST_OF_BUSES;
    IF n_count <> 0 THEN
        SELECT
            MAX(list_id)
        INTO
            n_list_id
        FROM
            LIST_OF_BUSES;
        n_list_id := n_list_id + 1;
    ELSE
        n_list_id := 1;
    END IF;

    INSERT INTO LIST_OF_BUSES
        (
         list_id,
         description
        )
    VALUES
        (
         n_list_id,
         UPPER(vi_description)
        );
    COMMIT;
    vo_ret_val := 0;
    RETURN 0;

    EXCEPTION
        WHEN OTHERS THEN
            rollback;
            vo_ret_val := -87;
            RETURN -1;
END INSERT_LIST_OF_BUSES;

FUNCTION UPDATE_LIST_OF_BUSES
    (vi_list_id IN LIST_OF_BUSES.list_id%TYPE,
	 vi_description IN LIST_OF_BUSES.description%TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS
BEGIN
    UPDATE
        LIST_OF_BUSES
    SET
        description = UPPER(vi_description)
    WHERE
        list_id = vi_list_id;
    COMMIT;
    vo_ret_val := 0;
    RETURN 0;

    EXCEPTION
        WHEN no_data_found THEN
            ROLLBACK;
		    vo_ret_val := -88;
		    RETURN -1;
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -89;
            RETURN -1;
END UPDATE_LIST_OF_BUSES;

FUNCTION RESET_ACCESS_LEVEL
    (vi_username IN USERS.username%TYPE,
     vi_access_level IN USERS.access_level%TYPE,
     vi_previous_access_level IN USERS.previous_access_level%TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS
BEGIN
    UPDATE
        users
    SET
        access_level = vi_access_level,
        previous_access_level = vi_previous_access_level,
        date_changed = SYSDATE,
        date_changed_back = NULL
    WHERE
        username = vi_username;
    COMMIT;
    vo_ret_val := 0;
    RETURN 0;

    EXCEPTION
        WHEN no_data_found THEN
            ROLLBACK;
		    vo_ret_val := -90;
		    RETURN -1;
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -91;
            RETURN -1;
END RESET_ACCESS_LEVEL;

FUNCTION ADD_LABOUR_TASK_DESCRIPTION
    (vi_task_description IN LABOUR_TASK_DESCRIPTIONS.task_description%TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS

n_task_id NUMBER;
n_count NUMBER;

BEGIN
    SELECT
        count(*)
    INTO
        n_count
    FROM
        LABOUR_TASK_DESCRIPTIONS;

    IF n_count <> 0 THEN
        SELECT
            MAX(task_id)
        INTO
            n_task_id
        FROM
            LABOUR_TASK_DESCRIPTIONS;
        n_task_id := n_task_id + 1;
    ELSE
        n_task_id := 1;
    END IF;

    INSERT INTO LABOUR_TASK_DESCRIPTIONS
        (
         task_id,
         task_description
        )
    VALUES
        (
         n_task_id,
         vi_task_description
        );
    COMMIT;
    vo_ret_val := n_task_id;
    RETURN 0;

    EXCEPTION
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -92;
            RETURN -1;
END ADD_LABOUR_TASK_DESCRIPTION;

FUNCTION UPDATE_LABOUR_TASK_DESCRIPTION
    (vi_task_description IN LABOUR_TASK_DESCRIPTIONS.task_description%TYPE,
     vi_task_id IN LABOUR_TASK_DESCRIPTIONS.task_id%TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS
BEGIN
    UPDATE
        LABOUR_TASK_DESCRIPTIONS
    SET
        task_description = vi_task_description
    WHERE
        task_id = vi_task_id;
    COMMIT;
    vo_ret_val := 0;
    RETURN 0;

    EXCEPTION
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -93;
            RETURN -1;
END UPDATE_LABOUR_TASK_DESCRIPTION;

FUNCTION ADD_EMPLOYEE_SALARIES
    (vi_wage_group IN EMPLOYEE_SALARIES.wage_group%TYPE,
     vi_rate_per_hour IN EMPLOYEE_SALARIES.rate_per_hour%TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS
BEGIN
    INSERT INTO EMPLOYEE_SALARIES
        (
         wage_group,
         rate_per_hour,
         date_entered
        )
    VALUES
        (
         vi_wage_group,
         vi_rate_per_hour,
         SYSDATE
        );
    COMMIT;
    vo_ret_val := 0;
    RETURN 0;

    EXCEPTION
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -94;
            RETURN -1;
END ADD_EMPLOYEE_SALARIES;

FUNCTION UPDATE_EMPLOYEE_SALARIES
    (vi_wage_group IN EMPLOYEE_SALARIES.wage_group%TYPE,
     vi_rate_per_hour IN EMPLOYEE_SALARIES.rate_per_hour%TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS
BEGIN
    UPDATE
        EMPLOYEE_SALARIES
    SET
        rate_per_hour = vi_rate_per_hour
    WHERE
        wage_group = vi_wage_group;
    COMMIT;
    vo_ret_val := 0;
    RETURN 0;

    EXCEPTION
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -95;
            RETURN -1;
END UPDATE_EMPLOYEE_SALARIES;

FUNCTION ADD_EMPL_CLASS
    (vi_labour_defn IN EMPL_CLASS.labour_defn%TYPE,
     vi_wage_group IN EMPL_CLASS.wage_group%TYPE,
     vi_hrs_per_week IN EMPL_CLASS.hrs_per_week%TYPE,
     vi_overheadtype IN EMPL_CLASS.overheadtype%TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS

n_labour_type NUMBER;
n_count NUMBER;

BEGIN
    SELECT
        count(*)
    INTO
        n_count
    FROM
        EMPL_CLASS;

    IF n_count <> 0 THEN
        SELECT
            MAX(labour_type)
        INTO
            n_labour_type
        FROM
            EMPL_CLASS;
        n_labour_type := n_labour_type + 1;
    ELSE
        n_labour_type := 1;
    END IF;

    INSERT INTO EMPL_CLASS
        (
         labour_type,
         labour_defn,
         wage_group,
         hrs_per_week,
         date_entered,
         overheadtype
        )
    VALUES
        (
         n_labour_type,
         vi_labour_defn,
         vi_wage_group,
         vi_hrs_per_week,
         SYSDATE,
         vi_overheadtype
        );
    COMMIT;
    vo_ret_val := n_labour_type;
    RETURN 0;

    EXCEPTION
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -96;
            RETURN -1;
END ADD_EMPL_CLASS;

FUNCTION UPDATE_EMPL_CLASS
    (vi_labour_type IN EMPL_CLASS.labour_type%TYPE,
     vi_wage_group IN EMPL_CLASS.wage_group%TYPE,
     vi_labour_defn IN EMPL_CLASS.labour_defn%TYPE,
     vi_hrs_per_week IN EMPL_CLASS.hrs_per_week%TYPE,
     vi_overheadtype IN EMPL_CLASS.overheadtype%TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS
BEGIN
    UPDATE
        EMPL_CLASS
    SET
        labour_defn = vi_labour_defn,
        wage_group = vi_wage_group,
        hrs_per_week = vi_hrs_per_week,
        overheadtype = vi_overheadtype
    WHERE
        labour_type = vi_labour_type;
    COMMIT;
    vo_ret_val := 0;
    RETURN 0;

    EXCEPTION
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -97;
            RETURN -1;
END UPDATE_EMPL_CLASS;

FUNCTION ADD_TEMP_OEMKIT
    (vi_part_number IN KITS_MASTERLIST.part_number%TYPE,
	 vi_description IN KITS_MASTERLIST.detailed_desc%TYPE,
     vi_keyword IN KITS_MASTERLIST.keyword%TYPE,
     vi_username IN KITS_MASTERLIST.modified_last_by%TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS
BEGIN
    INSERT INTO KITS_MASTERLIST
        (
         part_number,
         detailed_desc,
         keyword,
         modified_last_by,
         modified_last_date,
         estimated_cost
        )
    VALUES
        (
         UPPER(vi_part_number),
         UPPER(vi_description),
         vi_keyword,
         vi_username,
         SYSDATE,
         0
        );
    COMMIT;
    vo_ret_val := 0;
    RETURN 0;

    EXCEPTION
        WHEN no_data_found THEN
            ROLLBACK;
    		vo_ret_val := -98;
	    	RETURN -1;
        WHEN DUP_VAL_ON_INDEX THEN
            ROLLBACK;
            vo_ret_val := -99;
            RETURN -1;
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -100;
            RETURN -1;
END ADD_TEMP_OEMKIT;

FUNCTION UPDATE_TEMP_OEMKIT
    (vi_part_number IN KITS_MASTERLIST.part_number%TYPE,
	 vi_description IN KITS_MASTERLIST.detailed_desc%TYPE,
     vi_keyword IN KITS_MASTERLIST.keyword%TYPE,
     vi_username IN KITS_MASTERLIST.modified_last_by%TYPE,
	 vi_rowid IN ROWID,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS
BEGIN
    UPDATE
        KITS_MASTERLIST
    SET
        part_number = UPPER(NVL(vi_part_number,' ')),
        detailed_desc = UPPER(NVL(vi_description,' ')),
        keyword = UPPER(NVL(vi_keyword,' ')),
        modified_last_by = UPPER(NVL(vi_username,' ')),
        modified_last_date = SYSDATE
    WHERE
        ROWID = vi_rowid;
    COMMIT;
    vo_ret_val := 0;
    RETURN 0;

    EXCEPTION
        WHEN no_data_found THEN
            ROLLBACK;
            vo_ret_val := -101;
	    	RETURN -1;
        WHEN DUP_VAL_ON_INDEX THEN
            ROLLBACK;
            vo_ret_val := -102;
            RETURN -1;
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -103;
            RETURN -1;
END UPDATE_TEMP_OEMKIT;

FUNCTION ADD_OEMKIT_BUS
    (vi_part_number IN KITS_USED.part_number%TYPE,
     vi_username IN KITS_USED.user_entered%TYPE,
     vi_cost_centre IN KITS_USED.cost_centre%TYPE,
     vi_link_code IN KITS_USED.link_code%TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS
BEGIN
    INSERT INTO KITS_USED
        (
         part_number,
         date_entered,
         user_entered,
         last_modified_by,
         last_modified_date,
         cost_centre,
         link_code
        )
    VALUES
        (
         vi_part_number,
         SYSDATE,
         vi_username,
         vi_username,
         SYSDATE,
         vi_cost_centre,
         vi_link_code
        );
    COMMIT;
    vo_ret_val := 0;
    RETURN 0;

    EXCEPTION
        WHEN no_data_found THEN
            ROLLBACK;
		    vo_ret_val := -104;
		    RETURN -1;
        WHEN DUP_VAL_ON_INDEX THEN
            ROLLBACK;
            vo_ret_val := -105;
            RETURN -1;
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -106;
            RETURN -1;
END ADD_OEMKIT_BUS;


FUNCTION UPDATE_OEMKIT_COST
    (vi_part_number IN KITS_MASTERLIST.part_number%TYPE,
	 vi_estimated_cost IN KITS_MASTERLIST.estimated_cost%TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS
BEGIN
    UPDATE
        KITS_MASTERLIST
    SET
        estimated_cost = NVL(vi_estimated_cost,0)
    WHERE
        part_number = vi_part_number;
    COMMIT;
    vo_ret_val := 0;
    RETURN 0;

    EXCEPTION
        WHEN no_data_found THEN
            ROLLBACK;
            vo_ret_val := -109;
		    RETURN -1;
        WHEN DUP_VAL_ON_INDEX THEN
            ROLLBACK;
            vo_ret_val := -110;
            RETURN -1;
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -111;
            RETURN -1;
END UPDATE_OEMKIT_COST;

FUNCTION UPDATE_RB_COST
    (vi_rebuilt_stock_num IN RB_MASTERLIST.rebuilt_stock_num%TYPE,
	 vi_estimated_cost IN RB_MASTERLIST.estimated_cost%TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS
BEGIN
    UPDATE
        RB_MASTERLIST
    SET
        estimated_cost = NVL(vi_estimated_cost,0)
    WHERE
        rebuilt_stock_num = vi_rebuilt_stock_num;
    COMMIT;
    vo_ret_val := 0;
    RETURN 0;

    EXCEPTION
        WHEN no_data_found THEN
            ROLLBACK;
            vo_ret_val := -112;
	    	RETURN -1;
        WHEN DUP_VAL_ON_INDEX THEN
            ROLLBACK;
            vo_ret_val := -113;
            RETURN -1;
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -114;
            RETURN -1;
END UPDATE_RB_COST;


FUNCTION RUN_MMS_SYNC
    (vo_ret_val OUT NUMBER) RETURN NUMBER IS
BEGIN
    ifs_mms_sync();
    vo_ret_val := 0;
    RETURN 0;

    EXCEPTION
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -117;
            RETURN -1;
END RUN_MMS_SYNC;

FUNCTION UPDATE_CES_SETTINGS
    (vi_parameter IN CES_SETTINGS.parameter%TYPE,
     vi_value IN CES_SETTINGS.value%TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS
BEGIN
    UPDATE
        CES_SETTINGS
    SET
        CES_SETTINGS.value = vi_value
    WHERE
        CES_SETTINGS.parameter = vi_parameter;

    COMMIT;
    vo_ret_val := 0;
    RETURN 0;

    EXCEPTION
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -118;
            RETURN -1;
END UPDATE_CES_SETTINGS;

FUNCTION INSERT_RB_LIST_OF_BUSES
    (vi_rebuilt_stock_num IN RB_LIST_OF_BUSES.rebuilt_stock_num%TYPE,
     vi_list_id IN RB_LIST_OF_BUSES.list_id%TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS
BEGIN
    INSERT INTO RB_LIST_OF_BUSES
        (
         rebuilt_stock_num,
         list_id
        )
    VALUES
        (
         vi_rebuilt_stock_num,
         vi_list_id
        );
    COMMIT;
    vo_ret_val := 0;
    RETURN 0;

    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            vo_ret_val := -119;
            RETURN -1;
END INSERT_RB_LIST_OF_BUSES;

FUNCTION UPDATE_NSCP3
    (vi_id IN NON_STOCK_CODED_PARTS.id%TYPE,
     vi_orig_supplier_num IN NON_STOCK_CODED_PARTS.orig_supplier_num%TYPE,
     vi_orig_supplier_name IN NON_STOCK_CODED_PARTS.orig_supplier_name%TYPE,
     vi_detailed_desc IN NON_STOCK_CODED_PARTS.detailed_desc%TYPE,
     vi_keyword IN NON_STOCK_CODED_PARTS.keyword%TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS
BEGIN
    UPDATE
        NON_STOCK_CODED_PARTS
    SET
        orig_supplier_num = vi_orig_supplier_num,
        orig_supplier_name = vi_orig_supplier_name,
        detailed_desc = vi_detailed_desc,
        keyword = vi_keyword
    WHERE
        id = vi_id;
    COMMIT;
    vo_ret_val := 0;
    RETURN 0;

    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            vo_ret_val := -124;
            RETURN -1;
END UPDATE_NSCP3;

FUNCTION AUDIT_INSERT_MODIFY_HISTORY
    (vi_user_name IN AUDIT_MODIFY_HISTORY.user_name%TYPE,
     vi_action IN AUDIT_MODIFY_HISTORY.action%TYPE,
     vi_estimate_number IN AUDIT_MODIFY_HISTORY.estimate_number%TYPE,
     vi_estimate_type IN AUDIT_MODIFY_HISTORY.estimate_type%TYPE,
     vi_ref_1 IN AUDIT_MODIFY_HISTORY.ref_1%TYPE,
     vi_ref_2 IN AUDIT_MODIFY_HISTORY.ref_2%TYPE,
     vi_ref_3 IN AUDIT_MODIFY_HISTORY.ref_3%TYPE,
     vi_ref_4 IN AUDIT_MODIFY_HISTORY.ref_4%TYPE,
     vi_ref_5 IN AUDIT_MODIFY_HISTORY.ref_5%TYPE,
     vi_ref_6 IN AUDIT_MODIFY_HISTORY.ref_6%TYPE,
     vi_ref_7 IN AUDIT_MODIFY_HISTORY.ref_7%TYPE,
     vi_ref_8 IN AUDIT_MODIFY_HISTORY.ref_8%TYPE,
     vi_ref_9 IN AUDIT_MODIFY_HISTORY.ref_9%TYPE,
     vi_ref_10 IN AUDIT_MODIFY_HISTORY.ref_10%TYPE,
     vi_ref_11 IN AUDIT_MODIFY_HISTORY.ref_11%TYPE,
     vi_ref_12 IN AUDIT_MODIFY_HISTORY.ref_12%TYPE,
     vi_ref_13 IN AUDIT_MODIFY_HISTORY.ref_13%TYPE,
     vi_ref_14 IN AUDIT_MODIFY_HISTORY.ref_14%TYPE,
     vi_ref_15 IN AUDIT_MODIFY_HISTORY.ref_15%TYPE,
     vi_ref_16 IN AUDIT_MODIFY_HISTORY.ref_16%TYPE,
     vi_ref_17 IN AUDIT_MODIFY_HISTORY.ref_17%TYPE,
     vi_ref_18 IN AUDIT_MODIFY_HISTORY.ref_18%TYPE,
     vi_ref_19 IN AUDIT_MODIFY_HISTORY.ref_19%TYPE,
     vi_ref_20 IN AUDIT_MODIFY_HISTORY.ref_20%TYPE,
     vi_ref_21 IN AUDIT_MODIFY_HISTORY.ref_21%TYPE,
     vi_ref_22 IN AUDIT_MODIFY_HISTORY.ref_22%TYPE,
     vi_ref_23 IN AUDIT_MODIFY_HISTORY.ref_23%TYPE,
     vi_ref_24 IN AUDIT_MODIFY_HISTORY.ref_24%TYPE,
     vi_ref_25 IN AUDIT_MODIFY_HISTORY.ref_25%TYPE,
     vi_ref_26 IN AUDIT_MODIFY_HISTORY.ref_26%TYPE,
     vi_ref_27 IN AUDIT_MODIFY_HISTORY.ref_27%TYPE,
     vi_ref_28 IN AUDIT_MODIFY_HISTORY.ref_28%TYPE,
     vi_ref_29 IN AUDIT_MODIFY_HISTORY.ref_29%TYPE,
     vi_ref_30 IN AUDIT_MODIFY_HISTORY.ref_30%TYPE,
     vi_ref_31 IN AUDIT_MODIFY_HISTORY.ref_31%TYPE,
     vi_ref_32 IN AUDIT_MODIFY_HISTORY.ref_32%TYPE,
     vi_ref_33 IN AUDIT_MODIFY_HISTORY.ref_33%TYPE,
     vi_ref_34 IN AUDIT_MODIFY_HISTORY.ref_34%TYPE,
     vi_ref_35 IN AUDIT_MODIFY_HISTORY.ref_35%TYPE,
     vi_ref_36 IN AUDIT_MODIFY_HISTORY.ref_36%TYPE,
     vi_ref_37 IN AUDIT_MODIFY_HISTORY.ref_37%TYPE,
     vi_ref_38 IN AUDIT_MODIFY_HISTORY.ref_38%TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS
n_count NUMBER;
id_n NUMBER;
BEGIN
    -- Increase id by 1.
    SELECT
        count(*)
    INTO
        n_count
    FROM
        AUDIT_MODIFY_HISTORY;
    IF n_count <> 0 THEN
        SELECT
            MAX(ID)
        INTO
            id_n
        FROM
            AUDIT_MODIFY_HISTORY;
        id_n := id_n + 1;
    ELSE
        -- Very first record.
        id_n := 1;
    END IF;

    INSERT INTO AUDIT_MODIFY_HISTORY
        (
         id,
         user_name,
         date_changed,
         action, estimate_number, estimate_type,
         ref_1, ref_2, ref_3, ref_4, ref_5, ref_6, ref_7, ref_8, ref_9, ref_10,
         ref_11, ref_12, ref_13, ref_14, ref_15, ref_16, ref_17, ref_18, ref_19, ref_20,
         ref_21, ref_22, ref_23, ref_24, ref_25, ref_26, ref_27, ref_28, ref_29, ref_30,
         ref_31, ref_32, ref_33, ref_34, ref_35, ref_36, ref_37, ref_38
        )
        VALUES
        (
         id_n,
         vi_user_name,
         SYSDATE,
         vi_action, vi_estimate_number, vi_estimate_type,
         vi_ref_1, vi_ref_2, vi_ref_3, vi_ref_4, vi_ref_5, vi_ref_6, vi_ref_7, vi_ref_8, vi_ref_9, vi_ref_10,
         vi_ref_11, vi_ref_12, vi_ref_13, vi_ref_14, vi_ref_15, vi_ref_16, vi_ref_17, vi_ref_18, vi_ref_19, vi_ref_20,
         vi_ref_21, vi_ref_22, vi_ref_23, vi_ref_24, vi_ref_25, vi_ref_26, vi_ref_27, vi_ref_28, vi_ref_29, vi_ref_30,
         vi_ref_31, vi_ref_32, vi_ref_33, vi_ref_34, vi_ref_35, vi_ref_36, vi_ref_37, vi_ref_38
        );
    COMMIT;
    vo_ret_val := 0;
    RETURN 0;

    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
            ROLLBACK;
            vo_ret_val := -125;
            RETURN -1;        WHEN OTHERS THEN
            ROLLBACK;
            vo_ret_val := -126;
            RETURN -1;

END AUDIT_INSERT_MODIFY_HISTORY;

FUNCTION PROPAGATE_NSCP_CHANGES
    (vi_orig_supp_num IN NSC_PARTS_USED.orig_supp_num%TYPE,
     vi_orig_supp_name IN NSC_PARTS_USED.orig_supplier_name%TYPE,
     vi_cost IN NSC_PARTS_USED.cost%TYPE,
     vi_id IN NSC_PARTS_USED.id%TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS
BEGIN
    UPDATE
        NSC_PARTS_USED
    SET
        orig_supp_num = vi_orig_supp_num,
        orig_supplier_name = vi_orig_supp_name,
        cost = vi_cost
    WHERE
        id = vi_id;
    COMMIT;
    vo_ret_val := 0;
    RETURN 0;
    EXCEPTION
        WHEN no_data_found THEN
            ROLLBACK;
		    vo_ret_val := -127;
		    RETURN -1;
        WHEN DUP_VAL_ON_INDEX THEN
            ROLLBACK;
            vo_ret_val := -128;
            RETURN -1;
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -129;
            RETURN -1;
END PROPAGATE_NSCP_CHANGES;

FUNCTION PROPAGATE_RBP_CHANGES
    (vi_cost IN SC_PARTS_USED.reb_part_cost%TYPE,
     vi_reb_number IN SC_PARTS_USED.mms_rebuilt_code%TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS
BEGIN
    UPDATE
        SC_PARTS_USED
    SET
        reb_part_cost = vi_cost
    WHERE
        mms_rebuilt_code = vi_reb_number AND
        rebuilt_part = 'Y';
    COMMIT;
    vo_ret_val := 0;
    RETURN 0;
    EXCEPTION
        WHEN no_data_found THEN
            ROLLBACK;
		    vo_ret_val := -130;
		    RETURN -1;
        WHEN DUP_VAL_ON_INDEX THEN
            ROLLBACK;
            vo_ret_val := -131;
            RETURN -1;
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -132;
            RETURN -1;
END PROPAGATE_RBP_CHANGES;

FUNCTION COPY_VEHICLE_ESTIMATE
    (vi_list_id IN VEHICLE_LIST.vehicle_list_id%TYPE,
     vi_bus_series IN VEHICLE_LIST.veh_series_code%TYPE,
     vi_description IN VEHICLE_LIST.proj_desc%TYPE,
     vi_entered_by IN VEHICLE_LIST.entered_by%TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS
     new_id NUMBER;
     str_old_id VARCHAR2(30);
     str_new_id VARCHAR2(30);
BEGIN
    -- Copy the main information for the vehicle estimate
    INSERT INTO VEHICLE_LIST
    (
        vehicle_list_id,
        veh_series_code,
        proj_desc,
        num_of_vehicles,
        make,
        model,
        year,
        engine,
        transmission,
        differential,
        date_entered,
        entered_by,
        modified_last_by,
        modified_last_date,
        sopnumber
    )
    SELECT
        vehicle_list_seq.NEXTVAL,
        UPPER(NVL(vi_bus_series, ' ')),
        UPPER(NVL(vi_description, ' ')),
        num_of_vehicles,
        make,
        model,
        year,
        engine,
        transmission,
        differential,
        SYSDATE,
        UPPER(NVL(vi_entered_by, ' ')),
        UPPER(NVL(vi_entered_by, ' ')),
        SYSDATE,
        sopnumber
    FROM
        VEHICLE_LIST
    WHERE
        vehicle_list_id = vi_list_id;

    -- Store the new ID of the estimate and convert IDs to string
    SELECT vehicle_list_seq.CURRVAL INTO new_id FROM DUAL;
    str_old_id := CAST(vi_list_id AS VARCHAR2);
    str_new_id := CAST(new_id AS VARCHAR2);

    -- Add the Non Stock Coded Parts used in the estimate
    INSERT INTO NSC_PARTS_USED
    (
        orig_supp_num,
        orig_supplier_name,
        cost_centre,
        percent_usage,
        entered_by,
        date_entered,
        last_modified_by,
        last_modified_date,
        link_code,
        qty_reqd,
        cost,
        link_type,
        corecost,
        id
    )
    SELECT
        orig_supp_num,
        orig_supplier_name,
        cost_centre,
        percent_usage,
        vi_entered_by,
        SYSDATE,
        vi_entered_by,
        SYSDATE,
        str_new_id,
        qty_reqd,
        cost,
        'BUS',
        corecost,
        id
    FROM
        NSC_PARTS_USED
    WHERE
        link_code = str_old_id AND
        link_type = 'BUS';

    -- Add the Stock Coded and Rebuilt Parts used in the estimate
    INSERT INTO SC_PARTS_USED
    (
        mms_stock_code,
        cost_centre,
        percent_usage,
        user_entered,
        date_entered,
        last_modified_by,
        last_modified_date,
        link_code,
        qty_reqd,
        reb_part_cost,
        mms_rebuilt_code,
        rebuilt_part,
        link_type,
        corecost,
        mms_cost,
        oem_cost
    )
    SELECT
        mms_stock_code,
        cost_centre,
        percent_usage,
        vi_entered_by,
        SYSDATE,
        vi_entered_by,
        SYSDATE,
        str_new_id,
        qty_reqd,
        reb_part_cost,
        mms_rebuilt_code,
        rebuilt_part,
        'BUS',
        corecost,
        mms_cost,
        oem_cost
    FROM
        SC_PARTS_USED
    WHERE
        link_code = str_old_id AND
        link_type = 'BUS';

    -- Add Labour to the estimate
    INSERT INTO EMPLOYEE_LABOUR
    (
        labour_defn,
        date_entered,
        link_number,
        typeid,
        costcentre,
        EMPLOYEE_LABOUR.task,
        labour_type,
        usage,
        hrs_reqd,
        adj_hrs,
        date_revised,
        time_addition,
        rebuilt_part_num,
        last_modified_by
    )
    SELECT
        labour_defn,
        SYSDATE,
        str_new_id,
        'BUS',
        costcentre,
        EMPLOYEE_LABOUR.task,
        labour_type,
        usage,
        hrs_reqd,
        adj_hrs,
        SYSDATE,
        time_addition,
        rebuilt_part_num,
        vi_entered_by
    FROM
        EMPLOYEE_LABOUR
    WHERE
        link_number = str_old_id AND
        typeid = 'BUS';

    -- Add OEM Kits to the estimate
    INSERT INTO KITS_USED
    (
        part_number,
        date_entered,
        user_entered,
        last_modified_by,
        last_modified_date,
        cost_centre,
        link_code
    )
    SELECT
        part_number,
        SYSDATE,
        vi_entered_by,
        vi_entered_by,
        SYSDATE,
        cost_centre,
        str_new_id
    FROM
        KITS_USED
    WHERE
        link_code = str_old_id;

    -- Commit the changes and return the ID of the new part
    COMMIT;
    vo_ret_val := new_id;
    RETURN 0;

    -- Handle Exceptions and Rollback the Database if necessary
    EXCEPTION
        WHEN no_data_found THEN
            ROLLBACK;
		    vo_ret_val := -133;
		    RETURN -1;
        WHEN DUP_VAL_ON_INDEX THEN
            ROLLBACK;
            vo_ret_val := -134;
            RETURN -1;
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -135;
            RETURN -1;

END COPY_VEHICLE_ESTIMATE;

FUNCTION INSERT_ALL_LABOUR_SUMMARY
    (vi_labour_type IN ALL_LABOUR_SUMMARY.labour_type%TYPE,
     vi_cost_centre IN ALL_LABOUR_SUMMARY.cost_centre%TYPE,
     vi_task IN ALL_LABOUR_SUMMARY.task%TYPE,
     vi_usage IN ALL_LABOUR_SUMMARY.usage%TYPE,
     vi_time IN ALL_LABOUR_SUMMARY.time%TYPE,
     vi_wrench_time IN ALL_LABOUR_SUMMARY.wrench_time%TYPE,
     vi_rate_per_hour IN ALL_LABOUR_SUMMARY.rate_per_hour%TYPE,
     vi_total_cost IN ALL_LABOUR_SUMMARY.total_cost%TYPE,
     vi_extended_time IN ALL_LABOUR_SUMMARY.extended_time%TYPE,
     vi_estimate_type IN ALL_LABOUR_SUMMARY.estimate_type%TYPE,
     vi_estimate_number IN ALL_LABOUR_SUMMARY.estimate_number%TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS
BEGIN
    INSERT INTO ALL_LABOUR_SUMMARY
    (
        labour_type,
        cost_centre,
        task,
        usage,
        time,
        wrench_time,
        rate_per_hour,
        total_cost,
        extended_time,
        estimate_type,
        estimate_number
    )
    VALUES
    (
        vi_labour_type,
        vi_cost_centre,
        vi_task,
        vi_usage,
        vi_time,
        vi_wrench_time,
        vi_rate_per_hour,
        vi_total_cost,
        vi_extended_time,
        vi_estimate_type,
        vi_estimate_number
    );
    COMMIT;
    vo_ret_val := 0;
    RETURN 0;

    -- Handle Exceptions and Rollback the Database if necessary
    EXCEPTION
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -136;
            RETURN -1;
END INSERT_ALL_LABOUR_SUMMARY;

FUNCTION INSERT_ALL_MATERIAL_SUMMARY
    (vi_cost_centre IN ALL_MATERIAL_SUMMARY.cost_centre%TYPE,
     vi_total_cost IN ALL_MATERIAL_SUMMARY.total_cost%TYPE,
     vi_taxable_cost IN ALL_MATERIAL_SUMMARY.taxable_cost%TYPE,
     vi_rb_reference IN ALL_MATERIAL_SUMMARY.rb_reference%TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS
BEGIN

    INSERT INTO TEMP_MATERIALS_LIST
    (   cost_centre,
        total_cost,
        taxable_cost,
        rb_reference)
    VALUES
    (   vi_cost_centre,
        vi_total_cost,
        vi_taxable_cost,
        vi_rb_reference);


    INSERT INTO ALL_MATERIAL_SUMMARY
    (   cost_centre,
        total_cost,
        taxable_cost,
        rb_reference)
    VALUES
    (   vi_cost_centre,
        vi_total_cost,
        vi_taxable_cost,
        vi_rb_reference);
    COMMIT;
    vo_ret_val := 0;
    RETURN 0;

    -- Handle Exceptions and Rollback the Database if necessary
    EXCEPTION
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -137;
            RETURN -1;
END INSERT_ALL_MATERIAL_SUMMARY;

/*
FUNCTION INSERT_ALL_MATERIAL_SUMMARY
    (vi_cost_centre IN ALL_MATERIAL_SUMMARY.cost_centre%TYPE,
     vi_total_cost IN ALL_MATERIAL_SUMMARY.total_cost%TYPE,
     vi_taxable_cost IN ALL_MATERIAL_SUMMARY.taxable_cost%TYPE,
     vi_rb_reference IN ALL_MATERIAL_SUMMARY.rb_reference%TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS
BEGIN

    INSERT INTO ALL_MATERIAL_SUMMARY
    (   cost_centre,
        total_cost,
        taxable_cost,
        rb_reference)
    VALUES
    (   vi_cost_centre,
        vi_total_cost,
        vi_taxable_cost,
        vi_rb_reference);
    COMMIT;
    vo_ret_val := 0;
    RETURN 0;

    -- Handle Exceptions and Rollback the Database if necessary
    EXCEPTION
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -137;
            RETURN -1;
END INSERT_ALL_MATERIAL_SUMMARY;
*/

FUNCTION UPDATE_BUS_DESCRIPTION
    (vi_list_id IN LIST_OF_BUSES.list_id%TYPE,
	 vi_bus_description IN LIST_OF_BUSES.description%TYPE,
	 vi_new_bus_description IN LIST_OF_BUSES.description%TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS
BEGIN
    -- Update record in the LIST_OF_BUSES table
    UPDATE
        LIST_OF_BUSES
    SET
        description = UPPER(vi_new_bus_description)
    WHERE
        list_id = vi_list_id;

    -- Update record(s) in the VEHICLE_LIST table
    UPDATE
        VEHICLE_LIST
    SET
        veh_series_code = UPPER(vi_new_bus_description)
    WHERE
        veh_series_code = vi_bus_description;
    COMMIT;
    vo_ret_val := 0;
    RETURN 0;

    EXCEPTION
        WHEN no_data_found THEN
            ROLLBACK;
		    vo_ret_val := -138;
		    RETURN -1;
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -139;
            RETURN -1;
END UPDATE_BUS_DESCRIPTION;

FUNCTION INSERT_SUB_KITS
    (vi_kit_part_number IN SUB_KITS.kit_part_number%TYPE,
     vi_part_type IN SUB_KITS.part_type%TYPE,
     vi_supplier_number IN SUB_KITS.supplier_number%TYPE,
     vi_supplier_name IN SUB_KITS.supplier_name%TYPE,
     vi_stock_code IN SUB_KITS.stock_code%TYPE,
     vi_qty IN SUB_KITS.qty%TYPE,
     vi_sub_kit_letter IN SUB_KITS.sub_kit_letter%TYPE,
     vi_description IN SUB_KITS.description%TYPE,
     vi_sequence IN SUB_KITS.sequence%TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS
BEGIN
    INSERT INTO SUB_KITS
    (
        SUB_KITS.kit_part_number,
        SUB_KITS.part_type,
        SUB_KITS.supplier_number,
        SUB_KITS.supplier_name,
        SUB_KITS.stock_code,
        SUB_KITS.qty,
        SUB_KITS.sub_kit_letter,
        SUB_KITS.description,
        SUB_KITS.sequence
    )
    VALUES
    (
        vi_kit_part_number,
        vi_part_type,
        vi_supplier_number,
        vi_supplier_name,
        vi_stock_code,
        vi_qty,
        vi_sub_kit_letter,
        vi_description,
        vi_sequence
    );
    COMMIT;
    vo_ret_val := 0;
    RETURN 0;

    EXCEPTION
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -140;
            RETURN -1;
END INSERT_SUB_KITS;

FUNCTION UPDATE_SUB_KITS
    (vi_kit_part_number IN SUB_KITS.kit_part_number%TYPE,
     vi_supplier_number IN SUB_KITS.supplier_number%TYPE,
     vi_supplier_name IN SUB_KITS.supplier_name%TYPE,
     vi_stock_code IN SUB_KITS.stock_code%TYPE,
     vi_qty IN SUB_KITS.qty%TYPE,
     vi_description IN SUB_KITS.description%TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS
BEGIN
    UPDATE
        SUB_KITS
    SET
        supplier_number = vi_supplier_number,
        supplier_name = vi_supplier_name,
        stock_code = vi_stock_code,
        qty = vi_qty,
        description = vi_description
    WHERE
        kit_part_number = vi_kit_part_number AND
        supplier_number = vi_supplier_number AND
        supplier_name = vi_supplier_name AND
        stock_code = vi_stock_code;

    COMMIT;
    vo_ret_val := 0;
    RETURN 0;

    EXCEPTION
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -141;
            RETURN -1;
END UPDATE_SUB_KITS;

FUNCTION UPDATE_SUB_KITS1
    (vi_supplier_number IN SUB_KITS.supplier_number%TYPE,
     vi_supplier_name IN SUB_KITS.supplier_name%TYPE,
     vi_description IN SUB_KITS.description%TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS
BEGIN
    UPDATE
        SUB_KITS
    SET
        supplier_number = vi_supplier_number,
        supplier_name = vi_supplier_name,
        description = vi_description
    WHERE
        supplier_number = vi_supplier_number AND
        supplier_name = vi_supplier_name;

    COMMIT;
    vo_ret_val := 0;
    RETURN 0;

    EXCEPTION
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -142;
            RETURN -1;
END UPDATE_SUB_KITS1;

FUNCTION UPDATE_OVERHEAD_FRINGE
    (vi_use_overhead_fringe IN USERS.use_overhead_fringe%TYPE,
     vi_username IN USERS.username%TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS
BEGIN
    UPDATE
        USERS
    SET
        use_overhead_fringe = vi_use_overhead_fringe
    WHERE
        username =vi_username;
    COMMIT;
    vo_ret_val := 0;
    RETURN 0;

    EXCEPTION
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -143;
            RETURN -1;
END UPDATE_OVERHEAD_FRINGE;

FUNCTION UPDATE_NSCP_CLEAN_1
    (vi_id IN NON_STOCK_CODED_PARTS.id%TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS
BEGIN
    -- Current stored procedure is used for cleaning the NON_STOCK_CODED_PARTS and
    -- NSC_PARTS_USED tables only. Please do not use it somewhere else.
    INSERT INTO NON_STOCK_CODED_PARTS_TEMP SELECT * FROM NON_STOCK_CODED_PARTS WHERE id = vi_id;
    DELETE FROM NON_STOCK_CODED_PARTS WHERE id = vi_id;
    COMMIT;
    vo_ret_val := 0;
    RETURN 0;

    EXCEPTION
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -144;
            RETURN -1;
END UPDATE_NSCP_CLEAN_1;

FUNCTION UPDATE_NSCP_CLEAN_2
    (vo_ret_val OUT NUMBER) RETURN NUMBER IS
BEGIN
    -- Current stored procedure is used for cleaning the NON_STOCK_CODED_PARTS and
    -- NSC_PARTS_USED tables only. Please do not use it somewhere else.
    DELETE FROM NON_STOCK_CODED_PARTS;
    INSERT INTO NON_STOCK_CODED_PARTS SELECT * FROM NON_STOCK_CODED_PARTS_TEMP;
    DELETE FROM NON_STOCK_CODED_PARTS_TEMP;
    COMMIT;
    vo_ret_val := 0;
    RETURN 0;

    EXCEPTION
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -145;
            RETURN -1;
END UPDATE_NSCP_CLEAN_2;

-- new function for request #232922
FUNCTION COPY_MB_ESTIMATE
    (vi_mb_number IN MB_LIST.mb_number%TYPE,
     vi_new_mb_number IN MB_LIST.mb_number%TYPE,
     vi_keyword IN MB_LIST.keyword%TYPE,
     vi_rebuild_number IN MB_LIST.rebuild_code%TYPE,
     vi_entered_by IN NSC_PARTS_USED.entered_by%TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS

BEGIN
    -- Copy the main information for the MB estimate
    INSERT INTO MB_LIST
    (
         mb_number,
         keyword,
         description,
         bus_type,
         num_bus_comp,
         vendor_part_num,
         buy_code,
         rebuild_code,
         core_code,
         annual_usage,
         bench_number,
         sample_provided,
         recommendation,
         reman_cost,
         external_cost,
         buy_new_cost,
         internal_cost,
         sop_number,
         core_cost,
         job_number,
         date_opened,
         readmanualnewprice
    )
    SELECT
         NVL(vi_new_mb_number, ' '),
         UPPER(NVL(vi_keyword, ' ')),
         description,
         bus_type,
         num_bus_comp,
         vendor_part_num,
         buy_code,
         UPPER(NVL(vi_rebuild_number, ' ')),
         core_code,
         annual_usage,
         bench_number,
         sample_provided,
         recommendation,
         reman_cost,
         external_cost,
         buy_new_cost,
         internal_cost,
         sop_number,
         core_cost,
         job_number,
         sysdate,
         readmanualnewprice
    FROM
        MB_LIST
    WHERE
        mb_number = vi_mb_number;

    -- Add the Non Stock Coded Parts used in the estimate
    INSERT INTO NSC_PARTS_USED
    (
        orig_supp_num,
        orig_supplier_name,
        cost_centre,
        percent_usage,
        entered_by,
        date_entered,
        last_modified_by,
        last_modified_date,
        link_code,
        qty_reqd,
        cost,
        link_type,
        corecost,
        id
    )
    SELECT
        orig_supp_num,
        orig_supplier_name,
        cost_centre,
        percent_usage,
        UPPER(NVL(vi_entered_by, ' ')),
        SYSDATE,
        UPPER(NVL(vi_entered_by, ' ')),
        SYSDATE,
        NVL(vi_new_mb_number, ' '),
        qty_reqd,
        cost,
        'MB',
        corecost,
        id
    FROM
        NSC_PARTS_USED
    WHERE
        link_code = vi_mb_number AND
        link_type = 'MB';

    -- Add the Stock Coded and Rebuilt Parts used in the estimate
    INSERT INTO SC_PARTS_USED
    (
        mms_stock_code,
        cost_centre,
        percent_usage,
        user_entered,
        date_entered,
        last_modified_by,
        last_modified_date,
        link_code,
        qty_reqd,
        reb_part_cost,
        mms_rebuilt_code,
        rebuilt_part,
        link_type,
        corecost,
        mms_cost,
        oem_cost
    )
    SELECT
        mms_stock_code,
        cost_centre,
        percent_usage,
        UPPER(NVL(vi_entered_by, ' ')),
        SYSDATE,
        UPPER(NVL(vi_entered_by, ' ')),
        SYSDATE,
        NVL(vi_new_mb_number, ' '),
        qty_reqd,
        reb_part_cost,
        mms_rebuilt_code,
        rebuilt_part,
        'MB',
        corecost,
        mms_cost,
        oem_cost
    FROM
        SC_PARTS_USED
    WHERE
        link_code = vi_mb_number AND
        link_type = 'MB';

    -- Add Labour to the estimate
    INSERT INTO EMPLOYEE_LABOUR
    (
        labour_defn,
        date_entered,
        link_number,
        typeid,
        costcentre,
        EMPLOYEE_LABOUR.task,
        labour_type,
        usage,
        hrs_reqd,
        adj_hrs,
        date_revised,
        time_addition,
        rebuilt_part_num,
        last_modified_by
    )
    SELECT
        labour_defn,
        SYSDATE,
        NVL(vi_new_mb_number, ' '),
        'MB',
        costcentre,
        EMPLOYEE_LABOUR.task,
        labour_type,
        usage,
        hrs_reqd,
        adj_hrs,
        SYSDATE,
        time_addition,
        rebuilt_part_num,
        UPPER(NVL(vi_entered_by, ' '))
    FROM
        EMPLOYEE_LABOUR
    WHERE
        link_number = vi_mb_number AND
        typeid = 'MB';
        
    -- Add Bus List to the estimate
    INSERT INTO MB_LIST_OF_BUSES
    (
         mb_number,
         list_id
    )
    SELECT
        NVL(vi_new_mb_number, ' '),
        list_id
    FROM
        MB_LIST_OF_BUSES
    WHERE
        mb_number = vi_mb_number;

    -- Commit the changes and return the ID of the new part
    COMMIT;
    vo_ret_val := 0;
    RETURN 0;

    -- Handle Exceptions and Rollback the Database if necessary
    EXCEPTION
        WHEN no_data_found THEN
            ROLLBACK;
		    vo_ret_val := -146;
		    RETURN -1;
        WHEN DUP_VAL_ON_INDEX THEN
            ROLLBACK;
            vo_ret_val := -147;
            RETURN -1;
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -148;
            RETURN -1;

END COPY_MB_ESTIMATE;

-- new function for request #232922
FUNCTION COPY_RB_ESTIMATE
    (vi_rb_number IN RB_MASTERLIST.rebuilt_stock_num%TYPE,
     vi_new_rb_number IN RB_MASTERLIST.rebuilt_stock_num%TYPE,
     vi_keyword IN RB_MASTERLIST.keyword%TYPE,
     vi_mms_stock_code IN RB_MASTERLIST.mms_stock_code%TYPE,
     vi_entered_by IN NSC_PARTS_USED.entered_by%TYPE,
     vo_ret_val OUT NUMBER)RETURN NUMBER IS

BEGIN
    -- Copy the main information for the RB estimate
    INSERT INTO RB_MASTERLIST
    (
         last_modified_by,
         date_modified,
         job_number,
         core_charge,
         rebuilt_stock_num,
         core_part_num,
         keyword,
         detailed_desc,
         mms_stock_code,
         estimated_cost,
         sop_number, 
         buy_new_cost,
         reman_cost,
         external_cost,
         active
    )
    SELECT
         UPPER(NVL(vi_entered_by, ' ')),
         SYSDATE,
         job_number,
         core_charge,
         NVL(vi_new_rb_number, ' '),
         core_part_num,
         UPPER(NVL(vi_keyword, ' ')),
         detailed_desc,
         NVL(vi_mms_stock_code, ' '),
         estimated_cost,
         sop_number, 
         buy_new_cost,
         reman_cost,
         external_cost,
         active
    FROM
        RB_MASTERLIST
    WHERE
        rebuilt_stock_num = vi_rb_number;

    -- Add the Non Stock Coded Parts used in the estimate
    INSERT INTO NSC_PARTS_USED
    (
        orig_supp_num,
        orig_supplier_name,
        cost_centre,
        percent_usage,
        entered_by,
        date_entered,
        last_modified_by,
        last_modified_date,
        link_code,
        qty_reqd,
        cost,
        link_type,
        corecost,
        id
    )
    SELECT
        orig_supp_num,
        orig_supplier_name,
        cost_centre,
        percent_usage,
        UPPER(NVL(vi_entered_by, ' ')),
        SYSDATE,
        UPPER(NVL(vi_entered_by, ' ')),
        SYSDATE,
        NVL(vi_new_rb_number, ' '),
        qty_reqd,
        cost,
        'RB',
        corecost,
        id
    FROM
        NSC_PARTS_USED
    WHERE
        link_code = vi_rb_number AND
        link_type = 'RB';

    -- Add the Stock Coded and Rebuilt Parts used in the estimate
    INSERT INTO SC_PARTS_USED
    (
        mms_stock_code,
        cost_centre,
        percent_usage,
        user_entered,
        date_entered,
        last_modified_by,
        last_modified_date,
        link_code,
        qty_reqd,
        reb_part_cost,
        mms_rebuilt_code,
        rebuilt_part,
        link_type,
        corecost,
        mms_cost,
        oem_cost
    )
    SELECT
        mms_stock_code,
        cost_centre,
        percent_usage,
        UPPER(NVL(vi_entered_by, ' ')),
        SYSDATE,
        UPPER(NVL(vi_entered_by, ' ')),
        SYSDATE,
        NVL(vi_new_rb_number, ' '),
        qty_reqd,
        reb_part_cost,
        mms_rebuilt_code,
        rebuilt_part,
        'RB',
        corecost,
        mms_cost,
        oem_cost
    FROM
        SC_PARTS_USED
    WHERE
        link_code = vi_rb_number AND
        link_type = 'RB';

    -- Add Labour to the estimate
    INSERT INTO EMPLOYEE_LABOUR
    (
        labour_defn,
        date_entered,
        link_number,
        typeid,
        costcentre,
        EMPLOYEE_LABOUR.task,
        labour_type,
        usage,
        hrs_reqd,
        adj_hrs,
        date_revised,
        time_addition,
        rebuilt_part_num,
        last_modified_by
    )
    SELECT
        labour_defn,
        SYSDATE,
        NVL(vi_new_rb_number, ' '),
        'RB',
        costcentre,
        EMPLOYEE_LABOUR.task,
        labour_type,
        usage,
        hrs_reqd,
        adj_hrs,
        SYSDATE,
        time_addition,
        rebuilt_part_num,
        UPPER(NVL(vi_entered_by, ' '))
    FROM
        EMPLOYEE_LABOUR
    WHERE
        link_number = vi_rb_number AND
        typeid = 'RB';
        
    -- Add Bus List to the estimate
    INSERT INTO RB_LIST_OF_BUSES
    (
         rebuilt_stock_num,
         list_id
    )
    SELECT
        NVL(vi_new_rb_number, ' '),
        list_id
    FROM
        RB_LIST_OF_BUSES
    WHERE
        rebuilt_stock_num= vi_rb_number;

    -- Commit the changes and return the ID of the new part
    COMMIT;
    vo_ret_val := 0;
    RETURN 0;

    -- Handle Exceptions and Rollback the Database if necessary
    EXCEPTION
        WHEN no_data_found THEN
            ROLLBACK;
		    vo_ret_val := -149;
		    RETURN -1;
        WHEN DUP_VAL_ON_INDEX THEN
            ROLLBACK;
            vo_ret_val := -150;
            RETURN -1;
        WHEN others THEN
            ROLLBACK;
            vo_ret_val := -151;
            RETURN -1;

END COPY_RB_ESTIMATE;

END CES_UPDATE ;
modfiles :
modDBHelper.bas :
Attribute VB_Name = "modDBHelper"
Option Explicit

Private m_str_Msg As String
Private m_obj_clsDb As clsDB

'This function will add a new row to the ERROR_LOG table:

' - g_str_UserName   into "USER_NAME" column
' - str_ModuleName   into "MODULE_NAME" column
' - str_FunctionName into "FUNCTION_NAME" column
' - l_LineNumber     into "LINE_NUM" column
' - l_ErrNum         into "ERR_NUM" column
' - str_ErrDesc      into "ERROR DESC" column
' - Now()            into "DATE_TIME" column
' - field "LOG NUMBER" will be incremented automatically.

Public Sub LogErrorToDB(ByVal str_ModuleName As String, _
                        ByVal str_FunctionName As String, _
                        ByVal l_LineNumber As Long)
    Dim l_RetVal As Long
    Dim l_ErrNum As Long
    Dim str_ErrDesc As String
    
    'Get error number and error description here!!!
    l_ErrNum = Err.Number
    str_ErrDesc = Err.Description
    
    
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Call m_obj_clsDb.RunFNReturnLong("CES_UPDATE.ADD_ERROR_LOG", _
                        l_RetVal, _
                        Array("vi_user_name", adChar, 25, g_str_UserName), _
                        Array("vi_date_time", adDate, 10, Now()), _
                        Array("vi_module_name", adChar, 100, str_ModuleName), _
                        Array("vi_function_name", adChar, 100, str_FunctionName), _
                        Array("vi_line_num", adInteger, 10, l_LineNumber), _
                        Array("vi_error_desc", adChar, 2000, str_ErrDesc), _
                        Array("vi_err_num", adInteger, 10, l_ErrNum))
    Set m_obj_clsDb = Nothing
    'Clean an Err object.
    Err.Clear
    m_str_Msg = "Application error. Take a screen-shot and contact Administrator. "
    m_str_Msg = m_str_Msg + "Date = " + CStr(Now()) + ". User Name = " + g_str_UserName
    MsgBox m_str_Msg
    
    Exit Sub
Error_Handler:
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
    m_str_Msg = "Logging error to the database failed. Please report this message to "
    m_str_Msg = m_str_Msg + "Administrator. Now program will be terminated."
    MsgBox m_str_Msg, vbCritical + vbOKOnly
    End
End Sub

Public Function AddEngines(ByVal str_SPName As String, _
                           ByRef l_RetVal As Long, _
                           ByVal str_Engine As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    AddEngines = m_obj_clsDb.RunFNReturnLong(str_SPName, _
                                              l_RetVal, _
                                              Array("@MAKE", adChar, 25, str_Engine))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "AddEngines", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function AddTransmissions(ByVal str_SPName As String, _
                                 ByRef l_RetVal As Long, _
                                 ByVal str_Transmission As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    AddTransmissions = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                                           Array("@MAKE", adChar, 25, str_Transmission))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "AddTransmissions", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function AddDifferentials(ByVal str_SPName As String, _
                                 ByRef l_RetVal As Long, _
                                 ByVal str_Differential As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    AddDifferentials = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                                           Array("@MAKE", adChar, 25, str_Differential))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "AddDifferentials", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateEngines(ByVal str_SPName As String, _
                              ByRef l_RetVal As Long, _
                              ByVal str_Engine As String, _
                              ByVal str_PartID As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateEngines = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                                        Array("@NAME", adChar, 25, str_Engine), _
                                        Array("@PARTID", adChar, 50, str_PartID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateEngines", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateTransmissions(ByVal str_SPName As String, _
                                    ByRef l_RetVal As Long, _
                                    ByVal str_Transmission As String, _
                                    ByVal str_PartID As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateTransmissions = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                                        Array("@NAME", adChar, 25, str_Transmission), _
                                        Array("@PARTID", adChar, 50, str_PartID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateTransmissions", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateDiffentials(ByVal str_SPName As String, _
                                  ByRef l_RetVal As Long, _
                                  ByVal str_Differential As String, _
                                  ByVal str_PartID As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateDiffentials = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                                        Array("@NAME", adChar, 25, str_Differential), _
                                        Array("@PARTID", adChar, 50, str_PartID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateDiffentials", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteMBLabour(ByVal str_SPName As String, _
                               ByRef l_RetVal As Long, _
                               ByVal str_PartID As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteMBLabour = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                                        Array("@IDPART", adChar, 50, str_PartID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteMBLabour", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteNSCP(ByVal str_SPName As String, _
                           ByRef l_RetVal As Long, _
                           ByVal str_PartID As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteNSCP = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                                        Array("@IDPART", adChar, 50, str_PartID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteNSCP", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function AddRBEstimate(ByVal str_SPName As String, _
                              ByRef l_RetVal As Long, _
                              ByVal str_MOD As String, _
                              ByVal str_JobNum As String, _
                              ByVal str_CoreCost As String, _
                              ByVal str_StockCode As String, _
                              ByVal str_CoreCode As String, _
                              ByVal str_Keyword As String, _
                              ByVal str_Desc As String, _
                              ByVal str_NewCode As String, _
                              ByVal str_SOPNumber As String, _
                              ByVal str_BuyCost As String, _
                              ByVal str_RemanufacturedCost As String, _
                              ByVal str_ExternalCost As String, _
                              ByVal int_optActive As Integer) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    AddRBEstimate = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@MOD", adChar, 50, str_MOD), _
                            Array("@JOBNUM", adChar, 25, str_JobNum), _
                            Array("@CORECH", adChar, 25, str_CoreCost), _
                            Array("@REB", adChar, 25, str_StockCode), _
                            Array("@CORE", adChar, 25, str_CoreCode), _
                            Array("@KEY", adChar, 250, str_Keyword), _
                            Array("@DETDESC", adChar, 250, str_Desc), _
                            Array("@MMS", adChar, 25, str_NewCode), _
                            Array("@SOPNumber", adChar, 25, str_SOPNumber), _
                            Array("@BuyCost", adChar, 25, str_BuyCost), _
                            Array("@RemanCost", adChar, 25, str_RemanufacturedCost), _
                            Array("@ExternalCost", adChar, 25, str_ExternalCost), _
                            Array("@ExternalCost", adInteger, 2, int_optActive))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "AddRBEstimate", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateRBEstimate(ByVal str_SPName As String, _
                                 ByRef l_RetVal As Long, _
                                 ByVal str_MOD As String, _
                                 ByVal str_JobNum As String, _
                                 ByVal str_CoreChange As String, _
                                 ByVal str_StockCode As String, _
                                 ByVal str_CoreCode As String, _
                                 ByVal str_Keyword As String, _
                                 ByVal str_Desc As String, _
                                 ByVal str_NewCode As String, _
                                 ByVal str_SOPNumber As String, _
                                 ByVal str_BuyCost As String, _
                                 ByVal str_RemanufacturedCost As String, _
                                 ByVal str_ExternalCost As String, _
                                 ByVal int_active As Integer) As Long
    On Error GoTo Error_Handler
 
    Set m_obj_clsDb = New clsDB
    UpdateRBEstimate = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@MOD", adChar, 50, str_MOD), _
                            Array("@JOBNUM", adChar, 25, str_JobNum), _
                            Array("@CORECH", adChar, 25, str_CoreChange), _
                            Array("@REB", adChar, 30, str_StockCode), _
                            Array("@CORE", adChar, 30, str_CoreCode), _
                            Array("@KEY", adChar, 250, str_Keyword), _
                            Array("@DETDESC", adChar, 250, str_Desc), _
                            Array("@MMS", adChar, 30, str_NewCode), _
                            Array("@SOPNumber", adChar, 30, str_SOPNumber), _
                            Array("@BuyCost", adChar, 25, str_BuyCost), _
                            Array("@RemanCost", adChar, 25, str_RemanufacturedCost), _
                            Array("@ExternalCost", adChar, 25, str_ExternalCost), _
                            Array("@Active", adInteger, 2, int_active))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateRBEstimate", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function AddVehicleEstimate(ByVal str_SPName As String, _
                                   ByRef l_RetVal As Long, _
                                   ByVal str_VehSeries As String, _
                                   ByVal str_VehDesc As String, _
                                   ByVal str_BusNum As String, _
                                   ByVal str_Make As String, _
                                   ByVal str_Model As String, _
                                   ByVal str_Year As String, _
                                   ByVal str_Engine As String, _
                                   ByVal str_Trans As String, _
                                   ByVal str_Diff As String, _
                                   ByVal str_UserName As String, _
                                   ByVal str_SOPNumber As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    AddVehicleEstimate = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@SERIES", adChar, 75, str_VehSeries), _
                            Array("@DESC", adChar, 200, str_VehDesc), _
                            Array("@NUMVEH", adChar, 10, str_BusNum), _
                            Array("@MAKE", adChar, 25, str_Make), _
                            Array("@MODEL", adChar, 25, str_Model), _
                            Array("@YEAR", adChar, 4, str_Year), _
                            Array("@ENGINE", adChar, 25, str_Engine), _
                            Array("@TRANS", adChar, 25, str_Trans), _
                            Array("@DIFF", adChar, 25, str_Diff), _
                            Array("@ENTERED_BY", adChar, 25, str_UserName), _
                            Array("@SOPNUMBER", adChar, 30, str_SOPNumber))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "AddVehicleEstimate", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateVehicleEstimate(ByVal str_SPName As String, _
                                      ByRef l_RetVal As Long, _
                                      ByVal str_VehSeries As String, _
                                      ByVal str_VehDesc As String, _
                                      ByVal str_BusNum As String, _
                                      ByVal str_Make As String, _
                                      ByVal str_Model As String, _
                                      ByVal str_Year As String, _
                                      ByVal str_Engine As String, _
                                      ByVal str_Trans As String, _
                                      ByVal str_Diff As String, _
                                      ByVal str_UserName As String, _
                                      ByVal l_VehicleListID As Long, _
                                      ByVal str_SOPNumber As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateVehicleEstimate = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                        Array("@SERIES", adChar, 75, str_VehSeries), _
                        Array("@DESC", adChar, 200, str_VehDesc), _
                        Array("@NUMVEH", adChar, 10, str_BusNum), _
                        Array("@MAKE", adChar, 25, str_Make), _
                        Array("@MODEL", adChar, 25, str_Model), _
                        Array("@YEAR", adChar, 4, str_Year), _
                        Array("@ENGINE", adChar, 25, str_Engine), _
                        Array("@TRANS", adChar, 25, str_Trans), _
                        Array("@DIFF", adChar, 25, str_Diff), _
                        Array("@ENTERED_BY", adChar, 25, str_UserName), _
                        Array("vi_vehicle_list_id", adInteger, 10, l_VehicleListID), _
                        Array("SOPNUMBER", adChar, 30, str_SOPNumber))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateVehicleEstimate", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteNSCPUsed(ByVal str_SPName As String, _
                               ByRef l_RetVal As Long, _
                               ByVal str_PartID As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteNSCPUsed = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                                        Array("@IDPART", adChar, 50, str_PartID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteNSCPUsed", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteSCPUsed(ByVal str_SPName As String, _
                              ByRef l_RetVal As Long, _
                              ByVal str_PartID As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteSCPUsed = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                                        Array("@IDPART", adChar, 50, str_PartID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteSCPUsed", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function AddErrorLog(ByVal str_SPName As String, _
                            ByRef l_RetVal As Long, _
                            ByVal str_FunctionName As String, _
                            ByVal str_UserName As String, _
                            ByVal str_ErrMsg As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    AddErrorLog = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@ERROR_FUNCTION", adChar, 50, str_FunctionName), _
                            Array("@USERNAME", adChar, 25, str_UserName), _
                            Array("@ERROR_DESC", adChar, 200, str_ErrMsg))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "AddErrorLog", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function AddNSCP(ByVal str_SPName As String, _
                        ByRef l_RetVal As Long, _
                        ByVal str_SupNumber As String, _
                        ByVal str_SupName As String, _
                        ByVal str_OEMPartCost As String, _
                        ByVal str_PartDesc As String, _
                        ByVal str_Keyword As String, _
                        ByVal str_EnteredBy As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    AddNSCP = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_orig_supplier_num", adChar, 50, str_SupNumber), _
                            Array("vi_orig_supplier_name", adChar, 50, str_SupName), _
                            Array("vi_oem_part_cost", adNumeric, 10, CDbl(str_OEMPartCost)), _
                            Array("vi_detailed_desc", adChar, 500, str_PartDesc), _
                            Array("vi_keyword", adChar, 50, str_Keyword), _
                            Array("vi_entered_by", adChar, 25, str_EnteredBy))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "AddNSCP", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateNSCP(ByVal str_SPName As String, _
                           ByRef l_RetVal As Long, _
                           ByVal str_SupNumber As String, _
                           ByVal str_SupName As String, _
                           ByVal str_Cost As String, _
                           ByVal str_PartDesc As String, _
                           ByVal str_Keyword As String, _
                           ByVal str_EnteredBy As String, _
                           ByVal str_RowID As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateNSCP = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@SUPPNUM", adChar, 50, str_SupNumber), _
                            Array("@SUPNAME", adChar, 50, str_SupName), _
                            Array("@COST", adNumeric, 10, CDbl(str_Cost)), _
                            Array("@DESC", adChar, 500, str_PartDesc), _
                            Array("@KEYWORD", adChar, 50, str_Keyword), _
                            Array("@ENTERED_BY", adChar, 25, str_EnteredBy), _
                            Array("@id", adChar, 25, str_RowID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateNSCP", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateNSCP2(ByVal str_SPName As String, _
                           ByRef l_RetVal As Long, _
                           ByVal str_ID As Long, _
                           ByVal str_RowID As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateNSCP2 = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@ID", adInteger, 10, str_ID), _
                            Array("@rowid", adChar, 25, str_RowID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateNSCP2", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteVehType(ByVal str_SPName As String, _
                              ByRef l_RetVal As Long, _
                              ByVal str_PartID As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteVehType = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@IDPART", adChar, 50, str_PartID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteVehType", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function AddVehTypes(ByVal str_SPName As String, _
                            ByRef l_RetVal As Long, _
                            ByVal str_Make As String, _
                            ByVal str_Model As String, _
                            ByVal str_Year As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    AddVehTypes = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@MAKE", adChar, 50, str_Make), _
                            Array("@MODEL", adChar, 50, str_Model), _
                            Array("@YEAR", adChar, 4, str_Year))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "AddVehTypes", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateVehTypes(ByVal str_SPName As String, _
                               ByRef l_RetVal As Long, _
                               ByVal str_Make As String, _
                               ByVal str_Model As String, _
                               ByVal str_Year As String, _
                               ByVal str_VehID As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateVehTypes = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@MAKE", adChar, 50, str_Make), _
                            Array("@MODEL", adChar, 50, str_Model), _
                            Array("@YEAR", adChar, 10, str_Year), _
                            Array("@VEHID", adChar, 25, str_VehID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateVehTypes", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteDiff(ByVal str_SPName As String, _
                           ByRef l_RetVal As Long, _
                           ByVal str_PartID As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteDiff = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@IDPART", adChar, 50, str_PartID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteDiff", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteEngine(ByVal str_SPName As String, _
                             ByRef l_RetVal As Long, _
                             ByVal str_PartID As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteEngine = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@IDPART", adChar, 50, str_PartID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteEngine", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteTrans(ByVal str_SPName As String, _
                            ByRef l_RetVal As Long, _
                            ByVal str_PartID As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteTrans = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@IDPART", adChar, 50, str_PartID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteTrans", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function AddMB(ByVal str_SPName As String, _
                      ByRef l_RetVal As Long, _
                      ByVal str_BenchNumber As String, _
                      ByVal str_BusType As String, _
                      ByVal str_BuyCode As String, _
                      ByVal str_BuyNewCost As String, _
                      ByVal str_CoreCode As String, _
                      ByVal str_Description As String, _
                      ByVal str_ExternalRebuilt As String, _
                      ByVal str_Keyword As String, _
                      ByVal str_MakeBuyNo As String, _
                      ByVal str_NumberOfBus As String, _
                      ByVal str_ProjectedAnnualUsage As String, _
                      ByVal str_RebuildCode As String, _
                      ByVal str_Remanufactured As String, _
                      ByVal str_OptRecommend As String, _
                      ByVal str_OptSample As String, _
                      ByVal str_VendorPartNo As String, _
                      ByVal str_InternalRebuilt As String, _
                      ByVal str_SOP As String, _
                      ByVal str_CoreCost As String, _
                      ByVal str_JobNumber As String, _
                      ByVal int_NewJobUseManualEntry As Integer) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    AddMB = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@BENCH", adChar, 25, str_BenchNumber), _
                            Array("@BUSTYPE", adChar, 50, str_BusType), _
                            Array("@BUYCODE", adChar, 25, str_BuyCode), _
                            Array("@BUYCODENEW", adChar, 25, str_BuyNewCost), _
                            Array("@CORECODE", adChar, 25, str_CoreCode), _
                            Array("@DESCRIPTION", adChar, 50, str_Description), _
                            Array("@EXTREBUILT", adChar, 25, str_ExternalRebuilt), _
                            Array("@KEYWORD", adChar, 50, str_Keyword), _
                            Array("@MBNUMBER", adChar, 25, str_MakeBuyNo), _
                            Array("@NUMOFBUS", adChar, 10, str_NumberOfBus), _
                            Array("@PROJECTED", adChar, 25, str_ProjectedAnnualUsage), _
                            Array("@REBUILDCODE", adChar, 25, str_RebuildCode), _
                            Array("@REMANUFACTURED", adChar, 25, str_Remanufactured), _
                            Array("@RECOMMEND", adChar, 1, str_OptRecommend), _
                            Array("@SAMPLE", adChar, 1, str_OptSample), _
                            Array("@VENDORPARTNUM", adChar, 25, str_VendorPartNo), _
                            Array("@INTERNALCOST", adChar, 25, str_InternalRebuilt), _
                            Array("@SOPNUM", adChar, 25, str_SOP), _
                            Array("vi_core_cost", adChar, 25, str_CoreCost), _
                            Array("vi_job_number", adChar, 25, str_JobNumber), _
                            Array("vi_manualNewPrice", adInteger, 8, int_NewJobUseManualEntry))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "AddMB", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateMBList(ByVal str_SPName As String, _
                             ByRef l_RetVal As Long, _
                             ByVal str_BenchNumber As String, _
                             ByVal str_BusType As String, _
                             ByVal str_BuyCode As String, _
                             ByVal str_BuyNewCost As String, _
                             ByVal str_CoreCode As String, _
                             ByVal str_Description As String, _
                             ByVal str_ExternalCost As String, _
                             ByVal str_Keyword As String, _
                             ByVal str_MBNumber As String, _
                             ByVal str_NumBusComp As String, _
                             ByVal str_AnnualUsage As String, _
                             ByVal str_RebuildCode As String, _
                             ByVal str_RemanCost As String, _
                             ByVal str_OptRecommend As String, _
                             ByVal str_OptSample As String, _
                             ByVal str_InternalCost As String, _
                             ByVal str_VendorPartNum As String, _
                             ByVal str_SOPNum As String, _
                             ByVal str_CoreCost As String, _
                             ByVal str_JobNumber As String, _
                             ByVal int_NewJobUseManualEntry As Integer, _
                             ByVal str_RowID As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateMBList = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_bench_number", adChar, 25, str_BenchNumber), _
                            Array("vi_bus_type", adChar, 50, str_BusType), _
                            Array("vi_buy_code", adChar, 25, str_BuyCode), _
                            Array("vi_buy_new_cost", adChar, 25, str_BuyNewCost), _
                            Array("vi_core_code", adChar, 25, str_CoreCode), _
                            Array("vi_description", adChar, 50, str_Description), _
                            Array("vi_external_cost", adChar, 25, str_ExternalCost), _
                            Array("vi_keyword", adChar, 50, str_Keyword), _
                            Array("vi_mb_number", adChar, 25, str_MBNumber), _
                            Array("vi_num_bus_comp", adChar, 10, str_NumBusComp), _
                            Array("vi_annual_usage", adChar, 25, str_AnnualUsage), _
                            Array("vi_rebuild_code", adChar, 25, str_RebuildCode), _
                            Array("vi_reman_cost", adChar, 25, str_RemanCost), _
                            Array("vi_recommendation", adChar, 1, str_OptRecommend), _
                            Array("vi_sample_provided", adChar, 1, str_OptSample), _
                            Array("vi_internal_cost", adChar, 25, str_InternalCost), _
                            Array("vi_vendor_part_num", adChar, 25, str_VendorPartNum), _
                            Array("vi_sop_num", adChar, 25, str_SOPNum), _
                            Array("vi_core_cost", adChar, 25, str_CoreCost), _
                            Array("vi_job_number", adChar, 25, str_JobNumber), _
                            Array("vi_manualNewPrice", adInteger, 8, int_NewJobUseManualEntry), _
                            Array("vi_partid", adChar, 50, str_RowID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateMBList", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteMB(ByVal str_SPName As String, _
                         ByRef l_RetVal As Long, _
                         ByVal str_MBNumber As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteMB = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_mb_number", adChar, 25, str_MBNumber))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteMB", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteVehicleEstimate(ByVal str_SPName As String, _
                                      ByRef l_RetVal As Long, _
                                      ByVal str_PartID As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteVehicleEstimate = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@IDPART", adChar, 50, str_PartID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteVehicleEstimate", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function TransferPartsUsed(ByVal str_SPName As String, _
                                  ByRef l_RetVal As Long, _
                                  ByVal str_MMSStockCode As String, _
                                  ByVal cur_MMSCost As Currency, _
                                  ByVal str_UserName As String, _
                                  ByVal var_NSCRowID As Variant) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    TransferPartsUsed = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                    Array("vi_mms_stock_code", adChar, 30, str_MMSStockCode), _
                    Array("vi_mms_cost", adNumeric, 20, cur_MMSCost), _
                    Array("vi_user_entered", adChar, 50, g_str_UserName), _
                    Array("@rowid", adChar, 50, var_NSCRowID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "TransferPartsUsed", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function AddLabourTasks(ByVal str_SPName As String, _
                               ByRef l_RetVal As Long, _
                               ByVal str_LabDefn As String, _
                               ByVal str_LinkNumber As String, _
                               ByVal str_TypeID As String, _
                               ByVal str_CostCentre As String, _
                               ByVal str_TaskDesc As String, _
                               ByVal str_LabourType As String, _
                               ByVal str_Usage As String, _
                               ByVal str_HrsReqd As String, _
                               ByVal str_AdjHrs As String, _
                               ByVal dbl_TimeAddition As Double, _
                               ByVal str_Rebuilt_Part_Num As String, _
                               ByVal str_LastModifiedBy As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    AddLabourTasks = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                        Array("vi_labour_defn", adChar, 50, str_LabDefn), _
                        Array("vi_link_number", adChar, 25, str_LinkNumber), _
                        Array("vi_typeid", adChar, 5, str_TypeID), _
                        Array("vi_costcentre", adChar, 5, str_CostCentre), _
                        Array("vi_task", adChar, 50, str_TaskDesc), _
                        Array("vi_labour_type", adChar, 5, str_LabourType), _
                        Array("vi_usage", adChar, 25, str_Usage), _
                        Array("vi_hrs_reqd", adChar, 25, str_HrsReqd), _
                        Array("vi_adj_hrs", adChar, 25, str_AdjHrs), _
                        Array("vi_time_addition", adDouble, 18, dbl_TimeAddition), _
                        Array("vi_rebuilt_part_num", adChar, 30, str_Rebuilt_Part_Num), _
                        Array("vi_last_modified_by", adChar, 25, str_LastModifiedBy))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "AddLabourTasks", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateLabourTasks(ByVal str_SPName As String, _
                                  ByRef l_RetVal As Long, _
                                  ByVal str_LabourDefn As String, _
                                  ByVal str_LinkNumber As String, _
                                  ByVal str_TypeID As String, _
                                  ByVal str_CostCentre As String, _
                                  ByVal str_TaskDesc As String, _
                                  ByVal str_LabourType As String, _
                                  ByVal str_Usage As String, _
                                  ByVal str_HrsReqd As String, _
                                  ByVal str_AdjHrs As String, _
                                  ByVal str_PartID As String, _
                                  ByVal dbl_TimeAddition As Double, _
                                  ByVal str_LastModifiedBy As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateLabourTasks = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_labour_defn", adChar, 50, str_LabourDefn), _
                            Array("vi_link_number", adChar, 25, str_LinkNumber), _
                            Array("vi_typeid", adChar, 5, str_TypeID), _
                            Array("vi_costcentre", adChar, 5, str_CostCentre), _
                            Array("vi_task", adChar, 50, str_TaskDesc), _
                            Array("vi_labour_type", adChar, 5, str_LabourType), _
                            Array("vi_usage", adChar, 25, str_Usage), _
                            Array("vi_hrs_reqd", adChar, 25, str_HrsReqd), _
                            Array("vi_adj_hrs", adChar, 25, str_AdjHrs), _
                            Array("vi_partid", adChar, 50, str_PartID), _
                            Array("vi_time_addition", adDouble, 18, dbl_TimeAddition), _
                            Array("vi_last_modified_by", adChar, 25, str_LastModifiedBy))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateLabourTasks", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function AddNSCPUsed(ByVal str_SPName As String, _
                            ByRef l_RetVal As Long, _
                            ByVal str_SupNumber As String, _
                            ByVal str_SupName As String, _
                            ByVal str_CostCentre As String, _
                            ByVal str_Quantity As String, _
                            ByVal str_Percent As String, _
                            ByVal str_UserName As String, _
                            ByVal str_LinkCode As String, _
                            ByVal cur_Cost As Currency, _
                            ByVal var_TypeCode As Variant, _
                            ByVal cur_CoreCost As Currency, _
                            ByVal lng_ID As Long) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    AddNSCPUsed = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@orig_supplier_num", adChar, 50, str_SupNumber), _
                            Array("@orig_supplier_name", adChar, 50, str_SupName), _
                            Array("@cost_centre", adChar, 4, str_CostCentre), _
                            Array("@qty_reqd", adChar, 10, str_Quantity), _
                            Array("@percent_usage", adChar, 10, str_Percent), _
                            Array("@entered_by", adChar, 25, str_UserName), _
                            Array("@mbnum", adChar, 30, str_LinkCode), _
                            Array("@cost", adNumeric, 20, cur_Cost), _
                            Array("@link_type", adChar, 3, var_TypeCode), _
                            Array("@corecost", adNumeric, 20, cur_CoreCost), _
                            Array("@ID", adInteger, 10, lng_ID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "AddNSCPUsed", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateNSCPUsed(ByVal str_SPName As String, _
                               ByRef l_RetVal As Long, _
                               ByVal str_SupNumber As String, _
                               ByVal str_SupName As String, _
                               ByVal str_CostCentre As String, _
                               ByVal str_Quantity As String, _
                               ByVal str_Percent As String, _
                               ByVal str_UserName As String, _
                               ByVal str_LinkCode As String, _
                               ByVal cur_Cost As Currency, _
                               ByVal var_RowID As Variant, _
                            ByVal cur_CoreCost As Currency) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateNSCPUsed = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@orig_supplier_num", adChar, 50, str_SupNumber), _
                            Array("@orig_supplier_name", adChar, 50, str_SupName), _
                            Array("@cost_centre", adChar, 4, str_CostCentre), _
                            Array("@qty_reqd", adChar, 10, str_Quantity), _
                            Array("@percent_usage", adChar, 10, str_Percent), _
                            Array("@entered_by", adChar, 25, str_UserName), _
                            Array("@mbnum", adChar, 30, str_LinkCode), _
                            Array("@cost", adNumeric, 20, cur_Cost), _
                            Array("@rowid", adChar, 50, var_RowID), _
                            Array("@corecost", adNumeric, 20, cur_CoreCost))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateNSCPUsed", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function AddSCPUsed(ByVal str_SPName As String, _
                           ByRef l_RetVal As Long, _
                           ByVal str_StockCode As String, _
                           ByVal str_CostCentre As String, _
                           ByVal str_Quantity As String, _
                           ByVal str_PercentUsage As String, _
                           ByVal str_UserName As String, _
                           ByVal cur_MMSCost As Currency, _
                           ByVal cur_OEMCost As Currency, _
                           ByVal str_LinkCode As String, _
                           ByVal str_RebuiltPart As String, _
                           ByVal str_LinkType As String, _
                           ByVal cur_CoreCost As Currency, _
                           ByVal str_rebuilt_code As String, _
                           ByVal cur_rebuilt_cost As Currency) As Long

    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    AddSCPUsed = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("mms_stock_code", adChar, 30, str_StockCode), _
                            Array("vi_cost_centre", adChar, 4, str_CostCentre), _
                            Array("vi_qty_reqd", adChar, 10, str_Quantity), _
                            Array("vi_percent_usage", adChar, 10, str_PercentUsage), _
                            Array("vi_user_entered", adChar, 30, str_UserName), _
                            Array("vi_link_code", adChar, 30, str_LinkCode), _
                            Array("vi_mms_cost", adNumeric, 30, cur_MMSCost), _
                            Array("vi_oem_cost", adNumeric, 30, cur_OEMCost), _
                            Array("vi_is_rebuilt_part", adChar, 1, str_RebuiltPart), _
                            Array("vi_link_type", adChar, 3, str_LinkType), _
                            Array("corecost", adNumeric, 20, cur_CoreCost), _
                            Array("vi_mms_rebuilt_code", adChar, 30, str_rebuilt_code), _
                            Array("vi_rebuilt_cost", adNumeric, 20, cur_rebuilt_cost))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "AddSCPUsed", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateSCPUsed(ByVal str_SPName As String, _
                              ByRef l_RetVal As Long, _
                              ByVal str_StockCode As String, _
                              ByVal str_CostCentre As String, _
                              ByVal str_Quantity As String, _
                              ByVal str_PercentUsage As String, _
                              ByVal str_UserName As String, _
                              ByVal str_MBNumber As String, _
                              ByVal cur_PartUnitCost As Currency, _
                              ByVal cur_OEMCost As Currency, _
                              ByVal m_var_RowID As Variant, _
                              ByVal cur_CoreCost As Currency) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateSCPUsed = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@mms_stock_code", adChar, 30, str_StockCode), _
                            Array("@cost_centre", adChar, 4, str_CostCentre), _
                            Array("@qty_reqd", adChar, 10, str_Quantity), _
                            Array("@percent_usage", adChar, 10, str_PercentUsage), _
                            Array("@user_entered", adChar, 50, str_UserName), _
                            Array("@makebuy_code", adChar, 30, str_MBNumber), _
                            Array("@mms_cost", adNumeric, 20, cur_PartUnitCost), _
                            Array("@oem_cost", adNumeric, 20, cur_OEMCost), _
                            Array("@rowid", adChar, 50, m_var_RowID), _
                            Array("@corecost", adNumeric, 20, cur_CoreCost))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateSCPUsed", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function AddRBPUsed(ByVal str_SPName As String, _
                           ByRef l_RetVal As Long, _
                           ByVal str_StockCode As String, _
                           ByVal str_CostCentre As String, _
                           ByVal str_Quantity As String, _
                           ByVal str_PercentUsage As String, _
                           ByVal str_UserName As String, _
                           ByVal str_MBNumber As String, _
                           ByVal cur_PartUnitCost As Currency, _
                           ByVal str_RebuiltNumber As String, _
                           ByVal var_TypeCode As Variant, _
                            ByVal cur_CoreCost As Currency) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    AddRBPUsed = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@mms_stock_code", adChar, 30, str_StockCode), _
                            Array("@cost_centre", adChar, 4, str_CostCentre), _
                            Array("@qty_reqd", adChar, 10, str_Quantity), _
                            Array("@percent_usage", adChar, 10, str_PercentUsage), _
                            Array("@user_entered", adChar, 50, str_UserName), _
                            Array("@makebuy_code", adChar, 30, str_MBNumber), _
                            Array("@estimated_cost", adNumeric, 20, cur_PartUnitCost), _
                            Array("@rebuilt_num", adChar, 30, str_RebuiltNumber), _
                            Array("@link_type", adChar, 3, var_TypeCode), _
                            Array("@corecost", adNumeric, 20, cur_CoreCost))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "AddRBPUsed", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateRBPUsed(ByVal str_SPName As String, _
                              ByRef l_RetVal As Long, _
                              ByVal str_CostCentre As String, _
                              ByVal str_Quantity As String, _
                              ByVal str_PercentUsage As String, _
                              ByVal str_UserName As String, _
                              ByVal str_MBNumber As String, _
                              ByVal cur_PartUnitCost As Currency, _
                              ByVal str_RebuiltNumber As String, _
                              ByVal var_RowID As Variant, _
                              ByVal cur_CoreCost As Currency) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateRBPUsed = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@cost_centre", adChar, 4, str_CostCentre), _
                            Array("@qty_reqd", adChar, 10, str_Quantity), _
                            Array("@percent_usage", adChar, 10, str_PercentUsage), _
                            Array("@user_entered", adChar, 50, str_UserName), _
                            Array("@makebuy_code", adChar, 30, str_MBNumber), _
                            Array("@estimated_cost", adNumeric, 20, cur_PartUnitCost), _
                            Array("@rebuilt_num", adChar, 30, str_RebuiltNumber), _
                            Array("@rowid", adChar, 50, var_RowID), _
                            Array("@corecost", adNumeric, 20, cur_CoreCost))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateRBPUsed", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveUsers(ByVal str_SPName As String, _
                              ByVal str_UserName As String, _
                              ByVal str_Password As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveUsers = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_username", adChar, 15, str_UserName), _
                            Array("vi_password", adChar, 25, str_Password))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveUsers", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveSOPFileName(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveSOPFileName = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveSOPFileName", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveTaskDescription(ByVal str_SPName As String) As ADODB.Recordset
    Dim m_obj_clsDb As clsDB
    
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveTaskDescription = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveTaskDescription", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveLabourPosition(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveLabourPosition = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveLabourPosition", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveCostCentres(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveCostCentres = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveCostCentres", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveMBAllLabour(ByVal str_SPName As String, _
                                    ByVal str_LabourID As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveMBAllLabour = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                                    Array("@IDLABOUR", adChar, 50, str_LabourID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveMBAllLabour", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchMB(ByVal str_SPName As String, _
                         ByVal str_MBNumber As String, _
                         ByVal str_RebuildNumber As String, _
                         ByVal str_Keyword As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB

    Set SearchMB = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_mb_num", adChar, 25, str_MBNumber), _
                            Array("vi_rebuild_code", adChar, 25, str_RebuildNumber), _
                            Array("vi_keyword", adChar, 50, str_Keyword))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchMB", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveNSCPUsed(ByVal str_SPName As String, _
                                 ByVal str_LinkCode As String, _
                                 ByVal str_LinkType As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveNSCPUsed = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_idnum", adChar, 30, str_LinkCode), _
                            Array("vi_link_type", adChar, 3, str_LinkType))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveNSCPUsed", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveALLNSCPUsed(ByVal str_SPName As String, _
                                 ByVal str_LinkCode As String, _
                                 ByVal str_LinkType As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveALLNSCPUsed = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_idnum", adChar, 30, str_LinkCode), _
                            Array("vi_link_type", adChar, 3, str_LinkType))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveALLNSCPUsed", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveSCPUsed(ByVal str_SPName As String, _
                                ByVal str_LinkCode As String, _
                                ByVal str_RebuiltPartChoice As String, _
                                ByVal str_LinkType As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveSCPUsed = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                    Array("vi_link_code", adChar, 30, str_LinkCode), _
                    Array("vi_rebuilt_part_choice", adChar, 1, str_RebuiltPartChoice), _
                    Array("vi_link_type", adChar, 3, str_LinkType))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveSCPUsed", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveRBPUsed(ByVal str_SPName As String, _
                                ByVal str_LinkCode As String, _
                                ByVal str_LinkType As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveRBPUsed = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_idnum", adChar, 30, str_LinkCode), _
                            Array("vi_link_type", adChar, 3, str_LinkType))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveRBPUsed", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveEngines(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveEngines = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveEngines", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveTransmissions(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveTransmissions = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveTransmissions", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveDifferentials(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveDifferentials = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveDifferentials", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveMB(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveMB = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveMB", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveUsersLike(ByVal str_SPName As String, _
                                  ByVal str_UserLike As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveUsersLike = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_username_like", adChar, 15, str_UserLike))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveUsersLike", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SetDefaultPassword(ByVal str_SPName As String, _
                                  ByRef l_RetVal As Long, _
                                  ByVal str_UserName As String, _
                                  ByVal str_DefaultPassword As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    SetDefaultPassword = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                                Array("vi_username", adChar, 15, str_UserName), _
                                Array("vi_password", adChar, 25, str_DefaultPassword))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SetDefaultPassword", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function PopulateNSCComboBoxes(ByVal str_SPName As String, _
                                      ByVal str_CompareType As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set PopulateNSCComboBoxes = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_cost_comparetype", adChar, 1, str_CompareType))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "PopulateNSCComboBoxes", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function PopulateCostCentres(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set PopulateCostCentres = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "PopulateCostCentres", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchNSCPart(ByVal str_SPName As String, _
                              ByVal str_OrigSupplierNumber As String, _
                              ByVal lng_OEMPartCost As Long, _
                              ByVal str_Description As String, _
                              ByVal str_Keyword As String, _
                              ByVal str_CostCompareType As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchNSCPart = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                    Array("vi_orig_supplier_num", adChar, 50, str_OrigSupplierNumber), _
                    Array("vi_oem_part_cost", adNumeric, 11, lng_OEMPartCost), _
                    Array("vi_description", adChar, 500, str_Description), _
                    Array("vi_keyword", adChar, 50, str_Keyword), _
                    Array("vi_cost_comparetype", adChar, 1, str_CostCompareType))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchNSCPart", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteUser(ByVal str_SPName As String, _
                            ByRef l_RetVal As Long, _
                            ByVal str_UserName As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteUser = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_username", adChar, 15, str_UserName))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteUser", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAllUsers(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAllUsers = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAllUsers", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchVehicleEstimate(ByVal str_SPName As String, _
                                      ByVal str_BusSeries As String, _
                                      ByVal str_BusDescription As String, _
                                      ByVal str_Make As String, _
                                      ByVal str_Model As String, _
                                      ByVal str_Year As String, _
                                      ByVal str_Engine As String, _
                                      ByVal str_Trans As String, _
                                      ByVal str_Differential As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchVehicleEstimate = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_veh_series", adChar, 75, str_BusSeries), _
                            Array("vi_proj_desc", adChar, 200, str_BusDescription), _
                            Array("vi_make", adChar, 25, str_Make), _
                            Array("vi_model", adChar, 25, str_Model), _
                            Array("vi_year", adChar, 4, str_Year), _
                            Array("vi_engine", adChar, 25, str_Engine), _
                            Array("vi_trans", adChar, 25, str_Trans), _
                            Array("vi_diff", adChar, 25, str_Differential))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchVehicleEstimate", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveVehicleTypes(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveVehicleTypes = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveVehicleTypes", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveVehicleEstimates(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveVehicleEstimates = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveVehicleEstimates", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchRBPart(ByVal str_SPName As String, _
                             ByVal str_RebuiltNumber As String, _
                             ByVal str_Price As String, _
                             ByVal str_Description As String, _
                             ByVal str_Keyword As String, _
                             ByVal l_CostCompareType As Long) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchRBPart = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                        Array("vi_orig_supplier_num", adChar, 30, str_RebuiltNumber), _
                        Array("vi_oem_part_cost", adChar, 25, str_Price), _
                        Array("vi_description", adChar, 250, str_Description), _
                        Array("vi_keyword", adChar, 250, str_Keyword), _
                        Array("vi_cost_comparetype", adInteger, 10, l_CostCompareType))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchRBPart", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchSCRBPartList(ByVal str_SPName As String, _
                                   ByVal str_RebuiltNumber As String, _
                                   ByVal str_Price As String, _
                                   ByVal str_Description As String, _
                                   ByVal l_CostCompareType As Long) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchSCRBPartList = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                        Array("vi_orig_supplier_num", adChar, 30, str_RebuiltNumber), _
                        Array("vi_oem_part_cost", adInteger, 9, str_Price), _
                        Array("vi_description", adChar, 500, str_Description), _
                        Array("vi_cost_comparetype", adInteger, 10, l_CostCompareType))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchSCRBPartList", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchSCPart(ByVal str_SPName As String, _
                             ByVal str_RebuiltNumber As String, _
                             ByVal str_Price As String, _
                             ByVal str_Description As String, _
                             ByVal str_Keyword As String, _
                             ByVal l_CostCompareType As Long) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchSCPart = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                        Array("vi_orig_supplier_num", adChar, 30, str_RebuiltNumber), _
                        Array("vi_oem_part_cost", adNumeric, 9, str_Price), _
                        Array("vi_description", adChar, 500, str_Description), _
                        Array("vi_keyword", adChar, 50, str_Keyword), _
                        Array("vi_cost_comparetype", adInteger, 10, l_CostCompareType))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchSCPart", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchNSCRBPartList(ByVal str_SPName As String, _
                                    ByVal str_RebuiltNumber As String, _
                                    ByVal str_Price As String, _
                                    ByVal str_Description As String, _
                                    ByVal l_CostCompareType As Long) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchNSCRBPartList = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                        Array("vi_orig_supplier_num", adChar, 50, str_RebuiltNumber), _
                        Array("vi_oem_part_cost", adInteger, 9, str_Price), _
                        Array("vi_description", adChar, 500, str_Description), _
                        Array("vi_cost_comparetype", adInteger, 10, l_CostCompareType))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchNSCRBPartList", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveRB(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveRB = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveRB", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveSCOrigSupplierNum(ByVal str_SPName As String, _
                                          ByVal str_OrigSuppNum As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveSCOrigSupplierNum = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_orig_supplier_num", adChar, 50, str_OrigSuppNum))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveSCOrigSupplierNum", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveMBLabour(ByVal str_SPName As String, _
                                 ByVal str_IDNumber As String, _
                                 ByVal str_Type As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveMBLabour = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_idnum", adChar, 25, str_IDNumber), _
                            Array("vi_type", adChar, 3, str_Type))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveMBLabour", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveMBCCLabour(ByVal str_SPName As String, _
                                   ByVal str_MBNumber As String, _
                                   ByVal str_TypeID As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveMBCCLabour = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_mb_num", adChar, 25, str_MBNumber), _
                            Array("vi_typeid", adChar, 5, str_TypeID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveMBCCLabour", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveCCTotals(ByVal str_SPName As String, _
                                 ByVal str_IDNumber As String, _
                                 ByVal str_LinkType As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveCCTotals = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_idnum", adChar, 25, str_IDNumber), _
                            Array("vi_link_type", adChar, 3, str_LinkType))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveCCTotals", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrievePassword(ByVal str_SPName As String, _
                                 ByVal str_UserName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrievePassword = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_user_name", adChar, 15, str_UserName))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrievePassword", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdatePassword(ByVal str_SPName As String, _
                                  ByRef l_RetVal As Long, _
                                  ByVal str_Password As String, _
                                  ByVal str_UserName As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdatePassword = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                                    Array("vi_password", adChar, 25, str_Password), _
                                    Array("vi_user_name", adChar, 50, str_UserName), _
                                    Array("vi_date_cahanged", adDate, 10, Now()))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdatePassword", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function PopulateRBComboBoxes(ByVal str_SPName As String, _
                                     ByVal str_CompareType As String) As ADODB.Recordset
    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set PopulateRBComboBoxes = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_cost_comparetype", adChar, 1, str_CompareType))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "PopulateRBComboBoxes", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveRBEstimates(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveRBEstimates = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveRBEstimates", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function PopulateSCComboBoxes(ByVal str_SPName As String, _
                                     ByVal str_CompareType As String) As ADODB.Recordset
    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set PopulateSCComboBoxes = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_cost_comparetype", adChar, 1, str_CompareType))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "PopulateSCComboBoxes", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function Add_User(ByVal str_SPName As String, _
                         ByRef l_RetVal As Long, _
                         ByVal str_UserName As String, _
                         ByVal l_AccessLevel As Long, _
                         ByVal str_Password As String, _
                         ByVal l_ForceChangePassword As Long) As Long
    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Add_User = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                    Array("vi_username", adChar, 15, str_UserName), _
                    Array("vi_access_level", adInteger, 1, l_AccessLevel), _
                    Array("vi_password", adChar, 25, str_Password), _
                    Array("vi_ForceChangePassword", adInteger, 1, l_ForceChangePassword))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "Add_User", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateAccessLevel(ByVal str_SPName As String, _
                                  ByRef l_RetVal As Long, _
                                  ByVal l_AccessLevel As Long, _
                                  ByVal l_PreviousAccessLevel As Long, _
                                  ByVal l_AccessLevelDays As Long, _
                                  ByVal str_UserName As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateAccessLevel = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                Array("vi_access_level", adInteger, 1, l_AccessLevel), _
                Array("vi_previous_access_level", adInteger, 1, l_PreviousAccessLevel), _
                Array("vi_access_level_days", adInteger, 10, l_AccessLevelDays), _
                Array("vi_username", adChar, 15, str_UserName))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateAccessLevel", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SetPSWDChangeDateNull(ByVal str_SPName As String, _
                                  ByRef l_RetVal As Long, _
                                  ByVal str_UserName As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    SetPSWDChangeDateNull = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                                        Array("vi_username", adChar, 15, str_UserName))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SetPSWDChangeDateNull", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveListOfBuses(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set RetrieveListOfBuses = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveListOfBuses", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function InsertMBListOFBuses(ByVal str_SPName As String, _
                                    ByRef l_RetVal As Long, _
                                    ByVal str_MakeBuyNumber As String, _
                                    ByVal l_ListID As Long) As Long
    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    InsertMBListOFBuses = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                    Array("vi_mb_number", adChar, 25, str_MakeBuyNumber), _
                    Array("vi_list_id", adInteger, 10, l_ListID))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "InsertMBListOFBuses", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function InsertRBListOFBuses(ByVal str_SPName As String, _
                                    ByRef l_RetVal As Long, _
                                    ByVal str_RebuiltStockCode As String, _
                                    ByVal l_ListID As Long) As Long
    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    InsertRBListOFBuses = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                    Array("vi_rebuilt_stock_num", adChar, 30, str_RebuiltStockCode), _
                    Array("vi_list_id", adInteger, 10, l_ListID))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "InsertRBListOFBuses", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function
                                            
Public Function RetrieveMBListOfBuses(ByVal str_SPName As String, _
                                      ByVal str_MakeBuyNumber As String) _
                                                                    As ADODB.Recordset
    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set RetrieveMBListOfBuses = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                                    Array("vi_mb_number", adChar, 25, str_MakeBuyNumber))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveMBListOfBuses", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveRBListOfBuses(ByVal str_SPName As String, _
                                      ByVal str_RebuiltStockCode As String) _
                                                                    As ADODB.Recordset
    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set RetrieveRBListOfBuses = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                    Array("vi_rebuilt_stock_num", adChar, 30, str_RebuiltStockCode))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveRBListOfBuses", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteMBListOFBuses(ByVal str_SPName As String, _
                         ByRef l_RetVal As Long, _
                         ByVal str_MBNumber As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteMBListOFBuses = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_mb_number", adChar, 25, str_MBNumber))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteMBListOFBuses", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteRBListOFBuses(ByVal str_SPName As String, _
                         ByRef l_RetVal As Long, _
                         ByVal str_RebuiltStockCode As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteRBListOFBuses = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                        Array("vi_rebuilt_stock_num", adChar, 30, str_RebuiltStockCode))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteRBListOFBuses", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveMBListByMBNumber(ByVal str_SPName As String, _
                                         ByVal str_MBNumber As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveMBListByMBNumber = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_mb_number", adChar, 25, str_MBNumber))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveMBListByMBNumber", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchArchiveHistory(ByVal str_SPName As String, _
                                     ByVal str_Number As String, _
                                     ByVal str_Type As String, _
                                     ByVal int_chkdate As Integer, _
                                     ByVal str_DateFrom As String, _
                                     ByVal str_DateTo As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchArchiveHistory = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_number", adChar, 30, str_Number), _
                            Array("vi_type", adChar, 30, str_Type), _
                            Array("vi_chkdate", adInteger, 20, int_chkdate), _
                            Array("vi_DateFrom", adChar, 50, str_DateFrom), _
                            Array("vi_DateTo", adChar, 50, str_DateTo))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchArchiveHistory", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function InsertRBMasterList(ByVal str_SPName As String, _
                                    ByRef l_RetVal As Long, _
                                    ByVal str_MMSStockCode As String, _
                                    ByVal str_DetailedDescription As String, _
                                    ByVal str_Keyword As String, _
                                    ByVal str_CorePartNumber As String, _
                                    ByVal str_RebuiltStockNumber As String, _
                                    ByVal str_JobNumber As String, _
                                    ByVal str_LastModifiedBy As String, _
                                    ByVal str_SOPNumber As String, _
                                    ByVal str_BuyCost As String, _
                                    ByVal str_RemanufacturedCost As String, _
                                    ByVal str_ExternalCost As String, _
                                    ByVal str_CoreCost As String) As Long
    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    InsertRBMasterList = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                    Array("vi_mms_stock_code", adChar, 30, str_MMSStockCode), _
                    Array("vi_detailed_desc", adChar, 250, str_DetailedDescription), _
                    Array("vi_keyword", adChar, 250, str_Keyword), _
                    Array("vi_core_part_num", adChar, 30, str_CorePartNumber), _
                    Array("vi_rebuilt_stock_num", adChar, 30, str_RebuiltStockNumber), _
                    Array("vi_job_number", adChar, 25, str_JobNumber), _
                    Array("vi_last_modified_by", adChar, 50, str_LastModifiedBy), _
                    Array("vi_sop_number", adChar, 30, str_SOPNumber), _
                    Array("@BuyCost", adChar, 25, str_BuyCost), _
                    Array("@RemanCost", adChar, 25, str_RemanufacturedCost), _
                    Array("@ExternalCost", adChar, 25, str_ExternalCost), _
                    Array("vi_core_cost", adChar, 25, str_CoreCost))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "InsertRBMasterList", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveEmployeeLabour(ByVal str_SPName As String, _
                                       ByVal str_LinkNumber As String, _
                                       ByVal str_TypeID As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveEmployeeLabour = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_link_number", adChar, 25, str_LinkNumber), _
                            Array("vi_typeid", adChar, 5, str_TypeID))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveEmployeeLabour", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveBusDescription(ByVal str_SPName As String, _
                                       ByVal str_BusDescription As String) _
                                                                    As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveBusDescription = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_description", adChar, 500, str_BusDescription))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveBusDescription", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function InsertListOfBuses(ByVal str_SPName As String, _
                                    ByRef l_RetVal As Long, _
                                    ByVal str_BusDescription As String) As Long
    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    InsertListOfBuses = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                    Array("vi_description", adChar, 500, str_BusDescription))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "InsertListOfBuses", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateListOfBuses(ByVal str_SPName As String, _
                                 ByRef l_RetVal As Long, _
                                 ByVal l_ListID As Long, _
                                 ByVal str_BusDescription As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateListOfBuses = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                                Array("vi_list_id", adInteger, 10, l_ListID), _
                                Array("vi_description", adChar, 500, str_BusDescription))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateListOfBuses", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetMBListOfBusesByListID(ByVal str_SPName As String, _
                                         ByVal l_ListID As Long) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set GetMBListOfBusesByListID = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_list_id", adInteger, 10, l_ListID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetMBListOfBusesByListID", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteFromListOfBuses(ByVal str_SPName As String, _
                                      ByRef l_RetVal As Long, _
                                      ByVal l_ListID As Long) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteFromListOfBuses = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                                            Array("vi_list_id", adInteger, 10, l_ListID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteFromListOfBuses", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAccessLevel(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAccessLevel = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAccessLevel", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function ResetAccessLevel(ByVal str_SPName As String, _
                                 ByRef l_RetVal As Long, _
                                 ByVal str_UserName As String, _
                                 ByVal l_AccessLevel As Long, _
                                 ByVal l_PreviousAccessLevel As Long) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    ResetAccessLevel = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                Array("vi_username", adChar, 15, str_UserName), _
                Array("vi_access_level", adInteger, 1, l_AccessLevel), _
                Array("vi_previous_access_level", adInteger, 1, l_PreviousAccessLevel))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "ResetAccessLevel", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function FindTaskDescription(ByVal str_SPName As String, _
                                    ByVal str_TaskDescription As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set FindTaskDescription = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                        Array("vi_task_description", adChar, 200, str_TaskDescription))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "FindTaskDescription", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function AddLabourTaskDescription(ByVal str_SPName As String, _
                                         ByRef l_RetVal As Long, _
                                         ByVal str_TaskDescription As String) As Long
    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    AddLabourTaskDescription = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                    Array("vi_task_description", adChar, 200, str_TaskDescription))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "AddLabourTaskDescription", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateLabourTaskDescription(ByVal str_SPName As String, _
                                            ByRef l_RetVal As Long, _
                                            ByVal str_TaskDescription As String, _
                                            ByVal m_l_TaskDescriptionID As Long) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateLabourTaskDescription = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                Array("vi_task_description", adChar, 200, str_TaskDescription), _
                Array("vi_task_id", adInteger, 10, m_l_TaskDescriptionID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateLabourTaskDescription", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteLabourTaskDescription(ByVal str_SPName As String, _
                                            ByRef l_RetVal As Long, _
                                            ByVal l_TaskDescriptionID As Long) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteLabourTaskDescription = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_task_id", adInteger, 10, l_TaskDescriptionID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteLabourTaskDescription", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveEmployeeSalaries(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveEmployeeSalaries = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveEmployeeSalaries", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchEmployeeSalaries(ByVal str_SPName As String, _
                                       ByVal dbl_SalaryRate As Double) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchEmployeeSalaries = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_rate_per_hour", adDouble, 10, dbl_SalaryRate))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchEmployeeSalaries", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function AddEmployeeSalaries(ByVal str_SPName As String, _
                                    ByRef l_RetVal As Long, _
                                    ByVal l_WageGroup As Long, _
                                    ByVal dbl_SalaryRate As Double) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    AddEmployeeSalaries = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                                Array("vi_wage_group", adInteger, 10, l_WageGroup), _
                                Array("vi_rate_per_hour", adDouble, 18, dbl_SalaryRate))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "AddEmployeeSalaries", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateEmployeeSalaries(ByVal str_SPName As String, _
                                       ByRef l_RetVal As Long, _
                                       ByVal l_WageGroup As Long, _
                                       ByVal dbl_SalaryRate As Double) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateEmployeeSalaries = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                                Array("vi_wage_group", adInteger, 10, l_WageGroup), _
                                Array("vi_rate_per_hour", adDouble, 10, dbl_SalaryRate))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateEmployeeSalaries", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchEmplClassWageGroup(ByVal str_SPName As String, _
                                         ByVal l_WageGroup As Long) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchEmplClassWageGroup = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_wage_group", adInteger, 10, l_WageGroup))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchEmplClassWageGroup", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteEmployeeSalaries(ByVal str_SPName As String, _
                                       ByRef l_RetVal As Long, _
                                       ByVal l_WageGroup As Long) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteEmployeeSalaries = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_wage_group", adInteger, 10, l_WageGroup))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteEmployeeSalaries", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function AddEmplClass(ByVal str_SPName As String, _
                             ByRef l_RetVal As Long, _
                             ByVal str_LabourDefinition As String, _
                             ByVal l_WageGroup As Long, _
                             ByVal dbl_HoursPerWeek As Double, _
                             ByVal dbl_OverheadType As Double) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    AddEmplClass = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                        Array("vi_labour_defn", adChar, 50, str_LabourDefinition), _
                        Array("vi_wage_group", adInteger, 10, l_WageGroup), _
                        Array("vi_hrs_per_week", adDouble, 18, dbl_HoursPerWeek), _
                        Array("vi_overheadtype", adDouble, 5, dbl_OverheadType))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "AddEmplClass", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchEmplClassLabourDefn(ByVal str_SPName As String, _
                                          ByVal str_LabourDefinition As String) _
                                                                    As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchEmplClassLabourDefn = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_labour_defn", adChar, 50, str_LabourDefinition))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchEmplClassLabourDefn", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteEmplClass(ByVal str_SPName As String, _
                                ByRef l_RetVal As Long, _
                                ByVal l_LabourType As Long) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteEmplClass = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_labour_type", adInteger, 10, l_LabourType))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteEmplClass", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchWageGroup(ByVal str_SPName As String, _
                                ByVal l_WageGroup As Long) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB

    Set SearchWageGroup = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_wage_group", adInteger, 10, l_WageGroup))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchWageGroup", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateEmplClass(ByVal str_SPName As String, _
                                       ByRef l_RetVal As Long, _
                                       ByVal l_LabourType As Long, _
                                       ByVal str_WageGroup As String, _
                                       ByVal str_LabourDefinition As String, _
                                       ByVal l_HoursPerWeek As Long, _
                                       ByVal dbl_OverheadType As Double) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateEmplClass = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_labour_type", adInteger, 10, l_LabourType), _
                            Array("vi_wage_group", adInteger, 10, str_WageGroup), _
                            Array("vi_labour_defn", adChar, 50, str_LabourDefinition), _
                            Array("vi_hrs_per_week", adInteger, 10, l_HoursPerWeek), _
                            Array("vi_overheadtype", adDouble, 10, dbl_OverheadType))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateEmplClass", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function
'Calls the procedure (str_SPName) with the given parameters from the CES packages
Public Function AddTempOEMKit(ByVal str_SPName As String, _
                              ByRef l_RetVal As Long, _
                              ByVal str_part_number As String, _
                              ByVal str_Description As String, _
                              ByVal str_Keyword As String, _
                              ByVal str_UserName As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    AddTempOEMKit = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                        Array("vi_part_number", adChar, 30, str_part_number), _
                        Array("vi_description", adChar, 500, str_Description), _
                        Array("vi_keyword", adChar, 50, str_Keyword), _
                        Array("vi_username", adChar, 25, str_UserName))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "AddTempOEMKit", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function
'Calls the procedure (str_SPName) with the given parameters from the CES packages
Public Function DeleteOEMKit(ByVal str_SPName As String, _
                         ByRef l_RetVal As Long, _
                         ByVal str_part_number As String) As Long
                         
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteOEMKit = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_part_number", adChar, 30, str_part_number))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteOEMKit", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function
'Calls the procedure (str_SPName) with the given parameters from the CES packages
Public Function SearchOEMKits(ByVal str_SPName As String, _
                             ByVal str_PartNumber As String, _
                             ByVal str_Description As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchOEMKits = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                    Array("vi_part_number", adChar, 30, str_PartNumber), _
                    Array("vi_description", adChar, 500, str_Description))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchOEMKit", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function
'Calls the procedure (str_SPName) with the given parameters from the CES packages
Public Function ArchSearchBuses(ByVal str_SPName As String, ByVal str_bus_type As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set ArchSearchBuses = m_obj_clsDb.RunSPReturnRS(str_SPName, Array("vi_arch_veh_bus_type", adChar, 75, str_bus_type))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "ArchSearchBuses", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function ArchSearchOEMKits(ByVal str_SPName As String, _
                             ByVal str_PartNumber As String, _
                             ByVal str_ID As Integer) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set ArchSearchOEMKits = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                    Array("vi_part_number", adChar, 30, str_PartNumber), _
                    Array("vi_id", adInteger, 18, str_ID))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "ArchSearchOEMKits", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function ADDOEMKitToBus(ByVal str_SPName As String, _
                             ByRef l_RetVal As Long, _
                             ByVal str_PartNumber As String, _
                             ByVal str_UserName As String, _
                             ByVal str_CostCentre As String, _
                             ByVal str_LinkNumber As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    ADDOEMKitToBus = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                    Array("vi_part_number", adChar, 30, str_PartNumber), _
                    Array("vi_username", adChar, 30, str_UserName), _
                    Array("vi_costcentre", adChar, 5, str_CostCentre), _
                    Array("vi_linknumber", adChar, 30, str_LinkNumber))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "ADDOEMKitToBus", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveOEMKitsAttached(ByVal str_SPName As String, _
                                        ByVal str_Link_code As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveOEMKitsAttached = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                                Array("vi_link_code", adChar, 30, str_Link_code))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveOEMKitsAttached", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteOEMKitAttached(ByVal str_SPName As String, _
                         ByRef l_RetVal As Long, _
                         ByVal str_Link_code As String, _
                         ByVal str_Vehicle_Number As String) As Long
                         
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteOEMKitAttached = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_link_code", adChar, 30, str_Link_code), _
                            Array("vi_vehicle_number", adChar, 30, str_Vehicle_Number))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteOEMKitAttached", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function retrieveSCKitData(ByVal str_SPName As String, _
                                  ByVal str_Link_code As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set retrieveSCKitData = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                                Array("vi_link_code", adChar, 30, str_Link_code))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "retrieveSCKitData", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateOEMKitCost(ByVal str_SPName As String, _
                                 ByRef l_RetVal As Long, _
                                 ByVal str_part_number As String, _
                                 ByVal str_Cost As Currency) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateOEMKitCost = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                Array("vi_part_number", adChar, 30, str_part_number), _
                Array("vi_cost", adCurrency, 20, str_Cost))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateOEMKitCost", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateRBCost(ByVal str_SPName As String, _
                             ByRef l_RetVal As Long, _
                             ByVal str_rebuilt_stock_num As String, _
                             ByVal str_Cost As Currency) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateRBCost = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                Array("vi_rebuilt_stock_num", adChar, 30, str_rebuilt_stock_num), _
                Array("vi_cost", adCurrency, 20, str_Cost))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateRBCost", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveArchRB(ByVal str_SPName As String, _
                               ByVal str_RBNumber As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveArchRB = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                Array("vi_rebuilt_code", adChar, 30, str_RBNumber))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveArchRB", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveArchMB(ByVal str_SPName As String, _
                               ByVal str_MBNumber As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveArchMB = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                Array("vi_MB_Number", adChar, 30, str_MBNumber))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveArchMB", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveArchBUS(ByVal str_SPName As String, _
                               ByVal str_VEH_ID As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveArchBUS = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                Array("vi_rebuilt_code", adChar, 30, str_VEH_ID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveArchBUS", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function ArchiveRB(ByVal str_SPName As String, _
                          ByRef l_RetVal As Long, _
                          ByVal str_RebuiltStockNum As String, _
                          ByVal str_UserName As String, _
                          ByVal str_LinkNumber As String, _
                          ByVal str_TypeID As String, _
                          ByVal str_LabourCost As String, _
                          ByVal str_LabourOverheadAmount As String, _
                          ByVal str_LabourTotal As String, _
                          ByVal str_MaterialsTotal As String, _
                          ByVal str_TotalRebuiltPartCost As String, _
                          ByVal str_TaxCost As String, _
                          ByVal str_TotalCostTax As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    ArchiveRB = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
        Array("vi_rebuilt_stock_num", adChar, 30, str_RebuiltStockNum), _
        Array("vi_username", adChar, 50, str_UserName), _
        Array("vi_link_number", adChar, 25, str_LinkNumber), _
        Array("vi_typeid", adChar, 5, str_TypeID), _
        Array("vi_labour_cost", adDouble, 18, str_LabourCost), _
        Array("vi_labour_overhead_amount", adDouble, 18, str_LabourOverheadAmount), _
        Array("vi_labour_total", adDouble, 18, str_LabourTotal), _
        Array("vi_materials_total", adDouble, 18, str_MaterialsTotal), _
        Array("vi_total_rebuilt_part_cost", adDouble, 18, str_TotalRebuiltPartCost), _
        Array("vi_total_tax", adDouble, 18, str_TaxCost), _
        Array("vi_total_cost_tax", adDouble, 18, str_TotalCostTax))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "ArchiveRB", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function ArchiveBUS(ByVal str_SPName As String, _
                           ByRef l_RetVal As Long, _
                           ByVal str_VehicleSeries As String, _
                           ByVal str_UserName As String, _
                           ByVal str_LinkNumber As String, _
                           ByVal str_TypeID As String, _
                           ByVal str_LabourCost As String, _
                           ByVal str_LabourOverheadAmount As String, _
                           ByVal str_LabourTotal As String, _
                           ByVal str_MaterialsTotal As String, _
                           ByVal str_TotalRebuiltPartCost As String, _
                           ByVal str_TaxCost As String, _
                           ByVal str_TotalCostTax As String, _
                           ByVal str_OEMKitsTotal As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    ArchiveBUS = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
        Array("vi_vehicle_series_num", adChar, 75, str_VehicleSeries), _
        Array("vi_username", adChar, 50, str_UserName), _
        Array("vi_link_number", adChar, 25, str_LinkNumber), _
        Array("vi_typeid", adChar, 5, str_TypeID), _
        Array("vi_labour_cost", adDouble, 18, str_LabourCost), _
        Array("vi_labour_overhead_amount", adDouble, 18, str_LabourOverheadAmount), _
        Array("vi_labour_total", adDouble, 18, str_LabourTotal), _
        Array("vi_materials_total", adDouble, 18, str_MaterialsTotal), _
        Array("vi_total_rebuilt_part_cost", adDouble, 18, str_TotalRebuiltPartCost), _
        Array("vi_total_tax", adDouble, 18, str_TaxCost), _
        Array("vi_total_cost_tax", adDouble, 18, str_TotalCostTax), _
        Array("vi_OEMKitsTotal", adDouble, 18, str_OEMKitsTotal))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "ArchiveBUS", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function ArchiveMB(ByVal str_SPName As String, _
                          ByRef l_RetVal As Long, _
                          ByVal str_MB_Number As String, _
                          ByVal str_UserName As String, _
                          ByVal str_LinkNumber As String, _
                          ByVal str_TypeID As String, _
                          ByVal str_LabourCost As String, _
                          ByVal str_LabourOverheadAmount As String, _
                          ByVal str_LabourTotal As String, _
                          ByVal str_MaterialsTotal As String, _
                          ByVal str_TotalRebuiltPartCost As String, _
                          ByVal str_TaxCost As String, _
                          ByVal str_TotalCostTax As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    ArchiveMB = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
        Array("vi_mb_number", adChar, 30, str_MB_Number), _
        Array("vi_username", adChar, 50, str_UserName), _
        Array("vi_link_number", adChar, 25, str_LinkNumber), _
        Array("vi_typeid", adChar, 5, str_TypeID), _
        Array("vi_labour_cost", adDouble, 18, str_LabourCost), _
        Array("vi_labour_overhead_amount", adDouble, 18, str_LabourOverheadAmount), _
        Array("vi_labour_total", adDouble, 18, str_LabourTotal), _
        Array("vi_materials_total", adDouble, 18, str_MaterialsTotal), _
        Array("vi_total_rebuilt_part_cost", adDouble, 18, str_TotalRebuiltPartCost), _
        Array("vi_total_tax", adDouble, 18, str_TaxCost), _
        Array("vi_total_cost_tax", adDouble, 18, str_TotalCostTax))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "ArchiveMB", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function ExecuteMMSSync(ByVal str_SPName As String, _
                               ByRef l_RetVal As Long) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    ExecuteMMSSync = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal)
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "ExecuteMMSSync", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetArchRBMasterList(ByVal str_SPName As String, _
                                    ByVal str_MMSStockCode As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set GetArchRBMasterList = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                    Array("vi_mms_stock_code", adChar, 30, str_MMSStockCode))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetArchRBMasterList", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetArchRBEmployeeLabour(ByVal str_SPName As String, _
                                        ByVal lng_ArchRBMasterlistID As Long) _
                                                                As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set GetArchRBEmployeeLabour = m_obj_clsDb.RunSPReturnRS(str_SPName, _
            Array("vi_arch_rb_masterlist_id", adInteger, 10, lng_ArchRBMasterlistID))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetArchRBEmployeeLabour", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetArchRBLabourCCTotal(ByVal str_SPName As String, _
                                       ByVal lng_ArchRBMasterlistID As Long) _
                                                                As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set GetArchRBLabourCCTotal = m_obj_clsDb.RunSPReturnRS(str_SPName, _
            Array("vi_arch_rb_masterlist_id", adInteger, 10, lng_ArchRBMasterlistID))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetArchRBLabourCCTotal", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetArchRBMaterialsCCTotal(ByVal str_SPName As String, _
                                          ByVal lng_ArchRBMasterlistID As Long) _
                                                                As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set GetArchRBMaterialsCCTotal = m_obj_clsDb.RunSPReturnRS(str_SPName, _
            Array("vi_arch_rb_masterlist_id", adInteger, 10, lng_ArchRBMasterlistID))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetArchRBMaterialsCCTotal", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetArchSCPartsUsed(ByVal str_SPName As String, _
                                   ByVal lng_ArchRBMasterlistID As Long) _
                                                                As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set GetArchSCPartsUsed = m_obj_clsDb.RunSPReturnRS(str_SPName, _
            Array("vi_arch_rb_masterlist_id", adInteger, 10, lng_ArchRBMasterlistID))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetArchSCPartsUsed", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchMBByBus(ByVal str_SPName As String, _
                         ByVal l_BusID As Long) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchMBByBus = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_bus_id", adInteger, 10, l_BusID))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchMBByBus", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveCESSettings(ByVal str_SPName As String, _
                                    ByVal str_Parameter As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveCESSettings = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_parameter", adChar, 100, str_Parameter))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveCESSettings", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function
Public Function RetrieveAllLabourHours(ByVal str_SPName As String, _
                                    ByVal str_EstimateNumber As String, ByVal str_EstimateType As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAllLabourHours = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_number", adChar, 25, str_EstimateNumber), _
                            Array("vi_type", adChar, 5, str_EstimateType))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAllLabourHours", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function
Public Function UpdateCESSettings(ByVal str_SPName As String, _
                                  ByRef l_RetVal As Long, _
                                  ByVal str_Parameter As String, _
                                  ByVal str_Value As String) As Long
    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    UpdateCESSettings = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                                Array("vi_parameter", adChar, 100, str_Parameter), _
                                Array("vi_value", adChar, 200, str_Value))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateCESSettings", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function


Public Function SearchKitByNumber(ByVal str_SPName As String, _
                                  ByVal str_PartNumber As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchKitByNumber = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                    Array("vi_part_number", adChar, 30, str_PartNumber))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchKitByNumber", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchNSCPByOrigSupplierNum(ByVal str_SPName As String, _
                                            ByVal str_SupplierNumber As String) _
                                                                As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchNSCPByOrigSupplierNum = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                    Array("vi_orig_supplier_num", adChar, 50, str_SupplierNumber))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchNSCPByOrigSupplierNum", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchEngineByName(ByVal str_SPName As String, _
                                   ByVal str_EngineName As String) _
                                                                As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchEngineByName = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                    Array("vi_name", adChar, 25, str_EngineName))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchEngineByName", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchTransmissionByName(ByVal str_SPName As String, _
                                         ByVal str_TransmissionName As String) _
                                                                As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchTransmissionByName = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                    Array("vi_name", adChar, 25, str_TransmissionName))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchTransmissionByName", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchDifferentialByName(ByVal str_SPName As String, _
                                         ByVal str_DifferentialName As String) _
                                                                As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchDifferentialByName = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                    Array("vi_name", adChar, 25, str_DifferentialName))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchDifferentialByName", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchVehTypeByKey(ByVal str_SPName As String, _
                                   ByVal str_Make As String, _
                                   ByVal str_Model As String, _
                                   ByVal str_Year As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchVehTypeByKey = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                    Array("vi_make", adChar, 25, str_Make), _
                    Array("vi_model", adChar, 25, str_Model), _
                    Array("vi_year", adChar, 4, str_Year))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchVehTypeByKey", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetAllNSCP(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set GetAllNSCP = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetAllNSCP", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateNSCP3(ByVal str_SPName As String, _
                            ByRef l_RetVal As Long, _
                            ByVal l_RecordID As Long, _
                            ByVal str_OrigSupplierNum As String, _
                            ByVal str_OrigSupplierName As String, _
                            ByVal str_DetailedDesc As String, _
                            ByVal str_Keyword As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateNSCP3 = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                Array("vi_id", adInteger, 10, l_RecordID), _
                Array("vi_orig_supplier_num", adChar, 50, str_OrigSupplierNum), _
                Array("vi_orig_supplier_name", adChar, 50, str_OrigSupplierName), _
                Array("vi_detailed_desc", adChar, 500, str_DetailedDesc), _
                Array("vi_keyword", adChar, 50, str_Keyword))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateNSCP3", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchNSCPPartBy2Fields(ByVal str_SPName As String, _
                                        ByVal str_SupplierNumber As String, _
                                        ByVal str_SupplierName As String) _
                                                                As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchNSCPPartBy2Fields = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                        Array("vi_orig_supplier_num", adChar, 50, str_SupplierNumber), _
                        Array("vi_orig_supplier_name", adChar, 50, str_SupplierName))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchNSCPPartBy2Fields", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function InsertIntoAuditModifyHistory(ByVal str_SPName As String, _
    ByRef l_RetVal As Long, ByVal str_Action As String, _
    ByVal str_EstimateNumber As String, ByVal str_EstimateType As String, _
    ByVal str_Ref1 As String, ByVal str_Ref2 As String, _
    Optional ByVal str_Ref3 As String = "", Optional ByVal str_Ref4 As String = "", _
    Optional ByVal str_Ref5 As String = "", Optional ByVal str_Ref6 As String = "", _
    Optional ByVal str_Ref7 As String = "", Optional ByVal str_Ref8 As String = "", _
    Optional ByVal str_Ref9 As String = "", Optional ByVal str_Ref10 As String = "", _
    Optional ByVal str_Ref11 As String = "", Optional ByVal str_Ref12 As String = "", _
    Optional ByVal str_Ref13 As String = "", Optional ByVal str_Ref14 As String = "", _
    Optional ByVal str_Ref15 As String = "", Optional ByVal str_Ref16 As String = "", _
    Optional ByVal str_Ref17 As String = "", Optional ByVal str_Ref18 As String = "", _
    Optional ByVal str_Ref19 As String = "", Optional ByVal str_Ref20 As String = "", _
    Optional ByVal str_Ref21 As String = "", Optional ByVal str_Ref22 As String = "", _
    Optional ByVal str_Ref23 As String = "", Optional ByVal str_Ref24 As String = "", _
    Optional ByVal str_Ref25 As String = "", Optional ByVal str_Ref26 As String = "", _
    Optional ByVal str_Ref27 As String = "", Optional ByVal str_Ref28 As String = "", _
    Optional ByVal str_Ref29 As String = "", Optional ByVal str_Ref30 As String = "", _
    Optional ByVal str_Ref31 As String = "", Optional ByVal str_Ref32 As String = "", _
    Optional ByVal str_Ref33 As String = "", Optional ByVal str_Ref34 As String = "", _
    Optional ByVal str_Ref35 As String = "", Optional ByVal str_Ref36 As String = "", _
    Optional ByVal str_Ref37 As String = "", Optional ByVal str_Ref38 As String = "") _
                                                                                As Long
    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    InsertIntoAuditModifyHistory = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
Array("vi_user_name", adChar, 15, g_str_UserName), _
Array("vi_action", adChar, 500, str_Action), _
Array("vi_estimate_number", adChar, 500, str_EstimateNumber), _
Array("vi_estimate_type", adChar, 4, str_EstimateType), _
Array("vi_ref_1", adChar, 500, str_Ref1), Array("vi_ref_2", adChar, 500, str_Ref2), _
Array("vi_ref_3", adChar, 500, str_Ref3), Array("vi_ref_4", adChar, 500, str_Ref4), _
Array("vi_ref_5", adChar, 500, str_Ref5), Array("vi_ref_6", adChar, 500, str_Ref6), _
Array("vi_ref_7", adChar, 500, str_Ref7), Array("vi_ref_8", adChar, 500, str_Ref8), _
Array("vi_ref_9", adChar, 500, str_Ref9), Array("vi_ref_10", adChar, 500, str_Ref10), _
Array("vi_ref_11", adChar, 500, str_Ref11), Array("vi_ref_12", adChar, 500, str_Ref12), _
Array("vi_ref_13", adChar, 500, str_Ref13), Array("vi_ref_14", adChar, 500, str_Ref14), _
Array("vi_ref_15", adChar, 500, str_Ref15), Array("vi_ref_16", adChar, 500, str_Ref16), _
Array("vi_ref_17", adChar, 500, str_Ref17), Array("vi_ref_18", adChar, 500, str_Ref18), _
Array("vi_ref_19", adChar, 500, str_Ref19), Array("vi_ref_20", adChar, 500, str_Ref20), _
Array("vi_ref_21", adChar, 500, str_Ref21), Array("vi_ref_22", adChar, 500, str_Ref22), _
Array("vi_ref_23", adChar, 500, str_Ref23), Array("vi_ref_24", adChar, 500, str_Ref24), _
Array("vi_ref_25", adChar, 500, str_Ref25), Array("vi_ref_26", adChar, 500, str_Ref26), _
Array("vi_ref_27", adChar, 500, str_Ref27), Array("vi_ref_28", adChar, 500, str_Ref28), _
Array("vi_ref_29", adChar, 500, str_Ref29), Array("vi_ref_30", adChar, 500, str_Ref30), _
Array("vi_ref_31", adChar, 500, str_Ref31), Array("vi_ref_32", adChar, 500, str_Ref32), _
Array("vi_ref_33", adChar, 500, str_Ref33), Array("vi_ref_34", adChar, 500, str_Ref34), _
Array("vi_ref_35", adChar, 500, str_Ref35), Array("vi_ref_36", adChar, 500, str_Ref36), _
Array("vi_ref_37", adChar, 500, str_Ref37), Array("vi_ref_38", adChar, 500, str_Ref38))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "InsertIntoAuditModifyHistory", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function FindSupplierNameByNumber(ByVal str_SPName As String, _
                                         ByVal str_SupplierNumber As String) _
                                                                    As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set FindSupplierNameByNumber = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                        Array("vi_orig_supplier_num", adChar, 50, str_SupplierNumber))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "FindSupplierNameByNumber", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function PropagateNSCPChanges(ByVal str_SPName As String, _
                                     ByRef l_RetVal As Long, _
                                     ByVal str_OrigSuppNum As String, _
                                     ByVal str_OrigSuppName As String, _
                                     ByVal cur_Cost As Currency, _
                                     ByVal l_ID As Long) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    PropagateNSCPChanges = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_orig_supp_num", adChar, 50, str_OrigSuppNum), _
                            Array("vi_orig_supp_name", adChar, 50, str_OrigSuppName), _
                            Array("vi_cost", adNumeric, 20, cur_Cost), _
                            Array("vi_id", adInteger, 10, l_ID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "PropagateNSCPChanges", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function PropagateRBPChanges(ByVal str_SPName As String, _
                                     ByRef l_RetVal As Long, _
                                     ByVal cur_Cost As Currency, _
                                     ByVal str_RBNumber As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    PropagateRBPChanges = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_cost", adNumeric, 20, cur_Cost), _
                            Array("vi_reb_number", adChar, 50, str_RBNumber))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "PropagateRBPChanges", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetNSCPartsUsedBySupplier(ByVal str_SPName As String, _
                                         ByVal str_SupplierNumber As String, _
                                         ByVal str_SupplierName As String) _
                                                                    As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set GetNSCPartsUsedBySupplier = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                        Array("vi_orig_supplier_num", adChar, 50, str_SupplierNumber), _
                        Array("vi_orig_supplier_name", adChar, 50, str_SupplierName))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetNSCPartsUsedBySupplier", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveRBPUsedDistinct(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveRBPUsedDistinct = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveRBPUsedDistinct", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveRBPUsedLinks(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveRBPUsedLinks = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveRBPUsedLinks", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveRBPToPropagateRB(ByVal str_SPName As String, _
                                         ByVal str_LinkCode As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveRBPToPropagateRB = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_idnum", adChar, 30, str_LinkCode))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveRBPToPropagateRB", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveRBPToPropagateNSC(ByVal str_SPName As String, _
                                         ByVal l_ID As Long) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveRBPToPropagateNSC = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                                Array("vi_idnum", adInteger, 10, l_ID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveRBPToPropagateNSC", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveRBPToPropagateSAL(ByVal str_SPName As String, _
                                          ByVal l_WageGroup As Long) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveRBPToPropagateSAL = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                                Array("vi_idnum", adInteger, 10, l_WageGroup))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveRBPToPropagateSAL", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveRBPToPropagateLAB(ByVal str_SPName As String, _
                                          ByVal str_LabourDefn As String) _
                                                                       As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveRBPToPropagateLAB = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                                Array("vi_idnum", adChar, 50, str_LabourDefn))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveRBPToPropagateLAB", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveESTToPropagateRB(ByVal str_SPName As String, _
                                         ByVal str_LinkCode As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveESTToPropagateRB = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_idnum", adChar, 30, str_LinkCode))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveESTToPropagateRB", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveRBPTotalCost(ByVal str_SPName As String, _
                                     ByVal str_RBNumber As String, _
                                     ByVal str_TypeID As String) As Currency
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    RetrieveRBPTotalCost = m_obj_clsDb.RunFNReturnNumber(str_SPName, _
                                    Array("vi_rbnum", adChar, 30, str_RBNumber), _
                                    Array("vi_link_type", adChar, 5, str_TypeID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveRBPTotalCost", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveRBPTotalCost2(ByVal str_SPName As String, _
                                     ByVal str_RBNumber As String, _
                                     ByVal str_TypeID As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    
    Set RetrieveRBPTotalCost2 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                                    Array("vi_rbnum", adChar, 30, str_RBNumber), _
                                    Array("vi_link_type", adChar, 5, str_TypeID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveRBPTotalCost2", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function


Public Function RetrieveKITTotalCost(ByVal str_SPName As String, _
                                     ByRef l_RetVal As Long, _
                                     ByVal str_PartNumber As String) As Currency
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    RetrieveKITTotalCost = m_obj_clsDb.RunFNReturnNumber(str_SPName, l_RetVal, _
                                    Array("vi_idnum", adChar, 25, str_PartNumber))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveKITTotalCost", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveKITToPropagateNSC(ByVal str_SPName As String, _
                                         ByVal l_ID As Long) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveKITToPropagateNSC = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                                Array("vi_idnum", adInteger, 10, l_ID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveKITToPropagateNSC", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveBusFromKitsUsed(ByVal str_SPName As String, _
                                        ByVal str_KitNumber As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveBusFromKitsUsed = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                                Array("vi_kit_number", adChar, 30, str_KitNumber))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveBusFromKitsUsed", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function CopyVehicleEstimate(ByVal str_SPName As String, _
                                     ByRef l_RetVal As Long, _
                                     ByVal l_ListID As Long, _
                                     ByVal str_BusSeries As String, _
                                     ByVal str_Description As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    CopyVehicleEstimate = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_list_id", adInteger, 10, l_ListID), _
                            Array("vi_bus_series", adChar, 75, str_BusSeries), _
                            Array("vi_description", adChar, 200, str_Description), _
                            Array("vi_entered_by", adChar, 25, g_str_UserName))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "CopyVehicleEstimate", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function CopyMBEstimate(ByVal str_SPName As String, _
                                     ByRef l_RetVal As Long, _
                                     ByVal str_MBNumber As String, _
                                     ByVal str_NewMBNumber As String, _
                                     ByVal str_Keyword As String, _
                                     ByVal str_RebuildNumber As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    CopyMBEstimate = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_mb_number", adChar, 20, str_MBNumber), _
                            Array("vi_new_mb_number", adChar, 20, str_NewMBNumber), _
                            Array("vi_keyword", adChar, 75, str_Keyword), _
                            Array("vi_rebuild_number", adChar, 20, str_RebuildNumber), _
                            Array("vi_entered_by", adChar, 25, g_str_UserName))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "CopyMBEstimate", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function CopyRBEstimate(ByVal str_SPName As String, _
                                     ByRef l_RetVal As Long, _
                                     ByVal str_RBNumber As String, _
                                     ByVal str_NewRBNumber As String, _
                                     ByVal str_Keyword As String, _
                                     ByVal str_MMSStockCode As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    CopyRBEstimate = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_rb_number", adChar, 20, str_RBNumber), _
                            Array("vi_new_rb_number", adChar, 20, str_NewRBNumber), _
                            Array("vi_keyword", adChar, 75, str_Keyword), _
                            Array("vi_description", adChar, 20, str_MMSStockCode), _
                            Array("vi_entered_by", adChar, 25, g_str_UserName))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "CopyRBEstimate", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAudit1(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAudit1 = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAudit1", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAudit2(ByVal str_SPName As String, _
                                ByVal str_DateFrom As String, _
                                ByVal str_DateTo As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAudit2 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_date_from", adChar, 20, str_DateFrom), _
                            Array("vi_date_to", adChar, 20, str_DateTo))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAudit2", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAudit3(ByVal str_SPName As String, _
                               ByVal str_EstimateType As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAudit3 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_estimate_type", adChar, 4, str_EstimateType))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAudit3", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAudit4(ByVal str_SPName As String, _
                                ByVal str_UserName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAudit4 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_user_name", adChar, 15, str_UserName))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAudit4", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAudit5(ByVal str_SPName As String, _
                                ByVal str_UserName As String, _
                                ByVal str_DateFrom As String, _
                                ByVal str_DateTo As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAudit5 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_user_name", adChar, 15, str_UserName), _
                            Array("vi_date_from", adChar, 20, str_DateFrom), _
                            Array("vi_date_to", adChar, 20, str_DateTo))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAudit5", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAudit6(ByVal str_SPName As String, _
                               ByVal str_EstimateNumber As String, _
                               ByVal str_EstimateType As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAudit6 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                        Array("vi_estimate_number", adChar, 500, str_EstimateNumber), _
                        Array("vi_estimate_type", adChar, 4, str_EstimateType))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAudit6", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAudit7(ByVal str_SPName As String, _
                               ByVal str_EstimateNumber As String, _
                               ByVal str_EstimateType As String, _
                               ByVal str_DateFrom As String, _
                               ByVal str_DateTo As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAudit7 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                        Array("vi_estimate_number", adChar, 500, str_EstimateNumber), _
                        Array("vi_estimate_type", adChar, 4, str_EstimateType), _
                        Array("vi_date_from", adChar, 20, str_DateFrom), _
                        Array("vi_date_to", adChar, 20, str_DateTo))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAudit7", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAudit8(ByVal str_SPName As String, _
                               ByVal str_EstimateNumber As String, _
                               ByVal str_EstimateType As String, _
                               ByVal str_UserName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAudit8 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                        Array("vi_estimate_number", adChar, 500, str_EstimateNumber), _
                        Array("vi_estimate_type", adChar, 4, str_EstimateType), _
                        Array("vi_user_name", adChar, 15, str_UserName))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAudit8", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAudit9(ByVal str_SPName As String, _
                               ByVal str_EstimateNumber As String, _
                               ByVal str_EstimateType As String, _
                               ByVal str_UserName As String, _
                               ByVal str_DateFrom As String, _
                               ByVal str_DateTo As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAudit9 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                        Array("vi_estimate_number", adChar, 500, str_EstimateNumber), _
                        Array("vi_estimate_type", adChar, 4, str_EstimateType), _
                        Array("vi_user_name", adChar, 15, str_UserName), _
                        Array("vi_date_from", adChar, 20, str_DateFrom), _
                        Array("vi_date_to", adChar, 20, str_DateTo))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAudit9", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAudit10(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAudit10 = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAudit10", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAudit11(ByVal str_SPName As String, _
                                ByVal str_DateFrom As String, _
                                ByVal str_DateTo As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAudit11 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_date_from", adChar, 20, str_DateFrom), _
                            Array("vi_date_to", adChar, 20, str_DateTo))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAudit11", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAudit12(ByVal str_SPName As String, _
                                ByVal str_UserName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAudit12 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_user_name", adChar, 15, str_UserName))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAudit12", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAudit13(ByVal str_SPName As String, _
                                ByVal str_UserName As String, _
                                ByVal str_DateFrom As String, _
                                ByVal str_DateTo As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAudit13 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_user_name", adChar, 15, str_UserName), _
                            Array("vi_date_from", adChar, 20, str_DateFrom), _
                            Array("vi_date_to", adChar, 20, str_DateTo))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAudit13", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAudit14(ByVal str_SPName As String, _
                                ByVal str_EstimateType As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAudit14 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_estimate_type", adChar, 4, str_EstimateType))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAudit14", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAudit15(ByVal str_SPName As String, _
                                ByVal str_EstimateType As String, _
                                ByVal str_DateFrom As String, _
                                ByVal str_DateTo As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAudit15 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_estimate_type", adChar, 4, str_EstimateType), _
                            Array("vi_date_from", adChar, 20, str_DateFrom), _
                            Array("vi_date_to", adChar, 20, str_DateTo))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAudit15", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAudit16(ByVal str_SPName As String, _
                                ByVal str_EstimateType As String, _
                                ByVal str_UserName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAudit16 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_estimate_type", adChar, 4, str_EstimateType), _
                            Array("vi_user_name", adChar, 15, str_UserName))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAudit16", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAudit17(ByVal str_SPName As String, _
                                ByVal str_EstimateType As String, _
                                ByVal str_UserName As String, _
                                ByVal str_DateFrom As String, _
                                ByVal str_DateTo As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAudit17 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_estimate_type", adChar, 4, str_EstimateType), _
                            Array("vi_user_name", adChar, 15, str_UserName), _
                            Array("vi_date_from", adChar, 20, str_DateFrom), _
                            Array("vi_date_to", adChar, 20, str_DateTo))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAudit17", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteAllLabourSummary(ByVal str_SPName As String, _
                                       ByRef l_RetVal As Long) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteAllLabourSummary = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal)
    
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteAllLabourSummary", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteAllMaterialSummary(ByVal str_SPName As String, _
                                       ByRef l_RetVal As Long) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteAllMaterialSummary = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal)
    
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteAllMaterialSummary", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function


Public Function InsertAllLabourSummary(ByVal str_SPName As String, _
                                       ByRef l_RetVal As Long, _
                                       ByVal str_LabourType As String, _
                                       ByVal str_CostCentre As String, _
                                       ByVal str_Task As String, _
                                       ByVal str_Usage As String, _
                                       ByVal str_Time As String, _
                                       ByVal str_WrenchTime As String, _
                                       ByVal str_RatePerHour As String, _
                                       ByVal str_TotalCost As String, _
                                       ByVal str_ExtendedTime As String, _
                                       ByVal str_EstimateType As String, _
                                       ByVal str_EstimateNumber As String) As Long
    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    InsertAllLabourSummary = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                    Array("vi_labour_type", adChar, 50, str_LabourType), _
                    Array("vi_cost_centre", adChar, 4, str_CostCentre), _
                    Array("vi_task", adChar, 200, str_Task), _
                    Array("vi_usage", adNumeric, 20, str_Usage), _
                    Array("vi_time", adNumeric, 20, str_Time), _
                    Array("vi_wrench_time", adChar, 8, str_WrenchTime), _
                    Array("vi_rate_per_hour", adNumeric, 20, str_RatePerHour), _
                    Array("vi_total_cost", adNumeric, 20, str_TotalCost), _
                    Array("vi_extended_time", adChar, 8, str_ExtendedTime), _
                    Array("vi_estimate_type", adChar, 3, str_EstimateType), _
                    Array("vi_estimate_number", adChar, 25, str_EstimateNumber))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "InsertAllLabourSummary", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function InsertAllMaterialSummary(ByVal str_SPName As String, _
                                       ByRef l_RetVal As Long, _
                                       ByVal str_CostCentre As String, _
                                       ByVal str_TotalCost As String, _
                                       ByVal str_TaxableCost As String, _
                                       ByVal str_RB_Reference As String) As Long
    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    InsertAllMaterialSummary = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                    Array("vi_cost_centre", adChar, 5, str_CostCentre), _
                    Array("vi_total_cost", adNumeric, 25, str_TotalCost), _
                    Array("vi_taxable_cost", adNumeric, 25, str_TaxableCost), _
                    Array("vi_rb_reference", adChar, 25, str_RB_Reference))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "InsertAllMaterialSummary", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAllLabourSummary(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAllLabourSummary = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAllLabourSummary", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAllMaterialSummary(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAllMaterialSummary = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAllMaterialSummary", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveSCPUsedROWID(ByVal str_SPName As String, _
                                ByVal str_RowID As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveSCPUsedROWID = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_str_ROWID", adChar, 50, str_RowID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveSCPUsedROWID", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveNSCPUsedROWID(ByVal str_SPName As String, _
                                ByVal str_RowID As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveNSCPUsedROWID = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_str_ROWID", adChar, 50, str_RowID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveNSCPUsedROWID", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function FindBusDescription(ByVal str_SPName As String, _
                                   ByVal str_BusDescription As String) As ADODB.Recordset
    On Error GoTo Error_Handler
          
    Set m_obj_clsDb = New clsDB
    Set FindBusDescription = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                        Array("vi_bus_description", adChar, 500, str_BusDescription))
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "FindBusDescription", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateBusDescription(ByVal str_SPName As String, _
                                     ByRef l_RetVal As Long, _
                                     ByVal str_BusDescription As String, _
                                     ByVal str_NewBusDescription As String, _
                                     ByVal m_l_BusDescriptionID As Long) As Long
    On Error GoTo Error_Handler
          
    Set m_obj_clsDb = New clsDB
    UpdateBusDescription = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
            Array("vi_list_id", adInteger, 10, m_l_BusDescriptionID), _
            Array("vi_bus_description", adChar, 500, str_BusDescription), _
            Array("vi_new_bus_description", adChar, 500, str_NewBusDescription))

    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateBusDescription", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetKitParts(ByVal str_SPName As String, _
                            ByVal str_LinkCode As String, _
                            ByVal str_LinkType As String, _
                            ByVal str_RebuiltPartChoice As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set GetKitParts = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                        Array("vi_link_code", adChar, 30, str_LinkCode), _
                        Array("vi_link_type", adChar, 3, str_LinkType), _
                        Array("vi_rebuilt_part_choice", adChar, 1, str_RebuiltPartChoice))
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetKitParts", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetSubKits(ByVal str_SPName As String, _
                            ByVal str_KitPartNumber As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set GetSubKits = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                          Array("vi_kit_part_number", adChar, 30, str_KitPartNumber))
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetSubKits", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function InsertSubKits(ByVal str_SPName As String, _
                              ByRef l_RetVal As Long, _
                              ByVal str_KitPartNumber As String, _
                              ByVal str_PartType As String, _
                              ByVal str_SupplierNumber As String, _
                              ByVal str_SupplierName As String, _
                              ByVal str_StockCode As String, _
                              ByVal str_QTY As String, _
                              ByVal str_SubKitLetter As String, _
                              ByVal str_Description As String, _
                              ByVal l_Sequence As Long) As Long
    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    InsertSubKits = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                    Array("vi_kit_part_number", adChar, 30, str_KitPartNumber), _
                    Array("vi_part_type", adChar, 3, str_PartType), _
                    Array("vi_supplier_number", adChar, 50, str_SupplierNumber), _
                    Array("vi_supplier_name", adChar, 50, str_SupplierName), _
                    Array("vi_stock_code", adChar, 30, str_StockCode), _
                    Array("vi_qty", adChar, 10, str_QTY), _
                    Array("vi_sub_kit_letter", adChar, 5, str_SubKitLetter), _
                    Array("vi_description", adChar, 500, str_Description), _
                    Array("vi_sequence", adInteger, 10, l_Sequence))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "InsertSubKits", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteSubKits(ByVal str_SPName As String, _
                              ByRef l_RetVal As Long, _
                              ByVal str_KitPartNumber As String) As Long
                              
    On Error GoTo Error_Handler
          
    Set m_obj_clsDb = New clsDB
    DeleteSubKits = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                             Array("vi_kit_part_number", adChar, 30, str_KitPartNumber))
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteSubKits", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateSubKits(ByVal str_SPName As String, _
                              ByRef l_RetVal As Long, _
                              ByVal str_KitPartNumber As String, _
                              ByVal str_SupplierNumber As String, _
                              ByVal str_SupplierName As String, _
                              ByVal str_StockCode As String, _
                              ByVal str_QTY As String, _
                              ByVal str_Description As String) As Long
    On Error GoTo Error_Handler
          
    Set m_obj_clsDb = New clsDB
    UpdateSubKits = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                        Array("vi_kit_part_number", adChar, 30, str_KitPartNumber), _
                        Array("vi_supplier_number", adChar, 50, str_SupplierNumber), _
                        Array("vi_supplier_name", adChar, 50, str_SupplierName), _
                        Array("vi_stock_code", adChar, 30, str_StockCode), _
                        Array("vi_qty", adChar, 10, str_QTY), _
                        Array("vi_description", adChar, 500, str_Description))
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateSubKits", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateSubKits1(ByVal str_SPName As String, _
                               ByRef l_RetVal As Long, _
                               ByVal str_SupplierNumber As String, _
                               ByVal str_SupplierName As String, _
                               ByVal str_Description As String) As Long
    On Error GoTo Error_Handler
          
    Set m_obj_clsDb = New clsDB
    UpdateSubKits1 = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                        Array("vi_supplier_number", adChar, 50, str_SupplierNumber), _
                        Array("vi_supplier_name", adChar, 50, str_SupplierName), _
                        Array("vi_description", adChar, 500, str_Description))
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateSubKits1", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteSubKits1(ByVal str_SPName As String, _
                               ByRef l_RetVal As Long, _
                               ByVal str_KitPartNumber As String, _
                               ByVal str_SupplierNumber As String, _
                               ByVal str_SupplierName As String, _
                               ByVal str_StockCode As String) As Long
    On Error GoTo Error_Handler
          
    Set m_obj_clsDb = New clsDB
    DeleteSubKits1 = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                        Array("vi_kit_part_number", adChar, 30, str_KitPartNumber), _
                        Array("vi_supplier_number", adChar, 50, str_SupplierNumber), _
                        Array("vi_supplier_name", adChar, 50, str_SupplierName), _
                        Array("vi_stock_code", adChar, 30, str_StockCode))
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteSubKits1", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetAllFromSubKits(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
          
    Set m_obj_clsDb = New clsDB
    Set GetAllFromSubKits = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetAllFromSubKits", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteAllSubKits(ByVal str_SPName As String, _
                                 ByRef l_RetVal As Long) As Long
    On Error GoTo Error_Handler
          
    Set m_obj_clsDb = New clsDB
    DeleteAllSubKits = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal)
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteAllSubKits", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateOverheadFringe(ByVal str_SPName As String, _
                                     ByRef l_RetVal As Long, _
                                     ByVal str_UseOverheadFringe As String, _
                                     ByVal str_UserName As String) As Long
    On Error GoTo Error_Handler
          
    Set m_obj_clsDb = New clsDB
    UpdateOverheadFringe = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                    Array("vi_use_overhead_fringe", adChar, 1, str_UseOverheadFringe), _
                    Array("vi_username", adChar, 15, str_UserName))
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateOverheadFringe", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteCleanNSCP1(ByVal str_SPName As String, _
                                 ByRef l_RetVal As Long) As Long
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteCleanNSCP1 = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal)
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteCleanNSCP1", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteCleanNSCP2(ByVal str_SPName As String, _
                                 ByRef l_RetVal As Long) As Long
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    On Error GoTo Error_Handler
          
    Set m_obj_clsDb = New clsDB
    DeleteCleanNSCP2 = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal)
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteCleanNSCP2", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetNSCPClean1(ByVal str_SPName As String) As ADODB.Recordset
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    Dim m_obj_clsDb As clsDB

    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set GetNSCPClean1 = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetNSCPClean1", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteCleanNSCP3(ByVal str_SPName As String, _
                                 ByRef l_RetVal As Long) As Long
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    On Error GoTo Error_Handler
          
    Set m_obj_clsDb = New clsDB
    DeleteCleanNSCP3 = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal)
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteCleanNSCP3", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetNSCPClean2(ByVal str_SPName As String, _
                              ByVal str_Passed As String) As ADODB.Recordset
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    Dim m_obj_clsDb As clsDB

    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set GetNSCPClean2 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                          Array("vi_orig_supp_num", adChar, 50, str_Passed))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetNSCPClean2", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteCleanNSCP4(ByVal str_SPName As String, _
                                 ByRef l_RetVal As Long, _
                                 ByVal str_Passed As String) As Long
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    On Error GoTo Error_Handler
          
    Set m_obj_clsDb = New clsDB
    DeleteCleanNSCP4 = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_orig_supplier_num", adChar, 50, str_Passed))
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteCleanNSCP4", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetNSCPClean3(ByVal str_SPName As String) As ADODB.Recordset
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    Dim m_obj_clsDb As clsDB

    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set GetNSCPClean3 = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetNSCPClean3", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteCleanNSCP5(ByVal str_SPName As String, _
                                 ByRef l_RetVal As Long) As Long
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    On Error GoTo Error_Handler
          
    Set m_obj_clsDb = New clsDB
    DeleteCleanNSCP5 = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal)
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteCleanNSCP5", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetNSCPClean4(ByVal str_SPName As String, _
                              ByVal str_Passed As String) As ADODB.Recordset
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    Dim m_obj_clsDb As clsDB

    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set GetNSCPClean4 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                          Array("vi_orig_supp_name", adChar, 50, str_Passed))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetNSCPClean4", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteCleanNSCP6(ByVal str_SPName As String, _
                                 ByRef l_RetVal As Long, _
                                 ByVal str_Passed As String) As Long
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    On Error GoTo Error_Handler
          
    Set m_obj_clsDb = New clsDB
    DeleteCleanNSCP6 = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_orig_supplier_num", adChar, 50, str_Passed))
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteCleanNSCP6", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetNSCPClean5(ByVal str_SPName As String) As ADODB.Recordset
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    Dim m_obj_clsDb As clsDB

    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set GetNSCPClean5 = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetNSCPClean5", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteCleanNSCP7(ByVal str_SPName As String, _
                                 ByRef l_RetVal As Long) As Long
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    On Error GoTo Error_Handler
          
    Set m_obj_clsDb = New clsDB
    DeleteCleanNSCP7 = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal)
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteCleanNSCP7", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetNSCPClean6(ByVal str_SPName As String, _
                              ByVal l_PartID As Long) As ADODB.Recordset
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set GetNSCPClean6 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                        Array("vi_id", adInteger, 10, l_PartID))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetNSCPClean6", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateCleanNSCP1(ByVal str_SPName As String, _
                                 ByRef l_RetVal As Long, _
                                 l_PartID As Long) As Long
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    On Error GoTo Error_Handler
          
    Set m_obj_clsDb = New clsDB
    UpdateCleanNSCP1 = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                        Array("vi_id", adInteger, 10, l_PartID))
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateCleanNSCP1", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetNSCPClean7(ByVal str_SPName As String) As ADODB.Recordset
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    Dim m_obj_clsDb As clsDB

    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set GetNSCPClean7 = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetNSCPClean7", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetNSCPClean8(ByVal str_SPName As String, _
                              ByVal str_OrigSupplierNum As String, _
                              ByVal str_Orig_SupplierName As String) As ADODB.Recordset
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    Dim m_obj_clsDb As clsDB

    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set GetNSCPClean8 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                          Array("vi_orig_supplier_num", adChar, 50, str_OrigSupplierNum), _
                          Array("vi_orig_supplier_name", adChar, 50, str_Orig_SupplierName))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetNSCPClean8", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateCleanNSCP2(ByVal str_SPName As String, _
                                 ByRef l_RetVal As Long) As Long
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    On Error GoTo Error_Handler
          
    Set m_obj_clsDb = New clsDB
    UpdateCleanNSCP2 = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal)
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateCleanNSCP2", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetNSCPClean9(ByVal str_SPName As String) As ADODB.Recordset
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    Dim m_obj_clsDb As clsDB

    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set GetNSCPClean9 = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetNSCPClean9", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetNSCPClean10(ByVal str_SPName As String) As ADODB.Recordset
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    Dim m_obj_clsDb As clsDB

    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set GetNSCPClean10 = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetNSCPClean10", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetNSCPClean11(ByVal str_SPName As String) As ADODB.Recordset
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    Dim m_obj_clsDb As clsDB

    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set GetNSCPClean11 = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetNSCPClean11", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetNSCPClean12(ByVal str_SPName As String) As ADODB.Recordset
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    Dim m_obj_clsDb As clsDB

    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set GetNSCPClean12 = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetNSCPClean12", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetNSCPClean13(ByVal str_SPName As String) As ADODB.Recordset
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    Dim m_obj_clsDb As clsDB

    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set GetNSCPClean13 = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetNSCPClean13", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetNSCPClean14(ByVal str_SPName As String, _
                              ByVal str_OrigSupplierNum As String, _
                              ByVal str_Orig_SupplierName As String) As ADODB.Recordset
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    Dim m_obj_clsDb As clsDB

    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set GetNSCPClean14 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                          Array("vi_orig_supp_num", adChar, 50, str_OrigSupplierNum), _
                          Array("vi_orig_supplier_name", adChar, 50, str_Orig_SupplierName))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetNSCPClean14", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetNSCPClean15(ByVal str_SPName As String, _
                              ByVal str_OrigSupplierNum As String, _
                              ByVal str_Orig_SupplierName As String) As ADODB.Recordset
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    Dim m_obj_clsDb As clsDB

    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set GetNSCPClean15 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                          Array("vi_orig_supplier_num", adChar, 50, str_OrigSupplierNum), _
                          Array("vi_orig_supplier_name", adChar, 50, str_Orig_SupplierName))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetNSCPClean15", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchRBPartBusSeries(ByVal str_SPName As String, _
                             ByVal str_RebuiltNumber As String, _
                             ByVal str_Description As String, _
                             ByVal str_Keyword As String, _
                             ByVal l_BusSeriesID As Long, _
                             ByVal l_SearchOption As Long) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchRBPartBusSeries = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                        Array("vi_rebuilt_num", adChar, 30, str_RebuiltNumber), _
                        Array("vi_description", adChar, 250, str_Description), _
                        Array("vi_keyword", adChar, 250, str_Keyword), _
                        Array("vi_bus_series_id", adInteger, 10, l_BusSeriesID), _
                        Array("vi_search_option", adInteger, 10, l_SearchOption))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchRBPartBusSeries", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetCostVarRS(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set GetCostVarRS = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetCostVarRS", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteMBEstimate(ByVal str_SPName As String, _
                         ByRef l_RetVal As Long, _
                         ByVal str_MBNumber As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteMBEstimate = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_mb_number", adChar, 25, str_MBNumber))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteMBEstimate", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteRBEstimate(ByVal str_SPName As String, _
                         ByRef l_RetVal As Long, _
                         ByRef str_RebuiltNumber As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteRBEstimate = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                        Array("vi_rb_num", adChar, 30, str_RebuiltNumber))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteRBEstimate", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteVehicleEstimateByID(ByVal str_SPName As String, _
                                      ByRef l_RetVal As Long, _
                                      ByRef str_LinkCode As String, _
                                      ByVal l_VehicleListID As Long) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteVehicleEstimateByID = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_link_code", adChar, 25, str_LinkCode), _
                            Array("vi_vehicle_list_id", adInteger, 10, l_VehicleListID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteVehicleEstimateByID", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

modMain.bas :
Attribute VB_Name = "modMain"
Option Explicit

Private m_str_Msg As String
Public g_Conn As ADODB.Connection
Public g_l_ConnectionType As Long 'TestDB = 1, DevDB = 0
Public g_l_AccessLevel As Long
Public g_str_UserName As String
Public g_str_Password As String
'Next variable will be set in the frmMain, MDIForm_Load(...) sub. Do not change this
'variable in any other places, just use it!!!
Public g_dbl_NonProductiveTimeAdj As Double
'Next value will hold data from the USERS.USE_OVERHEAD_FRINGE field.
Public g_str_UseOverheadFringe As String
'Next variable will hold data:
' a. Or from the CES_SETTINGS.OVERHEAD - if g_str_UseOverheadFringe="O"
' b. Or from the CES_SETTINGS.FRINGE - if g_str_UseOverheadFringe="F"
Public g_dbl_OverheadFringeValue As Double

Public g_str_MSWordDocumentPath As String

Public Const g_const_str_DefaultPassword As String = "12345"

'Next variable will be used for the error-trapping. It will hold line number where
'error(s) happened.
Public g_l_ErrorLineNumber As Long

'All API declarations should be here, adn they should have be a Public.
Public Declare Function ShellExecute Lib "shell32.dll" Alias "ShellExecuteA" ( _
                       ByVal l_Hwnd As Long, _
                       ByVal str_Op As String, _
                       ByVal str_File As String, _
                       ByVal str_Params As String, _
                       ByVal str_Dir As String, _
                       ByVal l_FsShowCmd As Long) As Long
                       
Public Declare Function GetDesktopWindow Lib "user32" () As Long

Public Declare Function SetWindowPos Lib "user32" (ByVal hWnd As Long, _
    ByVal hWndInsertAfter As Long, ByVal x As Long, ByVal y As Long, _
    ByVal cx As Long, ByVal cy As Long, ByVal uFlags As Long) As Long

' SetWindowPos constants:
Public Const HWND_TOPMOST = -1
Public Const HWND_NOTOPMOST = -2

Public Const SWP_NOSIZE = &H1
Public Const SWP_NOMOVE = &H2
Public Const SWP_NOACTIVATE = &H10

Private Const g_const_LWA_ALPHA = &H2
Private Const g_const_GWL_EXSTYLE = (-20)
Private Const g_const_WS_EX_LAYERED = &H80000

Private Declare Function GetWindowLong Lib "user32" _
    Alias "GetWindowLongA" (ByVal hWnd As Long, _
    ByVal nIndex As Long) As Long

Private Declare Function SetWindowLong Lib "user32" _
    Alias "SetWindowLongA" (ByVal hWnd As Long, _
    ByVal nIndex As Long, ByVal dwNewLong As Long) As Long

Private Declare Function SetLayeredWindowAttributes Lib "user32" _
    (ByVal hWnd As Long, ByVal crKey As Long, _
    ByVal bAlpha As Byte, ByVal dwFlags As Long) As Long

'Mouse Cursor Handles
Private m_l_hDefaultCursor As Long
Private m_l_hWaitCursor As Long

Private Declare Function GetCursor Lib "user32" () As Long
Private Declare Function LoadCursorFromFile Lib "user32" Alias "LoadCursorFromFileA" (ByVal lpFileName As String) As Long
Private Declare Function DestroyCursor Lib "user32" (ByVal hCur As Long) As Long
'Private Declare Function SetSystemCursor Lib "user32" (ByVal hcur As Long, ByVal id As Long) As Long
Private Declare Function SetCursor Lib "user32" (ByVal hCur As Long) As Long

Private Const OCR_NORMAL = 32512

Public Sub SetConnectionToDatabase()
    'Create connection to database. This connection will remain until user closed
    'frmMain form
    Dim str_ConnString As String
    
    On Error GoTo Error_Handler
    
    'Select connection string
    If g_l_ConnectionType = 0 Then
        str_ConnString = "Provider=MSDAORA.1;User ID=ces;Data Source=ces_dev;Persist Security Info=False;password=ces;timeout=60"
    ElseIf g_l_ConnectionType = 1 Then
        'str_ConnString = "Provider=MSDAORA.1;User ID=CES;Data Source=ces_tst;Persist Security Info=False;password=ces"
        str_ConnString = "Provider=MSDAORA.1;User ID=CES;Data Source=ces_dev;Persist Security Info=False;password=ces"
    ElseIf g_l_ConnectionType = 100 Then 'Production Database
        str_ConnString = "Provider=MSDAORA.1;User ID=ces;Data Source=ces_pd;Persist Security Info=False;password=cesprd1210"
        
    End If
    
    Set g_Conn = New ADODB.Connection
    g_Conn.ConnectionString = str_ConnString
    g_Conn.Open

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "SetConnectionToDatabase", g_l_ErrorLineNumber
End Sub

Public Sub SetWaitCursor()
    Dim l_RetVal As Long

    On Error GoTo Error_Handler
    
    l_RetVal = SetCursor(m_l_hWaitCursor)
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "SetWaitCursor", g_l_ErrorLineNumber
End Sub

Public Sub SetDefaultCursor()
    Dim l_RetVal As Long

    On Error GoTo Error_Handler
    
    l_RetVal = SetCursor(m_l_hDefaultCursor)
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "SetDefaultCursor", g_l_ErrorLineNumber
End Sub

Public Sub LoadCursors()
    Dim str_FilePath As String
    
    On Error GoTo Error_Handler
    
    str_FilePath = App.Path + "\hourgla2.ani"
    m_l_hWaitCursor = LoadCursorFromFile(str_FilePath)
    
    str_FilePath = "NORMAL01.CUR"
    m_l_hDefaultCursor = LoadCursorFromFile(str_FilePath)

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "LoadCursors", g_l_ErrorLineNumber
End Sub

Public Sub DestroyCursors()
    On Error GoTo Error_Handler

    DestroyCursor m_l_hDefaultCursor
    DestroyCursor m_l_hWaitCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "DestroyCursors", g_l_ErrorLineNumber
End Sub

'**Function no longer used**

'Checks the value passed in.  If the string is empty then it
'changes it to a '0', if not it keeps it the same.
'
'This is to change any inputted values that are supposed to be numbers
'to a valid number.  So if no number is entered, the value of 0 is assumed

'Public Function ChkCurr(ByVal str_Input As String) As String
'    On Error GoTo Error_Handler
'
'    If str_Input = "" Then
'        ChkCurr = "00"
'    Else
'        ChkCurr = str_Input
'    End If
'
'    Exit Function
'
'Error_Handler:
'    g_l_ErrorLineNumber = Erl()
'    modDBHelper.LogErrorToDB "modMain", "ChkCurr", g_l_ErrorLineNumber
'End Function

Public Function IsValidCurrency(ByVal str_Input As String) As Boolean
    Dim objRE As RegExp
    
    On Error GoTo Error_Handler
    
    Set objRE = New RegExp
    objRE.pattern = "\d+(\.\d{0,2})?"
 
    If objRE.Test(str_Input) Then
        IsValidCurrency = True
    Else
        IsValidCurrency = False
    End If
    Set objRE = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "IsValidCurrency", g_l_ErrorLineNumber
    If Not objRE Is Nothing Then
        Set objRE = Nothing
    End If
End Function

Public Function IsValidLong(ByVal str_Input As String) As Boolean
    On Error GoTo Error_Handler
 
    If CCur(str_Input) = CLng(str_Input) Then
        IsValidLong = True
        Exit Function
    Else
        IsValidLong = False
        Exit Function
    End If
    
    'By default function return FALSE
    IsValidLong = False
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "IsValidLong", g_l_ErrorLineNumber
End Function

'This function opens an email ready to be sent through outlook.
Public Function SendEmail()
    Dim str_ESubject As String
    Dim str_EBody As String
    Dim str_NewFileName As String
    Dim obj_Outlook As Object
    Dim obj_OutlookItem As Object
    
    On Error GoTo Error_Handler
    
    str_ESubject = "Report from the Cost Estimate System"
    'SendTo = ""
    'CCTo = ""
    str_EBody = "Sending report generated from Cost Estimate System " & vbCrLf & vbCrLf
    str_NewFileName = "C:\Program Files\Project Plan\project_listing.rpt"
    
    Set obj_Outlook = CreateObject("Outlook.Application")
    Set obj_OutlookItem = obj_Outlook.CreateItem(0)
    
    obj_OutlookItem.Subject = str_ESubject
    'obj_OutlookItem.To = SendTo
    'obj_OutlookItem.CC = CCTo
    obj_OutlookItem.Body = str_EBody
    obj_OutlookItem.Attachments.Add (str_NewFileName) ' Must be complete path
    obj_OutlookItem.Display
    'obj_OutlookItem.send
    
    Set obj_OutlookItem = Nothing
    Set obj_Outlook = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "SendEmail", g_l_ErrorLineNumber
    If Not obj_OutlookItem Is Nothing Then
        Set obj_OutlookItem = Nothing
    End If
    If Not obj_Outlook Is Nothing Then
        Set obj_Outlook = Nothing
    End If
End Function

'MakeParameter - does typesafe array creation for use with Run* functions
Public Function MakeParameter(ByVal str_Name As String, _
                              ByVal PType As ADODB.DataTypeEnum, _
                              ByVal n_Size As Integer, _
                              ByVal str_Value As String)
    On Error GoTo Error_Handler
    
    MakeParameter = Array(str_Name, PType, n_Size, str_Value)
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "MakeParameter", g_l_ErrorLineNumber
End Function

Public Sub CollectParams(ByRef cmd As Command, ParamArray argparams() As Variant)
    Dim var_Params As Variant
    Dim l_Count As Long
    Dim v As Variant
    
    On Error GoTo Error_Handler
    
    var_Params = argparams(0)
    For l_Count = LBound(var_Params) To UBound(var_Params)
        If UBound(var_Params(l_Count)) = 3 Then
            ' Check for nulls.
            If TypeName(var_Params(l_Count)(3)) = "String" Then
                v = IIf(var_Params(l_Count)(3) = "", Null, var_Params(l_Count)(3))
            ElseIf IsNumeric(var_Params(l_Count)(3)) Then
                v = IIf(var_Params(l_Count)(3) < 0, Null, var_Params(l_Count)(3))
            Else
                v = var_Params(l_Count)(3)
            End If
            cmd.Parameters.Append cmd.CreateParameter(var_Params(l_Count)(0), _
                                                      var_Params(l_Count)(1), _
                                                      adParamInput, _
                                                      var_Params(l_Count)(2), _
                                                      v)
        Else
            cmd.Parameters.Append cmd.CreateParameter(var_Params(l_Count)(0), _
                                                      var_Params(l_Count)(1), _
                                                      adParamInput, _
                                                      var_Params(l_Count)(2), _
                                                      var_Params(l_Count)(3))
        End If
    Next l_Count
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "CollectParams", g_l_ErrorLineNumber
End Sub

'================================================================================
'parseHours = takes in a string with a colon and parses the string by putting the values
'before and after the colon into 2 variables passed into the function
'================================================================================

Public Sub ParseHours(ByVal str_InputValue As String, _
                      ByRef var_Hours As Variant, _
                      ByRef var_Minutes As Variant)
    Dim temp 'temp array to hold values from the split function
    
    On Error GoTo Error_Handler
    
    temp = Split(str_InputValue, ":") 'splits the string into two at the first instance of ":"
    
    'the values before and after the ":" are saved into two variables passed in by reference
    var_Hours = temp(0) '
    
    'if no minutes were entered check and put 0 if empty
    'If UUBound(temp) < 1 Then
    '    minutes = 0
    'Else
    var_Minutes = temp(1)
   ' End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "ParseHours", g_l_ErrorLineNumber
End Sub

Public Sub AddTime(ByRef hours As Variant, ByRef minutes As Variant)
    Dim temp  'temp array to hold values from the split function
    Dim temp2
    
    On Error GoTo Error_Handler
    
    temp2 = hours
    
    'The minutes are passed already added together
    'we must maintain a base of 60, since minutes do not go higher than 59
    
    temp = RTrim(Round(minutes / 60, 3))
    temp = Split(temp, ".")
    temp(1) = (temp(1) / 100) * 60
    
    'add the hours added on
    hours = hours + temp(0) + temp2
    
    'the remainder of the division are the minutes
    minutes = temp(1)
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "AddTime", g_l_ErrorLineNumber
End Sub

Public Function MinutesToDecimal(ByVal minutes As Variant) As String
    Dim temp
    
    On Error GoTo Error_Handler
    
    temp = Round(minutes / 60, 2)
    
    If temp = 0 Then
        temp = 0
    Else
        temp = Split(temp, ".")
        MinutesToDecimal = temp(1)
    End If

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "MinutesToDecimal", g_l_ErrorLineNumber
End Function

'Grabs the size of the an array
Public Function UUBound(ByVal var_PassedArray As Variant) As Long
    Dim l_Size As Long
    
    On Error Resume Next
    
    l_Size = UBound(var_PassedArray) 'throws a subscript out of bounds error
    If Err = 9 Then
        UUBound = -1
    Else
        UUBound = l_Size
    End If
End Function

Public Function DecimalToMinutes(ByVal time As String) As String
    'Convert a number of hours into a time
    Dim hours As Integer
    Dim minutes As Integer
    Dim hours_s As String
    Dim minutes_s As String
    
    On Error GoTo Error_Handler
    
    hours = Int(time)
    minutes = (time - hours) * 60
    hours_s = hours
    minutes_s = minutes
    If Len(minutes_s) = 1 Then minutes_s = "0" & minutes_s
    DecimalToMinutes = hours_s & ":" & minutes_s

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "DecimalToMinutes", g_l_ErrorLineNumber
End Function

Public Function ColumnTotals(ByVal RS As Recordset, ByVal column As String) As Currency
    Dim l_Count As Long
    'Holds the ongoing total
    Dim curr_Temp As Currency
    'grid.Bookmark = grid.FirstRow
    On Error GoTo Error_Handler

    'Set pointer to first row
    If (RS.RecordCount > 0) Then
       
        RS.MoveFirst
        'On the input value 'column',
        Do While Not RS.EOF
            If IsNumeric(RS.Fields(column).Value) Then
                curr_Temp = curr_Temp + CCur(RS.Fields(column).Value)
            End If

            'If last row reached, do not look for last row +1 else error
            'If (l_Count <> (rs.RecordCount - 1)) And _
            '   (l_Count <= (rs.RecordCount - 1)) Then
                    'Get next row's bookmark value
                    'grid.Bookmark = grid.RowBookmark(grid.Row + 1)
                    
            'End If
            RS.MoveNext
        Loop
        'ColumnTotals = Round(curr_Temp, 2) 'round to 2 decimal places
        ColumnTotals = curr_Temp
    End If
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "ColumnTotals", g_l_ErrorLineNumber
End Function

'Totals the cost of all the parts in OEM Kits attached to a specific bus estimate.
'Input is the recordset of oemkits attached.

Public Function OEMKitsTotal(ByVal OEMKitsList As ADODB.Recordset) As Currency
    Dim runningTotal As Currency
    Dim tempRS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    runningTotal = 0
    OEMKitsList.MoveFirst
    
    'loop through all the attached parts
    Do While Not OEMKitsList.EOF
        
        'check to see if the part is stock coded or non stock coded (temp)
        Set tempRS = modDBHelper.SearchSCPart("CES_INQUIRY.SEARCH_SC_PART", _
                                                      OEMKitsList.Fields("part_number").Value, _
                                                      "0", _
                                                      "", _
                                                      "", _
                                                      2)
                                                      
        If tempRS.RecordCount > 0 Then
            runningTotal = runningTotal + tempRS("PRICE").Value
        Else
            Set tempRS = modDBHelper.SearchOEMKits("CES_INQUIRY.SEARCH_OEM_KITS", _
                                               OEMKitsList.Fields("part_number").Value, _
                                               " ")
            If tempRS.RecordCount > 0 Then
                 runningTotal = runningTotal + tempRS("estimated_cost").Value
            End If
            
        End If
        OEMKitsList.MoveNext
    Loop
    
    OEMKitsTotal = runningTotal
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modName", "OEMKitsTotal", g_l_ErrorLineNumber
End Function

Public Function CheckPercent(ByVal str_Percent As String) As Boolean
    Dim l_Length As Long
    Dim l_Counter As Long
    Dim str_Char As String
    Dim l_Index As Long
    Dim dbl_Percent As Double
    Dim str_Temp As String
    
    On Error GoTo Error_Handler

    l_Length = Len(str_Percent)
    'Only digits and dot are alloved in the str_Percent string
    For l_Counter = 1 To l_Length
        str_Char = Mid(str_Percent, l_Counter, 1)
        If str_Char <> "0" And str_Char <> "1" And str_Char <> "2" And _
           str_Char <> "3" And str_Char <> "4" And str_Char <> "5" And _
           str_Char <> "6" And str_Char <> "7" And str_Char <> "8" And _
           str_Char <> "9" And str_Char <> "." Then
            CheckPercent = False
            Exit Function
        End If
    Next l_Counter
 
    str_Temp = str_Percent
    'No more than one dot is allowed in the str_Percent string (i.e. or no dot, or one
    'dot only)
    l_Index = InStr(str_Temp, ".")
    If l_Index > 0 Then
        str_Temp = Mid(str_Temp, l_Index + 1)
        l_Index = InStr(str_Temp, ".")
        If l_Index > 0 Then
            CheckPercent = False
            Exit Function
        End If
    End If
    
    'Percent value can be >=0 and <= 100
    dbl_Percent = CDbl(str_Percent)
    If dbl_Percent < 0 Or dbl_Percent > 100 Then
        CheckPercent = False
        Exit Function
    End If
    
    'By default function return TRUE.
    CheckPercent = True
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "CheckPercent", g_l_ErrorLineNumber
End Function

Public Function ChangeNullToOneSpase(ByVal str_ToChange As Variant) As String
    On Error GoTo Error_Handler

    If IsNull(str_ToChange) = True Then
        ChangeNullToOneSpase = " "
        Exit Function
    Else
        ChangeNullToOneSpase = str_ToChange
        Exit Function
    End If
    
    'By default function returns string with one space character.
    ChangeNullToOneSpase = " "
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "ChangeNullToOneSpase", g_l_ErrorLineNumber
End Function

Public Sub AddLastPartToSubkitA(ByVal str_KitNumberPassed As String, _
                                ByVal str_PartTypePassed As String, _
                                ByVal str_SupplierNumberPassed As String, _
                                ByVal str_SupplierNamePassed As String, _
                                ByVal str_StockCodePassed As String, _
                                ByVal str_QtyPassed As String, _
                                ByVal str_DescriptionPassed As String)
    
    Dim RS As ADODB.Recordset
    Dim l_RetVal As Long
    Dim l_Result As Long
    Dim str_PartType As String
    Dim str_OEMNumber As String
    Dim str_OEM As String
    Dim str_TTCCode As String
    Dim str_QTY As String
    Dim str_RefNumber As String
    Dim str_Description As String
    Dim l_SeqNumber As Long
    Dim l_Count As Long
    Dim str_SubKitLetter As String
    Dim l_InsertedCount As Long

    On Error GoTo Error_Handler

    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.GetSubKits("CES_INQUIRY.GET_SUB_KITS", _
                                    str_KitNumberPassed)

    'Delete all records from the SUB_KITS table where
    'kit_part_number = str_KitNumberPassed
    l_Result = modDBHelper.DeleteSubKits( _
                                "CES_DELETE.DELETE_SUB_KITS", _
                                l_RetVal, _
                                str_KitNumberPassed)

    If RS.RecordCount > 0 Then
        'Find last item under "KIT A"
        l_InsertedCount = 1
        RS.MoveFirst
        If RS.RecordCount > 1 Then
            RS.MoveNext
            For l_Count = 1 To RS.RecordCount
                str_RefNumber = ChangeNullToOneSpase(RS.Fields("REF #"))
                If Left(str_RefNumber, 1) = "A" Then
                    l_InsertedCount = l_InsertedCount + 1
                Else
                    str_SubKitLetter = "A" + CStr(l_InsertedCount)
                    Exit For
                End If
                RS.MoveNext
            Next l_Count
        End If

        'Insert record with "REF #" = "KIT A"
        RS.MoveFirst
        str_PartType = ChangeNullToOneSpase(RS.Fields("PART TYPE"))
        str_OEMNumber = ChangeNullToOneSpase(RS.Fields("OEM #"))
        str_OEM = ChangeNullToOneSpase(RS.Fields("OEM"))
        str_TTCCode = ChangeNullToOneSpase(RS.Fields("TTC CODE"))
        str_QTY = ChangeNullToOneSpase(RS.Fields("QTY"))
        str_RefNumber = ChangeNullToOneSpase(RS.Fields("REF #"))
        str_Description = ChangeNullToOneSpase(RS.Fields("DESCRIPTION"))
        l_SeqNumber = CLng(RS.Fields("SEQUENCE"))
        l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", _
                                            l_RetVal, _
                                            str_KitNumberPassed, _
                                            str_PartType, _
                                            str_OEMNumber, _
                                            str_OEM, _
                                            str_TTCCode, _
                                            str_QTY, _
                                            str_RefNumber, _
                                            str_Description, _
                                            l_SeqNumber)

        If RS.RecordCount > 1 Then
            'Insert all records after "REF #" = "KIT A" and before record with
            '"REF #" = "KIT B"
            RS.MoveNext
            For l_Count = 2 To l_InsertedCount
                str_PartType = ChangeNullToOneSpase(RS.Fields("PART TYPE"))
                str_OEMNumber = ChangeNullToOneSpase(RS.Fields("OEM #"))
                str_OEM = ChangeNullToOneSpase(RS.Fields("OEM"))
                str_TTCCode = ChangeNullToOneSpase(RS.Fields("TTC CODE"))
                str_QTY = ChangeNullToOneSpase(RS.Fields("QTY"))
                str_RefNumber = ChangeNullToOneSpase(RS.Fields("REF #"))
                str_Description = ChangeNullToOneSpase(RS.Fields("DESCRIPTION"))
                l_SeqNumber = CLng(RS.Fields("SEQUENCE"))
                l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", _
                                                    l_RetVal, _
                                                    str_KitNumberPassed, _
                                                    str_PartType, _
                                                    str_OEMNumber, _
                                                    str_OEM, _
                                                    str_TTCCode, _
                                                    str_QTY, _
                                                    str_RefNumber, _
                                                    str_Description, _
                                                    l_SeqNumber)

                RS.MoveNext
            Next l_Count

            'Insert a new record.
            l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", _
                                                l_RetVal, _
                                                str_KitNumberPassed, _
                                                str_PartTypePassed, _
                                                str_SupplierNumberPassed, _
                                                str_SupplierNamePassed, _
                                                str_StockCodePassed, _
                                                str_QtyPassed, _
                                                str_SubKitLetter, _
                                                str_DescriptionPassed, _
                                                l_Count)

            'Insert rest of records (from the record with "REF #" = "KIT B").
            'Data is the same, just increase "SEQUENMCE" field by one
            RS.MoveFirst
            RS.Move l_InsertedCount
            For l_Count = l_InsertedCount + 1 To RS.RecordCount
                str_PartType = ChangeNullToOneSpase(RS.Fields("PART TYPE"))
                str_OEMNumber = ChangeNullToOneSpase(RS.Fields("OEM #"))
                str_OEM = ChangeNullToOneSpase(RS.Fields("OEM"))
                str_TTCCode = ChangeNullToOneSpase(RS.Fields("TTC CODE"))
                str_QTY = ChangeNullToOneSpase(RS.Fields("QTY"))
                str_RefNumber = ChangeNullToOneSpase(RS.Fields("REF #"))
                str_Description = ChangeNullToOneSpase(RS.Fields("DESCRIPTION"))
                l_SeqNumber = CLng(RS.Fields("SEQUENCE"))
                l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", _
                                                    l_RetVal, _
                                                    str_KitNumberPassed, _
                                                    str_PartType, _
                                                    str_OEMNumber, _
                                                    str_OEM, _
                                                    str_TTCCode, _
                                                    str_QTY, _
                                                    str_RefNumber, _
                                                    str_Description, _
                                                    l_Count + 1)

                RS.MoveNext
            Next l_Count
        End If
    End If

    If Not RS Is Nothing Then
        Set RS = Nothing
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "AddLastPartToSubkitA", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Public Sub SetWindowLayered(ByVal frm_PassedForm As Form)
    Dim l_Ret As Long
    
    On Error GoTo Error_Handler
    
    'Set the window style to 'Layered'
    l_Ret = modMain.GetWindowLong(frm_PassedForm.hWnd, modMain.g_const_GWL_EXSTYLE)
    l_Ret = l_Ret Or modMain.g_const_WS_EX_LAYERED
    SetWindowLong frm_PassedForm.hWnd, g_const_GWL_EXSTYLE, l_Ret
    'Set the opacity of the layered window to 0 - form became invisible.
    'In Timer1 we will set form opaque.
    SetLayeredWindowAttributes frm_PassedForm.hWnd, 0, 0, g_const_LWA_ALPHA

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "SetWindowLayered", g_l_ErrorLineNumber
End Sub

Public Sub ChangeOpasityLayeredForm(ByVal frm_PassedForm As Form, ByVal tmrTimer As Control, _
                            ByVal l_From As Long, ByVal l_To As Long, ByVal l_Step As Long)
    Dim l_Count As Long
    
    On Error GoTo Error_Handler
    
    For l_Count = l_From To l_To Step l_Step
        SetLayeredWindowAttributes frm_PassedForm.hWnd, 0, CByte(l_Count), 2
    Next l_Count
    tmrTimer.Interval = 0

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "CloseLayeredForm", g_l_ErrorLineNumber
End Sub

Public Sub SetTopmost(Form As Form, ByVal Topmost As Boolean)
    Dim hWndInsertAfter As Long
    
    If Topmost Then
        hWndInsertAfter = HWND_TOPMOST
    Else
        hWndInsertAfter = HWND_NOTOPMOST
    End If
    
    SetWindowPos Form.hWnd, hWndInsertAfter, 0, 0, 0, 0, _
        SWP_NOSIZE Or SWP_NOMOVE Or SWP_NOACTIVATE
End Sub


'================================================================================
'
'================================================================================

Public Sub ArchRBPSubsets(ByVal RBNumber As String)
    On Error GoTo Error_Handler
    Dim RS As ADODB.Recordset
    Dim formobject As Object
    Set RS = New ADODB.Recordset
    'Get RB part details
    Set RS = modDBHelper.SearchRBPart("CES_INQUIRY.SEARCH_RBPART", _
                                              RBNumber, _
                                              Val(""), _
                                              "", _
                                              "", _
                                              CLng(2))
    'Input RB part details into RB form
    If RS.RecordCount > 0 Then
    Set formobject = New frmRebuiltPartsMain
    formobject.PassValues RS.Fields.Item("MMS STOCK CODE"), RS.Fields.Item("REBUILT NUMBER"), RS.Fields.Item("ROWID")
    formobject.RefreshForm
    'Archive RB part
    formobject.Archive_RB True
    
    Set formobject = Nothing
    End If
    
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "ArchRBPSubsets", g_l_ErrorLineNumber
End Sub
'================================================================================
'
'================================================================================

'Public Sub ArchRBPSubsetsVeh(ByVal RBNumber As String)
    'On Error GoTo Error_Handler
    'Dim RS As ADODB.Recordset
 
   ' Set RS = New ADODB.Recordset
    'Get RB part details
    'Set RS = modDBHelper.SearchRBPart("CES_INQUIRY.SEARCH_RBPART", _
                                              RBNumber, _
                                              Val(""), _
                                              "", _
                                              "", _
                                              CLng(2))
    'Input RB part details into RB form
    'MsgBox RBNumber, vbOKOnly, "Testing"
    'If RS.RecordCount > 0 Then

    'frmRebuiltPartsMain.PassValues RS.Fields.Item("MMS STOCK CODE"), RS.Fields.Item("REBUILT NUMBER"), RS.Fields.Item("ROWID")
   ' frmRebuiltPartsMain.RefreshForm
    'Archive RB part
    'frmRebuiltPartsMain.cmdArchive_Click
   ' Else
  '  End If
    
    
 '   Exit Sub
'Error_Handler:
  '  g_l_ErrorLineNumber = Erl()
 '   modDBHelper.LogErrorToDB "modMain", "ArchRBPSubsets", g_l_ErrorLineNumber
'End Sub


'================================================================================
'
'================================================================================

Public Sub ArchVehicleRBParts(ByVal LinkNumber As String)
    On Error GoTo Error_Handler
    Dim RSV As ADODB.Recordset
    Set RSV = New ADODB.Recordset
    Set RSV = modDBHelper.RetrieveRBPUsed("CES_INQUIRY.RETRIEVE_RBP_USED", _
                                         LinkNumber, _
                                         "BUS")
    If RSV.RecordCount > 0 Then
        Do While RSV.EOF = False
        'Calls up details and Archives
        ArchRBPSubsets RSV.Fields.Item("REBUILT NUMBER")
        RSV.MoveNext
        Loop
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "ArchVehicleRBParts", g_l_ErrorLineNumber
End Sub

Forms :
Option Explicit

Private m_str_Msg As String

Private Sub cmdAdd_Click()
    Dim RS As ADODB.Recordset
    Dim str_LabourDefinition As String
    Dim dbl_RatePerHour As Double
    Dim dbl_HoursPerWeek As Double
    Dim dbl_OverheadType As Double
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim l_WageGroup As Long
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor

    'Check that user typed some data into txtLabourDefinition edit-box.
    str_LabourDefinition = Trim(txtLabourDefinition.Text)
    If str_LabourDefinition = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Labour definition can not be empty."
        MsgBox m_str_Msg, vbOKOnly + vbInformation
        txtLabourDefinition.SetFocus
        Exit Sub
    End If

    'Check that user choused some data from the cboRatePerHour combo-box.
    If cboRatePerHour.Text = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please choose Rate Per Hour."
        MsgBox m_str_Msg, vbOKOnly + vbInformation
        cboRatePerHour.SetFocus
        Exit Sub
    Else
        dbl_RatePerHour = CDbl(cboRatePerHour.Text)
    End If
    
    'Check that user choused some data from the cboHoursPerWeek combo-box.
    If cboHoursPerWeek.Text = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please choose Hours Per Week."
        MsgBox m_str_Msg, vbOKOnly + vbInformation
        cboHoursPerWeek.SetFocus
        Exit Sub
    Else
        dbl_HoursPerWeek = CDbl(cboHoursPerWeek.Text)
    End If
    
    'Check that data from the txtLabourDefinition edit-box is not duplicated in the
    'EMPL_CLASS table.
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.SearchEmplClassLabourDefn( _
                                        "CES_INQUIRY.SEARCH_EMPL_CLASS_LABOUR_DEFN", _
                                        str_LabourDefinition)
    If RS.RecordCount > 0 Then
        Set RS = Nothing
        Call SetDefaultCursor
        m_str_Msg = "The same Labour Definition already exists."
        MsgBox m_str_Msg, vbOKOnly + vbInformation
        txtLabourDefinition.SetFocus
        Exit Sub
    End If
    
    'Get value from the EMPLOYEE_SALARIES.WAGE_GROUP.
    Set RS = modDBHelper.SearchEmployeeSalaries( _
                                        "CES_INQUIRY.SEARCH_EMPLOYEE_SALARIES", _
                                        dbl_RatePerHour)
    If RS.RecordCount = 0 Then
        Set RS = Nothing
        Call SetDefaultCursor
        m_str_Msg = "The Rate Per Hour = '" + CStr(dbl_RatePerHour) + "' data in "
        m_str_Msg = m_str_Msg + "the EMPLOYEE_SALARIES does not exist. Please contact "
        m_str_Msg = m_str_Msg + "administrator."
        MsgBox m_str_Msg, vbOKOnly + vbInformation
        Exit Sub
    Else
        l_WageGroup = CLng(RS.Fields.Item("wage_group"))
    End If
    
    Set RS = Nothing
    
    'Insert a new record into the EMPL_CLASS table.
    l_Result = modDBHelper.AddEmplClass("CES_UPDATE.ADD_EMPL_CLASS", _
                                        l_RetVal, _
                                        str_LabourDefinition, _
                                        l_WageGroup, _
                                        dbl_HoursPerWeek, _
                                        dbl_OverheadType)
    If l_Result > 0 Then
        Call SetDefaultCursor
        m_str_Msg = "Employee Group is added."
        MsgBox m_str_Msg, vbOKOnly + vbInformation
        
        'Refresh grdEmployeeGroup grid in the frmEmployeeGroup screen.
        Call frmEmployeeGroup.PopulateGrid
        
        'Add record to the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "Employee Group was added to the System", _
                            l_Result, _
                            "LT", _
                            "Labour Definition ---> " + Trim(txtLabourDefinition.Text), _
                            "Rate Per Hour ---> " + Trim(cboRatePerHour.Text), _
                            "Hours Per Week ---> " + Trim(cboHoursPerWeek.Text), _
                            "Overhead Type ---> " + Trim(txtOverheadType.Text))
        Unload Me
    Else
        Call SetDefaultCursor
        'For some reason record was not inserted into the EMPL_CLASS table.
        m_str_Msg = "Employee Group is not added. Please contact administrator."
        MsgBox m_str_Msg, vbOKOnly + vbInformation
    End If
    
        Call SetDefaultCursor
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdAdd_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub cmdCancel_Click()
    On Error GoTo Error_Handler

    Unload Me
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdAdd_Click", g_l_ErrorLineNumber
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor

    Call PopulateCombos
    
    txtOverheadType.Text = CStr(g_dbl_NonProductiveTimeAdj)
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub PopulateCombos()
    Dim RS As ADODB.Recordset
    Dim l_Count As Long
    
    On Error GoTo Error_Handler

    For l_Count = 1 To 168 ' 7 days x 24 hours = 168 hours in one week.
        cboHoursPerWeek.AddItem CStr(l_Count)
    Next l_Count
    cboHoursPerWeek.Text = "40"
    
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.RetrieveEmployeeSalaries("CES_INQUIRY.RETRIEVE_EMPLOYEE_SALARIES")
    
    Set cboRatePerHour.RowSource = RS
    cboRatePerHour.ListField = "RATE PER HOUR"
    
    Set RS = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateCombos", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub txtLabourDefinition_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim str_Data As String
    Dim l_CursorPosition As Long
    
    On Error GoTo Error_Handler

    'Convert data in the txtLabourDefinition edit-box to upper case.
    l_CursorPosition = txtLabourDefinition.SelStart
    str_Data = txtLabourDefinition.Text
    str_Data = UCase(str_Data)
    txtLabourDefinition.Text = str_Data
    txtLabourDefinition.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtLabourDefinition_KeyUp", g_l_ErrorLineNumber
End Sub
---
'=================================================================
'frmAddLabourTask.frm
'
'Adds a non stock coded part to the cost tracking system database.
'===============================================================
Option Explicit

Private m_str_Hours As String
Private m_str_Minutes As String
Private m_str_Msg As String
Private Const m_str_const_MsgBoxCaption As String = "Add / Update Labour Tasks"

Public m_str_TypeID As String
Public m_str_PartID As String
Public m_str_LinkNumber As String
Public m_str_AuditReference As String

Private Sub cmdClose_Click()
    On Error GoTo Error_Handler
    
    Unload Me
    Exit Sub
    
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdClose_Click", g_l_ErrorLineNumber
End Sub

'The cmdAddLabourTask_Click button either Adds a new non-stock coded part into
'the cost estimate system or updates an existing non-stock coded part
Private Sub cmdAddLabourTask_Click()
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim l_Count As Long
    Dim str_FixedMins As String
    Dim str_FixedHours As String
    Dim str_TimeInDecimal As String
    Dim str_AdjTimeInDecimal As String
    Dim str_LabourType As String
    Dim RS As ADODB.Recordset
    Dim str_PercentUsage As String
    Dim str_TaskDescription As String
    Dim str_CostCentre As String
    Dim str_LabourPosition As String
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    'Make sure that user choused something from the cboTaskDescription combo-box.
    str_TaskDescription = Trim(cboTaskDescription.Text)
    If str_TaskDescription = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please choose Task Description."
        MsgBox m_str_Msg, vbExclamation Or vbOKOnly, m_str_const_MsgBoxCaption
        cboTaskDescription.SetFocus
        Exit Sub
    End If
    
    'Make sure that user choused something from the cboLabourPosition combo-box.
    str_LabourPosition = Trim(cboLabourPosition.Text)
    If str_LabourPosition = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please choose Labour Position."
        MsgBox m_str_Msg, vbExclamation Or vbOKOnly, m_str_const_MsgBoxCaption
        cboLabourPosition.SetFocus
        Exit Sub
    End If
    
    'Make sure that user choused something from the cboCostCentre combo-box.
    str_CostCentre = Trim(cboCostCentre.Text)
    If str_CostCentre = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please choose Cost Centre."
        MsgBox m_str_Msg, vbExclamation Or vbOKOnly, m_str_const_MsgBoxCaption
        cboCostCentre.SetFocus
        Exit Sub
    End If
        
    'Confirm that the percent is entered correctly
    str_PercentUsage = Trim(txtPercentUsage.Text)
    If str_PercentUsage = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please enter Percent Usage."
        MsgBox m_str_Msg, vbExclamation Or vbOKOnly, m_str_const_MsgBoxCaption
        txtPercentUsage.SetFocus
        Exit Sub
    End If
    If CheckPercent(str_PercentUsage) = False Then
        Call SetDefaultCursor
        m_str_Msg = "Percent Usage is not entered correctly. Percent Usage can be a "
        m_str_Msg = m_str_Msg + "positive number between 0 and 100 inclusive with "
        m_str_Msg = m_str_Msg + "possible fraction."
        MsgBox m_str_Msg, vbExclamation Or vbOKOnly, m_str_const_MsgBoxCaption
        txtPercentUsage.SetFocus
        Exit Sub
    End If

    str_PercentUsage = Replace(str_PercentUsage, ".", ",")
    
    'Confirm that the hours are entered correctly
    str_FixedHours = Trim(txtHoursRequired.Text)
    If str_FixedHours = "" Then
        str_FixedHours = "0"
        txtHoursRequired.Text = "0"
    End If
    
    If Not IsValidLong(str_FixedHours) Or Int(str_FixedHours) < 0 Then
        Call SetDefaultCursor
        m_str_Msg = "Hours not entered correctly."
        MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
        txtHoursRequired.SetFocus
        Exit Sub
    End If
    str_FixedHours = Round(str_FixedHours, 0)
    
    'Confirm that the minutes are entered correctly
    str_FixedMins = Trim(txtMinutesRequired.Text)
    If str_FixedMins = "" Then
        str_FixedMins = "00"
        txtMinutesRequired.Text = "00"
    End If
    If Not IsValidLong(str_FixedHours) Then
        Call SetDefaultCursor
        m_str_Msg = "Minutes not entered correctly."
        MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
        txtMinutesRequired.SetFocus
        Exit Sub
    End If
    If Int(str_FixedMins) < 0 Or Int(str_FixedMins) > 59 Then
        Call SetDefaultCursor
        m_str_Msg = "Minutes must be between 0 and 59."
        MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
        txtMinutesRequired.SetFocus
        Exit Sub
    End If
    str_FixedMins = Round(str_FixedMins, 0)
    If (Len(str_FixedMins) = 1) Then
        str_FixedMins = 0 & str_FixedMins
    End If
    
    str_TimeInDecimal = str_FixedHours & "." & MinutesToDecimal(str_FixedMins)
    
    str_AdjTimeInDecimal = CStr(CDbl(str_TimeInDecimal) / g_dbl_NonProductiveTimeAdj)
    
    If cmdAddLabourTask.Caption = "Add Labour Task" Then
        l_Result = modDBHelper.AddLabourTasks("CES_UPDATE.ADD_LABOUR_TASKS", _
                                              l_RetVal, _
                                              str_LabourPosition, _
                                              m_str_LinkNumber, _
                                              m_str_TypeID, _
                                              str_CostCentre, _
                                              str_TaskDescription, _
                                              str_LabourType, _
                                              str_PercentUsage, _
                                              str_FixedHours & ":" & str_FixedMins, _
                                              DecimalToMinutes(str_AdjTimeInDecimal), _
                                              CDbl(str_TimeInDecimal), _
                                              " ", _
                                              g_str_UserName)
        If (l_Result = 0) Then
            Call SetDefaultCursor
            m_str_Msg = "Labour Task has been added."
            MsgBox m_str_Msg, vbInformation Or vbOKOnly, m_str_const_MsgBoxCaption
        Else
            Call SetDefaultCursor
            m_str_Msg = "There was an error adding the Labour Task.  Please Contact "
            m_str_Msg = m_str_Msg + "Administrator."
            MsgBox m_str_Msg, vbCritical Or vbOKOnly, m_str_const_MsgBoxCaption
            Exit Sub
        End If
        
        'Add record to the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "Add Labour Task", _
                            m_str_AuditReference, _
                            m_str_TypeID, _
                            "Task Description ---> " + str_TaskDescription, _
                            "Labour Position ---> " + str_LabourPosition, _
                            "Cost Centre ---> " + str_CostCentre, _
                            "Percent Usage ---> " + str_PercentUsage, _
                            "Hours Reqired (Hours) ---> " + str_FixedHours, _
                            "Hours Reqired (Minutes) ---> " + str_FixedMins)

        ' If adding a labour task was performed inside a rebuilt part then cycle
        ' changes to all estimates containing this rebuilt part
        If m_str_TypeID = "RB" Then
            
            'Now find all estimates where current Rebuilt Part Estimate is present.
            Set RS = New ADODB.Recordset
            
            'In the SC_PARTS_USED table find all Estimates where the current RBE is present.
            Set RS = modDBHelper.RetrieveESTToPropagateRB("CES_INQUIRY.RETRIEVE_EST_TO_PROPAGATE_RB", _
                                                          m_str_AuditReference)
            If RS.RecordCount > 0 Then
                RS.MoveFirst
                    For l_Count = 0 To RS.RecordCount - 1
                        'Add records to the AUDIT_MODIFY_HISTORY table.
                        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "Indirect change. Labour was added from the Rebuilt Part Estimate " + m_str_AuditReference, _
                            RS.Fields.Item("link_code"), _
                            RS.Fields.Item("link_type"), _
                            "Task Description ---> " + str_TaskDescription, _
                            "Labour Position ---> " + str_LabourPosition, _
                            "Cost Centre ---> " + str_CostCentre, _
                            "Percent Usage ---> " + str_PercentUsage, _
                            "Hours Reqired (Hours) ---> " + str_FixedHours, _
                            "Hours Reqired (Minutes) ---> " + str_FixedMins)
                        RS.MoveNext
                    Next l_Count
            End If
            Set RS = Nothing
        End If
    Else 'If cmdAddLabourTask.Caption = "Update Labour" Then
        l_Result = modDBHelper.UpdateLabourTasks("CES_UPDATE.UPDATE_LABOUR_TASKS", _
                                                 l_RetVal, _
                                                 str_LabourPosition, _
                                                 m_str_LinkNumber, _
                                                 m_str_TypeID, _
                                                 str_CostCentre, _
                                                 str_TaskDescription, _
                                                 str_LabourType, _
                                                 str_PercentUsage, _
                                                 str_FixedHours & ":" & str_FixedMins, _
                                                 DecimalToMinutes(str_AdjTimeInDecimal), _
                                                 m_str_PartID, _
                                                 CDbl(str_TimeInDecimal), _
                                                 g_str_UserName)
    
        If (l_Result = 0) Then
            Call SetDefaultCursor
            m_str_Msg = "Labour Task has been updated."
            MsgBox m_str_Msg, vbInformation Or vbOKOnly, m_str_const_MsgBoxCaption
        Else
            Call SetDefaultCursor
            m_str_Msg = "There was an error Updating the Labour Task.  Please Contact "
            m_str_Msg = m_str_Msg + "Administrator."
            MsgBox m_str_Msg, vbCritical Or vbOKOnly, m_str_const_MsgBoxCaption
            Exit Sub
        End If
        
        'Add record to the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "Update Labour Task", _
                            m_str_AuditReference, _
                            m_str_TypeID, _
                            "Task Description ---> " + str_TaskDescription, _
                            "Labour Position ---> " + str_LabourPosition, _
                            "Cost Centre ---> " + str_CostCentre, _
                            "Percent Usage ---> " + str_PercentUsage, _
                            "Hours Reqired (Hours) ---> " + str_FixedHours, _
                            "Hours Reqired (Minutes) ---> " + str_FixedMins)
        
        ' If updating a labour task was performed inside a rebuilt part then cycle
        ' changes to all estimates containing this rebuilt part
        If m_str_TypeID = "RB" Then
            
            'Now find all estimates where current Rebuilt Part Estimate is present.
            Set RS = New ADODB.Recordset
            
            'In the SC_PARTS_USED table find all Estimates where the current RBE is present.
            Set RS = modDBHelper.RetrieveESTToPropagateRB("CES_INQUIRY.RETRIEVE_EST_TO_PROPAGATE_RB", _
                                                          m_str_AuditReference)
            If RS.RecordCount > 0 Then
                RS.MoveFirst
                    For l_Count = 0 To RS.RecordCount - 1
                        'Add records to the AUDIT_MODIFY_HISTORY table.
                        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "Indirect change. Labour was updated from the Rebuilt Part Estimate " + m_str_AuditReference, _
                            RS.Fields.Item("link_code"), _
                            RS.Fields.Item("link_type"), _
                            "Task Description ---> " + str_TaskDescription, _
                            "Labour Position ---> " + str_LabourPosition, _
                            "Cost Centre ---> " + str_CostCentre, _
                            "Percent Usage ---> " + str_PercentUsage, _
                            "Hours Reqired (Hours) ---> " + str_FixedHours, _
                            "Hours Reqired (Minutes) ---> " + str_FixedMins)
                        RS.MoveNext
                    Next l_Count
            End If
            Set RS = Nothing
        End If
        Unload Me
    End If 'If cmdAddLabourTask.Caption = "Add Labour Task" Then
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdAddLabourTask_Click", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    Call SetDefaultCursor
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    Call PopulateDropdowns
    If (m_str_PartID <> "") Then
        cmdAddLabourTask.Caption = "Update Labour"
        Me.Caption = "Update a Labour Task"
        fraAddLabourTask.Caption = "Update a Labour Task"
        'Prepare to retrieve data
        Call PopulateFields
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub PopulateDropdowns()
    Dim RS As ADODB.Recordset

    On Error GoTo Error_Handler

    'Set RS = New ADODB.Recordset
    'Load the data into the input forms for editing
    
    Set RS = modDBHelper.RetrieveTaskDescription("CES_INQUIRY.RETRIEVE_TASK_DESCRIPTION")
    Set cboTaskDescription.RowSource = RS
    cboTaskDescription.ListField = "TASK DESCRIPTION"
    
    Set RS = modDBHelper.RetrieveLabourPosition("CES_INQUIRY.RETRIEVE_LABOUR_POSITION")
    Set cboLabourPosition.RowSource = RS
    cboLabourPosition.ListField = "LABOUR_DEFN"
    
    Set RS = modDBHelper.RetrieveCostCentres("CES_INQUIRY.RETRIEVE_COST_CENTRES")
    Set cboCostCentre.RowSource = RS
    cboCostCentre.ListField = "COST_CENTRE"

    Set RS = Nothing
    
    Exit Sub
    
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateDropdowns", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub PopulateFields()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    m_str_Hours = " "
    m_str_Minutes = " "
    'Query database to load vehicle estimate
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.RetrieveMBAllLabour("CES_INQUIRY.RETRIEVE_MB_ALL_LABOUR", m_str_PartID)
    If RS.RecordCount > 0 Then
        'RS.Filter = "rowid = '" + m_str_PartID + "'"
        ParseHours RS.Fields.Item("HRS_REQD"), m_str_Hours, m_str_Minutes
        
        'Load values into text boxes
        txtHoursRequired.Text = m_str_Hours
        txtMinutesRequired.Text = m_str_Minutes
        txtPercentUsage.Text = Replace(RS.Fields.Item("USAGE"), ",", ".")
        cboTaskDescription.Text = RS.Fields.Item("TASK")
        cboCostCentre.Text = RS.Fields.Item("COSTCENTRE")
        cboLabourPosition.Text = RS.Fields.Item("LABOUR_DEFN")
    End If
       
    Set RS = Nothing
    Exit Sub
    
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateFields", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor
    m_str_TypeID = ""
    m_str_PartID = ""
    m_str_LinkNumber = ""
    Unload Me
        
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub fraAddLabourTask_DragDrop(Source As Control, X As Single, Y As Single)

End Sub
Option Explicit
Private m_str_Msg As String

Private Sub cmdAdd_Click()
    Dim RS As ADODB.Recordset
    Dim str_BusDescription As String
    Dim l_Result As Long
    Dim l_RetVal As Long
    
    On Error GoTo Error_Handler

    Call SetWaitCursor

    str_BusDescription = Trim(txtBusDescription.Text)
    'Check that data in the txtBusDescription edit-box is not empty.
    If str_BusDescription = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Vehicle Description can not be empty string."
        MsgBox m_str_Msg, vbOKOnly + vbInformation
        txtBusDescription.SetFocus
        Exit Sub
    End If
    
    'Check that entered bus description is not duplicated in the LIST_OF_BUSES table.
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.RetrieveBusDescription("CES_INQUIRY.RETRIEVE_BUS_DESCRIPTION", _
                                                str_BusDescription)

    If RS.RecordCount > 0 Then
        Call SetDefaultCursor
        m_str_Msg = "Vehicle with the same description already exists. Data will not be save."
        MsgBox m_str_Msg, vbOKOnly + vbInformation
        Set RS = Nothing
        txtBusDescription.SetFocus
        Exit Sub
    End If

    'Insert a new row into LIST_OF_BUSES table.
    l_Result = modDBHelper.InsertListOfBuses("CES_UPDATE.INSERT_LIST_OF_BUSES", _
                                             l_RetVal, _
                                             str_BusDescription)
    If l_Result = 0 Then
        Call SetDefaultCursor
        m_str_Msg = "Vehicle Description was added."
        MsgBox m_str_Msg, vbOKOnly + vbInformation
        'Add record to the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                    "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                    l_RetVal, _
                    "Vehicle Description was added to the System", _
                    0, _
                    "MLB", _
                    "Vehicle Description ---> " + str_BusDescription, _
                    "", _
                    "", _
                    "")
    Else
        'During insertion some error  is happened.
    End If

    Set RS = Nothing

    Call frmListOfBuses.FillGrid
    
    Call SetDefaultCursor
    
    Unload Me

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdAdd_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub cmdClose_Click()
    On Error GoTo Error_Handler

    Unload Me

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdClose_Click", g_l_ErrorLineNumber
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub txtBusDescription_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim str_Data As String
    Dim l_CursorPosition As Long
    
    On Error GoTo Error_Handler

    'Convert data in the txtBusDescription edit-box to upper case.
    l_CursorPosition = txtBusDescription.SelStart
    str_Data = txtBusDescription.Text
    str_Data = UCase(str_Data)
    txtBusDescription.Text = str_Data
    txtBusDescription.SelStart = l_CursorPosition
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtBusDescription_KeyUp", g_l_ErrorLineNumber
End Sub
'==============================================================
'frmAddNonStockCodedPart.FRM
'
'Adds a non stock coded part to the cost tracking system database.
'
'===============================================================
Option Explicit

Private m_str_Msg As String

'Holds the ROWID number of a part
Public m_var_RowID As Variant
Public m_l_ID As Long
Public m_str_SupplierNumber As String
Public m_str_SupplierName As String
Public m_str_PartDescription As String
Public m_str_PartUnitCost As String
Public m_str_Keyword As String
Public m_str_AuditReference As String
Public m_str_AuditReferenceType As String
Public m_b_FromSearchPart As Boolean

'The cmdAdd_Click button either Adds a new non-stock coded part into
'the cost estimate system or updates an existing non-stock coded part
Private Sub cmdAdd_Click()
          Dim l_Result As Long
          Dim l_RetVal As Long
          Dim str_PartUnitCost As String
          Dim cur_PartUnitCost As Currency
          Dim str_SupplierName As String
          Dim str_SupplierNumber As String
          Dim str_Keyword As String
          Dim str_PartDescription As String
          Dim str_RBNumberToPass As String
          Dim str_KitToPass As String
          Dim RS As ADODB.Recordset
          Dim l_Count As Long
          Dim str_EstimationType As String
          Dim str_Temp As String
          
10        On Error GoTo Error_Handler
          
20        Call SetWaitCursor
          
          'Make sure that user choused something from the cboSupplierName combo-box.
30        str_SupplierName = Trim(cboSupplierName.Text)
40        If str_SupplierName = "" Then
50            Call SetDefaultCursor
60            m_str_Msg = "Please provide Supplier Name."
70            MsgBox m_str_Msg, vbOKOnly + vbInformation
80            cboSupplierName.SetFocus
90            Exit Sub
100       End If
          
          'Make sure that user choused something from the cboSupplierNumber combo-box.
110       str_SupplierNumber = Trim(cboSupplierNumber.Text)
120       If str_SupplierNumber = "" Then
130           Call SetDefaultCursor
140           m_str_Msg = "Please provide Supplier Number."
150           MsgBox m_str_Msg, vbOKOnly + vbInformation
160           cboSupplierNumber.SetFocus
170           Exit Sub
180       End If
          
          'Make sure that user choused something from the cboKeyword combo-box.
190       str_Keyword = Trim(cboKeyword.Text)
200       If str_Keyword = "" Then
210           Call SetDefaultCursor
220           m_str_Msg = "Please provide Keyword."
230           MsgBox m_str_Msg, vbOKOnly + vbInformation
240           cboKeyword.SetFocus
250           Exit Sub
260       End If
          
          'Make sure that user choused something from the cboPartDescription combo-box.
270       str_PartDescription = Trim(cboPartDescription.Text)
280       If str_PartDescription = "" Then
290           Call SetDefaultCursor
300           m_str_Msg = "Please provide Part Description."
310           MsgBox m_str_Msg, vbOKOnly + vbInformation
320           cboPartDescription.SetFocus
330           Exit Sub
340       End If
          
350       If Trim(txtPartUnitCost.Text) = "" Then
360           txtPartUnitCost.Text = "0"
370       End If

380       str_PartUnitCost = Trim(txtPartUnitCost.Text)
          
390       If IsNumeric(str_PartUnitCost) = False Then
400           Call SetDefaultCursor
410           m_str_Msg = "Part Unit Cost should be a number."
420           MsgBox m_str_Msg, vbOKOnly + vbInformation
430           txtPartUnitCost.SetFocus
440           Exit Sub
450       End If
          
          'Convert to proper format
460       cur_PartUnitCost = CCur(str_PartUnitCost)
470       str_PartUnitCost = CStr(CDbl(str_PartUnitCost))
         ' str_PartUnitCost = Replace(str_PartUnitCost, ".", ",")
          
480       If cmdAdd.Caption = "Add" Then
              'Make sure that data from the cboSupplierNumber and cboSupplierNumber
              'combo-boxes is not duplicated in the table NON_STOCK_CODED_PARTS table, fileds
              'ORIG_SUPPLIER_NUM and ORIG_SUPPLIER_NAME. Combination of these two fields in
              'the NON_STOCK_CODED_PARTS table should be unique.
490           Set RS = New ADODB.Recordset
500           Set RS = modDBHelper.SearchNSCPPartBy2Fields( _
                                  "CES_INQUIRY.SEARCH_NSCP_PART_BY_2_FIELDS", _
                                  UCase(str_SupplierNumber), _
                                  UCase(str_SupplierName))
510           If RS.RecordCount > 0 Then
520               Set RS = Nothing
530               Call SetDefaultCursor
540               m_str_Msg = "Supplier Number and Supplier Name already exists. Please provide another one."
550               MsgBox m_str_Msg, vbOKOnly + vbInformation
560               cboSupplierNumber.SetFocus
570               Exit Sub
580           End If
              
590           l_Result = modDBHelper.AddNSCP("CES_UPDATE.ADD_NSCP", _
                                             l_RetVal, _
                                             str_SupplierNumber, _
                                             str_SupplierName, _
                                             str_PartUnitCost, _
                                             str_PartDescription, _
                                             str_Keyword, _
                                             g_str_UserName)
          
600           If (l_Result > 0) Then
610               Call SetDefaultCursor
620               m_str_Msg = "Non-Stock Coded Part Has been added"
630               MsgBox m_str_Msg
640           Else
650               Set RS = Nothing
660               Call SetDefaultCursor
670               m_str_Msg = "There was an error adding Non-Stock Coded Part. "
680               m_str_Msg = m_str_Msg + "Please contact Administrator"
690               MsgBox m_str_Msg
700               Exit Sub
710           End If
              'Insert record into the AUDIT_MODIFY_HISTORY table.
720           str_Temp = "Non-Stock Coded Part Info was added to the System"
730           l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                  "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                  l_RetVal, _
                  str_Temp, _
                  CStr(l_Result), _
                  "NSCP", _
                  "Supplier Name ---> " + str_SupplierName, _
                  "Supplier Number ---> " + str_SupplierNumber, _
                  "Keyword ---> " + str_Keyword, _
                  "Part Description ---> " + str_PartDescription, _
                  "Part Unit Cost ($/unit) ---> " + str_PartUnitCost)
740       Else 'If cmdAdd.Caption = "Update" Then
750           l_Result = modDBHelper.UpdateNSCP("CES_UPDATE.UPDATE_NSCP", _
                                                l_RetVal, _
                                                str_SupplierNumber, _
                                                str_SupplierName, _
                                                str_PartUnitCost, _
                                                str_PartDescription, _
                                                str_Keyword, _
                                                g_str_UserName, _
                                                m_var_RowID)
          
760           If (l_Result > 0) Then
                  ' Must now propogate all changes of the non-stock coded part
                  ' to all of the estimates
770               l_Result = modDBHelper.PropagateNSCPChanges("CES_UPDATE.PROPAGATE_NSCP_CHANGES", _
                                                              l_RetVal, _
                                                              str_SupplierNumber, _
                                                              str_SupplierName, _
                                                              cur_PartUnitCost, _
                                                              m_l_ID)
                                                              
                  ' Must determine all OEM Kits affected by the propagation of the
                  ' non stock coded part
780               Set RS = modDBHelper.RetrieveKITToPropagateNSC("CES_INQUIRY.RETRIEVE_KIT_TO_PROPAGATE_NSC", m_l_ID)
                  
                  ' Propagate the changes to each of the OEM Kits
790               If RS.RecordCount > 0 Then
800                   RS.MoveFirst
810                   While Not RS.EOF
820                       str_KitToPass = RS.Fields.Item("part_number")
                          'PropagateOEMKitChanges str_KitToPass
830                       RS.MoveNext
840                   Wend
850               End If
                  
                  ' Must now determine all rebuilt parts affected by the propagation
                  ' of the non stock coded part
860               Set RS = modDBHelper.RetrieveRBPToPropagateNSC("CES_INQUIRY.RETRIEVE_RBP_TO_PROPAGATE_NSC", m_l_ID)
              
                  ' Propagate the changes to each of these rebuilt parts
870               If RS.RecordCount > 0 Then
880                   RS.MoveFirst
890                   While Not RS.EOF
900                       str_RBNumberToPass = RS.Fields.Item("mms_rebuilt_code")
                          'PropagateRebuiltPartChanges str_RBNumberToPass, False
910                       RS.MoveNext
920                   Wend
930               End If
                  
                  'In the SUB_KITS table update corresponded records.
940               l_Result = modDBHelper.UpdateSubKits1("CES_UPDATE.UPDATE_SUB_KITS1", _
                                                        l_RetVal, _
                                                        Trim(cboSupplierNumber.Text), _
                                                        Trim(cboSupplierName.Text), _
                                                        Trim(cboPartDescription.Text))
                  
950               If m_b_FromSearchPart = True Then
                      'Insert record into the AUDIT_MODIFY_HISTORY table.
960                   l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                          "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                          l_RetVal, _
                          "Non-Stock Coded Part Info was edited in the System from the Search Part screen", _
                          CStr(m_l_ID), _
                          "NSCP", _
                          "Supplier Name ---> " + str_SupplierName, _
                          "Supplier Number ---> " + str_SupplierNumber, _
                          "Keyword ---> " + str_Keyword, _
                          "Part Description ---> " + str_PartDescription, _
                          "Part Unit Cost ($/unit) ---> " + str_PartUnitCost)
970               Else
                      'Insert record into the AUDIT_MODIFY_HISTORY table.
980                   l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                          "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                          l_RetVal, _
                          "Non-Stock Coded Part Info was edited in the System from the " + Me.Caption + " screen", _
                          CStr(m_l_ID), _
                          "NSCP", _
                          "Supplier Name ---> " + str_SupplierName, _
                          "Supplier Number ---> " + str_SupplierNumber, _
                          "Keyword ---> " + str_Keyword, _
                          "Part Description ---> " + str_PartDescription, _
                          "Part Unit Cost ($/unit) ---> " + str_PartUnitCost)
990               End If
                  
                  'For the provided "Supplier Name" and "Supplier Number" find all records in
                  'the NSC_PARTS_USED table.
1000              Set RS = modDBHelper.GetNSCPartsUsedBySupplier( _
                                  "CES_INQUIRY.GET_NSC_PARTS_USED_BY_SUPPLIER", _
                                  str_SupplierNumber, str_SupplierName)
1010              If RS.RecordCount > 0 Then
1020                  str_Temp = "Indirect change. Non-Stock Coded Part Info " + CStr(m_l_ID) + " was changed"
1030                  RS.MoveFirst
1040                  For l_Count = 0 To RS.RecordCount - 1
                          'Insert record into the AUDIT_MODIFY_HISTORY table.
1050                      l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                              "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                              l_RetVal, _
                              str_Temp, _
                              RS.Fields.Item("LINK CODE"), _
                              RS.Fields.Item("LINK TYPE"), _
                              "Supplier Name ---> " + str_SupplierName, _
                              "Supplier Number ---> " + str_SupplierNumber, _
                              "Keyword ---> " + str_Keyword, _
                              "Part Description ---> " + str_PartDescription, _
                              "Part Unit Cost ($/unit) ---> " + str_PartUnitCost)
1060                      RS.MoveNext
1070                  Next l_Count
1080              End If
                  
1090              Call SetDefaultCursor
1100              MsgBox "Non-Stock Coded Part Has been updated."
1110          Else
1120              Call SetDefaultCursor
1130              MsgBox "Duplicate Part, please try re-entering Part."
1140          End If
1150      End If
          
1160      Set RS = Nothing
          
          'Update "Non_stock Coded Parts" grid on the frmSearchPart form.
1170      Call frmSearchPart.FillGrids
          
1180      Call SetDefaultCursor
          
1190      Exit Sub
Error_Handler:
1200      g_l_ErrorLineNumber = Erl()
1210      modDBHelper.LogErrorToDB Me.Name, "cmdAdd_Click", g_l_ErrorLineNumber
1220      Call SetDefaultCursor
1230      If Not RS Is Nothing Then
1240          Set RS = Nothing
1250      End If
End Sub

Private Sub Form_Load()
10        On Error GoTo Error_Handler
          
20        Call SetWaitCursor
30        Call ChangeCaptionIfNeeded
40        Call PopulateDropdowns
          
50        Call SetDefaultCursor
          
60        Exit Sub
Error_Handler:
70        g_l_ErrorLineNumber = Erl()
80        modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
90        Call SetDefaultCursor
End Sub

Private Sub PopulateDropdowns()
10        On Error GoTo Error_Handler
          
20        Set cboSupplierName.RowSource = modDBHelper.PopulateNSCComboBoxes( _
                                                  "CES_INQUIRY.POPULATE_NSC_COMBOXES", _
                                                  0)
30        cboSupplierName.ListField = "orig_supplier_name"
          'cboSupplierName.
40        Set cboSupplierNumber.RowSource = modDBHelper.PopulateNSCComboBoxes( _
                                                  "CES_INQUIRY.POPULATE_NSC_COMBOXES", _
                                                  1)
50        cboSupplierNumber.ListField = "orig_supplier_num"

60        Set cboKeyword.RowSource = modDBHelper.PopulateNSCComboBoxes( _
                                                  "CES_INQUIRY.POPULATE_NSC_COMBOXES", _
                                                  2)
70        cboKeyword.ListField = "keyword"

80        Set cboPartDescription.RowSource = modDBHelper.PopulateNSCComboBoxes( _
                                                  "CES_INQUIRY.POPULATE_NSC_COMBOXES", _
                                                  3)
90        cboPartDescription.ListField = "detailed_desc"
          
      '''    cboSupplierName.Enabled = False
      '''    cboSupplierNumber.Enabled = False
          
100       Exit Sub
Error_Handler:
110       g_l_ErrorLineNumber = Erl()
120       modDBHelper.LogErrorToDB Me.Name, "PopulateDropdowns", g_l_ErrorLineNumber
End Sub

Public Sub PassParameters(ByVal var_RowID As Variant, _
                          ByVal l_ID As Long, _
                          ByVal str_SupplierNumber As String, _
                          ByVal str_SupplierName As String, _
                          ByVal str_PartDescription As String, _
                          ByVal str_PartUnitCost As String, _
                          ByVal str_Keyword As String, _
                          ByVal b_DisableSupplierInfo As Boolean)
10        On Error GoTo Error_Handler

20        m_var_RowID = var_RowID
30        m_l_ID = l_ID
40        m_str_SupplierNumber = str_SupplierNumber
50        m_str_SupplierName = str_SupplierName
60        m_str_PartDescription = str_PartDescription
70        m_str_PartUnitCost = str_PartUnitCost
80        m_str_Keyword = str_Keyword
          
90        cboSupplierNumber.Text = m_str_SupplierNumber
100       cboSupplierName.Text = m_str_SupplierName
110       cboPartDescription.Text = m_str_PartDescription
120       txtPartUnitCost.Text = Format(str_PartUnitCost, "0.00")
130       cboKeyword.Text = str_Keyword
          
          ' If b_DisableSupplierInfo is set to true then disable the
          ' supplier name and supplier number combo boxes so that
          ' they cannot be updated
140       If b_DisableSupplierInfo = True Then
150           cboSupplierNumber.Enabled = False
160           cboSupplierName.Enabled = False
170       End If
          
180       Exit Sub
Error_Handler:
190       g_l_ErrorLineNumber = Erl()
200       modDBHelper.LogErrorToDB Me.Name, "PassParameters", g_l_ErrorLineNumber
End Sub

Private Sub ChangeCaptionIfNeeded()
10        On Error GoTo Error_Handler
          
20        If (m_str_SupplierNumber <> "" Or _
              m_str_SupplierName <> "" Or _
              m_str_PartDescription <> "" Or _
              m_str_PartUnitCost <> "") Then

30                cmdAdd.Caption = "Update"
40                Me.Caption = "Update a Non-Stock Coded Part"
50                Frame1.Caption = "Update a Non-Stock Coded Part"
                  
60        End If

70        Exit Sub
Error_Handler:
80        g_l_ErrorLineNumber = Erl()
90        modDBHelper.LogErrorToDB Me.Name, "ChangeCaption", g_l_ErrorLineNumber
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
10        On Error GoTo Error_Handler
          
20        Call SetDefaultCursor
30        m_str_SupplierNumber = ""
40        m_str_SupplierName = ""
50        m_str_PartDescription = ""
60        m_str_PartUnitCost = ""
70        m_str_Keyword = ""
80        m_var_RowID = ""

90        Exit Sub
Error_Handler:
100       g_l_ErrorLineNumber = Erl()
110       modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
120       Call SetDefaultCursor
End Sub
'==============================================================
'frmAddNSCPToEstimate.FRM
'
'Adds a vehicle estimate to the cost tracking system database.
'User enters/updates information into the input boxes and submits the values
'which are then saved into the database.
'===============================================================
Option Explicit

Private m_l_ID As Long
Private m_var_NSCPRowID As Variant
Private m_str_Msg As String
Private Const m_str_const_MsgBoxCaption As String = "Add / Update Non-Stock Coded Parts"

Public m_str_LinkNumber As String
Public m_str_TypeCode As String

Public m_var_RowID As Variant

Public m_str_AuditReference As String
Public m_str_AuditReferenceType As String

Private Sub cmdClose_Click()
    On Error GoTo Error_Handler
    
    Unload Me
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdClose_Click", g_l_ErrorLineNumber
End Sub

Private Sub cmdAdd_Click()
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_PercentUsage As String
    Dim RS As ADODB.Recordset
    Dim l_Count As Long

    On Error GoTo Error_Handler

    Call SetWaitCursor

    If Trim(cboSupplierNumber.Text) = "" Then
        If Not IsNumeric(cboSupplierNumber.Text) Then
            Call SetDefaultCursor
            m_str_Msg = "Please provide a Supplier Number."
            MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
            cboSupplierNumber.SetFocus
            Exit Sub
        End If
    End If
    
    'The percent usage
    str_PercentUsage = Trim(txtPercentUsage.Text)
    If str_PercentUsage = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Percent Usage is not entered correctly. Percent Usage can be a "
        m_str_Msg = m_str_Msg + "positive number between 0 and 100 inclusive with "
        m_str_Msg = m_str_Msg + "possible fraction."
        MsgBox m_str_Msg, vbExclamation Or vbOKOnly, m_str_const_MsgBoxCaption
        txtPercentUsage.SetFocus
        Exit Sub
    End If
    
    If CheckPercent(str_PercentUsage) = False Then
        Call SetDefaultCursor
        m_str_Msg = "Percent Usage is not entered correctly. Percent Usage can be a "
        m_str_Msg = m_str_Msg + "positive number between 0 and 100 inclusive with "
        m_str_Msg = m_str_Msg + "possible fraction."
        MsgBox m_str_Msg, vbExclamation Or vbOKOnly, m_str_const_MsgBoxCaption
        txtPercentUsage.SetFocus
        Exit Sub
    End If

    str_PercentUsage = Replace(str_PercentUsage, ".", ",")
    
    If Trim(cboCostCentre.Text) = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please provide a Cost Centre."
        MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
        cboCostCentre.SetFocus
        Exit Sub
    End If
    
    'Then validate Quantity
    If Not IsNumeric(txtQuantity.Text) Then
        Call SetDefaultCursor
        m_str_Msg = "Quantity not entered correctly."
        MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
        txtQuantity.SetFocus
        Exit Sub
    Else
        If Not IsValidLong(txtQuantity.Text) Then
            Call SetDefaultCursor
            m_str_Msg = "Quantity not entered correctly."
            MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
            txtQuantity.SetFocus
            Exit Sub
        End If
    End If
    
    If CLng(txtQuantity.Text) < 0 Then
        Call SetDefaultCursor
        m_str_Msg = "Quantity not entered correctly."
        MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
        txtQuantity.SetFocus
        Exit Sub
    End If
        
    If Trim(txtCoreCost.Text) = "" Then
        txtCoreCost.Text = "0"
    ElseIf Not IsNumeric(Trim(txtCoreCost.Text)) Or Val(txtCoreCost.Text) < 0 Then
        Call SetDefaultCursor
        m_str_Msg = "Core cost not entered correctly."
        MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
        txtCoreCost.SetFocus
        Exit Sub
    End If
        
    If txtPartUnitCost.Text = "" Then
        txtPartUnitCost.Text = "0"
    ElseIf Not IsNumeric(Trim(txtPartUnitCost.Text)) Or Val(txtPartUnitCost.Text) < 0 Then
        Call SetDefaultCursor
        m_str_Msg = "Part Unit cost not entered correctly."
        MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
        txtPartUnitCost.SetFocus
        Exit Sub
    End If
    
    If cmdAdd.Caption = "Add" Then
        'Before adding check that "Supplier Number" is not duplicated in the estimate.
        Set RS = New ADODB.Recordset
        Set RS = modDBHelper.RetrieveNSCPUsed("CES_INQUIRY.RETRIEVE_NSCP_USED", _
                                              m_str_LinkNumber, _
                                              m_str_TypeCode)
        If RS.RecordCount > 0 Then
            RS.MoveFirst
            For l_Count = 0 To RS.RecordCount - 1
                If RS.Fields.Item("SUPPLIER NUMBER") = Trim(cboSupplierNumber.Text) Then
                    Set RS = Nothing
                    Call SetDefaultCursor
                    m_str_Msg = "Record with the same Supplier Number is already exist "
                    m_str_Msg = m_str_Msg + "in the current Estimate. Please choose "
                    m_str_Msg = m_str_Msg + "another one."
                    MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
                    cmdResolve.Caption = "Find Supplier Name"
                    Set cboSupplierName.RowSource = Nothing
                    cboSupplierName.Text = ""
                    cboSupplierName.Enabled = False
                    cboSupplierNumber.SetFocus
                    Exit Sub
                End If
                RS.MoveNext
            Next l_Count
        End If
        Set RS = Nothing
        
        'Add new non-stock coded part
        l_Result = modDBHelper.AddNSCPUsed("CES_UPDATE.ADD_NSCP_USED", _
                                           l_RetVal, _
                                           cboSupplierNumber.Text, _
                                           cboSupplierName.Text, _
                                           cboCostCentre.Text, _
                                           txtQuantity.Text, _
                                           str_PercentUsage, _
                                           g_str_UserName, _
                                           m_str_LinkNumber, _
                                           CCur(txtPartUnitCost.Text), _
                                           m_str_TypeCode, _
                                           CCur(txtCoreCost.Text), _
                                           m_l_ID)
        If (l_Result = 0) Then
            m_str_Msg = "Non-Stock Coded Part has been added."
            MsgBox m_str_Msg, vbInformation Or vbOKOnly, m_str_const_MsgBoxCaption
        Else
            Call SetDefaultCursor
            m_str_Msg = "There was an error adding Non-Stock Coded Part. Please Contact "
            m_str_Msg = m_str_Msg + "Administrator."
            MsgBox m_str_Msg, vbCritical Or vbOKOnly, m_str_const_MsgBoxCaption
            Exit Sub
        End If
        cmdAdd.Enabled = False
        cmdEditDetails.Enabled = False
        cmdResolve.Caption = "Find Supplier Name"
        
        '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT Begin >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        
        'Insert record into the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                l_RetVal, _
                "Add Non-Stock Coded Part", _
                m_str_AuditReference, _
                m_str_TypeCode, _
                "Supplier Number ---> " + Trim(cboSupplierNumber.Text), _
                "Supplier Name ---> " + Trim(cboSupplierName.Text), _
                "Part Description ---> " + Trim(cboPartDescription.Text), _
                "Keyword ---> " + Trim(cboKeyword.Text), _
                "Cost Centre ---> " + Trim(cboCostCentre.Text), _
                "Quantity ---> " + Trim(txtQuantity.Text), _
                "Percent Usage ---> " + Trim(txtPercentUsage.Text), _
                "Last Revised ---> " + Trim(txtLastRevised.Text), _
                "Part Unit Cost ($/unit) ---> " + Trim(txtPartUnitCost.Text), _
                "Core Cost ($/unit) ---> " + Trim(txtCoreCost.Text))
        
        ' Now act depending on which type of estimate that the non-stock
        ' coded part was added to.
        If m_str_TypeCode = "KIT" Then
            'Add the current Part to the table SUB_KITS, after the last item in the
            'sub kit "KIT A"
            Call modMain.AddLastPartToSubkitA(m_str_AuditReference, _
                                              "NSC", _
                                              Trim(cboSupplierNumber.Text), _
                                              Trim(cboSupplierName.Text), _
                                              " ", _
                                              Trim(txtQuantity.Text), _
                                              Trim(cboPartDescription.Text))

            'Find all Vehicle Estimates where the current OEM Kit is presented.
            Set RS = New ADODB.Recordset
            Set RS = modDBHelper.RetrieveBusFromKitsUsed("CES_INQUIRY.RETRIEVE_BUS_FROM_KITS_USED", _
                                                         m_str_AuditReference)
            'Insert records for all Vehicle Estimates (where the current OEM Kit is
            'presented) into the AUDIT_MODIFY_HISTORY table.
            If RS.RecordCount > 0 Then
                RS.MoveFirst
                For l_Count = 0 To RS.RecordCount - 1
                    If IsNull(RS.Fields.Item("link_code")) = False Then
                        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "Indirect change. Non-Stock Coded Part was added to the OEM Kit " + m_str_AuditReference, _
                            RS.Fields.Item("link_code"), _
                            "BUS", _
                            "Supplier Number ---> " + Trim(cboSupplierNumber.Text), _
                            "Supplier Name ---> " + Trim(cboSupplierName.Text), _
                            "Part Description ---> " + Trim(cboPartDescription.Text), _
                            "Keyword ---> " + Trim(cboKeyword.Text), _
                            "Cost Centre ---> " + Trim(cboCostCentre.Text), _
                            "Quantity ---> " + Trim(txtQuantity.Text), _
                            "Percent Usage ---> " + Trim(txtPercentUsage.Text), _
                            "Last Revised ---> " + Trim(txtLastRevised.Text), _
                            "Part Unit Cost ($/unit) ---> " + Trim(txtPartUnitCost.Text), _
                            "Core Cost ($/unit) ---> " + Trim(txtCoreCost.Text))
                    End If
                    RS.MoveNext
                Next l_Count
            End If
        ElseIf m_str_TypeCode = "RB" Then
            ' If the estimate is a Rebuilt Part Estimate then cycle
            ' though all RB, MB and Veh Estimates containing this RBP
        
            Set RS = New ADODB.Recordset
            
            'In the SC_PARTS_USED table find all Estimates where the current RBE is present.
            Set RS = modDBHelper.RetrieveESTToPropagateRB("CES_INQUIRY.RETRIEVE_EST_TO_PROPAGATE_RB", _
                                                          m_str_AuditReference)
            If RS.RecordCount > 0 Then
                RS.MoveFirst
                    For l_Count = 0 To RS.RecordCount - 1
                        'Add records to the AUDIT_MODIFY_HISTORY table.
                        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "Indirect change. Non-Stock Coded Part was added to the Rebuilt Part Estimate " + m_str_AuditReference, _
                            RS.Fields.Item("link_code"), _
                            RS.Fields.Item("link_type"), _
                            "Supplier Number ---> " + Trim(cboSupplierNumber.Text), _
                            "Supplier Name ---> " + Trim(cboSupplierName.Text), _
                            "Part Description ---> " + Trim(cboPartDescription.Text), _
                            "Keyword ---> " + Trim(cboKeyword.Text), _
                            "Cost Centre ---> " + Trim(cboCostCentre.Text), _
                            "Quantity ---> " + Trim(txtQuantity.Text), _
                            "Percent Usage ---> " + Trim(txtPercentUsage.Text), _
                            "Last Revised ---> " + Trim(txtLastRevised.Text), _
                            "Part Unit Cost ($/unit) ---> " + Trim(txtPartUnitCost.Text), _
                            "Core Cost ($/unit) ---> " + Trim(txtCoreCost.Text))
                        RS.MoveNext
                    Next l_Count
            End If
            Set RS = Nothing
        
        End If
        '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT End >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        
        Set cboSupplierName.RowSource = Nothing
        cboSupplierName.Enabled = False
        cboSupplierName.Text = ""
        cboSupplierNumber.SetFocus
    Else 'If cmdAdd.Caption = "Update" Then
        'Update existing stock coded part
        l_Result = modDBHelper.UpdateNSCPUsed("CES_UPDATE.UPDATE_NSCP_USED", _
                                              l_RetVal, _
                                              cboSupplierNumber.Text, _
                                              cboSupplierName.Text, _
                                              cboCostCentre.Text, _
                                              txtQuantity.Text, _
                                              str_PercentUsage, _
                                              g_str_UserName, _
                                              m_str_LinkNumber, _
                                              CCur(txtPartUnitCost.Text), _
                                              m_var_RowID, _
                                              CCur(txtCoreCost.Text))
    
        If (l_Result = 0) Then
            m_str_Msg = "Non-Stock Coded Part has been updated."
            MsgBox m_str_Msg, vbInformation Or vbOKOnly, m_str_const_MsgBoxCaption
        Else
            Call SetDefaultCursor
            m_str_Msg = "There was an error updating Non-Stock Coded Part. Please Contact "
            m_str_Msg = m_str_Msg + "Administrator."
            MsgBox m_str_Msg, vbCritical Or vbOKOnly, m_str_const_MsgBoxCaption
            Exit Sub
        End If
        
        cmdResolve.Caption = "Find Supplier Name"
        
        '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT Begin >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        'Insert record into the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                    "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                    l_RetVal, _
                    "Update Non-Stock Coded Part", _
                    m_str_AuditReference, _
                    m_str_TypeCode, _
                    "Supplier Number ---> " + Trim(cboSupplierNumber.Text), _
                    "Supplier Name ---> " + Trim(cboSupplierName.Text), _
                    "Part Description ---> " + Trim(cboPartDescription.Text), _
                    "Keyword ---> " + Trim(cboKeyword.Text), _
                    "Cost Centre ---> " + Trim(cboCostCentre.Text), _
                    "Quantity ---> " + Trim(txtQuantity.Text), _
                    "Percent Usage ---> " + Trim(txtPercentUsage.Text), _
                    "Last Revised ---> " + Trim(txtLastRevised.Text), _
                    "Part Unit Cost ($/unit) ---> " + Trim(txtPartUnitCost.Text), _
                    "Core Cost ($/unit) ---> " + Trim(txtCoreCost.Text))
        
        ' Now act depending on which type of estimate that the non-stock
        ' coded part was added to.
        If m_str_TypeCode = "KIT" Then
            'In the SUB_KITS table update corresponded record.
            l_Result = modDBHelper.UpdateSubKits("CES_UPDATE.UPDATE_SUB_KITS", _
                                                 l_RetVal, _
                                                 m_str_AuditReference, _
                                                 Trim(cboSupplierNumber.Text), _
                                                 Trim(cboSupplierName.Text), _
                                                 " ", _
                                                 Trim(txtQuantity.Text), _
                                                 Trim(cboPartDescription.Text))

            'Find all Vehicle Estimates where the current OEM Kit is presented.
            Set RS = New ADODB.Recordset
            Set RS = modDBHelper.RetrieveBusFromKitsUsed("CES_INQUIRY.RETRIEVE_BUS_FROM_KITS_USED", _
                                                         m_str_AuditReference)
            'Insert records for all Vehicle Estimates (where the current OEM Kit is
            'presented) into the AUDIT_MODIFY_HISTORY table.
            If RS.RecordCount > 0 Then
                RS.MoveFirst
                For l_Count = 0 To RS.RecordCount - 1
                    If IsNull(RS.Fields.Item("link_code")) = False Then
                        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "Indirect change. Non-Stock Coded Part was updated from the OEM Kit " + m_str_AuditReference, _
                            RS.Fields.Item("link_code"), _
                            "BUS", _
                            "Supplier Number ---> " + Trim(cboSupplierNumber.Text), _
                            "Supplier Name ---> " + Trim(cboSupplierName.Text), _
                            "Part Description ---> " + Trim(cboPartDescription.Text), _
                            "Keyword ---> " + Trim(cboKeyword.Text), _
                            "Cost Centre ---> " + Trim(cboCostCentre.Text), _
                            "Quantity ---> " + Trim(txtQuantity.Text), _
                            "Percent Usage ---> " + Trim(txtPercentUsage.Text), _
                            "Last Revised ---> " + Trim(txtLastRevised.Text), _
                            "Part Unit Cost ($/unit) ---> " + Trim(txtPartUnitCost.Text), _
                            "Core Cost ($/unit) ---> " + Trim(txtCoreCost.Text))
                    End If
                    RS.MoveNext
                Next l_Count
            End If
        ElseIf m_str_TypeCode = "RB" Then
            ' If the estimate is a Rebuilt Part Estimate then cycle
            ' though all RB, MB and Veh Estimates containing this RBP
        
            Set RS = New ADODB.Recordset
            
            'In the SC_PARTS_USED table find all Estimates where the current RBE is present.
            Set RS = modDBHelper.RetrieveESTToPropagateRB("CES_INQUIRY.RETRIEVE_EST_TO_PROPAGATE_RB", _
                                                          m_str_AuditReference)
            If RS.RecordCount > 0 Then
                RS.MoveFirst
                    For l_Count = 0 To RS.RecordCount - 1
                        'Add records to the AUDIT_MODIFY_HISTORY table.
                        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "Indirect change. Non-Stock Coded Part was updated from the Rebuilt Part Estimate " + m_str_AuditReference, _
                            RS.Fields.Item("link_code"), _
                            RS.Fields.Item("link_type"), _
                            "Supplier Number ---> " + Trim(cboSupplierNumber.Text), _
                            "Supplier Name ---> " + Trim(cboSupplierName.Text), _
                            "Part Description ---> " + Trim(cboPartDescription.Text), _
                            "Keyword ---> " + Trim(cboKeyword.Text), _
                            "Cost Centre ---> " + Trim(cboCostCentre.Text), _
                            "Quantity ---> " + Trim(txtQuantity.Text), _
                            "Percent Usage ---> " + Trim(txtPercentUsage.Text), _
                            "Last Revised ---> " + Trim(txtLastRevised.Text), _
                            "Part Unit Cost ($/unit) ---> " + Trim(txtPartUnitCost.Text), _
                            "Core Cost ($/unit) ---> " + Trim(txtCoreCost.Text))
                        RS.MoveNext
                    Next l_Count
            End If
            Set RS = Nothing
        End If
        '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT End >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        
        Set cboSupplierName.RowSource = Nothing
        cboSupplierName.Text = ""
        cboSupplierName.Enabled = False
        Call SetDefaultCursor
       
        Unload Me
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdAdd_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub cmdEditDetails_Click()
    ' Allows the users to edit the details of the non-stock coded
    ' part before adding it to the part.
      
    Dim str_SupplierNumber As String
    Dim str_SupplierName As String
    Dim str_PartDescription As String
    Dim str_PartUnitCost As String
    Dim str_Keyword As String
    Dim temp 'temp array to hold values from the split function
    
    On Error GoTo Error_Handler
    
    'Splits the string into two at the first instance of ":"
    'the values before and after the ":" are saved into two variables passed in by
    'reference
    temp = Split(Trim(cboSupplierName.Text), " Price:")
    
    str_SupplierNumber = Trim(cboSupplierNumber.Text)
    str_SupplierName = temp(0) 'the values before the " Price:"
    str_PartDescription = Trim(cboPartDescription.Text)
    str_PartUnitCost = Trim(txtPartUnitCost.Text)
    str_Keyword = Trim(cboKeyword.Text)
    
    Call frmAddNonStockCodedPart.PassParameters(m_var_NSCPRowID, _
                                                m_l_ID, _
                                                str_SupplierNumber, _
                                                str_SupplierName, _
                                                str_PartDescription, _
                                                str_PartUnitCost, _
                                                str_Keyword, _
                                                True)
    frmAddNonStockCodedPart.m_str_AuditReference = m_str_AuditReference
    frmAddNonStockCodedPart.m_str_AuditReferenceType = m_str_TypeCode
    frmAddNonStockCodedPart.cboSupplierName.Enabled = False
    frmAddNonStockCodedPart.cboSupplierNumber.Enabled = False
    frmAddNonStockCodedPart.Show vbModal
    cmdResolve.Caption = "Resolve"
    ' Once the non stock coded part is updated refresh the form
    Call Resolve
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdEditDetails_Click", g_l_ErrorLineNumber
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    Me.Height = 4470
    Me.Width = 7185
    Call PopulateFields
    
    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Public Sub PassValues(ByVal str_SupplierNumber As String, _
                      ByVal str_SupplierName As String, _
                      ByVal str_CostCentre As String, _
                      ByVal str_PercentUsage As String, _
                      ByVal str_Quantity As String, _
                      ByVal var_RowIDPass As Variant, _
                      ByVal cur_CoreCost As Currency)
    
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    m_var_RowID = var_RowIDPass
    
    cboSupplierNumber.Text = str_SupplierNumber
    cboSupplierName.Text = str_SupplierName
    cmdResolve.Caption = "Resolve"
    
    Call Resolve
    
    cboCostCentre.Text = str_CostCentre
    txtQuantity.Text = Replace(str_Quantity, ",", ".")
    txtPercentUsage.Text = str_PercentUsage
    
    cmdAdd.Caption = "Update"
    cmdClose.Visible = False
    cmdResolve.Enabled = False
    cboSupplierNumber.Enabled = False
    
    Set RS = modDBHelper.RetrieveSCPUsedROWID("CES_INQUIRY.retrieve_one_nscp_used", _
                                             var_RowIDPass)
    txtCoreCost.Text = Format(RS("CORECOST"), "0.00")
    Set RS = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PassValues", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub PopulateFields()
    On Error GoTo Error_Handler
    
    Set cboSupplierNumber.RowSource = modDBHelper.PopulateNSCComboBoxes( _
                                                "CES_INQUIRY.POPULATE_NSC_COMBOXES", _
                                                "1")
    cboSupplierNumber.ListField = "orig_supplier_num"

    Set cboKeyword.RowSource = modDBHelper.PopulateNSCComboBoxes( _
                                                "CES_INQUIRY.POPULATE_NSC_COMBOXES", _
                                                "2")
    cboKeyword.ListField = "keyword"

    Set cboPartDescription.RowSource = modDBHelper.PopulateNSCComboBoxes( _
                                                "CES_INQUIRY.POPULATE_NSC_COMBOXES", _
                                                "3")
    cboPartDescription.ListField = "detailed_desc"


    Set cboCostCentre.RowSource = modDBHelper.PopulateCostCentres( _
                                                "CES_INQUIRY.RETRIEVE_COST_CENTRES")
    cboCostCentre.ListField = "cost_centre"

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateFields", g_l_ErrorLineNumber
End Sub

Private Sub cmdResolve_Click()
    On Error GoTo Error_Handler

    Call Resolve
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdResolve_Click", g_l_ErrorLineNumber
End Sub

Private Sub Resolve()
    Dim RS As ADODB.Recordset
    Dim temp
    
    On Error GoTo Error_Handler

    Call SetWaitCursor
    
    Set RS = New ADODB.Recordset
    
    If cmdResolve.Caption = "Resolve" Then
        'Query database to load vehicle estimate
        'retrieve part by part number only, save results to Recordset
        Set RS = modDBHelper.SearchNSCPPartBy2Fields( _
                                        "CES_INQUIRY.SEARCH_NSCP_PART_BY_2_FIELDS", _
                                        cboSupplierNumber.Text, _
                                        cboSupplierName.Text)
        If RS.RecordCount = 0 Then
            Set RS = Nothing
            Call SetDefaultCursor
            cmdAdd.Enabled = False
            cmdEditDetails.Enabled = False
            MsgBox "No information for the Part Number."
            cmdResolve.Caption = "Find Supplier Name"
            Exit Sub
        ElseIf RS.RecordCount > 1 Then
            Set RS = Nothing
            Call SetDefaultCursor
            cmdAdd.Enabled = False
            cmdEditDetails.Enabled = False
            m_str_Msg = "There are more than one record for this Non Stock Coded Part. "
            m_str_Msg = m_str_Msg + "Please edit/remove the duplicate(s) Non Stock "
            m_str_Msg = m_str_Msg + "Coded part from the system."
            MsgBox m_str_Msg
            Exit Sub
        ElseIf RS.RecordCount = 1 Then
            cboKeyword.Text = RS.Fields.Item("KEYWORD")
            cboPartDescription.Text = RS.Fields.Item("DESCRIPTION")
            txtPartUnitCost.Text = Format(RS.Fields.Item("PRICE"), "0.00")
            txtLastRevised.Text = RS.Fields.Item("LAST MODIFIED DATE")
            m_l_ID = RS.Fields.Item("ID")
            m_var_NSCPRowID = RS.Fields.Item("ROWID")
            cmdAdd.Enabled = True
            cmdResolve.Default = False
            cmdAdd.Default = True
            cmdEditDetails.Enabled = True
        End If
        cmdResolve.Caption = "Find Supplier Name"
    Else 'If cmdResolve.Caption = "Find Supplier Name"
        If Trim(cboSupplierNumber.Text) = "" Then
            Call SetDefaultCursor
            MsgBox "Please provide Supplier Number."
            cboSupplierNumber.SetFocus
            Exit Sub
        End If
        
        'Find Supplier Name by Spplier Number
        Set RS = modDBHelper.FindSupplierNameByNumber( _
                                        "CES_INQUIRY.FIND_SUPPLIER_NAME_BY_NUMBER", _
                                        Trim(cboSupplierNumber.Text))
        If RS.RecordCount = 0 Then
            Call SetDefaultCursor
            MsgBox "Can not find Supplier Name for provided Supplier Number."
            cboSupplierNumber.SetFocus
            Set RS = Nothing
            Exit Sub
        End If
        
        Set cboSupplierName.RowSource = RS
        cboSupplierName.ListField = "orig_supplier_name"
        cboSupplierName.Enabled = True
        cboSupplierName.Text = RS.Fields.Item("orig_supplier_name")
        cmdResolve.Caption = "Resolve"
    End If
        
    temp = Split(Trim(cboSupplierName.Text), " Price:")
    cboSupplierName.Text = temp(0)
    Set RS = Nothing
    
    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Resolve", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub txtPercentUsage_GotFocus()
    On Error GoTo Error_Handler

    txtPercentUsage.SelStart = 0
    txtPercentUsage.SelLength = Len(txtPercentUsage.Text)
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtPercentUsage_GotFocus", g_l_ErrorLineNumber
End Sub

Private Sub txtQuantity_GotFocus()
    On Error GoTo Error_Handler

    txtQuantity.SelStart = 0
    txtQuantity.SelLength = Len(txtQuantity.Text)
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtQuantity_GotFocus", g_l_ErrorLineNumber
End Sub

Option Explicit

Private m_str_Msg As String

'Holds the ROWID number of a part
Public m_var_RowID As Variant

Private Sub cmdAddOEMKit_Click()
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_PartNumber As String
    Dim str_KitDetailedDescription As String
    Dim str_BriefDescription As String
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    'Make sure that user typed something into the txtPartNumber edit-box.
    str_PartNumber = Trim(txtPartNumber.Text)
    If str_PartNumber = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please provide Part Number."
        MsgBox m_str_Msg, vbOKOnly + vbInformation
        txtPartNumber.SetFocus
        Exit Sub
    End If
    
    'Make sure that user typed something into the txtKitDetailedDescription edit-box.
    str_KitDetailedDescription = Trim(txtKitDetailedDescription.Text)
    If str_KitDetailedDescription = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please provide Detailed Description."
        MsgBox m_str_Msg, vbOKOnly + vbInformation
        txtKitDetailedDescription.SetFocus
        Exit Sub
    End If
    
    'Make sure that user typed something into the txtBriefDescription edit-box.
    str_BriefDescription = Trim(txtBriefDescription.Text)
    If str_BriefDescription = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please provide Brief Description."
        MsgBox m_str_Msg, vbOKOnly + vbInformation
        txtBriefDescription.SetFocus
        Exit Sub
    End If
    
    'Check that data in the txtPartNumber edit-box is not duplicated in the
    'KITS_MASTERLIST table.
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.SearchKitByNumber( _
                                    "CES_INQUIRY.SERCH_KIT_BY_NUMBER", _
                                    str_PartNumber)
    If RS.RecordCount > 0 Then
        Set RS = Nothing
        Call SetDefaultCursor
        m_str_Msg = "OEM Kit with the same Part Number already exist. Please provide "
        m_str_Msg = m_str_Msg + "another one."
        MsgBox m_str_Msg, vbOKOnly + vbInformation
        txtPartNumber.SetFocus
        Exit Sub
    End If
    Set RS = Nothing

    l_Result = modDBHelper.AddTempOEMKit("CES_UPDATE.ADD_TEMP_OEMKIT", _
                                                  l_RetVal, _
                                                  str_PartNumber, _
                                                  str_KitDetailedDescription, _
                                                  str_BriefDescription, _
                                                  g_str_UserName)
    
    If (l_Result = 0) Then
        Call SetDefaultCursor
        m_str_Msg = "OEM Temp Kit Has been added."
        MsgBox m_str_Msg
        'Add record to the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "OEM Kit Info was added to the System", _
                            str_PartNumber, _
                            "KIT", _
                            "Part Number ---> " + str_PartNumber, _
                            "Kit Detailed Description ---> " + str_KitDetailedDescription, _
                            "Brief Description ---> " + str_BriefDescription)
    Else
        Call SetDefaultCursor
        m_str_Msg = "There was an error adding OEM Temp Kit. Please Contact The Administrator."
        MsgBox m_str_Msg
        Exit Sub
    End If

    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdAddOEMKit_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    Me.Height = 2475
    Me.Width = 9045
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    g_l_ErrorLineNumber = Erl()
    Call SetDefaultCursor
End Sub

Private Sub cmdClose_Click()
    On Error GoTo Error_Handler

    Unload Me

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdClose_Click", g_l_ErrorLineNumber
End Sub


Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_Unload(Cancel As Integer)
    On Error GoTo Error_Handler
 
    m_var_RowID = ""
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Unload", g_l_ErrorLineNumber
End Sub

Private Sub txtBriefDescription_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtBriefDescription edit-box to upper case.
    l_CursorPosition = txtBriefDescription.SelStart
    str_Data = txtBriefDescription.Text
    str_Data = UCase(str_Data)
    txtBriefDescription.Text = str_Data
    txtBriefDescription.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtBriefDescription_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtKitDetailedDescription_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtKitDetailedDescription edit-box to upper case.
    l_CursorPosition = txtKitDetailedDescription.SelStart
    str_Data = txtKitDetailedDescription.Text
    str_Data = UCase(str_Data)
    txtKitDetailedDescription.Text = str_Data
    txtKitDetailedDescription.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtKitDetailedDescription_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtPartNumber_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtPartNumber edit-box to upper case.
    l_CursorPosition = txtPartNumber.SelStart
    str_Data = txtPartNumber.Text
    str_Data = UCase(str_Data)
    txtPartNumber.Text = str_Data
    txtPartNumber.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtPartNumber_KeyUp", g_l_ErrorLineNumber
End Sub

Option Explicit

Public m_str_Vehicle_number As String
Private Const m_const_str_CostCentre As String = "05H6"

Private Sub cmdAddKitToBus_Click()
    Dim RS As ADODB.Recordset
    Dim RS_Check As ADODB.Recordset
    Dim str_PartNumber As String
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_Msg As String
    Dim i_Count As Integer
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    If Not grdSearchResults.Row Then
    
        str_PartNumber = grdSearchResults.Columns("PART NUMBER").Text 'gets selected rows first column
        
        'Check to see if kit is already attached
        Set RS_Check = modDBHelper.RetrieveOEMKitsAttached("CES_INQUIRY.RETRIEVE_OEMKITS_ATTACHED", _
                            m_str_Vehicle_number)
   
        If RS_Check.RecordCount > 0 Then
            RS_Check.MoveFirst
            For i_Count = 0 To RS_Check.RecordCount - 1
                If RS_Check.Fields(0).Value = str_PartNumber Then
                    MsgBox "Selected OEM Kit is already attached."
                    Set RS_Check = Nothing
                    Exit Sub
                End If
                RS_Check.MoveNext
            Next i_Count
        End If
        
        Set RS_Check = Nothing


        Set RS = modDBHelper.SearchSCPart("CES_INQUIRY.SEARCH_SC_PART", _
                                              str_PartNumber, _
                                              "0", _
                                              "", _
                                              "", _
                                              2)
                                              
        If RS.RecordCount > 0 Then
                l_Result = modDBHelper.UpdateOEMKitCost("CES_UPDATE.UPDATE_OEMKit_COST", _
                                            l_RetVal, _
                                            str_PartNumber, _
                                            CCur(RS.Fields("PRICE").Value))
        End If

        l_Result = modDBHelper.ADDOEMKitToBus("CES_UPDATE.ADD_OEMKIT_BUS", _
                                                  l_RetVal, _
                                                  str_PartNumber, _
                                                  g_str_UserName, _
                                                  m_const_str_CostCentre, _
                                                  m_str_Vehicle_number)
    
        If (l_Result = 0) Then
            Call SetDefaultCursor
            str_Msg = "OEM Temp Kit Has been added to the Vehicle."
            MsgBox str_Msg
        Else
            Call SetDefaultCursor
            str_Msg = "There was an error adding OEM Temp Kit to Vehicle. Please Contact The Administrator"
            MsgBox str_Msg
            Exit Sub
        End If
        'Insert record into the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                l_RetVal, _
                "Add OEM Kit", _
                m_str_Vehicle_number, _
                "BUS", _
                "PART NUMBER ---> " + grdSearchResults.Columns.Item("PART NUMBER"), _
                "DESCRIPTION ---> " + grdSearchResults.Columns.Item("DESCRIPTION"), _
                "KEYWORD ---> " + grdSearchResults.Columns.Item("KEYWORD"))
    Else
        Call SetDefaultCursor
        MsgBox "No Rows to select, Please Try Again"
    End If

   ' frmVehCostEstimateMain.RefreshForm
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdAddKitToBus_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub cmdClose_Click()
    On Error GoTo Error_Handler
    
    Unload Me
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdClose_Click", g_l_ErrorLineNumber
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    If m_str_Vehicle_number <> "" Then
         cmdAddKitToBus.Visible = True
         'lblAddOEMKitToBus.Caption = "SEARCH FOR OEM KIT TO ADD TO ESTIMATE"
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub ClearGrids()
    On Error GoTo Error_Handler
    
    grdSearchResults.ClearFields
    grdSearchResults.BorderStyle = dbgFixedSingle
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "ClearGrids", g_l_ErrorLineNumber
End Sub

Private Sub cmdSearch_Click()
    On Error GoTo Error_Handler
    
    Call SearchOEMKits
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "SearchOEMKits", g_l_ErrorLineNumber
End Sub

Private Sub SearchOEMKits()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    Call ClearGrids
    
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.SearchOEMKits("CES_INQUIRY.SEARCH_OEM_KITS", _
                                               txtPartNumber.Text, _
                                               txtKitDetailedDescription.Text)
    Set grdSearchResults.DataSource = RS
        
    Set RS = Nothing
    
    Call FormatGrid
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "SearchOEMKits", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
On Error GoTo Error_Handler
    
    Call SetDefaultCursor
    'Keep the form open until the Make Buy Estimate Closes
    If UnloadMode = 0 Then
        Cancel = True
        Me.Hide
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_Unload(Cancel As Integer)
    On Error GoTo Error_Handler
    
    'm_str_Vehicle_number = ""
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Unload", g_l_ErrorLineNumber
End Sub

Private Sub FormatGrid()
    On Error GoTo Error_Handler
    
    grdSearchResults.Columns("DESCRIPTION").Width = 3500
    
    If Not grdSearchResults.Columns.Count < 4 Then
        grdSearchResults.Columns("ID").Visible = False
        grdSearchResults.Columns("ESTIMATED_COST").Visible = False
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "FormatGrid", g_l_ErrorLineNumber
End Sub

Private Sub grdSearchResults_KeyDown(KeyCode As Integer, Shift As Integer)
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_PartID As String
    Dim str_PartNumber As String
    Dim str_Msg As String
    
    On Error GoTo Error_Handler
        
    If KeyCode = vbKeyDelete And grdSearchResults.Row >= 0 Then
        l_Result = MsgBox("Are you sure you want to delete this item?", vbOKCancel)
        If l_Result = vbOK Then
            Call SetWaitCursor
            str_PartID = grdSearchResults.Columns("ID").Text
            str_PartNumber = grdSearchResults.Columns("PART NUMBER").Text
            ' This is flagged for all stockcoded kits, we can only delete temp kits created by users.
            If str_PartID <> "NODELETE" Then
                l_Result = modDBHelper.DeleteVehicleEstimate("CES_DELETE.DELETE_TEMP_OEMKIT", _
                                                    l_RetVal, _
                                                    str_PartNumber)
                If l_Result = 1 Then
                    Call SetDefaultCursor
                    str_Msg = "This OEM Kit is currently attached to vehicle estimates."
                    str_Msg = str_Msg & Chr(13) & "Please remove it from all vehicle estimates before deleting it."
                    MsgBox str_Msg, vbExclamation, "Deleting OEM Kit"
                Else
                    'Insert record for the KIT history into the AUDIT_MODIFY_HISTORY
                    'table.
                    l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "OEM Kit Info was deleted from the System", _
                            str_PartNumber, _
                            "KIT", _
                            "PART NUMBER ---> " + grdSearchResults.Columns("PART NUMBER").Text, _
                            "DESCRIPTION ---> " + grdSearchResults.Columns("DESCRIPTION").Text, _
                            "KEYWORD ---> " + grdSearchResults.Columns("KEYWORD"))
                    Call SearchOEMKits
                End If
            Else
                MsgBox "You cannot delete a Stock Coded Kit.  Delete temp kits only!"
            End If
        End If
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdSearchResults_KeyDown", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub txtKitDetailedDescription_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtKitDetailedDescription edit-box to upper case.
    l_CursorPosition = txtKitDetailedDescription.SelStart
    str_Data = txtKitDetailedDescription.Text
    str_Data = UCase(str_Data)
    txtKitDetailedDescription.Text = str_Data
    txtKitDetailedDescription.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtKitDetailedDescription_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtPartNumber_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtPartNumber edit-box to upper case.
    l_CursorPosition = txtPartNumber.SelStart
    str_Data = txtPartNumber.Text
    str_Data = UCase(str_Data)
    txtPartNumber.Text = str_Data
    txtPartNumber.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtPartNumber_KeyUp", g_l_ErrorLineNumber
End Sub
Option Explicit

Public m_str_Vehicle_number As String
Private Const m_const_str_CostCentre As String = "05H6"

Private Sub cmdAddKitToBus_Click()
    Dim RS As ADODB.Recordset
    Dim RS_Check As ADODB.Recordset
    Dim str_PartNumber As String
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_Msg As String
    Dim i_Count As Integer
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    If Not grdSearchResults.Row Then
    
        str_PartNumber = grdSearchResults.Columns("PART NUMBER").Text 'gets selected rows first column
        
        'Check to see if kit is already attached
        Set RS_Check = modDBHelper.RetrieveOEMKitsAttached("CES_INQUIRY.RETRIEVE_OEMKITS_ATTACHED", _
                            m_str_Vehicle_number)
   
        If RS_Check.RecordCount > 0 Then
            RS_Check.MoveFirst
            For i_Count = 0 To RS_Check.RecordCount - 1
                If RS_Check.Fields(0).Value = str_PartNumber Then
                    MsgBox "Selected OEM Kit is already attached."
                    Set RS_Check = Nothing
                    Exit Sub
                End If
                RS_Check.MoveNext
            Next i_Count
        End If
        
        Set RS_Check = Nothing


        Set RS = modDBHelper.SearchSCPart("CES_INQUIRY.SEARCH_SC_PART", _
                                              str_PartNumber, _
                                              "0", _
                                              "", _
                                              "", _
                                              2)
                                              
        If RS.RecordCount > 0 Then
                l_Result = modDBHelper.UpdateOEMKitCost("CES_UPDATE.UPDATE_OEMKit_COST", _
                                            l_RetVal, _
                                            str_PartNumber, _
                                            CCur(RS.Fields("PRICE").Value))
        End If

        l_Result = modDBHelper.ADDOEMKitToBus("CES_UPDATE.ADD_OEMKIT_BUS", _
                                                  l_RetVal, _
                                                  str_PartNumber, _
                                                  g_str_UserName, _
                                                  m_const_str_CostCentre, _
                                                  m_str_Vehicle_number)
    
        If (l_Result = 0) Then
            Call SetDefaultCursor
            str_Msg = "OEM Temp Kit Has been added to the Vehicle."
            MsgBox str_Msg
        Else
            Call SetDefaultCursor
            str_Msg = "There was an error adding OEM Temp Kit to Vehicle. Please Contact The Administrator"
            MsgBox str_Msg
            Exit Sub
        End If
        'Insert record into the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                l_RetVal, _
                "Add OEM Kit", _
                m_str_Vehicle_number, _
                "BUS", _
                "PART NUMBER ---> " + grdSearchResults.Columns.Item("PART NUMBER"), _
                "DESCRIPTION ---> " + grdSearchResults.Columns.Item("DESCRIPTION"), _
                "KEYWORD ---> " + grdSearchResults.Columns.Item("KEYWORD"))
    Else
        Call SetDefaultCursor
        MsgBox "No Rows to select, Please Try Again"
    End If

   ' frmVehCostEstimateMain.RefreshForm
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdAddKitToBus_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub cmdClose_Click()
    On Error GoTo Error_Handler
    
    Unload Me
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdClose_Click", g_l_ErrorLineNumber
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    If m_str_Vehicle_number <> "" Then
         cmdAddKitToBus.Visible = True
         'lblAddOEMKitToBus.Caption = "SEARCH FOR OEM KIT TO ADD TO ESTIMATE"
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub ClearGrids()
    On Error GoTo Error_Handler
    
    grdSearchResults.ClearFields
    grdSearchResults.BorderStyle = dbgFixedSingle
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "ClearGrids", g_l_ErrorLineNumber
End Sub

Private Sub cmdSearch_Click()
    On Error GoTo Error_Handler
    
    Call SearchOEMKits
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "SearchOEMKits", g_l_ErrorLineNumber
End Sub

Private Sub SearchOEMKits()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    Call ClearGrids
    
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.SearchOEMKits("CES_INQUIRY.SEARCH_OEM_KITS", _
                                               txtPartNumber.Text, _
                                               txtKitDetailedDescription.Text)
    Set grdSearchResults.DataSource = RS
        
    Set RS = Nothing
    
    Call FormatGrid
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "SearchOEMKits", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
On Error GoTo Error_Handler
    
    Call SetDefaultCursor
    'Keep the form open until the Make Buy Estimate Closes
    If UnloadMode = 0 Then
        Cancel = True
        Me.Hide
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_Unload(Cancel As Integer)
    On Error GoTo Error_Handler
    
    'm_str_Vehicle_number = ""
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Unload", g_l_ErrorLineNumber
End Sub

Private Sub FormatGrid()
    On Error GoTo Error_Handler
    
    grdSearchResults.Columns("DESCRIPTION").Width = 3500
    
    If Not grdSearchResults.Columns.Count < 4 Then
        grdSearchResults.Columns("ID").Visible = False
        grdSearchResults.Columns("ESTIMATED_COST").Visible = False
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "FormatGrid", g_l_ErrorLineNumber
End Sub

Private Sub grdSearchResults_KeyDown(KeyCode As Integer, Shift As Integer)
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_PartID As String
    Dim str_PartNumber As String
    Dim str_Msg As String
    
    On Error GoTo Error_Handler
        
    If KeyCode = vbKeyDelete And grdSearchResults.Row >= 0 Then
        l_Result = MsgBox("Are you sure you want to delete this item?", vbOKCancel)
        If l_Result = vbOK Then
            Call SetWaitCursor
            str_PartID = grdSearchResults.Columns("ID").Text
            str_PartNumber = grdSearchResults.Columns("PART NUMBER").Text
            ' This is flagged for all stockcoded kits, we can only delete temp kits created by users.
            If str_PartID <> "NODELETE" Then
                l_Result = modDBHelper.DeleteVehicleEstimate("CES_DELETE.DELETE_TEMP_OEMKIT", _
                                                    l_RetVal, _
                                                    str_PartNumber)
                If l_Result = 1 Then
                    Call SetDefaultCursor
                    str_Msg = "This OEM Kit is currently attached to vehicle estimates."
                    str_Msg = str_Msg & Chr(13) & "Please remove it from all vehicle estimates before deleting it."
                    MsgBox str_Msg, vbExclamation, "Deleting OEM Kit"
                Else
                    'Insert record for the KIT history into the AUDIT_MODIFY_HISTORY
                    'table.
                    l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "OEM Kit Info was deleted from the System", _
                            str_PartNumber, _
                            "KIT", _
                            "PART NUMBER ---> " + grdSearchResults.Columns("PART NUMBER").Text, _
                            "DESCRIPTION ---> " + grdSearchResults.Columns("DESCRIPTION").Text, _
                            "KEYWORD ---> " + grdSearchResults.Columns("KEYWORD"))
                    Call SearchOEMKits
                End If
            Else
                MsgBox "You cannot delete a Stock Coded Kit.  Delete temp kits only!"
            End If
        End If
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdSearchResults_KeyDown", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub txtKitDetailedDescription_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtKitDetailedDescription edit-box to upper case.
    l_CursorPosition = txtKitDetailedDescription.SelStart
    str_Data = txtKitDetailedDescription.Text
    str_Data = UCase(str_Data)
    txtKitDetailedDescription.Text = str_Data
    txtKitDetailedDescription.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtKitDetailedDescription_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtPartNumber_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtPartNumber edit-box to upper case.
    l_CursorPosition = txtPartNumber.SelStart
    str_Data = txtPartNumber.Text
    str_Data = UCase(str_Data)
    txtPartNumber.Text = str_Data
    txtPartNumber.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtPartNumber_KeyUp", g_l_ErrorLineNumber
End Sub


Option Explicit

Public m_str_Vehicle_number As String
Private Const m_const_str_CostCentre As String = "05H6"

Private Sub cmdAddKitToBus_Click()
    Dim RS As ADODB.Recordset
    Dim RS_Check As ADODB.Recordset
    Dim str_PartNumber As String
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_Msg As String
    Dim i_Count As Integer
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    If Not grdSearchResults.Row Then
    
        str_PartNumber = grdSearchResults.Columns("PART NUMBER").Text 'gets selected rows first column
        
        'Check to see if kit is already attached
        Set RS_Check = modDBHelper.RetrieveOEMKitsAttached("CES_INQUIRY.RETRIEVE_OEMKITS_ATTACHED", _
                            m_str_Vehicle_number)
   
        If RS_Check.RecordCount > 0 Then
            RS_Check.MoveFirst
            For i_Count = 0 To RS_Check.RecordCount - 1
                If RS_Check.Fields(0).Value = str_PartNumber Then
                    MsgBox "Selected OEM Kit is already attached."
                    Set RS_Check = Nothing
                    Exit Sub
                End If
                RS_Check.MoveNext
            Next i_Count
        End If
        
        Set RS_Check = Nothing


        Set RS = modDBHelper.SearchSCPart("CES_INQUIRY.SEARCH_SC_PART", _
                                              str_PartNumber, _
                                              "0", _
                                              "", _
                                              "", _
                                              2)
                                              
        If RS.RecordCount > 0 Then
                l_Result = modDBHelper.UpdateOEMKitCost("CES_UPDATE.UPDATE_OEMKit_COST", _
                                            l_RetVal, _
                                            str_PartNumber, _
                                            CCur(RS.Fields("PRICE").Value))
        End If

        l_Result = modDBHelper.ADDOEMKitToBus("CES_UPDATE.ADD_OEMKIT_BUS", _
                                                  l_RetVal, _
                                                  str_PartNumber, _
                                                  g_str_UserName, _
                                                  m_const_str_CostCentre, _
                                                  m_str_Vehicle_number)
    
        If (l_Result = 0) Then
            Call SetDefaultCursor
            str_Msg = "OEM Temp Kit Has been added to the Vehicle."
            MsgBox str_Msg
        Else
            Call SetDefaultCursor
            str_Msg = "There was an error adding OEM Temp Kit to Vehicle. Please Contact The Administrator"
            MsgBox str_Msg
            Exit Sub
        End If
        'Insert record into the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                l_RetVal, _
                "Add OEM Kit", _
                m_str_Vehicle_number, _
                "BUS", _
                "PART NUMBER ---> " + grdSearchResults.Columns.Item("PART NUMBER"), _
                "DESCRIPTION ---> " + grdSearchResults.Columns.Item("DESCRIPTION"), _
                "KEYWORD ---> " + grdSearchResults.Columns.Item("KEYWORD"))
    Else
        Call SetDefaultCursor
        MsgBox "No Rows to select, Please Try Again"
    End If

   ' frmVehCostEstimateMain.RefreshForm
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdAddKitToBus_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub cmdClose_Click()
    On Error GoTo Error_Handler
    
    Unload Me
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdClose_Click", g_l_ErrorLineNumber
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    If m_str_Vehicle_number <> "" Then
         cmdAddKitToBus.Visible = True
         'lblAddOEMKitToBus.Caption = "SEARCH FOR OEM KIT TO ADD TO ESTIMATE"
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub ClearGrids()
    On Error GoTo Error_Handler
    
    grdSearchResults.ClearFields
    grdSearchResults.BorderStyle = dbgFixedSingle
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "ClearGrids", g_l_ErrorLineNumber
End Sub

Private Sub cmdSearch_Click()
    On Error GoTo Error_Handler
    
    Call SearchOEMKits
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "SearchOEMKits", g_l_ErrorLineNumber
End Sub

Private Sub SearchOEMKits()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    Call ClearGrids
    
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.SearchOEMKits("CES_INQUIRY.SEARCH_OEM_KITS", _
                                               txtPartNumber.Text, _
                                               txtKitDetailedDescription.Text)
    Set grdSearchResults.DataSource = RS
        
    Set RS = Nothing
    
    Call FormatGrid
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "SearchOEMKits", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
On Error GoTo Error_Handler
    
    Call SetDefaultCursor
    'Keep the form open until the Make Buy Estimate Closes
    If UnloadMode = 0 Then
        Cancel = True
        Me.Hide
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_Unload(Cancel As Integer)
    On Error GoTo Error_Handler
    
    'm_str_Vehicle_number = ""
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Unload", g_l_ErrorLineNumber
End Sub

Private Sub FormatGrid()
    On Error GoTo Error_Handler
    
    grdSearchResults.Columns("DESCRIPTION").Width = 3500
    
    If Not grdSearchResults.Columns.Count < 4 Then
        grdSearchResults.Columns("ID").Visible = False
        grdSearchResults.Columns("ESTIMATED_COST").Visible = False
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "FormatGrid", g_l_ErrorLineNumber
End Sub

Private Sub grdSearchResults_KeyDown(KeyCode As Integer, Shift As Integer)
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_PartID As String
    Dim str_PartNumber As String
    Dim str_Msg As String
    
    On Error GoTo Error_Handler
        
    If KeyCode = vbKeyDelete And grdSearchResults.Row >= 0 Then
        l_Result = MsgBox("Are you sure you want to delete this item?", vbOKCancel)
        If l_Result = vbOK Then
            Call SetWaitCursor
            str_PartID = grdSearchResults.Columns("ID").Text
            str_PartNumber = grdSearchResults.Columns("PART NUMBER").Text
            ' This is flagged for all stockcoded kits, we can only delete temp kits created by users.
            If str_PartID <> "NODELETE" Then
                l_Result = modDBHelper.DeleteVehicleEstimate("CES_DELETE.DELETE_TEMP_OEMKIT", _
                                                    l_RetVal, _
                                                    str_PartNumber)
                If l_Result = 1 Then
                    Call SetDefaultCursor
                    str_Msg = "This OEM Kit is currently attached to vehicle estimates."
                    str_Msg = str_Msg & Chr(13) & "Please remove it from all vehicle estimates before deleting it."
                    MsgBox str_Msg, vbExclamation, "Deleting OEM Kit"
                Else
                    'Insert record for the KIT history into the AUDIT_MODIFY_HISTORY
                    'table.
                    l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "OEM Kit Info was deleted from the System", _
                            str_PartNumber, _
                            "KIT", _
                            "PART NUMBER ---> " + grdSearchResults.Columns("PART NUMBER").Text, _
                            "DESCRIPTION ---> " + grdSearchResults.Columns("DESCRIPTION").Text, _
                            "KEYWORD ---> " + grdSearchResults.Columns("KEYWORD"))
                    Call SearchOEMKits
                End If
            Else
                MsgBox "You cannot delete a Stock Coded Kit.  Delete temp kits only!"
            End If
        End If
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdSearchResults_KeyDown", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub txtKitDetailedDescription_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtKitDetailedDescription edit-box to upper case.
    l_CursorPosition = txtKitDetailedDescription.SelStart
    str_Data = txtKitDetailedDescription.Text
    str_Data = UCase(str_Data)
    txtKitDetailedDescription.Text = str_Data
    txtKitDetailedDescription.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtKitDetailedDescription_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtPartNumber_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtPartNumber edit-box to upper case.
    l_CursorPosition = txtPartNumber.SelStart
    str_Data = txtPartNumber.Text
    str_Data = UCase(str_Data)
    txtPartNumber.Text = str_Data
    txtPartNumber.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtPartNumber_KeyUp", g_l_ErrorLineNumber
End Sub
Option Explicit

Public m_str_Vehicle_number As String
Private Const m_const_str_CostCentre As String = "05H6"

Private Sub cmdAddKitToBus_Click()
    Dim RS As ADODB.Recordset
    Dim RS_Check As ADODB.Recordset
    Dim str_PartNumber As String
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_Msg As String
    Dim i_Count As Integer
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    If Not grdSearchResults.Row Then
    
        str_PartNumber = grdSearchResults.Columns("PART NUMBER").Text 'gets selected rows first column
        
        'Check to see if kit is already attached
        Set RS_Check = modDBHelper.RetrieveOEMKitsAttached("CES_INQUIRY.RETRIEVE_OEMKITS_ATTACHED", _
                            m_str_Vehicle_number)
   
        If RS_Check.RecordCount > 0 Then
            RS_Check.MoveFirst
            For i_Count = 0 To RS_Check.RecordCount - 1
                If RS_Check.Fields(0).Value = str_PartNumber Then
                    MsgBox "Selected OEM Kit is already attached."
                    Set RS_Check = Nothing
                    Exit Sub
                End If
                RS_Check.MoveNext
            Next i_Count
        End If
        
        Set RS_Check = Nothing


        Set RS = modDBHelper.SearchSCPart("CES_INQUIRY.SEARCH_SC_PART", _
                                              str_PartNumber, _
                                              "0", _
                                              "", _
                                              "", _
                                              2)
                                              
        If RS.RecordCount > 0 Then
                l_Result = modDBHelper.UpdateOEMKitCost("CES_UPDATE.UPDATE_OEMKit_COST", _
                                            l_RetVal, _
                                            str_PartNumber, _
                                            CCur(RS.Fields("PRICE").Value))
        End If

        l_Result = modDBHelper.ADDOEMKitToBus("CES_UPDATE.ADD_OEMKIT_BUS", _
                                                  l_RetVal, _
                                                  str_PartNumber, _
                                                  g_str_UserName, _
                                                  m_const_str_CostCentre, _
                                                  m_str_Vehicle_number)
    
        If (l_Result = 0) Then
            Call SetDefaultCursor
            str_Msg = "OEM Temp Kit Has been added to the Vehicle."
            MsgBox str_Msg
        Else
            Call SetDefaultCursor
            str_Msg = "There was an error adding OEM Temp Kit to Vehicle. Please Contact The Administrator"
            MsgBox str_Msg
            Exit Sub
        End If
        'Insert record into the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                l_RetVal, _
                "Add OEM Kit", _
                m_str_Vehicle_number, _
                "BUS", _
                "PART NUMBER ---> " + grdSearchResults.Columns.Item("PART NUMBER"), _
                "DESCRIPTION ---> " + grdSearchResults.Columns.Item("DESCRIPTION"), _
                "KEYWORD ---> " + grdSearchResults.Columns.Item("KEYWORD"))
    Else
        Call SetDefaultCursor
        MsgBox "No Rows to select, Please Try Again"
    End If

   ' frmVehCostEstimateMain.RefreshForm
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdAddKitToBus_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub cmdClose_Click()
    On Error GoTo Error_Handler
    
    Unload Me
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdClose_Click", g_l_ErrorLineNumber
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    If m_str_Vehicle_number <> "" Then
         cmdAddKitToBus.Visible = True
         'lblAddOEMKitToBus.Caption = "SEARCH FOR OEM KIT TO ADD TO ESTIMATE"
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub ClearGrids()
    On Error GoTo Error_Handler
    
    grdSearchResults.ClearFields
    grdSearchResults.BorderStyle = dbgFixedSingle
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "ClearGrids", g_l_ErrorLineNumber
End Sub

Private Sub cmdSearch_Click()
    On Error GoTo Error_Handler
    
    Call SearchOEMKits
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "SearchOEMKits", g_l_ErrorLineNumber
End Sub

Private Sub SearchOEMKits()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    Call ClearGrids
    
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.SearchOEMKits("CES_INQUIRY.SEARCH_OEM_KITS", _
                                               txtPartNumber.Text, _
                                               txtKitDetailedDescription.Text)
    Set grdSearchResults.DataSource = RS
        
    Set RS = Nothing
    
    Call FormatGrid
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "SearchOEMKits", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
On Error GoTo Error_Handler
    
    Call SetDefaultCursor
    'Keep the form open until the Make Buy Estimate Closes
    If UnloadMode = 0 Then
        Cancel = True
        Me.Hide
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_Unload(Cancel As Integer)
    On Error GoTo Error_Handler
    
    'm_str_Vehicle_number = ""
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Unload", g_l_ErrorLineNumber
End Sub

Private Sub FormatGrid()
    On Error GoTo Error_Handler
    
    grdSearchResults.Columns("DESCRIPTION").Width = 3500
    
    If Not grdSearchResults.Columns.Count < 4 Then
        grdSearchResults.Columns("ID").Visible = False
        grdSearchResults.Columns("ESTIMATED_COST").Visible = False
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "FormatGrid", g_l_ErrorLineNumber
End Sub

Private Sub grdSearchResults_KeyDown(KeyCode As Integer, Shift As Integer)
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_PartID As String
    Dim str_PartNumber As String
    Dim str_Msg As String
    
    On Error GoTo Error_Handler
        
    If KeyCode = vbKeyDelete And grdSearchResults.Row >= 0 Then
        l_Result = MsgBox("Are you sure you want to delete this item?", vbOKCancel)
        If l_Result = vbOK Then
            Call SetWaitCursor
            str_PartID = grdSearchResults.Columns("ID").Text
            str_PartNumber = grdSearchResults.Columns("PART NUMBER").Text
            ' This is flagged for all stockcoded kits, we can only delete temp kits created by users.
            If str_PartID <> "NODELETE" Then
                l_Result = modDBHelper.DeleteVehicleEstimate("CES_DELETE.DELETE_TEMP_OEMKIT", _
                                                    l_RetVal, _
                                                    str_PartNumber)
                If l_Result = 1 Then
                    Call SetDefaultCursor
                    str_Msg = "This OEM Kit is currently attached to vehicle estimates."
                    str_Msg = str_Msg & Chr(13) & "Please remove it from all vehicle estimates before deleting it."
                    MsgBox str_Msg, vbExclamation, "Deleting OEM Kit"
                Else
                    'Insert record for the KIT history into the AUDIT_MODIFY_HISTORY
                    'table.
                    l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "OEM Kit Info was deleted from the System", _
                            str_PartNumber, _
                            "KIT", _
                            "PART NUMBER ---> " + grdSearchResults.Columns("PART NUMBER").Text, _
                            "DESCRIPTION ---> " + grdSearchResults.Columns("DESCRIPTION").Text, _
                            "KEYWORD ---> " + grdSearchResults.Columns("KEYWORD"))
                    Call SearchOEMKits
                End If
            Else
                MsgBox "You cannot delete a Stock Coded Kit.  Delete temp kits only!"
            End If
        End If
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdSearchResults_KeyDown", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub txtKitDetailedDescription_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtKitDetailedDescription edit-box to upper case.
    l_CursorPosition = txtKitDetailedDescription.SelStart
    str_Data = txtKitDetailedDescription.Text
    str_Data = UCase(str_Data)
    txtKitDetailedDescription.Text = str_Data
    txtKitDetailedDescription.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtKitDetailedDescription_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtPartNumber_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtPartNumber edit-box to upper case.
    l_CursorPosition = txtPartNumber.SelStart
    str_Data = txtPartNumber.Text
    str_Data = UCase(str_Data)
    txtPartNumber.Text = str_Data
    txtPartNumber.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtPartNumber_KeyUp", g_l_ErrorLineNumber
End Sub


Option Explicit

Public m_str_Vehicle_number As String
Private Const m_const_str_CostCentre As String = "05H6"

Private Sub cmdAddKitToBus_Click()
    Dim RS As ADODB.Recordset
    Dim RS_Check As ADODB.Recordset
    Dim str_PartNumber As String
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_Msg As String
    Dim i_Count As Integer
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    If Not grdSearchResults.Row Then
    
        str_PartNumber = grdSearchResults.Columns("PART NUMBER").Text 'gets selected rows first column
        
        'Check to see if kit is already attached
        Set RS_Check = modDBHelper.RetrieveOEMKitsAttached("CES_INQUIRY.RETRIEVE_OEMKITS_ATTACHED", _
                            m_str_Vehicle_number)
   
        If RS_Check.RecordCount > 0 Then
            RS_Check.MoveFirst
            For i_Count = 0 To RS_Check.RecordCount - 1
                If RS_Check.Fields(0).Value = str_PartNumber Then
                    MsgBox "Selected OEM Kit is already attached."
                    Set RS_Check = Nothing
                    Exit Sub
                End If
                RS_Check.MoveNext
            Next i_Count
        End If
        
        Set RS_Check = Nothing


        Set RS = modDBHelper.SearchSCPart("CES_INQUIRY.SEARCH_SC_PART", _
                                              str_PartNumber, _
                                              "0", _
                                              "", _
                                              "", _
                                              2)
                                              
        If RS.RecordCount > 0 Then
                l_Result = modDBHelper.UpdateOEMKitCost("CES_UPDATE.UPDATE_OEMKit_COST", _
                                            l_RetVal, _
                                            str_PartNumber, _
                                            CCur(RS.Fields("PRICE").Value))
        End If

        l_Result = modDBHelper.ADDOEMKitToBus("CES_UPDATE.ADD_OEMKIT_BUS", _
                                                  l_RetVal, _
                                                  str_PartNumber, _
                                                  g_str_UserName, _
                                                  m_const_str_CostCentre, _
                                                  m_str_Vehicle_number)
    
        If (l_Result = 0) Then
            Call SetDefaultCursor
            str_Msg = "OEM Temp Kit Has been added to the Vehicle."
            MsgBox str_Msg
        Else
            Call SetDefaultCursor
            str_Msg = "There was an error adding OEM Temp Kit to Vehicle. Please Contact The Administrator"
            MsgBox str_Msg
            Exit Sub
        End If
        'Insert record into the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                l_RetVal, _
                "Add OEM Kit", _
                m_str_Vehicle_number, _
                "BUS", _
                "PART NUMBER ---> " + grdSearchResults.Columns.Item("PART NUMBER"), _
                "DESCRIPTION ---> " + grdSearchResults.Columns.Item("DESCRIPTION"), _
                "KEYWORD ---> " + grdSearchResults.Columns.Item("KEYWORD"))
    Else
        Call SetDefaultCursor
        MsgBox "No Rows to select, Please Try Again"
    End If

   ' frmVehCostEstimateMain.RefreshForm
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdAddKitToBus_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub cmdClose_Click()
    On Error GoTo Error_Handler
    
    Unload Me
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdClose_Click", g_l_ErrorLineNumber
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    If m_str_Vehicle_number <> "" Then
         cmdAddKitToBus.Visible = True
         'lblAddOEMKitToBus.Caption = "SEARCH FOR OEM KIT TO ADD TO ESTIMATE"
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub ClearGrids()
    On Error GoTo Error_Handler
    
    grdSearchResults.ClearFields
    grdSearchResults.BorderStyle = dbgFixedSingle
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "ClearGrids", g_l_ErrorLineNumber
End Sub

Private Sub cmdSearch_Click()
    On Error GoTo Error_Handler
    
    Call SearchOEMKits
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "SearchOEMKits", g_l_ErrorLineNumber
End Sub

Private Sub SearchOEMKits()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    Call ClearGrids
    
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.SearchOEMKits("CES_INQUIRY.SEARCH_OEM_KITS", _
                                               txtPartNumber.Text, _
                                               txtKitDetailedDescription.Text)
    Set grdSearchResults.DataSource = RS
        
    Set RS = Nothing
    
    Call FormatGrid
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "SearchOEMKits", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
On Error GoTo Error_Handler
    
    Call SetDefaultCursor
    'Keep the form open until the Make Buy Estimate Closes
    If UnloadMode = 0 Then
        Cancel = True
        Me.Hide
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_Unload(Cancel As Integer)
    On Error GoTo Error_Handler
    
    'm_str_Vehicle_number = ""
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Unload", g_l_ErrorLineNumber
End Sub

Private Sub FormatGrid()
    On Error GoTo Error_Handler
    
    grdSearchResults.Columns("DESCRIPTION").Width = 3500
    
    If Not grdSearchResults.Columns.Count < 4 Then
        grdSearchResults.Columns("ID").Visible = False
        grdSearchResults.Columns("ESTIMATED_COST").Visible = False
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "FormatGrid", g_l_ErrorLineNumber
End Sub

Private Sub grdSearchResults_KeyDown(KeyCode As Integer, Shift As Integer)
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_PartID As String
    Dim str_PartNumber As String
    Dim str_Msg As String
    
    On Error GoTo Error_Handler
        
    If KeyCode = vbKeyDelete And grdSearchResults.Row >= 0 Then
        l_Result = MsgBox("Are you sure you want to delete this item?", vbOKCancel)
        If l_Result = vbOK Then
            Call SetWaitCursor
            str_PartID = grdSearchResults.Columns("ID").Text
            str_PartNumber = grdSearchResults.Columns("PART NUMBER").Text
            ' This is flagged for all stockcoded kits, we can only delete temp kits created by users.
            If str_PartID <> "NODELETE" Then
                l_Result = modDBHelper.DeleteVehicleEstimate("CES_DELETE.DELETE_TEMP_OEMKIT", _
                                                    l_RetVal, _
                                                    str_PartNumber)
                If l_Result = 1 Then
                    Call SetDefaultCursor
                    str_Msg = "This OEM Kit is currently attached to vehicle estimates."
                    str_Msg = str_Msg & Chr(13) & "Please remove it from all vehicle estimates before deleting it."
                    MsgBox str_Msg, vbExclamation, "Deleting OEM Kit"
                Else
                    'Insert record for the KIT history into the AUDIT_MODIFY_HISTORY
                    'table.
                    l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "OEM Kit Info was deleted from the System", _
                            str_PartNumber, _
                            "KIT", _
                            "PART NUMBER ---> " + grdSearchResults.Columns("PART NUMBER").Text, _
                            "DESCRIPTION ---> " + grdSearchResults.Columns("DESCRIPTION").Text, _
                            "KEYWORD ---> " + grdSearchResults.Columns("KEYWORD"))
                    Call SearchOEMKits
                End If
            Else
                MsgBox "You cannot delete a Stock Coded Kit.  Delete temp kits only!"
            End If
        End If
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdSearchResults_KeyDown", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub txtKitDetailedDescription_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtKitDetailedDescription edit-box to upper case.
    l_CursorPosition = txtKitDetailedDescription.SelStart
    str_Data = txtKitDetailedDescription.Text
    str_Data = UCase(str_Data)
    txtKitDetailedDescription.Text = str_Data
    txtKitDetailedDescription.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtKitDetailedDescription_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtPartNumber_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtPartNumber edit-box to upper case.
    l_CursorPosition = txtPartNumber.SelStart
    str_Data = txtPartNumber.Text
    str_Data = UCase(str_Data)
    txtPartNumber.Text = str_Data
    txtPartNumber.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtPartNumber_KeyUp", g_l_ErrorLineNumber
End Sub
Option Explicit

Public m_str_Vehicle_number As String
Private Const m_const_str_CostCentre As String = "05H6"

Private Sub cmdAddKitToBus_Click()
    Dim RS As ADODB.Recordset
    Dim RS_Check As ADODB.Recordset
    Dim str_PartNumber As String
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_Msg As String
    Dim i_Count As Integer
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    If Not grdSearchResults.Row Then
    
        str_PartNumber = grdSearchResults.Columns("PART NUMBER").Text 'gets selected rows first column
        
        'Check to see if kit is already attached
        Set RS_Check = modDBHelper.RetrieveOEMKitsAttached("CES_INQUIRY.RETRIEVE_OEMKITS_ATTACHED", _
                            m_str_Vehicle_number)
   
        If RS_Check.RecordCount > 0 Then
            RS_Check.MoveFirst
            For i_Count = 0 To RS_Check.RecordCount - 1
                If RS_Check.Fields(0).Value = str_PartNumber Then
                    MsgBox "Selected OEM Kit is already attached."
                    Set RS_Check = Nothing
                    Exit Sub
                End If
                RS_Check.MoveNext
            Next i_Count
        End If
        
        Set RS_Check = Nothing


        Set RS = modDBHelper.SearchSCPart("CES_INQUIRY.SEARCH_SC_PART", _
                                              str_PartNumber, _
                                              "0", _
                                              "", _
                                              "", _
                                              2)
                                              
        If RS.RecordCount > 0 Then
                l_Result = modDBHelper.UpdateOEMKitCost("CES_UPDATE.UPDATE_OEMKit_COST", _
                                            l_RetVal, _
                                            str_PartNumber, _
                                            CCur(RS.Fields("PRICE").Value))
        End If

        l_Result = modDBHelper.ADDOEMKitToBus("CES_UPDATE.ADD_OEMKIT_BUS", _
                                                  l_RetVal, _
                                                  str_PartNumber, _
                                                  g_str_UserName, _
                                                  m_const_str_CostCentre, _
                                                  m_str_Vehicle_number)
    
        If (l_Result = 0) Then
            Call SetDefaultCursor
            str_Msg = "OEM Temp Kit Has been added to the Vehicle."
            MsgBox str_Msg
        Else
            Call SetDefaultCursor
            str_Msg = "There was an error adding OEM Temp Kit to Vehicle. Please Contact The Administrator"
            MsgBox str_Msg
            Exit Sub
        End If
        'Insert record into the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                l_RetVal, _
                "Add OEM Kit", _
                m_str_Vehicle_number, _
                "BUS", _
                "PART NUMBER ---> " + grdSearchResults.Columns.Item("PART NUMBER"), _
                "DESCRIPTION ---> " + grdSearchResults.Columns.Item("DESCRIPTION"), _
                "KEYWORD ---> " + grdSearchResults.Columns.Item("KEYWORD"))
    Else
        Call SetDefaultCursor
        MsgBox "No Rows to select, Please Try Again"
    End If

   ' frmVehCostEstimateMain.RefreshForm
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdAddKitToBus_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub cmdClose_Click()
    On Error GoTo Error_Handler
    
    Unload Me
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdClose_Click", g_l_ErrorLineNumber
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    If m_str_Vehicle_number <> "" Then
         cmdAddKitToBus.Visible = True
         'lblAddOEMKitToBus.Caption = "SEARCH FOR OEM KIT TO ADD TO ESTIMATE"
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub ClearGrids()
    On Error GoTo Error_Handler
    
    grdSearchResults.ClearFields
    grdSearchResults.BorderStyle = dbgFixedSingle
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "ClearGrids", g_l_ErrorLineNumber
End Sub

Private Sub cmdSearch_Click()
    On Error GoTo Error_Handler
    
    Call SearchOEMKits
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "SearchOEMKits", g_l_ErrorLineNumber
End Sub

Private Sub SearchOEMKits()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    Call ClearGrids
    
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.SearchOEMKits("CES_INQUIRY.SEARCH_OEM_KITS", _
                                               txtPartNumber.Text, _
                                               txtKitDetailedDescription.Text)
    Set grdSearchResults.DataSource = RS
        
    Set RS = Nothing
    
    Call FormatGrid
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "SearchOEMKits", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
On Error GoTo Error_Handler
    
    Call SetDefaultCursor
    'Keep the form open until the Make Buy Estimate Closes
    If UnloadMode = 0 Then
        Cancel = True
        Me.Hide
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_Unload(Cancel As Integer)
    On Error GoTo Error_Handler
    
    'm_str_Vehicle_number = ""
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Unload", g_l_ErrorLineNumber
End Sub

Private Sub FormatGrid()
    On Error GoTo Error_Handler
    
    grdSearchResults.Columns("DESCRIPTION").Width = 3500
    
    If Not grdSearchResults.Columns.Count < 4 Then
        grdSearchResults.Columns("ID").Visible = False
        grdSearchResults.Columns("ESTIMATED_COST").Visible = False
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "FormatGrid", g_l_ErrorLineNumber
End Sub

Private Sub grdSearchResults_KeyDown(KeyCode As Integer, Shift As Integer)
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_PartID As String
    Dim str_PartNumber As String
    Dim str_Msg As String
    
    On Error GoTo Error_Handler
        
    If KeyCode = vbKeyDelete And grdSearchResults.Row >= 0 Then
        l_Result = MsgBox("Are you sure you want to delete this item?", vbOKCancel)
        If l_Result = vbOK Then
            Call SetWaitCursor
            str_PartID = grdSearchResults.Columns("ID").Text
            str_PartNumber = grdSearchResults.Columns("PART NUMBER").Text
            ' This is flagged for all stockcoded kits, we can only delete temp kits created by users.
            If str_PartID <> "NODELETE" Then
                l_Result = modDBHelper.DeleteVehicleEstimate("CES_DELETE.DELETE_TEMP_OEMKIT", _
                                                    l_RetVal, _
                                                    str_PartNumber)
                If l_Result = 1 Then
                    Call SetDefaultCursor
                    str_Msg = "This OEM Kit is currently attached to vehicle estimates."
                    str_Msg = str_Msg & Chr(13) & "Please remove it from all vehicle estimates before deleting it."
                    MsgBox str_Msg, vbExclamation, "Deleting OEM Kit"
                Else
                    'Insert record for the KIT history into the AUDIT_MODIFY_HISTORY
                    'table.
                    l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "OEM Kit Info was deleted from the System", _
                            str_PartNumber, _
                            "KIT", _
                            "PART NUMBER ---> " + grdSearchResults.Columns("PART NUMBER").Text, _
                            "DESCRIPTION ---> " + grdSearchResults.Columns("DESCRIPTION").Text, _
                            "KEYWORD ---> " + grdSearchResults.Columns("KEYWORD"))
                    Call SearchOEMKits
                End If
            Else
                MsgBox "You cannot delete a Stock Coded Kit.  Delete temp kits only!"
            End If
        End If
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdSearchResults_KeyDown", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub txtKitDetailedDescription_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtKitDetailedDescription edit-box to upper case.
    l_CursorPosition = txtKitDetailedDescription.SelStart
    str_Data = txtKitDetailedDescription.Text
    str_Data = UCase(str_Data)
    txtKitDetailedDescription.Text = str_Data
    txtKitDetailedDescription.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtKitDetailedDescription_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtPartNumber_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtPartNumber edit-box to upper case.
    l_CursorPosition = txtPartNumber.SelStart
    str_Data = txtPartNumber.Text
    str_Data = UCase(str_Data)
    txtPartNumber.Text = str_Data
    txtPartNumber.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtPartNumber_KeyUp", g_l_ErrorLineNumber
End Sub


Option Explicit

Public m_str_Vehicle_number As String
Private Const m_const_str_CostCentre As String = "05H6"

Private Sub cmdAddKitToBus_Click()
    Dim RS As ADODB.Recordset
    Dim RS_Check As ADODB.Recordset
    Dim str_PartNumber As String
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_Msg As String
    Dim i_Count As Integer
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    If Not grdSearchResults.Row Then
    
        str_PartNumber = grdSearchResults.Columns("PART NUMBER").Text 'gets selected rows first column
        
        'Check to see if kit is already attached
        Set RS_Check = modDBHelper.RetrieveOEMKitsAttached("CES_INQUIRY.RETRIEVE_OEMKITS_ATTACHED", _
                            m_str_Vehicle_number)
   
        If RS_Check.RecordCount > 0 Then
            RS_Check.MoveFirst
            For i_Count = 0 To RS_Check.RecordCount - 1
                If RS_Check.Fields(0).Value = str_PartNumber Then
                    MsgBox "Selected OEM Kit is already attached."
                    Set RS_Check = Nothing
                    Exit Sub
                End If
                RS_Check.MoveNext
            Next i_Count
        End If
        
        Set RS_Check = Nothing


        Set RS = modDBHelper.SearchSCPart("CES_INQUIRY.SEARCH_SC_PART", _
                                              str_PartNumber, _
                                              "0", _
                                              "", _
                                              "", _
                                              2)
                                              
        If RS.RecordCount > 0 Then
                l_Result = modDBHelper.UpdateOEMKitCost("CES_UPDATE.UPDATE_OEMKit_COST", _
                                            l_RetVal, _
                                            str_PartNumber, _
                                            CCur(RS.Fields("PRICE").Value))
        End If

        l_Result = modDBHelper.ADDOEMKitToBus("CES_UPDATE.ADD_OEMKIT_BUS", _
                                                  l_RetVal, _
                                                  str_PartNumber, _
                                                  g_str_UserName, _
                                                  m_const_str_CostCentre, _
                                                  m_str_Vehicle_number)
    
        If (l_Result = 0) Then
            Call SetDefaultCursor
            str_Msg = "OEM Temp Kit Has been added to the Vehicle."
            MsgBox str_Msg
        Else
            Call SetDefaultCursor
            str_Msg = "There was an error adding OEM Temp Kit to Vehicle. Please Contact The Administrator"
            MsgBox str_Msg
            Exit Sub
        End If
        'Insert record into the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                l_RetVal, _
                "Add OEM Kit", _
                m_str_Vehicle_number, _
                "BUS", _
                "PART NUMBER ---> " + grdSearchResults.Columns.Item("PART NUMBER"), _
                "DESCRIPTION ---> " + grdSearchResults.Columns.Item("DESCRIPTION"), _
                "KEYWORD ---> " + grdSearchResults.Columns.Item("KEYWORD"))
    Else
        Call SetDefaultCursor
        MsgBox "No Rows to select, Please Try Again"
    End If

   ' frmVehCostEstimateMain.RefreshForm
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdAddKitToBus_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub cmdClose_Click()
    On Error GoTo Error_Handler
    
    Unload Me
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdClose_Click", g_l_ErrorLineNumber
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    If m_str_Vehicle_number <> "" Then
         cmdAddKitToBus.Visible = True
         'lblAddOEMKitToBus.Caption = "SEARCH FOR OEM KIT TO ADD TO ESTIMATE"
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub ClearGrids()
    On Error GoTo Error_Handler
    
    grdSearchResults.ClearFields
    grdSearchResults.BorderStyle = dbgFixedSingle
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "ClearGrids", g_l_ErrorLineNumber
End Sub

Private Sub cmdSearch_Click()
    On Error GoTo Error_Handler
    
    Call SearchOEMKits
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "SearchOEMKits", g_l_ErrorLineNumber
End Sub

Private Sub SearchOEMKits()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    Call ClearGrids
    
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.SearchOEMKits("CES_INQUIRY.SEARCH_OEM_KITS", _
                                               txtPartNumber.Text, _
                                               txtKitDetailedDescription.Text)
    Set grdSearchResults.DataSource = RS
        
    Set RS = Nothing
    
    Call FormatGrid
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "SearchOEMKits", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
On Error GoTo Error_Handler
    
    Call SetDefaultCursor
    'Keep the form open until the Make Buy Estimate Closes
    If UnloadMode = 0 Then
        Cancel = True
        Me.Hide
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_Unload(Cancel As Integer)
    On Error GoTo Error_Handler
    
    'm_str_Vehicle_number = ""
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Unload", g_l_ErrorLineNumber
End Sub

Private Sub FormatGrid()
    On Error GoTo Error_Handler
    
    grdSearchResults.Columns("DESCRIPTION").Width = 3500
    
    If Not grdSearchResults.Columns.Count < 4 Then
        grdSearchResults.Columns("ID").Visible = False
        grdSearchResults.Columns("ESTIMATED_COST").Visible = False
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "FormatGrid", g_l_ErrorLineNumber
End Sub

Private Sub grdSearchResults_KeyDown(KeyCode As Integer, Shift As Integer)
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_PartID As String
    Dim str_PartNumber As String
    Dim str_Msg As String
    
    On Error GoTo Error_Handler
        
    If KeyCode = vbKeyDelete And grdSearchResults.Row >= 0 Then
        l_Result = MsgBox("Are you sure you want to delete this item?", vbOKCancel)
        If l_Result = vbOK Then
            Call SetWaitCursor
            str_PartID = grdSearchResults.Columns("ID").Text
            str_PartNumber = grdSearchResults.Columns("PART NUMBER").Text
            ' This is flagged for all stockcoded kits, we can only delete temp kits created by users.
            If str_PartID <> "NODELETE" Then
                l_Result = modDBHelper.DeleteVehicleEstimate("CES_DELETE.DELETE_TEMP_OEMKIT", _
                                                    l_RetVal, _
                                                    str_PartNumber)
                If l_Result = 1 Then
                    Call SetDefaultCursor
                    str_Msg = "This OEM Kit is currently attached to vehicle estimates."
                    str_Msg = str_Msg & Chr(13) & "Please remove it from all vehicle estimates before deleting it."
                    MsgBox str_Msg, vbExclamation, "Deleting OEM Kit"
                Else
                    'Insert record for the KIT history into the AUDIT_MODIFY_HISTORY
                    'table.
                    l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "OEM Kit Info was deleted from the System", _
                            str_PartNumber, _
                            "KIT", _
                            "PART NUMBER ---> " + grdSearchResults.Columns("PART NUMBER").Text, _
                            "DESCRIPTION ---> " + grdSearchResults.Columns("DESCRIPTION").Text, _
                            "KEYWORD ---> " + grdSearchResults.Columns("KEYWORD"))
                    Call SearchOEMKits
                End If
            Else
                MsgBox "You cannot delete a Stock Coded Kit.  Delete temp kits only!"
            End If
        End If
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdSearchResults_KeyDown", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub txtKitDetailedDescription_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtKitDetailedDescription edit-box to upper case.
    l_CursorPosition = txtKitDetailedDescription.SelStart
    str_Data = txtKitDetailedDescription.Text
    str_Data = UCase(str_Data)
    txtKitDetailedDescription.Text = str_Data
    txtKitDetailedDescription.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtKitDetailedDescription_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtPartNumber_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtPartNumber edit-box to upper case.
    l_CursorPosition = txtPartNumber.SelStart
    str_Data = txtPartNumber.Text
    str_Data = UCase(str_Data)
    txtPartNumber.Text = str_Data
    txtPartNumber.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtPartNumber_KeyUp", g_l_ErrorLineNumber
End Sub
Option Explicit

Public m_str_Vehicle_number As String
Private Const m_const_str_CostCentre As String = "05H6"

Private Sub cmdAddKitToBus_Click()
    Dim RS As ADODB.Recordset
    Dim RS_Check As ADODB.Recordset
    Dim str_PartNumber As String
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_Msg As String
    Dim i_Count As Integer
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    If Not grdSearchResults.Row Then
    
        str_PartNumber = grdSearchResults.Columns("PART NUMBER").Text 'gets selected rows first column
        
        'Check to see if kit is already attached
        Set RS_Check = modDBHelper.RetrieveOEMKitsAttached("CES_INQUIRY.RETRIEVE_OEMKITS_ATTACHED", _
                            m_str_Vehicle_number)
   
        If RS_Check.RecordCount > 0 Then
            RS_Check.MoveFirst
            For i_Count = 0 To RS_Check.RecordCount - 1
                If RS_Check.Fields(0).Value = str_PartNumber Then
                    MsgBox "Selected OEM Kit is already attached."
                    Set RS_Check = Nothing
                    Exit Sub
                End If
                RS_Check.MoveNext
            Next i_Count
        End If
        
        Set RS_Check = Nothing


        Set RS = modDBHelper.SearchSCPart("CES_INQUIRY.SEARCH_SC_PART", _
                                              str_PartNumber, _
                                              "0", _
                                              "", _
                                              "", _
                                              2)
                                              
        If RS.RecordCount > 0 Then
                l_Result = modDBHelper.UpdateOEMKitCost("CES_UPDATE.UPDATE_OEMKit_COST", _
                                            l_RetVal, _
                                            str_PartNumber, _
                                            CCur(RS.Fields("PRICE").Value))
        End If

        l_Result = modDBHelper.ADDOEMKitToBus("CES_UPDATE.ADD_OEMKIT_BUS", _
                                                  l_RetVal, _
                                                  str_PartNumber, _
                                                  g_str_UserName, _
                                                  m_const_str_CostCentre, _
                                                  m_str_Vehicle_number)
    
        If (l_Result = 0) Then
            Call SetDefaultCursor
            str_Msg = "OEM Temp Kit Has been added to the Vehicle."
            MsgBox str_Msg
        Else
            Call SetDefaultCursor
            str_Msg = "There was an error adding OEM Temp Kit to Vehicle. Please Contact The Administrator"
            MsgBox str_Msg
            Exit Sub
        End If
        'Insert record into the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                l_RetVal, _
                "Add OEM Kit", _
                m_str_Vehicle_number, _
                "BUS", _
                "PART NUMBER ---> " + grdSearchResults.Columns.Item("PART NUMBER"), _
                "DESCRIPTION ---> " + grdSearchResults.Columns.Item("DESCRIPTION"), _
                "KEYWORD ---> " + grdSearchResults.Columns.Item("KEYWORD"))
    Else
        Call SetDefaultCursor
        MsgBox "No Rows to select, Please Try Again"
    End If

   ' frmVehCostEstimateMain.RefreshForm
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdAddKitToBus_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub cmdClose_Click()
    On Error GoTo Error_Handler
    
    Unload Me
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdClose_Click", g_l_ErrorLineNumber
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    If m_str_Vehicle_number <> "" Then
         cmdAddKitToBus.Visible = True
         'lblAddOEMKitToBus.Caption = "SEARCH FOR OEM KIT TO ADD TO ESTIMATE"
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub ClearGrids()
    On Error GoTo Error_Handler
    
    grdSearchResults.ClearFields
    grdSearchResults.BorderStyle = dbgFixedSingle
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "ClearGrids", g_l_ErrorLineNumber
End Sub

Private Sub cmdSearch_Click()
    On Error GoTo Error_Handler
    
    Call SearchOEMKits
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "SearchOEMKits", g_l_ErrorLineNumber
End Sub

Private Sub SearchOEMKits()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    Call ClearGrids
    
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.SearchOEMKits("CES_INQUIRY.SEARCH_OEM_KITS", _
                                               txtPartNumber.Text, _
                                               txtKitDetailedDescription.Text)
    Set grdSearchResults.DataSource = RS
        
    Set RS = Nothing
    
    Call FormatGrid
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "SearchOEMKits", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
On Error GoTo Error_Handler
    
    Call SetDefaultCursor
    'Keep the form open until the Make Buy Estimate Closes
    If UnloadMode = 0 Then
        Cancel = True
        Me.Hide
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_Unload(Cancel As Integer)
    On Error GoTo Error_Handler
    
    'm_str_Vehicle_number = ""
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Unload", g_l_ErrorLineNumber
End Sub

Private Sub FormatGrid()
    On Error GoTo Error_Handler
    
    grdSearchResults.Columns("DESCRIPTION").Width = 3500
    
    If Not grdSearchResults.Columns.Count < 4 Then
        grdSearchResults.Columns("ID").Visible = False
        grdSearchResults.Columns("ESTIMATED_COST").Visible = False
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "FormatGrid", g_l_ErrorLineNumber
End Sub

Private Sub grdSearchResults_KeyDown(KeyCode As Integer, Shift As Integer)
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_PartID As String
    Dim str_PartNumber As String
    Dim str_Msg As String
    
    On Error GoTo Error_Handler
        
    If KeyCode = vbKeyDelete And grdSearchResults.Row >= 0 Then
        l_Result = MsgBox("Are you sure you want to delete this item?", vbOKCancel)
        If l_Result = vbOK Then
            Call SetWaitCursor
            str_PartID = grdSearchResults.Columns("ID").Text
            str_PartNumber = grdSearchResults.Columns("PART NUMBER").Text
            ' This is flagged for all stockcoded kits, we can only delete temp kits created by users.
            If str_PartID <> "NODELETE" Then
                l_Result = modDBHelper.DeleteVehicleEstimate("CES_DELETE.DELETE_TEMP_OEMKIT", _
                                                    l_RetVal, _
                                                    str_PartNumber)
                If l_Result = 1 Then
                    Call SetDefaultCursor
                    str_Msg = "This OEM Kit is currently attached to vehicle estimates."
                    str_Msg = str_Msg & Chr(13) & "Please remove it from all vehicle estimates before deleting it."
                    MsgBox str_Msg, vbExclamation, "Deleting OEM Kit"
                Else
                    'Insert record for the KIT history into the AUDIT_MODIFY_HISTORY
                    'table.
                    l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "OEM Kit Info was deleted from the System", _
                            str_PartNumber, _
                            "KIT", _
                            "PART NUMBER ---> " + grdSearchResults.Columns("PART NUMBER").Text, _
                            "DESCRIPTION ---> " + grdSearchResults.Columns("DESCRIPTION").Text, _
                            "KEYWORD ---> " + grdSearchResults.Columns("KEYWORD"))
                    Call SearchOEMKits
                End If
            Else
                MsgBox "You cannot delete a Stock Coded Kit.  Delete temp kits only!"
            End If
        End If
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdSearchResults_KeyDown", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub txtKitDetailedDescription_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtKitDetailedDescription edit-box to upper case.
    l_CursorPosition = txtKitDetailedDescription.SelStart
    str_Data = txtKitDetailedDescription.Text
    str_Data = UCase(str_Data)
    txtKitDetailedDescription.Text = str_Data
    txtKitDetailedDescription.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtKitDetailedDescription_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtPartNumber_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtPartNumber edit-box to upper case.
    l_CursorPosition = txtPartNumber.SelStart
    str_Data = txtPartNumber.Text
    str_Data = UCase(str_Data)
    txtPartNumber.Text = str_Data
    txtPartNumber.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtPartNumber_KeyUp", g_l_ErrorLineNumber
End Sub

Option Explicit

Private m_str_Msg As String
Private Const m_str_const_MsgBoxCaption As String = "Add / Update Rebuilt Parts"

Private m_var_RowID As Variant
Private m_str_MMSStockCode As String

Public m_str_LinkNumber As String
Public m_str_TypeCode As String
Public m_str_AuditReference As String

'Pass values to populate the form for editing
Public Sub PassValues(ByVal str_RebuiltNum As String, _
                      ByVal str_PercentUsage As String, _
                      ByVal str_Quantity As String, _
                      ByVal var_RowIDPass As Variant)
     On Error GoTo Error_Handler
     
     cboRebuiltNumber.Text = str_RebuiltNum
     Call ResolveRebuiltPart
     txtQuantity.Text = str_Quantity
     txtPercentUsage.Text = Replace(str_PercentUsage, ",", ".")
     m_var_RowID = var_RowIDPass
     cmdAdd.Caption = "Update"
     cmdClose.Visible = False
     cboRebuiltNumber.Enabled = False
     cmdResolve.Enabled = False

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PassValues", g_l_ErrorLineNumber
End Sub

Private Sub cmdAdd_Click()
    Dim l_RetVal As Long
    Dim l_Result As Long
    Dim l_Count As Long
    Dim str_PercentUsage As String
    Dim str_CostCentre As String
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    If cboRebuiltNumber.Text = "" Then
         If Not IsNumeric(cboRebuiltNumber.Text) Then
            Call SetDefaultCursor
            m_str_Msg = "Please enter a Rebuilt Number"
            MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
            cboRebuiltNumber.SetFocus
            Exit Sub
         End If
     End If
    If Not IsNumeric(txtQuantity.Text) Then
        Call SetDefaultCursor
        m_str_Msg = "Quantity not entered correctly."
        MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
        txtQuantity.SetFocus
        Exit Sub
    Else
        If Not IsValidLong(txtQuantity.Text) Then
            Call SetDefaultCursor
            m_str_Msg = "Quantity not entered correctly."
            MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
            txtQuantity.SetFocus
            Exit Sub
        End If
    End If
    'Check that quantity is positive number or zero.
    If CLng(txtQuantity.Text) < 0 Then
        Call SetDefaultCursor
        m_str_Msg = "Quantity not entered correctly."
        MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
        txtQuantity.SetFocus
        Exit Sub
    End If
    
    If txtPartUnitCost.Text = "" Then
        txtPartUnitCost.Text = 0
    End If
    
    'Check that user typed something into txtPercentUsage edit-box, and this data is
    'valid percent.
    str_PercentUsage = Trim(txtPercentUsage.Text)
    If str_PercentUsage = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please provide a Percent Usage. Percent Usage can be a "
        m_str_Msg = m_str_Msg + "positive number between 0 and 100 inclusive with "
        m_str_Msg = m_str_Msg + "possible fraction."
        MsgBox m_str_Msg, vbExclamation Or vbOKOnly, m_str_const_MsgBoxCaption
        txtPercentUsage.SetFocus
        Exit Sub
    End If
    If CheckPercent(str_PercentUsage) = False Then
        Call SetDefaultCursor
        m_str_Msg = "Percent Usage is not entered correctly. Percent Usage can be a "
        m_str_Msg = m_str_Msg + "positive number between 0 and 100 inclusive with "
        m_str_Msg = m_str_Msg + "possible fraction."
        MsgBox m_str_Msg, vbExclamation Or vbOKOnly, m_str_const_MsgBoxCaption
        txtPercentUsage.SetFocus
        Exit Sub
    End If
    
    str_PercentUsage = Replace(str_PercentUsage, ".", ",")
    
    'Check that user typed something into the txtQuantity edit-box, and this data is
    'valid quantity.

       
    If cmdAdd.Caption = "Add" Then
        'Before adding check that "Rebuilt Number" is not duplicated in the estimate.
        Set RS = New ADODB.Recordset
        Set RS = modDBHelper.RetrieveRBPUsed("CES_INQUIRY.RETRIEVE_RBP_USED", _
                                             m_str_LinkNumber, _
                                             m_str_TypeCode)
        If RS.RecordCount > 0 Then
            RS.MoveFirst
            For l_Count = 0 To RS.RecordCount - 1
                If RS.Fields.Item("REBUILT NUMBER") = cboRebuiltNumber.Text Then
                    Set RS = Nothing
                    Call SetDefaultCursor
                    m_str_Msg = "Record with the same Rebuilt Number is already exist "
                    m_str_Msg = m_str_Msg + "in the current Estimate. Please choose "
                    m_str_Msg = m_str_Msg + "another one."
                    MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
                    cboRebuiltNumber.SetFocus
                    Exit Sub
                End If
                RS.MoveNext
            Next l_Count
        End If
        Set RS = Nothing
        
        'Add a new stock coded part
        l_Result = modDBHelper.AddRBPUsed("CES_UPDATE.ADD_RBP_USED", _
                                          l_RetVal, _
                                          m_str_MMSStockCode, _
                                          " ", _
                                          txtQuantity.Text, _
                                          str_PercentUsage, _
                                          g_str_UserName, _
                                          m_str_LinkNumber, _
                                          CCur(txtPartUnitCost.Text), _
                                          cboRebuiltNumber.Text, _
                                          m_str_TypeCode, _
                                          CCur("0.00"))
                                          'CCur(txtCoreCost.Text))
        
        If (l_Result = 0) Then
            Call SetDefaultCursor
            m_str_Msg = "Rebuilt Part has been added."
            MsgBox m_str_Msg, vbInformation Or vbOKOnly, m_str_const_MsgBoxCaption
        Else
            Call SetDefaultCursor
            m_str_Msg = "There was an error adding Stock Coded Part. Please Contact "
            m_str_Msg = m_str_Msg + "Administrator."
            MsgBox m_str_Msg, vbCritical Or vbOKOnly, m_str_const_MsgBoxCaption
        End If
        cmdAdd.Enabled = False
        
        '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT Begin >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        
        'Insert record into the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                l_RetVal, _
                "Add Rebuilt Part", _
                m_str_AuditReference, _
                m_str_TypeCode, _
                "Rebuilt Number ---> " + Trim(cboRebuiltNumber.Text), _
                "Keyword ---> " + Trim(cboPartType.Text), _
                "Description ---> " + Trim(cboPartDescription.Text), _
                "Quantity ---> " + Trim(txtQuantity.Text), _
                "Percent Usage ---> " + Trim(txtPercentUsage.Text), _
                "Last Revised ---> " + Trim(txtLastRevised.Text), _
                "Part Cost ($/unit) ---> " + Trim(txtPartUnitCost.Text))
                
        ' If adding a rebuilt part inside a rebuilt part then cycle
        ' changes to all estimates containing this rebuilt part
        If m_str_TypeCode = "RB" Then
            
            'Now find all estimates where current Rebuilt Part Estimate is present.
            Set RS = New ADODB.Recordset
            
            'In the SC_PARTS_USED table find all Estimates where the current RBE is present.
            Set RS = modDBHelper.RetrieveESTToPropagateRB("CES_INQUIRY.RETRIEVE_EST_TO_PROPAGATE_RB", _
                                                          m_str_AuditReference)
            If RS.RecordCount > 0 Then
                RS.MoveFirst
                    For l_Count = 0 To RS.RecordCount - 1
                        'Add records to the AUDIT_MODIFY_HISTORY table.
                        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "Indirect change. Rebuilt Part was added to the Rebuilt Part Estimate " + m_str_AuditReference, _
                            RS.Fields.Item("link_code"), _
                            RS.Fields.Item("link_type"), _
                            "Rebuilt Number ---> " + Trim(cboRebuiltNumber.Text), _
                            "Keyword ---> " + Trim(cboPartType.Text), _
                            "Description ---> " + Trim(cboPartDescription.Text), _
                            "Quantity ---> " + Trim(txtQuantity.Text), _
                            "Percent Usage ---> " + Trim(txtPercentUsage.Text), _
                            "Last Revised ---> " + Trim(txtLastRevised.Text), _
                            "Part Cost ($/unit) ---> " + Trim(txtPartUnitCost.Text))
                        RS.MoveNext
                    Next l_Count
            End If
            Set RS = Nothing
                       
        End If
        '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT End >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    Else
        'Update an existing stock coded part
        l_Result = modDBHelper.UpdateRBPUsed("CES_UPDATE.UPDATE_RBP_USED", _
                                             l_RetVal, _
                                             " ", _
                                             txtQuantity.Text, _
                                             str_PercentUsage, _
                                             g_str_UserName, _
                                             m_str_LinkNumber, _
                                             CCur(txtPartUnitCost.Text), _
                                             cboRebuiltNumber.Text, _
                                             m_var_RowID, _
                                             CCur("0.00"))
                                             'CCur(txtCoreCost.Text))
    
        If (l_Result = 0) Then
            Call SetDefaultCursor
            m_str_Msg = "Rebuilt Part has been updated."
            MsgBox m_str_Msg, vbOKOnly Or vbInformation, m_str_const_MsgBoxCaption
        Else
            Call SetDefaultCursor
            m_str_Msg = "There was an error updating Rebuilt Part. Please Contact "
            m_str_Msg = m_str_Msg + "Administrator."
            MsgBox m_str_Msg, vbOKOnly Or vbCritical, m_str_const_MsgBoxCaption
        End If
        
         '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT Begin >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        
        'Insert record into the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                l_RetVal, _
                "Update Rebuilt Part", _
                m_str_AuditReference, _
                m_str_TypeCode, _
                "Rebuilt Number ---> " + Trim(cboRebuiltNumber.Text), _
                "Keyword ---> " + Trim(cboPartType.Text), _
                "Description ---> " + Trim(cboPartDescription.Text), _
                "Quantity ---> " + Trim(txtQuantity.Text), _
                "Percent Usage ---> " + Trim(txtPercentUsage.Text), _
                "Last Revised ---> " + Trim(txtLastRevised.Text), _
                "Part Cost ($/unit) ---> " + Trim(txtPartUnitCost.Text))
                
        ' If updating a rebuilt part inside a rebuilt part then cycle
        ' changes to all estimates containing this rebuilt part
        If m_str_TypeCode = "RB" Then
            
            'Now find all estimates where current Rebuilt Part Estimate is present.
            Set RS = New ADODB.Recordset
            
            'In the SC_PARTS_USED table find all Estimates where the current RBE is present.
            Set RS = modDBHelper.RetrieveESTToPropagateRB("CES_INQUIRY.RETRIEVE_EST_TO_PROPAGATE_RB", _
                                                          m_str_AuditReference)
            If RS.RecordCount > 0 Then
                RS.MoveFirst
                    For l_Count = 0 To RS.RecordCount - 1
                        'Add records to the AUDIT_MODIFY_HISTORY table.
                        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "Indirect change. Rebuilt Part was updated from the Rebuilt Part Estimate " + m_str_AuditReference, _
                            RS.Fields.Item("link_code"), _
                            RS.Fields.Item("link_type"), _
                            "Rebuilt Number ---> " + Trim(cboRebuiltNumber.Text), _
                            "Keyword ---> " + Trim(cboPartType.Text), _
                            "Description ---> " + Trim(cboPartDescription.Text), _
                            "Quantity ---> " + Trim(txtQuantity.Text), _
                            "Percent Usage ---> " + Trim(txtPercentUsage.Text), _
                            "Last Revised ---> " + Trim(txtLastRevised.Text), _
                            "Part Cost ($/unit) ---> " + Trim(txtPartUnitCost.Text))
                        RS.MoveNext
                    Next l_Count
            End If
            Set RS = Nothing
        End If
        '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT End >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        Unload Me
    End If

    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdAdd_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub cmdClose_Click()
    On Error GoTo Error_Handler
    
    Unload Me
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdClose_Click", g_l_ErrorLineNumber
End Sub

Private Sub ResolveRebuiltPart()
    Dim RS As ADODB.Recordset
    Dim RSCodes As ADODB.Recordset
    Dim RSLinks As ADODB.Recordset
    Dim RBPGraph As clsGraph
    Dim str_Cycle As String
    
    'Fills in the rest of the fields from the Rebuilt Code
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor

    Set RS = New ADODB.Recordset
    'Query the database to receive the information about the part
    'First populate the rebuilt information
    Set RS = modDBHelper.RetrieveRB("CES_INQUIRY.RETRIEVE_RB")
    RS.Filter = "rebuilt_stock_num = '" + cboRebuiltNumber.Text + "'"
    If RS.RecordCount > 0 Then
        RS.MoveFirst
        
        ' Before resolving the rebuilt part ensure that this part can legally be
        ' added with out creating any cycles of rebuilt parts in the system
        If m_str_TypeCode = "RB" Then
            ' Get all of the rebuilt part codes that are used and the links to other rebuilt parts
            Set RSCodes = modDBHelper.RetrieveRBPUsedDistinct("CES_INQUIRY.RETRIEVE_RBP_USED_DISTINCT")
            Set RSLinks = modDBHelper.RetrieveRBPUsedLinks("CES_INQUIRY.RETRIEVE_RBP_USED_LINKS")
            ' Now create a Graph of all Rebuilt Parts contained and containing other
            ' Rebuilt Parts
            Set RBPGraph = New clsGraph
            ' Add the vertices which are the Rebuilt Parts
            If RSCodes.RecordCount > 0 Then
                RSCodes.MoveFirst
                While Not RSCodes.EOF
                    RBPGraph.AddVertex UCase(RSCodes.Fields.Item("mms_rebuilt_code"))
                    RSCodes.MoveNext
                Wend
            End If
            ' Add the edges which show which rebuilt parts belong to which others
            If RSLinks.RecordCount > 0 Then
                RSLinks.MoveFirst
                While Not RSLinks.EOF
                    RBPGraph.AddEdge UCase(RSLinks.Fields.Item("mms_rebuilt_code")), UCase(RSLinks.Fields.Item("link_code"))
                    RSLinks.MoveNext
                Wend
            End If
            ' Now add the edge to represent the part to be added
            If Not RBPGraph.VertexExists(UCase(RS.Fields.Item("rebuilt_stock_num"))) Then
                RBPGraph.AddVertex UCase(RS.Fields.Item("rebuilt_stock_num"))
            End If
            If Not RBPGraph.VertexExists(UCase(m_str_LinkNumber)) Then
                RBPGraph.AddVertex UCase(m_str_LinkNumber)
            End If
            RBPGraph.AddEdge UCase(RS.Fields.Item("rebuilt_stock_num")), UCase(m_str_LinkNumber)
            ' Now use the graph object representing the rebuilt parts to determine
            ' whether or not any cycles exist
            If RBPGraph.CycleExists Then
                ' There is a cycle.  We must identify it
                str_Cycle = RBPGraph.FindCycle()
                ' Clean up and show message
                Call SetDefaultCursor
                Set RS = Nothing
                Set RSCodes = Nothing
                Set RSLinks = Nothing
                Set RBPGraph = Nothing
                cmdAdd.Enabled = False
                m_str_Msg = "Error. Adding this Rebuilt Part would create the following invalid cycle of Rebuilt Parts:"
                m_str_Msg = m_str_Msg & Chr(13) & str_Cycle
                MsgBox m_str_Msg, vbExclamation Or vbOKOnly, m_str_const_MsgBoxCaption
                Exit Sub
            End If
        End If
        
        'Load the values into the text boxes
        cboRebuiltNumber.Text = RS.Fields.Item("rebuilt_stock_num")
        cboPartType.Text = RS.Fields.Item("keyword")
        cboPartDescription.Text = RS.Fields.Item("detailed_desc")
      
        txtLastRevised.Text = IIf(IsNull(RS.Fields.Item("date_modified")), "", _
                                  RS.Fields.Item("date_modified"))
        If IsNull(RS.Fields.Item("mms_stock_code")) = True Then
            m_str_MMSStockCode = ""
        Else
            m_str_MMSStockCode = RS.Fields.Item("mms_stock_code")
        End If
        
       'Retrieve the material cost of the rebuilt part resolved
       Set RS = modDBHelper.RetrieveRBPTotalCost2("CES_INQUIRY.RETRIEVE_RBP_TOTAL_COST2", cboRebuiltNumber.Text, "RB")
              
       If RS.RecordCount > 0 Then
           txtPartUnitCost.Text = Format(ColumnTotals(RS, "TOTAL COST"), "currency")
       Else
           txtPartUnitCost.Text = "0"
       End If
       cmdAdd.Enabled = True
       cmdResolve.Default = False
       cmdAdd.Default = True
    Else
        Call SetDefaultCursor
        'Cannot find the part
        cmdAdd.Enabled = False
        cmdAdd.Default = False
        cmdResolve.Default = True
        m_str_Msg = "No information for the Rebuilt Number."
        MsgBox m_str_Msg, vbExclamation Or vbOKOnly, m_str_const_MsgBoxCaption
        'cboRebuiltNumber.SetFocus
    End If
    
    Set RS = Nothing
    Set RSCodes = Nothing
    Set RSLinks = Nothing
    Set RBPGraph = Nothing
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "ResolveRebuiltPart", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    If Not RSCodes Is Nothing Then
        Set RSCodes = Nothing
    End If
    If Not RSLinks Is Nothing Then
        Set RSLinks = Nothing
    End If
    If Not RBPGraph Is Nothing Then
        Set RBPGraph = Nothing
    End If
End Sub

Private Sub cmdResolve_Click()
    On Error GoTo Error_Handler
    
    Call ResolveRebuiltPart
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdResolve_Click", g_l_ErrorLineNumber
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    cboPartDescription.Enabled = False
    cboPartType.Enabled = False

    Call PopulateFields
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub PopulateFields()
    Dim RS As New ADODB.Recordset
    
    'Populate each of the combo boxes
    
    On Error GoTo Error_Handler
    
    Set cboRebuiltNumber.RowSource = modDBHelper.PopulateRBComboBoxes( _
                                                "CES_INQUIRY.POPULATE_RB_COMBOXES", _
                                                "1")
    cboRebuiltNumber.ListField = "rebuilt_stock_num"

    Set cboPartType.RowSource = modDBHelper.PopulateRBComboBoxes( _
                                                "CES_INQUIRY.POPULATE_RB_COMBOXES", _
                                                "2")
    cboPartType.ListField = "keyword"

    Set cboPartDescription.RowSource = modDBHelper.PopulateRBComboBoxes( _
                                                "CES_INQUIRY.POPULATE_RB_COMBOXES", _
                                                "3")
    cboPartDescription.ListField = "detailed_desc"
           
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateFields", g_l_ErrorLineNumber
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler

    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub fraPartInformation_DragDrop(Source As Control, X As Single, Y As Single)

End Sub

Private Sub fraRetrieveInformation_DragDrop(Source As Control, X As Single, Y As Single)

End Sub

Private Sub lblRebuiltNumber_Click()

End Sub

Private Sub txtPercentUsage_GotFocus()
    On Error GoTo Error_Handler

    txtPercentUsage.SelStart = 0
    txtPercentUsage.SelLength = Len(txtPercentUsage.Text)
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtPercentUsage_GotFocus", g_l_ErrorLineNumber
End Sub

Private Sub txtQuantity_GotFocus()
    On Error GoTo Error_Handler

    txtQuantity.SelStart = 0
    txtQuantity.SelLength = Len(txtQuantity.Text)
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtQuantity_GotFocus", g_l_ErrorLineNumber
End Sub
Option Explicit

Private m_str_Msg As String
Private m_l_Selected() As Long
Private m_l_ArraySize As Long

'Only up to 10 selected buses from the lstListOfBuses list-box will be saved into the
'AUDIT_MODIFY_HISTORY table. If you want increase this quantity, you should increase
'next constant variable, and make changes in the InsertIntoAuditModifyHistory call.

Private Const m_const_l_SelectedBusesSize As Long = 9
Private m_str_SelectedBuses() As String

Public m_b_imgChanged As Boolean
Public m_str_imgRBPNumber As String
Private m_str_RBPImgPath As String
Public m_str_MMSStockCode As String
Public m_str_RebuiltCode As String
Public m_var_RowID As Variant
Public m_str_AuditReference As String

Private Sub cmdAdd_Click()
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim l_Count As Long
    Dim l_Count1 As Long
    Dim str_RebuiltStockCode As String
    Dim str_RBStockCodeFromDB As String
    Dim str_MMSStockCode As String
    Dim str_MMSStockCodeFromDB As String
    Dim str_DetailedDescription As String
    Dim str_Keyword As String
    Dim str_CoreStockCode As String
    Dim str_JobNumber As String
    Dim str_CoreCost As String
    Dim str_BuyCost As String
    Dim str_ExternalCost As String
    Dim str_RemanufacturedCost As String

    Dim RS As Recordset
    
    On Error GoTo Error_Handler
 
    Call SetWaitCursor
    
    str_RebuiltStockCode = Trim(txtRebuiltStockCode.Text)
    If str_RebuiltStockCode = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Rebuilt Stock Code should not be empty."
        MsgBox m_str_Msg, vbInformation + vbOKOnly
        txtRebuiltStockCode.SetFocus
        Exit Sub
    End If
    
    str_DetailedDescription = Trim(txtDetailedDescription.Text)
    If str_DetailedDescription = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Description should not be empty."
        MsgBox m_str_Msg, vbInformation + vbOKOnly
        txtDetailedDescription.SetFocus
        Exit Sub
    End If
    
    str_Keyword = Trim(cboKeyword.Text)
    If str_Keyword = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Keyword should not be empty."
        MsgBox m_str_Msg, vbInformation + vbOKOnly
        cboKeyword.SetFocus
        Exit Sub
    End If
    
    str_JobNumber = Trim(cboJobNumber.Text)
    'Job Number should be a number.
    If str_JobNumber = "" Then
        'Call SetDefaultCursor
        'm_str_Msg = "Job Number should be a number."
        'MsgBox m_str_Msg, vbInformation + vbOKOnly
        'cboJobNumber.SetFocus
        str_JobNumber = " "
        'Exit Sub
    Else
        If IsNumeric(str_JobNumber) = False Then
            Call SetDefaultCursor
            m_str_Msg = "Job Number should be a number."
            MsgBox m_str_Msg, vbInformation + vbOKOnly
            cboJobNumber.SetFocus
            Exit Sub
        End If
    End If
    
    str_MMSStockCode = Trim(txtMMSStockCode.Text)
    If str_MMSStockCode = "" Then
        Call SetDefaultCursor
        m_str_Msg = "MMS Buy Code should not be empty."
        MsgBox m_str_Msg, vbInformation + vbOKOnly
        txtMMSStockCode.SetFocus
        Exit Sub
    End If

    str_CoreStockCode = Trim(txtCoreStockCode.Text)

    str_CoreCost = Trim(txtCoreChargeCode.Text)
    'Core Cost should be numeric (currency).
    If str_CoreCost <> "" Then
        If IsValidCurrency(str_CoreCost) = False Then
            Call SetDefaultCursor
            m_str_Msg = "Core Cost should be a number."
            MsgBox m_str_Msg, vbInformation + vbOKOnly
            txtCoreChargeCode.SetFocus
            Exit Sub
        End If
    Else
        txtCoreChargeCode.Text = "0.00"
    End If
    txtCoreChargeCode.Text = CStr(CDbl(txtCoreChargeCode.Text))
    str_CoreCost = txtCoreChargeCode.Text

    str_BuyCost = Trim(txtBuyCost.Text)
    'Buy Cost should be numeric (currency).
    If str_BuyCost <> "" Then
        If IsValidCurrency(str_BuyCost) = False Then
            Call SetDefaultCursor
            m_str_Msg = "Buy Cost should be a number."
            MsgBox m_str_Msg, vbInformation + vbOKOnly
            txtBuyCost.SetFocus
            Exit Sub
        End If
    End If

'    str_ExternalCost = Trim(txtExternalCost.Text)
'    'External Cost should be numeric (currency).
'    If str_ExternalCost <> "" Then
'        If IsValidCurrency(str_ExternalCost) = False Then
'            Call SetDefaultCursor
'            m_str_Msg = "External Cost should be a number."
'            MsgBox m_str_Msg, vbInformation + vbOKOnly
'            txtExternalCost.SetFocus
'            Exit Sub
'        End If
'    End If

    str_RemanufacturedCost = Trim(txtRemanufacturedCost.Text)
    'Remanufactured Cost should be numeric (currency).
    If str_RemanufacturedCost = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Remanufactured Cost should be a number."
        MsgBox m_str_Msg, vbInformation + vbOKOnly
        txtRemanufacturedCost.SetFocus
        Exit Sub
    Else
        If IsValidCurrency(str_RemanufacturedCost) = False Then
            Call SetDefaultCursor
            m_str_Msg = "Remanufactured Cost should be a number."
            MsgBox m_str_Msg, vbInformation + vbOKOnly
            txtRemanufacturedCost.SetFocus
            Exit Sub
        End If
    End If
    
    'Make sure that user choused at least one bus from the lstListOfBuses list-box.
    If lstListOfBuses.ListCount > 0 Then
        If lstListOfBuses.SelCount = 0 Then
            Call SetDefaultCursor
            m_str_Msg = "Please choose Vehicle."
            MsgBox m_str_Msg
            lstListOfBuses.SetFocus
            Exit Sub
        End If
    Else
        Call SetDefaultCursor
        'No items in the lstListOfBuses list-box. But user should choose some bus.
        m_str_Msg = "No vehicles to choose from. Make Buy will not be "
        m_str_Msg = m_str_Msg + "added. Report this error to Supervisor."
        MsgBox m_str_Msg
        lstListOfBuses.SetFocus
        Exit Sub
    End If
    
    If cmdAdd.Caption = "Add" Then
        'Make sure that data in the txtRebuiltStockCode edit-box is not in the
        'RB_MASTERLIST.MMS_STOCK_CODE field.
        
        Set RS = New ADODB.Recordset
        Set RS = modDBHelper.RetrieveRB("CES_INQUIRY.RETRIEVE_RB")
        
        If Not IsNull(RS) And RS.RecordCount > 0 Then
            RS.MoveFirst
            For l_Count = 1 To RS.RecordCount
                str_RBStockCodeFromDB = RS.Fields.Item("REBUILT_STOCK_NUM")
                If str_RebuiltStockCode = str_RBStockCodeFromDB Then
                    Call SetDefaultCursor
                    m_str_Msg = "Rebuilt Stock Code is duplicated. Please provide another one."
                    MsgBox m_str_Msg, vbInformation + vbOKOnly
                    Set RS = Nothing
                    txtRebuiltStockCode.SetFocus
                    Exit Sub
                End If
                RS.MoveNext
            Next l_Count
            RS.MoveFirst
        End If
        
        'Set RS = modDBHelper.RetrieveRB("CES_INQUIRY.RETRIEVE_RB")
        If Not IsNull(RS) And RS.RecordCount > 0 Then
            RS.MoveFirst
            For l_Count = 1 To RS.RecordCount
                If IsNull(RS.Fields.Item("MMS_STOCK_CODE")) = False Then
                    str_MMSStockCodeFromDB = RS.Fields.Item("MMS_STOCK_CODE")
                    If str_MMSStockCode = str_MMSStockCodeFromDB Then
                        Call SetDefaultCursor
                        m_str_Msg = "MMS Stock Code is duplicated. Please provide another one."
                        MsgBox m_str_Msg, vbInformation + vbOKOnly
                        Set RS = Nothing
                        txtMMSStockCode.SetFocus
                        Exit Sub
                    End If
                End If
                RS.MoveNext
            Next l_Count
        End If
    
        l_Result = modDBHelper.AddRBEstimate("CES_UPDATE.ADD_RB_ESTIMATE", _
                                             l_RetVal, _
                                             g_str_UserName, _
                                             str_JobNumber, _
                                             str_CoreCost, _
                                             str_RebuiltStockCode, _
                                             str_CoreStockCode, _
                                             str_Keyword, _
                                             str_DetailedDescription, _
                                             str_MMSStockCode, _
                                             Trim(txtSOPNumber.Text), _
                                             str_BuyCost, _
                                             str_RemanufacturedCost, _
                                             str_ExternalCost, _
                                             radioActive.Value)
    
        'Now we need go through all items in the lstListOfBuses list-box,
        'find only selected items and save data to the RB_LIST_OF_BUSES table.
        ReDim m_str_SelectedBuses(m_const_l_SelectedBusesSize)
        l_Count1 = 0
        
        For l_Count = 0 To lstListOfBuses.ListCount - 1
            If lstListOfBuses.Selected(l_Count) = True Then
                l_Result = modDBHelper.InsertRBListOFBuses( _
                                            "CES_UPDATE.INSERT_RB_LIST_OF_BUSES", _
                                            l_RetVal, _
                                            str_RebuiltStockCode, _
                                            lstListOfBuses.ItemData(l_Count))
                If l_Count1 < m_const_l_SelectedBusesSize + 1 Then
                    m_str_SelectedBuses(l_Count1) = lstListOfBuses.List(l_Count)
                End If
                l_Count1 = l_Count1 + 1
            End If
        Next l_Count
        'Add record to the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, "Rebuilt Part Info was added to the System", _
                            str_RebuiltStockCode, "RB", _
                            "Rebuilt Stock Code ---> " + str_RebuiltStockCode, _
                            "Description ---> " + str_DetailedDescription, _
                            "Keyword ---> " + str_Keyword, _
                            "Job Number ---> " + str_JobNumber, _
                            "MMS Buy Code ---> " + str_MMSStockCode, _
                            "Core Code ---> " + str_CoreStockCode, _
                            "Core Cost ---> " + str_CoreCost, _
                            "SOP Number ---> " + Trim(txtSOPNumber.Text), _
                            "Buy Cost ---> " + str_BuyCost, _
                            "External Cost ---> " + str_ExternalCost, _
                            "Remanufactured Cost ---> " + str_RemanufacturedCost, _
                            "Selected Bus 1 ---> " + m_str_SelectedBuses(0), _
                            "Selected Bus 2 ---> " + m_str_SelectedBuses(1), _
                            "Selected Bus 3 ---> " + m_str_SelectedBuses(2), _
                            "Selected Bus 4 ---> " + m_str_SelectedBuses(3), _
                            "Selected Bus 5 ---> " + m_str_SelectedBuses(4), _
                            "Selected Bus 6 ---> " + m_str_SelectedBuses(5), _
                            "Selected Bus 7 ---> " + m_str_SelectedBuses(6), _
                            "Selected Bus 8 ---> " + m_str_SelectedBuses(7), _
                            "Selected Bus 9 ---> " + m_str_SelectedBuses(8), _
                            "Selected Bus 10 ---> " + m_str_SelectedBuses(9))
        
        If (l_Result = 0) Then
            Call SetDefaultCursor
            m_str_Msg = "Rebuilt Estimate Has been added"
            MsgBox m_str_Msg
            Form_Unload 1
        Else
            Call SetDefaultCursor
            m_str_Msg = "There was an error adding Rebuilt Estimate. Please Contact "
            m_str_Msg = m_str_Msg + "Administrator"
            MsgBox m_str_Msg
        End If
    Else 'If cmdAdd.Caption = "Update" Then
        l_Result = modDBHelper.UpdateRBEstimate("CES_UPDATE.UPDATE_RB_ESTIMATE", _
                                                l_RetVal, _
                                                g_str_UserName, _
                                                str_JobNumber, _
                                                str_CoreCost, _
                                                str_RebuiltStockCode, _
                                                str_CoreStockCode, _
                                                str_Keyword, _
                                                str_DetailedDescription, _
                                                str_MMSStockCode, _
                                                Trim(txtSOPNumber.Text), _
                                                str_BuyCost, _
                                                str_RemanufacturedCost, _
                                                str_ExternalCost, _
                                                radioActive.Value)

        'Delete all records from the RB_LIST_OF_BUSES table where
        'RB_LIST_OF_BUSES.REBUILT_STOCK_NUM = str_RebuiltStockCode
        l_Result = modDBHelper.DeleteRBListOFBuses( _
                                    "CES_DELETE.DELETE_RB_LIST_OF_BUSES", _
                                    l_RetVal, _
                                    str_RebuiltStockCode)

        'Now we need go through all items in the lstListOfBuses list-box,
        'find only selected items and save data to the RB_LIST_OF_BUSES table.
        ReDim m_str_SelectedBuses(m_const_l_SelectedBusesSize)
        l_Count1 = 0
        
        For l_Count = 0 To lstListOfBuses.ListCount - 1
            If lstListOfBuses.Selected(l_Count) = True Then
                l_Result = modDBHelper.InsertRBListOFBuses( _
                                            "CES_UPDATE.INSERT_RB_LIST_OF_BUSES", _
                                            l_RetVal, _
                                            str_RebuiltStockCode, _
                                            lstListOfBuses.ItemData(l_Count))
                If l_Count1 < m_const_l_SelectedBusesSize + 1 Then
                    m_str_SelectedBuses(l_Count1) = lstListOfBuses.List(l_Count)
                End If
                l_Count1 = l_Count1 + 1
            End If
        Next l_Count
    
        If (l_Result = 0) Then
            Call SetDefaultCursor
            m_str_Msg = "Rebuilt Estimate Has been updated."
            MsgBox m_str_Msg
            'Refresh frmRebuiltPartsMain form with updated data.
            frmRebuiltPartsMain.m_str_RBNumber = str_RebuiltStockCode
            frmRebuiltPartsMain.m_str_LinkNumber = str_MMSStockCode
            Call frmRebuiltPartsMain.Populate
            Call frmSearchPart.FillGrids
            Form_Unload 1
        Else
            Call SetDefaultCursor
            m_str_Msg = "Rebuilt Estimate has not been updated."
            MsgBox m_str_Msg
            Form_Unload 1
            Exit Sub
        End If
    
        '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT Begin >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        'Add record to the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, "Rebuilt Part Info was edited in the System", _
                            str_RebuiltStockCode, "RB", _
                            "Rebuilt Stock Code ---> " + str_RebuiltStockCode, _
                            "Description ---> " + str_DetailedDescription, _
                            "Keyword ---> " + str_Keyword, _
                            "Job Number ---> " + str_JobNumber, _
                            "MMS Buy Code ---> " + str_MMSStockCode, _
                            "Core Code ---> " + str_CoreStockCode, _
                            "Core Cost ---> " + str_CoreCost, _
                            "SOP Number ---> " + Trim(txtSOPNumber.Text), _
                            "Buy Cost ---> " + str_BuyCost, _
                            "External Cost ---> " + str_ExternalCost, _
                            "Remanufactured Cost ---> " + str_RemanufacturedCost, _
                            "Selected Bus 1 ---> " + m_str_SelectedBuses(0), _
                            "Selected Bus 2 ---> " + m_str_SelectedBuses(1), _
                            "Selected Bus 3 ---> " + m_str_SelectedBuses(2), _
                            "Selected Bus 4 ---> " + m_str_SelectedBuses(3), _
                            "Selected Bus 5 ---> " + m_str_SelectedBuses(4), _
                            "Selected Bus 6 ---> " + m_str_SelectedBuses(5), _
                            "Selected Bus 7 ---> " + m_str_SelectedBuses(6), _
                            "Selected Bus 8 ---> " + m_str_SelectedBuses(7), _
                            "Selected Bus 9 ---> " + m_str_SelectedBuses(8), _
                            "Selected Bus 10 ---> " + m_str_SelectedBuses(9))
        
        'Now find all estimates where current Rebuilt Part Estimate is present.
        Set RS = New ADODB.Recordset
        
        'In the SC_PARTS_USED table find all Estimates where the current RBE is present.
        Set RS = modDBHelper.RetrieveESTToPropagateRB("CES_INQUIRY.RETRIEVE_EST_TO_PROPAGATE_RB", _
                                                      m_str_AuditReference)
        If RS.RecordCount > 0 Then
            RS.MoveFirst
            For l_Count = 0 To RS.RecordCount - 1
                'Add records to the AUDIT_MODIFY_HISTORY table.
                l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                        "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", l_RetVal, _
                        "Indirect change. Rebuilt Part Info was edited in the Rebuilt Part Estimate " + m_str_AuditReference, _
                        RS.Fields.Item("link_code"), _
                        RS.Fields.Item("link_type"), _
                        "Rebuilt Stock Code ---> " + str_RebuiltStockCode, _
                        "Description ---> " + str_DetailedDescription, _
                        "Keyword ---> " + str_Keyword, _
                        "Job Number ---> " + str_JobNumber, _
                        "MMS Buy Code ---> " + str_MMSStockCode, _
                        "Core Code ---> " + str_CoreStockCode, _
                        "Core Cost ---> " + str_CoreCost, _
                        "SOP Number ---> " + Trim(txtSOPNumber.Text), _
                        "Buy Cost ---> " + str_BuyCost, _
                        "External Cost ---> " + str_ExternalCost, _
                        "Remanufactured Cost ---> " + str_RemanufacturedCost, _
                        "Selected Bus 1 ---> " + m_str_SelectedBuses(0), "Selected Bus 2 ---> " + m_str_SelectedBuses(1), _
                        "Selected Bus 3 ---> " + m_str_SelectedBuses(2), "Selected Bus 4 ---> " + m_str_SelectedBuses(3), _
                        "Selected Bus 5 ---> " + m_str_SelectedBuses(4), "Selected Bus 6 ---> " + m_str_SelectedBuses(5), _
                        "Selected Bus 7 ---> " + m_str_SelectedBuses(6), "Selected Bus 8 ---> " + m_str_SelectedBuses(7), _
                        "Selected Bus 9 ---> " + m_str_SelectedBuses(8), "Selected Bus 10 ---> " + m_str_SelectedBuses(9))
                RS.MoveNext
            Next l_Count
        End If
        '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT End >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    End If
    
    If m_b_imgChanged Then
        Dim FSO As New FileSystemObject
        Dim fil1 As Object 'will recieve a file object

        Set RS = New ADODB.Recordset
        Set RS = modDBHelper.RetrieveCESSettings("CES_INQUIRY.RETRIEVE_CES_SETTI", "RBP_IMAGES_PATH")
        If RS.RecordCount = 1 Then
            m_str_RBPImgPath = RS.Fields.Item("VALUE")
        End If
        
        m_str_RBPImgPath = m_str_RBPImgPath & "TEMP.jpg"
        
        If FSO.FileExists(m_str_RBPImgPath) Then
            Set fil1 = FSO.GetFile(m_str_RBPImgPath)
            'Change file name to required format
            fil1.Name = "IMG_" & str_RebuiltStockCode & ".jpg"
        End If

        Set RS = Nothing
        Set FSO = Nothing
        m_b_imgChanged = False
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdAdd_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub cmdClearSelection_Click()
    Dim l_Count As Long
    
    On Error GoTo Error_Handler

    'If some items are selected, make them unselected.
    For l_Count = 0 To lstListOfBuses.ListCount - 1
        If lstListOfBuses.Selected(l_Count) = True Then
            lstListOfBuses.Selected(l_Count) = False
        End If
    Next l_Count
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdClearSelection_Click", g_l_ErrorLineNumber
End Sub

Private Sub cmdImage_Click()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    frmRebuiltPartImage.m_str_RBNumber = m_str_imgRBPNumber
    frmRebuiltPartImage.Show vbModal
    
    Exit Sub
    
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdImage_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub cmdReload_Click()
    Dim l_Count As Long
    
    On Error GoTo Error_Handler
    Call SetWaitCursor

    'First remove all selection from the lstListOfBuses list-box
    For l_Count = 0 To lstListOfBuses.ListCount - 1
        lstListOfBuses.Selected(l_Count) = False
    Next l_Count

    'Restore initial selections in the lstListOfBuses list-box.
    For l_Count = 0 To m_l_ArraySize
        lstListOfBuses.Selected(m_l_Selected(l_Count)) = True
    Next l_Count
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdReload_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    Call PopulateListOfBuses
    
    m_b_imgChanged = False
    m_str_imgRBPNumber = m_str_RebuiltCode
    
    If (m_str_RebuiltCode <> "" And Not IsNull(m_str_RebuiltCode)) Then
        cmdAdd.Caption = "Update"
        Me.Caption = "Update Rebuilt Part Estimate"

        txtRebuiltStockCode.BackColor = &H80000018
        'txtMMSStockCode.BackColor = &H80000018
        txtRebuiltStockCode.Enabled = False
        'txtMMSStockCode.Enabled = False
        Call PopulateInputBoxes
        Call HighlightItemsInTheListBox
    Else
        cmdReload.Enabled = False
    End If
    Call PopulateDropdowns
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub HighlightItemsInTheListBox()
    Dim RS As ADODB.Recordset
    Dim l_Count As Long
    Dim l_Count1 As Long
    Dim l_ListID As Long
    
    On Error GoTo Error_Handler

    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.RetrieveRBListOfBuses("CES_INQUIRY.RB_LIST_BUSES", _
                                               Trim(txtRebuiltStockCode.Text))

    m_l_ArraySize = -1
    'Go through whole recordset and highlight all corresponded items in the
    'lstListOfBuses list-box.
    If RS.RecordCount > 0 Then
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
            l_ListID = CLng(RS.Fields.Item("LIST_ID"))
            For l_Count1 = 0 To lstListOfBuses.ListCount - 1
                If lstListOfBuses.ItemData(l_Count1) = l_ListID Then
                    lstListOfBuses.Selected(l_Count1) = True
                    'Save current l_ListID into array m_l_Selected. We can use this array
                    'later in case we want restore initial selections in the
                    'lstListOfBuses list-box (see cmdReload_Click(...))
                    m_l_ArraySize = m_l_ArraySize + 1
                    ReDim Preserve m_l_Selected(m_l_ArraySize)
                    m_l_Selected(m_l_ArraySize) = l_Count1
                    Exit For
                End If
            Next l_Count1
            
            RS.MoveNext
        Next l_Count
    End If
    
    Set RS = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "HighlightItemsInTheListBox", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub PopulateListOfBuses()
    Dim RS As ADODB.Recordset
    Dim l_Count As Long
    
    On Error GoTo Error_Handler

    lstListOfBuses.Clear
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.RetrieveListOfBuses("CES_INQUIRY.RETRIEVE_LIST_OF_BUSES")
    
    'Here we will not use:
    'Set lstListOfBuses.DataSource = RS
    'but we will use loop because we need to add ItemData = RS.Fields.Item("LIST_ID")
    'to each added item.
    
    If RS.RecordCount > 0 Then
        RS.MoveFirst
        For l_Count = 0 To RS.RecordCount - 1
            lstListOfBuses.AddItem RS.Fields.Item("DESCRIPTION")
            lstListOfBuses.ItemData(lstListOfBuses.NewIndex) = CLng(RS.Fields.Item("LIST_ID"))
            RS.MoveNext
        Next l_Count
    Else
        'Make buttons cmdReload and cmdClearSelection disabled.
        cmdReload.Enabled = False
        cmdClearSelection.Enabled = False
    End If
    
    Set RS = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateListOfBuses", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub PopulateInputBoxes()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler

    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.RetrieveRBEstimates("CES_INQUIRY.RETRIEVE_RB_ESTIMATES")
    RS.Filter = "MMS_STOCK_CODE = '" + m_str_MMSStockCode + "' AND REBUILT_STOCK_NUM = '" + m_str_RebuiltCode + "'"
    m_var_RowID = RS.Fields("ROWID")
    cboJobNumber.Text = RS.Fields.Item("JOB_NUMBER")
    cboKeyword.Text = RS.Fields.Item("KEYWORD")
    txtDetailedDescription.Text = RS.Fields.Item("DETAILED_DESC")
    txtCoreChargeCode.Text = Format(RS.Fields.Item("CORE_CHARGE"), "0.00")
    txtRebuiltStockCode.Text = RS.Fields.Item("REBUILT_STOCK_NUM")
    txtCoreStockCode.Text = RS.Fields.Item("CORE_PART_NUM")
    txtMMSStockCode.Text = RS.Fields.Item("MMS_STOCK_CODE")
    txtSOPNumber.Text = RS.Fields.Item("SOP_NUMBER")
    If RS.Fields.Item("BUY_NEW_COST") <> "" Then
        txtBuyCost.Text = Format(RS.Fields.Item("BUY_NEW_COST"), "0.00")
    End If
    If RS.Fields.Item("REMAN_COST") <> "" Then
        txtRemanufacturedCost.Text = Format(RS.Fields.Item("REMAN_COST"), "0.00")
    End If
   ' If RS.Fields.Item("EXTERNAL_COST") <> "" Then
    '    txtExternalCost.Text = Format(RS.Fields.Item("EXTERNAL_COST"), "0.00")
    'End If
    
    If IsNull(RS.Fields.Item("ACTIVE")) Then
        radioNonActive.Value = False
        radioActive.Value = True
    Else
        radioActive.Value = False
        radioNonActive.Value = True
    End If
    
    Set RS = Nothing

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateInputBoxes", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub PopulateDropdowns()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
        
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.RetrieveRBEstimates("CES_INQUIRY.RETRIEVE_RB_ESTIMATES")
    
    'Load the data into the input forms for editing
    Set cboKeyword.RowSource = RS
    Set cboJobNumber.RowSource = RS
    
    Set RS = Nothing
    
    cboKeyword.ListField = "KEYWORD"
    cboJobNumber.ListField = "JOB_NUMBER"
        
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateDropdowns", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_Unload(Cancel As Integer)
    On Error GoTo Error_Handler
    
    m_str_MMSStockCode = ""
    m_str_RebuiltCode = ""
    m_var_RowID = ""
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Unload", g_l_ErrorLineNumber
End Sub

Private Sub txtBuyCost_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtBuyCost edit-box to upper case.
    l_CursorPosition = txtBuyCost.SelStart
    str_Data = txtBuyCost.Text
    str_Data = UCase(str_Data)
    txtBuyCost.Text = str_Data
    txtBuyCost.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtBuyCost_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtCoreChargeCode_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtCoreChargeCode edit-box to upper case.
    l_CursorPosition = txtCoreChargeCode.SelStart
    str_Data = txtCoreChargeCode.Text
    str_Data = UCase(str_Data)
    txtCoreChargeCode.Text = str_Data
    txtCoreChargeCode.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtCoreChargeCode_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtCoreStockCode_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtCoreStockCode edit-box to upper case.
    l_CursorPosition = txtCoreStockCode.SelStart
    str_Data = txtCoreStockCode.Text
    str_Data = UCase(str_Data)
    txtCoreStockCode.Text = str_Data
    txtCoreStockCode.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtCoreStockCode_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtDetailedDescription_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtDetailedDescription edit-box to upper case.
    l_CursorPosition = txtDetailedDescription.SelStart
    str_Data = txtDetailedDescription.Text
    str_Data = UCase(str_Data)
    txtDetailedDescription.Text = str_Data
    txtDetailedDescription.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtDetailedDescription_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtExternalCost_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtExternalCost edit-box to upper case.
    'l_CursorPosition = txtExternalCost.SelStart
    'str_Data = txtExternalCost.Text
    'str_Data = UCase(str_Data)
    'txtExternalCost.Text = str_Data
    'txtExternalCost.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtExternalCost_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtMMSStockCode_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtMMSStockCode edit-box to upper case.
    l_CursorPosition = txtMMSStockCode.SelStart
    str_Data = txtMMSStockCode.Text
    str_Data = UCase(str_Data)
    txtMMSStockCode.Text = str_Data
    txtMMSStockCode.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtMMSStockCode_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtRebuiltStockCode_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtRebuiltStockCode edit-box to upper case.
    l_CursorPosition = txtRebuiltStockCode.SelStart
    str_Data = txtRebuiltStockCode.Text
    str_Data = UCase(str_Data)
    txtRebuiltStockCode.Text = str_Data
    txtRebuiltStockCode.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtRebuiltStockCode_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtRemanufacturedCost_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtRemanufacturedCost edit-box to upper case.
    l_CursorPosition = txtRemanufacturedCost.SelStart
    str_Data = txtRemanufacturedCost.Text
    str_Data = UCase(str_Data)
    txtRemanufacturedCost.Text = str_Data
    txtRemanufacturedCost.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtRemanufacturedCost_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtSOPNumber_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtSOPNumber edit-box to upper case.
    l_CursorPosition = txtSOPNumber.SelStart
    str_Data = txtSOPNumber.Text
    str_Data = UCase(str_Data)
    txtSOPNumber.Text = str_Data
    txtSOPNumber.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtSOPNumber_KeyUp", g_l_ErrorLineNumber
End Sub
Option Explicit

Private m_str_Msg As String

Private Sub cmdAdd_Click()
    Dim RS As ADODB.Recordset
    Dim dbl_SalaryRate As Double
    Dim str_SalaryRate As String
    Dim l_WageGroup As Long
    Dim str_WageGroup As String
    Dim l_Result As Long
    Dim l_RetVal As Long
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    str_SalaryRate = Trim(txtNewSalaryRate.Text)
    If str_SalaryRate = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Salary rate should be a numeric value."
        MsgBox m_str_Msg, vbOKOnly + vbInformation
        txtNewSalaryRate.SetFocus
        Exit Sub
    End If
    
    If IsNumeric(str_SalaryRate) = False Then
        Call SetDefaultCursor
        m_str_Msg = "Salary rate should be a numeric value."
        MsgBox m_str_Msg, vbOKOnly + vbInformation
        txtNewSalaryRate.SetFocus
        Exit Sub
    Else
        dbl_SalaryRate = CDbl(str_SalaryRate)
    End If
    
    If dbl_SalaryRate < 0 Then
        Call SetDefaultCursor
        m_str_Msg = "Salary rate should be greater or equal to zero."
        MsgBox m_str_Msg, vbOKOnly + vbInformation
        txtNewSalaryRate.SetFocus
        Exit Sub
    End If
    
    str_WageGroup = Trim(txtWageGroup.Text)
    If str_WageGroup = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Wage group should be a numeric value."
        MsgBox m_str_Msg, vbOKOnly + vbInformation
        txtWageGroup.SetFocus
        Exit Sub
    End If
    
    If IsNumeric(str_WageGroup) = False Then
        Call SetDefaultCursor
        m_str_Msg = "Wage group should be a numeric value."
        MsgBox m_str_Msg, vbOKOnly + vbInformation
        txtWageGroup.SetFocus
        Exit Sub
    Else
        l_WageGroup = CLng(str_WageGroup)
    End If
    
    If l_WageGroup < 1 Then
        Call SetDefaultCursor
        m_str_Msg = "Wage Group should be a positive integer more than zero."
        MsgBox m_str_Msg, vbOKOnly + vbInformation
        txtWageGroup.SetFocus
        Exit Sub
    End If
    
    'Check whether or not given wage group exists in the EMPLOYEE_SALARIES table.
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.SearchWageGroup("CES_INQUIRY.SEARCH_WAGE_GROUP", _
                                         l_WageGroup)
                                       
    If RS.RecordCount > 0 Then
        Call SetDefaultCursor
        m_str_Msg = "This wage group already exist. Please provide another one."
        MsgBox m_str_Msg, vbOKOnly + vbInformation
        txtWageGroup.SetFocus
        Set RS = Nothing
        Exit Sub
    End If
    
    'Check whether or not given salary rate exists in the EMPLOYEE_SALARIES table.
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.SearchEmployeeSalaries("CES_INQUIRY.SEARCH_EMPLOYEE_SALARIES", _
                                                dbl_SalaryRate)
                                       
    If RS.RecordCount > 0 Then
        Call SetDefaultCursor
        m_str_Msg = "This salary rate already exist. Please provide another one."
        MsgBox m_str_Msg, vbOKOnly + vbInformation
        txtNewSalaryRate.SetFocus
        Set RS = Nothing
        Exit Sub
    End If
                                       
    Set RS = Nothing
    
    'Insert a new record into the EMPLOYEE_SALARIES table.
    l_Result = modDBHelper.AddEmployeeSalaries("CES_UPDATE.ADD_EMPLOYEE_SALARIES", _
                                               l_RetVal, _
                                               l_WageGroup, _
                                               dbl_SalaryRate)
    If l_Result = 0 Then
        Call SetDefaultCursor
        m_str_Msg = "Salary rate is added."
        MsgBox m_str_Msg, vbOKOnly + vbInformation
        'Refresh grdSalaryRates grid in the frmSalaryRates screen.
        Call frmSalaryRates.PopulateGrid
        
        'Add record to the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "Salary Rate was added to the System", _
                            l_WageGroup, _
                            "SR", _
                            "Wage Group ---> " + Trim(txtWageGroup.Text), _
                            "New Salary Rate ---> " + Trim(txtNewSalaryRate.Text))
        
        Unload Me
    Else
        Call SetDefaultCursor
        'For some reason record was not inserted into the EMPLOYEE_SALARIES table.
        m_str_Msg = "Salary rate is not added. Please contact administrator."
        MsgBox m_str_Msg, vbOKOnly + vbInformation
        Exit Sub
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdAdd_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub cmdCancel_Click()
    On Error GoTo Error_Handler
    
    Unload Me
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdCancel_Click", g_l_ErrorLineNumber
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub txtWageGroup_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtWageGroup edit-box to upper case.
    l_CursorPosition = txtWageGroup.SelStart
    str_Data = txtWageGroup.Text
    str_Data = UCase(str_Data)
    txtWageGroup.Text = str_Data
    txtWageGroup.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtWageGroup_KeyUp", g_l_ErrorLineNumber
End Sub
Option Explicit

Private m_str_Msg As String
Private Const m_str_const_MsgBoxCaption As String = "Add / Update Stock Coded Parts"

Private m_str_OEMCost As String
Public m_str_MBNumber As String
Public m_str_TypeCode As String
Public m_var_RowID As Variant

Public m_str_AuditReference As String

Private Sub cmdAdd_Click()
    Dim l_RetVal As Long
    Dim l_Result As Long
    Dim str_PercentUsage As String
    Dim str_CostCentre As String
    Dim RS As ADODB.Recordset
    Dim l_Count As Long
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    If Trim(cboMMSStockCode.Text) = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please provide MMS Stock Code."
        MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
        cboMMSStockCode.SetFocus
        Exit Sub
    End If
    
    'Make sure that user choused something from the cboCostCentre combo-box.
    str_CostCentre = Trim(cboCostCentre.Text)
    If str_CostCentre = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please provide Cost Centre."
        MsgBox m_str_Msg, vbExclamation + vbOKOnly, m_str_const_MsgBoxCaption
        cboCostCentre.SetFocus
        Exit Sub
    End If
        
    'Then validate Quantity
    If Not IsNumeric(txtQuantity.Text) Then
        Call SetDefaultCursor
        m_str_Msg = "Quantity not entered correctly."
        MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
        txtQuantity.SetFocus
        Exit Sub
    Else
        If Not IsValidLong(txtQuantity.Text) Then
            Call SetDefaultCursor
            m_str_Msg = "Quantity not entered correctly."
            MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
            txtQuantity.SetFocus
            Exit Sub
        End If
    End If
    
    If CLng(txtQuantity.Text) < 0 Then
        Call SetDefaultCursor
        m_str_Msg = "Quantity not entered correctly."
        MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
        txtQuantity.SetFocus
        Exit Sub
    End If
    
    'Validate the information before attempting to add it
    'Start with the percent usage
    str_PercentUsage = Trim(txtPercentUsage.Text)
    If str_PercentUsage = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Plese provide Percent Usage."
        MsgBox m_str_Msg, vbExclamation + vbOKOnly, m_str_const_MsgBoxCaption
        txtPercentUsage.SetFocus
        Exit Sub
    End If
    
    If CheckPercent(str_PercentUsage) = False Then
        Call SetDefaultCursor
        m_str_Msg = "Percent Usage is not entered correctly. Percent Usage can be a "
        m_str_Msg = m_str_Msg + "positive number between 0 and 100 inclusive with "
        m_str_Msg = m_str_Msg + "possible fraction."
        MsgBox m_str_Msg, vbExclamation Or vbOKOnly, m_str_const_MsgBoxCaption
        txtPercentUsage.SetFocus
        Exit Sub
    End If

    str_PercentUsage = Replace(str_PercentUsage, ".", ",")
    
    If Trim(txtCoreCost.Text) = "" Then
        txtCoreCost.Text = "0"
    Else
        If Not IsNumeric(Trim(txtCoreCost.Text)) Then
            Call SetDefaultCursor
            m_str_Msg = "Core cost not entered correctly."
            MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
            txtCoreCost.SetFocus
            Exit Sub
        End If
    End If
    
    If Trim(txtPartUnitCost.Text) = "" Then
        txtPartUnitCost.Text = "0"
    End If
    
    If m_str_OEMCost = "" Then
       m_str_OEMCost = "0"
    End If
    
    If cmdAdd.Caption = "Add" Then
        'Before adding check that "MMS Stock Code" is not duplicated in the estimate.
        Set RS = New ADODB.Recordset
        Set RS = modDBHelper.RetrieveSCPUsed("CES_INQUIRY.RETRIEVE_SCP_USED", _
                                             m_str_MBNumber, _
                                             "N", _
                                             m_str_TypeCode)
        If RS.RecordCount > 0 Then
            RS.MoveFirst
            For l_Count = 0 To RS.RecordCount - 1
                If RS.Fields.Item("STOCK CODE") = Trim(cboMMSStockCode.Text) Then
                    Call SetDefaultCursor
                    Set RS = Nothing
                    m_str_Msg = "Record with the same MMS Stock Code is already exist "
                    m_str_Msg = m_str_Msg + "in the current Estimate. Please choose "
                    m_str_Msg = m_str_Msg + "another one."
                    MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
                    cboMMSStockCode.SetFocus
                    Exit Sub
                End If
                RS.MoveNext
            Next l_Count
        End If
        Set RS = Nothing
        
        'Add a new stock coded part
        l_Result = modDBHelper.AddSCPUsed("CES_UPDATE.ADD_SCP_USED", _
                                          l_RetVal, _
                                          Trim(cboMMSStockCode.Text), _
                                          str_CostCentre, _
                                          Trim(txtQuantity.Text), _
                                          str_PercentUsage, _
                                          modMain.g_str_UserName, _
                                          CCur(txtPartUnitCost.Text), _
                                          CCur(m_str_OEMCost), _
                                          m_str_MBNumber, _
                                          "N", _
                                          m_str_TypeCode, _
                                          CCur(txtCoreCost.Text), _
                                          " ", _
                                          0)

        If (l_Result = 0) Then
            Call SetDefaultCursor
            m_str_Msg = "Stock Coded Part has been added."
            MsgBox m_str_Msg, vbInformation Or vbOKOnly, m_str_const_MsgBoxCaption
        Else
            Call SetDefaultCursor
            m_str_Msg = "There was an error adding Stock Coded Part. Please Contact "
            m_str_Msg = m_str_Msg + "Administrator."
            MsgBox m_str_Msg, vbCritical Or vbOKOnly, m_str_const_MsgBoxCaption
            Exit Sub
        End If
        cmdAdd.Enabled = False
        
        '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT Begin >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        'Insert record into the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                l_RetVal, _
                "Add Stock Coded Part", _
                m_str_AuditReference, _
                m_str_TypeCode, _
                "MMS Stock Code ---> " + Trim(cboMMSStockCode.Text), _
                "Part Type ---> " + Trim(cboPartType.Text), _
                "Part Description ---> " + Trim(cboPartDescription.Text), _
                "Cost Centre ---> " + Trim(cboCostCentre.Text), _
                "Quantity ---> " + Trim(txtQuantity.Text), _
                "Percent Usage ---> " + Trim(txtPercentUsage.Text), _
                "Last Revised ---> " + Trim(txtLastRevised.Text), _
                "Part Cost ($/unit) ---> " + Trim(txtPartUnitCost.Text), _
                "Core Cost ($/unit) ---> " + Trim(txtCoreCost.Text))
    
        ' Now depending on which type of estimate this stock coded part is
        ' being added to, we must cycle through estimates accordingly
        Select Case m_str_TypeCode
            
            Case "KIT"
                'Add the current Part to the table SUB_KITS, after the last item in the
                'sub kit "KIT A"
                Call modMain.AddLastPartToSubkitA(m_str_AuditReference, _
                                                  "SC", _
                                                  " ", _
                                                  " ", _
                                                  Trim(cboMMSStockCode.Text), _
                                                  Trim(txtQuantity.Text), _
                                                  Trim(cboPartDescription.Text))
              
                'Find all Vehicle Estimates where the current OEM Kit is presented.
                Set RS = modDBHelper.RetrieveBusFromKitsUsed("CES_INQUIRY.RETRIEVE_BUS_FROM_KITS_USED", _
                                                             m_str_AuditReference)
                'Insert records for all Vehicle Estimates (where the current OEM Kit is
                'presented) into the AUDIT_MODIFY_HISTORY table.
                If RS.RecordCount > 0 Then
                    RS.MoveFirst
                    For l_Count = 0 To RS.RecordCount - 1
                        If IsNull(RS.Fields.Item("link_code")) = False Then
                            l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                                "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                                l_RetVal, _
                                "Indirect change. Stock Coded Part was added to the OEM Kit " + m_str_AuditReference, _
                                RS.Fields.Item("link_code"), _
                                "BUS", _
                                "MMS Stock Code ---> " + Trim(cboMMSStockCode.Text), _
                                "Part Type ---> " + Trim(cboPartType.Text), _
                                "Part Description ---> " + Trim(cboPartDescription.Text), _
                                "Cost Centre ---> " + Trim(cboCostCentre.Text), _
                                "Quantity ---> " + Trim(txtQuantity.Text), _
                                "Percent Usage ---> " + Trim(txtPercentUsage.Text), _
                                "Last Revised ---> " + Trim(txtLastRevised.Text), _
                                "Part Cost ($/unit) ---> " + Trim(txtPartUnitCost.Text), _
                                "Core Cost ($/unit) ---> " + Trim(txtCoreCost.Text))
                        End If
                        RS.MoveNext
                    Next l_Count
                End If
        
            Case "RB"
                ' If the estimate is a Rebuilt Part Estimate then cycle
                ' though all RB, MB and Veh Estimates containing this RBP
            
                Set RS = New ADODB.Recordset
                
                'In the SC_PARTS_USED table find all Estimates where the current RBE is present.
                Set RS = modDBHelper.RetrieveESTToPropagateRB("CES_INQUIRY.RETRIEVE_EST_TO_PROPAGATE_RB", _
                                                              m_str_AuditReference)
                If RS.RecordCount > 0 Then
                    RS.MoveFirst
                        For l_Count = 0 To RS.RecordCount - 1
                            'Add records to the AUDIT_MODIFY_HISTORY table.
                            l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                                "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                                l_RetVal, _
                                "Indirect change. Stock Coded Part was added to the Rebuilt Part Estimate " + m_str_AuditReference, _
                                RS.Fields.Item("link_code"), _
                                RS.Fields.Item("link_type"), _
                                "MMS Stock Code ---> " + Trim(cboMMSStockCode.Text), _
                                "Part Type ---> " + Trim(cboPartType.Text), _
                                "Part Description ---> " + Trim(cboPartDescription.Text), _
                                "Cost Centre ---> " + Trim(cboCostCentre.Text), _
                                "Quantity ---> " + Trim(txtQuantity.Text), _
                                "Percent Usage ---> " + Trim(txtPercentUsage.Text), _
                                "Last Revised ---> " + Trim(txtLastRevised.Text), _
                                "Part Cost ($/unit) ---> " + Trim(txtPartUnitCost.Text), _
                                "Core Cost ($/unit) ---> " + Trim(txtCoreCost.Text))
                            RS.MoveNext
                        Next l_Count
                End If
                Set RS = Nothing
        
        End Select
        '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT End >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    
    Else 'If cmdAdd.Caption = "Update" Then
        'Update an existing stock coded part
        l_Result = modDBHelper.UpdateSCPUsed("CES_UPDATE.UPDATE_SCP_USED", _
                                             l_RetVal, _
                                             Trim(cboMMSStockCode.Text), _
                                             str_CostCentre, _
                                             Trim(txtQuantity.Text), _
                                             str_PercentUsage, _
                                             g_str_UserName, _
                                             m_str_MBNumber, _
                                             CCur(txtPartUnitCost.Text), _
                                             CCur(m_str_OEMCost), _
                                             m_var_RowID, _
                                             CCur(txtCoreCost.Text))
    
        If (l_Result = 0) Then
            Call SetDefaultCursor
            m_str_Msg = "Stock Coded Part has been updated."
            MsgBox m_str_Msg, vbOKOnly Or vbInformation, m_str_const_MsgBoxCaption
        Else
            Call SetDefaultCursor
            m_str_Msg = "There was an error updating Stock Coded Part. Please Contact "
            m_str_Msg = m_str_Msg + "Administrator."
            MsgBox m_str_Msg, vbOKOnly Or vbCritical, m_str_const_MsgBoxCaption
            Exit Sub
        End If
        
        '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT Begin >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        
        'Insert record into the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                l_RetVal, _
                "Update Stock Coded Part", _
                m_str_AuditReference, _
                m_str_TypeCode, _
                "MMS Stock Code ---> " + Trim(cboMMSStockCode.Text), _
                "Part Type ---> " + Trim(cboPartType.Text), _
                "Part Description ---> " + Trim(cboPartDescription.Text), _
                "Cost Centre ---> " + Trim(cboCostCentre.Text), _
                "Quantity ---> " + Trim(txtQuantity.Text), _
                "Percent Usage ---> " + Trim(txtPercentUsage.Text), _
                "Last Revised ---> " + Trim(txtLastRevised.Text), _
                "Part Cost ($/unit) ---> " + Trim(txtPartUnitCost.Text), _
                "Core Cost ($/unit) ---> " + Trim(txtCoreCost.Text))
        
        ' Now depending on which type of estimate this stock coded part is
        ' being updated in, we must cycle through estimates accordingly
        Select Case m_str_TypeCode
            
            Case "KIT"
                'In the SUB_KITS table update corresponded record.
                l_Result = modDBHelper.UpdateSubKits("CES_UPDATE.UPDATE_SUB_KITS", _
                                                     l_RetVal, _
                                                     m_str_AuditReference, _
                                                     " ", _
                                                     " ", _
                                                     Trim(cboMMSStockCode.Text), _
                                                     Trim(txtQuantity.Text), _
                                                     Trim(cboPartDescription.Text))
                'Find all Vehicle Estimates where the current OEM Kit is presented.
                Set RS = modDBHelper.RetrieveBusFromKitsUsed("CES_INQUIRY.RETRIEVE_BUS_FROM_KITS_USED", _
                                                             m_str_AuditReference)
                'Insert records for all Vehicle Estimates (where the current OEM Kit is
                'presented) into the AUDIT_MODIFY_HISTORY table.
                If RS.RecordCount > 0 Then
                    RS.MoveFirst
                    For l_Count = 0 To RS.RecordCount - 1
                        If IsNull(RS.Fields.Item("link_code")) = False Then
                            l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                                "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                                l_RetVal, _
                                "Indirect change. Stock Coded Part was updated from the OEM Kit " + m_str_AuditReference, _
                                RS.Fields.Item("link_code"), _
                                "BUS", _
                                "MMS Stock Code ---> " + Trim(cboMMSStockCode.Text), _
                                "Part Type ---> " + Trim(cboPartType.Text), _
                                "Part Description ---> " + Trim(cboPartDescription.Text), _
                                "Cost Centre ---> " + Trim(cboCostCentre.Text), _
                                "Quantity ---> " + Trim(txtQuantity.Text), _
                                "Percent Usage ---> " + Trim(txtPercentUsage.Text), _
                                "Last Revised ---> " + Trim(txtLastRevised.Text), _
                                "Part Cost ($/unit) ---> " + Trim(txtPartUnitCost.Text), _
                                "Core Cost ($/unit) ---> " + Trim(txtCoreCost.Text))
                        End If
                        RS.MoveNext
                    Next l_Count
                End If
           
            Case "RB"
                ' If the estimate is a Rebuilt Part Estimate then cycle
                ' though all RB, MB and Veh Estimates containing this RBP
                Set RS = New ADODB.Recordset
                
                'In the SC_PARTS_USED table find all Estimates where the current RBE is present.
                Set RS = modDBHelper.RetrieveESTToPropagateRB("CES_INQUIRY.RETRIEVE_EST_TO_PROPAGATE_RB", _
                                                              m_str_AuditReference)
                If RS.RecordCount > 0 Then
                    RS.MoveFirst
                        For l_Count = 0 To RS.RecordCount - 1
                            'Add records to the AUDIT_MODIFY_HISTORY table.
                            l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                                "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                                l_RetVal, _
                                "Indirect change. Stock Coded Part was updated from the Rebuilt Part Estimate " + m_str_AuditReference, _
                                RS.Fields.Item("link_code"), _
                                RS.Fields.Item("link_type"), _
                                "MMS Stock Code ---> " + Trim(cboMMSStockCode.Text), _
                                "Part Type ---> " + Trim(cboPartType.Text), _
                                "Part Description ---> " + Trim(cboPartDescription.Text), _
                                "Cost Centre ---> " + Trim(cboCostCentre.Text), _
                                "Quantity ---> " + Trim(txtQuantity.Text), _
                                "Percent Usage ---> " + Trim(txtPercentUsage.Text), _
                                "Last Revised ---> " + Trim(txtLastRevised.Text), _
                                "Part Cost ($/unit) ---> " + Trim(txtPartUnitCost.Text), _
                                "Core Cost ($/unit) ---> " + Trim(txtCoreCost.Text))
                            RS.MoveNext
                        Next l_Count
                End If
                Set RS = Nothing
        
        End Select
         '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT End >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        Unload Me
    End If 'If cmdAdd.Caption = "Add" Then

    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdAdd_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

'Pass values to populate the form for editing
Public Sub PassValues(ByVal str_StockCode As String, _
                      ByVal str_CostCentre As String, _
                      ByVal str_PercentUsage As String, _
                      ByVal str_Quantity As String, _
                      ByVal var_RowIDPass As Variant, _
                      ByVal cur_CoreCost As Currency)
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
       
    m_var_RowID = var_RowIDPass
    Set RS = modDBHelper.RetrieveSCPUsedROWID("CES_INQUIRY.retrieve_one_scp_used", _
                                             m_var_RowID)
    cboMMSStockCode.Text = str_StockCode
    Call Resolve
    cboCostCentre.Text = str_CostCentre
    txtQuantity.Text = str_Quantity
    txtPercentUsage.Text = Replace(str_PercentUsage, ",", ".")
    
    cmdAdd.Caption = "Update"
    cmdClose.Visible = False
    cboMMSStockCode.Enabled = False
    cmdResolve.Enabled = False
    txtCoreCost.Text = Format(RS("CORECOST").Value, "0.00")
    
    Set RS = Nothing
       
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PassValues", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub cmdClose_Click()
    On Error GoTo Error_Handler
    
    Unload Me
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdClose_Click", g_l_ErrorLineNumber
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler
     
    Call SetWaitCursor
    
    Call PopulateFields
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub PopulateFields()
    Dim RS As ADODB.Recordset
    
    'Populate each of the combo boxes
    
    On Error GoTo Error_Handler

    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.PopulateSCComboBoxes("CES_INQUIRY.POPULATE_SC_COMBOXES", _
                                              "1")
    Set cboMMSStockCode.RowSource = RS
    cboMMSStockCode.ListField = "mms_stock_code"
        
    Set RS = modDBHelper.PopulateSCComboBoxes("CES_INQUIRY.POPULATE_SC_COMBOXES", _
                                              "2")
    Set cboPartType.RowSource = RS
    cboPartType.ListField = "part_type"
        
    Set RS = modDBHelper.PopulateSCComboBoxes("CES_INQUIRY.POPULATE_SC_COMBOXES", _
                                              "3")
    Set cboPartDescription.RowSource = RS
    cboPartDescription.ListField = "detailed_desc"
        
    Set RS = modDBHelper.RetrieveCostCentres("CES_INQUIRY.RETRIEVE_COST_CENTRES")
    Set cboCostCentre.RowSource = RS
    cboCostCentre.ListField = "cost_centre"
    
    Set RS = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateFields", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub Resolve()
    Dim RS As ADODB.Recordset

    'Fills in the rest of the fields from the MMS Stock Code
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    Set RS = New ADODB.Recordset
    'Query the database to receive the information about the part
   
    Set RS = modDBHelper.SearchSCPart("CES_INQUIRY.SEARCH_SC_PART", _
                                          cboMMSStockCode.Text, "0", _
                                          "", "", 2)
    
    
    If RS.RecordCount > 0 Then
        'Load the values into the text boxex
        RS.MoveFirst
        cboMMSStockCode.Text = RS.Fields.Item("STOCK CODE")
        cboPartType.Text = RS.Fields.Item("KEYWORD")
        cboPartDescription.Text = RS.Fields.Item("DESCRIPTION")
        txtPartUnitCost.Text = Format(RS.Fields.Item("PRICE"), "0.00")
        m_str_OEMCost = RS.Fields.Item("OEM_PART_COST")
        txtLastRevised.Text = IIf(IsNull(RS.Fields.Item("LAST MODIFIED DATE")), "", _
                                         RS.Fields.Item("LAST MODIFIED DATE"))
        cmdAdd.Enabled = True
        cmdResolve.Default = False
        cmdAdd.Default = True
    Else
        'Cannot find the part
        Call SetDefaultCursor
        cmdAdd.Enabled = False
        cmdAdd.Default = False
        cmdResolve.Default = True
        m_str_Msg = "No information for the Stock Code"
        MsgBox m_str_Msg, vbExclamation Or vbOKOnly, m_str_const_MsgBoxCaption
    End If
    
    Set RS = Nothing
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdResolve_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub cmdResolve_Click()
    On Error GoTo Error_Handler
    
    Call Resolve
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdResolve_Click", g_l_ErrorLineNumber
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub txtPercentUsage_GotFocus()
    On Error GoTo Error_Handler

    txtPercentUsage.SelStart = 0
    txtPercentUsage.SelLength = Len(txtPercentUsage.Text)
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtPercentUsage_GotFocus", g_l_ErrorLineNumber
End Sub

Private Sub txtQuantity_GotFocus()
    On Error GoTo Error_Handler

    txtQuantity.SelStart = 0
    txtQuantity.SelLength = Len(txtQuantity.Text)
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtQuantity_GotFocus", g_l_ErrorLineNumber
End Sub
Option Explicit

Private m_str_Msg As String

Private Sub cmdAdd_Click()
    Dim RS As ADODB.Recordset
    Dim str_TaskDescription As String
    Dim l_Result As Long
    Dim l_RetVal As Long
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    str_TaskDescription = Trim(txtTaskDescription.Text)
    If str_TaskDescription = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Task description should not be empty."
        MsgBox m_str_Msg, vbOKOnly + vbInformation
        txtTaskDescription.SetFocus
        Exit Sub
    Else
        str_TaskDescription = UCase(str_TaskDescription)
    End If
    
    'Check for task description duplication in the LABOUR_TASK_DESCRIPTIONS table.
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.FindTaskDescription("CES_INQUIRY.FIND_TASK_DESCRIPTION", _
                                             str_TaskDescription)
    If RS.RecordCount > 0 Then
        Call SetDefaultCursor
        Set RS = Nothing
        m_str_Msg = "The same task description already exists. Please provide another one."
        MsgBox m_str_Msg, vbOKOnly + vbInformation
        txtTaskDescription.SetFocus
        Exit Sub
    End If
    
    Set RS = Nothing
    
    'Insert a new record into the LABOUR_TASK_DESCRIPTIONS table.
    l_Result = modDBHelper.AddLabourTaskDescription( _
                                        "CES_UPDATE.ADD_LABOUR_TASK_DESCRIPTION", _
                                        l_RetVal, _
                                        str_TaskDescription)
    If l_Result > 0 Then
        Call SetDefaultCursor
        m_str_Msg = "Task description is added."
        MsgBox m_str_Msg, vbOKOnly + vbInformation
        'Refresh grdLabourTaskDescriptions grid in the frmLabourTaskDescription form.
        Call frmLabourTaskDescription.PopulateGrid
        
        'Add record to the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                                    "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                                    l_RetVal, _
                                    "Labour Task Description was added to the System", _
                                    l_Result, _
                                    "LTD", _
                                    "Task Description ---> " + str_TaskDescription, _
                                    "")
        Unload Me
    Else
        Call SetDefaultCursor
        'For some reason record was not inserted into the LABOUR_TASK_DESCRIPTIONS
        'table.
        m_str_Msg = "Task description was not added. Please contact administrator."
        MsgBox m_str_Msg, vbOKOnly + vbInformation
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdAdd_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub cmdCancel_Click()
    On Error GoTo Error_Handler
    
    Unload Me
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdCancel_Click", g_l_ErrorLineNumber
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub txtTaskDescription_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtTaskDescription edit-box to upper case.
    l_CursorPosition = txtTaskDescription.SelStart
    str_Data = txtTaskDescription.Text
    str_Data = UCase(str_Data)
    txtTaskDescription.Text = str_Data
    txtTaskDescription.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtTaskDescription_KeyUp", g_l_ErrorLineNumber
End Sub

Option Explicit

Dim m_str_Msg As String

Private Sub cmdCancel_Click()
    On Error GoTo Error_Handler
    
    Unload Me
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdCancel_Click", g_l_ErrorLineNumber
End Sub

Private Sub cmdOK_Click()
    Dim RS As ADODB.Recordset
    Dim str_UserName As String
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim l_AccessLevel As Long
    Dim str_ChangePassword As String
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    str_UserName = Trim(txtUserName.Text)
    If str_UserName = "" Then
        Call SetDefaultCursor
        m_str_Msg = "User name should not be empty."
        MsgBox m_str_Msg, vbOKOnly + vbInformation
        txtUserName.SetFocus
        Exit Sub
    End If
    
    If IsNumeric(cboAccessLevel.Text) = False Then
        Call SetDefaultCursor
        'Tell user to select access level
        m_str_Msg = "Please select an access level."
        MsgBox m_str_Msg, vbExclamation Or vbOKOnly, "Add New User"
        cboAccessLevel.SetFocus
        Exit Sub
    End If
    l_AccessLevel = CLng(cboAccessLevel.Text)
    
    str_ChangePassword = "Not Checked"
    If chkForceChangePassword.Value = 1 Then
        str_ChangePassword = "Checked"
    End If
    
    'Make sure the user name is unique
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.RetrieveUsersLike( _
                                    "CES_INQUIRY.RETRIEVE_USER_BY_USERNAME", _
                                    str_UserName)
    If RS.RecordCount > 0 Then
        Set RS = Nothing
        Call SetDefaultCursor
        'Tell user to enter unique user name
        m_str_Msg = "The user name " + str_UserName + " already exists." + Chr(13)
        m_str_Msg = m_str_Msg + "Please enter a unique user name."
        MsgBox m_str_Msg, vbExclamation Or vbOKOnly, "Add New User"
        txtUserName.SetFocus
        Exit Sub
    End If
    Set RS = Nothing
    
    'Insert the user name into the database
    l_Result = modDBHelper.Add_User("CES_UPDATE.ADD_USER", _
                                    l_RetVal, _
                                    str_UserName, _
                                    l_AccessLevel, _
                                    g_const_str_DefaultPassword, _
                                    chkForceChangePassword.Value)
    If l_Result <> 0 Then
        Call SetDefaultCursor
        m_str_Msg = "Information about new user was not created. Please contact "
        m_str_Msg = m_str_Msg + "Administrator."
        MsgBox m_str_Msg, vbInformation Or vbOKOnly, "Add New User"
        Exit Sub
    End If
    
    Call SetDefaultCursor
    'Tell the user the new user is added
    m_str_Msg = "The user " + str_UserName + " has been created with default "
    m_str_Msg = m_str_Msg + "password " + g_const_str_DefaultPassword + "."
    MsgBox m_str_Msg, vbInformation Or vbOKOnly, "Add New User"
    
    'Add record to the AUDIT_MODIFY_HISTORY table.
    l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                l_RetVal, _
                "User was added to the System", _
                0, _
                "UAA", _
                "User Name ---> " + str_UserName, _
                "Access Level ---> " + CStr(l_AccessLevel), _
                "Force user to change password at first login ---> " + str_ChangePassword, _
                "Password ---> " + g_const_str_DefaultPassword)
    Unload Me
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdOK_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub Form_Load()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    chkForceChangePassword.Value = 1
    
    'Populate cboAccessLevel combo-box with data from the ACCESS_LEVEL table.
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.RetrieveAccessLevel("CES_INQUIRY.RETRIEVE_ACCESS_LEVELS")
    
    If RS.RecordCount > 0 Then
        Set cboAccessLevel.RowSource = RS
        cboAccessLevel.ListField = "ACCESS_LEVEL_ID"
    End If
    Set RS = Nothing
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub txtUserName_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtUserName edit-box to upper case.
    l_CursorPosition = txtUserName.SelStart
    str_Data = txtUserName.Text
    str_Data = UCase(str_Data)
    txtUserName.Text = str_Data
    txtUserName.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtUserName_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtUserName_GotFocus()
    On Error GoTo Error_Handler
    
    'Select all text in the text box.
    txtUserName.SelStart = 0
    txtUserName.SelLength = Len(txtUserName.Text)
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtUserName_GotFocus", g_l_ErrorLineNumber
End Sub
Option Explicit

Private m_str_Msg As String
Public m_l_VehicleListID As Long

Private Sub PopulateDropdowns()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
        
    'Load the data into the specified drop down forms
    Set RS = modDBHelper.RetrieveEngines("CES_INQUIRY.RETRIEVE_ENGINES")
    Set cboEngine.RowSource = RS
    cboEngine.ListField = "name"
    
    Set RS = modDBHelper.RetrieveTransmissions("CES_INQUIRY.RETRIEVE_TRANSMISSIONS")
    Set cboTrans.RowSource = RS
    cboTrans.ListField = "name"
    
    Set RS = modDBHelper.RetrieveDifferentials("CES_INQUIRY.RETRIEVE_DIFFERENTIALS")
    Set cboDifferential.RowSource = RS
    cboDifferential.ListField = "name"
    
    Set RS = modDBHelper.RetrieveVehicleTypes("CES_INQUIRY.RETRIEVE_VEHICLE_TYPES")
    Set cboMake.RowSource = RS
    Set cboModel.RowSource = RS
    Set cboYear.RowSource = RS
    cboMake.ListField = "make"
    cboModel.ListField = "model"
    cboYear.ListField = "year"

    Set RS = modDBHelper.RetrieveListOfBuses("CES_INQUIRY.RETRIEVE_LIST_OF_BUSES")
    Set cboBusSeries.RowSource = RS
    cboBusSeries.ListField = "DESCRIPTION"
    
    Set RS = _
        modDBHelper.RetrieveVehicleEstimates("CES_INQUIRY.RETRIEVE_VEHICLE_ESTIMATES")
    Set cboBusDescription.RowSource = RS
    cboBusDescription.ListField = "PROJ_DESC"
        
    Set RS = Nothing
        
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateDropdowns", Erl
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub cmdAdd_Click()
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_NumberOfBuses As String
    Dim str_BusSeries As String
    Dim str_BusDescription As String
    Dim str_Engine As String
    Dim str_Make As String
    Dim str_Trans As String
    Dim str_Model As String
    Dim str_Year As String
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    'Data in the txtNumberOfBuses edit-box should be a positive number or zero
    str_NumberOfBuses = Trim(txtNumberOfBuses.Text)
    If str_NumberOfBuses = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Number of buses should be a positive integer or zero."
        MsgBox m_str_Msg
        txtNumberOfBuses.SetFocus
        Exit Sub
    End If
    If IsNumeric(str_NumberOfBuses) = False Then
        Call SetDefaultCursor
        m_str_Msg = "Number of Buses should be a positive integer or zero."
        MsgBox m_str_Msg
        txtNumberOfBuses.SetFocus
        Exit Sub
    End If
    If CLng(str_NumberOfBuses) < 0 Then
        Call SetDefaultCursor
        m_str_Msg = "Number of buses should be a positive integer or zero."
        MsgBox m_str_Msg
        txtNumberOfBuses.SetFocus
        Exit Sub
    End If
    
    'User should choose something from the cboBusSeries combo-box.
    str_BusSeries = Trim(cboBusSeries.Text)
    If str_BusSeries = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please provide Bus Series."
        MsgBox m_str_Msg
        'cboBusSeries.SetFocus
        Exit Sub
    End If
    'Data in the cboBusDescription combo-box should not be empty.
    str_BusDescription = Trim(cboBusDescription.Text)
    If str_BusDescription = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please provide Bus Description."
        MsgBox m_str_Msg
        cboBusDescription.SetFocus
        Exit Sub
    End If
    'Make sure that user choused something from the cboEngine combo-box.
    str_Engine = Trim(cboEngine.Text)
    If str_Engine = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please provide Engine."
        MsgBox m_str_Msg
        cboEngine.SetFocus
        Exit Sub
    End If
    'Make sure that user choused something from the cboMake combo-box.
    str_Make = Trim(cboMake.Text)
    If str_Make = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please provide Make."
        MsgBox m_str_Msg
        cboMake.SetFocus
        Exit Sub
    End If
    'Make sure that user choused something from the cboTrans combo-box.
    str_Trans = Trim(cboTrans.Text)
    If str_Trans = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please provide Transmission."
        MsgBox m_str_Msg
        cboTrans.SetFocus
        Exit Sub
    End If
    'Make sure that user choused something from the cboModel combo-box.
    str_Model = Trim(cboModel.Text)
    If str_Model = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please provide Model."
        MsgBox m_str_Msg
        cboModel.SetFocus
        Exit Sub
    End If
    'Make sure that user choused something from the cboYear combo-box.
    str_Year = Trim(cboYear.Text)
    If str_Year = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please provide Year."
        MsgBox m_str_Msg
        cboYear.SetFocus
        Exit Sub
    End If
    
    If cmdAdd.Caption = "ADD" Then
        l_Result = modDBHelper.AddVehicleEstimate("CES_UPDATE.ADD_VEHICLE_ESTIMATE", _
                                                  l_RetVal, _
                                                  str_BusSeries, _
                                                  str_BusDescription, _
                                                  str_NumberOfBuses, _
                                                  str_Make, _
                                                  str_Model, _
                                                  str_Year, _
                                                  str_Engine, _
                                                  str_Trans, _
                                                  cboDifferential.Text, _
                                                  modMain.g_str_UserName, _
                                                  txtSOPNumber.Text)
    
        If (l_Result > 0) Then
            m_l_VehicleListID = l_Result
            Call SetDefaultCursor
            m_str_Msg = "Vehicle Estimate Has been added."
            MsgBox m_str_Msg
        Else
            Call SetDefaultCursor
            m_str_Msg = "There was an error adding Vehicle Estimate. Please Contact "
            m_str_Msg = m_str_Msg + "Administrator"
            MsgBox m_str_Msg
            Exit Sub
        End If
        'Insert record into the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                l_RetVal, _
                "Vehicle Estimate Info was added to the System", _
                CStr(m_l_VehicleListID), _
                "BUS", _
                "Number of Vehicles ---> " + txtNumberOfBuses.Text, _
                "Vehicle Series ---> " + cboBusSeries.Text, _
                "SOP Number ---> " + txtSOPNumber.Text, _
                "Estimate Description ---> " + cboBusDescription.Text, _
                "Engine ---> " + cboEngine.Text, _
                "Make ---> " + cboMake.Text, _
                "Trans ---> " + cboTrans.Text, _
                "Model ---> " + cboModel.Text, _
                "Differential ---> " + cboDifferential.Text, _
                "Year ---> " + cboYear.Text)
    Else 'If cmdAdd.Caption = "Update" Then
        l_Result = _
                modDBHelper.UpdateVehicleEstimate("CES_UPDATE.UPDATE_VEHICLE_ESTIMATE", _
                                                  l_RetVal, _
                                                  str_BusSeries, _
                                                  str_BusDescription, _
                                                  str_NumberOfBuses, _
                                                  str_Make, _
                                                  str_Model, _
                                                  str_Year, _
                                                  str_Engine, _
                                                  str_Trans, _
                                                  cboDifferential.Text, _
                                                  modMain.g_str_UserName, _
                                                  m_l_VehicleListID, _
                                                  txtSOPNumber.Text)

        If (l_Result = 0) Then
            Call SetDefaultCursor
            m_str_Msg = "Vehicle Estimate Has been updated."
            MsgBox m_str_Msg
        Else
            Call SetDefaultCursor
            m_str_Msg = "Duplicate Estimate, please try re-entering Part."
            MsgBox m_str_Msg
            Exit Sub
        End If
        
        'Insert record into the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                l_RetVal, _
                "Vehicle Estimate Info was updated in the System", _
                CStr(m_l_VehicleListID), _
                "BUS", _
                "Number of Vehicles ---> " + txtNumberOfBuses.Text, _
                "Vehicle Series ---> " + cboBusSeries.Text, _
                "SOP Number ---> " + txtSOPNumber.Text, _
                "Estimate Description ---> " + cboBusDescription.Text, _
                "Engine ---> " + cboEngine.Text, _
                "Make ---> " + cboMake.Text, _
                "Trans ---> " + cboTrans.Text, _
                "Model ---> " + cboModel.Text, _
                "Differential ---> " + cboDifferential.Text, _
                "Year ---> " + cboYear.Text)
                
        frmSearchVehEstimate.RefreshForm
        
    End If 'If cmdAdd.Caption = "ADD" Then
    
    Call SetDefaultCursor
    Unload Me
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdAdd_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler

    Call SetWaitCursor
    
    Call PopulateDropdowns
    
    If (m_l_VehicleListID <> 0) Then
        'Update labels because form is used to update not add
        
        'requested to be able to edit the vehicle series hence comment out.
        'cboBusSeries.BackColor = &H80000018
        'cboBusSeries.Enabled = False
        
        cmdAdd.Caption = "Update"
        Me.Caption = "Update a Vehicle Estimate"
        Frame1.Caption = "Update Vehicle Estimate"
       
        Call PopulateInputBoxes
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub PopulateInputBoxes()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    Set RS = New ADODB.Recordset
    'Query database to load vehicle estimate
    Set RS = _
        modDBHelper.RetrieveVehicleEstimates("CES_INQUIRY.RETRIEVE_VEHICLE_ESTIMATES")
    RS.Filter = "VEHICLE_LIST_ID = " + CStr(m_l_VehicleListID)
    
    'Load values into text boxes
    cboBusSeries.Text = RS.Fields.Item("veh_series_code")
    cboBusDescription.Text = RS.Fields.Item("proj_desc")
    txtNumberOfBuses.Text = RS.Fields.Item("NUM_OF_VEHICLES")
    cboMake.Text = RS.Fields.Item("make")
    cboModel.Text = RS.Fields.Item("model")
    cboYear.Text = RS.Fields.Item("year")
    cboEngine.Text = RS.Fields.Item("engine")
    cboTrans.Text = RS.Fields.Item("transmission")
    cboDifferential.Text = RS.Fields.Item("differential")
    txtSOPNumber.Text = RS.Fields.Item("SOPNumber")
    Set RS = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateInputBoxes", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_Unload(Cancel As Integer)
    On Error GoTo Error_Handler
 
    m_l_VehicleListID = 0
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Unload", g_l_ErrorLineNumber
End Sub


Private Sub txtSOPNumber_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtSOPNumber edit-box to upper case.
    l_CursorPosition = txtSOPNumber.SelStart
    str_Data = txtSOPNumber.Text
    str_Data = UCase(str_Data)
    txtSOPNumber.Text = str_Data
    txtSOPNumber.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtSOPNumber_KeyUp", g_l_ErrorLineNumber
End Sub
Option Explicit

Dim m_strMsg As String

Private Sub cmdAdd_Click()
    On Error GoTo Error_Handler

    frmAddVehTypes.Show vbModal
    Call RefreshForm
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdAdd_Click", g_l_ErrorLineNumber
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub RefreshForm()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.RetrieveVehicleTypes("CES_INQUIRY.RETRIEVE_VEHICLE_TYPES")
    Set grdVehicleTypes.DataSource = RS
    If RS.RecordCount > 0 Then
        Call InitializeColumns
    Else
       Set grdVehicleTypes.DataSource = Nothing
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "RefreshForm", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler
    
    Call RefreshForm
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
End Sub

Private Sub InitializeColumns()
    On Error GoTo Error_Handler
    
    With grdVehicleTypes.Columns(0)
        .Width = 1800
        .Caption = "MAKE"
    End With
    With grdVehicleTypes.Columns(1)
        .Width = 1800
        .Caption = "MODEL"
    End With

    With grdVehicleTypes.Columns(2)
        .Width = 750
        .Caption = "YEAR"
    End With

    With grdVehicleTypes.Columns(3)
        .Width = 0
        .Visible = False
    End With

    Exit Sub
    
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "InitializeColumns", g_l_ErrorLineNumber
End Sub

Private Sub grdVehicleTypes_KeyDown(KeyCode As Integer, Shift As Integer)
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_PartID As String
    Dim str_Make As String
    Dim str_Model As String
    Dim str_Year As String
    
    On Error GoTo Error_Handler
    
    If KeyCode = vbKeyDelete And Not grdVehicleTypes.Columns.Count < 4 Then
        m_strMsg = "Are you sure you want to delete this item?"
        l_Result = MsgBox(m_strMsg, vbOKCancel)
        str_Make = grdVehicleTypes.Columns("MAKE").Text
        str_Model = grdVehicleTypes.Columns("MODEL").Text
        str_Year = grdVehicleTypes.Columns("YEAR").Text
        If l_Result = vbOK Then
            str_PartID = grdVehicleTypes.Columns(3).Text
            l_Result = modDBHelper.DeleteVehType("CES_DELETE.DELETE_VEHTYPE", _
                                                 l_RetVal, _
                                                 str_PartID)
            ' Only delete the record if the type of vehicle is in any estimates
            If l_Result = 1 Then
                MsgBox "This make is currently in a vehicle estimate." & Chr(13) & _
                       "Please remove it from all vehicle estimates before deleting the vehicle type.", _
                       vbCritical, "Cost Estimate System"
            ElseIf l_Result = 2 Then
                MsgBox "This model is currently in a vehicle estimate." & Chr(13) & _
                       "Please remove it from all vehicle estimates before deleting the vehicle type.", _
                       vbCritical, "Cost Estimate System"
            ElseIf l_Result = 3 Then
                MsgBox "This year is currently in a vehicle estimate." & Chr(13) & _
                       "Please remove it from all vehicle estimates before deleting the vehicle type.", _
                       vbCritical, "Cost Estimate System"
            Else
                Call RefreshForm
                'Add record to the AUDIT_MODIFY_HISTORY table.
                l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                                    "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                                    l_RetVal, _
                                    "Vehicle Type was deleted from the System", _
                                    0, _
                                    "MVI", _
                                    "MAKE ---> " + str_Make, _
                                    "MODEL ---> " + str_Model, _
                                    "YEAR ---> " + str_Year, _
                                    "")
            End If
        End If
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdVehicleTypes_KeyDown", g_l_ErrorLineNumber
End Sub
Option Explicit

Private m_str_Msg As String

Public m_str_TextValue As String
Public m_str_PartSelection As String
Public m_var_RowID As String

Private Sub cmdAdd_Click()
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_Data As String
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    str_Data = Trim(txtData.Text)
    If str_Data = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please provide data here."
        MsgBox m_str_Msg
        txtData.Text = ""
        txtData.SetFocus
        Exit Sub
    End If

    If cmdAdd.Caption = "Add" Then
        If optEngine.Value = True Then
            'Check that engine name is not duplicated in the ENGINES table.
            Set RS = New ADODB.Recordset
            Set RS = modDBHelper.SearchEngineByName("CES_INQUIRY.SERCH_ENGINE_BY_NAME", _
                                                    str_Data)
            If RS.RecordCount > 0 Then
                Call SetDefaultCursor
                Set RS = Nothing
                m_str_Msg = "Engine with the same name already exist. Please provide "
                m_str_Msg = m_str_Msg + "another name."
                MsgBox m_str_Msg
                txtData.SetFocus
                Exit Sub
            End If
            
            l_Result = modDBHelper.AddEngines("CES_UPDATE.ADD_ENGINES", _
                                              l_RetVal, _
                                              str_Data)
            If (l_Result = 0) Then
                Call SetDefaultCursor
                m_str_Msg = "Engine has been added."
                MsgBox m_str_Msg
                'Add record to the AUDIT_MODIFY_HISTORY table.
                l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                                    "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                                    l_RetVal, _
                                    "Engine was added to the System", _
                                    0, _
                                    "ETD", _
                                    "Engine ---> " + Trim(txtData.Text), _
                                    "")
            Else
                Call SetDefaultCursor
                m_str_Msg = "There was an error adding Engine. Please contact Supervisor."
                MsgBox m_str_Msg
            End If
        ElseIf optTransmission = True Then
            'Check that transmission name is not duplicated in the TRANSMISSIONS table.
            Set RS = New ADODB.Recordset
            Set RS = modDBHelper.SearchTransmissionByName( _
                                            "CES_INQUIRY.SERCH_TRANSMISSION_BY_NAME", _
                                            str_Data)
            If RS.RecordCount > 0 Then
                Call SetDefaultCursor
                Set RS = Nothing
                m_str_Msg = "Transmission with the same name already exist. Please "
                m_str_Msg = m_str_Msg + "provide another name."
                MsgBox m_str_Msg
                txtData.SetFocus
                Exit Sub
            End If
            
            l_Result = modDBHelper.AddTransmissions("CES_UPDATE.ADD_TRANSMISSIONS", _
                                                    l_RetVal, _
                                                    str_Data)
            If (l_Result = 0) Then
                Call SetDefaultCursor
                m_str_Msg = "Transmission has been added."
                MsgBox m_str_Msg
                'Add record to the AUDIT_MODIFY_HISTORY table.
                l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                                    "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                                    l_RetVal, _
                                    "Transmission was added to the System", _
                                    0, _
                                    "ETD", _
                                    "Transmission ---> " + Trim(txtData.Text), _
                                    "")
            Else
                Call SetDefaultCursor
                m_str_Msg = "There was an error adding Transmission. Please contact "
                m_str_Msg = m_str_Msg + "Supervisor."
                MsgBox m_str_Msg
            End If
        Else
            'Check that differential name is not duplicated in the DIFFERENTIAL table.
            Set RS = New ADODB.Recordset
            Set RS = modDBHelper.SearchDifferentialByName( _
                                            "CES_INQUIRY.SERCH_DIFFERENTIAL_BY_NAME", _
                                            str_Data)
            If RS.RecordCount > 0 Then
                Call SetDefaultCursor
                Set RS = Nothing
                m_str_Msg = "Differential with the same name already exist. Please "
                m_str_Msg = m_str_Msg + "provide another name."
                MsgBox m_str_Msg
                txtData.SetFocus
                Exit Sub
            End If
            l_Result = modDBHelper.AddDifferentials("CES_UPDATE.ADD_DIFFERENTIALS", _
                                                    l_RetVal, _
                                                    str_Data)
            If (l_Result = 0) Then
                Call SetDefaultCursor
                m_str_Msg = "Differential has been added."
                MsgBox m_str_Msg
                'Add record to the AUDIT_MODIFY_HISTORY table.
                l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                                    "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                                    l_RetVal, _
                                    "Differential was added to the System", _
                                    0, _
                                    "ETD", _
                                    "Differential ---> " + Trim(txtData.Text), _
                                    "")
            Else
                Call SetDefaultCursor
                m_str_Msg = "There was an error adding Differential. Please contact "
                m_str_Msg = m_str_Msg + "Supervisor."
                MsgBox m_str_Msg
            End If
        End If
    Else ' If cmdAdd.Caption = "Update"
       If optEngine.Value = True Then
            'Check that engine name is not duplicated in the ENGINES table.
            Set RS = New ADODB.Recordset
            Set RS = modDBHelper.SearchEngineByName("CES_INQUIRY.SERCH_ENGINE_BY_NAME", _
                                                    str_Data)
            If RS.RecordCount > 0 Then
                Call SetDefaultCursor
                Set RS = Nothing
                m_str_Msg = "Engine with the same name already exist. Please provide "
                m_str_Msg = m_str_Msg + "another name."
                MsgBox m_str_Msg
                txtData.SetFocus
                Exit Sub
            End If
            
            l_Result = modDBHelper.UpdateEngines("CES_UPDATE.UPDATE_ENGINES", _
                                                 l_RetVal, _
                                                 str_Data, _
                                                 m_var_RowID)
        
            If (l_Result = 0) Then
                Call SetDefaultCursor
                m_str_Msg = "Engine has been updated."
                MsgBox m_str_Msg
                'Add record to the AUDIT_MODIFY_HISTORY table.
                l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                                    "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                                    l_RetVal, _
                                    "Engine was updated in the System", _
                                    0, _
                                    "ETD", _
                                    "Engine ---> " + Trim(txtData.Text), _
                                    "")
            Else
                Call SetDefaultCursor
                m_str_Msg = "There was an error updating Engine. Please contact Supervisor."
                MsgBox m_str_Msg
            End If
        ElseIf optTransmission = True Then
            'Check that transmission name is not duplicated in the TRANSMISSIONS table.
            Set RS = New ADODB.Recordset
            Set RS = modDBHelper.SearchTransmissionByName( _
                                            "CES_INQUIRY.SERCH_TRANSMISSION_BY_NAME", _
                                            str_Data)
            If RS.RecordCount > 0 Then
                Call SetDefaultCursor
                Set RS = Nothing
                m_str_Msg = "Transmission with the same name already exist. Please "
                m_str_Msg = m_str_Msg + "provide another name."
                MsgBox m_str_Msg
                txtData.SetFocus
                Exit Sub
            End If
            l_Result = modDBHelper.UpdateTransmissions("CES_UPDATE.UPDATE_TRANSMISSIONS", _
                                                       l_RetVal, _
                                                       str_Data, _
                                                       m_var_RowID)
            If (l_Result = 0) Then
                Call SetDefaultCursor
                m_str_Msg = "Transmission has been updated."
                MsgBox m_str_Msg
                'Add record to the AUDIT_MODIFY_HISTORY table.
                l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                                    "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                                    l_RetVal, _
                                    "Transmission was updated in the System", _
                                    0, _
                                    "ETD", _
                                    "Transmission ---> " + Trim(txtData.Text), _
                                    "")
            Else
                Call SetDefaultCursor
                m_str_Msg = "There was an error updating Transmission. Please contact "
                m_str_Msg = m_str_Msg + "Supervisor."
                MsgBox m_str_Msg
            End If
        Else
            'Check that differential name is not duplicated in the DIFFERENTIAL table.
            Set RS = New ADODB.Recordset
            Set RS = modDBHelper.SearchDifferentialByName( _
                                            "CES_INQUIRY.SERCH_DIFFERENTIAL_BY_NAME", _
                                            str_Data)
            If RS.RecordCount > 0 Then
                Call SetDefaultCursor
                Set RS = Nothing
                m_str_Msg = "Differential with the same name already exist. Please "
                m_str_Msg = m_str_Msg + "provide another name."
                MsgBox m_str_Msg
                txtData.SetFocus
                Exit Sub
            End If
            l_Result = modDBHelper.UpdateDiffentials("CES_UPDATE.UPDATE_DIFFERENTIALS", _
                                                     l_RetVal, _
                                                     str_Data, _
                                                     m_var_RowID)
            If (l_Result = 0) Then
                Call SetDefaultCursor
                m_str_Msg = "Differential has been updated."
                MsgBox m_str_Msg
                'Add record to the AUDIT_MODIFY_HISTORY table.
                l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                                    "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                                    l_RetVal, _
                                    "Differential was updated in the System", _
                                    0, _
                                    "ETD", _
                                    "Differential ---> " + Trim(txtData.Text), _
                                    "")
            Else
                Call SetDefaultCursor
                m_str_Msg = "There was an error updating Differential. Please contact "
                m_str_Msg = m_str_Msg + "Supervisor."
                MsgBox m_str_Msg
            End If
        End If
    End If
    
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    
    Call SetDefaultCursor
    Unload Me

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdAdd_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    If (m_str_TextValue <> "" Or m_var_RowID <> "" Or m_str_PartSelection <> "") Then
        cmdAdd.Caption = "Update"
        Me.Caption = "Update Engines/Transmissions/Differentials"
        lblSelectPartToAdd.Caption = "Part To Update"
        If m_str_PartSelection = "ENGINE" Then
            optEngine.Value = True
            optEngine.Enabled = True
            optTransmission.Enabled = False
            optDifferential.Enabled = False
        ElseIf m_str_PartSelection = "TRANS" Then
            optTransmission.Value = True
            optTransmission.Enabled = True
            optEngine.Enabled = False
            optDifferential.Enabled = False
        ElseIf m_str_PartSelection = "DIFF" Then
            optDifferential.Value = True
            optDifferential.Enabled = True
            optEngine.Enabled = False
            optTransmission.Enabled = False
        End If
        txtData.Text = m_str_TextValue
    End If

    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler

    Call SetDefaultCursor
    m_str_TextValue = ""
    m_var_RowID = ""
    m_str_PartSelection = ""

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub txtData_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim str_Data As String
    Dim l_CursorPosition As Long
    
    On Error GoTo Error_Handler

    'Convert data in the txtData edit-box to upper case.
    l_CursorPosition = txtData.SelStart
    str_Data = txtData.Text
    str_Data = UCase(str_Data)
    txtData.Text = str_Data
    txtData.SelStart = l_CursorPosition
        
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtData_KeyUp", g_l_ErrorLineNumber
End Sub

'==============================================================
'frmAddVehTypes.frm
'
'Adds a vehicle estimate to the cost tracking system database.
'User enters information into the input boxes and submits the values
'which are then saved into the database.
'===============================================================
Option Explicit

Private m_str_Msg As String

Private Sub cmdAdd_Click()
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_Make As String
    Dim str_Model As String
    Dim str_Year As String
    Dim l_Year As Long
    Dim RS As ADODB.Recordset

    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    'Make sure that user typed something into the txtMake edit-box.
    str_Make = Trim(txtMake.Text)
    If str_Make = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please provide Make."
        MsgBox m_str_Msg
        txtMake.SetFocus
        Exit Sub
    End If

    'Make sure that user typed something into the txtModel edit-box.
    str_Model = Trim(txtModel.Text)
    If str_Model = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please provide Model."
        MsgBox m_str_Msg
        txtModel.SetFocus
        Exit Sub
    End If

    'Make sure that user typed something into the txtYear edit-box.
    str_Year = Trim(txtYear.Text)
    If str_Year = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please provide valid Year."
        MsgBox m_str_Msg
        txtYear.SetFocus
        Exit Sub
    End If
    
    If IsNumeric(str_Year) = False Then
        Call SetDefaultCursor
        m_str_Msg = "Please provide valid Year."
        MsgBox m_str_Msg
        txtYear.SetFocus
        Exit Sub
    End If
    
    l_Year = CLng(str_Year)
    txtYear.Text = CStr(l_Year)
    If l_Year < 1800 Then
        Call SetDefaultCursor
        m_str_Msg = "Please provide valid Year."
        MsgBox m_str_Msg
        txtYear.SetFocus
        Exit Sub
    End If

    'Make sure that data is not duplicated in the ADD_VEH_TYPES table.
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.SearchVehTypeByKey("CES_INQUIRY.SEARCH_VEH_TYPE_BY_KEY", _
                                            str_Make, _
                                            str_Model, _
                                            str_Year)
    
    If RS.RecordCount > 0 Then
        Call SetDefaultCursor
        Set RS = Nothing
        m_str_Msg = "Vehicle with this Make/Model/Year already exist. Please "
        m_str_Msg = m_str_Msg + "provide other settings."
        MsgBox m_str_Msg
        txtMake.SetFocus
        Exit Sub
    End If
        
    l_Result = modDBHelper.AddVehTypes("CES_UPDATE.ADD_VEH_TYPES", _
                                       l_RetVal, _
                                       str_Make, _
                                       str_Model, _
                                       str_Year)

    If (l_Result = 0) Then
        Call SetDefaultCursor
        m_str_Msg = "Vehicle Type has been added."
        MsgBox m_str_Msg
        'Add record to the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "Vehicle Type was added to the System", _
                            0, _
                            "MVI", _
                            "Make ---> " + str_Make, _
                            "Model ---> " + str_Model, _
                            "Year ---> " + str_Year, _
                            "")
        Unload Me
    Else
        Call SetDefaultCursor
        m_str_Msg = "There was an error adding Vehicle Type. "
        m_str_Msg = m_str_Msg + "Please contact Supervisor."
        MsgBox m_str_Msg
    End If

    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    
    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdAdd_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler

    Call SetWaitCursor
    Me.WindowState = 0
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub txtMake_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtMake edit-box to upper case.
    l_CursorPosition = txtMake.SelStart
    str_Data = txtMake.Text
    str_Data = UCase(str_Data)
    txtMake.Text = str_Data
    txtMake.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtMake_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtModel_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtModel edit-box to upper case.
    l_CursorPosition = txtModel.SelStart
    str_Data = txtModel.Text
    str_Data = UCase(str_Data)
    txtModel.Text = str_Data
    txtModel.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtModel_KeyUp", g_l_ErrorLineNumber
End Sub
'---------------------------------------------------------------------------------------
' Module    : frmArchivedBUSEstimateMain
' Purpose   : This form loads an archived Vehicle Estimate.
'---------------------------------------------------------------------------------------
'
Option Explicit

Public m_str_EstimateNumberID As String

'---------------------------------------------------------------------------------------
' Procedure : cmdMaterialsList_Click
' Purpose   :
'---------------------------------------------------------------------------------------
'
Private Sub cmdMaterialsList_Click()
    On Error GoTo Error_Handler
    
    frmArchivedBUSMaterials.m_str_EstimateNumberID = m_str_EstimateNumberID
    frmArchivedBUSMaterials.Show
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
End Sub

'---------------------------------------------------------------------------------------
' Procedure : Form_Load
' Purpose   : Calls appropriate functions to populate the data on the form
'---------------------------------------------------------------------------------------
'
Private Sub Form_Load()
    On Error GoTo Error_Handler

    Call SetWaitCursor  'start hour glass
    Call Populate
    Call SetDefaultCursor 'End hour glass
    Call FormatColumns
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

'---------------------------------------------------------------------------------------
' Procedure : Populate
' Purpose   : Populates the form with the archived data of a
'             specified rebuilt part estimate that has been archived.
'---------------------------------------------------------------------------------------
'
Private Sub Populate()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler

    'Loads the employee labour table
    Set RS = modDBHelper.RetrieveArchMB("CES_ARCHIVE.GET_ARCH_VEH_EMPLOYEE_LABOUR", _
                                              m_str_EstimateNumberID)
    If RS.RecordCount > 0 Then
         Set grdLabour.DataSource = RS
         RS.MoveFirst
         txtTotalHours.Text = DecimalToMinutes(ColumnTotals(RS, "Time addition"))
    Else
         Set grdLabour.DataSource = Nothing
         txtTotalHours.Text = 0
    End If
    Set RS = Nothing
    
    'Loads the labour cost center totals table
    Set RS = modDBHelper.RetrieveArchMB("CES_ARCHIVE.GET_ARCH_VEH_LABOUR_CC_TOTAL", _
                                              m_str_EstimateNumberID)
    If RS.RecordCount > 0 Then
         Set grdLabourCostCentreTotals.DataSource = RS
    Else
         Set grdLabourCostCentreTotals.DataSource = Nothing
    End If
    Set RS = Nothing
    Set RS = modDBHelper.RetrieveArchMB("CES_ARCHIVE.GET_ARCH_VEH_MASTERLIST_BY_ID", _
                                              m_str_EstimateNumberID)

    'Load all text boxes stored in the database
    If RS.RecordCount > 0 Then
        txtNumberOfBuses.Text = RS.Fields.Item("NUM_OF_VEHICLES").Value
        txtVehicleSeriesCode.Text = RS.Fields.Item("VEH_SERIES_CODE")
        txtSOPNumber.Text = RS.Fields.Item("SOPNUMBER")
        txtDescription.Text = RS.Fields.Item("PROJ_DESC")
        txtDateArchived.Text = RS.Fields.Item("DATE_ARCHIVED")
        txtArchivedBy.Text = RS.Fields.Item("ARCHIVED_BY")
        txtLabourSubtotal.Text = Format(RS.Fields.Item("LABOUR_COST"), "currency")
        txtLabourOverheadAmount.Text = Format(RS.Fields.Item("LABOUR_OVERHEAD_AMOUNT"), "currency")
        txtLabourTotal.Text = Format(RS.Fields.Item("LABOUR_TOTAL"), "currency")
        txtMaterialTotal.Text = Format(RS.Fields.Item("MATERIALS_TOTAL"), "currency")
        txtTotalVehicleCost.Text = Format(RS.Fields.Item("TOTAL_BUS_ESTIMATE_COST"), "currency")
        txtTaxTotal.Text = Format(RS.Fields.Item("TOTAL_TAX"), "currency")
        txtTotalVehicleCostWithTax.Text = Format(RS.Fields.Item("TOTAL_COST_TAX"), "currency")
        txtOEMKitsTotal.Text = Format(RS.Fields.Item("OEM_KITS_TOTAL"), "currency")
    End If
    
    Set RS = Nothing
    Set RS = modDBHelper.RetrieveArchMB("CES_ARCHIVE.GET_ARCH_VEH_MAT_CC_TOTAL", _
                                              m_str_EstimateNumberID)
    If RS.RecordCount > 0 Then
         Set grdMaterialsCostCentreTotals.DataSource = RS
    Else
         Set grdMaterialsCostCentreTotals.DataSource = Nothing
    End If
    
    Set RS = Nothing
    
    Set RS = modDBHelper.RetrieveMBListOfBuses("CES_ARCHIVE.GET_ARCH_VEH_KIT_LIST", _
                                                    m_str_EstimateNumberID)
        Set cboOEMKitsList.RowSource = RS
        cboOEMKitsList.ListField = "PART_NUMBER"
    Set RS = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Populate", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub FormatColumns()
    On Error GoTo Error_Handler
    
    If Not grdLabour.Row Then
        grdLabour.Columns("CC").Width = 500
        grdLabour.Columns("TASK").Width = 1600
        grdLabour.Columns("LABOUR TYPE").Width = 2120
        grdLabour.Columns("USAGE").Width = 620
        grdLabour.Columns("USAGE").Alignment = dbgRight
        grdLabour.Columns("TIME").Width = 600
        grdLabour.Columns("TIME").Alignment = dbgRight
        grdLabour.Columns("ACTUAL TIME").Width = 1250
        grdLabour.Columns("ACTUAL TIME").Alignment = dbgRight
    End If

    If grdLabourCostCentreTotals.Columns.Count > 2 Then
        With grdLabourCostCentreTotals
            .Columns("LABOUR DEFINITION").Width = 2680
            .Columns("WAGE GROUP").Alignment = dbgCenter
            .Columns("RATE PER HOUR").Alignment = dbgRight
            .Columns("RATE PER HOUR").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("TOTAL COST").Alignment = dbgRight
            .Columns("TOTAL COST").NumberFormat = "$#,##0.00;($#,##0.00)"

        End With
    End If
        
    If Not grdMaterialsCostCentreTotals.Row Then
        With grdMaterialsCostCentreTotals
            .Columns("COST CENTRE").Width = 600
            .Columns("TOTAL COST").Alignment = dbgRight
            .Columns("TOTAL COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("TOTAL COST").Width = 1525
        End With
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "FormatColumns", g_l_ErrorLineNumber
End Sub

'---------------------------------------------------------------------------------------
' Procedure : cboOEMKitsList_Change
' Purpose   : When the combo box is changed, the OEMKIT price for the current combo selection
'             displays the correct price
'---------------------------------------------------------------------------------------
'
Private Sub cboOEMKitsList_Change()
    Dim str_PartNumber As String
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler

    str_PartNumber = Trim(cboOEMKitsList.Text)
    If str_PartNumber <> "" Then
        Set RS = modDBHelper.ArchSearchOEMKits("CES_ARCHIVE.GET_ARCH_VEH_KIT_LIST_PART", _
                                           str_PartNumber, _
                                           m_str_EstimateNumberID)
        If RS.RecordCount > 0 Then
             txtSelectedKitCost.Text = Format(RS("ESTIMATED_COST").Value, "currency")
        End If
    End If

    If Not RS Is Nothing Then
        Set RS = Nothing
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cboOEMKitsList_Change", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub tbMenu_ButtonMenuClick(ByVal ButtonMenu As MSComctlLib.ButtonMenu)
    On Error GoTo Error_Handler
    
    Select Case ButtonMenu
        Case "Close"
            Unload Me
        Case "Print"
            ArchCostEstimateReport m_str_EstimateNumberID, "BUS"
            
        Case "Materials List"
            frmArchivedBUSMaterials.m_str_EstimateNumberID = m_str_EstimateNumberID
            frmArchivedBUSMaterials.Show
            frmArchivedBUSMaterials.SetFocus
        Case "Vehicle Info"

    End Select
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "tbMenu_ButtonMenuClick", g_l_ErrorLineNumber
    SetDefaultCursor
End Sub

'---------------------------------------------------------------------------------------
' Module    : frmArchivedBUSMaterials
' Purpose   : Displays the material list of an archived Vehicle Estimate
'---------------------------------------------------------------------------------------
'
Option Explicit
Private m_l_Result As Long
Private m_l_RetVal As Long

Public m_str_EstimateNumberID As String

'---------------------------------------------------------------------------------------
' Procedure : Form_Load
' Purpose   :
'---------------------------------------------------------------------------------------
'
Private Sub Form_Load()
    On Error GoTo Error_Handler

    Call SetWaitCursor
    Call Populate
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

'---------------------------------------------------------------------------------------
' Procedure : Populate
' Purpose   : Populates the form with the archived data of a
'             specified rebuilt part estimate that has been archived.
'---------------------------------------------------------------------------------------
'
Private Sub Populate()
    Dim RS As ADODB.Recordset
    Dim cur_RBCoreCostTotal As Currency
    Dim cur_SCPCoreCostTotal As Currency
    Dim cur_NSPCoreCostTotal As Currency
    Dim cur_CoreCostTotal As Currency

    On Error GoTo Error_Handler
    txtRebuiltCode.Text = m_str_EstimateNumberID
    'Loads the employee labour table
    Set RS = modDBHelper.RetrieveArchRB("CES_ARCHIVE.GET_ARCH_VEH_RB_PARTS_USED", _
                                        m_str_EstimateNumberID)
    If RS.RecordCount > 0 Then
        Set grdRebuiltPartsList.DataSource = RS
        cur_RBCoreCostTotal = Format(ColumnTotals(RS, "corecost"), "currency")
        RS.MoveFirst
        txtRebuiltPartsTotal.Text = Format(ColumnTotals(RS, "total_cost"), "currency")
    Else
        Set grdRebuiltPartsList.DataSource = Nothing
        cur_RBCoreCostTotal = Format(0#, "currency")
        txtRebuiltPartsTotal.Text = Format(0#, "currency")
    End If
       
    Set RS = Nothing
    
    'Loads the labour cost center totals table
    Set RS = modDBHelper.RetrieveArchRB("CES_ARCHIVE.GET_ARCH_VEH_SC_PARTS_USED", _
                                              m_str_EstimateNumberID)
    If RS.RecordCount > 0 Then
        Set grdStockCodedPartsList.DataSource = RS
        cur_SCPCoreCostTotal = Format( _
                                    ColumnTotals(RS, "corecost"), "currency")
        
        RS.MoveFirst
        txtStockCodedPartsTotal.Text = Format( _
                                    ColumnTotals(RS, "total_cost"), "currency")
    Else
        Set grdStockCodedPartsList.DataSource = Nothing
        cur_SCPCoreCostTotal = Format(0#, "currency")
        txtStockCodedPartsTotal.Text = Format(0#, "currency")
    End If
    
    Set RS = Nothing
    Set RS = modDBHelper.RetrieveArchRB("CES_ARCHIVE.GET_ARCH_VEH_NSC_PARTS_USED", _
                                              m_str_EstimateNumberID)
    If RS.RecordCount > 0 Then
        Set grdNonStockCodedPartsList.DataSource = RS
        cur_NSPCoreCostTotal = Format(ColumnTotals(RS, "corecost"), "currency")
        RS.MoveFirst
        txtNonStockCodedPartsTotal.Text = Format(ColumnTotals(RS, "total_cost"), "currency")
    Else
        Set grdNonStockCodedPartsList.DataSource = Nothing
        cur_NSPCoreCostTotal = Format(0#, "currency")
        txtNonStockCodedPartsTotal.Text = Format(0#, "currency")
    End If
    
    Set RS = Nothing
    cur_CoreCostTotal = cur_RBCoreCostTotal + cur_SCPCoreCostTotal + cur_NSPCoreCostTotal
        
        'Calculate the materials total
    txtCoreCostTotal.Text = Format((cur_CoreCostTotal * -1), "currency")
    txtTotalMaterialsCost.Text = Format( _
                    CCur(txtRebuiltPartsTotal.Text) + _
                    CCur(txtNonStockCodedPartsTotal.Text) + _
                    CCur(txtStockCodedPartsTotal.Text) - cur_CoreCostTotal, "currency")
                    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Populate", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub grdRebuiltPartsList_Click()

End Sub
'---------------------------------------------------------------------------------------
' Module    : frmArchivedHistory
' Purpose   : Shows the history of all the archives of the current estimate.
'             Allows the user to perform searches and load the
'---------------------------------------------------------------------------------------
'
Option Explicit

'Used for displaying full name in combo boxes, used in translating "RB" to "Rebuilt Part"
'Holds the rebuilt stock code passed to the form
Public m_str_LinkCode As String

'Holds the type of estimate which is also passed to the form. Ex. RB, MB etc
Public m_str_EstimateType As String
Private m_str_Msg As String
'Used for displaying full name in combo boxes, used in translating "RB" to "Rebuilt Part"
Private Const m_str_const_RBEstimate As String = "Rebuilt Part Estimate"
Private Const m_str_const_MBEstimate As String = "Make Vs. Buy Estimate"
Private Const m_str_const_VehEstimate As String = "Vehicle Estimate"

'---------------------------------------------------------------------------------------
' Procedure : PopulateControls
' Purpose   : Populates the grid with default of all estimates related to the estimate ID
'             passed to the form.
'---------------------------------------------------------------------------------------
'
Private Sub PopulateControls()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    cboEstimateType.AddItem m_str_const_RBEstimate
    cboEstimateType.AddItem m_str_const_VehEstimate
    cboEstimateType.AddItem m_str_const_MBEstimate
    
    If m_str_EstimateType = "MB" Then
        cboEstimateType.Text = m_str_const_MBEstimate
        cboEstimate.Text = m_str_LinkCode
        lblSearchText.Caption = "Make Buy Number"
    ElseIf m_str_EstimateType = "BUS" Then
        cboEstimateType.Text = m_str_const_VehEstimate
'        cboEstimateType.Text = m_str_LinkCode
        lblSearchText.Caption = "Vehicle_ID"
    ElseIf m_str_EstimateType = "RB" Then
        cboEstimateType.Text = m_str_const_RBEstimate
        cboEstimate.Text = m_str_LinkCode
        lblSearchText.Caption = "Rebuilt Number:"
    
    End If
    
    Set grdArchiveHistory.DataSource = Nothing
    Set RS = New ADODB.Recordset
        
    If m_str_EstimateType = "RB" Then
        Set RS = modDBHelper.RetrieveArchRB("CES_ARCHIVE.GET_ARCH_RB_MASTERLIST_RBNUM", _
                            m_str_LinkCode)
        If RS.RecordCount > 0 Then
            Set grdArchiveHistory.DataSource = RS
            cboEstimate.Text = RS("REBUILT_STOCK_NUM")
            FormatGridsRB
        End If
    ElseIf m_str_EstimateType = "MB" Then
        Set RS = modDBHelper.RetrieveArchMB("CES_ARCHIVE.GET_ARCH_MB_MASTERLIST_MBNUM", _
                            m_str_LinkCode)
        If RS.RecordCount > 0 Then
            Set grdArchiveHistory.DataSource = RS
            cboEstimate.Text = RS("MB_NUMBER")
            FormatGridsMB
        End If
    ElseIf m_str_EstimateType = "BUS" Then
        Set RS = modDBHelper.RetrieveArchBUS("CES_ARCHIVE.GET_ARCH_VEH_BY_OLDID", _
                            m_str_LinkCode)
        If RS.RecordCount > 0 Then
            Set grdArchiveHistory.DataSource = RS
            cboEstimate.Text = RS("OLD_ID")
            FormatGridsBUS
        End If
    End If

    If grdArchiveHistory.Columns.Count > 2 Then
        grdArchiveHistory.Columns("DATE ARCHIVED").NumberFormat = "yyyy-mmm-dd hh:mm:ss AMPM"
        grdArchiveHistory.Columns("TOTAL COST").Alignment = dbgRight
        grdArchiveHistory.Columns("TOTAL COST").NumberFormat = "$#,##0.00;($#,##0.00)"
    End If

    Set RS = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateControls", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    Call SetDefaultCursor
End Sub

'Change the search criteria text depending on what type of estimate is selected
Private Sub cboEstimateType_Click()
    On Error GoTo Error_Handler
    
    If cboEstimateType = m_str_const_MBEstimate Then
        lblSearchText.Caption = "Make Buy Number:"
    ElseIf cboEstimateType.Text = m_str_const_VehEstimate Then
        lblSearchText.Caption = "Vehicle ID Number:"
    ElseIf cboEstimateType.Text = m_str_const_RBEstimate Then
        lblSearchText.Caption = "Rebuilt Number:"
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdShow_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

'---------------------------------------------------------------------------------------
' Procedure : cmdShow_Click
' Purpose   : Search using criteria presented on the form, show results in grid
'---------------------------------------------------------------------------------------
'
Private Sub cmdShow_Click()
    Dim RS As ADODB.Recordset
    Dim b_DateIsChecked As Boolean
    Dim str_EstimateType As String
    
    On Error GoTo Error_Handler
    
    calDateFrom.Visible = False
    calDateTo.Visible = False

    b_DateIsChecked = False
    If chkAndDate.Value = 1 Then
        If IsDate(txtDateFrom.Text) = False Then
            m_str_Msg = "Please provide Date From."
            MsgBox m_str_Msg
            Exit Sub
        End If
        If IsDate(txtDateTo.Text) = False Then
            m_str_Msg = "Please provide Date To."
            MsgBox m_str_Msg
            Exit Sub
        End If
        If CDate(txtDateFrom.Text) >= CDate(txtDateTo.Text) Then
            m_str_Msg = "Date From should be less than Date To."
            MsgBox m_str_Msg
            Exit Sub
        End If
        b_DateIsChecked = True
    End If
    
    Call SetWaitCursor
    
    If Trim(cboEstimateType.Text) = m_str_const_RBEstimate Then
        str_EstimateType = "RB"
    ElseIf Trim(cboEstimateType.Text) = m_str_const_MBEstimate Then
        str_EstimateType = "MB"
    ElseIf Trim(cboEstimateType.Text) = m_str_const_VehEstimate Then
        str_EstimateType = "BUS"
    Else
        'if no estimate type is selected exit search
        Exit Sub
    End If

    Set RS = New ADODB.Recordset
    
    If b_DateIsChecked = False Then
        Set RS = modDBHelper.SearchArchiveHistory( _
                        "CES_ARCHIVE.SEARCH_ARCHIVE_HISTORY", _
                        Trim(cboEstimate.Text), _
                        str_EstimateType, _
                        chkAndDate.Value, _
                        "", _
                        "")
    Else
        Set RS = modDBHelper.SearchArchiveHistory( _
                        "CES_ARCHIVE.SEARCH_ARCHIVE_HISTORY", _
                        Trim(cboEstimate.Text), _
                        str_EstimateType, _
                        chkAndDate.Value, _
                        txtDateFrom, _
                        txtDateTo)
    End If
    If RS.RecordCount > 0 Then
        Set grdArchiveHistory.DataSource = RS
    
    
        If str_EstimateType = "RB" Then
            FormatGridsRB
        ElseIf str_EstimateType = "MB" Then
            FormatGridsMB
        ElseIf str_EstimateType = "BUS" Then
            FormatGridsBUS
        End If
        
    Else
        Set grdArchiveHistory.DataSource = Nothing
            
    End If
    If grdArchiveHistory.Columns.Count > 2 Then
        grdArchiveHistory.Columns("DATE ARCHIVED").NumberFormat = "yyyy-mmm-dd hh:mm:ss AMPM"
        grdArchiveHistory.Columns("TOTAL COST").Alignment = dbgRight
        grdArchiveHistory.Columns("TOTAL COST").NumberFormat = "$#,##0.00;($#,##0.00)"
    End If
    
    Set RS = Nothing
   
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdShow_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

'---------------------------------------------------------------------------------------
' Procedure : Form_Load
' Purpose   : Commands to run when the form loads
'---------------------------------------------------------------------------------------
'
Private Sub Form_Load()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    Call PopulateControls
    cboEstimateType.Enabled = True
    cboEstimate.Enabled = True
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

'---------------------------------------------------------------------------------------
' Procedure : Form_QueryUnload
' Purpose   : Form unloads make sure default cursor is set.  Any data or recordsets should be closed
'---------------------------------------------------------------------------------------
'
Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler

    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

'---------------------------------------------------------------------------------------
' Procedure : FormatGridsRB
' Purpose   : Formats the grid hiding non essential columns, also formats
'---------------------------------------------------------------------------------------
'
Private Sub FormatGridsRB()
    On Error GoTo Error_Handler
     
    If grdArchiveHistory.Columns.Count > 2 Then
        With grdArchiveHistory
            .Columns("MMS_STOCK_CODE").Visible = False
            .Columns("ITEM_REF_NUMBER").Visible = False
            .Columns("DETAILED_DESC").Visible = False
            .Columns("KEYWORD").Visible = False
            .Columns("CORE_PART_NUM").Visible = False
            .Columns("REBUILT_STOCK_NUM").Caption = "REBUILT STOCK NUMBER"
            .Columns("DATE_ARCHIVED").Caption = "DATE ARCHIVED"
            .Columns("ARCHIVED_BY").Caption = "ARCHIVED BY"
            .Columns("TOTAL_COST_TAX").Caption = "TOTAL COST"
            .Columns("CORE_CHARGE").Visible = False
            .Columns("JOB_NUMBER").Visible = False
            .Columns("ESTIMATED_COST").Visible = False
            .Columns("SOP_NUMBER").Visible = False
            .Columns("ARCH_RB_MASTERLIST_ID").Visible = False
            .Columns("LABOUR_COST").Visible = False
            .Columns("LABOUR_OVERHEAD_AMOUNT").Visible = False
            .Columns("LABOUR_TOTAL").Visible = False
            .Columns("MATERIALS_TOTAL").Visible = False
            .Columns("TOTAL_REBUILT_PART_COST").Visible = False
            .Columns("TOTAL_REBUILT_PART_COST").Alignment = dbgRight
            .Columns("TAX_TOTAL").Visible = False
        End With
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "FormatGridsRB", g_l_ErrorLineNumber
End Sub

'---------------------------------------------------------------------------------------
' Procedure : FormatGridsMB
' Purpose   : Formats the grid hiding non essential columns, also formats
'---------------------------------------------------------------------------------------
'
Private Sub FormatGridsMB()
    On Error GoTo Error_Handler
     
    If grdArchiveHistory.Columns.Count > 2 Then
        With grdArchiveHistory
            .Columns("REMAN_COST").Visible = False
            .Columns("EXTERNAL_COST").Visible = False
            .Columns("BUY_NEW_COST").Visible = False
            .Columns("INTERNAL_COST").Visible = False
            .Columns("RECOMMENDATION").Visible = False
            .Columns("SAMPLE_PROVIDED").Visible = False
            .Columns("TOTAL_COST_TAX").Visible = False
            .Columns("TOTAL_TAX").Visible = False
            .Columns("BENCH_NUMBER").Visible = False
            .Columns("ANNUAL_USAGE").Visible = False
            .Columns("VENDOR_PART_NUM").Visible = False
            .Columns("NUM_BUS_COMP").Visible = False
            .Columns("MB_NUMBER").Caption = "MAKE BUY NUMBER"
            .Columns("DATE_ARCHIVED").Caption = "DATE ARCHIVED"
            .Columns("ARCHIVED_BY").Caption = "ARCHIVED BY"
            .Columns("TOTAL_COST_TAX").Caption = "TOTAL COST"
            .Columns("DESCRIPTION").Visible = False
            .Columns("KEYWORD").Visible = False
            .Columns("BUS_TYPE").Visible = False
            .Columns("BUY_CODE").Visible = False
            .Columns("REBUILD_CODE").Visible = False
            .Columns("CORE_CODE").Visible = False
            .Columns("CORE_COST").Visible = False
            .Columns("JOB_NUMBER").Visible = False
            .Columns("SOP_NUMBER").Visible = False
            .Columns("ARCH_MB_MASTERLIST_ID").Visible = False
            .Columns("LABOUR_COST").Visible = False
            .Columns("LABOUR_OVERHEAD_AMOUNT").Visible = False
            .Columns("LABOUR_TOTAL").Visible = False
            .Columns("MATERIALS_TOTAL").Visible = False
            .Columns("TOTAL_MB_ESTIMATE_COST").Visible = False
            .Columns("TOTAL_MB_ESTIMATE_COST").Alignment = dbgRight
            .Columns("TOTAL_TAX").Visible = False
        End With
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "FormatGridsMB", g_l_ErrorLineNumber
End Sub

Private Sub FormatGridsBUS()
    On Error GoTo Error_Handler
     
    If grdArchiveHistory.Columns.Count > 2 Then
        With grdArchiveHistory
            .Columns("MAKE").Visible = False
            .Columns("MODEL").Visible = False
            .Columns("YEAR").Visible = False
            .Columns("ENGINE").Visible = False
            .Columns("TRANSMISSION").Visible = False
            .Columns("DIFFERENTIAL").Visible = False
            .Columns("VEH_SERIES_CODE").Visible = False
            .Columns("NUM_OF_VEHICLES").Visible = False
            .Columns("DATE_ARCHIVED").Caption = "DATE ARCHIVED"
            .Columns("ARCHIVED_BY").Caption = "ARCHIVED BY"
            .Columns("TOTAL_COST_TAX").Caption = "TOTAL COST"
            .Columns("SOPNUMBER").Visible = False
            .Columns("PROJ_DESC").Caption = "PROJECT DESCRIPTION"
            .Columns("OEM_KITS_TOTAL").Visible = False
            .Columns("ARCH_VEHICLE_LIST_ID").Visible = False
            .Columns("LABOUR_COST").Visible = False
            .Columns("LABOUR_OVERHEAD_AMOUNT").Visible = False
            .Columns("LABOUR_TOTAL").Visible = False
            .Columns("OLD_ID").Visible = False
            .Columns("TOTAL_TAX").Visible = False
            .Columns("MATERIALS_TOTAL").Visible = False
            .Columns("TOTAL_BUS_ESTIMATE_COST").Visible = False
            .Columns("TOTAL_BUS_ESTIMATE_COST").Alignment = dbgRight
        End With
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "FormatGridsBUS", g_l_ErrorLineNumber
End Sub

'---------------------------------------------------------------------------------------
' Procedure : grdArchiveHistory_dblClick
' Purpose   : When the grid is double click load archived estimate that is selected by
'             the required data.
'---------------------------------------------------------------------------------------
'
Private Sub grdArchiveHistory_dblClick()
    On Error GoTo Error_Handler
     
    If cboEstimateType.Text = "Rebuilt Part Estimate" Then
         If grdArchiveHistory.Row >= 0 Then
             frmArchivedRBEstimateMain.m_str_EstimateNumberID = grdArchiveHistory.Columns("ARCH_RB_MASTERLIST_ID").Value
             frmArchivedRBEstimateMain.Show
         End If
    ElseIf cboEstimateType.Text = "Make Vs. Buy Estimate" Then
         If grdArchiveHistory.Row >= 0 Then
             frmArchivedMBEstimate.m_str_EstimateNumberID = grdArchiveHistory.Columns("ARCH_MB_MASTERLIST_ID").Value
             'frmArchivedMBEstimate.    m_str_LinkCode
             frmArchivedMBEstimate.Show
         End If
    ElseIf cboEstimateType.Text = "Vehicle Estimate" Then
         If grdArchiveHistory.Row >= 0 Then
             frmArchivedBUSEstimateMain.m_str_EstimateNumberID = grdArchiveHistory.Columns("ARCH_VEHICLE_LIST_ID").Value
             frmArchivedBUSEstimateMain.Show
         End If
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "FormatGrids", g_l_ErrorLineNumber
End Sub

Private Sub calDateFrom_Click()
    On Error GoTo Error_Handler
    
    txtDateFrom.Text = Format(calDateFrom.Value, "yyyy-mmm-dd")
    calDateFrom.Visible = False
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "calDateFrom_Click", g_l_ErrorLineNumber
End Sub

Private Sub calDateTo_Click()
    On Error GoTo Error_Handler
    
    txtDateTo.Text = Format(calDateTo.Value, "yyyy-mmm-dd")
    calDateTo.Visible = False
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "calDateTo_Click", g_l_ErrorLineNumber
End Sub

Private Sub chkAndDate_Click()
    On Error GoTo Error_Handler

    If chkAndDate.Value = 1 Then
        cmdDateFrom.Enabled = True
        cmdDateTo.Enabled = True
    Else
        cmdDateFrom.Enabled = False
        calDateFrom.Visible = False
        cmdDateTo.Enabled = False
        calDateTo.Visible = False
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "chkAndDate_Click", g_l_ErrorLineNumber
End Sub

Private Sub cmdDateFrom_Click()
    On Error GoTo Error_Handler
    calDateFrom.Today
    calDateTo.Visible = False
    calDateFrom.Visible = True
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdDateFrom_Click", g_l_ErrorLineNumber
End Sub

Private Sub cmdDateTo_Click()
    On Error GoTo Error_Handler
    calDateTo.Today
    calDateFrom.Visible = False
    calDateTo.Visible = True
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdDateTo_Click", g_l_ErrorLineNumber
End Sub
'---------------------------------------------------------------------------------------
' Module    : frmArchivedMBEstimateMain
' Purpose   : This form loads an archived Rebuilt Part Estimate.
'---------------------------------------------------------------------------------------
'
Option Explicit

Public m_str_EstimateNumberID As String

'---------------------------------------------------------------------------------------
' Procedure : cmdMaterialsList_Click
' Purpose   :
'---------------------------------------------------------------------------------------
'
Private Sub cmdMaterialsList_Click()
    On Error GoTo Error_Handler
    
    frmArchivedMBMaterials.m_str_EstimateNumberID = m_str_EstimateNumberID
    frmArchivedMBMaterials.Show
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
End Sub

'---------------------------------------------------------------------------------------
' Procedure : Form_Load
' Purpose   : Calls appropriate functions to populate the data on the form
'---------------------------------------------------------------------------------------
'
Private Sub Form_Load()
    On Error GoTo Error_Handler

    Call SetWaitCursor  'start hour glass
    Call Populate
    Call FormatColumns
    Call SetDefaultCursor 'End hour glass
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

'---------------------------------------------------------------------------------------
' Procedure : Populate
' Purpose   : Populates the form with the archived data of a
'             specified rebuilt part estimate that has been archived.
'---------------------------------------------------------------------------------------
'
Private Sub Populate()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    'Loads the employee labour table
    Set RS = modDBHelper.RetrieveArchMB("CES_ARCHIVE.GET_ARCH_MB_EMPLOYEE_LABOUR", _
                                              m_str_EstimateNumberID)
    If RS.RecordCount > 0 Then
        Set grdLabour.DataSource = RS
    Else
        Set grdLabour.DataSource = Nothing
    End If
    Set RS = Nothing
    
    'Loads the labour cost center totals table
    Set RS = modDBHelper.RetrieveArchMB("CES_ARCHIVE.GET_ARCH_MB_LABOUR_CC_TOTAL", _
                                        m_str_EstimateNumberID)
    If RS.RecordCount > 0 Then
        Set grdLabourCostCentreTotals.DataSource = RS
    Else
        Set grdLabourCostCentreTotals.DataSource = Nothing
    End If
    Set RS = Nothing
    Set RS = modDBHelper.RetrieveArchMB("CES_ARCHIVE.GET_ARCH_MB_MASTERLIST_BY_ID", _
                                        m_str_EstimateNumberID)
    
    'Load all text boxes stored in the database
    If RS.RecordCount > 0 Then
        txtRebuiltCode.Text = RS.Fields.Item("MB_NUMBER").Value
        txtKeyword(0).Text = RS.Fields.Item("KEYWORD")
        txtDescription.Text = RS.Fields.Item("DESCRIPTION")
        txtSOPNumber.Text = RS.Fields.Item("SOP_NUMBER")
        txtJobNumber.Text = RS.Fields.Item("JOB_NUMBER")
        txtMMSBuyCode.Text = RS.Fields.Item("BUY_CODE")
        txtCoreCode.Text = RS.Fields.Item("CORE_CODE")
        
        If Trim(RS.Fields.Item("CORE_CODE")) = "" Then
            txtCoreCost.Text = Format("0", "currency")
        Else
            txtCoreCost.Text = Format(RS.Fields.Item("CORE_COST"), "currency")
        End If
        
        txtDateArchived.Text = RS.Fields.Item("DATE_ARCHIVED")
        txtArchivedBy.Text = RS.Fields.Item("ARCHIVED_BY")
        txtLabourSubtotal.Text = Format(RS.Fields.Item("LABOUR_COST"), "currency")
        txtLabourOverheadAmount.Text = Format(RS.Fields.Item("LABOUR_OVERHEAD_AMOUNT"), "currency")
        txtLabourTotal.Text = Format(RS.Fields.Item("LABOUR_TOTAL"), "currency")
        txtMaterialTotal.Text = Format(RS.Fields.Item("MATERIALS_TOTAL"), "currency")
        txtTotalRebuiltPartCost.Text = Format(RS.Fields.Item("TOTAL_MB_ESTIMATE_COST"), "currency")
        txtTaxTotal.Text = Format(RS.Fields.Item("TOTAL_TAX"), "currency")
        txtTotalRebuiltPartCostWithTax.Text = Format(RS.Fields.Item("TOTAL_COST_TAX"), "currency")
    End If
    
    Set RS = Nothing
    Set RS = modDBHelper.RetrieveArchMB("CES_ARCHIVE.GET_ARCH_MB_MATERIALS_CC_TOTAL", _
                                        m_str_EstimateNumberID)
    If RS.RecordCount > 0 Then
        Set grdMaterialsCostCentreTotals.DataSource = RS
    Else
        Set grdMaterialsCostCentreTotals.DataSource = Nothing
    End If
    
    Set RS = Nothing
    
    Set RS = modDBHelper.RetrieveMBListOfBuses("CES_ARCHIVE.GET_ARCH_MB_LIST_BUSES", _
                                               m_str_EstimateNumberID)
    Set cboBusSeries.RowSource = RS
    cboBusSeries.ListField = "BUS_DESCRIPTION"
    Set RS = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Populate", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub FormatColumns()
    On Error GoTo Error_Handler
    
    If Not grdLabour.Row Then
        grdLabour.Columns("CC").Width = 500
        grdLabour.Columns("TASK").Width = 1600
        grdLabour.Columns("LABOUR TYPE").Width = 2120
        grdLabour.Columns("USAGE").Width = 620
        grdLabour.Columns("USAGE").Alignment = dbgRight
        grdLabour.Columns("TIME").Width = 600
        grdLabour.Columns("TIME").Alignment = dbgRight
        grdLabour.Columns("ACTUAL TIME").Width = 1250
        grdLabour.Columns("ACTUAL TIME").Alignment = dbgRight
    End If

    If grdLabourCostCentreTotals.Columns.Count > 2 Then
        With grdLabourCostCentreTotals
            .Columns("LABOUR DEFINITION").Width = 2680
            .Columns("WAGE GROUP").Alignment = dbgCenter
            .Columns("RATE PER HOUR").Alignment = dbgRight
            .Columns("RATE PER HOUR").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("TOTAL COST").Alignment = dbgRight
            .Columns("TOTAL COST").NumberFormat = "$#,##0.00;($#,##0.00)"
        End With
    End If
        
    If Not grdMaterialsCostCentreTotals.Row Then
        With grdMaterialsCostCentreTotals
            .Columns("COST CENTRE").Width = 600
            .Columns("TOTAL COST").Alignment = dbgRight
            .Columns("TOTAL COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("TOTAL COST").Width = 1525
        End With
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "FormatColumns", g_l_ErrorLineNumber
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    SetDefaultCursor
End Sub

Private Sub tbMenu_ButtonMenuClick(ByVal ButtonMenu As MSComctlLib.ButtonMenu)
    On Error GoTo Error_Handler

    Select Case ButtonMenu
        Case "Close"
            Unload Me
        Case "Print"
             ArchCostEstimateReport m_str_EstimateNumberID, "MB"
        Case "Materials List"
            frmArchivedMBMaterials.m_str_EstimateNumberID = m_str_EstimateNumberID
            frmArchivedMBMaterials.Show
        Case "Make vs. Buy Information"
            frmMakeBuy.m_str_ArchiveID = m_str_EstimateNumberID
            frmMakeBuy.Show vbModal
            'frmMakeBuy.m_str_MBNumber = m_str_LinkCode
           
    End Select
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "tbMenu_ButtonMenuClick", g_l_ErrorLineNumber
    SetDefaultCursor
End Sub

'---------------------------------------------------------------------------------------
' Module    : frmArchivedMBMaterials
' Purpose   : Displays the material list of an archived rebuilt part.
'---------------------------------------------------------------------------------------
'

Option Explicit
Private m_l_Result As Long
Private m_l_RetVal As Long


Public m_str_EstimateNumberID As String

'---------------------------------------------------------------------------------------
' Procedure : Form_Load
' Purpose   :
'---------------------------------------------------------------------------------------
'

Private Sub Form_Load()
    On Error GoTo Error_Handler

    Call SetWaitCursor  'start hour glass
    Call Populate
    Call SetDefaultCursor 'End hour glass
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

'---------------------------------------------------------------------------------------
' Procedure : Populate
' Purpose   : Populates the form with the archived data of a
'             specified rebuilt part estimate that has been archived.
'---------------------------------------------------------------------------------------
'
Private Sub Populate()
    Dim RS As ADODB.Recordset
    Dim cur_RBCoreCostTotal As Currency
    Dim cur_SCPCoreCostTotal As Currency
    Dim cur_NSPCoreCostTotal As Currency
    Dim cur_CoreCostTotal As Currency
    
    On Error GoTo Error_Handler
    
    txtRebuiltCode.Text = m_str_EstimateNumberID
    'Loads the employee labour table
    Set RS = modDBHelper.RetrieveArchMB("CES_ARCHIVE.GET_ARCH_MB_RB_PARTS_USED", _
                                        m_str_EstimateNumberID)
    If RS.RecordCount > 0 Then
        Set grdRebuiltPartsList.DataSource = RS
        cur_RBCoreCostTotal = Format(ColumnTotals(RS, "corecost"), "currency")
        RS.MoveFirst
        txtRebuiltPartsTotal.Text = Format(ColumnTotals(RS, "total_cost"), "currency")
    Else
        Set grdRebuiltPartsList.DataSource = Nothing
        cur_RBCoreCostTotal = Format(0#, "currency")
        txtRebuiltPartsTotal.Text = Format(0#, "currency")
    End If
       
    Set RS = Nothing
    
    'Loads the labour cost center totals table
    Set RS = modDBHelper.RetrieveArchMB("CES_ARCHIVE.GET_ARCH_MB_SC_PARTS_USED", _
                                              m_str_EstimateNumberID)
    If RS.RecordCount > 0 Then
        Set grdStockCodedPartsList.DataSource = RS
        cur_SCPCoreCostTotal = Format( _
                                    ColumnTotals(RS, "corecost"), "currency")
        RS.MoveFirst
        txtStockCodedPartsTotal.Text = Format( _
                                    ColumnTotals(RS, "total_cost"), "currency")
    Else
        Set grdStockCodedPartsList.DataSource = Nothing
        cur_SCPCoreCostTotal = Format(0#, "currency")
        txtStockCodedPartsTotal.Text = Format(0#, "currency")
    End If
    
    Set RS = Nothing
    Set RS = modDBHelper.RetrieveArchMB("CES_ARCHIVE.GET_ARCH_MB_NSC_PARTS_USED", _
                                              m_str_EstimateNumberID)
    If RS.RecordCount > 0 Then
        Set grdNonStockCodedPartsList.DataSource = RS
        cur_NSPCoreCostTotal = Format(ColumnTotals(RS, "Core Cost"), "currency")
        RS.MoveFirst
        txtNonStockCodedPartsTotal.Text = Format(ColumnTotals(RS, "Total Cost"), "currency")
    Else
        Set grdNonStockCodedPartsList.DataSource = Nothing
        cur_NSPCoreCostTotal = Format(0#, "currency")
        txtNonStockCodedPartsTotal.Text = Format(0#, "currency")
    End If
    
    Set RS = Nothing
    cur_CoreCostTotal = cur_RBCoreCostTotal + cur_SCPCoreCostTotal + cur_NSPCoreCostTotal
        
        'Calculate the materials total
    txtCoreCostTotal.Text = Format((cur_CoreCostTotal * -1), "currency")
    txtTotalMaterialsCost.Text = Format( _
                        CCur(txtRebuiltPartsTotal.Text) + _
                        CCur(txtNonStockCodedPartsTotal.Text) + _
                        CCur(txtStockCodedPartsTotal.Text) - cur_CoreCostTotal, "currency")
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Populate", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub
'---------------------------------------------------------------------------------------
' Module    : frmArchivedRBEstimateMain
' Purpose   : This form loads an archived Rebuilt Part Estimate.
'---------------------------------------------------------------------------------------
'
Option Explicit

Private m_l_Result As Long
Private m_l_RetVal As Long

Public m_str_EstimateNumberID As String


'---------------------------------------------------------------------------------------
' Procedure : Form_Load
' Purpose   : Calls appropriate functions to populate the data on the form
'---------------------------------------------------------------------------------------
'
Private Sub Form_Load()
    On Error GoTo Error_Handler

    Call SetWaitCursor  'start hour glass
    Call Populate
    Call FormatColumns
    Call SetDefaultCursor 'End hour glass

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

'---------------------------------------------------------------------------------------
' Procedure : Populate
' Purpose   : Populates the form with the archived data of a
'             specified rebuilt part estimate that has been archived.
'---------------------------------------------------------------------------------------
'
Private Sub Populate()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    'Loads the employee labour table
    Set RS = modDBHelper.RetrieveArchRB("CES_ARCHIVE.GET_ARCH_RB_EMPLOYEE_LABOUR", _
                                        m_str_EstimateNumberID)
    If RS.RecordCount > 0 Then
        Set grdLabour.DataSource = RS
    Else
        Set grdLabour.DataSource = Nothing
    End If
    Set RS = Nothing
    
    'Loads the labour cost center totals table
    Set RS = modDBHelper.RetrieveArchRB("CES_ARCHIVE.GET_ARCH_RB_LABOUR_CC_TOTAL", _
                                        m_str_EstimateNumberID)
    If RS.RecordCount > 0 Then
        Set grdLabourCostCentreTotals.DataSource = RS
    Else
        Set grdLabourCostCentreTotals.DataSource = Nothing
    End If
    Set RS = Nothing
    Set RS = modDBHelper.RetrieveArchRB("CES_ARCHIVE.GET_ARCH_RB_MASTERLIST_BY_ID", _
                                        m_str_EstimateNumberID)
    
    'Load all text boxes stored in the database
    If RS.RecordCount > 0 Then
        txtRebuiltCode.Text = RS.Fields.Item("REBUILT_STOCK_NUM").Value
        txtKeyword(0).Text = RS.Fields.Item("KEYWORD")
        txtDescription.Text = RS.Fields.Item("DETAILED_DESC")
        txtSOPNumber.Text = RS.Fields.Item("SOP_NUMBER")
        txtJobNumber.Text = RS.Fields.Item("JOB_NUMBER")
        txtMMSBuyCode.Text = RS.Fields.Item("MMS_STOCK_CODE")
        txtCoreCode.Text = RS.Fields.Item("CORE_PART_NUM")
        
        If Trim(RS.Fields.Item("CORE_CHARGE")) = "" Then
            txtCoreCost.Text = Format("0", "currency")
        Else
            txtCoreCost.Text = Format(RS.Fields.Item("CORE_CHARGE"), "currency")
        End If
        
        txtDateArchived.Text = RS.Fields.Item("DATE_ARCHIVED")
        txtArchivedBy.Text = RS.Fields.Item("ARCHIVED_BY")
        txtLabourSubtotal.Text = Format(RS.Fields.Item("LABOUR_COST"), "currency")
        txtLabourOverheadAmount.Text = Format(RS.Fields.Item("LABOUR_OVERHEAD_AMOUNT"), "currency")
        txtLabourTotal.Text = Format(RS.Fields.Item("LABOUR_TOTAL"), "currency")
        txtMaterialTotal.Text = Format(RS.Fields.Item("MATERIALS_TOTAL"), "currency")
        txtTotalRebuiltPartCost.Text = Format(RS.Fields.Item("TOTAL_REBUILT_PART_COST"), "currency")
        txtTaxTotal.Text = Format(RS.Fields.Item("TAX_TOTAL"), "currency")
        txtTotalRebuiltPartCostWithTax.Text = Format(RS.Fields.Item("TOTAL_COST_TAX"), "currency")
    End If
    
    Set RS = Nothing
    Set RS = modDBHelper.RetrieveArchRB("CES_ARCHIVE.GET_ARCH_RB_MATERIALS_CC_TOTAL", _
                                        m_str_EstimateNumberID)
    If RS.RecordCount > 0 Then
        Set grdMaterialsCostCentreTotals.DataSource = RS
    Else
        Set grdMaterialsCostCentreTotals.DataSource = Nothing
    End If
    
    Set RS = Nothing
    
    Set RS = modDBHelper.RetrieveRBListOfBuses("CES_ARCHIVE.GET_ARCH_RB_LIST_BUSES", _
                                               m_str_EstimateNumberID)
    Set cboBusSeries.RowSource = RS
    cboBusSeries.ListField = "BUS_DESCRIPTION"
    Set RS = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Populate", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub FormatColumns()
    On Error GoTo Error_Handler
    
    If Not grdLabour.Row Then
        grdLabour.Columns("CC").Width = 500
        grdLabour.Columns("TASK").Width = 1600
        grdLabour.Columns("LABOUR TYPE").Width = 2120
        grdLabour.Columns("USAGE").Width = 620
        grdLabour.Columns("USAGE").Alignment = dbgRight
        grdLabour.Columns("TIME").Width = 600
        grdLabour.Columns("TIME").Alignment = dbgRight
        grdLabour.Columns("ACTUAL TIME").Width = 1250
        grdLabour.Columns("ACTUAL TIME").Alignment = dbgRight
    End If

    If grdLabourCostCentreTotals.Columns.Count > 2 Then
        With grdLabourCostCentreTotals
            .Columns("COST CENTRE").Width = 600
            .Columns("TOTAL COST").Alignment = dbgRight
            .Columns("TOTAL COST").NumberFormat = "$#,##0.00;($#,##0.00)"

        End With
    End If
        
    If Not grdMaterialsCostCentreTotals.Row Then
        With grdMaterialsCostCentreTotals
            .Columns("COST CENTRE").Width = 600
            .Columns("TOTAL COST").Alignment = dbgRight
            .Columns("TOTAL COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("TOTAL COST").Width = 1525
        End With
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "FormatColumns", g_l_ErrorLineNumber
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub tbMenu_ButtonMenuClick(ByVal ButtonMenu As MSComctlLib.ButtonMenu)
   On Error GoTo Error_Handler

    Select Case ButtonMenu
        Case "Close"
            Unload Me
        Case "Print"
            ArchCostEstimateReport m_str_EstimateNumberID, "RB"

        Case "Materials List"

            frmArchivedRBMaterials.m_str_EstimateNumberID = m_str_EstimateNumberID
            frmArchivedRBMaterials.Show

    End Select
    Exit Sub

Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "tbMenu_ButtonMenuClick", g_l_ErrorLineNumber
    SetDefaultCursor
End Sub

'---------------------------------------------------------------------------------------
' Module    : frmArchivedRBMaterials
' Purpose   : Displays the material list of an archived rebuilt part.
'---------------------------------------------------------------------------------------
'
Option Explicit
Private m_l_Result As Long
Private m_l_RetVal As Long

Public m_str_EstimateNumberID As String

'---------------------------------------------------------------------------------------
' Procedure : Form_Load
' Purpose   :
'---------------------------------------------------------------------------------------
'
Private Sub Form_Load()
    On Error GoTo Error_Handler

    Call SetWaitCursor
    Call Populate
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

'---------------------------------------------------------------------------------------
' Procedure : Populate
' Purpose   : Populates the form with the archived data of a
'             specified rebuilt part estimate that has been archived.
'---------------------------------------------------------------------------------------
'
Private Sub Populate()
    Dim RS As ADODB.Recordset
    Dim cur_RBCoreCostTotal As Currency
    Dim cur_SCPCoreCostTotal As Currency
    Dim cur_NSPCoreCostTotal As Currency
    Dim cur_CoreCostTotal As Currency
    
    On Error GoTo Error_Handler
    
    txtRebuiltCode.Text = m_str_EstimateNumberID
    'Loads the employee labour table
    Set RS = modDBHelper.RetrieveArchRB("CES_ARCHIVE.GET_ARCH_RB_RB_PARTS_USED", _
                                        m_str_EstimateNumberID)
    If RS.RecordCount > 0 Then
        Set grdRebuiltPartsList.DataSource = RS
        cur_RBCoreCostTotal = Format(ColumnTotals(RS, "corecost"), "currency")
        RS.MoveFirst
        txtRebuiltPartsTotal.Text = Format(ColumnTotals(RS, "total_cost"), "currency")
    Else
        Set grdRebuiltPartsList.DataSource = Nothing
        cur_RBCoreCostTotal = Format(0#, "currency")
        txtRebuiltPartsTotal.Text = Format(0#, "currency")
    End If
       
    Set RS = Nothing
    
    'Loads the labour cost center totals table
    Set RS = modDBHelper.RetrieveArchRB("CES_ARCHIVE.GET_ARCH_RB_SC_PARTS_USED", _
                                        m_str_EstimateNumberID)
    If RS.RecordCount > 0 Then
        Set grdStockCodedPartsList.DataSource = RS
        cur_SCPCoreCostTotal = Format( _
                                    ColumnTotals(RS, "corecost"), "currency")
        
        RS.MoveFirst
        txtStockCodedPartsTotal.Text = Format( _
                                    ColumnTotals(RS, "total_cost"), "currency")
    Else
        Set grdStockCodedPartsList.DataSource = Nothing
        cur_SCPCoreCostTotal = Format(0#, "currency")
        txtStockCodedPartsTotal.Text = Format(0#, "currency")
    End If
    
    Set RS = Nothing
    Set RS = modDBHelper.RetrieveArchRB("CES_ARCHIVE.GET_ARCH_RB_NSC_PARTS_USED", _
                                        m_str_EstimateNumberID)
    If RS.RecordCount > 0 Then
        Set grdNonStockCodedPartsList.DataSource = RS
        cur_NSPCoreCostTotal = Format(ColumnTotals(RS, "corecost"), "currency")
        RS.MoveFirst
        txtNonStockCodedPartsTotal.Text = Format(ColumnTotals(RS, "total_cost"), "currency")
    Else
        Set grdNonStockCodedPartsList.DataSource = Nothing
        cur_NSPCoreCostTotal = Format(0#, "currency")
        txtNonStockCodedPartsTotal.Text = Format(0#, "currency")
    End If
    
    Set RS = Nothing
    cur_CoreCostTotal = cur_RBCoreCostTotal + cur_SCPCoreCostTotal + cur_NSPCoreCostTotal
        
        'Calculate the materials total
    txtCoreCostTotal.Text = Format((cur_CoreCostTotal * -1), "currency")
    txtTotalMaterialsCost.Text = Format( _
                        CCur(txtRebuiltPartsTotal.Text) + _
                        CCur(txtNonStockCodedPartsTotal.Text) + _
                        CCur(txtStockCodedPartsTotal.Text) - cur_CoreCostTotal, "currency")
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Populate", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler

    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Option Explicit

Private m_str_Msg As String
Public m_str_LinkNumber As String
Public m_l_VehicleListID As Long

' Holds the previous search string
Private m_str_PreviousSearch As String
Private m_str_PreviousSearchType As String
Private m_var_RowSelected As Variant

Private Sub UserPermissions()
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Then
        'Edit-box txtPart is disabled.
        txtPart.Enabled = False
        'Button <Add Part> is invisible.
        cmdAddPart.Visible = False
        'Controls at the bottom of the form are invisible.
        lblRebuiltPartsTotal.Visible = False
        lblStockCodedPartsTotal.Visible = False
        lblNonStockCodedPartsTotal.Visible = False
        lblCoreCostTotal.Visible = False
        lblTotalMaterialsCost.Visible = False
        txtRebuiltPartsTotal.Visible = False
        txtStockCodedPartsTotal.Visible = False
        txtNonStockCodedPartsTotal.Visible = False
        txtCoreCostTotal.Visible = False
        txtTotalMaterialsCost.Visible = False
        If grdRebuiltPartsList.Columns.Count > 2 Then
            'Grid "Rebuilt Parts List". Columns "UNIT_COST", "TOTAL_COST"
            'are invisible.
            grdRebuiltPartsList.Columns("UNIT COST").Visible = False
            grdRebuiltPartsList.Columns("TOTAL COST").Visible = False
        End If
        If grdStockCodedPartsList.Columns.Count > 2 Then
            'Grid "Stock Coded Parts List". Columns "UNIT_COST", "CORE_COST", "TOTAL_COST"
            'are invisible.
            grdStockCodedPartsList.Columns("UNIT COST").Visible = False
            grdStockCodedPartsList.Columns("CORE COST").Visible = False
            grdStockCodedPartsList.Columns("TOTAL COST").Visible = False
        End If
        If grdNonStockCodedPartsList.Columns.Count > 2 Then
            'Grid "Non-Stock Coded Parts List". Columns "COST", "CORE_COST", "TOTAL_COST"
            'are invisible.
            grdNonStockCodedPartsList.Columns("UNIT COST").Visible = False
            grdNonStockCodedPartsList.Columns("CORE COST").Visible = False
            grdNonStockCodedPartsList.Columns("TOTAL COST").Visible = False
        End If
    ElseIf g_l_AccessLevel = 2 Then
        'Button <Add Part> is invisible.
        cmdAddPart.Visible = False
        'Rest controls, except grids are disabled.
        txtPart.Enabled = False
        txtRebuiltPartsTotal.Enabled = False
        txtStockCodedPartsTotal.Enabled = False
        txtNonStockCodedPartsTotal.Enabled = False
        txtCoreCostTotal.Enabled = False
        txtTotalMaterialsCost.Enabled = False
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "UserPermissions", g_l_ErrorLineNumber
End Sub

Private Sub Populate()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    'Populate and format the data grids
    Call PopulateGrids
    Call FormatGrids
    Call UserPermissions
    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Populate", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub cmdAddPart_Click()
    On Error GoTo Error_Handler
    
    If frmTypeOfPart.WindowState = 1 Or frmTypeOfPart.WindowState = 2 Then
        frmTypeOfPart.WindowState = 0
    End If
    Dim formshow As New frmTypeOfPart
    formshow.m_str_LinkNumber = m_str_LinkNumber
    formshow.m_str_AuditReference = CStr(m_l_VehicleListID)
    formshow.m_str_FormType = "Bus"
    formshow.Show vbModal
    'Call frmVehCostEstimateMain.RefreshForm
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdAddPart_Click", g_l_ErrorLineNumber
End Sub

Public Sub PassValues(ByVal str_LinkNumber As String)
    On Error GoTo Error_Handler
    
    m_str_LinkNumber = str_LinkNumber
    
    Call SetWaitCursor
    Call Populate
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PassValues", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub cmdRefresh_Click()
    On Error GoTo Error_Handler
        Call frmVehCostEstimateMain.RefreshForm
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdRefresh_click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler

    Call SetDefaultCursor
    'Keep the form open until the Vehicle Part Form Closes
    If UnloadMode = 0 Then
        Cancel = True
        Me.Hide
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub PopulateGrids()
    Dim RS As ADODB.Recordset
    Dim SCPCoreCostTotal As Currency
    Dim NSPCoreCostTotal As Currency
    Dim CoreCostTotal As Currency
        
    On Error GoTo Error_Handler
        
    Set RS = New ADODB.Recordset
    
    'Populate the non-stock coded items
    Set RS = modDBHelper.RetrieveNSCPUsed("CES_INQUIRY.RETRIEVE_NSCP_USED", _
                                          m_str_LinkNumber, _
                                          "BUS")
    
    If RS.RecordCount > 0 Then
        Set grdNonStockCodedPartsList.DataSource = RS
        NSPCoreCostTotal = Format(ColumnTotals(RS, "core cost"), "currency")
        RS.MoveFirst
        txtNonStockCodedPartsTotal.Text = Format(ColumnTotals(RS, "total cost"), "currency")
    Else
        Set grdNonStockCodedPartsList.DataSource = Nothing
        NSPCoreCostTotal = Format(0#, "currency")
        txtNonStockCodedPartsTotal.Text = Format(0#, "currency")
    End If
        
    'Populate the stock coded items
    Set RS = modDBHelper.RetrieveSCPUsed("CES_INQUIRY.RETRIEVE_SCP_USED", _
                                         m_str_LinkNumber, _
                                         "N", _
                                         "BUS")
    If RS.RecordCount > 0 Then
        Set grdStockCodedPartsList.DataSource = RS
        SCPCoreCostTotal = Format( _
                                    ColumnTotals(RS, "core cost"), "currency")
        
        RS.MoveFirst
        txtStockCodedPartsTotal.Text = Format( _
                                    ColumnTotals(RS, "total cost"), "currency")
    Else
        Set grdStockCodedPartsList.DataSource = Nothing
        SCPCoreCostTotal = Format(0#, "currency")
        txtStockCodedPartsTotal.Text = Format(0#, "currency")
    End If
    'Populate the rebuilt items
    Set RS = modDBHelper.RetrieveRBPUsed("CES_INQUIRY.RETRIEVE_RBP_USED", _
                                         m_str_LinkNumber, _
                                         "BUS")
    
    If RS.RecordCount > 0 Then
        Set grdRebuiltPartsList.DataSource = RS
        RS.MoveFirst
        txtRebuiltPartsTotal.Text = Format(ColumnTotals(RS, "total cost"), "currency")
    Else
        Set grdRebuiltPartsList.DataSource = Nothing
        txtRebuiltPartsTotal.Text = Format(0#, "currency")
    End If
    
    CoreCostTotal = SCPCoreCostTotal + NSPCoreCostTotal
    
    'Calculate the materials total
    txtCoreCostTotal.Text = Format((CoreCostTotal * -1), "currency")
    txtTotalMaterialsCost.Text = Format( _
                                CCur(txtRebuiltPartsTotal.Text) + _
                                CCur(txtNonStockCodedPartsTotal.Text) + _
                                CCur(txtStockCodedPartsTotal.Text) - CoreCostTotal, "currency")
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateGrids", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub FormatGrids()
    On Error GoTo Error_Handler
     
    If grdNonStockCodedPartsList.Columns.Count > 2 Then
        With grdNonStockCodedPartsList
            .Columns("SUPPLIER NUMBER").Width = 1900
            .Columns("SUPPLIER NAME").Width = 1700
            .Columns("CC").Width = 500
            .Columns("QTY").Alignment = dbgRight
            .Columns("QTY").Width = 500
            .Columns("%").Alignment = dbgRight
            .Columns("%").Width = 500
            .Columns("UNIT COST").Alignment = dbgRight
            .Columns("UNIT COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("UNIT COST").Width = 1200
            .Columns("CORE COST").Alignment = dbgRight
            .Columns("CORE COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("CORE COST").Width = 1200
            .Columns("TOTAL COST").Alignment = dbgRight
            .Columns("TOTAL COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("TOTAL COST").Width = 1200
            .Columns("DESCRIPTION").Width = 4000
            .Columns("LAST MODIFIED DATE").Alignment = dbgRight
            .Columns("LAST MODIFIED DATE").Width = 2400
            .Columns("LAST MODIFIED DATE").NumberFormat = "yyyy-mmm-dd hh:mm:ss AMPM"
            .Columns("ID").Visible = False
            .Columns("ROWID").Visible = False
        End With
    End If
    
    If grdStockCodedPartsList.Columns.Count > 2 Then
        With grdStockCodedPartsList
            .Columns("UNIT COST").Alignment = dbgRight
            .Columns("UNIT COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("UNIT COST").Width = 1100
            .Columns("CC").Width = 500
            .Columns("QTY").Alignment = dbgRight
            .Columns("QTY").Width = 500
            .Columns("%").Alignment = dbgRight
            .Columns("%").Width = 500
            .Columns("CORE COST").Alignment = dbgRight
            .Columns("CORE COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("CORE COST").Width = 1200
            .Columns("TOTAL COST").Alignment = dbgRight
            .Columns("TOTAL COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("TOTAL COST").Width = 1200
            .Columns("DESCRIPTION").Width = 4000
            .Columns("DESCRIPTION").Caption = "DESCRIPTION"
            .Columns("OEM COST").Visible = False
            .Columns("MMS REBUILT CODE").Visible = False
            .Columns("REBUILT PART COST").Visible = False
            .Columns("REBUILT PART").Visible = False
            .Columns("ROWID").Visible = False
        End With
    End If
    
    If grdRebuiltPartsList.Columns.Count > 2 Then
        With grdRebuiltPartsList
            .Columns("UNIT COST").Alignment = dbgRight
            .Columns("UNIT COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("UNIT COST").Width = 1200
            .Columns("CC").Visible = False
            .Columns("QTY").Alignment = dbgRight
            .Columns("QTY").Width = 500
            .Columns("%").Alignment = dbgRight
            .Columns("%").Width = 500
            .Columns("CORE COST").Visible = False
            .Columns("TOTAL COST").Alignment = dbgRight
            .Columns("TOTAL COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("TOTAL COST").Width = 1200
            .Columns("DESCRIPTION").Width = 4000
            .Columns("ROWID").Visible = False
        End With
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "FormatGrids", g_l_ErrorLineNumber
End Sub

Private Sub grdNonStockCodedPartsList_DblClick()
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not go further, just exit sub.
        Exit Sub
    End If
    
    'Update the non stock coded part
    If grdNonStockCodedPartsList.Row >= 0 Then
          m_var_RowSelected = grdNonStockCodedPartsList.Bookmark
        Dim formshow As New frmAddNSCPToEstimate
        formshow.m_str_LinkNumber = m_str_LinkNumber
        formshow.Caption = "Edit a Non-Stock Coded Part in the Bus Estimate"
        formshow.m_str_AuditReference = CStr(m_l_VehicleListID)
        formshow.m_str_TypeCode = "BUS"
        formshow.PassValues grdNonStockCodedPartsList.Columns("SUPPLIER NUMBER").Value, _
                            grdNonStockCodedPartsList.Columns("SUPPLIER NAME").Value, _
                            grdNonStockCodedPartsList.Columns("CC").Value, _
                            grdNonStockCodedPartsList.Columns("%").Value, _
                            grdNonStockCodedPartsList.Columns("QTY").Value, _
                            grdNonStockCodedPartsList.Columns("ROWID").Value, _
                            grdNonStockCodedPartsList.Columns("CORE COST").Value
        formshow.Show vbModal
        Call frmVehCostEstimateMain.RefreshForm
          grdNonStockCodedPartsList.Bookmark = m_var_RowSelected
    End If
        
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdNonStockCodedPartsList_DblClick", g_l_ErrorLineNumber
End Sub

Private Sub grdNonStockCodedPartsList_KeyDown(KeyCode As Integer, Shift As Integer)
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_PartID As String
    
    On Error GoTo Error_Handler

    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not go further, just exit sub.
        Exit Sub
    End If
    
    If KeyCode = vbKeyDelete And grdNonStockCodedPartsList.Row >= 0 Then
        m_str_Msg = "Are you sure you want to delete this item?"
        l_Result = MsgBox(m_str_Msg, vbOKCancel Or vbQuestion, _
                          "Delete Materials of this Vehicle Estimate")
        If l_Result = vbOK Then
            str_PartID = grdNonStockCodedPartsList.Columns("ROWID").Text
            l_Result = modDBHelper.DeleteNSCPUsed("CES_DELETE.DELETE_NSCP_USED", _
                                                  l_RetVal, _
                                                  str_PartID)
            'Insert record into the AUDIT_MODIFY_HISTORY table.
            l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                    "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                    l_RetVal, _
                    "Delete Non-Stock Coded Part", _
                    CStr(m_l_VehicleListID), _
                    "BUS", _
                    "SUPPLIER NUMBER ---> " + grdNonStockCodedPartsList.Columns("SUPPLIER NUMBER").Text, _
                    "SUPPLIER NAME ---> " + grdNonStockCodedPartsList.Columns("SUPPLIER NAME").Text, _
                    "CC ---> " + grdNonStockCodedPartsList.Columns("CC").Text, _
                    "QTY ---> " + grdNonStockCodedPartsList.Columns("QTY").Text, _
                    "% ---> " + grdNonStockCodedPartsList.Columns("%").Text, _
                    "UNIT COST ---> " + grdNonStockCodedPartsList.Columns("UNIT COST").Text, _
                    "CORE COST ---> " + grdNonStockCodedPartsList.Columns("CORE COST").Text, _
                    "TOTAL COST ---> " + grdNonStockCodedPartsList.Columns("TOTAL COST").Text, _
                    "DESCRIPTION ---> " + grdNonStockCodedPartsList.Columns("DESCRIPTION").Text, _
                    "KEYWORD ---> " + grdNonStockCodedPartsList.Columns("KEYWORD").Text, _
                    "LAST MODIFIED DATE ---> " + grdNonStockCodedPartsList.Columns("LAST MODIFIED DATE").Text)
            Call frmVehCostEstimateMain.RefreshForm
        End If
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdNonStockCodedPartsList_KeyDown", g_l_ErrorLineNumber
End Sub

Private Sub grdStockCodedPartsList_DblClick()
    On Error GoTo Error_Handler

    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not go further, just exit sub.
        Exit Sub
    End If
    
    'Update the stock coded part
    If grdStockCodedPartsList.Row >= 0 Then
          m_var_RowSelected = grdStockCodedPartsList.Bookmark
        Dim formshow As New frmAddSCPToEstimate
        formshow.Caption = "Edit a Stock Coded Part in the Bus Estimate"
        formshow.m_str_AuditReference = CStr(m_l_VehicleListID)
        formshow.m_str_TypeCode = "BUS"
        formshow.m_str_MBNumber = m_str_LinkNumber
        formshow.PassValues grdStockCodedPartsList.Columns("STOCK CODE").Value, _
                            grdStockCodedPartsList.Columns("CC").Value, _
                            grdStockCodedPartsList.Columns("%").Value, _
                            grdStockCodedPartsList.Columns("QTY").Value, _
                            grdStockCodedPartsList.Columns("ROWID").Value, _
                            grdStockCodedPartsList.Columns("CORE COST").Value
        formshow.Show vbModal
        Call frmVehCostEstimateMain.RefreshForm
          grdStockCodedPartsList.Bookmark = m_var_RowSelected
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdStockCodedPartsList_DblClick", g_l_ErrorLineNumber
End Sub

Private Sub grdStockCodedPartsList_KeyDown(KeyCode As Integer, Shift As Integer)
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_PartID As String
    
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not go further, just exit sub.
        Exit Sub
    End If
    
    If KeyCode = vbKeyDelete And grdStockCodedPartsList.Row >= 0 Then
        m_str_Msg = "Are you sure you want to delete this item?"
        l_Result = MsgBox(m_str_Msg, vbOKCancel Or vbQuestion, _
                          "Delete Materials of Vehicle Estimate")
        If l_Result = vbOK Then
            str_PartID = grdStockCodedPartsList.Columns("ROWID").Text
            l_Result = modDBHelper.DeleteSCPUsed("CES_DELETE.DELETE_SCP_USED", _
                                                 l_RetVal, _
                                                 str_PartID)
            'Insert record into the AUDIT_MODIFY_HISTORY table.
            l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                    "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                    l_RetVal, _
                    "Delete Stock Coded Part", _
                    CStr(m_l_VehicleListID), _
                    "BUS", _
                    "STOCK CODE ---> " + grdStockCodedPartsList.Columns("STOCK CODE").Text, _
                    "UNIT COST ---> " + grdStockCodedPartsList.Columns("UNIT COST").Text, _
                    "CC ---> " + grdStockCodedPartsList.Columns("CC").Text, _
                    "QTY ---> " + grdStockCodedPartsList.Columns("QTY").Text, _
                    "% ---> " + grdStockCodedPartsList.Columns("%").Text, _
                    "CORE COST ---> " + grdStockCodedPartsList.Columns("CORE COST").Text, _
                    "TOTAL COST ---> " + grdStockCodedPartsList.Columns("TOTAL COST").Text, _
                    "DESCRIPTION ---> " + grdStockCodedPartsList.Columns("DESCRIPTION").Text, _
                    "KEYWORD ---> " + grdStockCodedPartsList.Columns("KEYWORD").Text)
            Call frmVehCostEstimateMain.RefreshForm
        End If
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdStockCodedPartsList_KeyDown", g_l_ErrorLineNumber
End Sub

Private Sub grdRebuiltPartsList_DblClick()
    On Error GoTo Error_Handler

    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not go further, just exit sub.
        Exit Sub
    End If
    
    'Update the stock coded part
    If grdRebuiltPartsList.Row >= 0 Then
          m_var_RowSelected = grdRebuiltPartsList.Bookmark
        Dim formshow As New frmAddRBPToEstimate
        formshow.Caption = "Edit a Rebuilt Part in the Bus Estimate"
        formshow.m_str_TypeCode = "BUS"
        formshow.m_str_AuditReference = CStr(m_l_VehicleListID)
        formshow.m_str_LinkNumber = m_str_LinkNumber
        formshow.PassValues grdRebuiltPartsList.Columns("REBUILT NUMBER").Value, _
                            grdRebuiltPartsList.Columns("%").Value, _
                            grdRebuiltPartsList.Columns("QTY").Value, _
                            grdRebuiltPartsList.Columns("ROWID").Value
        formshow.Show vbModal
        Call frmVehCostEstimateMain.RefreshForm
          grdRebuiltPartsList.Bookmark = m_var_RowSelected
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdRebuiltPartsList_DblClick", g_l_ErrorLineNumber
End Sub

Private Sub grdRebuiltPartsList_KeyDown(KeyCode As Integer, Shift As Integer)
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_PartID As String
    
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not go further, just exit sub.
        Exit Sub
    End If
    
    If KeyCode = vbKeyDelete And grdRebuiltPartsList.Row >= 0 Then
        m_str_Msg = "Are you sure you want to delete this item?"
        l_Result = MsgBox(m_str_Msg, vbOKCancel Or vbQuestion, _
                          "Delete Materials of Vehicle Estimate")
        If l_Result = vbOK Then
            str_PartID = grdRebuiltPartsList.Columns("ROWID").Text
            l_Result = modDBHelper.DeleteSCPUsed("CES_DELETE.DELETE_SCP_USED", _
                                                 l_RetVal, _
                                                 str_PartID)
            'Insert record into the AUDIT_MODIFY_HISTORY table.
            l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                    "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                    l_RetVal, _
                    "Delete Rebuilt Part", _
                    CStr(m_l_VehicleListID), _
                    "BUS", _
                    "UNIT COST ---> " + grdRebuiltPartsList.Columns("UNIT COST").Text, _
                    "REBUILT NUMBER ---> " + grdRebuiltPartsList.Columns("REBUILT NUMBER").Text, _
                    "CC ---> " + grdRebuiltPartsList.Columns("CC").Text, _
                    "QTY ---> " + grdRebuiltPartsList.Columns("QTY").Text, _
                    "% ---> " + grdRebuiltPartsList.Columns("%").Text, _
                    "TOTAL COST ---> " + grdRebuiltPartsList.Columns("TOTAL COST").Text, _
                    "DESCRIPTION ---> " + grdRebuiltPartsList.Columns("DESCRIPTION").Text, _
                    "KEYWORD ---> " + grdRebuiltPartsList.Columns("KEYWORD").Text)
            Call frmVehCostEstimateMain.RefreshForm
        End If
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdRebuiltPartsList_KeyDown", g_l_ErrorLineNumber
End Sub

Private Sub optNSCPart_Click()
    On Error GoTo Error_Handler
    
    Call ChangeSearchLabel
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "optNSCPart_Click", g_l_ErrorLineNumber
End Sub

Private Sub optRBPart_Click()
    On Error GoTo Error_Handler
    
    Call ChangeSearchLabel
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "optRBPart_Click", g_l_ErrorLineNumber
End Sub

Private Sub optSCPart_Click()
    On Error GoTo Error_Handler
    
    Call ChangeSearchLabel
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "optSCPart_Click", g_l_ErrorLineNumber
End Sub

Private Sub ChangeSearchLabel()
    On Error GoTo Error_Handler
    
    ' As the type to part to search by is changed, we must change
    ' the label to reflect this
    If optRBPart.Value = True Then
        lblKeyToSearch.Caption = "Rebuilt Number:"
    ElseIf optSCPart.Value = True Then
        lblKeyToSearch.Caption = "Stock Code:"
    ElseIf optNSCPart.Value = True Then
        lblKeyToSearch.Caption = "Supplier Number:"
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "ChangeSearchLabel", g_l_ErrorLineNumber
End Sub

Private Function SelectedOption()
    On Error GoTo Error_Handler
    
    ' As the type to part to search by is changed, we must change
    ' the label to reflect this
    If optRBPart.Value = True Then
        SelectedOption = "RB"
    ElseIf optSCPart.Value = True Then
        SelectedOption = "SC"
    ElseIf optNSCPart.Value = True Then
        SelectedOption = "NSC"
    Else
        SelectedOption = ""
    End If
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "SelectedOption", g_l_ErrorLineNumber
End Function

Private Sub cmdFindNext_Click()
    Dim RS As ADODB.Recordset
    Dim SearchGrid As DataGrid
    Dim str_SearchField As String
    Dim l_Counter As Long
    
    On Error GoTo Error_Handler:
        
    ' Must enter a value to search
    If txtKeyToSearch.Text = "" Then
        MsgBox "Enter a part to find.", vbExclamation, "Cost Estimate System"
        Exit Sub
    End If
    
    'Get the grid, seach filed and the record set used for searching
    Select Case SelectedOption()
        Case "RB"
            Set SearchGrid = grdRebuiltPartsList
            str_SearchField = "[REBUILT NUMBER]"
        Case "SC"
            Set SearchGrid = grdStockCodedPartsList
            str_SearchField = "[STOCK CODE]"
        Case "NSC"
            Set SearchGrid = grdNonStockCodedPartsList
            str_SearchField = "[SUPPLIER NUMBER]"
    End Select
    
    If Not SearchGrid.DataSource Is Nothing Then
        Set RS = SearchGrid.DataSource
    Else
        MsgBox "No parts to find.", vbExclamation, "Cost Estimate System"
        Exit Sub
    End If
    
    ' If the grid has lost focus then start seach again
    If RS.AbsolutePage < 0 Then
        m_str_PreviousSearch = ""
        m_str_PreviousSearchType = ""
    End If
   
    ' Determine whether or not they are performing the same
    ' search again or starting a new search
    If m_str_PreviousSearch = txtKeyToSearch.Text And m_str_PreviousSearchType = SelectedOption() Then
        ' Continue Search
        If RS.RecordCount > 0 Then
            RS.AbsolutePosition = RS.Bookmark + 1
            RS.Find str_SearchField & " LIKE '%" & txtKeyToSearch.Text & "%'"
            If RS.EOF Then
                MsgBox "All matching parts have been found.", vbExclamation, "Cost Estimate System"
                m_str_PreviousSearch = ""
                m_str_PreviousSearchType = ""
            Else
                With SearchGrid
                    For l_Counter = .SelBookmarks.Count - 1 To 0 Step -1
                        .SelBookmarks.Remove l_Counter
                    Next
                    .SelBookmarks.Add .RowBookmark(.Row)
                Select Case SelectedOption()
                    Case "RB"
                      Set SearchGrid = grdRebuiltPartsList
                      str_SearchField = "[REBUILT NUMBER]"
                  Case "SC"
                      Set SearchGrid = grdStockCodedPartsList
                      str_SearchField = "[STOCK CODE]"
                  Case "NSC"
                      Set SearchGrid = grdNonStockCodedPartsList
                      str_SearchField = "[SUPPLIER NUMBER]"
    End Select
                End With
                m_str_PreviousSearch = txtKeyToSearch.Text
                m_str_PreviousSearchType = SelectedOption()
            End If
        Else
            MsgBox "No parts to find.", vbExclamation, "Cost Estimate System"
            m_str_PreviousSearch = txtKeyToSearch.Text
            m_str_PreviousSearchType = SelectedOption()
        End If
    Else
        ' Start New Search
        If RS.RecordCount > 0 Then
            RS.MoveFirst
            RS.Find str_SearchField & " LIKE '%" & txtKeyToSearch.Text & "%'"
            If RS.EOF Then
                RS.MoveFirst
                MsgBox "Part not found.", vbExclamation, "Cost Estimate System"
                With SearchGrid
                    For l_Counter = .SelBookmarks.Count - 1 To 0 Step -1
                        .SelBookmarks.Remove l_Counter
                    Next
                End With
                m_str_PreviousSearch = ""
                m_str_PreviousSearchType = ""
            Else
                With SearchGrid
                    For l_Counter = .SelBookmarks.Count - 1 To 0 Step -1
                        .SelBookmarks.Remove l_Counter
                    Next
                    .SelBookmarks.Add .RowBookmark(.Row)
                     grdRebuiltPartsList.SetFocus
                End With
                m_str_PreviousSearch = txtKeyToSearch.Text
                m_str_PreviousSearchType = SelectedOption()
            End If
        Else
            MsgBox "No parts to find.", vbExclamation, "Cost Estimate System"
            m_str_PreviousSearch = txtKeyToSearch.Text
            m_str_PreviousSearchType = SelectedOption()
        End If
    End If
            
    Set RS = Nothing
    Set SearchGrid = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdFindNext_Click", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    If Not SearchGrid Is Nothing Then
        Set SearchGrid = Nothing
    End If
End Sub

Option Explicit

Private Const m_str_const_Msg1 As String = "Labour Overhead should be a positive number between 0 and 2 inclusive."
Private Const m_str_const_Msg2 As String = "Non Productive Adjustment should be a positive number or zero."
Private Const m_str_const_Msg3 As String = "Tax Rate should be a positive number between 0 and 1 inclusive."
Private Const m_str_const_Msg4 As String = "Fringe Value should be a positive number between 0 and 2 inclusive."
Private m_dbl_LabourOverhead As Double
Private m_dbl_FringeValue As Double
Private m_dbl_NonProductiveAdjustment As Double
Private m_dbl_TaxRate As Double
Private m_str_Msg As String
Private m_dbl_Initial_LabourOverhead As Double
Private m_dbl_Initial_FringeValue As Double
Private m_dbl_Initial_NonProductiveAdjustment As Double
Private m_dbl_Initial_TaxRate As Double

Private Sub cmdUpdate_Click()
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim l_Count As Long
    Dim str_Temp As String
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor

    'Data in the txtLabourOverhead edit-box should be a positive number between 0
    'and 2 inclusive.
    If IsNumeric(txtLabourOverhead.Text) = False Then
        Call SetDefaultCursor
        MsgBox m_str_const_Msg1
        txtLabourOverhead.Text = CStr(m_dbl_Initial_LabourOverhead)
        txtLabourOverhead.SetFocus
        Exit Sub
    End If
    m_dbl_LabourOverhead = CDbl(txtLabourOverhead.Text)
    If m_dbl_LabourOverhead < 0 Or m_dbl_LabourOverhead > 2 Then
        Call SetDefaultCursor
        MsgBox m_str_const_Msg1
        txtLabourOverhead.Text = CStr(m_dbl_Initial_LabourOverhead)
        txtLabourOverhead.SetFocus
        Exit Sub
    End If
            
    'Data in the txtFingeValue edit-box should be a positive number between 0
    'and 2 inclusive.
    If IsNumeric(txtFingeValue.Text) = False Then
        Call SetDefaultCursor
        MsgBox m_str_const_Msg4
        txtFingeValue.Text = CStr(m_dbl_Initial_FringeValue)
        txtFingeValue.SetFocus
        Exit Sub
    End If
    m_dbl_FringeValue = CDbl(txtFingeValue.Text)
    If m_dbl_FringeValue < 0 Or m_dbl_FringeValue > 2 Then
        Call SetDefaultCursor
        MsgBox m_str_const_Msg4
        txtFingeValue.Text = CStr(m_dbl_Initial_FringeValue)
        txtFingeValue.SetFocus
        Exit Sub
    End If
            
    'Data in the txtNonProductiveAdjustment edit-box should be a number >= 0
    If IsNumeric(txtNonProductiveAdjustment.Text) = False Then
        Call SetDefaultCursor
        MsgBox m_str_const_Msg2
        txtNonProductiveAdjustment.Text = CStr(m_dbl_Initial_NonProductiveAdjustment)
        txtNonProductiveAdjustment.SetFocus
        Exit Sub
    End If
    m_dbl_NonProductiveAdjustment = CDbl(txtNonProductiveAdjustment.Text)
    If m_dbl_NonProductiveAdjustment < 0 Then
        Call SetDefaultCursor
        MsgBox m_str_const_Msg2
        txtNonProductiveAdjustment.Text = CStr(m_dbl_Initial_NonProductiveAdjustment)
        txtNonProductiveAdjustment.SetFocus
        Exit Sub
    End If
    
    'Data in the txtTaxRate edit-box should be a positive number between 0
    'and 1 inclusive.
    If IsNumeric(txtTaxRate.Text) = False Then
        Call SetDefaultCursor
        MsgBox m_str_const_Msg3
        txtTaxRate.Text = CStr(m_dbl_Initial_TaxRate)
        txtTaxRate.SetFocus
        Exit Sub
    End If
    m_dbl_TaxRate = CDbl(txtTaxRate.Text)
    If m_dbl_TaxRate < 0 Or m_dbl_TaxRate > 1 Then
        Call SetDefaultCursor
        MsgBox m_str_const_Msg3
        txtTaxRate.Text = CStr(m_dbl_Initial_TaxRate)
        txtTaxRate.SetFocus
        Exit Sub
    End If
    
    'User should choose one of the radio-buttons after txtLabourOverhead and txtFingeValue
    If optUseOverhead.Value = False And optUseFringe.Value = False Then
        Call SetDefaultCursor
        MsgBox "Please choose Overhead or Fringe value will be used."
        Exit Sub
    End If
    
    If optUseOverhead.Value = True Then
        g_str_UseOverheadFringe = "O"
        g_dbl_OverheadFringeValue = CDbl(txtLabourOverhead.Text)
        str_Temp = "Use Overhead value"
    End If
    If optUseFringe.Value = True Then
        g_str_UseOverheadFringe = "F"
        g_dbl_OverheadFringeValue = CDbl(txtFingeValue.Text)
        str_Temp = "Use Fringe value"
    End If
    
    g_dbl_NonProductiveTimeAdj = m_dbl_NonProductiveAdjustment
    l_Result = modDBHelper.UpdateCESSettings("CES_UPDATE.UPDATE_CES_SETTINGS", _
                                             l_RetVal, _
                                             "NON_PRODUCTIVE_ADJUSTMENT", _
                                             CStr(m_dbl_NonProductiveAdjustment))
    
    If l_Result <> 0 Then
        Call SetDefaultCursor
        m_str_Msg = "Unable to update CES Settings, field "
        m_str_Msg = m_str_Msg + "'NON_PRODUCTIVE_ADJUSTMENT'. Please call the "
        m_str_Msg = m_str_Msg + "Service Desc at 4357 to report this error."
        MsgBox m_str_Msg
        Exit Sub
    End If
    
    l_Result = modDBHelper.UpdateCESSettings("CES_UPDATE.UPDATE_CES_SETTINGS", _
                                             l_RetVal, _
                                             "OVERHEAD", _
                                             Replace(CStr(m_dbl_LabourOverhead), ".", ","))
    If l_Result <> 0 Then
        Call SetDefaultCursor
        m_str_Msg = "Unable to update CES Settings, field "
        m_str_Msg = m_str_Msg + "'OVERHEAD'. Please call the "
        m_str_Msg = m_str_Msg + "Service Desc at 4357 to report this error."
        MsgBox m_str_Msg
        Exit Sub
    End If
    
    l_Result = modDBHelper.UpdateCESSettings("CES_UPDATE.UPDATE_CES_SETTINGS", _
                                             l_RetVal, _
                                             "FRINGE", _
                                             Replace(CStr(m_dbl_FringeValue), ".", ","))
    If l_Result <> 0 Then
        Call SetDefaultCursor
        m_str_Msg = "Unable to update CES Settings, field "
        m_str_Msg = m_str_Msg + "'FRINGE'. Please call the "
        m_str_Msg = m_str_Msg + "Service Desc at 4357 to report this error."
        MsgBox m_str_Msg
        Exit Sub
    End If
    
    l_Result = modDBHelper.UpdateCESSettings("CES_UPDATE.UPDATE_CES_SETTINGS", _
                                             l_RetVal, _
                                             "TAX_RATE", _
                                             Replace(CStr(m_dbl_TaxRate), ".", ","))
    If l_Result <> 0 Then
        Call SetDefaultCursor
        m_str_Msg = "Unable to update CES Settings, field "
        m_str_Msg = m_str_Msg + "'TAX_RATE'. Please call the "
        m_str_Msg = m_str_Msg + "Service Desc at 4357 to report this error."
        MsgBox m_str_Msg
        Exit Sub
    End If
                                             
    l_Result = modDBHelper.UpdateOverheadFringe("CES_UPDATE.UPDATE_OVERHEAD_FRINGE", _
                                                l_RetVal, _
                                                g_str_UseOverheadFringe, _
                                                g_str_UserName)
    
     If l_Result <> 0 Then
        Call SetDefaultCursor
        m_str_Msg = "Unable to update CES Settings, field "
        m_str_Msg = m_str_Msg + "'OVERHEAD/FRINGE'. Please call the "
        m_str_Msg = m_str_Msg + "Service Desc at 4357 to report this error."
        MsgBox m_str_Msg
        Exit Sub
    End If
   
   If l_Result = 0 Then
        m_str_Msg = "CES Settings are updated."
        MsgBox m_str_Msg
        'Add record to the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                    "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                    l_RetVal, _
                    "Settings were updated in the System", _
                    0, _
                    "CS", _
                    "Labour Overhead ---> " + Trim(txtLabourOverhead.Text), _
                    "Fringe --->" + Trim(txtFingeValue.Text), _
                    "Use Value ---> " + str_Temp, _
                    "Non Productive Adjustment ---> " + Trim(txtNonProductiveAdjustment.Text), _
                    "Tax Rate ---> " + Trim(txtTaxRate.Text))
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdUpdate_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub cmdClose_Click()
    On Error GoTo Error_Handler

    Call SetDefaultCursor
    Unload Me
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdClose_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler

    Call SetWaitCursor
    Call UserPermissions
    Call PopulateControls
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub PopulateControls()
    Dim RS As ADODB.Recordset

    On Error GoTo Error_Handler

    Set RS = New ADODB.Recordset
    
    Set RS = modDBHelper.RetrieveCESSettings("CES_INQUIRY.RETRIEVE_CES_SETTI", "OVERHEAD")
    If RS.RecordCount = 1 Then
        txtLabourOverhead.Text = Replace(RS.Fields("VALUE").Value, ",", ".")
        m_dbl_Initial_LabourOverhead = CDbl(txtLabourOverhead.Text)
    Else
        m_str_Msg = "Can not retrieve OVERHEAD from the CES_SETTINGS "
        m_str_Msg = m_str_Msg + "table. Please contact Supervisor."
        MsgBox m_str_Msg, vbCritical + vbExclamation
        Exit Sub
    End If
    
    Set RS = modDBHelper.RetrieveCESSettings("CES_INQUIRY.RETRIEVE_CES_SETTI", "FRINGE")
    If RS.RecordCount = 1 Then
        txtFingeValue.Text = Replace(RS.Fields("VALUE").Value, ",", ".")
        m_dbl_Initial_FringeValue = CDbl(txtFingeValue.Text)
    Else
        m_str_Msg = "Can not retrieve FRINGE from the CES_SETTINGS "
        m_str_Msg = m_str_Msg + "table. Please contact Supervisor."
        MsgBox m_str_Msg, vbCritical + vbExclamation
        Exit Sub
    End If
    
    Set RS = modDBHelper.RetrieveCESSettings("CES_INQUIRY.RETRIEVE_CES_SETTI", _
                                             "NON_PRODUCTIVE_ADJUSTMENT")
    If RS.RecordCount = 1 Then
        txtNonProductiveAdjustment.Text = Replace(RS.Fields("VALUE").Value, ",", ".")
        m_dbl_Initial_NonProductiveAdjustment = CDbl(txtNonProductiveAdjustment.Text)
    Else
        m_str_Msg = "Can not retrieve NON_PRODUCTIVE_ADJUSTMENT from the CES_SETTINGS "
        m_str_Msg = m_str_Msg + "table. Please contact Supervisor."
        MsgBox m_str_Msg, vbCritical + vbExclamation
        Exit Sub
    End If
    
    Set RS = modDBHelper.RetrieveCESSettings("CES_INQUIRY.RETRIEVE_CES_SETTI", _
                                             "TAX_RATE")
    If RS.RecordCount = 1 Then
        txtTaxRate.Text = Replace(RS.Fields("VALUE").Value, ",", ".")
        m_dbl_Initial_TaxRate = CDbl(txtTaxRate.Text)
    Else
        m_str_Msg = "Can not retrieve TAX_RATE from the CES_SETTINGS "
        m_str_Msg = m_str_Msg + "table. Please contact Supervisor."
        MsgBox m_str_Msg, vbCritical + vbExclamation
        Exit Sub
    End If
    
    If g_str_UseOverheadFringe = "F" Then
        optUseFringe.Value = True
    Else
        g_str_UseOverheadFringe = "O"
        optUseOverhead.Value = True
    End If
    
    Set RS = Nothing

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateControls", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub UserPermissions()
    On Error GoTo Error_Handler
    If g_l_AccessLevel = 4 Or g_l_AccessLevel = 10 Then
        'No restrictions for users with Level 4 or 10.
    Else
        txtLabourOverhead.Enabled = False
        txtFingeValue.Enabled = False
        txtNonProductiveAdjustment.Enabled = False
        txtTaxRate.Enabled = False
        optUseOverhead.Enabled = True
        optUseFringe.Enabled = True
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "UserPermissions", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Option Explicit
Private m_str_Msg As String
Private RS As ADODB.Recordset

Private Sub cmdCancel_Click()
    On Error GoTo Error_Handler

    Unload Me

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdCancel_Click", g_l_ErrorLineNumber
End Sub

Private Sub cmdConvert_Click()
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_MBNumber As String
    Dim str_MMSStockCode As String
    Dim str_RBStockCodeFromDB As String
    Dim str_MMSStockCodeFromDB As String
    Dim str_DetailedDescription As String
    Dim str_Keyword As String
    Dim str_CorePartNumber As String
    Dim str_RebuiltStockNumber As String
    Dim str_JobNumber As String
    Dim str_SOPNumber As String
    Dim str_LastModifiedBy As String
    Dim str_BuyCost As String
    Dim str_ExternalCost As String
    Dim str_RemanufacturedCost As String
    Dim str_core_charge As String
    Dim l_Count As Long
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    str_RebuiltStockNumber = Trim(txtRebuiltPartNumber.Text)
    'Make sure that data in the txtRebuiltPartNumber edit-box is not empty.
    If str_RebuiltStockNumber = "" Then
        Call SetWaitCursor
        m_str_Msg = "Rebuilt Part # should not be empty."
        MsgBox m_str_Msg, vbInformation + vbOKOnly
        txtRebuiltPartNumber.SetFocus
        Exit Sub
    End If
    
    'Make sure that data in the txtStockCodedNumber edit-box is not empty.
    str_MMSStockCode = Trim(txtStockCodedNumber.Text)
    If str_MMSStockCode = "" Then
        Call SetWaitCursor
        m_str_Msg = "Stock Code # should not be empty."
        MsgBox m_str_Msg, vbInformation + vbOKOnly
        txtStockCodedNumber.SetFocus
        Exit Sub
    End If
    
    'Make sure that data in the txtRebuiltPartNumber edit-box is not in the
    'RB_MASTERLIST.REBUILT_STOCK_NUM field.
    
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.RetrieveRB("CES_INQUIRY.RETRIEVE_RB")
    
    If RS.RecordCount > 0 Then
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
            str_RBStockCodeFromDB = RS.Fields.Item("REBUILT_STOCK_NUM")
            If str_RebuiltStockNumber = str_RBStockCodeFromDB Then
                Call SetWaitCursor
                Set RS = Nothing
                m_str_Msg = "Rebuilt Part Number is duplicated. Please provide another one."
                MsgBox m_str_Msg, vbInformation + vbOKOnly
                If txtRebuiltPartNumber.Enabled = True Then
                    txtRebuiltPartNumber.SetFocus
                End If
                Exit Sub
            End If
            RS.MoveNext
        Next l_Count
    End If
    
    'NOTE. NEXT INSERTS ARE NOT ATOMIC. ALL OF THEM SHOULD BE UNDER ONE TRANSACTION.
    '      IF, LET SAY, ONE INSERTION "CES_UPDATE.ADD_NSCP_USED" WILL FAIL, DATA IN THE
    '      DATABASE WILL NOT BE CONSISTANT.
    
    'Get information from the MB_LIST table.
    str_MBNumber = Trim(txtMakeBuyNumber.Text)
    Set RS = modDBHelper.RetrieveMBListByMBNumber( _
                                        "CES_INQUIRY.RETRIEVE_MB_LIST_BY_MB_NUMBER", _
                                        str_MBNumber)
    str_DetailedDescription = RS.Fields.Item("DESCRIPTION")
    str_Keyword = RS.Fields.Item("KEYWORD")
    str_CorePartNumber = RS.Fields.Item("CORE_CODE")
    str_JobNumber = RS.Fields.Item("BENCH_NUMBER")
    str_LastModifiedBy = modMain.g_str_UserName
    str_SOPNumber = RS.Fields.Item("SOP_Number")
    str_BuyCost = RS.Fields.Item("Buy_New_cost")
    str_ExternalCost = RS.Fields.Item("External_Cost")
    str_RemanufacturedCost = RS.Fields.Item("Reman_Cost")
    str_JobNumber = " "
    If IsNull(RS.Fields.Item("JOB_NUMBER")) = False Then
        str_JobNumber = RS.Fields.Item("JOB_NUMBER")
    End If
    
    str_core_charge = RS.Fields.Item("CORE_CHARGE")
    
    'Insert a new record into RB_MASTERLIST table.
    l_Result = modDBHelper.InsertRBMasterList("CES_UPDATE.INSERT_RB_MASTERLIST", _
                                              l_RetVal, _
                                              str_MMSStockCode, _
                                              str_DetailedDescription, _
                                              str_Keyword, _
                                              str_CorePartNumber, _
                                              str_RebuiltStockNumber, _
                                              str_JobNumber, _
                                              str_LastModifiedBy, _
                                              str_SOPNumber, _
                                              str_BuyCost, _
                                              str_RemanufacturedCost, _
                                              str_ExternalCost, _
                                              str_core_charge)

    'In the NSC_PARTS_USED table find all records with LINK_CODE = str_MBNumber and
    'LINK_TYPE = "MB".
    Set RS = modDBHelper.RetrieveNSCPUsed("CES_INQUIRY.RETRIEVE_NSCP_USED_COPY", _
                                        str_MBNumber, _
                                        "MB")
    
    'Add new records to the NSC_PARTS_USED table, with all fields = fields from the RS,
    'except:
    'ENTERED_BY = current user name
    'LAST_MODIFIED_BY = current user name (done in CES_UPDATE.ADD_NSCP_USED)
    'LINK_TYPE = "RB"
    'LINK_CODE = data from the txtRebuiltPartNumber edit-box
    'DATE_ENTERED = current date (done in CES_UPDATE.ADD_NSCP_USED)
    'LAST_MODIFIED_DATE = current date (done in CES_UPDATE.ADD_NSCP_USED)
    If RS.RecordCount > 0 Then
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
            l_Result = modDBHelper.AddNSCPUsed("CES_UPDATE.ADD_NSCP_USED", _
                                               l_RetVal, _
                                               RS.Fields.Item("SUPPLIER NUMBER"), _
                                               RS.Fields.Item("SUPPLIER NAME"), _
                                               RS.Fields.Item("CC"), _
                                               RS.Fields.Item("QTY"), _
                                               RS.Fields.Item("%"), _
                                               modMain.g_str_UserName, _
                                               str_RebuiltStockNumber, _
                                               RS.Fields.Item("UNIT COST"), _
                                               "RB", _
                                               RS.Fields.Item("CORE COST"), _
                                               RS.Fields.Item("ID"))
            RS.MoveNext
        Next l_Count
    End If
    
    'In the SC_PARTS_USED table find all records with LINK_CODE = str_MBNumber and
    'LINK_TYPE = "MB" and REBUILT_PART = "Y"
    Set RS = modDBHelper.RetrieveSCPUsed("CES_INQUIRY.RETRIEVE_SCP_USED_COPY", _
                                         str_MBNumber, _
                                         "Y", _
                                         "MB")
    
    'Add new records to the SC_PARTS_USED table, with all fields = fields from the RS,
    'except:
    'USER_ENTERED = current user name
    'LAST_MODIFIED_BY = current user name (done in CES_UPDATE.ADD_SCP_USED)
    'LINK_TYPE = "RB"
    'LINK_CODE = data from the txtRebuiltPartNumber edit-box
    'DATE_ENTERED = current date (done in CES_UPDATE.ADD_SCP_USED)
    'LAST_MODIFIED_DATE = current date (done in CES_UPDATE.ADD_SCP_USED)
    If RS.RecordCount > 0 Then
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
        l_Result = modDBHelper.AddSCPUsed("CES_UPDATE.ADD_SCP_USED", _
                                          l_RetVal, _
                                          RS.Fields.Item("STOCK CODE"), _
                                          RS.Fields.Item("CC"), _
                                          RS.Fields.Item("QTY"), _
                                          RS.Fields.Item("%"), _
                                          modMain.g_str_UserName, _
                                          RS.Fields.Item("UNIT COST"), _
                                          RS.Fields.Item("OEM COST"), _
                                          str_RebuiltStockNumber, _
                                          RS.Fields.Item("REBUILT PART"), _
                                          "RB", _
                                          RS.Fields.Item("CORE COST"), _
                                          RS.Fields.Item("MMS REBUILT CODE"), _
                                          RS.Fields.Item("REBUILT PART COST"))
            RS.MoveNext
        Next l_Count
    End If
    
    Set RS = modDBHelper.RetrieveSCPUsed("CES_INQUIRY.RETRIEVE_SCP_USED_COPY", _
                                     str_MBNumber, _
                                     "N", _
                                     "MB")
    
    'Add new records to the SC_PARTS_USED table, with all fields = fields from the RS,
    'except:
    'USER_ENTERED = current user name
    'LAST_MODIFIED_BY = current user name (done in CES_UPDATE.ADD_SCP_USED)
    'LINK_TYPE = "RB"
    'LINK_CODE = data from the txtRebuiltPartNumber edit-box
    'DATE_ENTERED = current date (done in CES_UPDATE.ADD_SCP_USED)
    'LAST_MODIFIED_DATE = current date (done in CES_UPDATE.ADD_SCP_USED)
    If RS.RecordCount > 0 Then
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
        l_Result = modDBHelper.AddSCPUsed("CES_UPDATE.ADD_SCP_USED", _
                                          l_RetVal, _
                                          RS.Fields.Item("STOCK CODE"), _
                                          RS.Fields.Item("CC"), _
                                          RS.Fields.Item("QTY"), _
                                          RS.Fields.Item("%"), _
                                          modMain.g_str_UserName, _
                                          RS.Fields.Item("UNIT COST"), _
                                          RS.Fields.Item("OEM COST"), _
                                          str_RebuiltStockNumber, _
                                          RS.Fields.Item("REBUILT PART"), _
                                          "RB", _
                                          RS.Fields.Item("CORE COST"), _
                                               " ", _
                                               0)
            RS.MoveNext
        Next l_Count
    End If
    'In the EMPLOYEE_LABOUR table find all records with LINK_NUMBER = str_MBNumber and
    'TYPEID = "MB"
    Set RS = modDBHelper.RetrieveEmployeeLabour("CES_INQUIRY.RETRIEVE_EMPLOYEE_LABOUR", _
                                                str_MBNumber, _
                                                "MB")
    'Add new records to the EMPLOYEE_LABOUR table, with all fields = fields from the RS,
    'except:
    'TYPEID = "RB"
    'LINK_NUMBER = data from the txtRebuiltPartNumber edit-box
    'DATE_ENTERED = current date (done in CES_UPDATE.ADD_LABOUR_TASKS)
    'DATE_REVISED = current date (done in CES_UPDATE.ADD_LABOUR_TASKS)
    
    If RS.RecordCount > 0 Then
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
        l_Result = modDBHelper.AddLabourTasks("CES_UPDATE.ADD_LABOUR_TASKS", _
                                              l_RetVal, _
                                              RS.Fields.Item("LABOUR_DEFN"), _
                                              str_RebuiltStockNumber, _
                                              "RB", _
                                              RS.Fields.Item("COSTCENTRE"), _
                                              RS.Fields.Item("TASK"), _
                                              RS.Fields.Item("LABOUR_TYPE"), _
                                              RS.Fields.Item("USAGE"), _
                                              RS.Fields.Item("HRS_REQD"), _
                                              RS.Fields.Item("ADJ_HRS"), _
                                              Replace(RS.Fields.Item("TIME_ADDITION").Value, ",", "."), _
                                              RS.Fields.Item("REBUILT_PART_NUM"), _
                                              g_str_UserName)
    
            RS.MoveNext
        Next l_Count
    End If
    
    'From the MB_LIST_OF_BUSES table get all records with
    'MB_NUMBER = data from the txtMakeBuyNumber edit-box.
    Set RS = modDBHelper.RetrieveMBListOfBuses("CES_INQUIRY.MB_LIST_BUSES", _
                                               str_MBNumber)
    'Go through all records in the RS, and insert records into the RB_LIST_OF_BUSES table.
    'Note: instead of field RS.Fields.Item("MB_NUMBER") we will insert data from the
    'txtRebuiltPartNumber edit-box ( = str_RebuiltStockNumber).
    If RS.RecordCount > 0 Then
        RS.MoveFirst
        For l_Count = 0 To RS.RecordCount - 1
            l_Result = modDBHelper.InsertRBListOFBuses( _
                                            "CES_UPDATE.INSERT_RB_LIST_OF_BUSES", _
                                            l_RetVal, _
                                            str_RebuiltStockNumber, _
                                            RS.Fields.Item("LIST_ID"))
            RS.MoveNext
        Next l_Count
    End If

    If l_Result = 0 Then
        
        'Add record to the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                                    "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                                    l_RetVal, _
                                    "Make Vs Buy was Converted to a Rebuilt Part #" & str_RebuiltStockNumber, _
                                    str_MBNumber, _
                                    "MB", _
                                    "Description ---> " + str_DetailedDescription, _
                                    "Keyword ---> " + str_Keyword)

        
        m_str_Msg = "Conversion is done."
        MsgBox m_str_Msg, vbInformation + vbOKOnly
    Else
        'Conversion is failed for some reason.
        m_str_Msg = "Conversion is failed. Please contact Supervisor."
        MsgBox m_str_Msg, vbInformation + vbOKOnly
    End If
    
    Call SetWaitCursor
    Set RS = Nothing
    
    Unload Me
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdConvert_Click", g_l_ErrorLineNumber
    Call SetWaitCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetWaitCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetWaitCursor
End Sub

Private Sub txtRebuiltPartNumber_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtRebuiltPartNumber edit-box to upper case.
    l_CursorPosition = txtRebuiltPartNumber.SelStart
    str_Data = txtRebuiltPartNumber.Text
    str_Data = UCase(str_Data)
    txtRebuiltPartNumber.Text = str_Data
    txtRebuiltPartNumber.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtRebuiltPartNumber_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtStockCodedNumber_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtStockCodedNumber edit-box to upper case.
    l_CursorPosition = txtStockCodedNumber.SelStart
    str_Data = txtStockCodedNumber.Text
    str_Data = UCase(str_Data)
    txtStockCodedNumber.Text = str_Data
    txtStockCodedNumber.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtStockCodedNumber_KeyUp", g_l_ErrorLineNumber
End Sub

Option Explicit

Private m_str_MBNumber As String

'-------------------------------------------------------
' Purpose:
'    Allows the user to pass a MB Number to the form
'    and populates the form with the information for the
'    MB corresponding to this Number.
'-------------------------------------------------------
Public Sub PassMBNumber(str_MBNumber As String)
    On Error GoTo Error_Handler:
    
    ' Pass the MB Number
    m_str_MBNumber = str_MBNumber
    txtMBNumber.Text = Trim(m_str_MBNumber)
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PassMBNumber", g_l_ErrorLineNumber
End Sub


'-------------------------------------------------------
' Purpose:
'    Creates a new MB Estimate as a copy of an
'    existing MB Estimate
'-------------------------------------------------------
Private Sub cmdCopy_Click()
    Dim s_NewNum As String
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim l_Count As Long
    Dim str_MBNumberFromDB As String
     
    Dim RS As ADODB.Recordset

    On Error GoTo Error_Handler:

    Call SetWaitCursor

    'Make sure that new MB Number is Provided
    If Trim(txtNewMBNumber.Text) = "" Then
        Call SetDefaultCursor
        MsgBox "Please provide a Make Vs. Buy number.", vbExclamation, "Copy Make Vs. Buy Estimate"
        txtNewMBNumber.SetFocus
        Exit Sub
    End If
    
    'Make sure that new MB Number is not the same as old MB Number to be copied.
    If UCase(Trim(txtNewMBNumber.Text)) = UCase(Trim(txtMBNumber.Text)) Then
        Call SetDefaultCursor
        MsgBox "Please provide a different Make Vs. Buy number for the new Make Vs. Buy Estimate.", vbExclamation, "Copy Make Vs. Buy Estimate"
        txtNewMBNumber.SetFocus
        Exit Sub
    End If
    
    'Make sure that new MB Number doesn't exist.
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.RetrieveRB("CES_INQUIRY.RETRIEVE_MB")
        
    If Not IsNull(RS) And RS.RecordCount > 0 Then
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
            str_MBNumberFromDB = RS.Fields.Item("MB_NUMBER")
            If UCase(Trim(txtNewMBNumber.Text)) = str_MBNumberFromDB Then
                Call SetDefaultCursor
                MsgBox "The new MB Number alreay exists. Please provide another one.", vbExclamation, "Copy Make Vs. Buy Estimate"
                Set RS = Nothing
                txtNewMBNumber.SetFocus
                Exit Sub
            End If
            RS.MoveNext
        Next l_Count
        RS.MoveFirst
    End If
    Set RS = Nothing
    
    'Make sure that a Keyword is Provided
    If Trim(cboKeyword.Text) = "" Then
        Call SetDefaultCursor
        MsgBox "Please select a Keyword.", vbExclamation, "Copy Make Vs. Buy Estimate"
        cboKeyword.SetFocus
        Exit Sub
    End If

    'Copy the MB Estimate
    l_Result = CopyMBEstimate("CES_UPDATE.COPY_MB_ESTIMATE", _
                                   l_RetVal, _
                                   m_str_MBNumber, _
                                   Trim(txtNewMBNumber.Text), _
                                   Trim(cboKeyword.Text), _
                                   Trim(cboRebuildNumber.Text))

    ' Determine whether the copy was successful
    If l_Result = 0 Then
        Call SetDefaultCursor
        s_NewNum = UCase(Trim(txtNewMBNumber.Text))
        MsgBox "Make Vs. Buy Estimate was copied successfully." & _
                Chr(13) & "The new Make Vs. Buy Number is " & _
                Trim(s_NewNum) & ".", _
                vbInformation, _
                "Copy Make Vs. Buy Estimate"
    Else
        Call SetDefaultCursor
        MsgBox "There was an error while copying Make Vs. Buy Estimate information." & _
               Chr(13) & "Make Vs. Buy Estimate was not copied successfully.", _
               vbCritical, _
               "Copy Make Vs. Buy Estimate"
    End If
    Call SetDefaultCursor
    Unload Me

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdCopy_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

'-------------------------------------------------------
' Purpose:
'    When the form loads, populates the combo boxes
'-------------------------------------------------------
Private Sub Form_Load()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler:
    
    Call SetWaitCursor
    
    ' Populate the keyword and Rebuid Number combo box
    Set RS = modDBHelper.RetrieveMB("CES_INQUIRY.RETRIEVE_MB")
    
    Set cboKeyword.RowSource = RS
    Set cboRebuildNumber.RowSource = RS
    
    cboKeyword.ListField = "keyword"
    cboRebuildNumber.ListField = "rebuild_code"

    
    ' Populate the Keyword and Rebuild Number from the MB Number
    Set RS = modDBHelper.RetrieveMB("CES_INQUIRY.RETRIEVE_MB")
    If RS.RecordCount > 0 Then
        RS.Filter = "mb_number = '" + m_str_MBNumber + "'"
        txtKeyword.Text = RS.Fields.Item("keyword")
        txtRebuildNumber.Text = RS.Fields.Item("rebuild_code")
        cboKeyword.Text = RS.Fields.Item("keyword")
        cboRebuildNumber.Text = RS.Fields.Item("rebuild_code")
    End If

    Set RS = Nothing
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

'-------------------------------------------------------
' Purpose:
'    Closes the form without copying the MB estimate.
'-------------------------------------------------------
Private Sub cmdCancel_Click()
    On Error GoTo Error_Handler:
    
    Unload Me
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdCancel_Click", g_l_ErrorLineNumber
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub txtNewMBNumber_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtNewMBNumber edit-box to upper case.
    l_CursorPosition = txtNewMBNumber.SelStart
    str_Data = txtNewMBNumber.Text
    str_Data = UCase(str_Data)
    txtNewMBNumber.Text = str_Data
    txtNewMBNumber.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtNewMBNumber", g_l_ErrorLineNumber
End Sub
Option Explicit

Private m_str_MBNumber As String

'-------------------------------------------------------
' Purpose:
'    Allows the user to pass a MB Number to the form
'    and populates the form with the information for the
'    MB corresponding to this Number.
'-------------------------------------------------------
Public Sub PassMBNumber(str_MBNumber As String)
    On Error GoTo Error_Handler:
    
    ' Pass the MB Number
    m_str_MBNumber = str_MBNumber
    txtMBNumber.Text = Trim(m_str_MBNumber)
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PassMBNumber", g_l_ErrorLineNumber
End Sub


'-------------------------------------------------------
' Purpose:
'    Creates a new MB Estimate as a copy of an
'    existing MB Estimate
'-------------------------------------------------------
Private Sub cmdCopy_Click()
    Dim s_NewNum As String
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim l_Count As Long
    Dim str_MBNumberFromDB As String
     
    Dim RS As ADODB.Recordset

    On Error GoTo Error_Handler:

    Call SetWaitCursor

    'Make sure that new MB Number is Provided
    If Trim(txtNewMBNumber.Text) = "" Then
        Call SetDefaultCursor
        MsgBox "Please provide a Make Vs. Buy number.", vbExclamation, "Copy Make Vs. Buy Estimate"
        txtNewMBNumber.SetFocus
        Exit Sub
    End If
    
    'Make sure that new MB Number is not the same as old MB Number to be copied.
    If UCase(Trim(txtNewMBNumber.Text)) = UCase(Trim(txtMBNumber.Text)) Then
        Call SetDefaultCursor
        MsgBox "Please provide a different Make Vs. Buy number for the new Make Vs. Buy Estimate.", vbExclamation, "Copy Make Vs. Buy Estimate"
        txtNewMBNumber.SetFocus
        Exit Sub
    End If
    
    'Make sure that new MB Number doesn't exist.
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.RetrieveRB("CES_INQUIRY.RETRIEVE_MB")
        
    If Not IsNull(RS) And RS.RecordCount > 0 Then
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
            str_MBNumberFromDB = RS.Fields.Item("MB_NUMBER")
            If UCase(Trim(txtNewMBNumber.Text)) = str_MBNumberFromDB Then
                Call SetDefaultCursor
                MsgBox "The new MB Number alreay exists. Please provide another one.", vbExclamation, "Copy Make Vs. Buy Estimate"
                Set RS = Nothing
                txtNewMBNumber.SetFocus
                Exit Sub
            End If
            RS.MoveNext
        Next l_Count
        RS.MoveFirst
    End If
    Set RS = Nothing
    
    'Make sure that a Keyword is Provided
    If Trim(cboKeyword.Text) = "" Then
        Call SetDefaultCursor
        MsgBox "Please select a Keyword.", vbExclamation, "Copy Make Vs. Buy Estimate"
        cboKeyword.SetFocus
        Exit Sub
    End If

    'Copy the MB Estimate
    l_Result = CopyMBEstimate("CES_UPDATE.COPY_MB_ESTIMATE", _
                                   l_RetVal, _
                                   m_str_MBNumber, _
                                   Trim(txtNewMBNumber.Text), _
                                   Trim(cboKeyword.Text), _
                                   Trim(cboRebuildNumber.Text))

    ' Determine whether the copy was successful
    If l_Result = 0 Then
        Call SetDefaultCursor
        s_NewNum = UCase(Trim(txtNewMBNumber.Text))
        MsgBox "Make Vs. Buy Estimate was copied successfully." & _
                Chr(13) & "The new Make Vs. Buy Number is " & _
                Trim(s_NewNum) & ".", _
                vbInformation, _
                "Copy Make Vs. Buy Estimate"
    Else
        Call SetDefaultCursor
        MsgBox "There was an error while copying Make Vs. Buy Estimate information." & _
               Chr(13) & "Make Vs. Buy Estimate was not copied successfully.", _
               vbCritical, _
               "Copy Make Vs. Buy Estimate"
    End If
    Call SetDefaultCursor
    Unload Me

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdCopy_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

'-------------------------------------------------------
' Purpose:
'    When the form loads, populates the combo boxes
'-------------------------------------------------------
Private Sub Form_Load()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler:
    
    Call SetWaitCursor
    
    ' Populate the keyword and Rebuid Number combo box
    Set RS = modDBHelper.RetrieveMB("CES_INQUIRY.RETRIEVE_MB")
    
    Set cboKeyword.RowSource = RS
    Set cboRebuildNumber.RowSource = RS
    
    cboKeyword.ListField = "keyword"
    cboRebuildNumber.ListField = "rebuild_code"

    
    ' Populate the Keyword and Rebuild Number from the MB Number
    Set RS = modDBHelper.RetrieveMB("CES_INQUIRY.RETRIEVE_MB")
    If RS.RecordCount > 0 Then
        RS.Filter = "mb_number = '" + m_str_MBNumber + "'"
        txtKeyword.Text = RS.Fields.Item("keyword")
        txtRebuildNumber.Text = RS.Fields.Item("rebuild_code")
        cboKeyword.Text = RS.Fields.Item("keyword")
        cboRebuildNumber.Text = RS.Fields.Item("rebuild_code")
    End If

    Set RS = Nothing
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

'-------------------------------------------------------
' Purpose:
'    Closes the form without copying the MB estimate.
'-------------------------------------------------------
Private Sub cmdCancel_Click()
    On Error GoTo Error_Handler:
    
    Unload Me
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdCancel_Click", g_l_ErrorLineNumber
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub txtNewMBNumber_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtNewMBNumber edit-box to upper case.
    l_CursorPosition = txtNewMBNumber.SelStart
    str_Data = txtNewMBNumber.Text
    str_Data = UCase(str_Data)
    txtNewMBNumber.Text = str_Data
    txtNewMBNumber.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtNewMBNumber", g_l_ErrorLineNumber
End Sub
Option Explicit

Private m_str_MBNumber As String

'-------------------------------------------------------
' Purpose:
'    Allows the user to pass a MB Number to the form
'    and populates the form with the information for the
'    MB corresponding to this Number.
'-------------------------------------------------------
Public Sub PassMBNumber(str_MBNumber As String)
    On Error GoTo Error_Handler:
    
    ' Pass the MB Number
    m_str_MBNumber = str_MBNumber
    txtMBNumber.Text = Trim(m_str_MBNumber)
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PassMBNumber", g_l_ErrorLineNumber
End Sub


'-------------------------------------------------------
' Purpose:
'    Creates a new MB Estimate as a copy of an
'    existing MB Estimate
'-------------------------------------------------------
Private Sub cmdCopy_Click()
    Dim s_NewNum As String
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim l_Count As Long
    Dim str_MBNumberFromDB As String
     
    Dim RS As ADODB.Recordset

    On Error GoTo Error_Handler:

    Call SetWaitCursor

    'Make sure that new MB Number is Provided
    If Trim(txtNewMBNumber.Text) = "" Then
        Call SetDefaultCursor
        MsgBox "Please provide a Make Vs. Buy number.", vbExclamation, "Copy Make Vs. Buy Estimate"
        txtNewMBNumber.SetFocus
        Exit Sub
    End If
    
    'Make sure that new MB Number is not the same as old MB Number to be copied.
    If UCase(Trim(txtNewMBNumber.Text)) = UCase(Trim(txtMBNumber.Text)) Then
        Call SetDefaultCursor
        MsgBox "Please provide a different Make Vs. Buy number for the new Make Vs. Buy Estimate.", vbExclamation, "Copy Make Vs. Buy Estimate"
        txtNewMBNumber.SetFocus
        Exit Sub
    End If
    
    'Make sure that new MB Number doesn't exist.
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.RetrieveRB("CES_INQUIRY.RETRIEVE_MB")
        
    If Not IsNull(RS) And RS.RecordCount > 0 Then
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
            str_MBNumberFromDB = RS.Fields.Item("MB_NUMBER")
            If UCase(Trim(txtNewMBNumber.Text)) = str_MBNumberFromDB Then
                Call SetDefaultCursor
                MsgBox "The new MB Number alreay exists. Please provide another one.", vbExclamation, "Copy Make Vs. Buy Estimate"
                Set RS = Nothing
                txtNewMBNumber.SetFocus
                Exit Sub
            End If
            RS.MoveNext
        Next l_Count
        RS.MoveFirst
    End If
    Set RS = Nothing
    
    'Make sure that a Keyword is Provided
    If Trim(cboKeyword.Text) = "" Then
        Call SetDefaultCursor
        MsgBox "Please select a Keyword.", vbExclamation, "Copy Make Vs. Buy Estimate"
        cboKeyword.SetFocus
        Exit Sub
    End If

    'Copy the MB Estimate
    l_Result = CopyMBEstimate("CES_UPDATE.COPY_MB_ESTIMATE", _
                                   l_RetVal, _
                                   m_str_MBNumber, _
                                   Trim(txtNewMBNumber.Text), _
                                   Trim(cboKeyword.Text), _
                                   Trim(cboRebuildNumber.Text))

    ' Determine whether the copy was successful
    If l_Result = 0 Then
        Call SetDefaultCursor
        s_NewNum = UCase(Trim(txtNewMBNumber.Text))
        MsgBox "Make Vs. Buy Estimate was copied successfully." & _
                Chr(13) & "The new Make Vs. Buy Number is " & _
                Trim(s_NewNum) & ".", _
                vbInformation, _
                "Copy Make Vs. Buy Estimate"
    Else
        Call SetDefaultCursor
        MsgBox "There was an error while copying Make Vs. Buy Estimate information." & _
               Chr(13) & "Make Vs. Buy Estimate was not copied successfully.", _
               vbCritical, _
               "Copy Make Vs. Buy Estimate"
    End If
    Call SetDefaultCursor
    Unload Me

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdCopy_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

'-------------------------------------------------------
' Purpose:
'    When the form loads, populates the combo boxes
'-------------------------------------------------------
Private Sub Form_Load()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler:
    
    Call SetWaitCursor
    
    ' Populate the keyword and Rebuid Number combo box
    Set RS = modDBHelper.RetrieveMB("CES_INQUIRY.RETRIEVE_MB")
    
    Set cboKeyword.RowSource = RS
    Set cboRebuildNumber.RowSource = RS
    
    cboKeyword.ListField = "keyword"
    cboRebuildNumber.ListField = "rebuild_code"

    
    ' Populate the Keyword and Rebuild Number from the MB Number
    Set RS = modDBHelper.RetrieveMB("CES_INQUIRY.RETRIEVE_MB")
    If RS.RecordCount > 0 Then
        RS.Filter = "mb_number = '" + m_str_MBNumber + "'"
        txtKeyword.Text = RS.Fields.Item("keyword")
        txtRebuildNumber.Text = RS.Fields.Item("rebuild_code")
        cboKeyword.Text = RS.Fields.Item("keyword")
        cboRebuildNumber.Text = RS.Fields.Item("rebuild_code")
    End If

    Set RS = Nothing
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

'-------------------------------------------------------
' Purpose:
'    Closes the form without copying the MB estimate.
'-------------------------------------------------------
Private Sub cmdCancel_Click()
    On Error GoTo Error_Handler:
    
    Unload Me
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdCancel_Click", g_l_ErrorLineNumber
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub txtNewMBNumber_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtNewMBNumber edit-box to upper case.
    l_CursorPosition = txtNewMBNumber.SelStart
    str_Data = txtNewMBNumber.Text
    str_Data = UCase(str_Data)
    txtNewMBNumber.Text = str_Data
    txtNewMBNumber.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtNewMBNumber", g_l_ErrorLineNumber
End Sub
Option Explicit

Private m_str_RBNumber As String
Private m_str_MMSStockCode As String


'-------------------------------------------------------
' Purpose:
'    Allows the user to pass a Rebuilt Number and a MMS Stock Code to the form
'    and populates the form with the information corresponding to the Numbers
'-------------------------------------------------------
Public Sub PassRBNumber(str_RBNumber As String, strMMSStockCode As String)
    On Error GoTo Error_Handler:
    
    ' Pass the RB Number
    m_str_RBNumber = str_RBNumber
    m_str_MMSStockCode = strMMSStockCode
    txtRBNumber.Text = Trim(m_str_RBNumber)
    txtMMSStockCode.Text = Trim(m_str_MMSStockCode)
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PassRBNumber", g_l_ErrorLineNumber
End Sub


'-------------------------------------------------------
' Purpose:
'    Creates a new Rebuilt Part Estimate as a copy of an
'    existing Rebuilt Part Estimate
'-------------------------------------------------------
Private Sub cmdCopy_Click()
    Dim s_NewNum As String
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim l_Count As Long
    Dim str_RBStockCodeFromDB As String
    Dim str_MMSStockCodeFromDB As String
    
    Dim RS As ADODB.Recordset

    On Error GoTo Error_Handler:

    Call SetWaitCursor

    'Make sure that new RB Number is Provided
    If Trim(txtNewRBNumber.Text) = "" Then
        Call SetDefaultCursor
        MsgBox "Please provide a Rebuilt number.", vbExclamation, "Copy Rebuilt Part Estimate"
        txtNewRBNumber.SetFocus
        Exit Sub
    End If
    
    'Make sure that new RB Number is not the same as the one to be copied.
    If UCase(Trim(txtNewRBNumber.Text)) = UCase(Trim(txtRBNumber.Text)) Then
        Call SetDefaultCursor
        MsgBox "Please provide a different Rebuilt Number for the new Rebuilt Part Estimate.", vbExclamation, "Copy Rebuilt Part Estimate"
        txtNewRBNumber.SetFocus
        Exit Sub
    End If
    
    'Make sure that new Rebuilt Number doesn't exist in the database.
    Set RS = modDBHelper.RetrieveRB("CES_INQUIRY.RETRIEVE_RB")
        
    If Not IsNull(RS) And RS.RecordCount > 0 Then
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
            str_RBStockCodeFromDB = RS.Fields.Item("REBUILT_STOCK_NUM")
            If UCase(Trim(txtNewRBNumber.Text)) = str_RBStockCodeFromDB Then
                Call SetDefaultCursor
                MsgBox "The new Rebuilt Number alreay exists. Please provide another one.", vbExclamation, "Copy Rebuilt Part Estimate"
                Set RS = Nothing
                txtNewRBNumber.SetFocus
                Exit Sub
            End If
            RS.MoveNext
        Next l_Count
        RS.MoveFirst
    End If
    
    
    'Make sure that new MMS Stock Code is Provided
    If Trim(txtNewMMSStockCode.Text) = "" Then
        Call SetDefaultCursor
        MsgBox "Please provide a MMS Stock code.", vbExclamation, "Copy Rebuilt Part Estimate"
        txtNewMMSStockCode.SetFocus
        Exit Sub
    End If
    
    'Make sure that new MMS Stock Code is not the same as the one to be copied.
    If UCase(Trim(txtNewMMSStockCode.Text)) = UCase(Trim(txtMMSStockCode.Text)) Then
        Call SetDefaultCursor
        MsgBox "Please provide a different MMS Stock Code for the new Rebuilt Part Estimate.", vbExclamation, "Copy Rebuilt Part Estimate"
        txtNewMMSStockCode.SetFocus
        Exit Sub
    End If
    
    'Make sure that new MMS Stock Code doesn't exist.
    If Not IsNull(RS) And RS.RecordCount > 0 Then
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
            str_MMSStockCodeFromDB = RS.Fields.Item("MMS_STOCK_CODE")
            If UCase(Trim(txtNewMMSStockCode.Text)) = str_MMSStockCodeFromDB Then
                Call SetDefaultCursor
                MsgBox "The new MMS Stock Code alreay exists. Please provide another one.", vbExclamation, "Copy Rebuilt Part Estimate"
                Set RS = Nothing
                txtNewMMSStockCode.SetFocus
                Exit Sub
            End If
            RS.MoveNext
        Next l_Count
        RS.MoveFirst
    End If
    
    Set RS = Nothing

    'Make sure that a Keyword is Provided
    If Trim(cboKeyword.Text) = "" Then
        Call SetDefaultCursor
        MsgBox "Please select a Keyword.", vbExclamation, "Copy Rebuilt Part Estimate"
        cboKeyword.SetFocus
        Exit Sub
    End If
    
    'Copy the Rebuilt Part Estimate
    l_Result = CopyRBEstimate("CES_UPDATE.COPY_RB_ESTIMATE", _
                                   l_RetVal, _
                                   m_str_RBNumber, _
                                   Trim(txtNewRBNumber.Text), _
                                   Trim(cboKeyword.Text), _
                                   Trim(txtNewMMSStockCode.Text))

    ' Determine whether the copy was successful
    If l_Result = 0 Then
        Call SetDefaultCursor
        s_NewNum = UCase(Trim(txtNewRBNumber.Text))
        MsgBox "Rebuilt Part Estimate was copied successfully." & _
                Chr(13) & "The new Rebuilt Part Number is " & _
                Trim(s_NewNum) & ".", _
                vbInformation, _
                "Copy Rebuit Part Estimate"
    Else
        Call SetDefaultCursor
        MsgBox "There was an error while copying Rebuilt Part Estimate information." & _
               Chr(13) & "Rebuilt Part Estimate was not copied successfully.", _
               vbCritical, _
               "Copy Rebuit Part Estimate"
    End If
    Call SetDefaultCursor
    Unload Me

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdCopy_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

'-------------------------------------------------------
' Purpose:
'    When the form loads, populates the combo boxes
'-------------------------------------------------------
Private Sub Form_Load()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler:
    
    Call SetWaitCursor
    
    ' Populate the keyword and Description combo box
    Set RS = modDBHelper.RetrieveRB("CES_INQUIRY.RETRIEVE_RB")
    
    Set cboKeyword.RowSource = RS
    
    cboKeyword.ListField = "keyword"
    
    ' Populate the Keyword and Description from the RB Number
    Set RS = modDBHelper.RetrieveRB("CES_INQUIRY.RETRIEVE_RB")
    If RS.RecordCount > 0 Then
        RS.Filter = "rebuilt_stock_num = '" + m_str_RBNumber + "'"
        txtKeyword.Text = RS.Fields.Item("keyword")
        cboKeyword.Text = RS.Fields.Item("keyword")
    End If

    Set RS = Nothing
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

'-------------------------------------------------------
' Purpose:
'    Closes the form without copying the Rebuilt Part estimate.
'-------------------------------------------------------
Private Sub cmdCancel_Click()
    On Error GoTo Error_Handler:
    
    Unload Me
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdCancel_Click", g_l_ErrorLineNumber
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub txtNewRBNumber_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtNewRBNumber edit-box to upper case.
    l_CursorPosition = txtNewRBNumber.SelStart
    str_Data = txtNewRBNumber.Text
    str_Data = UCase(str_Data)
    txtNewRBNumber.Text = str_Data
    txtNewRBNumber.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtNewRBNumber_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtNewMMSStockCode_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtNewMMSStockCode edit-box to upper case.
    l_CursorPosition = txtNewMMSStockCode.SelStart
    str_Data = txtNewMMSStockCode.Text
    str_Data = UCase(str_Data)
    txtNewMMSStockCode.Text = str_Data
    txtNewMMSStockCode.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtNewMMSStockCode", g_l_ErrorLineNumber
End Sub
Option Explicit

Private m_l_VehicleID As Long

'-------------------------------------------------------
' Purpose:
'    Allows the user to pass a Vehicle ID to the form
'    and populates the form with the information for the
'    vehicle corresponding to this ID.
'-------------------------------------------------------
Public Sub PassVehicleID(l_VehicleID As Long)
    On Error GoTo Error_Handler:
    
    ' Pass the vehicle estimate ID
    m_l_VehicleID = l_VehicleID
    txtEstimateNumber.Text = Trim(CStr(m_l_VehicleID))
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PassVehicleID", g_l_ErrorLineNumber
End Sub

'-------------------------------------------------------
' Purpose:
'    Creates a new Vehicle Estimate as a copy of an
'    existing vehicle estimate
'-------------------------------------------------------
Private Sub cmdCopy_Click()
    Dim l_NewID As Long
    Dim l_RetVal As Long
    Dim l_Result As Long

    On Error GoTo Error_Handler:

    Call SetWaitCursor

    'Make sure that a Bus Series is Provided
    If Trim(cboBusSeries.Text) = "" Then
        Call SetDefaultCursor
        MsgBox "Please select a Vehicle Series.", vbExclamation, "Copy Vehicle Estimate"
        cboBusSeries.SetFocus
        Exit Sub
    End If

    'Make sure that a Description is Provided
    If Trim(cboDescription.Text) = "" Then
        Call SetDefaultCursor
        MsgBox "Please select a Description.", vbExclamation, "Copy Vehicle Estimate"
        cboDescription.SetFocus
        Exit Sub
    End If
    
    'Copy the Vehicle Estimate
    l_Result = CopyVehicleEstimate("CES_UPDATE.COPY_VEHICLE_ESTIMATE", _
                                   l_RetVal, _
                                   m_l_VehicleID, _
                                   UCase(Trim(cboBusSeries.Text)), _
                                   UCase(Trim(cboDescription.Text)))

    ' Determine whether the copy was successful
    If l_Result >= 0 Then
        Call SetDefaultCursor
        MsgBox "Vehicle Estimate was copied successfully." & _
                Chr(13) & "The new Vehicle Estimate Number is " & _
                Trim(CStr(l_Result)) & ".", _
                vbInformation, _
                "Copy Vehile Estimate"
    Else
        Call SetDefaultCursor
        MsgBox "There was an error while copying Vehicle Estimate." & _
               Chr(13) & "Vehicle Estimate was not copied successfully.", _
               vbCritical, _
               "Copy Vehicle Estimate"
    End If
    
    Call SetDefaultCursor
    Unload Me

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdCopy_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

'-------------------------------------------------------
' Purpose:
'    When the form loads, populates the combo boxes
'-------------------------------------------------------
Private Sub Form_Load()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler:
    
    Call SetWaitCursor
    
    ' Populate the vehicle series combo box
    Set RS = modDBHelper.RetrieveListOfBuses("CES_INQUIRY.RETRIEVE_LIST_OF_BUSES")
    Set cboBusSeries.RowSource = RS
    cboBusSeries.ListField = "DESCRIPTION"
    
    ' Populate the descripton combo box
    Set RS = modDBHelper.RetrieveVehicleEstimates("CES_INQUIRY.RETRIEVE_VEHICLE_ESTIMATES")
    Set cboDescription.RowSource = RS
    cboDescription.ListField = "PROJ_DESC"
    
    
    ' Populate the bus series and description from the ID
    Set RS = modDBHelper.RetrieveVehicleEstimates("CES_INQUIRY.RETRIEVE_VEHICLE_ESTIMATES")
    If RS.RecordCount > 0 Then
        RS.Filter = "VEHICLE_LIST_ID = " + CStr(m_l_VehicleID)
        txtBusSeries.Text = RS.Fields.Item("VEH_SERIES_CODE")
        txtDescription.Text = RS.Fields.Item("PROJ_DESC")
    End If

    Set RS = Nothing
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

'-------------------------------------------------------
' Purpose:
'    Closes the form without copying the vehicle.
'-------------------------------------------------------
Private Sub cmdCancel_Click()
    On Error GoTo Error_Handler:
    
    Unload Me
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdCancel_Click", g_l_ErrorLineNumber
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub
Option Explicit

Private m_str_Msg As String

Public m_str_BusDescription As String
Public m_l_BusDescriptionID As Long

Private Sub cmdCancel_Click()
    On Error GoTo Error_Handler
    
    Unload Me
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdCancel_Click", g_l_ErrorLineNumber
End Sub

Private Sub cmdSave_Click()
    Dim RS As ADODB.Recordset
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_NewBusDescription As String
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor

    str_NewBusDescription = Trim(txtNewBusDescription.Text)
    
    'Check that Bus' Description can not be an empty string.
    If str_NewBusDescription = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Vehicle description should not be empty."
        MsgBox m_str_Msg, vbOKOnly + vbInformation
        txtNewBusDescription.SetFocus
        Exit Sub
    Else
        str_NewBusDescription = UCase(str_NewBusDescription)
    End If
    
    'Check that data from the txtNewBusDescription edit-box is not duplicated in the
    'LIST_OF_BUSES table
    Set RS = New ADODB.Recordset
   
    Set RS = modDBHelper.FindTaskDescription("CES_INQUIRY.FIND_BUS_DESCRIPTION", _
                                             str_NewBusDescription)
    If RS.RecordCount > 0 Then
        Call SetDefaultCursor
        Set RS = Nothing
        m_str_Msg = "The same vehicle description already exists. Please provide another one."
        MsgBox m_str_Msg, vbOKOnly + vbInformation
        txtNewBusDescription.SetFocus
        Exit Sub
    End If
    
    Set RS = Nothing
    
    'Update record in the LIST_OF_BUSES and VEHICLE_LIST tables.
    l_Result = modDBHelper.UpdateBusDescription( _
                                        "CES_UPDATE.UPDATE_BUS_DESCRIPTION", _
                                        l_RetVal, _
                                        m_str_BusDescription, _
                                        str_NewBusDescription, _
                                        m_l_BusDescriptionID)
    If l_Result = 0 Then
        Call SetDefaultCursor
        m_str_Msg = "Vehicle description is updated."
        MsgBox m_str_Msg, vbOKOnly + vbInformation
        'Refresh grdListOfBuses grid in the frmListOfBuses form.
        Call frmListOfBuses.FillGrid

        'Add record to the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                                    "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                                    l_RetVal, _
                                    "Vehicle Description was updated in the System", _
                                    0, _
                                    "MLB", _
                                    "Current Vehicle Description ---> " + m_str_BusDescription, _
                                    "New Vehicle Description ---> " + str_NewBusDescription)
        Unload Me
    Else
        'For some reason record was not updated in the LIST_OF_BUSES table.
        m_str_Msg = "Vehicle description was not updated. Please contact administrator."
        MsgBox m_str_Msg, vbOKOnly + vbInformation
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdSave_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    txtBusDescription.Text = m_str_BusDescription
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub
'=====================================================================
'frmMain.frm
'
'Used as the main navigation of the application.  User can access a
'variety of options/forms from the menu.
'
'=====================================================================

Option Explicit

Private Const SW_SHOWMAXIMIZED As Long = 3
Private m_str_Msg As String

'Retrieves the user's access level and restricts the user according to
'their specified access level
Private Sub UserPermissions()
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel <> 10 Then
        'Level 10 is fo programmers only!!!!
        mnuUtilities.Visible = False
    End If
    If g_l_AccessLevel = 4 Then
        'No restrictions for users with Level 4.
    ElseIf g_l_AccessLevel = 3 Then
        
        'Menu <File> and all it's submenues are enabled.
        'Menu <Rebuilt Parts> and all it's submenues are enabeld.
        'Menu <Bus Estimate> and all it's submenues are enabeld.
        'Menu <Make/Buy> and all it's submenues are enabeld.
        'Menu <S.O.P.> and all it's submenues are enabeld.
        'Menu <Reports> and all it's submenues are enabeld.
        'Menu <Archived Estimates> and all it's submenues are enabled.
        'Menu <Administration>. Only submenu <Change Password> and <Change Settings>
        'are enabled.
        mnuLabourLists.Enabled = False
        mnuMasterLists.Enabled = False
        
        mnuUsers.Enabled = False
        mnuListOfBuses.Enabled = False
        mnuHistoryLog.Enabled = False

    ElseIf g_l_AccessLevel = 2 Then
        'Menu <File> and all it's submenues are enabled.
        'Menu <Rebuilt Parts>. Only submenu <Search Parts> is enabled.
        mnuAddRebuiltPart.Enabled = False
        mnuAddNonStockPart.Enabled = False
        'Menu <Bus Estimate>. Only submenu <Search Bus Estimates> is enabled.
        mnuNewVehicleEstimate.Enabled = False
        mnuAddOEMKit.Enabled = False
        'Menu <Make/Buy>. Only submenu <Search Make vs. Buy> is enabled.
        mnuAddMakeBuy.Enabled = False
        'Menu <S.O.P.> and all it's submenues are enabeld.
        'Menu <Reports> and all it's submenues are enabeld.
        'Menu <Administration>. Only submenu <Change Password> and <Change Settings>
        'are enabled.
        mnuLabourLists.Enabled = False
        mnuMasterLists.Enabled = False
        
        mnuUsers.Enabled = False
        mnuListOfBuses.Enabled = False
        mnuHistoryLog.Enabled = False
        mnuSearchArchivedEstimates.Enabled = False
    ElseIf g_l_AccessLevel = 1 Then
        'Menu <File> and all it's submenues are enabled.
        mnuMakeBuy.Enabled = False
        mnuRebuiltParts.Enabled = False
        mnuBusEstimate.Enabled = False
        mnuHelp.Enabled = False
        mnuAnalysisReports.Enabled = False
        mnuArchivedEstimates.Enabled = False
        mnuMakeBuySummary.Enabled = False
        mnuOEMKits.Enabled = False
        

        'Menu <Rebuilt Parts>. Only submenu <Search Parts> is enabled.
        mnuAddRebuiltPart.Enabled = False
        mnuAddNonStockPart.Enabled = False
        'Menu <Bus Estimate>. Only submenu <Search Bus Estimates> is enabled.
        mnuNewVehicleEstimate.Enabled = False
        mnuAddOEMKit.Enabled = False
        'Menu <Make/Buy> and all submenues are disabled.
        mnuMakeBuy.Enabled = False
        'Menu <S.O.P.> and all it's submenues are enabled.
        
        'Menu <Administration>. Only submenu <Change Password> is enabled.
        mnuChangeSettings.Enabled = False
        mnuLabourLists.Enabled = False
        mnuMasterLists.Enabled = False
        mnuUsers.Enabled = False
        mnuListOfBuses.Enabled = False
        
        'Menu <Reports> and all it's submenues are enabled.
        mnuReports.Enabled = True
        mnuHistoryLog.Enabled = False
        mnuSearchArchivedEstimates.Enabled = False
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "UserPermissions", g_l_ErrorLineNumber
End Sub

Private Sub MDIForm_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    Dim l_Count As Long
    Dim str_FormName As String

    On Error GoTo Error_Handler
    
    Call SetDefaultCursor
    
    'Close all not closed forms, except frmMain.
    Dim frmToClose As Form
    For Each frmToClose In Forms
        If frmToClose.Name <> "frmMain" Then
            If Not frmToClose Is Nothing Then Unload frmToClose
        End If
    Next
    
    If Not g_Conn Is Nothing Then
        Set g_Conn = Nothing
    End If
    'Destroy the cursors
    Call DestroyCursors
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "MDIForm_QueryUnload", g_l_ErrorLineNumber
End Sub

Private Sub mnuAbout_Click()
    On Error GoTo Error_Handler
    
    frmAbout.Show vbModal
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuAbout_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuAddMakeBuy_Click()
    On Error GoTo Error_Handler
    
    frmMakeBuy.txtMakeBuyNumber.Enabled = True
    frmMakeBuy.Show vbModal
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuAddMakeBuy_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuAddNonStockPart_Click()
    On Error GoTo Error_Handler
    
    If frmAddNonStockCodedPart.WindowState = 1 Or _
       frmAddNonStockCodedPart.WindowState = 2 Then
        frmAddNonStockCodedPart.WindowState = 0
    End If
    frmAddNonStockCodedPart.Height = 2805
    frmAddNonStockCodedPart.Width = 9105
    frmAddNonStockCodedPart.Show

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuAddNonStockPart_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuAddOEMKit_Click()
    On Error GoTo Error_Handler
    
    frmAddOEMKit.Show vbModal

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuAddRebuiltPart_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuAddRebuiltPart_Click()
    On Error GoTo Error_Handler
    
    If frmAddRebuiltPart.WindowState = 1 Or frmAddRebuiltPart.WindowState = 2 Then
        frmAddRebuiltPart.WindowState = 0
    End If
    
    frmAddRebuiltPart.Show vbModal

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuAddRebuiltPart_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuCESHelp_Click()
    On Error GoTo Error_Handler

    frmHelp.Show vbModal

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuCESHelp_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuChangePassword_Click()
    On Error GoTo Error_Handler
    
    frmPassword.Show vbModal

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuChangePassword_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuChangeSettings_Click()
    On Error GoTo Error_Handler

    frmChangeSettings.Show vbModal

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuChangeSettings_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuCostEstSendTo_Click()
    On Error GoTo Error_Handler
    
    Call SendEmail

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuCostEstSendTo_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuCleanNSCPTables_Click()
    On Error GoTo Error_Handler

    frmUtilities.Show vbModal

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuCleanNSCPTables_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuCostEstView_Click()
    On Error GoTo Error_Handler

    frmParametersForReport.Show

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuCostEstView_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuEngTransDiff_Click()
    On Error GoTo Error_Handler

    frmVehEquipment.Show

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuEngTransDiff_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuEstimateHistoryLog_Click()
    On Error GoTo Error_Handler
    
    'Close the Audit form if it is opened.
    If Not frmViewAudit Is Nothing Then
        Unload frmViewAudit
    End If
    
    frmViewAudit.m_b_FromAdministration = True
    frmViewAudit.Caption = frmViewAudit.Caption + " - Estimates"
    frmViewAudit.Show

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuEstimateHistoryLog_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuExit_Click()
    On Error GoTo Error_Handler
    
    Unload Me

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuExit_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuLabourGroups_Click()
    On Error GoTo Error_Handler
    
    frmEmployeeGroup.Show

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuLabourDefinition_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuLabourTaskDescription_Click()
    On Error GoTo Error_Handler
    
    frmLabourTaskDescription.Show

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuLabourTaskDefinitions_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuListOfBuses_Click()
    On Error GoTo Error_Handler

    frmListOfBuses.Show
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuListOfBuses_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuMailRecipient_Click()
    On Error GoTo Error_Handler
    
    Call SendEmail

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuMailRecipient_Click", g_l_ErrorLineNumber
End Sub

Private Sub MDIForm_Load()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    Call UserPermissions
    
    g_dbl_NonProductiveTimeAdj = 1#

    Set RS = New ADODB.Recordset
    Set RS = _
        modDBHelper.RetrieveCESSettings("CES_INQUIRY.RETRIEVE_CES_SETTI", "NON_PRODUCTIVE_ADJUSTMENT")
    If RS.RecordCount = 1 Then
        g_dbl_NonProductiveTimeAdj = CDbl(Replace(RS.Fields.Item("VALUE"), ",", "."))
    Else
        m_str_Msg = "Can not retrieve NON_PRODUCTIVE_ADJUSTMENT from the CES_SETTINGS "
        m_str_Msg = m_str_Msg + "table. Please contact Supervisor."
        MsgBox m_str_Msg, vbCritical + vbExclamation
    End If

    If g_str_UserName = "ALEX" Then
        mnuSettingsHistoryLog.Visible = True
    Else
        mnuSettingsHistoryLog.Visible = False
    End If

    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "MDIForm_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub mnuMakeModelYear_Click()
    On Error GoTo Error_Handler
    
    If frmAddVehicleType.WindowState = 1 Or frmAddVehicleType.WindowState = 2 Then
        frmAddVehicleType.WindowState = 0
    End If
    frmAddVehicleType.Show

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuMakeModelYear_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuNewVehicleEstimate_Click()
    On Error GoTo Error_Handler

    If frmAddVehCostEstimate.WindowState = 1 Or frmAddVehCostEstimate.WindowState = 2 Then
        frmAddVehCostEstimate.WindowState = 0
    End If
 
    frmAddVehCostEstimate.Height = 3420
    frmAddVehCostEstimate.Width = 9030
    frmAddVehCostEstimate.Show vbModal

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuNewVehicleEstimate_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuPartsSearch_Click()
    On Error GoTo Error_Handler

    If frmSearchPart.WindowState = 1 Or frmSearchPart.WindowState = 2 Then
        frmSearchPart.WindowState = 0
    End If
    frmSearchPart.Show

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuPartsSearch_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuSalaryRates_Click()
    On Error GoTo Error_Handler

    frmSalaryRates.Show

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuSalaryRates_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuSearchArchivedEstimates_Click()
    On Error GoTo Error_Handler

    frmArchivedHistory.Show
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuSearchArchivedEstimates_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuSearchBus_Click()
    On Error GoTo Error_Handler

    If frmSearchVehEstimate.WindowState = 1 Or frmSearchVehEstimate.WindowState = 2 Then
        frmSearchVehEstimate.WindowState = 0
    End If
    
    frmSearchVehEstimate.Show

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuSearchBus_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuSearchMakeBuy_Click()
    On Error GoTo Error_Handler

    frmSearchMB.Show

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuSearchMakeBuy_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuSettingsHistoryLog_Click()
    On Error GoTo Error_Handler

    frmViewSettingsHistoryLog.Show
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuSettingsHistoryLog_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuTileHor_Click()
    On Error GoTo Error_Handler
    
    Me.Arrange vbTileHorizontal
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuTileHor_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuTileVer_Click()
    On Error GoTo Error_Handler
    
    Me.Arrange vbTileVertical
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuTileVer_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuCascade_Click()
    On Error GoTo Error_Handler
    
    Me.Arrange vbCascade
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuCascade_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuArrange_Click()
    On Error GoTo Error_Handler
    
    Me.Arrange vbArrangeIcons
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuArrange_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuUsers_Click()
    On Error GoTo Error_Handler
    
    frmUsers.Show

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuUsers_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuVersionInfo_Click()
On Error GoTo Error_Handler
  
    frmVersionInfo.Show
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuViewCostVariance_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuViewCostVariance_Click()
On Error GoTo Error_Handler
  
    showCostVarianceReport
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuViewCostVariance_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuViewLabourComparison_Click()
On Error GoTo Error_Handler

    frmParamLabourComparison.Show

   Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuViewLabourComparison_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuViewMakeBuySummary_Click()
    On Error GoTo Error_Handler

    frmParamMakeBuyReport.Show

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuViewMakeBuySummary_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuViewMaterialsComparison_Click()
On Error GoTo Error_Handler

    frmParamMaterialsComparison.Show

   Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuViewMaterialsComparison_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuViewMBConversions_Click()
On Error GoTo Error_Handler

    frmParamMBConversionsReport.Show

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuViewMBConversions_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuViewOEMKits_Click()
On Error GoTo Error_Handler

    frmParamOEMKitsReport.Show

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuViewOEMKits_Click", g_l_ErrorLineNumber
End Sub

Private Sub mnuViewSOP_Click()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.RetrieveCESSettings("CES_INQUIRY.RETRIEVE_CES_SETTI", _
                                             "SOP_FILE_NAME")
    
    If RS.EOF = False Then
        'Open the SOP PDF File using the default PDF viewer
        ShellExecute GetDesktopWindow, _
                     "Open", _
                     RS.Fields.Item("VALUE"), _
                     "", _
                     "C:\", _
                     SW_SHOWMAXIMIZED
    End If
    
    Set RS = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuViewSOP_Click", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub mnuViewVehicleCostEstimate_Click()
    On Error GoTo Error_Handler

    frmParamVehicleReport.Show

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuViewVehicleCostEstimate_Click", g_l_ErrorLineNumber
End Sub

Private Sub unitCostSummerView_Click()
 Dim RS As ADODB.Recordset
    On Error GoTo Error_Handler
        
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.RetrieveCESSettings("CES_INQUIRY.RETRIEVE_CES_SETTI", _
                                             "UNIT_COST_SUMMARY_PATH")
    
    If RS.EOF = False Then
        'Open the Unit Cost Excel File using the default viewer
        ShellExecute GetDesktopWindow, _
                     "Open", _
                     RS.Fields.Item("VALUE"), _
                     "", _
                     "C:\", _
                     SW_SHOWMAXIMIZED
    End If
    
    Set RS = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "unitCostSummerView_Click", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

'File location must be put in the table for retrieval
Option Explicit

Private m_str_Msg As String
'All public variables (i.e. variables set up from other form) in this form
'should be deinitialize in the Query_Unload event
Public m_str_MBNumber As String
Public m_str_ArchiveID As String
Dim objWdApp As Word.Application
Private m_str_OptSample As String
Private m_str_OptRecommend As String
Private m_var_RowID As Variant
Private m_l_Selected() As Long
Private m_l_ArraySize As Long

Private m_str_BusType As String
Public m_str_AuditReference As String
'Only up to 10 selected buses from the lstListOfBuses list-box will be saved into the
'AUDIT_MODIFY_HISTORY table. If you want increase this quantity, you should increase
'next constant variable, and make changes in the InsertIntoAuditModifyHistory call.
Private Const m_const_l_SelectedBusesSize As Long = 9
Private m_str_SelectedBuses() As String

Private Sub Check1_Click()

End Sub


Private Sub chkbxUseManualEntry_Click()
    Dim RS As ADODB.Recordset
    On Error GoTo Error_Handler
        Set RS = New ADODB.Recordset
        Set RS = modDBHelper.RetrieveMB("CES_INQUIRY.RETRIEVE_MB")
    
        RS.Filter = "MB_NUMBER = '" + m_str_MBNumber + "'"
        If chkbxUseManualEntry.Value = 1 Then
            txtBuyNewCost.Text = Format(RS.Fields.Item("BUY_NEW_COST"), "currency")
        End If
        Set RS = Nothing
        Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdAdd_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub cmdAdd_Click()
    Dim str_OptRecommend As String
    Dim str_OptSample As String
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim l_Count As Long
    Dim l_Count1 As Long
    Dim str_MakeBuyNumber As String
    Dim str_Keyword As String
    Dim str_BriefDescription As String
    Dim str_NumberOfBus As String
    Dim str_VendorPartNumber As String
    Dim str_BuyCode As String
    Dim str_CoreCost As String
    Dim str_JobNumber As String
    Dim str_SampleProvided As String
    Dim strRecommendation As String
    
    On Error GoTo Error_Handler
    
    'Make sure that user typed something into the txtMakeBuyNumber edit-box.
    str_MakeBuyNumber = Trim(txtMakeBuyNumber.Text)
    If str_MakeBuyNumber = "" Then
        m_str_Msg = "Please provide Make or Buy Number."
        MsgBox m_str_Msg
        txtMakeBuyNumber.SetFocus
        Exit Sub
    End If
    
    'Make sure that user typed something into the txtKeyword edit-box.
    str_Keyword = Trim(txtKeyword.Text)
    If str_Keyword = "" Then
        m_str_Msg = "Please provide Keyword."
        MsgBox m_str_Msg
        txtKeyword.SetFocus
        Exit Sub
    End If
    
    'Make sure that user typed something into the txtBriefDescription edit-box.
    str_BriefDescription = Trim(txtBriefDescription.Text)
    If str_BriefDescription = "" Then
        m_str_Msg = "Please provide Brief Description."
        MsgBox m_str_Msg
        txtBriefDescription.SetFocus
        Exit Sub
    End If
    
    'Make sure that user typed something into the txtNumberOfBus edit-box.
    str_NumberOfBus = Trim(txtNumberOfBus.Text)
    If str_NumberOfBus = "" Then
        m_str_Msg = "Please provide Number Of Vehicle Using Component."
        MsgBox m_str_Msg
        txtNumberOfBus.SetFocus
        Exit Sub
    End If
    
    'Make sure that user typed something into the txtVendorPartNumber edit-box.
    str_VendorPartNumber = Trim(txtVendorPartNumber.Text)
    If str_VendorPartNumber = "" Then
        m_str_Msg = "Please provide Vendor Part Number."
        MsgBox m_str_Msg
        txtVendorPartNumber.SetFocus
        Exit Sub
    End If
    
    str_BuyCode = Trim(txtBuyCode.Text)
    
    'Make sure that user choused at least one bus from the lstListOfBuses list-box.
    If lstListOfBuses.ListCount > 0 Then
        If lstListOfBuses.SelCount = 0 Then
            m_str_Msg = "Please choose Vehicle."
            MsgBox m_str_Msg
            lstListOfBuses.SetFocus
            Exit Sub
        End If
    Else
        'No items in the lstListOfBuses list-box. But user should choose some bus.
        m_str_Msg = "No vehicles to choose from. Make Buy will not be "
        m_str_Msg = m_str_Msg + "added. Report this error to Supervisor."
        MsgBox m_str_Msg
        lstListOfBuses.SetFocus
        Exit Sub
    End If
    
    If optYes = True Then
        str_OptSample = "Y"
    Else
        str_OptSample = "N"
    End If
    
    If optRecommendation1 = True Then
        str_OptRecommend = "1"
    ElseIf optRecommendation2 = True Then
        str_OptRecommend = "2"
    ElseIf optRecommendation3 = True Then
        str_OptRecommend = "3"
    Else
        str_OptRecommend = "4"
    End If
    
    'If user typed some data into the txtCoreCost edit-box, this data should be double.
    str_CoreCost = Trim(txtCoreCost)
    If str_CoreCost = "" Then
        m_str_Msg = "Core Cost should be a positive number."
        MsgBox m_str_Msg
        txtCoreCost.SetFocus
        Exit Sub
    End If
    
    If IsNumeric(str_CoreCost) = False Then
        m_str_Msg = "Core Cost should be a positive number."
        MsgBox m_str_Msg
        txtCoreCost.SetFocus
        Exit Sub
    End If
    'Check that Core Cost > 0.
    If CDbl(str_CoreCost) < 0 Then
        m_str_Msg = "Core Cost should be a positive number."
        MsgBox m_str_Msg
        txtCoreCost.SetFocus
        Exit Sub
    End If
    str_CoreCost = "$" + CStr(CDbl(str_CoreCost))
    txtCoreCost.Text = str_CoreCost
    
    'Data from the txtJobNumber is not reqiured (can be empty). But, if data is provided
    'it should be a positive number (long).
    str_JobNumber = Trim(txtJobNumber.Text)
    If str_JobNumber <> "" Then
        If IsNumeric(str_JobNumber) = False Then
            m_str_Msg = "Job Number should be a positive number."
            MsgBox m_str_Msg
            txtJobNumber.SetFocus
            Exit Sub
        End If
        If CLng(str_JobNumber) < 1 Then
            m_str_Msg = "Job Number should be a positive number."
            MsgBox m_str_Msg
            txtJobNumber.SetFocus
            Exit Sub
        End If
        str_JobNumber = CStr(CLng(str_JobNumber))
        txtJobNumber.Text = str_JobNumber
    End If
    
    If optYes.Value = True Then
        str_SampleProvided = "Value Yes selected"
    Else
        str_SampleProvided = "Value No selected"
    End If

    If optRecommendation1.Value = True Then
        strRecommendation = "Value 1 selected"
    ElseIf optRecommendation2.Value = True Then
        strRecommendation = "Value 2 selected"
    ElseIf optRecommendation3.Value = True Then
        strRecommendation = "Value 3 selected"
    ElseIf optRecommendation4.Value = True Then
        strRecommendation = "Value 4 selected"
    End If
    
    If cmdAdd.Caption = "Add" Then
        l_Result = modDBHelper.AddMB("CES_UPDATE.ADD_MB", _
                                     l_RetVal, _
                                     txtBenchNumber.Text, _
                                     m_str_BusType, _
                                     str_BuyCode, _
                                     txtBuyNewCost.Text, _
                                     txtCoreCode.Text, _
                                     str_BriefDescription, _
                                     txtExternalRebuilt.Text, _
                                     str_Keyword, _
                                     str_MakeBuyNumber, _
                                     str_NumberOfBus, _
                                     txtProjectedAnnualUsage.Text, _
                                     txtRebuildCode.Text, _
                                     txtRemanufactured.Text, _
                                     str_OptRecommend, _
                                     str_OptSample, _
                                     str_VendorPartNumber, _
                                     txtInternalRebuilt.Text, _
                                     txtSOP.Text, _
                                     str_CoreCost, _
                                     str_JobNumber, _
                                     chkbxUseManualEntry.Value)
        'Now we need go through all items in the lstListOfBuses list-box,
        'find only selected items and save data to the MB_LIST_OF_BUSES table.
        ReDim m_str_SelectedBuses(m_const_l_SelectedBusesSize)
        l_Count1 = 0
        If l_Result = 0 Then
        For l_Count = 0 To lstListOfBuses.ListCount - 1
            If lstListOfBuses.Selected(l_Count) = True Then
                l_Result = modDBHelper.InsertMBListOFBuses( _
                                            "CES_UPDATE.INSERT_MB_LIST_OF_BUSES", _
                                            l_RetVal, _
                                            txtMakeBuyNumber.Text, _
                                            lstListOfBuses.ItemData(l_Count))
                If l_Count1 < m_const_l_SelectedBusesSize + 1 Then
                    m_str_SelectedBuses(l_Count1) = lstListOfBuses.List(l_Count)
                End If
                l_Count1 = l_Count1 + 1
            End If
        Next l_Count
        End If
        If (l_Result = 0) Then
            Call SetDefaultCursor
            MsgBox "Make Buy Has been added"
            'Close
        Else
            Call SetDefaultCursor
            MsgBox "Error Adding Make vs. Buy, piece of information was entered Incorrectly or Make vs. Buy number already exists"
        End If
        'Add record to the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", l_RetVal, "Make Vs. Buy Info was added to the System", str_MakeBuyNumber, "MB", _
            "Make Vs. Buy # ---> " + Trim(txtMakeBuyNumber.Text), "Key Word ---> " + Trim(txtKeyword.Text), _
            "Description ---> " + Trim(txtBriefDescription.Text), "Number Of Bus Using Component ---> " + Trim(txtNumberOfBus.Text), _
            "Vendor Part Number ---> " + Trim(txtVendorPartNumber.Text), "MMS Buy Code ---> " + Trim(txtBuyCode.Text), _
            "Rebuild Code ---> " + Trim(txtRebuildCode.Text), "Core Code ---> " + Trim(txtCoreCode.Text), _
            "Core Cost ---> " + Trim(txtCoreCost.Text), "Projected Annual Usage ---> " + Trim(txtProjectedAnnualUsage.Text), _
            "Bench Number ---> " + Trim(txtBenchNumber.Text), "S.O.P. # ---> " + Trim(txtSOP.Text), _
            "Job Number ---> " + Trim(txtJobNumber.Text), "Sample Provided ---> " + str_SampleProvided, _
            "1. External Rebuilt Cost (See Attached Estimate) ---> " + Trim(txtExternalRebuilt.Text), _
            "2. Internal Rebuilt Cost (See Attached Estimate) ---> " + Trim(txtInternalRebuilt.Text), _
            "3. Remanufactured Exchange Cost (If Applicable) ---> " + Trim(txtRemanufactured.Text), _
            "4. Buy New Cost ---> " + Trim(txtBuyNewCost.Text), _
            "Recommendation ---> " + strRecommendation, _
            "Selected Bus 1 ---> " + m_str_SelectedBuses(0), _
            "Selected Bus 2 ---> " + m_str_SelectedBuses(1), _
            "Selected Bus 3 ---> " + m_str_SelectedBuses(2), _
            "Selected Bus 4 ---> " + m_str_SelectedBuses(3), _
            "Selected Bus 5 ---> " + m_str_SelectedBuses(4), _
            "Selected Bus 6 ---> " + m_str_SelectedBuses(5), _
            "Selected Bus 7 ---> " + m_str_SelectedBuses(6), _
            "Selected Bus 8 ---> " + m_str_SelectedBuses(7), _
            "Selected Bus 9 ---> " + m_str_SelectedBuses(8), _
            "Selected Bus 10 ---> " + m_str_SelectedBuses(9))
    ElseIf cmdAdd.Caption = "Update" Then
        l_Result = modDBHelper.UpdateMBList("CES_UPDATE.UPDATE_MB_LIST", _
                                            l_RetVal, _
                                            txtBenchNumber.Text, _
                                            m_str_BusType, _
                                            str_BuyCode, _
                                            txtBuyNewCost.Text, _
                                            txtCoreCode.Text, _
                                            str_BriefDescription, _
                                            txtExternalRebuilt.Text, _
                                            str_Keyword, _
                                            str_MakeBuyNumber, _
                                            str_NumberOfBus, _
                                            txtProjectedAnnualUsage.Text, _
                                            txtRebuildCode.Text, _
                                            txtRemanufactured.Text, _
                                            str_OptRecommend, _
                                            str_OptSample, _
                                            txtInternalRebuilt.Text, _
                                            str_VendorPartNumber, _
                                            txtSOP.Text, _
                                            str_CoreCost, _
                                            str_JobNumber, _
                                            chkbxUseManualEntry.Value, _
                                            m_var_RowID)
    
        'Delete all records from the MB_LIST_OF_BUSES table where
        'MB_LIST_OF_BUSES.MB_NUMBER = txtMakeBuyNumber.Text
        l_Result = modDBHelper.DeleteMBListOFBuses( _
                                    "CES_DELETE.DELETE_MB_LIST_OF_BUSES", _
                                    l_RetVal, _
                                    txtMakeBuyNumber.Text)

        'Now we need go through all items in the lstListOfBuses list-box,
        'find only selected items and save data to the MB_LIST_OF_BUSES table.
        ReDim m_str_SelectedBuses(m_const_l_SelectedBusesSize)
        l_Count1 = 0
        For l_Count = 0 To lstListOfBuses.ListCount - 1
            If lstListOfBuses.Selected(l_Count) = True Then
                l_Result = modDBHelper.InsertMBListOFBuses( _
                                            "CES_UPDATE.INSERT_MB_LIST_OF_BUSES", _
                                            l_RetVal, _
                                            txtMakeBuyNumber.Text, _
                                            lstListOfBuses.ItemData(l_Count))
                If l_Count1 < m_const_l_SelectedBusesSize + 1 Then
                    m_str_SelectedBuses(l_Count1) = lstListOfBuses.List(l_Count)
                End If
                l_Count1 = l_Count1 + 1
            End If
        Next l_Count
        
        If (l_Result = 0) Then
            Call SetDefaultCursor
            MsgBox "Make vs Buy Has been updated."
        Else
            Call SetDefaultCursor
            MsgBox "Error, please try re-entering Part. " & CStr(l_Result)
        End If
    
        'Add record to the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", l_RetVal, "Edit Make Vs. Buy Info", m_str_AuditReference, "MB", _
            "Make Vs. Buy # ---> " + Trim(txtMakeBuyNumber.Text), "Key Word ---> " + Trim(txtKeyword.Text), _
            "Description ---> " + Trim(txtBriefDescription.Text), "Number Of Bus Using Component ---> " + Trim(txtNumberOfBus.Text), _
            "Vendor Part Number ---> " + Trim(txtVendorPartNumber.Text), "MMS Buy Code ---> " + Trim(txtBuyCode.Text), _
            "Rebuild Code ---> " + Trim(txtRebuildCode.Text), "Core Code ---> " + Trim(txtCoreCode.Text), _
            "Core Cost ---> " + Trim(txtCoreCost.Text), "Projected Annual Usage ---> " + Trim(txtProjectedAnnualUsage.Text), _
            "Bench Number ---> " + Trim(txtBenchNumber.Text), "S.O.P. # ---> " + Trim(txtSOP.Text), _
            "Job Number ---> " + Trim(txtJobNumber.Text), "Sample Provided ---> " + str_SampleProvided, _
            "1. External Rebuilt Cost (See Attached Estimate) ---> " + Trim(txtExternalRebuilt.Text), _
            "2. Internal Rebuilt Cost (See Attached Estimate) ---> " + Trim(txtInternalRebuilt.Text), _
            "3. Remanufactured Exchange Cost (If Applicable) ---> " + Trim(txtRemanufactured.Text), _
            "4. Buy New Cost ---> " + Trim(txtBuyNewCost.Text), _
            "Recommendation ---> " + strRecommendation, _
            "Selected Bus 1 ---> " + m_str_SelectedBuses(0), _
            "Selected Bus 2 ---> " + m_str_SelectedBuses(1), _
            "Selected Bus 3 ---> " + m_str_SelectedBuses(2), _
            "Selected Bus 4 ---> " + m_str_SelectedBuses(3), _
            "Selected Bus 5 ---> " + m_str_SelectedBuses(4), _
            "Selected Bus 6 ---> " + m_str_SelectedBuses(5), _
            "Selected Bus 7 ---> " + m_str_SelectedBuses(6), _
            "Selected Bus 8 ---> " + m_str_SelectedBuses(7), _
            "Selected Bus 9 ---> " + m_str_SelectedBuses(8), _
            "Selected Bus 10 ---> " + m_str_SelectedBuses(9))
    
    End If
    
    'Refresh "Search Results" grid on the frmSearchMB form.
    Call frmSearchMB.FillSearchGrid
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdAdd_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub cmdClearSelection_Click()
    Dim l_Count As Long
    
    On Error GoTo Error_Handler

    'If some items are selected, make them unselected.
    For l_Count = 0 To lstListOfBuses.ListCount - 1
        If lstListOfBuses.Selected(l_Count) = True Then
            lstListOfBuses.Selected(l_Count) = False
        End If
    Next l_Count
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdClearSelection_Click", g_l_ErrorLineNumber
End Sub

Private Sub cmdReload_Click()
    Dim l_Count As Long
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor

    'First remove all selection from the lstListOfBuses list-box
    For l_Count = 0 To lstListOfBuses.ListCount - 1
        lstListOfBuses.Selected(l_Count) = False
    Next l_Count

    'Restore initial selections in the lstListOfBuses list-box.
    For l_Count = 0 To m_l_ArraySize
        lstListOfBuses.Selected(m_l_Selected(l_Count)) = True
    Next l_Count
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdReload_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    Call PopulateListOfBuses
    If (m_str_MBNumber <> "") Then
        'Update labels because form is used to update not add
        cmdAdd.Caption = "Update"
        Me.Caption = "Update a Make vs. Buy"
        Call PopulateFields
        Call HighlightItemsInTheListBox
        cmdPrintDocument.Enabled = True
    ElseIf (m_str_ArchiveID <> "") Then
        Me.Caption = "Archived Make vs. Buy Information"
        cmdAdd.Visible = False
        Call populateFieldsArch
        cmdPrintDocument.Enabled = True
    Else
        'Show dollar sign in each edit-box of the "Cost" frame,
        'except txtInternalRebuilt.
        txtExternalRebuilt.Text = ""
        txtRemanufactured.Text = ""
        txtBuyNewCost.Text = ""
        cmdReload.Enabled = False
        cmdPrintDocument.Enabled = False
    End If
    
    Call UserPermissions
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor
    m_str_MBNumber = ""
    m_str_ArchiveID = ""
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub PopulateFields()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler

    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.RetrieveMB("CES_INQUIRY.RETRIEVE_MB")
    
    RS.Filter = "MB_NUMBER = '" + m_str_MBNumber + "'"
    m_var_RowID = RS.Fields.Item("rowid")
    'Load values into text boxes
     
    txtBenchNumber.Text = RS.Fields.Item("BENCH_NUMBER")
    m_str_BusType = RS.Fields.Item("BUS_TYPE")
    txtBuyCode.Text = RS.Fields.Item("BUY_CODE")
    
    chkbxUseManualEntry.Value = RS.Fields.Item("Manualprice")
    If chkbxUseManualEntry Then
        txtBuyNewCost.Text = Format(RS.Fields.Item("BUY_NEW_COST"), "currency") ' Taken out and recalculated as request Sept 2007
    End If
    
    txtCoreCode.Text = RS.Fields.Item("CORE_CODE")
    txtCoreCost.Text = Format(RS.Fields.Item("CORE_COST"), "currency")
    txtBriefDescription.Text = RS.Fields.Item("DESCRIPTION")
    txtExternalRebuilt.Text = Format(RS.Fields.Item("EXTERNAL_COST"), "currency")
    txtKeyword.Text = RS.Fields.Item("KEYWORD")
    txtMakeBuyNumber.Text = RS.Fields.Item("MB_NUMBER")
    txtNumberOfBus.Text = RS.Fields.Item("NUM_BUS_COMP")
    txtProjectedAnnualUsage.Text = RS.Fields.Item("ANNUAL_USAGE")
    txtRebuildCode.Text = RS.Fields.Item("REBUILD_CODE")
    txtRemanufactured.Text = Format(RS.Fields.Item("REMAN_COST"), "currency")
    txtVendorPartNumber.Text = RS.Fields.Item("VENDOR_PART_NUM")
    m_str_OptRecommend = Trim(RS.Fields.Item("RECOMMENDATION"))
    m_str_OptSample = Trim(RS.Fields.Item("SAMPLE_PROVIDED"))
    txtSOP.Text = RS.Fields.Item("SOP_NUMBER")
    frmMakeBuyEstimate.m_str_MBNumber = m_str_MBNumber
    txtInternalRebuilt.Text = Format(frmMakeBuyEstimate.txtTotalRebuiltCost, "currency")
    If IsNull(RS.Fields.Item("JOB_NUMBER")) = False Then
        txtJobNumber.Text = RS.Fields.Item("JOB_NUMBER")
    End If
    
    Set RS = Nothing
    '*****************************************************
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.SearchSCPart("CES_INQUIRY.SEARCH_SC_PART", _
                                            txtBuyCode.Text, _
                                            0, _
                                            "", _
                                            "", _
                                            2)
    '***********************************************************
    
    If RS.EOF And Not (chkbxUseManualEntry = 1) Then
        txtBuyNewCost.Text = Format(0, "currency")
    ElseIf Not (chkbxUseManualEntry = 1) Then
        txtBuyNewCost.Text = Format(RS.Fields.Item("PRICE"), "currency")
    End If
    
    
    If (m_str_OptSample = "Y") Then
        optYes.Value = True
    Else
        optNo.Value = True
    End If
    
    If (m_str_OptRecommend = "1") Then
        optRecommendation1.Value = True
    ElseIf (m_str_OptRecommend = "2") Then
        optRecommendation2.Value = True
    Else
        optRecommendation3.Value = True
    End If
        
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateFields", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

'---------------------------------------------------------------------------------------
' Procedure : PopulateFieldsArch
' Purpose   : Populate page from an Archived MB Estimate
'---------------------------------------------------------------------------------------
'
Private Sub populateFieldsArch()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    cmdClearSelection.Visible = False
    cmdReload.Visible = False
    lblListOfBuses.Visible = False
    lstListOfBuses.Visible = False
    
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.RetrieveArchMB("CES_ARCHIVE.GET_ARCH_MB_MASTERLIST_BY_ID", _
                                            m_str_ArchiveID)
    'Load values into text boxes
    txtBenchNumber.Text = RS.Fields.Item("BENCH_NUMBER")
    m_str_BusType = RS.Fields.Item("BUS_TYPE")
    txtBuyCode.Text = RS.Fields.Item("BUY_CODE")
    If chkbxUseManualEntry Then
        txtBuyNewCost.Text = RS.Fields.Item("BUY_NEW_COST")
    End If
    txtCoreCode.Text = RS.Fields.Item("CORE_CODE")
    txtCoreCost.Text = Format(RS.Fields.Item("CORE_COST"), "currency")
    txtBriefDescription.Text = RS.Fields.Item("DESCRIPTION")
    txtExternalRebuilt.Text = Format(RS.Fields.Item("EXTERNAL_COST"), "currency")
    txtKeyword.Text = RS.Fields.Item("KEYWORD")
    txtMakeBuyNumber.Text = RS.Fields.Item("MB_NUMBER")
    txtNumberOfBus.Text = RS.Fields.Item("NUM_BUS_COMP")
    txtProjectedAnnualUsage.Text = RS.Fields.Item("ANNUAL_USAGE")
    txtRebuildCode.Text = RS.Fields.Item("REBUILD_CODE")
    txtRemanufactured.Text = Format(RS.Fields.Item("REMAN_COST"), "currency")
    txtVendorPartNumber.Text = RS.Fields.Item("VENDOR_PART_NUM")
    m_str_OptRecommend = Trim(RS.Fields.Item("RECOMMENDATION"))
    m_str_OptSample = Trim(RS.Fields.Item("SAMPLE_PROVIDED"))
    txtInternalRebuilt.Text = Format(RS.Fields.Item("TOTAL_COST_TAX"), "currency")
    txtSOP.Text = RS.Fields.Item("SOP_NUMBER")
    frmMakeBuyEstimate.m_str_MBNumber = m_str_MBNumber

    If IsNull(RS.Fields.Item("JOB_NUMBER")) = False Then
        txtJobNumber.Text = RS.Fields.Item("JOB_NUMBER")
    End If
    
    Set RS = Nothing
    
    If (m_str_OptSample = "Y") Then
        optYes.Value = True
    Else
        optNo.Value = True
    End If
    
    If (m_str_OptRecommend = "1") Then
        optRecommendation1.Value = True
    ElseIf (m_str_OptRecommend = "2") Then
        optRecommendation2.Value = True
    Else
        optRecommendation3.Value = True
    End If
        
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateFieldsArch", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub cmdPrintDocument_Click()
    Dim objWdDoc As Word.Document
    Dim objwdRange As Word.Range
    'default with empty string for str_BusesSelected
    Dim str_BusesSelected As String
    Dim l_Count As Long
    Dim str_DocumentPath As String
    Dim RS As ADODB.Recordset

    On Error GoTo Error_Handler
    If (m_str_MBNumber <> "") Then
        PopulateFields
    ElseIf (m_str_ArchiveID <> "") Then
        populateFieldsArch
    End If
    
    Call SetWaitCursor
    
    str_BusesSelected = ""

    Call CreateWApp

    'Create instance of Word Application
    Set RS = modDBHelper.RetrieveCESSettings("CES_INQUIRY.RETRIEVE_CES_SETTI", "WORD_DOC_PATH")
    'Total each of the sections
    If RS.RecordCount = 1 Then
        str_DocumentPath = RS.Fields.Item("VALUE")
    End If

    Set objWdDoc = objWdApp.Documents.Open(str_DocumentPath)

    Set RS = Nothing
    'Set the range equal to the entire word doc
    Set objwdRange = objWdDoc.Range
    
    'Loop through the list of buses and concatenate all buses that were selected to send
    'to the word document
    
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.RetrieveListOfBuses("CES_INQUIRY.RETRIEVE_LIST_OF_BUSES")
    
    If RS.RecordCount > 0 Then
        For l_Count = 0 To lstListOfBuses.ListCount - 1
            If lstListOfBuses.Selected(l_Count) = True Then
                str_BusesSelected = str_BusesSelected + lstListOfBuses.List(l_Count) + ", "
            End If
         Next l_Count
    
        str_BusesSelected = str_BusesSelected + "."
        str_BusesSelected = Replace(str_BusesSelected, ", .", "")
    End If
     
    If optYes.Value = True Then
        m_str_OptSample = "Y"
    Else
        m_str_OptSample = "N"
    End If
    
    With objwdRange
        .Fields(1).Result.Text = txtMakeBuyNumber.Text
        .Fields(2).Result.Text = txtKeyword.Text
        .Fields(3).Result.Text = txtBriefDescription.Text
        .Fields(4).Result.Text = str_BusesSelected
        .Fields(5).Result.Text = txtNumberOfBus.Text
        .Fields(6).Result.Text = txtVendorPartNumber.Text
        .Fields(7).Result.Text = txtBuyCode.Text
        .Fields(8).Result.Text = txtRebuildCode.Text
        .Fields(9).Result.Text = txtCoreCode.Text
        .Fields(10).Result.Text = txtJobNumber.Text
        .Fields(11).Result.Text = txtInternalRebuilt.Text
        .Fields(12).Result.Text = txtRemanufactured.Text
        .Fields(13).Result.Text = txtBuyNewCost.Text
        
        'Removed as per Request# 228626
        '.Fields(14).Result.Text = m_str_OptRecommend
        
    End With
    objWdApp.Visible = True

    Set objWdApp = Nothing
    Set objWdDoc = Nothing
    Set objwdRange = Nothing
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdPrintDocument_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub PopulateListOfBuses()
    Dim RS As ADODB.Recordset
    Dim l_Count As Long
    
    On Error GoTo Error_Handler

    lstListOfBuses.Clear
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.RetrieveListOfBuses("CES_INQUIRY.RETRIEVE_LIST_OF_BUSES")
    
    'Here we will not use:
    'Set lstListOfBuses.DataSource = RS
    'but we will use loop because we need to add ItemData = RS.Fields.Item("LIST_ID")
    'to each added item.
    
    If RS.RecordCount > 0 Then
        RS.MoveFirst
        For l_Count = 0 To RS.RecordCount - 1
            lstListOfBuses.AddItem RS.Fields.Item("DESCRIPTION")
            lstListOfBuses.ItemData(lstListOfBuses.NewIndex) = CLng(RS.Fields.Item("LIST_ID"))
            RS.MoveNext
        Next l_Count
    Else
        'Make buttons cmdReload and cmdClearSelection disabled.
        cmdReload.Enabled = False
        cmdClearSelection.Enabled = False
    End If
    
    Set RS = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateListOfBuses", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub HighlightItemsInTheListBox()
    Dim RS As ADODB.Recordset
    Dim l_Count As Long
    Dim l_Count1 As Long
    Dim l_ListID As Long
    
    On Error GoTo Error_Handler

    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.RetrieveMBListOfBuses("CES_INQUIRY.MB_LIST_BUSES", _
                                               txtMakeBuyNumber.Text)

    m_l_ArraySize = -1
    'Go through whole recordset and highlight all corresponded items in the
    'lstListOfBuses list-box.
    If RS.RecordCount > 0 Then
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
            l_ListID = CLng(RS.Fields.Item("LIST_ID"))
            For l_Count1 = 0 To lstListOfBuses.ListCount - 1
                If lstListOfBuses.ItemData(l_Count1) = l_ListID Then
                    lstListOfBuses.Selected(l_Count1) = True
                    'Save current l_ListID into array m_l_Selected. We can use this array
                    'later in case we want restore initial selections in the
                    'lstListOfBuses list-box (see cmdReload_Click(...))
                    m_l_ArraySize = m_l_ArraySize + 1
                    ReDim Preserve m_l_Selected(m_l_ArraySize)
                    m_l_Selected(m_l_ArraySize) = l_Count1
                    Exit For
                End If
            Next l_Count1
            
            RS.MoveNext
        Next l_Count
    End If
    
    Set RS = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "HighlightItemsInTheListBox", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub txtBenchNumber_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtBenchNumber edit-box to upper case.
    l_CursorPosition = txtBenchNumber.SelStart
    str_Data = txtBenchNumber.Text
    str_Data = UCase(str_Data)
    txtBenchNumber.Text = str_Data
    txtBenchNumber.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtBenchNumber_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtBriefDescription_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String

    On Error GoTo Error_Handler

    'Convert data in the txtBriefDescription edit-box to upper case.
    l_CursorPosition = txtBriefDescription.SelStart
    str_Data = txtBriefDescription.Text
    str_Data = UCase(str_Data)
    txtBriefDescription.Text = str_Data
    txtBriefDescription.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtBriefDescription_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtBuyCode_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtBuyCode edit-box to upper case.
    l_CursorPosition = txtBuyCode.SelStart
    str_Data = txtBuyCode.Text
    str_Data = UCase(str_Data)
    txtBuyCode.Text = str_Data
    txtBuyCode.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtBuyCode_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtBuyNewCost_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtBuyNewCost edit-box to upper case.
    l_CursorPosition = txtBuyNewCost.SelStart
    str_Data = txtBuyNewCost.Text
    str_Data = UCase(str_Data)
    txtBuyNewCost.Text = str_Data
    txtBuyNewCost.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtBuyNewCost_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtBuyNewCost_GotFocus()
    On Error GoTo Error_Handler
    
    'Set cursor after last character.
    txtBuyNewCost.SelStart = Len(txtBuyNewCost.Text)
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtBuyNewCost_GotFocus", g_l_ErrorLineNumber
End Sub

Private Sub txtCoreCode_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtCoreCode edit-box to upper case.
    l_CursorPosition = txtCoreCode.SelStart
    str_Data = txtCoreCode.Text
    str_Data = UCase(str_Data)
    txtCoreCode.Text = str_Data
    txtCoreCode.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtCoreCode_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtCoreCost_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtCoreCost edit-box to upper case.
    l_CursorPosition = txtCoreCost.SelStart
    str_Data = txtCoreCost.Text
    str_Data = UCase(str_Data)
    txtCoreCost.Text = str_Data
    txtCoreCost.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtCoreCost_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtExternalRebuilt_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtExternalRebuilt edit-box to upper case.
    l_CursorPosition = txtExternalRebuilt.SelStart
    str_Data = txtExternalRebuilt.Text
    str_Data = UCase(str_Data)
    txtExternalRebuilt.Text = str_Data
    txtExternalRebuilt.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtExternalRebuilt_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtInternalRebuilt_GotFocus()
    On Error GoTo Error_Handler
    
    'Set cursor after last character.
    txtInternalRebuilt.SelStart = Len(txtInternalRebuilt.Text)
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtInternalRebuilt_GotFocus", g_l_ErrorLineNumber
End Sub

Private Sub txtJobNumber_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String

    On Error GoTo Error_Handler

    'Convert data in the txtJobNumber edit-box to upper case.
    l_CursorPosition = txtJobNumber.SelStart
    str_Data = txtJobNumber.Text
    str_Data = UCase(str_Data)
    txtJobNumber.Text = str_Data
    txtJobNumber.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtJobNumber_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtKeyword_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String

    On Error GoTo Error_Handler

    'Convert data in the txtKeyword edit-box to upper case.
    l_CursorPosition = txtKeyword.SelStart
    str_Data = txtKeyword.Text
    str_Data = UCase(str_Data)
    txtKeyword.Text = str_Data
    txtKeyword.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtKeyword_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtExternalRebuilt_GotFocus()
    On Error GoTo Error_Handler
    
    'Set cursor after last character.
    txtExternalRebuilt.SelStart = Len(txtExternalRebuilt.Text)
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtExternalRebuilt_GotFocus", g_l_ErrorLineNumber
End Sub

Private Sub txtMakeBuyNumber_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String

    On Error GoTo Error_Handler

    'Convert data in the txtMakeBuyNumber edit-box to upper case.
    l_CursorPosition = txtMakeBuyNumber.SelStart
    str_Data = txtMakeBuyNumber.Text
    str_Data = UCase(str_Data)
    txtMakeBuyNumber.Text = str_Data
    txtMakeBuyNumber.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtMakeBuyNumber_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtNumberOfBus_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtNumberOfBus edit-box to upper case.
    l_CursorPosition = txtNumberOfBus.SelStart
    str_Data = txtNumberOfBus.Text
    str_Data = UCase(str_Data)
    txtNumberOfBus.Text = str_Data
    txtNumberOfBus.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtNumberOfBus_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtProjectedAnnualUsage_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtProjectedAnnualUsage edit-box to upper case.
    l_CursorPosition = txtProjectedAnnualUsage.SelStart
    str_Data = txtProjectedAnnualUsage.Text
    str_Data = UCase(str_Data)
    txtProjectedAnnualUsage.Text = str_Data
    txtProjectedAnnualUsage.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtProjectedAnnualUsage_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtRebuildCode_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtRebuildCode edit-box to upper case.
    l_CursorPosition = txtRebuildCode.SelStart
    str_Data = txtRebuildCode.Text
    str_Data = UCase(str_Data)
    txtRebuildCode.Text = str_Data
    txtRebuildCode.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtRebuildCode_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtRemanufactured_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtRemanufactured edit-box to upper case.
    l_CursorPosition = txtRemanufactured.SelStart
    str_Data = txtRemanufactured.Text
    str_Data = UCase(str_Data)
    txtRemanufactured.Text = str_Data
    txtRemanufactured.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtRemanufactured_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtRemanufactured_GotFocus()
    On Error GoTo Error_Handler
    
    'Set cursor after last character.
    txtRemanufactured.SelStart = Len(txtRemanufactured.Text)
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtRemanufactured_GotFocus", g_l_ErrorLineNumber
End Sub

Private Sub txtSOP_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtSOP edit-box to upper case.
    l_CursorPosition = txtSOP.SelStart
    str_Data = txtSOP.Text
    str_Data = UCase(str_Data)
    txtSOP.Text = str_Data
    txtSOP.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtSOP_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtVendorPartNumber_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtVendorPartNumber edit-box to upper case.
    l_CursorPosition = txtVendorPartNumber.SelStart
    str_Data = txtVendorPartNumber.Text
    str_Data = UCase(str_Data)
    txtVendorPartNumber.Text = str_Data
    txtVendorPartNumber.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtVendorPartNumber_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub UserPermissions()
    On Error GoTo Error_Handler

    If g_l_AccessLevel = 1 Then
        'Button <Add> is invisible.
        cmdAdd.Visible = False
        'Button <Clear Selection> is invisible.
        cmdClearSelection.Visible = False
        'Frame "Cost" is invisible.
        fraCost.Visible = False
        txtCoreCost.Enabled = False
        'Rest controls, except <Reload> button, "List of Buses" list-box,
        '<Print MS Word Document> button, are disabled.
        txtMakeBuyNumber.Enabled = False
        txtKeyword.Enabled = False
        txtBriefDescription.Enabled = False
        txtNumberOfBus.Enabled = False
        txtVendorPartNumber.Enabled = False
        txtBuyCode.Enabled = False
        txtRebuildCode.Enabled = False
        txtExternalRebuilt.Enabled = True
        txtCoreCode.Enabled = False
        txtProjectedAnnualUsage.Enabled = False
        txtBenchNumber.Enabled = False
        txtSOP.Enabled = False
        optYes.Enabled = False
        optNo.Enabled = False
        optRecommendation1.Enabled = False
        optRecommendation2.Enabled = False
        optRecommendation3.Enabled = False
        optRecommendation4.Enabled = False
    ElseIf g_l_AccessLevel = 2 Then
        'Button <Add> is invisible.
        cmdAdd.Visible = False
        'Button <Clear Selection> is invisible.
        cmdClearSelection.Visible = False
        txtCoreCost.Enabled = False
        'Rest controls, except <Reload> button, "List of Buses" list-box,
        '<Print MS Word Document> button, are disabled.
        txtMakeBuyNumber.Enabled = False
        txtKeyword.Enabled = False
        txtBriefDescription.Enabled = False
        txtNumberOfBus.Enabled = False
        txtVendorPartNumber.Enabled = False
        txtBuyCode.Enabled = False
        txtRebuildCode.Enabled = False
        txtCoreCode.Enabled = False
        txtProjectedAnnualUsage.Enabled = False
        txtBenchNumber.Enabled = False
        txtSOP.Enabled = False
        optYes.Enabled = False
        optNo.Enabled = False
        txtExternalRebuilt.Enabled = True
        txtInternalRebuilt.Enabled = False
        txtRemanufactured.Enabled = False
        txtBuyNewCost.Enabled = True
        optRecommendation1.Enabled = False
        optRecommendation2.Enabled = False
        optRecommendation3.Enabled = False
        optRecommendation4.Enabled = False
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "UserPermissions", g_l_ErrorLineNumber
End Sub

Private Sub CreateWApp()
    On Error Resume Next
        Set objWdApp = CreateObject("Word.application.8")
    If Err.Number = 429 Then
        Set objWdApp = CreateObject("Word.application.9")
    Else
        Exit Sub
    End If
    If Err.Number = 429 Then
        Set objWdApp = CreateObject("Word.application.10")
    Exit Sub
    End If
    If Err.Number = 429 Then
        MsgBox "unable to create word app"
    End If
End Sub
Option Explicit

Private Const m_str_const_MsgBoxCaption As String = "Make Vs. Buy Estimate"
Private m_str_Msg As String

Public m_str_MBNumber As String
Public m_var_RowID As Variant

Private Sub UserPermissions()
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Then
        'Menu <Edit> with all submenues is disabled.
        tbMenu.Buttons(2).Enabled = False
        'Menu <View> with all submenues is disabled.
        tbMenu.Buttons(3).Enabled = False
       
        'All controls in the right bottom corner of the form are invisible.
        lblLabourCost.Visible = False
        lblLabourOverheadTotal.Visible = False
        lblLabourTotal.Visible = False
        lblMaterialsTotal.Visible = False
        lblTotalRebuiltPartCost.Visible = False
        txtLabourCost.Visible = False
        txtLabourOverheadTotal.Visible = False
        txtLabourTotal.Visible = False
        txtMaterialsTotal.Visible = False
        txtTotalRebuiltCost.Visible = False
        '3 edit-boxes at the top of the form are disabled.
        txtMBNumber.Enabled = False
        txtKeyword.Enabled = False
        txtDescription.Enabled = False
        If grdLabour.Columns.Count > 2 Then
            'Grid "Labour". Columns "Time", "Wrench Time" are invisible.
            grdLabour.Columns("TIME").Visible = False
            grdLabour.Columns("WRENCH TIME").Visible = False
        End If
        'Grid "Materials Cost Centre Totals". Column "Total Cost" is invisible.
        grdMaterialCostCentreTotal.Columns("TOTAL COST").Visible = False
    ElseIf g_l_AccessLevel = 2 Then
        'Menu <View><Archive Database> is disabled.
        tbMenu.Buttons(3).ButtonMenus(3).Enabled = False
        'Menu <View><Archive Estimate> is disabled.
        tbMenu.Buttons(2).ButtonMenus(4).Enabled = False
        
        
        'Menu <Edit> with all submenues is disabled.
        tbMenu.Buttons(2).Enabled = False
        'Rest controls, except grids and <Make vs. Buy Info> button, are disabled.
        txtMBNumber.Enabled = False
        txtKeyword.Enabled = False
        txtDescription.Enabled = False
        txtLabourCost.Enabled = False
        txtLabourOverheadTotal.Enabled = False
        txtLabourTotal.Enabled = False
        txtMaterialsTotal.Enabled = False
        txtTotalRebuiltCost.Enabled = False
    End If
    
    If g_l_AccessLevel < 4 Then
        tbMenu.Buttons(3).ButtonMenus(2).Enabled = False
        lblChangesMadeBy.Visible = False
        cboChangesMadeBy.Visible = False
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "UserPermissions", g_l_ErrorLineNumber
End Sub

Public Sub PassValues(ByVal str_MBNumber As String, ByVal var_RowID As Variant)

    On Error GoTo Error_Handler:

    Call SetWaitCursor
    
    m_str_MBNumber = str_MBNumber
    m_var_RowID = var_RowID
        
    ' Close the existing show all labour form
    If Not frmViewAllLabour Is Nothing Then
        Unload frmViewAllLabour
    End If
    
    Call PopulatePage
    Call InitColumns
    Call PopulateChangesMadeBy
    Call UserPermissions
    
    If g_str_UseOverheadFringe = "F" Then
        lblLabourOverheadTotal.Caption = "Fringe Value Total"
    End If
    
    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PassValues", g_l_ErrorLineNumber
End Sub

Public Sub RefreshForm()
    On Error GoTo Error_Handler:

    Call SetWaitCursor
    Call PopulatePage
    Call InitColumns
    Call PopulateChangesMadeBy
    Call UserPermissions
    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "RefreshForm", g_l_ErrorLineNumber
End Sub

Private Sub PopulatePage()
    'Determine which non stock coded items have since been converted into stock coded
    'items.
    Dim var_NSCRowID As Variant
    Dim str_FileText As String
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_MMSStockCode As String
    Dim str_MMSCost As String
    Dim FSO As FileSystemObject
    Dim TS As TextStream
    Dim RS As ADODB.Recordset
    Dim RS2 As ADODB.Recordset
    Dim RSNewStock As Recordset
    Dim str_OrigSuppNum As String
    Dim dbl_TaxRate As Double
    Dim l_Hours As Long
    Dim l_Minutes As Long
    Dim l_Count As Long
    Dim duplicate As Integer
    On Error GoTo Error_Handler
    
    duplicate = False
    'Get the table containing each of the non stock coded items.
    Set RS = New ADODB.Recordset

    Set RS = modDBHelper.RetrieveNSCPUsed("CES_INQUIRY.RETRIEVE_NSCP_USED", _
                                          m_str_MBNumber, _
                                          "MB")
        
    'Loop through each of the non stock coded items
    If RS.RecordCount > 0 Then
        RS.MoveFirst
        While Not RS.EOF
            'Get the original supplier number and row id
            str_OrigSuppNum = IIf(IsNull(RS.Fields.Item("SUPPLIER NUMBER").Value), "", RS.Fields.Item("SUPPLIER NUMBER").Value)
            var_NSCRowID = RS.Fields.Item("RowID")
            'Now attempt to get a stock coded part which matches the original supplier
            'number
            Set RSNewStock = New Recordset
            Set RSNewStock = modDBHelper.RetrieveSCOrigSupplierNum( _
                                        "CES_INQUIRY.RETRIEVE_SC_ORIG_SUPPLIER_NUM", _
                                        str_OrigSuppNum)
            If RSNewStock.RecordCount > 0 Then
                'There is a match
                'Get the MMS Stock Code for the item
                RSNewStock.MoveFirst
                str_MMSStockCode = RSNewStock.Fields.Item("mms_stock_code")
                str_MMSCost = Round(RSNewStock.Fields.Item("MMS_New_Cost"), 2)
                'Append the text entry to be logged
                str_FileText = str_FileText & Trim(str_OrigSuppNum) & " to " & _
                               Trim(str_MMSStockCode) & Chr(13) & Chr(10)
                               
                 'ensure a stockcoded part is not already attached to the estimate
                
                 Set RS2 = New ADODB.Recordset
        
                 Set RS2 = modDBHelper.RetrieveSCPUsed("CES_INQUIRY.RETRIEVE_SCP_USED", _
                                             m_str_MBNumber, _
                                             "N", _
                                             "MB")
                    If RS2.RecordCount > 0 Then
                        RS2.MoveFirst
                        For l_Count = 0 To RS2.RecordCount - 1
                            If RS2.Fields.Item("STOCK CODE") = Trim(str_MMSStockCode) Then
                                Call SetDefaultCursor
                                Set RS2 = Nothing
                                m_str_Msg = "Did not convert Non-Stocked-Coded part to Stocked-Coded-Part since MMS Stock Code"
                                m_str_Msg = m_str_Msg + " " + str_MMSStockCode + " is already used in this estimate"
                                MsgBox m_str_Msg, vbOKOnly Or vbExclamation, "Warning"
                                duplicate = True
                                Exit For
                            End If
                            RS2.MoveNext
                        Next l_Count
                    End If
                    Set RS2 = Nothing
                    
                'Transfer the entry to the stock coded make buy
                If duplicate = False Then
                l_Result = modDBHelper.TransferPartsUsed("CES_UPDATE.TRANSFER_PARTS_USED", _
                                                         l_RetVal, _
                                                         str_MMSStockCode, _
                                                         str_MMSCost, _
                                                         g_str_UserName, _
                                                         var_NSCRowID)
                                                         
                       'Now if there have been any conversions log them in text file and inform the user
                    If str_FileText <> "" Then
                        'Set FSO = New FileSystemObject
                        'Set TS = FSO.CreateTextFile("mb.log")
                        'TS.Write ("Make vs Buy #" & Trim(m_str_MBNumber) & " Part Conversions:" & _
                                  Chr(13) & Chr(10) & Chr(13) & Chr(10) & _
                                  "Vendor Part Number to Stock Code" & Chr(13) & Chr(10) & _
                                  "--------------------------------" & Chr(13) & Chr(10) & str_FileText)
                        m_str_Msg = "Parts in the Make vs Buy have been converted to Stock Coded "
                        m_str_Msg = m_str_Msg + "Parts." + Chr(13) + "Please see the log for details."
                        MsgBox m_str_Msg, vbOKOnly Or vbInformation, m_str_const_MsgBoxCaption
                        
                        'The code below was added to prevent a permission error when attempting
                        'to run FSO's CreateTextFile
                        Dim frmNoticeMessage As frmNotice
                        Set frmNoticeMessage = New frmNotice
                        frmNoticeMessage.SetMessage "mb.log", "Make vs Buy #" & Trim(m_str_MBNumber) & " Part Conversions:" & _
                            Chr(13) & Chr(10) & Chr(13) & Chr(10) & _
                            "Vendor Part Number to Stock Code" & Chr(13) & Chr(10) & _
                            "--------------------------------" & Chr(13) & Chr(10) & str_FileText
                        frmNoticeMessage.Show vbModal
                        
                        'TS.Close
                        'Set TS = Nothing
                        'Set FSO = Nothing
                        'ShellExecute GetDesktopWindow(), "Open", App.Path & "\mb.log", "", "C:\", 6
        
                     End If

                End If
            End If
            Set RSNewStock = Nothing
            RS.MoveNext
        Wend
    End If
            
  

    'Populate the labour tables
    Set RS = modDBHelper.RetrieveMBLabour("CES_INQUIRY.RETRIEVE_MB_LABOUR", _
                                          m_str_MBNumber, _
                                          "MB")
    
    If RS.RecordCount > 0 Then
        Set grdLabour.DataSource = RS
    Else
        Set grdLabour.DataSource = Nothing
    End If
    
    Set RS = modDBHelper.RetrieveMB("CES_INQUIRY.RETRIEVE_MB")
    
    'Fill in the text boxes
    txtMBNumber.Text = m_str_MBNumber

    If RS.RecordCount > 0 Then
        RS.Filter = "mb_number = '" + m_str_MBNumber + "'"
        txtKeyword.Text = RS.Fields.Item("KEYWORD")
        txtDescription.Text = RS.Fields.Item("DESCRIPTION")
        txtMMSBuyCode.Text = RS.Fields.Item("BUY_CODE")
        txtCoreCode.Text = RS.Fields.Item("CORE_CODE")
        If IsNull(RS.Fields.Item("JOB_NUMBER")) = False Then
           txtJobNumber.Text = RS.Fields.Item("JOB_NUMBER")
        Else
            txtJobNumber.Text = ""
        End If
        
        
        If IsNull(RS.Fields.Item("CORE_COST")) = False Then
            txtCoreCost.Text = Format(RS.Fields.Item("CORE_COST"), "currency")
        Else
            txtCoreCost.Text = Format(0, "currency")
        End If
    End If
    
    Set RS = modDBHelper.RetrieveAllLabourHours("CES_INQUIRY.RETRIEVE_ALL_LABOUR", m_str_MBNumber, "MB")
    
    If RS.RecordCount > 0 Then
        txtLabourCost.Text = Format(ColumnTotals(RS, "TOTAL COST"), "currency")
        RS.MoveFirst
        Set grdTotalTime.DataSource = RS
    Else
        txtLabourCost.Text = Format(0#, "currency")
        Set grdTotalTime.DataSource = Nothing
    End If


   Set RS = modDBHelper.RetrieveRBPTotalCost2("CES_INQUIRY.RETRIEVE_RBP_TOTAL_COST2", m_str_MBNumber, "MB")
        
    If RS.RecordCount > 0 Then
          txtMaterialsTotal.Text = Format(ColumnTotals(RS, "TOTAL COST"), "currency")
          RS.MoveFirst
    Else
        txtMaterialsTotal.Text = Format(0#, "currency")
    End If
 
   'Set RS = RetrieveAllMaterialSummary("CES_INQUIRY.RETRIEVE_ALL_MATERIAL_SUMMARY")


    If RS.RecordCount > 0 Then
        Set grdMaterialCostCentreTotal.DataSource = RS
    End If

    'Populate the List of Bus Series
    Set RS = modDBHelper.RetrieveMBListOfBuses("CES_INQUIRY.MB_LIST_BUSES", _
                                               m_str_MBNumber)
     If RS.RecordCount > 0 Then
        Do While Not RS.EOF
        cboBusSeries.AddItem (RS.Fields(1).Value)
        RS.MoveNext
        Loop
        cboBusSeries.Text = cboBusSeries.List(0)
    End If
    
    ' Retrieve the tax rate
    Set RS = modDBHelper.RetrieveCESSettings("CES_INQUIRY.RETRIEVE_CES_SETTI", _
                                             "TAX_RATE")
    If RS.RecordCount > 0 Then
        dbl_TaxRate = CDbl(Replace(RS.Fields("VALUE").Value, ",", "."))
    Else
        dbl_TaxRate = 0
    End If
    
    'Total each of the sections

    txtLabourOverheadTotal.Text = Format(CCur(txtLabourCost.Text) * _
                                         CCur(g_dbl_OverheadFringeValue), _
                                         "Currency")
    txtLabourTotal.Text = Format(Round(CCur(txtLabourCost.Text) + CCur(txtLabourOverheadTotal.Text), 2), "currency")
    
    frmAddMBMaterials.PassValues m_str_MBNumber
        
    'txtMaterialsTotal.Text = frmAddMBMaterials.txtTotalMaterialsCost.Text
    txtTotalRebuiltCost.Text = Format(CCur(txtLabourTotal.Text) + _
                                      CCur(txtMaterialsTotal.Text) - _
                                      CCur(txtCoreCost.Text), "currency")
    txtTaxTotal.Text = Format((dbl_TaxRate * txtMaterialsTotal.Text), "currency")
    txtTotalRebuiltPartCostWithTax.Text = Format(CCur(txtTaxTotal.Text) + CCur(txtTotalRebuiltCost.Text), "currency")
    
    Set RS = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulatePage", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    If Not RSNewStock Is Nothing Then
        Set RSNewStock = Nothing
    End If
    
    If Not TS Is Nothing Then
        Set TS = Nothing
    End If
    If Not FSO Is Nothing Then
        Set FSO = Nothing
    End If
End Sub

Private Sub Archive()
    Dim l_Result As Long
    Dim l_RetVal As Long
    
    On Error GoTo Error_Handler
    
    m_str_Msg = "Are you sure you want to Archive this Make vs. Buy?"
    l_Result = MsgBox(m_str_Msg, vbOKCancel Or vbQuestion, "Archive Make vs. Buy?")
    
    If l_Result = vbOK Then
        Call SetWaitCursor
    
        l_Result = modDBHelper.ArchiveMB("CES_ARCHIVE.ARCHIVE_MB", _
                                    l_RetVal, _
                                    txtMBNumber.Text, _
                                    g_str_UserName, _
                                    m_str_MBNumber, _
                                    "MB", _
                                    Trim(txtLabourCost.Text), _
                                    Trim(txtLabourOverheadTotal.Text), _
                                    Trim(txtLabourTotal.Text), _
                                    Trim(txtMaterialsTotal.Text), _
                                    Trim(txtTotalRebuiltCost.Text), _
                                    Trim(txtTaxTotal.Text), _
                                    Trim(txtTotalRebuiltPartCostWithTax.Text))
        If l_Result = 0 Then
            m_str_Msg = "Archiving Make vs. Buy " + txtMBNumber.Text + " is complete."
            MsgBox m_str_Msg, vbOKOnly Or vbInformation, "Make vs. Buy Archiving"
            Call SetDefaultCursor
        Else
            m_str_Msg = "Archiving Make vs. Buy = " + txtMBNumber.Text + " has failed."
            MsgBox m_str_Msg, vbInformation Or vbOKOnly, "Make vs. Buy Archiving"
            Call SetDefaultCursor
        End If
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "archive", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor

    'Close the Add Materials form if it is opened
    If Not frmAddMBMaterials Is Nothing Then
        Unload frmAddMBMaterials
    End If
    
    'Close the View All Labour form if it is opened
    If Not frmViewAllLabour Is Nothing Then
        Unload frmViewAllLabour
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub grdLabour_DblClick()
    Dim str_RowID As String
        
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not go further, just exit sub.
        Exit Sub
    End If
    
    Call SetWaitCursor
    If Not grdLabour.Row Then
        str_RowID = grdLabour.Columns("ROWID").Text
        frmAddLabourTask.m_str_AuditReference = Trim(txtMBNumber.Text)
        frmAddLabourTask.m_str_LinkNumber = m_str_MBNumber
        frmAddLabourTask.m_str_PartID = str_RowID
        frmAddLabourTask.m_str_TypeID = "MB"
        frmAddLabourTask.Show vbModal
        RefreshForm
    Else
        Call SetDefaultCursor
        m_str_Msg = "No Rows to select. Please Try Again."
        MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
    End If
        
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdLabour_DblClick", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub grdLabour_KeyDown(KeyCode As Integer, Shift As Integer)
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_PartID As String
    
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not go further, just exit sub.
        Exit Sub
    End If
    
    If KeyCode = vbKeyDelete Then
        m_str_Msg = "Are you sure you want to delete this item?"
        l_Result = MsgBox(m_str_Msg, vbOKCancel Or vbQuestion, m_str_const_MsgBoxCaption)
        If l_Result = vbOK Then
            Call SetWaitCursor
            str_PartID = grdLabour.Columns("ROWID").Text
            l_Result = modDBHelper.DeleteMBLabour("CES_DELETE.DELETE_MBLABOUR", _
                                                  l_RetVal, _
                                                  str_PartID)
            
            l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                                        "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                                        l_RetVal, _
                                        "Delete Labour", _
                                        txtMBNumber.Text, _
                                        "MB", _
                                        "LABOUR TYPE ---> " + grdLabour.Columns("LABOUR TYPE").Text, _
                                        "CC ---> " + grdLabour.Columns("CC").Text, _
                                        "TASK ---> " + grdLabour.Columns("TASK").Text, _
                                        "USAGE ---> " + grdLabour.Columns("USAGE").Text, _
                                        "TIME ---> " + grdLabour.Columns("TIME").Text, _
                                        "WRENCH TIME ---> " + grdLabour.Columns("WRENCH TIME").Text, _
                                        "DATE REVISED ---> " + grdLabour.Columns("DATE REVISED").Text)
            Call SetDefaultCursor
            Call RefreshForm
        End If
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdLabour_KeyDown", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub InitColumns()
    On Error GoTo Error_Handler
        
     If Not grdLabour.Row Then
        grdLabour.Columns("CC").Width = 500
       'grdLabour.Columns("CC").Visible = False
        grdLabour.Columns("TASK").Width = 1600
        grdLabour.Columns("LABOUR TYPE").Width = 2120
        grdLabour.Columns("USAGE").Width = 620
        grdLabour.Columns("USAGE").Alignment = dbgRight
        grdLabour.Columns("TIME").Width = 600
        grdLabour.Columns("TIME").Alignment = dbgRight
        grdLabour.Columns("WRENCH TIME").Width = 1200
        grdLabour.Columns("WRENCH TIME").Alignment = dbgRight
        grdLabour.Columns("DATE REVISED").Width = 1900 '1725
        grdLabour.Columns("DATE REVISED").Alignment = dbgRight
        grdLabour.Columns("DATE REVISED").NumberFormat = "yyyy-mmm-dd hh:mm AMPM"
        grdLabour.Columns("TIME ADDITION").Visible = False
        grdLabour.Columns("VALUE").Visible = False
        grdLabour.Columns("ROWID").Visible = False
    End If

    If Not grdMaterialCostCentreTotal.Row Then
        With grdMaterialCostCentreTotal
            .Columns("CC").Width = 500
            .Columns("CC").Caption = "CC"
            .Columns("TOTAL COST").Alignment = dbgRight
            .Columns("TOTAL COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("TOTAL COST").Width = 1400
            .Columns("TAXABLE COST").Visible = False
        End With
    End If
    
    If Not grdTotalTime.Row Then
        grdTotalTime.Columns("COST CENTRE").Width = 500
        grdTotalTime.Columns("COST CENTRE").Caption = "CC"
        grdTotalTime.Columns("LABOUR HRS").Width = 1200
        grdTotalTime.Columns("LABOUR HRS").Alignment = dbgRight
        grdTotalTime.Columns("TOTAL COST").Visible = False
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "InitColumns", g_l_ErrorLineNumber
End Sub

Private Sub cmdMakeVsBuyInfo_Click()
    On Error GoTo Error_Handler
    
    frmMakeBuy.m_str_MBNumber = m_str_MBNumber
    frmMakeBuy.m_str_AuditReference = Trim(txtMBNumber.Text)
    frmMakeBuy.Show vbModal
    RefreshForm
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdMakeVsBuyInfo_Click", g_l_ErrorLineNumber
End Sub

Private Sub PopulateChangesMadeBy()
    Dim l_Count As Long
    Dim str_Temp As String
    Dim RS As ADODB.Recordset

    On Error GoTo Error_Handler
    
    cboChangesMadeBy.Clear
    
    Set RS = New ADODB.Recordset
    'Populate cboChangesMadeBy combo-box. Show only 5 recent items.
    Set RS = modDBHelper.RetrieveAudit6( _
                    "CES_INQUIRY.RETRIEVE_AUDIT_6", _
                    txtMBNumber.Text, _
                    "MB")
    
    If RS.RecordCount > 0 Then
        RS.MoveFirst
        For l_Count = 0 To RS.RecordCount - 1
            If l_Count = 5 Then
                Exit For
            End If
            str_Temp = Format(RS.Fields.Item("DATE_CHANGED"), "yyyy-mmm-dd hh:mm:ss AMPM")
            str_Temp = CStr(str_Temp)
            str_Temp = str_Temp + " ---> "
            str_Temp = str_Temp + CStr(RS.Fields.Item("USER_NAME"))
            cboChangesMadeBy.AddItem str_Temp
            RS.MoveNext
        Next l_Count
    End If
    
    If RS.RecordCount > 0 Then
        cboChangesMadeBy.Text = cboChangesMadeBy.List(0)
    End If
    
    Set RS = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateChangesMadeBy", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub ConvertToRebuiltPart()
    Dim RS As ADODB.Recordset
    Dim str_RebuiltNum As String
    
    On Error GoTo Error_Handler
    
    Set RS = modDBHelper.RetrieveMBListByMBNumber( _
                                        "CES_INQUIRY.RETRIEVE_MB_LIST_BY_MB_NUMBER", _
                                        Trim(txtMBNumber.Text))
    str_RebuiltNum = RS("REBUILD_CODE")
    
    If str_RebuiltNum <> " " Then
        frmConvertToRebuiltPart.txtRebuiltPartNumber = str_RebuiltNum
        frmConvertToRebuiltPart.txtRebuiltPartNumber.Enabled = False
        frmConvertToRebuiltPart.txtRebuiltPartNumber.BackColor = -2147483644
    End If
    
    frmConvertToRebuiltPart.txtMakeBuyNumber = Trim(txtMBNumber.Text)
    frmConvertToRebuiltPart.Show vbModal

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuConvertToRebiultPart_Click", g_l_ErrorLineNumber
End Sub

Private Sub tbMenu_ButtonMenuClick(ByVal ButtonMenu As MSComctlLib.ButtonMenu)
    Dim str_Temp As String
    
    On Error GoTo Error_Handler
    
    Select Case ButtonMenu
        Case "Print"
            ShowMakeBuyCostEstimateReport m_str_MBNumber
        Case "Archive MB"
            Archive
            
        Case "Make vs. Buy Information"
            frmMakeBuy.m_str_MBNumber = m_str_MBNumber
            frmMakeBuy.m_str_AuditReference = Trim(txtMBNumber.Text)
            frmMakeBuy.Show vbModal
            RefreshForm
        Case "Close"
            Unload Me
        Case "Add A Labour Task"
            frmAddLabourTask.m_str_LinkNumber = m_str_MBNumber
            frmAddLabourTask.m_str_AuditReference = Trim(txtMBNumber.Text)
            frmAddLabourTask.m_str_TypeID = "MB"
            frmAddLabourTask.Show vbModal
            Call RefreshForm
        Case "Convert to Rebuilt Part"
            Call ConvertToRebuiltPart
        Case "Material Listings"
            frmAddMBMaterials.PassValues m_str_MBNumber
            If frmAddMBMaterials.WindowState = 1 Then
                frmAddMBMaterials.WindowState = 0
            End If
            frmAddMBMaterials.Show
            frmAddMBMaterials.SetFocus
        Case "Modify History"
            'Close the Audit form if it is opened.
            If Not frmViewAudit Is Nothing Then
                Unload frmViewAudit
            End If
            str_Temp = " - Make Vs. Buy Estimate for Make Vs. Buy #: " + txtMBNumber.Text
            frmViewAudit.m_str_EstimateNumber = Trim(txtMBNumber.Text)
            frmViewAudit.m_b_FromAdministration = False
            frmViewAudit.m_str_EstimateType = "MB"
            frmViewAudit.Caption = frmViewAudit.Caption + str_Temp
            frmViewAudit.Show
        Case "Archive Database"
            frmArchivedHistory.m_str_LinkCode = m_str_MBNumber
            frmArchivedHistory.m_str_EstimateType = "MB"
            frmArchivedHistory.Show
        Case "All Labour"
            frmViewAllLabour.PassValues m_str_MBNumber, "MB"
            If frmViewAllLabour.WindowState = 1 Then
                frmViewAllLabour.WindowState = 0
            End If
            frmViewAllLabour.Show
            frmViewAllLabour.SetFocus
    End Select
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "tbMenu_ButtonMenuClick", g_l_ErrorLineNumber
End Sub

Option Explicit

Public m_str_MBNumber As String
Public m_v_RowID As Variant

Private Sub UserPermissions()
    On Error GoTo Error_Handler

    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        optLoadMBEstimate.Value = True
        optCopyMBEstimate.Visible = False
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "userPermissions", g_l_ErrorLineNumber
End Sub

Private Sub cmdContinue_Click()
    On Error GoTo Error_Handler

    Call SetWaitCursor
    
    If optLoadMBEstimate.Value = True Then
        frmMakeBuyEstimate.PassValues m_str_MBNumber, m_v_RowID
        Unload Me
        If frmMakeBuyEstimate.WindowState = 1 Then
           frmMakeBuyEstimate.WindowState = 0
        End If
        frmMakeBuyEstimate.Show
        frmMakeBuyEstimate.SetFocus
    ElseIf optCopyMBEstimate.Value = True Then
        Unload Me
        frmCopyMBEstimate.PassMBNumber m_str_MBNumber
        frmCopyMBEstimate.Show vbModal
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdContinue_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    Call UserPermissions
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub


Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Option Explicit
Public m_str_KitNumber As String
Public m_l_VehicleListID As Long

Private m_str_PreviousSearch As String
Private m_str_PreviousSearchType As String
Private m_var_RowSelected As Variant

Public Sub PassValues(ByVal str_KitNumber As String, _
                      ByVal l_VehicleListID As Long)
    On Error GoTo Error_Handler
    
    m_str_KitNumber = str_KitNumber
    m_l_VehicleListID = l_VehicleListID
    Call RefreshForm
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PassValues", g_l_ErrorLineNumber
End Sub

Private Sub RefreshForm()
    Dim l_RetVal As Long
    Dim l_Result As Long
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    txtVehicleNumber.Text = m_str_KitNumber
    Call Populate_Page
    Call FormatGrids
    Call UserPermissions
    
    l_Result = modDBHelper.UpdateOEMKitCost("CES_UPDATE.UPDATE_OEMKit_COST", _
                                                l_RetVal, _
                                                m_str_KitNumber, _
                                                CCur(txtOEMKitTotalCost.Text))
    
    If Not frmVehCostEstimateMain Is Nothing Then
        Call frmVehCostEstimateMain.RefreshOEMKits
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "RefreshForm", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub UserPermissions()
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Then
        'Button <Add Part> is invisible.
        cmdAddPart.Visible = False
        'Controls at the bottom of the page are invisible.
        lblNonStockCodedParts.Visible = False
        lblStockCodedParts.Visible = False
        lblCoreCostTotal.Visible = False
        lblOEMKitTotalCost.Visible = False
        txtNonStockCodedPartsTotal.Visible = False
        txtStockCodedPartsTotal.Visible = False
        txtCoreCostTotal.Visible = False
        txtOEMKitTotalCost.Visible = False
        'Edit-box txtVehicleNumber is disabled.
        txtVehicleNumber.Enabled = False
        If grdNonStockCodedPartsList.Columns.Count > 2 Then
            'Grid "Non Stock Coded Parts List". Columns "COST", "CORE_COST", "TOTAL_COST"
            'are invisible.
            grdNonStockCodedPartsList.Columns("UNIT COST").Visible = False
            grdNonStockCodedPartsList.Columns("TOTAL COST").Visible = False
            grdNonStockCodedPartsList.Columns("CORE COST").Visible = False
        End If
        If grdStockCodedPartsList.Columns.Count > 2 Then
            'Grid "Stock Coded Parts List". Columns "UNIT_COST", "CORE_COST", "TOTAL_COST"
            'are invisible.
            grdStockCodedPartsList.Columns("UNIT COST").Visible = False
            grdStockCodedPartsList.Columns("TOTAL COST").Visible = False
            grdStockCodedPartsList.Columns("CORE COST").Visible = False
        End If
        If grdPartList.Columns.Count > 2 Then
            'Grid "Parts List". Columns "COST", "CORE_COST", "TOTAL_COST"
            'are invisible.
            grdPartList.Columns("UNIT COST").Visible = False
            grdPartList.Columns("TOTAL COST").Visible = False
            grdPartList.Columns("CORE COST").Visible = False
        End If
    ElseIf g_l_AccessLevel = 2 Then
        'Button <Add Part> is invisible.
        cmdAddPart.Visible = False
        'Rest controls, except grids, are disabled.
        txtVehicleNumber.Enabled = False
        txtNonStockCodedPartsTotal.Enabled = False
        txtStockCodedPartsTotal.Enabled = False
        txtCoreCostTotal.Enabled = False
        txtOEMKitTotalCost.Enabled = False
    End If
    
    If g_l_AccessLevel < 4 Then
        'Menu <View><Modify History> is disabled.
        tbMenu.Buttons(2).ButtonMenus(1).Enabled = False
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "UserPermissions", g_l_ErrorLineNumber
End Sub

Private Sub cmdAddPart_Click()
    On Error GoTo Error_Handler
    
    frmTypeOfPart.m_str_FormType = "OEMKit"
    frmTypeOfPart.m_str_LinkNumber = m_str_KitNumber
    frmTypeOfPart.optAddRebuiltPart.Visible = False
    frmTypeOfPart.Show vbModal
    Call RefreshForm
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdAddPart", g_l_ErrorLineNumber
End Sub

'Private Sub Form_Load()
'    On Error GoTo Error_Handler
'
'    Call SetWaitCursor
'
'    txtVehicleNumber.Text = m_str_KitNumber
'    Call Populate_Page
'    Call FormatGrids
'    Call UserPermissions
'
'    Call SetDefaultCursor
'    Exit Sub
'Error_Handler:
'    Call SetDefaultCursor
'    modDBHelper.LogErrorToDB Me.Name, "Form_Load", Erl
'End Sub

Private Sub Populate_Page()
    Dim RS As ADODB.Recordset
    Dim RBCoreCostTotal As Currency
    Dim SCPCoreCostTotal As Currency
    Dim NSPCoreCostTotal As Currency
    Dim CoreCostTotal As Currency
        
    On Error GoTo Error_Handler
        
    Set RS = New ADODB.Recordset
    
    'Grids grdNonStockCodedPartsList and grdStockCodedPartsList are hidden. They are
    'still used for making NSPCoreCostTotal and SCPCoreCostTotal calculations.
    'Populate the non-stock coded items
    Set RS = modDBHelper.RetrieveNSCPUsed("CES_INQUIRY.RETRIEVE_NSCP_USED", _
                                          m_str_KitNumber, _
                                          "KIT")
    
    If RS.RecordCount > 0 Then
        Set grdNonStockCodedPartsList.DataSource = RS
        NSPCoreCostTotal = Format(ColumnTotals(RS, "core cost"), "currency")
        RS.MoveFirst
        txtNonStockCodedPartsTotal.Text = Format(ColumnTotals(RS, "total cost"), "currency")
    Else
        Set grdNonStockCodedPartsList.DataSource = Nothing
        NSPCoreCostTotal = Format(0#, "currency")
        txtNonStockCodedPartsTotal.Text = Format(0#, "currency")
    End If
        
    'Populate the stock coded items
    Set RS = modDBHelper.RetrieveSCPUsed("CES_INQUIRY.RETRIEVE_SCP_USED", _
                                         m_str_KitNumber, _
                                         "N", _
                                         "KIT")
    If RS.RecordCount > 0 Then
        Set grdStockCodedPartsList.DataSource = RS
        SCPCoreCostTotal = Format( _
                                    ColumnTotals(RS, "core cost"), "currency")
        
        RS.MoveFirst
        txtStockCodedPartsTotal.Text = Format( _
                                    ColumnTotals(RS, "total cost"), "currency")
    Else
        Set grdStockCodedPartsList.DataSource = Nothing
        SCPCoreCostTotal = Format(0#, "currency")
        txtStockCodedPartsTotal.Text = Format(0#, "currency")
    End If

    'Populate the grdPartList grid
    Set RS = modDBHelper.GetKitParts("CES_INQUIRY.GET_KIT_PARTS", _
                                   m_str_KitNumber, _
                                   "KIT", _
                                   "N")
    If RS.RecordCount > 0 Then
        Set grdPartList.DataSource = RS
    Else
        Set grdPartList.DataSource = Nothing
    End If
    
    CoreCostTotal = SCPCoreCostTotal + NSPCoreCostTotal
        
    'Calculate the materials total
    txtCoreCostTotal.Text = Format((CoreCostTotal * -1), "currency")
    txtOEMKitTotalCost.Text = Format(CCur(txtNonStockCodedPartsTotal.Text) + _
                               CCur(txtStockCodedPartsTotal.Text) - CoreCostTotal, "currency")
    
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Populate_Page", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub FormatGrids()
    On Error GoTo Error_Handler
     
    If grdNonStockCodedPartsList.Columns.Count > 2 Then
        With grdNonStockCodedPartsList
            .Columns("SUPPLIER NUMBER").Width = 1900
            .Columns("SUPPLIER NAME").Width = 1700
            .Columns("CC").Width = 500
            .Columns("QTY").Alignment = dbgRight
            .Columns("QTY").Width = 500
            .Columns("%").Alignment = dbgRight
            .Columns("%").Width = 500
            .Columns("UNIT COST").Alignment = dbgRight
            .Columns("UNIT COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("UNIT COST").Width = 1200
            .Columns("CORE COST").Alignment = dbgRight
            .Columns("CORE COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("CORE COST").Width = 1200
            .Columns("TOTAL COST").Alignment = dbgRight
            .Columns("TOTAL COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("TOTAL COST").Width = 1200
            .Columns("DESCRIPTION").Width = 4000
            .Columns("LAST MODIFIED DATE").Alignment = dbgRight
            .Columns("LAST MODIFIED DATE").Width = 2400
            .Columns("LAST MODIFIED DATE").NumberFormat = "yyyy-mmm-dd hh:mm:ss AMPM"
            .Columns("ID").Visible = False
            .Columns("ROWID").Visible = False
        End With
    End If
    grdNonStockCodedPartsList.Visible = False
    
    If grdStockCodedPartsList.Columns.Count > 2 Then
        With grdStockCodedPartsList
            .Columns("UNIT COST").Alignment = dbgRight
            .Columns("UNIT COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("UNIT COST").Width = 1100
            .Columns("CC").Width = 500
            .Columns("QTY").Alignment = dbgRight
            .Columns("QTY").Width = 500
            .Columns("%").Alignment = dbgRight
            .Columns("%").Width = 500
            .Columns("CORE COST").Alignment = dbgRight
            .Columns("CORE COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("CORE COST").Width = 1200
            .Columns("TOTAL COST").Alignment = dbgRight
            .Columns("TOTAL COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("TOTAL COST").Width = 1200
            .Columns("DESCRIPTION").Width = 4000
            .Columns("DESCRIPTION").Caption = "DESCRIPTION"
            .Columns("OEM COST").Visible = False
            .Columns("MMS REBUILT CODE").Visible = False
            .Columns("REBUILT PART COST").Visible = False
            .Columns("REBUILT PART").Visible = False
            .Columns("ROWID").Visible = False
        End With
    End If
    grdStockCodedPartsList.Visible = False
    
    If grdPartList.Columns.Count > 2 Then
        grdPartList.Columns("PART TYPE").Visible = False
        grdPartList.Columns("ROWID").Visible = False
        grdPartList.Columns("SUPPLIER NUMBER").Width = 1900
        grdPartList.Columns("SUPPLIER NAME").Width = 1700
        grdPartList.Columns("STOCK CODE").Width = 1100
        grdPartList.Columns("CC").Width = 500
        grdPartList.Columns("QTY").Alignment = dbgRight
        grdPartList.Columns("QTY").Width = 500
        grdPartList.Columns("%").Alignment = dbgRight
        grdPartList.Columns("%").Width = 500
        grdPartList.Columns("UNIT COST").Alignment = dbgRight
        grdPartList.Columns("UNIT COST").NumberFormat = "$#,##0.00;($#,##0.00)"
        grdPartList.Columns("UNIT COST").Width = 1100
        grdPartList.Columns("CORE COST").Alignment = dbgRight
        grdPartList.Columns("CORE COST").NumberFormat = "$#,##0.00;($#,##0.00)"
        grdPartList.Columns("CORE COST").Width = 1200
        grdPartList.Columns("TOTAL COST").Alignment = dbgRight
        grdPartList.Columns("TOTAL COST").NumberFormat = "$#,##0.00;($#,##0.00)"
        grdPartList.Columns("TOTAL COST").Width = 1200
        grdPartList.Columns("DESCRIPTION").Width = 4000
        grdPartList.Columns("LAST MODIFIED DATE").Alignment = dbgRight
        grdPartList.Columns("LAST MODIFIED DATE").Width = 2000
        grdPartList.Columns("LAST MODIFIED DATE").NumberFormat = "yyyy-mmm-dd hh:mm:ss AMPM"
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "FormatGrids", g_l_ErrorLineNumber
End Sub

Private Sub cmdSubKits_Click()
    On Error GoTo Error_Handler
        
    frmSubKits.PassValues m_str_KitNumber, m_l_VehicleListID, grdPartList.DataSource
    frmSubKits.Show vbModal
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdSubKits_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub cmdPrint_Click()
 On Error GoTo Error_Handler
    
    showOEMKitsReport txtVehicleNumber.Text

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdPrint_click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub grdPartList_DblClick()
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not go further, just exit sub.
        Exit Sub
    End If
    
    Call SetWaitCursor
    If grdPartList.Row >= 0 Then
        m_var_RowSelected = grdPartList.Bookmark
        If grdPartList.Columns("PART TYPE") = "SC" Then
            'Update the stock coded part
             Dim formshow As New frmAddSCPToEstimate
             formshow.Caption = "Edit a Stock Coded Part in the OEM Kit " + m_str_KitNumber
             formshow.m_str_TypeCode = "KIT"
             formshow.m_str_MBNumber = m_str_KitNumber
             formshow.m_str_AuditReference = m_str_KitNumber
             formshow.PassValues grdPartList.Columns("STOCK CODE").Value, _
                                 grdPartList.Columns("CC").Value, _
                                 grdPartList.Columns("%").Value, _
                                 grdPartList.Columns("QTY").Value, _
                                 grdPartList.Columns("ROWID").Value, _
                                 grdPartList.Columns("CORE COST").Value
             formshow.Show vbModal
        ElseIf grdPartList.Columns("PART TYPE") = "NSC" Then
            'Update the non stock coded part
            Dim formshow1 As New frmAddNSCPToEstimate
            formshow1.m_str_LinkNumber = m_str_KitNumber
            formshow1.Caption = "Edit a Non-Stock Coded Part in the OEM Kit " + m_str_KitNumber
            formshow1.m_str_TypeCode = "KIT"
            formshow1.m_str_AuditReference = m_str_KitNumber
            formshow1.PassValues grdPartList.Columns("SUPPLIER NUMBER").Value, _
                                grdPartList.Columns("SUPPLIER NAME").Value, _
                                grdPartList.Columns("CC").Value, _
                                grdPartList.Columns("%").Value, _
                                grdPartList.Columns("QTY").Value, _
                                grdPartList.Columns("ROWID").Value, _
                                grdPartList.Columns("CORE COST").Value
            formshow1.Show vbModal
        End If
        
        Call RefreshForm
        grdPartList.Bookmark = m_var_RowSelected
    End If
        
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdPartList_DblClick", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub grdPartList_KeyDown(KeyCode As Integer, Shift As Integer)
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim m_str_Msg As String
    Dim str_PartID As String
    Dim RS As ADODB.Recordset
    Dim l_Count As Long
    
    On Error GoTo Error_Handler

    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not go further, just exit sub.
        Exit Sub
    End If

    If KeyCode = vbKeyDelete And grdPartList.Row >= 0 Then
        m_str_Msg = "Are you sure you want to delete this item?"
        l_Result = MsgBox(m_str_Msg, vbOKCancel Or vbQuestion, _
                          "Delete Materials of Rebuilt Part")
        If l_Result = vbOK Then
            Call SetWaitCursor
            If grdPartList.Columns("PART TYPE") = "NSC" Then
                str_PartID = grdPartList.Columns("ROWID").Text
                l_Result = modDBHelper.DeleteNSCPUsed("CES_DELETE.DELETE_NSCP_USED", _
                                                      l_RetVal, _
                                                      str_PartID)
                'Insert record for the current OEM Kit into the AUDIT_MODIFY_HISTORY table.
                l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                        "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                        l_RetVal, _
                        "Delete Non-Stock Coded Part", _
                        m_str_KitNumber, _
                        "KIT", _
                        "SUPPLIER NUMBER ---> " + grdPartList.Columns.Item("SUPPLIER NUMBER"), _
                        "SUPPLIER NAME ---> " + grdPartList.Columns.Item("SUPPLIER NAME"), _
                        "CC ---> " + grdPartList.Columns.Item("CC"), _
                        "QTY ---> " + grdPartList.Columns.Item("QTY"), _
                        "% ---> " + grdPartList.Columns.Item("%"), _
                        "UNIT COST ---> " + grdPartList.Columns.Item("UNIT COST"), _
                        "CORE COST ---> " + grdPartList.Columns.Item("CORE COST"), _
                        "TOTAL COST ---> " + grdPartList.Columns.Item("TOTAL COST"), _
                        "DESCRIPTION ---> " + grdPartList.Columns.Item("DESCRIPTION"), _
                        "KEYWORD ---> " + grdPartList.Columns.Item("KEYWORD"), _
                        "LAST MODIFIED DATE ---> " + grdPartList.Columns.Item("LAST MODIFIED DATE"))
                
                'Delete all corresponded items from the SUB_KITS table.
                Call DeleteFromSubKits(m_str_KitNumber, _
                                       grdPartList.Columns.Item("SUPPLIER NUMBER"), _
                                       grdPartList.Columns.Item("SUPPLIER NAME"), _
                                       " ")
                
                'Find all Vehicle Estimates where the current OEM Kit is presented.
                Set RS = New ADODB.Recordset
                Set RS = modDBHelper.RetrieveBusFromKitsUsed("CES_INQUIRY.RETRIEVE_BUS_FROM_KITS_USED", _
                                                             m_str_KitNumber)
                'Insert records for all Vehicle Estimates (where the current OEM Kit is
                'presented) into the AUDIT_MODIFY_HISTORY table.
                If RS.RecordCount > 0 Then
                    RS.MoveFirst
                    For l_Count = 0 To RS.RecordCount - 1
                        If IsNull(RS.Fields.Item("link_code")) = False Then
                            l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                                "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                                l_RetVal, _
                                "Indirect change. Non-Stock Coded Part was deleted from the OEM Kit " + m_str_KitNumber + " when user worked with Vehicle Estimate Number " + CStr(m_l_VehicleListID), _
                                RS.Fields.Item("link_code"), _
                                "BUS", _
                                "SUPPLIER NUMBER ---> " + grdPartList.Columns.Item("SUPPLIER NUMBER"), _
                                "SUPPLIER NAME ---> " + grdPartList.Columns.Item("SUPPLIER NAME"), _
                                "CC ---> " + grdPartList.Columns.Item("CC"), _
                                "QTY ---> " + grdPartList.Columns.Item("QTY"), _
                                "% ---> " + grdPartList.Columns.Item("%"), _
                                "UNIT COST ---> " + grdPartList.Columns.Item("UNIT COST"), _
                                "CORE COST ---> " + grdPartList.Columns.Item("CORE COST"), _
                                "TOTAL COST ---> " + grdPartList.Columns.Item("TOTAL COST"), _
                                "DESCRIPTION ---> " + grdPartList.Columns.Item("DESCRIPTION"), _
                                "KEYWORD ---> " + grdPartList.Columns.Item("KEYWORD"), _
                                "LAST MODIFIED DATE ---> " + grdPartList.Columns.Item("LAST MODIFIED DATE"))
                        End If
                        RS.MoveNext
                    Next l_Count
                End If
                
                Set RS = Nothing
            ElseIf grdPartList.Columns("PART TYPE") = "SC" Then
                str_PartID = grdPartList.Columns("ROWID").Text
                l_Result = modDBHelper.DeleteSCPUsed("CES_DELETE.DELETE_SCP_USED", _
                                                     l_RetVal, _
                                                     str_PartID)
                'Insert record for the current OEM Kit into the AUDIT_MODIFY_HISTORY table.
                l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                        "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                        l_RetVal, _
                        "Delete Stock Coded Part", _
                        m_str_KitNumber, _
                        "KIT", _
                        "STOCK CODE ---> " + grdPartList.Columns.Item("STOCK CODE"), _
                        "UNIT COST ---> " + grdPartList.Columns.Item("UNIT COST"), _
                        "CC ---> " + grdPartList.Columns.Item("CC"), _
                        "QTY ---> " + grdPartList.Columns.Item("QTY"), _
                        "% ---> " + grdPartList.Columns.Item("%"), _
                        "CORE COST ---> " + grdPartList.Columns.Item("CORE COST"), _
                        "TOTAL COST ---> " + grdPartList.Columns.Item("TOTAL COST"), _
                        "DESCRIPTION ---> " + grdPartList.Columns.Item("DESCRIPTION"), _
                        "KEYWORD ---> " + grdPartList.Columns.Item("KEYWORD"))
    
                'Delete all corresponded items from the SUB_KITS table.
                Call DeleteFromSubKits(m_str_KitNumber, _
                                       " ", _
                                       " ", _
                                       grdPartList.Columns.Item("STOCK CODE"))
                
                'Find all Vehicle Estimates where the current OEM Kit is presented.
                Set RS = New ADODB.Recordset
                Set RS = modDBHelper.RetrieveBusFromKitsUsed("CES_INQUIRY.RETRIEVE_BUS_FROM_KITS_USED", _
                                                             m_str_KitNumber)
                'Insert records for all Vehicle Estimates (where the current OEM Kit is
                'presented) into the AUDIT_MODIFY_HISTORY table.
                If RS.RecordCount > 0 Then
                    RS.MoveFirst
                    For l_Count = 0 To RS.RecordCount - 1
                        If IsNull(RS.Fields.Item("link_code")) = False Then
                            l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                                "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                                l_RetVal, _
                                "Indirect change. Stock Coded Part was deleted from the OEM Kit " + m_str_KitNumber + " when user worked with Vehicle Estimate Number " + CStr(m_l_VehicleListID), _
                                RS.Fields.Item("link_code"), _
                                "BUS", _
                                "STOCK CODE ---> " + grdPartList.Columns.Item("STOCK CODE"), _
                                "UNIT COST ---> " + grdPartList.Columns.Item("UNIT COST"), _
                                "CC ---> " + grdPartList.Columns.Item("CC"), _
                                "QTY ---> " + grdPartList.Columns.Item("QTY"), _
                                "% ---> " + grdPartList.Columns.Item("%"), _
                                "CORE COST ---> " + grdPartList.Columns.Item("CORE COST"), _
                                "TOTAL COST ---> " + grdPartList.Columns.Item("TOTAL COST"), _
                                "DESCRIPTION ---> " + grdPartList.Columns.Item("DESCRIPTION"), _
                                "KEYWORD ---> " + grdPartList.Columns.Item("KEYWORD"))
                        End If
                        RS.MoveNext
                    Next l_Count
                End If
                Set RS = Nothing
            End If
            Call RefreshForm
        End If
    End If

    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdPartList_KeyDown", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub tbMenu_ButtonMenuClick(ByVal ButtonMenu As MSComctlLib.ButtonMenu)
    Dim str_Temp As String
    
    On Error GoTo Error_Handler
    
    Select Case ButtonMenu
        Case "Close"
            Unload Me
        Case "Print"
            showOEMKitsReport txtVehicleNumber.Text
        Case "Sub Kits"
                
            frmSubKits.PassValues m_str_KitNumber, m_l_VehicleListID, grdPartList.DataSource
            frmSubKits.Show vbModal
    
        Case "Modify History"
            'Close the Audit form if it is opened.
            If Not frmViewAudit Is Nothing Then
                Unload frmViewAudit
            End If
            'And open the Audit form again!
            str_Temp = " - OEM Kit: " + CStr(m_str_KitNumber)
            frmViewAudit.m_str_EstimateNumber = CStr(m_str_KitNumber)
            frmViewAudit.m_b_FromAdministration = False
            frmViewAudit.m_str_EstimateType = "KIT"
            frmViewAudit.Caption = frmViewAudit.Caption + str_Temp
            frmViewAudit.Show
    End Select
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "tbMenu_ButtonMenuClick", g_l_ErrorLineNumber
End Sub

Private Sub optNSCPart_Click()
    On Error GoTo Error_Handler
    
    Call ChangeSearchLabel
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "optNSCPart_Click", g_l_ErrorLineNumber
End Sub

Private Sub optSCPart_Click()
    On Error GoTo Error_Handler
    
    Call ChangeSearchLabel
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "optSCPart_Click", g_l_ErrorLineNumber
End Sub

Private Sub ChangeSearchLabel()
    On Error GoTo Error_Handler
    ' As the type to part to search by is changed, we must change
    ' the label to reflect this
    If optSCPart.Value = True Then
        lblKeyToSearch.Caption = "Stock Code:"
    ElseIf optNSCPart.Value = True Then
        lblKeyToSearch.Caption = "Supplier Number:"
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "ChangeSearchLabel", g_l_ErrorLineNumber
End Sub

Private Function SelectedOption()
    On Error GoTo Error_Handler
    ' As the type to part to search by is changed, we must change
    ' the label to reflect this
    If optSCPart.Value = True Then
        SelectedOption = "SC"
    ElseIf optNSCPart.Value = True Then
        SelectedOption = "NSC"
    Else
        SelectedOption = ""
    End If
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "SelectedOption", g_l_ErrorLineNumber
End Function

Private Sub cmdFindNext_Click()
    Dim RS As ADODB.Recordset
    Dim SearchGrid As DataGrid
    Dim str_SearchField As String
    Dim l_Counter As Long
    
    On Error GoTo Error_Handler
        
    ' Must enter a value to search
    If txtKeyToSearch.Text = "" Then
        MsgBox "Enter a part to find.", vbExclamation, "Cost Estimate System"
        Exit Sub
    End If
    
    ' Get the grid, seach filed and the record set used for searching
    Set SearchGrid = grdPartList
    Select Case SelectedOption()
        Case "SC"
            str_SearchField = "[STOCK CODE]"
        Case "NSC"
            str_SearchField = "[SUPPLIER NUMBER]"
    End Select
    
    If Not SearchGrid.DataSource Is Nothing Then
        Set RS = SearchGrid.DataSource
    Else
        MsgBox "No parts to find.", vbExclamation, "Cost Estimate System"
        Exit Sub
    End If
    
    ' If the grid has lost focus then start seach again
    If RS.AbsolutePage < 0 Then
        m_str_PreviousSearch = ""
        m_str_PreviousSearchType = ""
    End If
    
    ' Determine whether or not they are performing the same
    ' search again or starting a new search
    If m_str_PreviousSearch = txtKeyToSearch.Text And m_str_PreviousSearchType = SelectedOption() Then
        ' Continue Search
        If RS.RecordCount > 0 Then
            RS.AbsolutePosition = RS.Bookmark + 1
            RS.Find str_SearchField & " LIKE '%" & txtKeyToSearch.Text & "%'"
            If RS.EOF Then
                MsgBox "All matching parts have been found.", vbExclamation, "Cost Estimate System"
                m_str_PreviousSearch = ""
                m_str_PreviousSearchType = ""
            Else
                With SearchGrid
                    For l_Counter = .SelBookmarks.Count - 1 To 0 Step -1
                        .SelBookmarks.Remove l_Counter
                    Next
                    .SelBookmarks.Add .RowBookmark(.Row)
                End With
                m_str_PreviousSearch = txtKeyToSearch.Text
                m_str_PreviousSearchType = SelectedOption()
            End If
        Else
            MsgBox "No parts to find.", vbExclamation, "Cost Estimate System"
            m_str_PreviousSearch = txtKeyToSearch.Text
            m_str_PreviousSearchType = SelectedOption()
        End If
    Else
        ' Start New Search
        If RS.RecordCount > 0 Then
            RS.MoveFirst
            RS.Find str_SearchField & " LIKE '%" & txtKeyToSearch.Text & "%'"
            If RS.EOF Then
                RS.MoveFirst
                MsgBox "Part not found.", vbExclamation, "Cost Estimate System"
                With SearchGrid
                    For l_Counter = .SelBookmarks.Count - 1 To 0 Step -1
                        .SelBookmarks.Remove l_Counter
                    Next
                End With
                m_str_PreviousSearch = ""
                m_str_PreviousSearchType = ""
            Else
                With SearchGrid
                    For l_Counter = .SelBookmarks.Count - 1 To 0 Step -1
                        .SelBookmarks.Remove l_Counter
                    Next
                    .SelBookmarks.Add .RowBookmark(.Row)
                End With
                m_str_PreviousSearch = txtKeyToSearch.Text
                m_str_PreviousSearchType = SelectedOption()
            End If
        Else
            MsgBox "No parts to find.", vbExclamation, "Cost Estimate System"
            m_str_PreviousSearch = txtKeyToSearch.Text
            m_str_PreviousSearchType = SelectedOption()
        End If
    End If
            
    Set RS = Nothing
    Set SearchGrid = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdFindNext_Click", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    If Not SearchGrid Is Nothing Then
        Set SearchGrid = Nothing
    End If
End Sub

Private Sub DeleteFromSubKits(ByVal str_KitNumberPassed As String, _
                              ByVal str_SupplierNumber As String, _
                              ByVal str_SupplierName As String, _
                              ByVal str_StockCode As String)
    Dim RS As ADODB.Recordset
    Dim l_Count As Long
    Dim str_KitNumber As String
    Dim str_PartType As String
    Dim str_OEMNumber As String
    Dim str_OEM As String
    Dim str_TTCCode As String
    Dim str_QTY As String
    Dim str_RefNumber As String
    Dim str_Description As String
    Dim l_SeqNumber As Long
    Dim l_RetVal As Long
    Dim l_Result As Long
    
    On Error GoTo Error_Handler
    
    'Delete all records from the SUB_KITS table where
    'kit_part_number = str_KitNumberPassed and
    'supplier_number = str_SupplierNumber and
    'supplier_name = str_SupplierName and
    'stock_code = str_StockCode
    l_Result = modDBHelper.DeleteSubKits1( _
                                "CES_DELETE.DELETE_SUB_KITS1", _
                                l_RetVal, _
                                str_KitNumberPassed, _
                                str_SupplierNumber, _
                                str_SupplierName, _
                                str_StockCode)
    'Get all records from the SUB_KIT table
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.GetAllFromSubKits("CES_INQUIRY.GET_ALL_FROM_SUB_KITS")
    
    'Delete ALL records from the SUB_KITS table.
    l_Result = modDBHelper.DeleteAllSubKits("CES_DELETE.DELETE_ALL_SUB_KITS", l_RetVal)
    
    'Go throufh each record, and change field SUB_KITS.sequence to be sequential
    '(i.e. 1,2,3,4,5,6, etc.)
    If RS.RecordCount > 0 Then
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
            str_KitNumber = modMain.ChangeNullToOneSpase(RS.Fields("KIT NUMBER"))
            str_PartType = modMain.ChangeNullToOneSpase(RS.Fields("PART TYPE"))
            str_OEMNumber = modMain.ChangeNullToOneSpase(RS.Fields("OEM #"))
            str_OEM = modMain.ChangeNullToOneSpase(RS.Fields("OEM"))
            str_TTCCode = modMain.ChangeNullToOneSpase(RS.Fields("TTC CODE"))
            str_QTY = modMain.ChangeNullToOneSpase(RS.Fields("QTY"))
            str_RefNumber = modMain.ChangeNullToOneSpase(RS.Fields("REF #"))
            str_Description = modMain.ChangeNullToOneSpase(RS.Fields("DESCRIPTION"))
            l_SeqNumber = l_Count + 1
            
            l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", _
                        l_RetVal, _
                        str_KitNumber, _
                        str_PartType, _
                        str_OEMNumber, _
                        str_OEM, _
                        str_TTCCode, _
                        str_QTY, _
                        str_RefNumber, _
                        str_Description, _
                        l_SeqNumber)
            RS.MoveNext
        Next l_Count
    End If

    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "DeleteFromSubKits", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Option Explicit

Private m_str_OEMKitNumber As String

Public Sub PassValue(ByVal str_OEMKitNumber As String)
    On Error GoTo Error_Handler
    
    m_str_OEMKitNumber = str_OEMKitNumber
    Call RefreshForm
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PassValues", g_l_ErrorLineNumber
End Sub

Private Sub RefreshForm()
    Dim RS As ADODB.Recordset

    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    Me.Caption = "OEM KIT " & m_str_OEMKitNumber
    'Load current vehicle's kit list
    Set RS = modDBHelper.retrieveSCKitData("CES_INQUIRY.RETRIEVE_SC_KIT_DATA", _
                                                 m_str_OEMKitNumber)
      lstOEMKitRegInfo.Clear
    
      If RS.RecordCount > 0 Then
          RS.MoveFirst
      End If

      If Not RS.EOF Then
          Do While Not RS.EOF
              lstOEMKitRegInfo.AddItem RS.Fields("text_data")
              RS.MoveNext
         
          Loop
      Else
          lstOEMKitRegInfo.AddItem "No OEM Kit Details found in MMS"
      End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "RefreshForm", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler

    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub lstOEMKitRegInfo_Click()

End Sub
Option Explicit

Private Const const_str_RBNumber = "RB"

Private Sub cmdShowAll_Click()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    Call FillGrids
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdShowAll_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

'Opens report for viewing, sends parameters through
Private Sub cmdViewReport_Click()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
       
    'Call the report to display the result of the above sp
    If grdRebuiltParts.Row >= 0 Then
        showRebuiltCostEstimateReport grdRebuiltParts.Columns("REBUILT NUMBER").Text, grdRebuiltParts.Columns("MMS STOCK CODE").Text
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdViewReport_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub InitRBColumns()
    On Error GoTo Error_Handler
    
    With grdRebuiltParts.Columns("REBUILT NUMBER")
        .Width = 1800
        .Visible = True
    End With
    
    With grdRebuiltParts.Columns("DESCRIPTION")
        .Width = 4725
        .Visible = True
    End With
    
    With grdRebuiltParts.Columns("ROWID")
            .Visible = False
    End With

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "InitRBColumns", g_l_ErrorLineNumber
End Sub

Private Sub cmdFindRBPart_Click()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    'Search for a rebuilt part populate the appropriate grid (grdRebuiltParts)
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.SearchRBPart("CES_INQUIRY.SEARCH_RBPART", _
                                            txtRebuiltNumber.Text, _
                                            0, _
                                            "", _
                                            "", _
                                            2)
    
    If RS.RecordCount <> 0 Then
        Set grdRebuiltParts.DataSource = RS
        Call InitRBColumns
    Else
        Set grdRebuiltParts.DataSource = Nothing
    End If
    
    Call SetDefaultCursor
    
    Set RS = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdFindRBPart_dblClick", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    Call FillGrids
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub FillGrids()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler

    Call SetWaitCursor

    'Search for a rebuilt part populate the appropriate grid (grdRebuiltParts)
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.SearchRBPart("CES_INQUIRY.SEARCH_RBPART", _
                                      "", _
                                      "0", _
                                      "", _
                                      "", _
                                      2)
    
    If RS.RecordCount <> 0 Then
        Set grdRebuiltParts.DataSource = RS
        Call InitRBColumns
    Else
        Set grdRebuiltParts.DataSource = Nothing
    End If
    
    Set RS = Nothing
    
    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "FillGrids", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    Call SetDefaultCursor
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler

    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub txtRebuiltNumber_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String

    On Error GoTo Error_Handler

    'Convert data in the txtRebuiltNumber edit-box to upper case.
    l_CursorPosition = txtRebuiltNumber.SelStart
    str_Data = txtRebuiltNumber.Text
    str_Data = UCase(str_Data)
    txtRebuiltNumber.Text = str_Data
    txtRebuiltNumber.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtRebuiltNumber_KeyUp", g_l_ErrorLineNumber
End Sub

Option Explicit

Public m_str_RBNumber As String
Public m_str_MMSStockCode As String
Public m_v_RowID As Variant

Private Sub UserPermissions()
    On Error GoTo Error_Handler

    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        optLoadRBEstimate.Value = True
        optCopyRBEstimate.Visible = False
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "userPermissions", g_l_ErrorLineNumber
End Sub

Private Sub cmdContinue_Click()
    On Error GoTo Error_Handler

    Call SetWaitCursor
    
    If optLoadRBEstimate.Value = True Then
        frmRebuiltPartsMain.PassValues m_str_MMSStockCode, m_str_RBNumber, m_v_RowID
        
        Unload Me
        frmRebuiltPartsMain.Show
        If frmRebuiltPartsMain.WindowState = 1 Then
           frmRebuiltPartsMain.WindowState = 0
        End If
        frmRebuiltPartsMain.SetFocus
    ElseIf optCopyRBEstimate.Value = True Then
        Unload Me
        frmCopyRBEstimate.PassRBNumber m_str_RBNumber, m_str_MMSStockCode
        frmCopyRBEstimate.Show vbModal
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdContinue_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    Call UserPermissions
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub


Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub
Option Explicit

Private m_str_Msg As String
Private m_str_RBNumber As String
Private m_str_LinkNumber As String

' Holds the previous search string
Private m_str_PreviousSearch As String
Private m_str_PreviousSearchType As String
Private m_var_RowSelected As Variant

Public Sub PassValues(ByVal str_RBNumber, ByVal str_LinkNumber)
    On Error GoTo Error_Handler
    
    m_str_RBNumber = str_RBNumber
    m_str_LinkNumber = m_str_RBNumber
    Call Populate
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PassValues", g_l_ErrorLineNumber
End Sub

Private Sub UserPermissions()
    On Error GoTo Error_Handler
        
    If g_l_AccessLevel = 1 Then
        'Button <Add Part> is invisible.
        cmdAddPart.Visible = False
        'Controls at the bottom of the form are invisible.
        lblRebuiltPartsTotal.Visible = False
        lblStockCodedPartsTotal.Visible = False
        lblNonStockCodedPartsTotal.Visible = False
        lblCoreCostTotal.Visible = False
        lblTotalMaterialsCost.Visible = False
        txtRebuiltPartsTotal.Visible = False
        txtStockCodedPartsTotal.Visible = False
        txtNonStockCodedPartsTotal.Visible = False
        txtCoreCostTotal.Visible = False
        txtTotalMaterialsCost.Visible = False
        If grdRebuiltPartsList.Columns.Count > 2 Then
            'Grid "Rebuilt Parts List". Columns"UNIT_COST", "TOTAL_COST" are
            'invisible.
            grdRebuiltPartsList.Columns("UNIT COST").Visible = False
'            grdRebuiltPartsList.Columns("CORE COST").Visible = False
            grdRebuiltPartsList.Columns("TOTAL COST").Visible = False
        End If
        If grdStockCodedPartsList.Columns.Count > 2 Then
            'Grid "Stock Coded Parts List". Columns"UNIT_COST", "CORE COST", "TOTAL_COST"
            'are invisible.
            grdStockCodedPartsList.Columns("UNIT COST").Visible = False
            grdStockCodedPartsList.Columns("CORE COST").Visible = False
            grdStockCodedPartsList.Columns("TOTAL COST").Visible = False
        End If
        If grdNonStockCodedPartsList.Columns.Count > 2 Then
            'Grid "Non-Stock Coded Parts List". Columns"COST", "CORE COST", "TOTAL_COST"
            'are invisible.
            grdNonStockCodedPartsList.Columns("UNIT COST").Visible = False
            grdNonStockCodedPartsList.Columns("CORE COST").Visible = False
            grdNonStockCodedPartsList.Columns("TOTAL COST").Visible = False
        End If
    ElseIf g_l_AccessLevel = 2 Then
        'Button <Add Part> is invisible.
        cmdAddPart.Visible = False
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "UserPermissions", g_l_ErrorLineNumber
End Sub

Private Sub cmdAddPart_Click()
    On Error GoTo Error_Handler
    
    If frmTypeOfPart.WindowState = 1 Or frmTypeOfPart.WindowState = 2 Then
        frmTypeOfPart.WindowState = 0
    End If
    frmTypeOfPart.m_str_LinkNumber = m_str_RBNumber
    frmTypeOfPart.m_str_AuditReference = Trim(txtRebuiltCode.Text)
    frmTypeOfPart.m_str_FormType = "Rebuilt"
    frmTypeOfPart.Show vbModal
    'Call frmRebuiltPartsMain.RefreshForm
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdAddPart_Click", g_l_ErrorLineNumber
End Sub

Private Sub Populate()
    On Error GoTo Error_Handler
    
    txtRebuiltCode.Text = m_str_RBNumber
    
    Call PopulateGrids
    Call FormatGrids
    Call UserPermissions

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Populate", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub cmdRefresh_Click()
    On Error GoTo Error_Handler
    
    Call frmRebuiltPartsMain.RefreshForm
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdRefresh_click", g_l_ErrorLineNumber
    Call SetDefaultCursor
    
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler

    Call SetWaitCursor
    'Keep the form open until the frmRebuiltPartsMain closes
    If UnloadMode = 0 Then
        Cancel = True
        Call SetDefaultCursor
        Me.Hide
    End If
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub PopulateGrids()
    Dim RS As ADODB.Recordset
'    Dim curr_RBCoreCostTotal As Currency
    Dim curr_SCPCoreCostTotal As Currency
    Dim curr_NSPCoreCostTotal As Currency
    Dim curr_CoreCostTotal As Currency
    Dim l_RetVal As Long
    Dim l_Result As Long
        
    On Error GoTo Error_Handler
        
    Set RS = New ADODB.Recordset
    
    'Populate the non-stock coded items
    Set RS = modDBHelper.RetrieveNSCPUsed("CES_INQUIRY.RETRIEVE_NSCP_USED", _
                                          m_str_LinkNumber, _
                                          "RB")
    
    If RS.RecordCount > 0 Then
        Set grdNonStockCodedPartsList.DataSource = RS
        curr_NSPCoreCostTotal = Format(ColumnTotals(RS, "core cost"), "currency")
        RS.MoveFirst
        txtNonStockCodedPartsTotal.Text = Format(ColumnTotals(RS, "total cost"), "currency")
    Else
        Set grdNonStockCodedPartsList.DataSource = Nothing
        curr_NSPCoreCostTotal = Format(0#, "currency")
        txtNonStockCodedPartsTotal.Text = Format(0#, "currency")
    End If
    
    'Populate the stock coded items
    Set RS = modDBHelper.RetrieveSCPUsed("CES_INQUIRY.RETRIEVE_SCP_USED", _
                                         m_str_LinkNumber, _
                                         "N", _
                                         "RB")
    
    If RS.RecordCount > 0 Then
        Set grdStockCodedPartsList.DataSource = RS
        curr_SCPCoreCostTotal = Format(ColumnTotals(RS, "CORE COST"), "currency")
        
        RS.MoveFirst
        txtStockCodedPartsTotal.Text = Format( _
                                    ColumnTotals(RS, "total cost"), "currency")
    Else
        Set grdStockCodedPartsList.DataSource = Nothing
        curr_SCPCoreCostTotal = Format(0#, "currency")
        txtStockCodedPartsTotal.Text = Format(0#, "currency")
    End If

    Set RS = modDBHelper.RetrieveRBPUsed("CES_INQUIRY.RETRIEVE_RBP_USED", _
                                         m_str_LinkNumber, _
                                         "RB")
    If RS.RecordCount > 0 Then
        Set grdRebuiltPartsList.DataSource = RS
'       curr_RBCoreCostTotal = Format(ColumnTotals(RS, "core cost"), "currency")
        RS.MoveFirst
        txtRebuiltPartsTotal.Text = Format(ColumnTotals(RS, "total cost"), "currency")
    Else
        Set grdRebuiltPartsList.DataSource = Nothing
'       curr_RBCoreCostTotal = Format(0#, "currency")
        txtRebuiltPartsTotal.Text = Format(0#, "currency")
    End If
        
    curr_CoreCostTotal = curr_SCPCoreCostTotal + curr_NSPCoreCostTotal
    
    'Calculate the materials total
    txtCoreCostTotal.Text = Format((curr_CoreCostTotal * -1), "currency")
    txtTotalMaterialsCost.Text = Format( _
                                CCur(txtRebuiltPartsTotal.Text) + _
                                CCur(txtNonStockCodedPartsTotal.Text) + _
                                CCur(txtStockCodedPartsTotal.Text) - curr_CoreCostTotal, "currency")

    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateGrids", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub FormatGrids()
    On Error GoTo Error_Handler
     
    If grdNonStockCodedPartsList.Columns.Count > 2 Then
        With grdNonStockCodedPartsList
            .Columns("SUPPLIER NUMBER").Width = 1900
            .Columns("SUPPLIER NAME").Width = 1700
            .Columns("CC").Width = 500
            .Columns("QTY").Alignment = dbgRight
            .Columns("QTY").Width = 500
            .Columns("%").Alignment = dbgRight
            .Columns("%").Width = 500
            .Columns("UNIT COST").Alignment = dbgRight
            .Columns("UNIT COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("UNIT COST").Width = 1200

            .Columns("CORE COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("CORE COST").Width = 1200
            .Columns("TOTAL COST").Alignment = dbgRight
            .Columns("TOTAL COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("TOTAL COST").Width = 1200
            .Columns("DESCRIPTION").Width = 4000
            .Columns("LAST MODIFIED DATE").Alignment = dbgRight
            .Columns("LAST MODIFIED DATE").Width = 2400
            .Columns("LAST MODIFIED DATE").NumberFormat = "yyyy-mmm-dd hh:mm:ss AMPM"
            .Columns("ID").Visible = False
            .Columns("ROWID").Visible = False
        End With
    End If
    
    If grdStockCodedPartsList.Columns.Count > 2 Then
        With grdStockCodedPartsList
            .Columns("UNIT COST").Alignment = dbgRight
            .Columns("UNIT COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("UNIT COST").Width = 1100
            .Columns("CC").Width = 500
            .Columns("QTY").Alignment = dbgRight
            .Columns("QTY").Width = 500
            .Columns("%").Alignment = dbgRight
            .Columns("%").Width = 500
            .Columns("CORE COST").Alignment = dbgRight
            .Columns("CORE COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("CORE COST").Width = 1200
            .Columns("TOTAL COST").Alignment = dbgRight
            .Columns("TOTAL COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("TOTAL COST").Width = 1200
            .Columns("DESCRIPTION").Width = 4000
            .Columns("DESCRIPTION").Caption = "DESCRIPTION"
            .Columns("OEM COST").Visible = False
            .Columns("MMS REBUILT CODE").Visible = False
            .Columns("REBUILT PART COST").Visible = False
            .Columns("REBUILT PART").Visible = False
            .Columns("ROWID").Visible = False
        End With
    End If
    
    If grdRebuiltPartsList.Columns.Count > 2 Then
        With grdRebuiltPartsList
            '.Columns("CC").Width = 500
            .Columns("CC").Visible = False
            .Columns("QTY").Alignment = dbgRight
            .Columns("QTY").Width = 500
            .Columns("%").Alignment = dbgRight
            .Columns("%").Width = 500
            .Columns("UNIT COST").Alignment = dbgRight
            .Columns("UNIT COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("UNIT COST").Width = 1200
'            .Columns("CORE COST").Alignment = dbgRight
'            .Columns("CORE COST").NumberFormat = "$#,##0.00;($#,##0.00)"
'            .Columns("CORE COST").Width = 1200
            .Columns("CORE COST").Visible = False
            .Columns("TOTAL COST").Alignment = dbgRight
            .Columns("TOTAL COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("TOTAL COST").Width = 1200
            .Columns("DESCRIPTION").Width = 4000
            .Columns("ROWID").Visible = False
        End With
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "FormatGrids", g_l_ErrorLineNumber
End Sub

Private Sub grdNonStockCodedPartsList_DblClick()
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not allow user go further, just exit sub.
        Exit Sub
    End If
    
    'Update the non stock coded part
    If grdNonStockCodedPartsList.Row >= 0 Then
          m_var_RowSelected = grdNonStockCodedPartsList.Bookmark
        Dim formshow As New frmAddNSCPToEstimate
        Call SetWaitCursor
        formshow.m_str_LinkNumber = m_str_LinkNumber
        formshow.Caption = "Edit a Non-Stock Coded Part in the Rebuilt Part Estimate"
        formshow.m_str_TypeCode = "RB"
        formshow.m_str_AuditReference = Trim(txtRebuiltCode.Text)
        formshow.PassValues grdNonStockCodedPartsList.Columns("SUPPLIER NUMBER").Value, _
                            grdNonStockCodedPartsList.Columns("SUPPLIER NAME").Value, _
                            grdNonStockCodedPartsList.Columns("CC").Value, _
                            grdNonStockCodedPartsList.Columns("%").Value, _
                            grdNonStockCodedPartsList.Columns("QTY").Value, _
                            grdNonStockCodedPartsList.Columns("ROWID").Value, _
                            grdNonStockCodedPartsList.Columns("CORE COST").Value
        formshow.cboSupplierName.Enabled = False
        formshow.cmdAdd.Enabled = True
        formshow.Show vbModal
        Call frmRebuiltPartsMain.RefreshForm
          grdNonStockCodedPartsList.Bookmark = m_var_RowSelected
        Call SetDefaultCursor
    End If
        
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdNonStockCodedPartsList_DblClick", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub grdNonStockCodedPartsList_KeyDown(KeyCode As Integer, Shift As Integer)
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim l_Count As Long
    Dim str_PartID As String
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler

    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not allow user go further, just exit sub.
        Exit Sub
    End If
    
    If KeyCode = vbKeyDelete And grdNonStockCodedPartsList.Row >= 0 Then
        m_str_Msg = "Are you sure you want to delete this item?"
        l_Result = MsgBox(m_str_Msg, vbOKCancel Or vbQuestion, _
                          "Delete Materials of this Rebuilt Part")
        If l_Result = vbOK Then
            str_PartID = grdNonStockCodedPartsList.Columns("ROWID").Text
            Call SetWaitCursor
            l_Result = modDBHelper.DeleteNSCPUsed("CES_DELETE.DELETE_NSCP_USED", _
                                                  l_RetVal, _
                                                  str_PartID)
                                                  
            '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT Begin >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            
            'Insert record into the AUDIT_MODIFY_HISTORY table.
            l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                    "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                    l_RetVal, _
                    "Delete Non-Stock Coded Part", _
                    Trim(txtRebuiltCode.Text), _
                    "RB", _
                    "SUPPLIER NUMBER ---> " + grdNonStockCodedPartsList.Columns("SUPPLIER NUMBER").Text, _
                    "SUPPLIER NAME ---> " + grdNonStockCodedPartsList.Columns("SUPPLIER NAME").Text, _
                    "CC ---> " + grdNonStockCodedPartsList.Columns("CC").Text, _
                    "QTY ---> " + grdNonStockCodedPartsList.Columns("QTY").Text, _
                    "% ---> " + grdNonStockCodedPartsList.Columns("%").Text, _
                    "UNIT COST ---> " + grdNonStockCodedPartsList.Columns("UNIT COST").Text, _
                    "CORE COST ---> " + grdNonStockCodedPartsList.Columns("CORE COST").Text, _
                    "TOTAL COST ---> " + grdNonStockCodedPartsList.Columns("TOTAL COST").Text, _
                    "DESCRIPTION ---> " + grdNonStockCodedPartsList.Columns("DESCRIPTION").Text, _
                    "KEYWORD ---> " + grdNonStockCodedPartsList.Columns("KEYWORD").Text, _
                    "LAST MODIFIED DATE ---> " + grdNonStockCodedPartsList.Columns("LAST MODIFIED DATE").Text)
            
            'Now find all estimates where current Rebuilt Part Estimate is present.
            Set RS = New ADODB.Recordset
            
            'In the SC_PARTS_USED table find all Estimates where the current RBE is present.
            Set RS = modDBHelper.RetrieveESTToPropagateRB("CES_INQUIRY.RETRIEVE_EST_TO_PROPAGATE_RB", _
                                                          m_str_RBNumber)
            If RS.RecordCount > 0 Then
                RS.MoveFirst
                    For l_Count = 0 To RS.RecordCount - 1
                        'Add records to the AUDIT_MODIFY_HISTORY table.
                        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "Indirect change. Non-Stock Coded Part was deleted from the Rebuilt Part Estimate " + m_str_RBNumber, _
                            RS.Fields.Item("link_code"), _
                            RS.Fields.Item("link_type"), _
                            "SUPPLIER NUMBER ---> " + grdNonStockCodedPartsList.Columns("SUPPLIER NUMBER").Text, _
                            "SUPPLIER NAME ---> " + grdNonStockCodedPartsList.Columns("SUPPLIER NAME").Text, _
                            "CC ---> " + grdNonStockCodedPartsList.Columns("CC").Text, _
                            "QTY ---> " + grdNonStockCodedPartsList.Columns("QTY").Text, _
                            "% ---> " + grdNonStockCodedPartsList.Columns("%").Text, _
                            "UNIT COST ---> " + grdNonStockCodedPartsList.Columns("UNIT COST").Text, _
                            "CORE COST ---> " + grdNonStockCodedPartsList.Columns("CORE COST").Text, _
                            "TOTAL COST ---> " + grdNonStockCodedPartsList.Columns("TOTAL COST").Text, _
                            "DESCRIPTION ---> " + grdNonStockCodedPartsList.Columns("DESCRIPTION").Text, _
                            "KEYWORD ---> " + grdNonStockCodedPartsList.Columns("KEYWORD").Text, _
                            "LAST MODIFIED DATE ---> " + grdNonStockCodedPartsList.Columns("LAST MODIFIED DATE").Text)
                        RS.MoveNext
                    Next l_Count
            End If
            Set RS = Nothing
            '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT End >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            Call frmRebuiltPartsMain.RefreshForm
            Call SetDefaultCursor
        End If
    End If

    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdNonStockCodedPartsList_KeyDown", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub grdStockCodedPartsList_DblClick()
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not allow user go further, just exit sub.
        Exit Sub
    End If
    
    'Update the stock coded part
    If grdStockCodedPartsList.Row >= 0 Then
          m_var_RowSelected = grdStockCodedPartsList.Bookmark
        Dim formshow As New frmAddSCPToEstimate
        Call SetWaitCursor
        formshow.Caption = "Edit a Stock Coded Part in the Rebuilt Part Estimate"
        formshow.m_str_TypeCode = "RB"
        'formshow.m_var_RowID = grdStockCodedPartsList.Columns("ROWID").Value
        formshow.m_str_MBNumber = m_str_LinkNumber
        formshow.m_str_AuditReference = Trim(txtRebuiltCode.Text)
        formshow.PassValues grdStockCodedPartsList.Columns("STOCK CODE").Value, _
                            grdStockCodedPartsList.Columns("CC").Value, _
                            grdStockCodedPartsList.Columns("%").Value, _
                            grdStockCodedPartsList.Columns("QTY").Value, _
                            grdStockCodedPartsList.Columns("ROWID").Value, _
                            grdStockCodedPartsList.Columns("CORE COST").Value
        formshow.Show vbModal
        Call frmRebuiltPartsMain.RefreshForm
          grdStockCodedPartsList.Bookmark = m_var_RowSelected
        Call SetDefaultCursor
    End If

    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdStockCodedPartsList_DblClick", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub grdStockCodedPartsList_KeyDown(KeyCode As Integer, Shift As Integer)
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim l_Count As Long
    Dim str_PartID As String
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not allow user go further, just exit sub.
        Exit Sub
    End If
    
    If KeyCode = vbKeyDelete And grdStockCodedPartsList.Row >= 0 Then
        m_str_Msg = "Are you sure you want to delete this item?"
        l_Result = MsgBox(m_str_Msg, vbOKCancel Or vbQuestion, _
                          "Delete Materials of this Rebuilt Part")
        If l_Result = vbOK Then
            str_PartID = grdStockCodedPartsList.Columns("ROWID").Text
            Call SetWaitCursor
            l_Result = modDBHelper.DeleteSCPUsed("CES_DELETE.DELETE_SCP_USED", _
                                                 l_RetVal, _
                                                 str_PartID)
            '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT Begin >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            'Insert record into the AUDIT_MODIFY_HISTORY table.
            l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                    "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                    l_RetVal, _
                    "Delete Stock Coded Part", _
                    Trim(txtRebuiltCode.Text), _
                    "RB", _
                    "STOCK CODE ---> " + grdStockCodedPartsList.Columns("STOCK CODE").Text, _
                    "UNIT COST ---> " + grdStockCodedPartsList.Columns("UNIT COST").Text, _
                    "CC ---> " + grdStockCodedPartsList.Columns("CC").Text, _
                    "QTY ---> " + grdStockCodedPartsList.Columns("QTY").Text, _
                    "% ---> " + grdStockCodedPartsList.Columns("%").Text, _
                    "CORE COST ---> " + grdStockCodedPartsList.Columns("CORE COST").Text, _
                    "TOTAL COST ---> " + grdStockCodedPartsList.Columns("TOTAL COST").Text, _
                    "DESCRIPTION ---> " + grdStockCodedPartsList.Columns("DESCRIPTION").Text, _
                    "KEYWORD ---> " + grdStockCodedPartsList.Columns("KEYWORD").Text)
            
            'Now find all estimates where current Rebuilt Part Estimate is present.
            Set RS = New ADODB.Recordset
            
            'In the SC_PARTS_USED table find all Estimates where the current RBE is present.
            Set RS = modDBHelper.RetrieveESTToPropagateRB("CES_INQUIRY.RETRIEVE_EST_TO_PROPAGATE_RB", _
                                                          m_str_RBNumber)
            If RS.RecordCount > 0 Then
                RS.MoveFirst
                    For l_Count = 0 To RS.RecordCount - 1
                        'Add records to the AUDIT_MODIFY_HISTORY table.
                        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "Indirect change. Stock Coded Part was deleted from the Rebuilt Part Estimate " + m_str_RBNumber, _
                            RS.Fields.Item("link_code"), _
                            RS.Fields.Item("link_type"), _
                            "STOCK CODE ---> " + grdStockCodedPartsList.Columns("STOCK CODE").Text, _
                            "UNIT COST ---> " + grdStockCodedPartsList.Columns("UNIT COST").Text, _
                            "CC ---> " + grdStockCodedPartsList.Columns("CC").Text, _
                            "QTY ---> " + grdStockCodedPartsList.Columns("QTY").Text, _
                            "% ---> " + grdStockCodedPartsList.Columns("%").Text, _
                            "CORE COST ---> " + grdStockCodedPartsList.Columns("CORE COST").Text, _
                            "TOTAL COST ---> " + grdStockCodedPartsList.Columns("TOTAL COST").Text, _
                            "DESCRIPTION ---> " + grdStockCodedPartsList.Columns("DESCRIPTION").Text, _
                            "KEYWORD ---> " + grdStockCodedPartsList.Columns("KEYWORD").Text)
                        RS.MoveNext
                    Next l_Count
            End If
            Set RS = Nothing
            '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT End >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            Call frmRebuiltPartsMain.RefreshForm
            Call SetDefaultCursor
        End If
    End If
    
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdStockCodedPartsList_KeyDown", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    Call SetDefaultCursor
End Sub

Private Sub grdRebuiltPartsList_DblClick()
    On Error GoTo Error_Handler

    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not allow user go further, just exit sub.
        Exit Sub
    End If

    'Update the stock coded part
    If grdRebuiltPartsList.Row >= 0 Then
          m_var_RowSelected = grdRebuiltPartsList.Bookmark
        Dim formshow As New frmAddRBPToEstimate
        Call SetWaitCursor
        formshow.Caption = "Edit a Rebuilt Part in the Rebuilt Part Estimate"
        formshow.m_str_TypeCode = "RB"
        formshow.m_str_LinkNumber = m_str_LinkNumber
        formshow.m_str_AuditReference = Trim(txtRebuiltCode.Text)
        formshow.PassValues grdRebuiltPartsList.Columns("REBUILT NUMBER").Value, _
                            grdRebuiltPartsList.Columns("%").Value, _
                            grdRebuiltPartsList.Columns("QTY").Value, _
                            grdRebuiltPartsList.Columns("ROWID").Value
        formshow.Show vbModal
        Call frmRebuiltPartsMain.RefreshForm
          grdRebuiltPartsList.Bookmark = m_var_RowSelected
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdRebuiltPartsList_DblClick", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub grdRebuiltPartsList_KeyDown(KeyCode As Integer, Shift As Integer)
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim l_Count As Long
    Dim str_PartID As String
    Dim RS As ADODB.Recordset
        
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not allow user go further, just exit sub.
        Exit Sub
    End If
    
    If KeyCode = vbKeyDelete And grdRebuiltPartsList.Row >= 0 Then
        m_str_Msg = "Are you sure you want to delete this item?"
        l_Result = MsgBox(m_str_Msg, vbOKCancel Or vbQuestion, _
                          "Delete Materials of this Rebuilt Part")
        If l_Result = vbOK Then
            str_PartID = grdRebuiltPartsList.Columns("ROWID").Text
            Call SetWaitCursor
            l_Result = modDBHelper.DeleteSCPUsed("CES_DELETE.DELETE_SCP_USED", _
                                                 l_RetVal, _
                                                 str_PartID)
            '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT Begin >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            'Insert record into the AUDIT_MODIFY_HISTORY table.
            l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                    "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                    l_RetVal, _
                    "Delete Rebuilt Part", _
                    Trim(txtRebuiltCode.Text), _
                    "RB", _
                    "UNIT COST ---> " + grdRebuiltPartsList.Columns("UNIT COST").Text, _
                    "REBUILT NUMBER ---> " + grdRebuiltPartsList.Columns("REBUILT NUMBER").Text, _
                    "CC ---> " + grdRebuiltPartsList.Columns("CC").Text, _
                    "QTY ---> " + grdRebuiltPartsList.Columns("QTY").Text, _
                    "% ---> " + grdRebuiltPartsList.Columns("%").Text, _
                    "TOTAL COST ---> " + grdRebuiltPartsList.Columns("TOTAL COST").Text, _
                    "DESCRIPTION ---> " + grdRebuiltPartsList.Columns("DESCRIPTION").Text, _
                    "KEYWORD ---> " + grdRebuiltPartsList.Columns("KEYWORD").Text)
            
            'Now find all estimates where current Rebuilt Part Estimate is present.
            Set RS = New ADODB.Recordset
            
            'In the SC_PARTS_USED table find all Estimates where the current RBE is present.
            Set RS = modDBHelper.RetrieveESTToPropagateRB("CES_INQUIRY.RETRIEVE_EST_TO_PROPAGATE_RB", _
                                                          m_str_RBNumber)
            If RS.RecordCount > 0 Then
                RS.MoveFirst
                    For l_Count = 0 To RS.RecordCount - 1
                        'Add records to the AUDIT_MODIFY_HISTORY table.
                        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "Indirect change. Rebuilt Part was deleted from the Rebuilt Part Estimate " + m_str_RBNumber, _
                            RS.Fields.Item("link_code"), _
                            RS.Fields.Item("link_type"), _
                            "UNIT COST ---> " + grdRebuiltPartsList.Columns("UNIT COST").Text, _
                            "REBUILT NUMBER ---> " + grdRebuiltPartsList.Columns("REBUILT NUMBER").Text, _
                            "CC ---> " + grdRebuiltPartsList.Columns("CC").Text, _
                            "QTY ---> " + grdRebuiltPartsList.Columns("QTY").Text, _
                            "% ---> " + grdRebuiltPartsList.Columns("%").Text, _
                            "TOTAL COST ---> " + grdRebuiltPartsList.Columns("TOTAL COST").Text, _
                            "DESCRIPTION ---> " + grdRebuiltPartsList.Columns("DESCRIPTION").Text, _
                            "KEYWORD ---> " + grdRebuiltPartsList.Columns("KEYWORD").Text)
                        RS.MoveNext
                    Next l_Count
            End If
            Set RS = Nothing
'>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT End >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            Call frmRebuiltPartsMain.RefreshForm
            Call SetDefaultCursor
        End If
    End If
    
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If

    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdRebuiltPartsList_KeyDown", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    Call SetDefaultCursor
End Sub

Private Sub optNSCPart_Click()
    On Error GoTo Error_Handler
    
    Call ChangeSearchLabel
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "optNSCPart_Click", g_l_ErrorLineNumber
End Sub

Private Sub optRBPart_Click()
    On Error GoTo Error_Handler
    
    Call ChangeSearchLabel
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "optRBPart_Click", g_l_ErrorLineNumber
End Sub

Private Sub optSCPart_Click()
    On Error GoTo Error_Handler
    
    Call ChangeSearchLabel
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "optSCPart_Click", g_l_ErrorLineNumber
End Sub

Private Sub ChangeSearchLabel()
    On Error GoTo Error_Handler:
    ' As the type to part to search by is changed, we must change
    ' the label to reflect this
    If optRBPart.Value = True Then
        lblKeyToSearch.Caption = "Rebuilt Number:"
    ElseIf optSCPart.Value = True Then
        lblKeyToSearch.Caption = "Stock Code:"
    ElseIf optNSCPart.Value = True Then
        lblKeyToSearch.Caption = "Supplier Number:"
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "ChangeSearchLabel", g_l_ErrorLineNumber
End Sub

Private Function SelectedOption()
    On Error GoTo Error_Handler:
    ' As the type to part to search by is changed, we must change
    ' the label to reflect this
    If optRBPart.Value = True Then
        SelectedOption = "RB"
    ElseIf optSCPart.Value = True Then
        SelectedOption = "SC"
    ElseIf optNSCPart.Value = True Then
        SelectedOption = "NSC"
    Else
        SelectedOption = ""
    End If
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "SelectedOption", g_l_ErrorLineNumber
End Function

Private Sub cmdFindNext_Click()
    Dim RS As ADODB.Recordset
    Dim SearchGrid As DataGrid
    Dim str_SearchField As String
    Dim l_Counter As Long
    
    On Error GoTo Error_Handler:
        
    ' Must enter a value to search
    If txtKeyToSearch.Text = "" Then
        MsgBox "Enter a part to find.", vbExclamation, "Cost Estimate System"
        Exit Sub
    End If
    
    ' Get the grid, seach filed and the record set used for searching
    Select Case SelectedOption()
        Case "RB"
            Set SearchGrid = grdRebuiltPartsList
            str_SearchField = "[REBUILT NUMBER]"
        Case "SC"
            Set SearchGrid = grdStockCodedPartsList
            str_SearchField = "[STOCK CODE]"
        Case "NSC"
            Set SearchGrid = grdNonStockCodedPartsList
            str_SearchField = "[SUPPLIER NUMBER]"
    End Select
    
    If Not SearchGrid.DataSource Is Nothing Then
        Set RS = SearchGrid.DataSource
    Else
        MsgBox "No parts to find.", vbExclamation, "Cost Estimate System"
        Exit Sub
    End If
    
    ' If the grid has lost focus then start seach again
    If RS.AbsolutePage < 0 Then
        m_str_PreviousSearch = ""
        m_str_PreviousSearchType = ""
    End If
    
    ' Determine whether or not they are performing the same
    ' search again or starting a new search
    If m_str_PreviousSearch = txtKeyToSearch.Text And m_str_PreviousSearchType = SelectedOption() Then
        ' Continue Search
        If RS.RecordCount > 0 Then
            RS.AbsolutePosition = RS.Bookmark + 1
            RS.Find str_SearchField & " LIKE '%" & txtKeyToSearch.Text & "%'"
            If RS.EOF Then
                MsgBox "All matching parts have been found.", vbExclamation, "Cost Estimate System"
                m_str_PreviousSearch = ""
                m_str_PreviousSearchType = ""
            Else
                With SearchGrid
                    For l_Counter = .SelBookmarks.Count - 1 To 0 Step -1
                        .SelBookmarks.Remove l_Counter
                    Next
                    .SelBookmarks.Add .RowBookmark(.Row)
                End With
                m_str_PreviousSearch = txtKeyToSearch.Text
                m_str_PreviousSearchType = SelectedOption()
            End If
        Else
            MsgBox "No parts to find.", vbExclamation, "Cost Estimate System"
            m_str_PreviousSearch = txtKeyToSearch.Text
            m_str_PreviousSearchType = SelectedOption()
        End If
    Else
        ' Start New Search
        If RS.RecordCount > 0 Then
            RS.MoveFirst
            RS.Find str_SearchField & " LIKE '%" & txtKeyToSearch.Text & "%'"
            If RS.EOF Then
                RS.MoveFirst
                MsgBox "Part not found.", vbExclamation, "Cost Estimate System"
                With SearchGrid
                    For l_Counter = .SelBookmarks.Count - 1 To 0 Step -1
                        .SelBookmarks.Remove l_Counter
                    Next
                End With
                m_str_PreviousSearch = ""
                m_str_PreviousSearchType = ""
            Else
                With SearchGrid
                    For l_Counter = .SelBookmarks.Count - 1 To 0 Step -1
                        .SelBookmarks.Remove l_Counter
                    Next
                    .SelBookmarks.Add .RowBookmark(.Row)
                End With
                m_str_PreviousSearch = txtKeyToSearch.Text
                m_str_PreviousSearchType = SelectedOption()
            End If
        Else
            MsgBox "No parts to find.", vbExclamation, "Cost Estimate System"
            m_str_PreviousSearch = txtKeyToSearch.Text
            m_str_PreviousSearchType = SelectedOption()
        End If
    End If
            
    Set RS = Nothing
    Set SearchGrid = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdFindNext_Click", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    If Not SearchGrid Is Nothing Then
        Set SearchGrid = Nothing
    End If
End Sub
Option Explicit

Private m_str_Msg As String
Private l_Result As Long
Private l_RetVal As Long

Public m_str_LinkNumber As String
Public m_str_RBNumber As String
Public m_var_RowID As Variant
Public m_isRB As Boolean
Public m_silent_mode As Boolean


Public Sub PassValues(ByVal str_LinkNumber As String, ByVal str_RBNumber As String, var_RowID As Variant)
   On Error GoTo Error_Handler
    
    ' Close the existing show all labour form
    If Not frmViewAllLabour Is Nothing Then
        Unload frmViewAllLabour
    End If
    
    m_str_LinkNumber = str_LinkNumber
    m_str_RBNumber = str_RBNumber
    m_var_RowID = var_RowID
    Call RefreshForm
    
    If g_str_UseOverheadFringe = "F" Then
        lblLabourOverheadAmount.Caption = "Fringe Value Total"
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PassValues", g_l_ErrorLineNumber
End Sub

Public Sub RefreshForm()
    On Error GoTo Error_Handler

    Call SetWaitCursor
    frmRebuiltPartsAddMaterials.PassValues m_str_RBNumber, m_str_LinkNumber
    Call Populate
    Call PopulateChangesMadeBy
    Call UserPermissions
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "RefreshForm", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub UserPermissions()
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Then
        'Menu <Add a Labour Task> is disabled.
        tbMenu.Buttons(2).ButtonMenus(1).Enabled = False
        'Menu <View><Archived Database> is disabled.
        tbMenu.Buttons(3).ButtonMenus(3).Enabled = False

        'Menu <Edit><Archive> is disabled.
        tbMenu.Buttons(2).ButtonMenus(3).Enabled = False
        
        If grdLabour.Columns.Count > 2 Then
            'Grid "Labour". Columns "Time", "Wrench Time" are invisible.
            grdLabour.Columns("TIME").Visible = False
            grdLabour.Columns("WRENCH TIME").Visible = False
        End If
        'Grid "Materials Cost Centre Totals". Column "Total Cost" is invisible.
        grdMaterialsCostCentreTotals.Columns("TOTAL COST").Visible = False
        'Controls in the right bottom corner of the form are invisible.
        lblLabourSubtotal.Visible = False
        lblLabourOverheadAmount.Visible = False
        lblLabourTotal.Visible = False
        lblMaterialsTotal.Visible = False
        lblTotalRebuiltPartCost.Visible = False
        txtLabourSubtotal.Visible = False
        txtLabourOverheadAmount.Visible = False
        txtLabourTotal.Visible = False
        txtMaterialTotal.Visible = False
        txtTotalRebuiltPartCost.Visible = False
        lblCoreCost.Visible = False
        txtCoreCost.Visible = False
        lblTaxTotal.Visible = False
        txtTaxTotal.Visible = False
        lblTotalWithTax.Visible = False
        txtTotalRebuiltPartCostWithTax.Visible = False
        'Button "Edit Rebuilt Part Info" is invisible.
        'btnRebuiltPartEdit.Visible = False
        'tbMenu.Buttons.Item.Enabled
        tbMenu.Buttons(2).ButtonMenus(2).Enabled = False
        'Edit-box "S.O.P. Number" is disabled
        txtSOPNumber.Enabled = False
        'Edit-boxes at the top of the form are disabled.
        txtRebuiltCode.Enabled = False
        txtKeyword.Enabled = False
        txtDescription.Enabled = False
    ElseIf g_l_AccessLevel = 2 Then
        'Menu <Add a Labour Task> is disabled.
        tbMenu.Buttons(2).ButtonMenus(1).Enabled = False
        'Menu <View><Archived Database> is disabled.
        tbMenu.Buttons(3).ButtonMenus(3).Enabled = False
         'Menu <Edit><Archive> is disabled.
        tbMenu.Buttons(2).ButtonMenus(3).Enabled = False
        'Button "Edit Rebuilt Part Info" is invisible.
        tbMenu.Buttons(2).ButtonMenus(2).Enabled = False
        
        'All controls except grids, are disabled.
        txtRebuiltCode.Enabled = False
        txtKeyword.Enabled = False
        txtDescription.Enabled = False
        txtLabourSubtotal.Enabled = False
        txtLabourOverheadAmount.Enabled = False
        txtLabourTotal.Enabled = False
        txtMaterialTotal.Enabled = False
        txtTotalRebuiltPartCost.Enabled = False
        txtSOPNumber.Enabled = False
    End If
    
    If g_l_AccessLevel < 4 Then
        tbMenu.Buttons(3).ButtonMenus(2).Enabled = False
        lblChangesMadeBy.Visible = False
        cboChangesMadeBy.Visible = False
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "UserPermissions", g_l_ErrorLineNumber
End Sub

'Populates the grids on the form
Public Sub Populate()
    Dim var_MMSStockCode As String
    Dim cur_MMSCost As String
    Dim var_NSCRowID As Variant
    Dim str_OrigSuppNum As String
    Dim str_FileText As String
    Dim FSO As FileSystemObject
    Dim TS As TextStream
    Dim RS As ADODB.Recordset
    Dim RS2 As ADODB.Recordset
    Dim RSNewStock As Recordset
    Dim str_LabourTotal As String
    Dim str_MaterialTotal As String
    Dim str_CoreCost As String
    Dim str_TotalRebuiltPartCost As String
    Dim dbl_TaxRate As Double
    Dim l_Hours As Long
    Dim l_Minutes As Long
    Dim l_Count As Long
    Dim duplicate As Boolean
    
    On Error GoTo Error_Handler
    
    'First populate the rebuilt information
    Set RS = New ADODB.Recordset
    duplicate = False 'initialize as false
    Set RS = modDBHelper.RetrieveRB("CES_INQUIRY.RETRIEVE_RB")
    If RS.RecordCount > 0 Then
        RS.Filter = "mms_stock_code = '" + m_str_LinkNumber + "' and rebuilt_stock_num = '" + m_str_RBNumber + "'"
        txtRebuiltCode.Text = RS.Fields.Item("REBUILT_STOCK_NUM")
        txtKeyword.Text = RS.Fields.Item("KEYWORD")
        txtDescription.Text = RS.Fields.Item("DETAILED_DESC")
        txtSOPNumber.Text = RS.Fields.Item("SOP_NUMBER")
        txtJobNumber.Text = RS.Fields.Item("JOB_NUMBER")
        txtMMSBuyCode.Text = RS.Fields.Item("MMS_STOCK_CODE")
        txtCoreCode.Text = RS.Fields.Item("CORE_PART_NUM")
        If Trim(RS.Fields.Item("CORE_CHARGE")) = "" Then
            txtCoreCost.Text = Format("0", "currency")
        Else
            txtCoreCost.Text = Format(RS.Fields.Item("CORE_CHARGE"), "currency")
        End If
         If IsNull(Trim(RS.Fields.Item("ACTIVE"))) Then
            txtNonActive.Caption = ""
        Else
            txtNonActive.Caption = "NON-ACTIVE"
        End If
    End If
    m_str_RBNumber = txtRebuiltCode.Text 'used when opening materials page from menu
    'Determine which non stock coded items have since been converted into stock coded
    'items.
    'First get the table containing each of the non stock coded items
    Set RS = modDBHelper.RetrieveNSCPUsed("CES_INQUIRY.RETRIEVE_NSCP_USED", _
                                          m_str_RBNumber, _
                                          "RB")
        
    'Loop through each of the non stock coded items
    If RS.RecordCount > 0 Then
        RS.MoveFirst
        Set RSNewStock = New ADODB.Recordset
        While Not RS.EOF
            'Get the original supplier number and row id
            str_OrigSuppNum = IIf(IsNull(RS.Fields.Item("SUPPLIER NUMBER").Value), "", RS.Fields.Item("SUPPLIER NUMBER").Value)
            var_NSCRowID = RS.Fields.Item("RowID")
            'Now attempt to get a stock coded part which matches the original supplier
            'number
            Set RSNewStock = modDBHelper.RetrieveSCOrigSupplierNum( _
                                        "CES_INQUIRY.RETRIEVE_SC_ORIG_SUPPLIER_NUM", _
                                        str_OrigSuppNum)
            
           If RSNewStock.RecordCount > 0 Then
                'There is a match
                'Get the MMS Stock Code for the item
                RSNewStock.MoveFirst
                var_MMSStockCode = RSNewStock.Fields.Item("mms_stock_code")
                cur_MMSCost = RSNewStock.Fields.Item("MMS_New_Cost")
                'Append the text entry to be logged
                str_FileText = str_FileText & Trim(str_OrigSuppNum) & " to " & _
                               Trim(var_MMSStockCode) & Chr(13) & Chr(10)
                
                'ensure a stockcoded part is not already attached to the estimate
                
                 Set RS2 = New ADODB.Recordset
        
                 Set RS2 = modDBHelper.RetrieveSCPUsed("CES_INQUIRY.RETRIEVE_SCP_USED", _
                                             m_str_RBNumber, _
                                             "N", _
                                             "RB")
                    If RS2.RecordCount > 0 Then
                        RS2.MoveFirst
                        For l_Count = 0 To RS2.RecordCount - 1
                            If RS2.Fields.Item("STOCK CODE") = Trim(var_MMSStockCode) Then
                                Call SetDefaultCursor
                                'Set RS2 = Nothing
                                'm_str_Msg = "Did not convert Non-Stocked-Coded part to Stocked-Coded-Part since MMS Stock Code"
                                'm_str_Msg = m_str_Msg + " " + var_MMSStockCode + " is already used in this estimate"
                                'MsgBox m_str_Msg, vbOKOnly Or vbExclamation, "Warning"
                                duplicate = True
                                Exit For
                            End If
                            RS2.MoveNext
                        Next l_Count
                   
                    End If
                    Set RS2 = Nothing
                
                'Transfer the entry to the stock coded make buy
                If duplicate = False Then
                l_Result = modDBHelper.TransferPartsUsed( _
                                                    "CES_UPDATE.TRANSFER_PARTS_USED", _
                                                    l_RetVal, _
                                                    var_MMSStockCode, _
                                                    cur_MMSCost, _
                                                    g_str_UserName, _
                                                    var_NSCRowID)
                                                    
                  ' Now if there have been any conversions log them in text file and inform the user
                If str_FileText <> "" Then
                    'Set FSO = New FileSystemObject
                    'Set TS = FSO.CreateTextFile("rb.log")
                    'TS.Write ("Rebuilt Part #" & Trim(m_str_LinkNumber) & " Part Conversions:" & _
                              Chr(13) & Chr(10) & Chr(13) & Chr(10) & _
                              "Vendor Part Number to Stock Code" & Chr(13) & Chr(10) & _
                              "--------------------------------" & Chr(13) & Chr(10) & str_FileText)
                    m_str_Msg = "Parts in the Rebuilt Part have been converted to Stock Coded Parts."
                    m_str_Msg = m_str_Msg + Chr(13) + "Please see the log for details."
                    MsgBox m_str_Msg, vbOKOnly Or vbInformation, "Rebuilt Part Estimate"
                    
                    'The code below was added to prevent a permission error when attempting
                    'to run FSO's CreateTextFile
                    Dim frmNoticeMessage As frmNotice
                    Set frmNoticeMessage = New frmNotice
                    frmNoticeMessage.SetMessage "rb.log", "Rebuilt Part #" & Trim(m_str_LinkNumber) & " Part Conversions:" & _
                        Chr(13) & Chr(10) & Chr(13) & Chr(10) & _
                        "Vendor Part Number to Stock Code" & Chr(13) & Chr(10) & _
                        "--------------------------------" & Chr(13) & Chr(10) & str_FileText
                    frmNoticeMessage.Show vbModal
                    
                    'TS.Close
                    'ShellExecute GetDesktopWindow(), "Open", App.Path & "\rb.log", "", "C:\", 6
                    
                End If
                
                End If
            End If
            duplicate = False 'reset duplicate flag for next non-stock-coded part we check
            RSNewStock.Close
            RS.MoveNext
            
        Wend
    End If
    Set RSNewStock = Nothing
            
  
    'Then populate the labour information
    Set RS = modDBHelper.RetrieveMBLabour("CES_INQUIRY.RETRIEVE_MB_LABOUR", _
                                          m_str_RBNumber, _
                                          "RB")
    If RS.RecordCount > 0 Then
        Set grdLabour.DataSource = RS
    Else
        Set grdLabour.DataSource = Nothing
    End If
    
    
    Set RS = modDBHelper.RetrieveAllLabourHours("CES_INQUIRY.RETRIEVE_ALL_LABOUR", m_str_RBNumber, "RB")
    
    If RS.RecordCount > 0 Then
        txtLabourSubtotal.Text = Format(ColumnTotals(RS, "TOTAL COST"), "currency")
        RS.MoveFirst
        Set grdTotalTime.DataSource = RS
    Else
        txtLabourSubtotal.Text = Format(0#, "currency")
         Set grdTotalTime.DataSource = Nothing
    End If

    'Populate the ALL_LABOUR_SUMMARY table
    
    'Populate the ALL_MATERIALS_SUMMARY table
    
    'Set RS = modMain.CalculateAllMaterials(m_str_RBNumber, "RB")
        
    Set RS = modDBHelper.RetrieveRBPTotalCost2("CES_INQUIRY.RETRIEVE_RBP_TOTAL_COST2", m_str_RBNumber, "RB")
        
    If RS.RecordCount > 0 Then
          txtMaterialTotal.Text = Format(ColumnTotals(RS, "TOTAL COST"), "currency")
          RS.MoveFirst
    Else
        txtMaterialTotal.Text = Format(0#, "currency")
    End If
 
   'Set RS = RetrieveAllMaterialSummary("CES_INQUIRY.RETRIEVE_ALL_MATERIAL_SUMMARY")

    If RS.RecordCount > 0 Then
        Set grdMaterialsCostCentreTotals.DataSource = RS
    Else
        Set grdMaterialsCostCentreTotals.DataSource = Nothing
    End If
    
    'Total each of the sections
    txtLabourOverheadAmount.Text = Format(CCur(txtLabourSubtotal.Text) * _
                                          CCur(g_dbl_OverheadFringeValue), _
                                          "Currency")
    'cboBusSeries
    Set RS = modDBHelper.RetrieveRBListOfBuses("CES_INQUIRY.RB_LIST_BUSES", _
                                               Trim(txtRebuiltCode.Text))
        
    If RS.RecordCount > 0 Then
        Do While Not RS.EOF
        cboBusSeries.AddItem (RS.Fields(1).Value)
        RS.MoveNext
        Loop
        cboBusSeries.Text = cboBusSeries.List(0)
    End If
    
    
    ' Retrieve the tax rate
    Set RS = modDBHelper.RetrieveCESSettings("CES_INQUIRY.RETRIEVE_CES_SETTI", _
                                             "TAX_RATE")
    If RS.RecordCount > 0 Then
        dbl_TaxRate = CDbl(Replace(RS.Fields("VALUE").Value, ",", "."))
    Else
        dbl_TaxRate = 0
    End If
    Set RS = Nothing
    
    txtLabourTotal.Text = Format(CCur(txtLabourSubtotal.Text) + _
                                 CCur(txtLabourOverheadAmount.Text), _
                                 "Currency")
                                 
    'txtMaterialTotal.Text = frmRebuiltPartsAddMaterials.txtTotalMaterialsCost.Text
    
    str_LabourTotal = Trim(txtLabourTotal.Text)
    
    If str_LabourTotal = "" Then
        str_LabourTotal = "0"
    Else
        If IsNumeric(str_LabourTotal) = False Then
            str_LabourTotal = "0"
        End If
    End If
    
    str_MaterialTotal = Trim(txtMaterialTotal.Text)
    If str_MaterialTotal = "" Then
        str_MaterialTotal = "0"
    Else
        If IsNumeric(str_MaterialTotal) = False Then
            str_MaterialTotal = "0"
        End If
    End If
    
    str_CoreCost = Trim(txtCoreCost.Text)
    If str_CoreCost = "" Then
        str_CoreCost = "0"
    Else
        If IsNumeric(str_CoreCost) = False Then
            str_CoreCost = "0"
        End If
    End If
    
    txtTaxTotal.Text = Format(dbl_TaxRate * CCur(txtMaterialTotal), "currency")
    
    txtTotalRebuiltPartCost.Text = Format(CCur(str_LabourTotal) + CCur(str_MaterialTotal) - CCur(str_CoreCost), "currency")
        
    str_TotalRebuiltPartCost = Trim(txtTotalRebuiltPartCost.Text)
    If str_TotalRebuiltPartCost = "" Then
        str_TotalRebuiltPartCost = "0.00"
    End If
 
    txtTotalRebuiltPartCostWithTax.Text = Format(CCur(txtTaxTotal.Text) + CCur(txtTotalRebuiltPartCost.Text), "currency")

    'PropagateRebuiltPartChanges m_str_RBNumber, False
    
    'Format the columns of the data grids
    Call FormatColumns
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Populate", g_l_ErrorLineNumber
    If Not RSNewStock Is Nothing Then
        Set RSNewStock = Nothing
    End If
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub FormatColumns()
    On Error GoTo Error_Handler
    
    If Not grdLabour.Row Then
        grdLabour.Columns("CC").Width = 500
        'grdLabour.Columns("CC").Visible = False
        grdLabour.Columns("TASK").Width = 1600
        grdLabour.Columns("LABOUR TYPE").Width = 2120
        grdLabour.Columns("USAGE").Width = 620
        grdLabour.Columns("USAGE").Alignment = dbgRight
        grdLabour.Columns("TIME").Width = 600
        grdLabour.Columns("TIME").Alignment = dbgRight
        grdLabour.Columns("WRENCH TIME").Width = 1200
        grdLabour.Columns("WRENCH TIME").Alignment = dbgRight
        grdLabour.Columns("DATE REVISED").Width = 1900 '1725
        grdLabour.Columns("DATE REVISED").Alignment = dbgRight
        grdLabour.Columns("DATE REVISED").NumberFormat = "yyyy-mmm-dd hh:mm AMPM"
        grdLabour.Columns("TIME ADDITION").Visible = False
        grdLabour.Columns("VALUE").Visible = False
        grdLabour.Columns("ROWID").Visible = False
    End If

    If Not grdMaterialsCostCentreTotals.Row Then
        With grdMaterialsCostCentreTotals
            .Columns("CC").Width = 500
            .Columns("CC").Caption = "CC"
            .Columns("TOTAL COST").Alignment = dbgRight
            .Columns("TOTAL COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("TOTAL COST").Width = 1400
            .Columns("TAXABLE COST").Visible = False
        End With
    End If
    
    If Not grdTotalTime.Row Then
        grdTotalTime.Columns("COST CENTRE").Width = 500
        grdTotalTime.Columns("COST CENTRE").Caption = "CC"
        grdTotalTime.Columns("LABOUR HRS").Width = 1200
        grdTotalTime.Columns("LABOUR HRS").Alignment = dbgRight
          grdTotalTime.Columns("TOTAL COST").Visible = False
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "FormatColumns", g_l_ErrorLineNumber
End Sub

Private Sub btnRebuiltPartEdit_Click()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    frmAddRebuiltPart.m_str_MMSStockCode = m_str_LinkNumber
    frmAddRebuiltPart.m_str_RebuiltCode = m_str_RBNumber
    frmAddRebuiltPart.m_str_AuditReference = m_str_RBNumber
    frmAddRebuiltPart.Show vbModal
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "btnRebuiltPartEdit_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub cmdArchive_Click()
    
    On Error GoTo Error_Handler
    
    Archive_RB False
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdArchive_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub
Public Sub Archive_RB(ByVal silent_mode As Boolean)
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    If Not silent_mode Then
        m_str_Msg = "Are you sure you want to Archive Rebuilt Part # " + m_str_RBNumber + "?"
        l_Result = MsgBox(m_str_Msg, vbOKCancel Or vbQuestion, "Archive Rebuit Part?")
    Else
        l_Result = vbOK
        
        Set RS = New ADODB.Recordset
        Set RS = modDBHelper.RetrieveRBPUsed("CES_INQUIRY.RETRIEVE_RBP_USED", _
                                         txtRebuiltCode.Text, _
                                         "RB")
                                         
        '''Loops through any underlying RB parts and archives them, as well.
        If RS.RecordCount > 0 Then
            Do While RS.EOF = False
               
               'Calls up details and Archives
               ArchRBPSubsets (RS.Fields.Item("REBUILT NUMBER"))
               RS.MoveNext
            Loop
            
        End If
        Set RS = Nothing
        
    End If
     
     
    
    If l_Result = vbOK Then
        Call SetWaitCursor
             
        
        l_Result = modDBHelper.ArchiveRB("CES_ARCHIVE.ARCHIVE_RB", _
                                    l_RetVal, _
                                    txtRebuiltCode.Text, _
                                    g_str_UserName, _
                                    m_str_RBNumber, _
                                    "RB", _
                                    Trim(txtLabourSubtotal.Text), _
                                    Trim(txtLabourOverheadAmount.Text), _
                                    Trim(txtLabourTotal.Text), _
                                    Trim(txtMaterialTotal.Text), _
                                    Trim(txtTotalRebuiltPartCost.Text), _
                                    Trim(txtTaxTotal.Text), _
                                    Trim(txtTotalRebuiltPartCostWithTax.Text))
        
        If l_Result = 0 Then
            'Call SetDefaultCursor
            If Not silent_mode Then
                m_str_Msg = "Archiving Rebuilt Part Number = " + txtRebuiltCode.Text + " is complete."
                MsgBox m_str_Msg, vbOKOnly Or vbInformation, "Rebuilt Part Archiving"
            End If
        Else
            Call SetDefaultCursor
            m_str_Msg = "Archiving Rebuilt Part Number = " + txtRebuiltCode.Text + " has failed."
            MsgBox m_str_Msg, vbInformation Or vbOKOnly, "Rebuilt Part Archiving"
        End If
       
        
        
        '''''
    End If
    
    Call SetDefaultCursor
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdArchive_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor

End Sub



Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    Dim str_TotalRebuiltPartCost As String
    
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor
    
    'Unload the add materials form
    Unload frmRebuiltPartsAddMaterials
    
    ' Close the existing show all labour form
    If Not frmViewAllLabour Is Nothing Then
        Unload frmViewAllLabour
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub grdLabour_DblClick()
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not allow user go further, just exit sub.
        Exit Sub
    End If
    
    'Update the Labour in the Rebuilt Part
    If Not grdLabour.Row Then
        Call SetWaitCursor
        m_var_RowID = grdLabour.Columns("ROWID").Text
        frmAddLabourTask.m_str_AuditReference = Trim(txtRebuiltCode.Text)
        frmAddLabourTask.m_str_LinkNumber = m_str_RBNumber
        frmAddLabourTask.m_str_PartID = m_var_RowID
        frmAddLabourTask.m_str_TypeID = "RB"
        frmAddLabourTask.Show vbModal
        Call Populate
    End If

    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdLabour_DblClick", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub grdLabour_KeyDown(KeyCode As Integer, Shift As Integer)
    'Delete the Labour from the Rebuilt Part
    Dim str_PartID As String
    Dim RS As ADODB.Recordset
    Dim l_Count As Long
    
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not allow user go further, just exit sub.
        Exit Sub
    End If
    
    If KeyCode = vbKeyDelete Then
        m_str_Msg = "Are you sure you want to delete this item?"
        l_Result = MsgBox(m_str_Msg, vbOKCancel Or vbQuestion, "Rebuit Part")
        If l_Result = vbOK Then
            Call SetWaitCursor
            str_PartID = grdLabour.Columns("ROWID").Text
            l_Result = modDBHelper.DeleteMBLabour("CES_DELETE.DELETE_MBLABOUR", _
                                                  l_RetVal, _
                                                  str_PartID)
            '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT Begin >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            'Add record to the AUDIT_MODIFY_HISTORY table.
            l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                                        "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                                        l_RetVal, _
                                        "Delete Labour", _
                                        txtRebuiltCode.Text, _
                                        "RB", _
                                        "LABOUR TYPE ---> " + grdLabour.Columns("LABOUR TYPE").Text, _
                                        "CC ---> " + grdLabour.Columns("CC").Text, _
                                        "TASK ---> " + grdLabour.Columns("TASK").Text, _
                                        "USAGE ---> " + grdLabour.Columns("USAGE").Text, _
                                        "TIME ---> " + grdLabour.Columns("TIME").Text, _
                                        "WRENCH TIME ---> " + grdLabour.Columns("WRENCH TIME").Text, _
                                        "DATE REVISED ---> " + grdLabour.Columns("DATE REVISED").Text)
            
            Set RS = New ADODB.Recordset
            
            'In the SC_PARTS_USED table find all Estimates where the current RBE is present.
            Set RS = modDBHelper.RetrieveESTToPropagateRB("CES_INQUIRY.RETRIEVE_EST_TO_PROPAGATE_RB", _
                                                          txtRebuiltCode.Text)
            If RS.RecordCount > 0 Then
                RS.MoveFirst
                    For l_Count = 0 To RS.RecordCount - 1
                        'Add records to the AUDIT_MODIFY_HISTORY table.
                        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "Indirect change. Labour was deleted from the Rebuilt Part Estimate " + m_str_RBNumber, _
                            RS.Fields.Item("link_code"), _
                            RS.Fields.Item("link_type"), _
                            "LABOUR TYPE ---> " + grdLabour.Columns("LABOUR TYPE").Text, _
                            "CC ---> " + grdLabour.Columns("CC").Text, _
                            "TASK ---> " + grdLabour.Columns("TASK").Text, _
                            "USAGE ---> " + grdLabour.Columns("USAGE").Text, _
                            "TIME ---> " + grdLabour.Columns("TIME").Text, _
                            "WRENCH TIME ---> " + grdLabour.Columns("WRENCH TIME").Text, _
                            "DATE REVISED ---> " + grdLabour.Columns("DATE REVISED").Text)
                        
                        RS.MoveNext
                    Next l_Count
            End If
    
            Set RS = Nothing
            '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT End >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            Call RefreshForm
            Call SetDefaultCursor
        End If
    End If
    
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdLabour_KeyDown", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    Call SetDefaultCursor
End Sub

Private Sub PopulateChangesMadeBy()
    Dim l_Count As Long
    Dim str_Temp As String
    Dim RS As ADODB.Recordset

    On Error GoTo Error_Handler
    
    cboChangesMadeBy.Clear
    
    Set RS = New ADODB.Recordset
    'Populate cboChangesMadeBy combo-box. Show only 5 recent items.
    Set RS = modDBHelper.RetrieveAudit6( _
                    "CES_INQUIRY.RETRIEVE_AUDIT_6", _
                    txtRebuiltCode.Text, _
                    "RB")
    
    If RS.RecordCount > 0 Then
        RS.MoveFirst
        For l_Count = 0 To RS.RecordCount - 1
            If l_Count = 5 Then
                Exit For
            End If
            str_Temp = Format(RS.Fields.Item("DATE_CHANGED"), "yyyy-mmm-dd hh:mm:ss AMPM")
            str_Temp = CStr(str_Temp)
            str_Temp = str_Temp + " ---> "
            str_Temp = str_Temp + CStr(RS.Fields.Item("USER_NAME"))
            cboChangesMadeBy.AddItem str_Temp
            RS.MoveNext
        Next l_Count
    End If
    
    If RS.RecordCount > 0 Then
        cboChangesMadeBy.Text = cboChangesMadeBy.List(0)
    End If
    
    Set RS = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateChangesMadeBy", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub tbMenu_ButtonMenuClick(ByVal ButtonMenu As MSComctlLib.ButtonMenu)
    Dim str_Temp As String
    
    On Error GoTo Error_Handler
    
    Select Case ButtonMenu
        Case "Send To Mail Recipient"
            Call modMain.SendEmail
        Case "Close"
            Unload Me
        Case "Add a Labour Task"
            Call SetWaitCursor
            frmAddLabourTask.m_str_AuditReference = Trim(txtRebuiltCode.Text)
            frmAddLabourTask.m_str_LinkNumber = m_str_RBNumber
            frmAddLabourTask.m_str_TypeID = "RB"
            frmAddLabourTask.Show vbModal
            Call RefreshForm
            Call SetDefaultCursor
        Case "Materials Listing"
            If frmRebuiltPartsAddMaterials.WindowState = 1 Then
                frmRebuiltPartsAddMaterials.WindowState = 0
            End If
            frmRebuiltPartsAddMaterials.Show
            frmRebuiltPartsAddMaterials.SetFocus
        Case "Modify History"
            'Close the Audit form if it is opened.
            If Not frmViewAudit Is Nothing Then
                Unload frmViewAudit
            End If
            str_Temp = " - Rebuilt Part Estimate for Rebuilt Number: " + txtRebuiltCode.Text
            frmViewAudit.m_str_EstimateNumber = txtRebuiltCode.Text
            frmViewAudit.m_b_FromAdministration = False
            frmViewAudit.m_str_EstimateType = "RB"
            frmViewAudit.Caption = frmViewAudit.Caption + str_Temp
            frmViewAudit.Show
         Case "Archived Database"
            frmArchivedHistory.m_str_LinkCode = txtRebuiltCode.Text
            frmArchivedHistory.m_str_EstimateType = "RB"
            frmArchivedHistory.Show
         Case "All Labour"
            frmViewAllLabour.PassValues m_str_RBNumber, "RB"
            If frmViewAllLabour.WindowState = 1 Then
                frmViewAllLabour.WindowState = 0
            End If
            frmViewAllLabour.Show
            frmViewAllLabour.SetFocus
          Case "Edit Rebuilt Part Information"
         
                frmAddRebuiltPart.m_str_MMSStockCode = m_str_LinkNumber
                frmAddRebuiltPart.m_str_RebuiltCode = m_str_RBNumber
                frmAddRebuiltPart.m_str_AuditReference = m_str_RBNumber
                frmAddRebuiltPart.Show vbModal
        
        Case "Archive Rebuilt Part"
            Archive_RB False
        
        Case "Print"
            showRebuiltCostEstimateReport m_str_RBNumber, m_str_LinkNumber
    End Select
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "tbMenu_ButtonMenuClick", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub
Option Explicit

Private m_str_KitPartNumber As String
Private m_l_VehicleListID As Long
Private m_rs_PassedRS As New ADODB.Recordset
Private m_var_RowSelected As Variant
Private m_var_RowSelected1 As Variant
Private m_b_ChangeDescription As Boolean
Private m_b_MoveAfter As Boolean
Private m_str_TTCCode As String
Private m_str_OEM As String
Private m_str_OEMNumber As String
Private l_Clicks As Long
Private m_arr_str_ExcelKit() As String
Private m_l_ExcelKitSize As Long

Private Const m_str_const_Message As String = "PLEASE SELECT THE LOCATION THE SUB KIT PART WILL BE MOVED TO."

Private Sub Form_Load()
    On Error GoTo Error_Handler

    'Set the window style to 'Layered'. Set the opacity of the window.
    Call modMain.SetWindowLayered(Me)

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
End Sub

Public Sub PassValues(ByVal str_KitPartNumber As String, _
                      ByVal l_VehicleListID As Long, _
                      ByVal RS As ADODB.Recordset) ', _

    On Error GoTo Error_Handler
    
    m_str_KitPartNumber = str_KitPartNumber
    m_l_VehicleListID = l_VehicleListID
    Set m_rs_PassedRS.DataSource = RS.DataSource
    optDone.Enabled = False
    optCancel.Enabled = False
    txtDescription.Visible = False
    l_Clicks = 0
    
    Call RefreshForm
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PassValues", g_l_ErrorLineNumber
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call modMain.ChangeOpasityLayeredForm(Me, Me.Timer1, 255, 0, -10)
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub RefreshForm()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    m_b_ChangeDescription = False
    m_b_MoveAfter = False
    txtKit.Text = m_str_KitPartNumber
    
    'Get data from the SUB_KITS table for passed m_str_KitPartNumber
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.GetSubKits("CES_INQUIRY.GET_SUB_KITS", _
                                          m_str_KitPartNumber)

    If RS.RecordCount = 0 Then
        'No one sub-kit is attached to the current kit. Since each kit should have at
        'least one sub-kit, put all parts into the sub-kit "KIT A"
        Call AddSubKitsToKit
    
        Set RS = modDBHelper.GetSubKits("CES_INQUIRY.GET_SUB_KITS", _
                                        m_str_KitPartNumber)
        
        Set grdSubKits.DataSource = RS
    Else
        Set grdSubKits.DataSource = RS
    End If
    
    Set RS = Nothing
    
    Call FormatGrid
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "RefreshForm", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    Call SetDefaultCursor
End Sub

Private Sub AddSubKitsToKit()
    Dim l_RetVal As Long
    Dim l_Result As Long
    Dim l_Count As Long
    
    On Error GoTo Error_Handler
    
    l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", _
                                         l_RetVal, _
                                         m_str_KitPartNumber, _
                                         "", _
                                         " ", _
                                         " ", _
                                         " ", _
                                         "", _
                                         "KIT A", _
                                         "", _
                                         1)
    
    m_rs_PassedRS.MoveFirst
    For l_Count = 1 To m_rs_PassedRS.RecordCount
        l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", _
                                             l_RetVal, _
                                             m_str_KitPartNumber, _
                                             m_rs_PassedRS.Fields("PART TYPE"), _
                                             m_rs_PassedRS.Fields("SUPPLIER NUMBER"), _
                                             m_rs_PassedRS.Fields("SUPPLIER NAME"), _
                                             m_rs_PassedRS.Fields("STOCK CODE"), _
                                             m_rs_PassedRS.Fields("QTY"), _
                                             "A" + CStr(l_Count), _
                                             m_rs_PassedRS.Fields("DESCRIPTION"), _
                                             l_Count + 1)
        m_rs_PassedRS.MoveNext
    Next l_Count
    'And add lines "KIT B", "KIT C",...., "KIT Z"
    l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", l_RetVal, _
               m_str_KitPartNumber, "", " ", " ", " ", "", "KIT B", "", l_Count + 1)
    l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", l_RetVal, _
               m_str_KitPartNumber, "", " ", " ", " ", "", "KIT C", "", l_Count + 2)
    l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", l_RetVal, _
               m_str_KitPartNumber, "", " ", " ", " ", "", "KIT D", "", l_Count + 3)
    l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", l_RetVal, _
               m_str_KitPartNumber, "", " ", " ", " ", "", "KIT E", "", l_Count + 4)
    l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", l_RetVal, _
               m_str_KitPartNumber, "", " ", " ", " ", "", "KIT F", "", l_Count + 5)
    l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", l_RetVal, _
               m_str_KitPartNumber, "", " ", " ", " ", "", "KIT G", "", l_Count + 6)
    l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", l_RetVal, _
               m_str_KitPartNumber, "", " ", " ", " ", "", "KIT H", "", l_Count + 7)
    l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", l_RetVal, _
               m_str_KitPartNumber, "", " ", " ", " ", "", "KIT I", "", l_Count + 8)
    l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", l_RetVal, _
               m_str_KitPartNumber, "", " ", " ", " ", "", "KIT J", "", l_Count + 9)
    l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", l_RetVal, _
               m_str_KitPartNumber, "", " ", " ", " ", "", "KIT K", "", l_Count + 10)
    l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", l_RetVal, _
               m_str_KitPartNumber, "", " ", " ", " ", "", "KIT L", "", l_Count + 11)
    l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", l_RetVal, _
               m_str_KitPartNumber, "", " ", " ", " ", "", "KIT M", "", l_Count + 12)
    l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", l_RetVal, _
               m_str_KitPartNumber, "", " ", " ", " ", "", "KIT N", "", l_Count + 13)
    l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", l_RetVal, _
               m_str_KitPartNumber, "", " ", " ", " ", "", "KIT O", "", l_Count + 14)
    l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", l_RetVal, _
               m_str_KitPartNumber, "", " ", " ", " ", "", "KIT P", "", l_Count + 15)
    l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", l_RetVal, _
               m_str_KitPartNumber, "", " ", " ", " ", "", "KIT Q", "", l_Count + 16)
    l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", l_RetVal, _
               m_str_KitPartNumber, "", " ", " ", " ", "", "KIT R", "", l_Count + 17)
    l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", l_RetVal, _
               m_str_KitPartNumber, "", " ", " ", " ", "", "KIT S", "", l_Count + 18)
    l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", l_RetVal, _
               m_str_KitPartNumber, "", " ", " ", " ", "", "KIT T", "", l_Count + 19)
    l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", l_RetVal, _
               m_str_KitPartNumber, "", " ", " ", " ", "", "KIT U", "", l_Count + 20)
    l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", l_RetVal, _
               m_str_KitPartNumber, "", " ", " ", " ", "", "KIT V", "", l_Count + 21)
    l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", l_RetVal, _
               m_str_KitPartNumber, "", " ", " ", " ", "", "KIT W", "", l_Count + 22)
    l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", l_RetVal, _
               m_str_KitPartNumber, "", " ", " ", " ", "", "KIT X", "", l_Count + 23)
    l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", l_RetVal, _
               m_str_KitPartNumber, "", " ", " ", " ", "", "KIT Y", "", l_Count + 24)
    l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", l_RetVal, _
               m_str_KitPartNumber, "", " ", " ", " ", "", "KIT Z", "", l_Count + 25)

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "AddSubKitsToKit", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub FormatGrid()
    On Error GoTo Error_Handler

    If grdSubKits.Columns.Count > 2 Then
        grdSubKits.Columns("REF #").Width = 700
        grdSubKits.Columns("REF #").Alignment = dbgCenter
        grdSubKits.Columns("TTC CODE").Width = 1000
        grdSubKits.Columns("TTC CODE").Alignment = dbgCenter
        grdSubKits.Columns("OEM").Width = 2800
        grdSubKits.Columns("OEM").Alignment = dbgLeft
        grdSubKits.Columns("QTY").Width = 700
        grdSubKits.Columns("QTY").Alignment = dbgCenter
        grdSubKits.Columns("OEM #").Width = 2200
        grdSubKits.Columns("OEM #").Alignment = dbgLeft
        grdSubKits.Columns("DESCRIPTION").Width = 4950
        grdSubKits.Columns("DESCRIPTION").Alignment = dbgLeft
        grdSubKits.Columns("KIT NUMBER").Visible = False
        grdSubKits.Columns("PART TYPE").Visible = False
        grdSubKits.Columns("SEQUENCE").Visible = False
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "FormatGrid", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub cmdExportToExcel_Click()
    Dim xlApp As Excel.Application
    Dim xlBook As Excel.Workbook
    Dim xlSheet1 As Excel.Worksheet
    Dim l_Count As Long
    Dim str_Cell As String
    Dim str_Temp As String

    On Error GoTo Error_Handler
    
    Call SetWaitCursor

    Set xlApp = CreateObject("Excel.Application")
    Set xlBook = xlApp.Workbooks.Add
    Set xlSheet1 = xlBook.Worksheets(1)

    xlApp.ActiveWorkbook.Worksheets("Sheet2").Delete
    xlApp.ActiveWorkbook.Worksheets("Sheet3").Delete

    'When user try to close the Excel using cross in the right-top corner, do not show
    'any messages, just close the Excel.
    xlApp.DisplayAlerts = False

    'Begin "ALL LABOUR" worksheet
    xlSheet1.Activate
    xlSheet1.Range("A1:J1").Font.Bold = True
    xlSheet1.Range("A1:J1").Font.Name = "Arial"
    xlSheet1.Range("A1:J1").Font.Size = 8

    'Set columns' headers
    xlSheet1.Range("A1").Value = "REF #"
    xlSheet1.Range("B1").Value = "TTC CODE"
    xlSheet1.Range("C1").Value = "OEM"
    xlSheet1.Range("D1").Value = "QTY"
    xlSheet1.Range("E1").Value = "OEM #"
    xlSheet1.Range("F1").Value = "DESCRIPTION"

    'Center text in all columns' headers.
    xlSheet1.Range("A:A").HorizontalAlignment = xlCenter
    xlSheet1.Range("B:B").HorizontalAlignment = xlCenter
    xlSheet1.Range("C:C").HorizontalAlignment = xlLeft
    xlSheet1.Range("D:D").HorizontalAlignment = xlCenter
    xlSheet1.Range("E:E").HorizontalAlignment = xlLeft
    xlSheet1.Range("F:F").HorizontalAlignment = xlLeft

    'Set format for all columns = Text. In this case TTC CODE = 000024
    'will be shown as 000024, not 24
    xlSheet1.Range("A:A").NumberFormat = "@"
    xlSheet1.Range("B:B").NumberFormat = "@"
    xlSheet1.Range("C:C").NumberFormat = "@"
    xlSheet1.Range("D:D").NumberFormat = "@"
    xlSheet1.Range("E:E").NumberFormat = "@"
    xlSheet1.Range("F:F").NumberFormat = "@"

    'Set columns' width
    'Column "REF #"
    xlApp.ActiveWorkbook.Worksheets("Sheet1").Columns("A").ColumnWidth = 6
    'Column "TTC CODE"
    xlApp.ActiveWorkbook.Worksheets("Sheet1").Columns("B").ColumnWidth = 8
    'Column "OEM"
    xlApp.ActiveWorkbook.Worksheets("Sheet1").Columns("C").ColumnWidth = 8
    'Column "QTY"
    xlApp.ActiveWorkbook.Worksheets("Sheet1").Columns("D").ColumnWidth = 4
    'Column "OEM #"
    xlApp.ActiveWorkbook.Worksheets("Sheet1").Columns("E").ColumnWidth = 8
    'Column "DESCRIPTION"
    xlApp.ActiveWorkbook.Worksheets("Sheet1").Columns("F").ColumnWidth = 32

    xlApp.ActiveWorkbook.Worksheets("Sheet1").PageSetup.Orientation = xlPortrait

    str_Temp = "BUS KIT " + m_str_KitPartNumber

    Call MakeArrayForExcel
    
    If m_l_ExcelKitSize > -1 Then
        str_Cell = "A2:F" + CStr(m_l_ExcelKitSize + 2)
        xlSheet1.Range(str_Cell).Font.Name = "Arial"
        xlSheet1.Range(str_Cell).Font.Size = 7
        
        'Wrap text in the entire "TTC CODE" column
        xlSheet1.Range("B1:B" + CStr(m_l_ExcelKitSize + 2)).WrapText = True
        'Wrap text in the entire "OEM" column
        xlSheet1.Range("C1:C" + CStr(m_l_ExcelKitSize + 2)).WrapText = True
        'Wrap text in the entire "OEM #" column
        xlSheet1.Range("E1:E" + CStr(m_l_ExcelKitSize + 2)).WrapText = True
        'Wrap text in the entire "DESCRIPTION" column
        xlSheet1.Range("F1:F" + CStr(m_l_ExcelKitSize + 2)).WrapText = True
        
        For l_Count = 0 To m_l_ExcelKitSize
            'Data in the "REF #" column
            str_Cell = "A" + CStr(l_Count + 2)
            xlSheet1.Range(str_Cell).Value = m_arr_str_ExcelKit(0, l_Count)
            'Data in the "TTC CODE" column
            str_Cell = "B" + CStr(l_Count + 2)
            xlSheet1.Range(str_Cell).Value = m_arr_str_ExcelKit(1, l_Count)
            'Data in the "OEM" column
            str_Cell = "C" + CStr(l_Count + 2)
            xlSheet1.Range(str_Cell).Value = m_arr_str_ExcelKit(2, l_Count)
            'Data in the "QTY" column
            str_Cell = "D" + CStr(l_Count + 2)
            xlSheet1.Range(str_Cell).Value = m_arr_str_ExcelKit(3, l_Count)
            'Data in the "OEM #" column
            str_Cell = "E" + CStr(l_Count + 2)
            xlSheet1.Range(str_Cell).Value = m_arr_str_ExcelKit(4, l_Count)
            'Data in the "DESCRIPTION" column
            str_Cell = "F" + CStr(l_Count + 2)
            xlSheet1.Range(str_Cell).Value = m_arr_str_ExcelKit(5, l_Count)
        Next l_Count
    End If

    'Set headers and footers information
    xlApp.ActiveWorkbook.Worksheets("Sheet1").PageSetup.CenterHeader = _
                                "&""Arial""&10&B" + str_Temp + "&B"
    xlApp.ActiveWorkbook.Worksheets("Sheet1").PageSetup.LeftHeader = _
                                "&""Arial""&10&B" + "Bus Estimate # : " + CStr(m_l_VehicleListID) + "&B"
    xlApp.ActiveWorkbook.Worksheets("Sheet1").PageSetup.RightHeader = _
                                "&""Arial""&10&B" + Format(Now, "yyyy-mmm-dd") + "&B"
    xlApp.ActiveWorkbook.Worksheets("Sheet1").PageSetup.RightFooter = _
                                "&""Arial""&10&B Page &P of &N&B"

    'Print first row in all pages
    xlApp.ActiveWorkbook.Worksheets("Sheet1").PageSetup.PrintTitleRows = _
                        xlApp.ActiveWorkbook.Worksheets("Sheet1").Rows(1).Address
    xlApp.ActiveWorkbook.Worksheets("Sheet1").PageSetup.PrintTitleColumns = _
                        xlApp.ActiveWorkbook.Worksheets("Sheet1").Columns("A:J").Address

    xlApp.ActiveWorkbook.Worksheets("Sheet1").PageSetup.PrintGridlines = True

    xlSheet1.Activate

    xlApp.Caption = "BUS KIT - for " + g_str_UserName
    xlApp.ActiveWorkbook.Worksheets("Sheet1").Name = str_Temp
    xlApp.Visible = True

    If Not xlSheet1 Is Nothing Then
        Set xlSheet1 = Nothing
    End If
    If Not xlBook Is Nothing Then
        Set xlBook = Nothing
    End If
    If Not xlApp Is Nothing Then
        Set xlApp = Nothing
    End If

    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdExportToExcel_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not xlSheet1 Is Nothing Then
        Set xlSheet1 = Nothing
    End If
    If Not xlBook Is Nothing Then
        Set xlBook = Nothing
    End If
    If Not xlApp Is Nothing Then
        Set xlApp = Nothing
    End If
End Sub

Private Sub cmdMoveDown_Click()
    On Error GoTo Error_Handler

    m_str_TTCCode = Trim(grdSubKits.Columns("TTC CODE"))
    m_str_OEM = Trim(grdSubKits.Columns("OEM"))
    m_str_OEMNumber = Trim(grdSubKits.Columns("OEM #"))
    m_var_RowSelected = grdSubKits.Bookmark
    m_var_RowSelected1 = m_var_RowSelected + 1
    
    If m_var_RowSelected1 > grdSubKits.ApproxCount Then
        'Part can not be moved after last row.
        Exit Sub
    End If
    
    If m_var_RowSelected1 = 0 Then
        'Part can not be moved into the 1-st row
        Exit Sub
    End If
    Call CheckMoveAfter
    If lblInstructions.Caption = m_str_const_Message Then
        'Move the selected row do desired location.
        Call MoveRow
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdMoveDown_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub cmdMoveUp_Click()
    On Error GoTo Error_Handler
    
    m_str_TTCCode = Trim(grdSubKits.Columns("TTC CODE"))
    m_str_OEM = Trim(grdSubKits.Columns("OEM"))
    m_str_OEMNumber = Trim(grdSubKits.Columns("OEM #"))
    m_var_RowSelected = grdSubKits.Bookmark
    m_var_RowSelected1 = m_var_RowSelected - 2
    If m_var_RowSelected1 = 0 Then
        'Part can not be moved into the 1-st row
        Exit Sub
    End If
    Call CheckMoveAfter
    If lblInstructions.Caption = m_str_const_Message Then
        'Move the selected row do desired location.
        Call MoveRow
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdMoveUp_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub grdSubKits_Click()
    On Error GoTo Error_Handler
    
    If m_b_ChangeDescription = True Then
        m_str_TTCCode = Trim(grdSubKits.Columns("TTC CODE"))
        m_str_OEM = Trim(grdSubKits.Columns("OEM"))
        m_str_OEMNumber = Trim(grdSubKits.Columns("OEM #"))
        m_var_RowSelected = grdSubKits.Bookmark
        Call CheckChangeDescription
        Exit Sub
    End If
    
    If m_b_MoveAfter = True Then
        l_Clicks = l_Clicks + 1
        Call CheckMoveAfter
        If lblInstructions.Caption = m_str_const_Message Then
            'Move the selected row do desired location.
            m_var_RowSelected1 = grdSubKits.Bookmark
            Call MoveRow
        End If
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdSubKits_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub optCancel_Click()
    On Error GoTo Error_Handler

    txtDescription.Visible = False
    m_b_ChangeDescription = False
    m_b_MoveAfter = False
    optChangeDescription.Enabled = True
    optMoveAfter.Enabled = True
    lblInstructions.Caption = ""
    optDone.Enabled = False
    optCancel.Value = False
    optCancel.Enabled = False
    cmdMoveUp.Enabled = True
    cmdMoveDown.Enabled = True
    cmdExportToExcel.Enabled = True
    l_Clicks = 0
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "optCancel_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub optChangeDescription_Click()
    On Error GoTo Error_Handler
    
    m_b_ChangeDescription = True
    
    m_str_TTCCode = Trim(grdSubKits.Columns("TTC CODE"))
    m_str_OEM = Trim(grdSubKits.Columns("OEM"))
    m_str_OEMNumber = Trim(grdSubKits.Columns("OEM #"))
    
    m_var_RowSelected = grdSubKits.Bookmark
    
    Call CheckChangeDescription
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "optChangeDescription_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub optDone_Click()
    Dim RS As ADODB.Recordset
    Dim l_Count As Long
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim l_CurrentRow As Long
    Dim str_PartType As String
    Dim str_OEMNumber As String
    Dim str_OEM As String
    Dim str_TTCCode As String
    Dim str_QTY As String
    Dim str_RefNumber As String
    Dim str_Description As String
    Dim var_RowPosition As Variant
    
    On Error GoTo Error_Handler

    If m_b_ChangeDescription = True Then
        Set RS = New ADODB.Recordset
        Set RS.DataSource = grdSubKits.DataSource
        'Delete all records from the SUB_KITS table where
        'kit_part_number = m_str_KitPartNumber
        l_Result = modDBHelper.DeleteSubKits( _
                                    "CES_DELETE.DELETE_SUB_KITS", _
                                    l_RetVal, _
                                    m_str_KitPartNumber)
        'Insert all records (including that one where DESCRIPTION was changed) into the
        'SUB_KITS table.
        l_CurrentRow = CLng(m_var_RowSelected)
        If l_Result = 0 Then
            RS.MoveFirst
            'Insert all rows before changed row.
            For l_Count = 1 To l_CurrentRow - 1
                str_PartType = ChangeNullToOneSpase(RS.Fields("PART TYPE"))
                str_OEMNumber = ChangeNullToOneSpase(RS.Fields("OEM #"))
                str_OEM = ChangeNullToOneSpase(RS.Fields("OEM"))
                str_TTCCode = ChangeNullToOneSpase(RS.Fields("TTC CODE"))
                str_QTY = ChangeNullToOneSpase(RS.Fields("QTY"))
                str_RefNumber = ChangeNullToOneSpase(RS.Fields("REF #"))
                str_Description = ChangeNullToOneSpase(RS.Fields("DESCRIPTION"))
                l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", _
                            l_RetVal, _
                            m_str_KitPartNumber, _
                            str_PartType, _
                            str_OEMNumber, _
                            str_OEM, _
                            str_TTCCode, _
                            str_QTY, _
                            str_RefNumber, _
                            str_Description, _
                            l_Count)
                RS.MoveNext
            Next l_Count
            'Insert the changed row.
            RS.MoveFirst ' l_CurrentRow - 1
            RS.Move l_CurrentRow - 1
            str_PartType = ChangeNullToOneSpase(RS.Fields("PART TYPE"))
            str_OEMNumber = ChangeNullToOneSpase(RS.Fields("OEM #"))
            str_OEM = ChangeNullToOneSpase(RS.Fields("OEM"))
            str_TTCCode = ChangeNullToOneSpase(RS.Fields("TTC CODE"))
            str_QTY = ChangeNullToOneSpase(RS.Fields("QTY"))
            str_RefNumber = ChangeNullToOneSpase(RS.Fields("REF #"))
            str_Description = Trim(txtDescription.Text)
            
            l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", _
                                                                l_RetVal, _
                                                                m_str_KitPartNumber, _
                                                                str_PartType, _
                                                                str_OEMNumber, _
                                                                str_OEM, _
                                                                str_TTCCode, _
                                                                str_QTY, _
                                                                str_RefNumber, _
                                                                str_Description, _
                                                                l_Count)
            var_RowPosition = l_Count
            'Insert all rows after changed row
            RS.MoveFirst
            RS.Move l_CurrentRow
            For l_Count = l_CurrentRow + 1 To RS.RecordCount
                str_PartType = ChangeNullToOneSpase(RS.Fields("PART TYPE"))
                str_OEMNumber = ChangeNullToOneSpase(RS.Fields("OEM #"))
                str_OEM = ChangeNullToOneSpase(RS.Fields("OEM"))
                str_TTCCode = ChangeNullToOneSpase(RS.Fields("TTC CODE"))
                str_QTY = ChangeNullToOneSpase(RS.Fields("QTY"))
                str_RefNumber = ChangeNullToOneSpase(RS.Fields("REF #"))
                str_Description = ChangeNullToOneSpase(RS.Fields("DESCRIPTION"))
                l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", _
                            l_RetVal, _
                            m_str_KitPartNumber, _
                            str_PartType, _
                            str_OEMNumber, _
                            str_OEM, _
                            str_TTCCode, _
                            str_QTY, _
                            str_RefNumber, _
                            str_Description, _
                            l_Count)
                RS.MoveNext
            Next l_Count
        End If
        m_b_ChangeDescription = False
        txtDescription.Text = ""
        txtDescription.Visible = False
        optChangeDescription.Enabled = True
        optChangeDescription.Value = False
        optMoveAfter.Enabled = True
        optMoveAfter.Value = False
        optDone.Enabled = False
        optDone.Value = False
        optCancel.Enabled = False
        optCancel.Value = False
        lblInstructions.Caption = ""
        cmdMoveUp.Enabled = True
        cmdMoveDown.Enabled = True
        cmdExportToExcel.Enabled = True
        
        'Refresh the grdSubKits grid.
        Call RefreshForm
        'And select just moved row.
        grdSubKits.Bookmark = var_RowPosition
    End If

    If Not RS Is Nothing Then
        Set RS = Nothing
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "optDone_Click", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    Call SetDefaultCursor
End Sub

Private Sub optMoveAfter_Click()
    On Error GoTo Error_Handler
    
    m_b_MoveAfter = True
    
    m_str_TTCCode = Trim(grdSubKits.Columns("TTC CODE"))
    m_str_OEM = Trim(grdSubKits.Columns("OEM"))
    m_str_OEMNumber = Trim(grdSubKits.Columns("OEM #"))

    m_var_RowSelected = grdSubKits.Bookmark

    Call CheckMoveAfter

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "optMoveAfter_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub CheckChangeDescription()
    Dim str_Msg As String
    
    On Error GoTo Error_Handler
    
    If m_str_TTCCode = "" And m_str_OEM = "" And m_str_OEMNumber = "" Then
        str_Msg = "PLEASE ENTER A NEW DESCRIPTION, AND CLICK THE SAVE BUTTON TO COMMIT "
        str_Msg = str_Msg + "CHANGES. CLICK THE CANCEL BUTTON TO CONTINUE WITHOUT SAVING."
        lblInstructions.Caption = str_Msg
        optDone.Enabled = True
        optCancel.Enabled = True
        txtDescription.Visible = True
        txtDescription.SetFocus
        optMoveAfter.Enabled = False
        cmdMoveUp.Enabled = False
        cmdMoveDown.Enabled = False
        cmdExportToExcel.Enabled = False
    Else
        optDone.Enabled = False
        optCancel.Enabled = True
        txtDescription.Visible = False
        str_Msg = "DESCRIPTION CAN ONLY BE CHANGED FOR SUB KIT HEADINGS, NOT FOR PARTS."
        lblInstructions.Caption = str_Msg
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "CheckChangeDescription", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub CheckMoveAfter()
    Dim str_Msg As String
    
    On Error GoTo Error_Handler
    
    If m_str_TTCCode = "" And m_str_OEM = "" And m_str_OEMNumber = "" Then
        str_Msg = "SUB KIT HEADING CAN NOT BE MOVED."
        lblInstructions.Caption = str_Msg
        optMoveAfter.Value = False
        m_b_MoveAfter = False
        optDone.Enabled = False
        optCancel.Enabled = False
        txtDescription.Visible = False
        optChangeDescription.Enabled = True
        cmdMoveUp.Enabled = True
        cmdMoveDown.Enabled = True
        cmdExportToExcel.Enabled = True
        
        Exit Sub
    End If
    
    optDone.Enabled = False
    optCancel.Enabled = True
    txtDescription.Visible = False
    optChangeDescription.Enabled = False
    cmdMoveUp.Enabled = True
    cmdMoveDown.Enabled = True
    cmdExportToExcel.Enabled = True
    str_Msg = m_str_const_Message
    lblInstructions.Caption = str_Msg
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "CheckMoveAfter", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub MoveRow()
    Dim RS As ADODB.Recordset
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim l_CurrentRow As Long
    Dim l_Count As Long
    Dim l_Seq As Long
    Dim str_PartType As String
    Dim str_OEMNumber As String
    Dim str_OEM As String
    Dim str_TTCCode As String
    Dim str_QTY As String
    Dim str_RefNumber As String
    Dim str_Description As String
    Dim str_CurrentSubKitLetter As String
    Dim l_PartNumberInSubKit As Long
    Dim var_RowPosition As Variant
    
    On Error GoTo Error_Handler

    l_Seq = 1
    l_CurrentRow = CLng(m_var_RowSelected1)
    Set RS = New ADODB.Recordset
    Set RS.DataSource = grdSubKits.DataSource
    'Delete all records from the SUB_KITS table where
    'kit_part_number = m_str_KitPartNumber
    l_Result = modDBHelper.DeleteSubKits( _
                                "CES_DELETE.DELETE_SUB_KITS", _
                                l_RetVal, _
                                m_str_KitPartNumber)
    
    'Insert all records (including moved one) into the
    'SUB_KITS table.
    If l_Result = 0 Then
        RS.MoveFirst
        'Insert rows (excluding moved one) from the 1-st row to the destinated row
        For l_Count = 1 To l_CurrentRow
            str_TTCCode = modMain.ChangeNullToOneSpase(RS.Fields("TTC CODE"))
            str_OEM = modMain.ChangeNullToOneSpase(RS.Fields("OEM"))
            str_OEMNumber = modMain.ChangeNullToOneSpase(RS.Fields("OEM #"))
            If str_TTCCode = " " And str_OEM = " " And str_OEMNumber = " " Then
                'Record with "KIT A" - "KIT Z" in the "REF #" field.
                str_CurrentSubKitLetter = modMain.ChangeNullToOneSpase(RS.Fields("REF #"))
                str_CurrentSubKitLetter = Right(str_CurrentSubKitLetter, 1)
                l_PartNumberInSubKit = 1
            End If
            
            If l_Count <> CLng(m_var_RowSelected) Then
                str_PartType = modMain.ChangeNullToOneSpase(RS.Fields("PART TYPE"))
                str_OEMNumber = modMain.ChangeNullToOneSpase(RS.Fields("OEM #"))
                str_OEM = modMain.ChangeNullToOneSpase(RS.Fields("OEM"))
                str_TTCCode = modMain.ChangeNullToOneSpase(RS.Fields("TTC CODE"))
                str_QTY = modMain.ChangeNullToOneSpase(RS.Fields("QTY"))
                str_RefNumber = modMain.ChangeNullToOneSpase(RS.Fields("REF #"))
                str_Description = modMain.ChangeNullToOneSpase(RS.Fields("DESCRIPTION"))
                
                If str_TTCCode = " " And str_OEM = " " And str_OEMNumber = " " Then
                    'Do nothing
                Else
                    str_RefNumber = str_CurrentSubKitLetter + CStr(l_PartNumberInSubKit)
                    l_PartNumberInSubKit = l_PartNumberInSubKit + 1
                End If
                
                l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", _
                            l_RetVal, _
                            m_str_KitPartNumber, _
                            str_PartType, _
                            str_OEMNumber, _
                            str_OEM, _
                            str_TTCCode, _
                            str_QTY, _
                            str_RefNumber, _
                            str_Description, _
                            l_Seq)
                l_Seq = l_Seq + 1
            End If
            RS.MoveNext
        Next l_Count
        
        'Insert the moved row.
        RS.MoveFirst ' l_CurrentRow - 1
        RS.Move CLng(m_var_RowSelected - 1)
        str_PartType = modMain.ChangeNullToOneSpase(RS.Fields("PART TYPE"))
        str_OEMNumber = modMain.ChangeNullToOneSpase(RS.Fields("OEM #"))
        str_OEM = modMain.ChangeNullToOneSpase(RS.Fields("OEM"))
        str_TTCCode = modMain.ChangeNullToOneSpase(RS.Fields("TTC CODE"))
        str_QTY = modMain.ChangeNullToOneSpase(RS.Fields("QTY"))
        str_RefNumber = modMain.ChangeNullToOneSpase(RS.Fields("REF #"))
        str_Description = modMain.ChangeNullToOneSpase(RS.Fields("DESCRIPTION")) 'Trim(txtDescription.Text)
        If str_TTCCode = " " And str_OEM = " " And str_OEMNumber = " " Then
            'Do nothing
        Else
            str_RefNumber = str_CurrentSubKitLetter + CStr(l_PartNumberInSubKit)
            l_PartNumberInSubKit = l_PartNumberInSubKit + 1
        End If

        l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", _
                                                            l_RetVal, _
                                                            m_str_KitPartNumber, _
                                                            str_PartType, _
                                                            str_OEMNumber, _
                                                            str_OEM, _
                                                            str_TTCCode, _
                                                            str_QTY, _
                                                            str_RefNumber, _
                                                            str_Description, _
                                                            l_Seq)

        var_RowPosition = l_Seq
        'Insert rest rows.
        l_Seq = l_Seq + 1
        RS.MoveFirst
        RS.Move l_CurrentRow
        For l_Count = l_CurrentRow + 1 To RS.RecordCount
            str_TTCCode = modMain.ChangeNullToOneSpase(RS.Fields("TTC CODE"))
            str_OEM = modMain.ChangeNullToOneSpase(RS.Fields("OEM"))
            str_OEMNumber = modMain.ChangeNullToOneSpase(RS.Fields("OEM #"))
            If str_TTCCode = " " And str_OEM = " " And str_OEMNumber = " " Then
                str_CurrentSubKitLetter = modMain.ChangeNullToOneSpase(RS.Fields("REF #"))
                str_CurrentSubKitLetter = Right(str_CurrentSubKitLetter, 1)
                l_PartNumberInSubKit = 1
            End If
            If l_Count <> CLng(m_var_RowSelected) Then
                str_PartType = modMain.ChangeNullToOneSpase(RS.Fields("PART TYPE"))
                str_OEMNumber = modMain.ChangeNullToOneSpase(RS.Fields("OEM #"))
                str_OEM = modMain.ChangeNullToOneSpase(RS.Fields("OEM"))
                str_TTCCode = modMain.ChangeNullToOneSpase(RS.Fields("TTC CODE"))
                str_QTY = modMain.ChangeNullToOneSpase(RS.Fields("QTY"))
                str_RefNumber = modMain.ChangeNullToOneSpase(RS.Fields("REF #"))
                str_Description = modMain.ChangeNullToOneSpase(RS.Fields("DESCRIPTION"))
                
                If str_TTCCode = " " And str_OEM = " " And str_OEMNumber = " " Then
                    'Do nothing
                Else
                    str_RefNumber = str_CurrentSubKitLetter + CStr(l_PartNumberInSubKit)
                    l_PartNumberInSubKit = l_PartNumberInSubKit + 1
                End If
                
                l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", _
                            l_RetVal, _
                            m_str_KitPartNumber, _
                            str_PartType, _
                            str_OEMNumber, _
                            str_OEM, _
                            str_TTCCode, _
                            str_QTY, _
                            str_RefNumber, _
                            str_Description, _
                            l_Seq)
                l_Seq = l_Seq + 1
            End If
            RS.MoveNext
        Next l_Count
    
        l_Clicks = 0
        txtDescription.Text = ""
        txtDescription.Visible = False
        optChangeDescription.Enabled = True
        optChangeDescription.Value = False
        optMoveAfter.Enabled = True
        optMoveAfter.Value = False
        optDone.Enabled = False
        optDone.Value = False
        optCancel.Enabled = False
        optCancel.Value = False
        lblInstructions.Caption = ""
        m_b_MoveAfter = False
        
        'Refresh the grdSubKits grid.
        Call RefreshForm
        'And select just moved row.
        grdSubKits.Bookmark = var_RowPosition
    End If
    
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "MoveRow", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    Call SetDefaultCursor
End Sub

Private Sub Timer1_Timer()
    On Error GoTo Error_Handler
    
    Call modMain.ChangeOpasityLayeredForm(Me, Me.Timer1, 5, 255, 10)
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Timer1_Timer", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub txtDescription_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtUserName edit-box to upper case.
    l_CursorPosition = txtDescription.SelStart
    str_Data = txtDescription.Text
    str_Data = UCase(str_Data)
    txtDescription.Text = str_Data
    txtDescription.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtDescription_KeyUp", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub MakeArrayForExcel()
    'This sub will fill the m_arr_str_ExcelKit(5, m_l_ExcelKitSize) array. It will skip
    'all sub kits which DO NOT have parts attached. For example, column "REF #" has
    'next looks:
    ' | REF # |
    ' |-------|
    ' | KIT A |
    ' |  A1   |
    ' |  A2   |
    ' | KIT B |
    ' | KIT C |
    ' | KIT D |
    ' |  D1   |
    ' | KIT E |
    ' | ..... |
    'only lines ""KIT A", "A1", "A2", "KIT D", "D1" will be added to the
    'm_arr_str_ExcelKit(5, m_l_ExcelKitSize) array.
    
    Dim RS As ADODB.Recordset
    Dim str_SubKitLetter As String
    Dim str_SubKitPartLetter As String
    Dim l_Count As Long
    Dim str_RefNumber As String
    Dim str_TTCCode As String
    Dim str_OEM As String
    Dim str_QTY As String
    Dim str_OEMNumber As String
    Dim str_Description As String
    Dim str_RefNumberSK As String
    Dim str_TTCCodeSK As String
    Dim str_OEMSK As String
    Dim str_QTYSK As String
    Dim str_OEMNumberSK As String
    Dim str_DescriptionSK As String
    Dim b_SubKitSaved As Boolean
    
    On Error GoTo Error_Handler

    b_SubKitSaved = False
    m_l_ExcelKitSize = -1
    
    Set RS = New ADODB.Recordset
    Set RS.DataSource = grdSubKits.DataSource
    If RS.RecordCount > 0 Then
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
            str_RefNumber = modMain.ChangeNullToOneSpase(RS.Fields("REF #"))
            str_TTCCode = modMain.ChangeNullToOneSpase(RS.Fields("TTC CODE"))
            str_OEM = modMain.ChangeNullToOneSpase(RS.Fields("OEM"))
            str_QTY = modMain.ChangeNullToOneSpase(RS.Fields("QTY"))
            str_OEMNumber = modMain.ChangeNullToOneSpase(RS.Fields("OEM #"))
            str_Description = modMain.ChangeNullToOneSpase(RS.Fields("DESCRIPTION"))
            
            If str_TTCCode = " " And str_OEM = " " And str_OEMNumber = " " Then
                str_SubKitLetter = Right(str_RefNumber, 1)
                b_SubKitSaved = False
            
                str_RefNumberSK = str_RefNumber
                str_TTCCodeSK = str_TTCCode
                str_OEMSK = str_OEM
                str_QTYSK = str_QTY
                str_OEMNumberSK = str_OEMNumber
                str_DescriptionSK = str_Description
            Else
                str_SubKitPartLetter = Left(str_RefNumber, 1)
            End If
            
            If str_SubKitLetter = str_SubKitPartLetter Then
                If b_SubKitSaved = False Then
                    m_l_ExcelKitSize = m_l_ExcelKitSize + 2
                    ReDim Preserve m_arr_str_ExcelKit(5, m_l_ExcelKitSize)
                    
                    m_arr_str_ExcelKit(0, m_l_ExcelKitSize - 1) = str_RefNumberSK
                    m_arr_str_ExcelKit(1, m_l_ExcelKitSize - 1) = str_TTCCodeSK
                    m_arr_str_ExcelKit(2, m_l_ExcelKitSize - 1) = str_OEMSK
                    m_arr_str_ExcelKit(3, m_l_ExcelKitSize - 1) = str_QTYSK
                    m_arr_str_ExcelKit(4, m_l_ExcelKitSize - 1) = str_OEMNumberSK
                    m_arr_str_ExcelKit(5, m_l_ExcelKitSize - 1) = str_DescriptionSK
                    
                    m_arr_str_ExcelKit(0, m_l_ExcelKitSize) = str_RefNumber
                    m_arr_str_ExcelKit(1, m_l_ExcelKitSize) = str_TTCCode
                    m_arr_str_ExcelKit(2, m_l_ExcelKitSize) = str_OEM
                    m_arr_str_ExcelKit(3, m_l_ExcelKitSize) = str_QTY
                    m_arr_str_ExcelKit(4, m_l_ExcelKitSize) = str_OEMNumber
                    m_arr_str_ExcelKit(5, m_l_ExcelKitSize) = str_Description
                  
                    b_SubKitSaved = True
                Else
                    m_l_ExcelKitSize = m_l_ExcelKitSize + 1
                    ReDim Preserve m_arr_str_ExcelKit(5, m_l_ExcelKitSize)
                    m_arr_str_ExcelKit(0, m_l_ExcelKitSize) = str_RefNumber
                    m_arr_str_ExcelKit(1, m_l_ExcelKitSize) = str_TTCCode
                    m_arr_str_ExcelKit(2, m_l_ExcelKitSize) = str_OEM
                    m_arr_str_ExcelKit(3, m_l_ExcelKitSize) = str_QTY
                    m_arr_str_ExcelKit(4, m_l_ExcelKitSize) = str_OEMNumber
                    m_arr_str_ExcelKit(5, m_l_ExcelKitSize) = str_Description
                End If
            End If
            RS.MoveNext
        Next l_Count
    End If

    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "MakeArrayForExcel", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    Call SetDefaultCursor
End Sub

Option Explicit

Private m_str_Msg As String
Private m_l_Result As Long
Private m_l_RetVal As Long
Private m_l_Duplications As Long

Private m_str_EstimateType As String
Private m_str_EstimateNumber As String
Private m_str_OrigSupplierNumber As String
Private m_str_OrigSupplierName As String
Private m_str_Cost As String
Private m_str_PartID As String

Private m_str_EstimateType_1 As String
Private m_str_EstimateNumber_1 As String
Private m_str_OrigSupplierNumber_1 As String
Private m_str_OrigSupplierName_1 As String
Private m_str_Cost_1 As String
Private m_str_PartID_1 As String

Private m_l_PartID As Long

Private m_b_1_StepDone As Boolean
Private m_b_2_StepDone As Boolean
Private m_b_3_StepDone As Boolean
Private m_b_4_StepDone As Boolean
Private m_b_5_StepDone As Boolean
Private m_b_6_StepDone As Boolean
Private m_b_7_StepDone As Boolean
Private m_b_8_StepDone As Boolean

Private m_b_InProgress As Boolean

Private Const m_str_const_BePatient As String = "Please be patient. Current task can take from few seconds to few minutes."

Private Sub FinalChecks()
    '9.1. Checks that fields NSC_PARTS_USED.ID are not NULLs.
    '9.2. Checks that fields NON_STOCK_CODED_PARTS.ID are not NULLs.
    '9.3. Checks that fields NSC_PARTS_USED.ORIG_SUPP_NUM are not NULLs.
    '9.4. Checks that fields NON_STOCK_CODED_PARTS.ORIG_SUPPLIER_NUM are not NULLs.
    '9.5. Check that fields NSC_PARTS_USED.ORIG_SUPP_NUM do not have only spaces.
    '9.6. Checks that fields NON_STOCK_CODED_PARTS.ORIG_SUPPLIER_NUM do not have only
    '     spaces.
    '9.7. Checks that fields NSC_PARTS_USED.ORIG_SUPPLIER_NAME are not NULLs.
    '9.8. Checks that fields NON_STOCK_CODED_PARTS.ORIG_SUPPLIER_NAME are not NULLs.
    '9.9. Checks that fields NSC_PARTS_USED.ORIG_SUPPLIER_NAME do not have only spaces.
    '9.10. Checks that fields NON_STOCK_CODED_PARTS.ORIG_SUPPLIER_NAME do not have only
    '      spaces.
    '9.11. Check that combinations of ORIG_SUPPLIER_NUM + ORIG_SUPPLIER_NAME in the
    '      NON_STOCK_CODED_PARTS table are unique.
    '9.12. Check that each record in the NSC_PARTS_USED table has corresponded record
    '      in the NON_STOCK_CODED_PARTS table.
    
    Dim RS As ADODB.Recordset
    Dim RS_1 As ADODB.Recordset
    Dim l_Count As Long
    Dim b_ErrorFound As Boolean
    Dim b_SpaceFound As Boolean
    Dim str_Spaces As String
    
    On Error GoTo Error_Handler

    m_b_InProgress = True
    Call MakeButtonsEnabled(True)
    
    Set RS = New ADODB.Recordset
    Set RS_1 = New ADODB.Recordset
    
    '9.1. Checks that fields NSC_PARTS_USED.ID are not NULLs.
    b_ErrorFound = False
    lstCleanNSCPTables.Clear
    m_str_Msg = "9.1. Checks that fields NSC_PARTS_USED.ID are not NULLs."
    lblMsg.Caption = m_str_Msg
    Set RS = modDBHelper.GetNSCPClean9("CES_INQUIRY.GET_NSCP_CLEAN_9")
    If RS.RecordCount > 0 Then
        ProgressBar1.Value = ProgressBar1.Min
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
            b_ErrorFound = True
            m_str_Msg = "Table NSC_PARTS_USED. Data in some ID field is NULL."
            lstCleanNSCPTables.AddItem m_str_Msg
            lstCleanNSCPTables.Refresh
            ProgressBar1.Value = ProgressBar1.Value + 1
            If ProgressBar1.Value = ProgressBar1.Max Then
                ProgressBar1.Value = ProgressBar1.Min
            End If
            RS.MoveNext
            DoEvents
        Next l_Count
    End If

    If b_ErrorFound = True Then
        If Not RS Is Nothing Then
            Set RS = Nothing
        End If
        If Not RS_1 Is Nothing Then
            Set RS_1 = Nothing
        End If
        ProgressBar1.Value = ProgressBar1.Min
        m_str_Msg = "Please fix all errors shown above before further processing."
        lblMsg.Caption = m_str_Msg
        MsgBox m_str_Msg
        Exit Sub
    End If
    lblRecFound.Caption = ""
    lblCurrentRecord.Caption = ""
    lblRecordsQty.Caption = ""
    
    '9.2. Checks that fields NON_STOCK_CODED_PARTS.ID are not NULLs.
    b_ErrorFound = False
    lstCleanNSCPTables.Clear
    m_str_Msg = "9.2. Checks that fields NON_STOCK_CODED_PARTS.ID are not NULLs."
    lblMsg.Caption = m_str_Msg
    Set RS = modDBHelper.GetNSCPClean10("CES_INQUIRY.GET_NSCP_CLEAN_10")
    If RS.RecordCount > 0 Then
        ProgressBar1.Value = ProgressBar1.Min
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
            b_ErrorFound = True
            m_str_Msg = "Table NON_STOCK_CODED_PARTS. Data in some ID field is NULL."
            lstCleanNSCPTables.AddItem m_str_Msg
            lstCleanNSCPTables.Refresh
            ProgressBar1.Value = ProgressBar1.Value + 1
            If ProgressBar1.Value = ProgressBar1.Max Then
                ProgressBar1.Value = ProgressBar1.Min
            End If
            RS.MoveNext
            DoEvents
        Next l_Count
    End If

    If b_ErrorFound = True Then
        If Not RS Is Nothing Then
            Set RS = Nothing
        End If
        If Not RS_1 Is Nothing Then
            Set RS_1 = Nothing
        End If
        ProgressBar1.Value = ProgressBar1.Min
        m_str_Msg = "Please fix all errors shown above before further processing."
        lblMsg.Caption = m_str_Msg
        MsgBox m_str_Msg
        Exit Sub
    End If
    lblRecFound.Caption = ""
    lblCurrentRecord.Caption = ""
    lblRecordsQty.Caption = ""
    
    '9.3. Checks that fields NSC_PARTS_USED.ORIG_SUPP_NUM are not NULLs.
    b_ErrorFound = False
    lstCleanNSCPTables.Clear
    m_str_Msg = "9.3. Checks that fields NSC_PARTS_USED.ORIG_SUPP_NUM are not NULLs."
    lblMsg.Caption = m_str_Msg
    Set RS = modDBHelper.GetNSCPClean11("CES_INQUIRY.GET_NSCP_CLEAN_11")
    If RS.RecordCount > 0 Then
        ProgressBar1.Value = ProgressBar1.Min
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
            b_ErrorFound = True
            m_str_PartID = CStr(RS.Fields("ID"))
            m_str_Msg = "Table NSC_PARTS_USED. ID = " + m_str_PartID
            m_str_Msg = m_str_Msg + ". Data in the ORIG_SUPP_NUM column is NULL."
            lstCleanNSCPTables.AddItem m_str_Msg
            lstCleanNSCPTables.Refresh
            ProgressBar1.Value = ProgressBar1.Value + 1
            If ProgressBar1.Value = ProgressBar1.Max Then
                ProgressBar1.Value = ProgressBar1.Min
            End If
            RS.MoveNext
            DoEvents
        Next l_Count
    End If

    If b_ErrorFound = True Then
        If Not RS Is Nothing Then
            Set RS = Nothing
        End If
        If Not RS_1 Is Nothing Then
            Set RS_1 = Nothing
        End If
        ProgressBar1.Value = ProgressBar1.Min
        m_str_Msg = "Please fix all errors shown above before further processing."
        lblMsg.Caption = m_str_Msg
        MsgBox m_str_Msg
        Exit Sub
    End If
    lblRecFound.Caption = ""
    lblCurrentRecord.Caption = ""
    lblRecordsQty.Caption = ""
    
    '9.4. Checks that fields NON_STOCK_CODED_PARTS.ORIG_SUPPLIER_NUM are not NULLs.
    b_ErrorFound = False
    lstCleanNSCPTables.Clear
    m_str_Msg = "9.4. Checks that fields NON_STOCK_CODED_PARTS.ORIG_SUPPLIER_NUM are "
    m_str_Msg = m_str_Msg + "not NULLs."
    lblMsg.Caption = m_str_Msg
    Set RS = modDBHelper.GetNSCPClean12("CES_INQUIRY.GET_NSCP_CLEAN_12")
    If RS.RecordCount > 0 Then
        ProgressBar1.Value = ProgressBar1.Min
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
            b_ErrorFound = True
            m_str_PartID = CStr(RS.Fields("ID"))
            m_str_Msg = "Table NON_STOCK_CODED_PARTS. ID = " + m_str_PartID
            m_str_Msg = m_str_Msg + ". Data in the ORIG_SUPPLIER_NUM column is NULL."
            lstCleanNSCPTables.AddItem m_str_Msg
            lstCleanNSCPTables.Refresh
            ProgressBar1.Value = ProgressBar1.Value + 1
            If ProgressBar1.Value = ProgressBar1.Max Then
                ProgressBar1.Value = ProgressBar1.Min
            End If
            RS.MoveNext
            DoEvents
        Next l_Count
    End If

    If b_ErrorFound = True Then
        If Not RS Is Nothing Then
            Set RS = Nothing
        End If
        If Not RS_1 Is Nothing Then
            Set RS_1 = Nothing
        End If
        ProgressBar1.Value = ProgressBar1.Min
        m_str_Msg = "Please fix all errors shown above before further processing."
        lblMsg.Caption = m_str_Msg
        MsgBox m_str_Msg
        Exit Sub
    End If
    lblRecFound.Caption = ""
    lblCurrentRecord.Caption = ""
    lblRecordsQty.Caption = ""
    
    '9.5. Check that fields NSC_PARTS_USED.ORIG_SUPP_NUM do not have only spaces.
    m_str_Msg = "9.5. Check that fields NSC_PARTS_USED.ORIG_SUPP_NUM do not have "
    m_str_Msg = m_str_Msg + "only spaces."
    lblMsg.Caption = m_str_Msg
    lblMsg.Refresh
    b_ErrorFound = False
    Set RS = modDBHelper.GetNSCPClean5("CES_INQUIRY.GET_NSCP_CLEAN_5")
    If RS.RecordCount > 0 Then
'        ProgressBar1.Value = ProgressBar1.Min
        lblRecordsQty.Caption = CLng(RS.RecordCount)
        lblRecordsQty.Refresh
        lblCurrentRecord.Caption = "0"
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
            lblCurrentRecord.Caption = CLng(l_Count)
            lblCurrentRecord.Refresh
            m_str_EstimateType = ""
            If IsNull(RS.Fields("LINK_TYPE")) = False Then
                m_str_EstimateType = RS.Fields("LINK_TYPE")
            End If
            m_str_EstimateNumber = ""
            If IsNull(RS.Fields("LINK_CODE")) = False Then
                m_str_EstimateNumber = RS.Fields("LINK_CODE")
            End If
            m_str_OrigSupplierName = ""
            If IsNull(RS.Fields("ORIG_SUPPLIER_NAME")) = False Then
                m_str_OrigSupplierName = RS.Fields("ORIG_SUPPLIER_NAME")
            End If
            m_str_OrigSupplierNumber = ""
            If IsNull(RS.Fields("ORIG_SUPP_NUM")) = False Then
                m_str_OrigSupplierNumber = RS.Fields("ORIG_SUPP_NUM")
                m_str_OrigSupplierNumber = Trim(m_str_OrigSupplierNumber)
            End If
            m_str_PartID = ""
            If IsNull(RS.Fields("ID")) = False Then
                If IsNumeric(RS.Fields("ID")) = True Then
                    m_str_PartID = RS.Fields("ID")
                End If
            End If
            If m_str_OrigSupplierNumber = "" Then
                b_ErrorFound = True
                m_str_Msg = "Table NSC_PARTS_USED. "
                m_str_Msg = m_str_Msg + "Est.Type = " + m_str_EstimateType + ". "
                m_str_Msg = m_str_Msg + "Est. Num = " + m_str_EstimateNumber + ". "
                m_str_Msg = m_str_Msg + "ORIG_SUPPLIER_NAME = "
                m_str_Msg = m_str_Msg + m_str_OrigSupplierName + ". "
                m_str_Msg = m_str_Msg + "ID = " + m_str_PartID
                m_str_Msg = m_str_Msg + ". Field ORIG_SUPP_NUM has spaces only."
                lstCleanNSCPTables.AddItem m_str_Msg
                lstCleanNSCPTables.Refresh
            End If
'            ProgressBar1.Value = ProgressBar1.Value + 1
'            If ProgressBar1.Value = ProgressBar1.Max Then
'                ProgressBar1.Value = ProgressBar1.Min
'            End If
            RS.MoveNext
            DoEvents
        Next l_Count
    End If
    
    If b_ErrorFound = True Then
        If Not RS Is Nothing Then
            Set RS = Nothing
        End If
        If Not RS_1 Is Nothing Then
            Set RS_1 = Nothing
        End If
'        ProgressBar1.Value = ProgressBar1.Min
        m_str_Msg = "Please fix all errors shown above before further processing."
        lblMsg.Caption = m_str_Msg
        MsgBox m_str_Msg
        Exit Sub
    End If
    lblRecFound.Caption = ""
    lblCurrentRecord.Caption = ""
    lblRecordsQty.Caption = ""
    
    '9.6. Checks that fields NON_STOCK_CODED_PARTS.ORIG_SUPPLIER_NUM do not have only
    '     spaces.
    m_str_Msg = "9.6. Checks that fields NON_STOCK_CODED_PARTS.ORIG_SUPPLIER_NUM do not "
    m_str_Msg = m_str_Msg + "have only spaces."
    lblMsg.Caption = m_str_Msg
    lblMsg.Refresh
    b_ErrorFound = False
    Set RS = modDBHelper.GetNSCPClean7("CES_INQUIRY.GET_NSCP_CLEAN_7")
    If RS.RecordCount > 0 Then
'        ProgressBar1.Value = ProgressBar1.Min
        lblRecordsQty.Caption = CLng(RS.RecordCount)
        lblRecordsQty.Refresh
        lblCurrentRecord.Caption = "0"
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
            lblCurrentRecord.Caption = CLng(l_Count)
            lblCurrentRecord.Refresh
            m_str_OrigSupplierName = ""
            If IsNull(RS.Fields("ORIG_SUPPLIER_NAME")) = False Then
                m_str_OrigSupplierName = RS.Fields("ORIG_SUPPLIER_NAME")
            End If
            m_str_OrigSupplierNumber = ""
            If IsNull(RS.Fields("ORIG_SUPPLIER_NUM")) = False Then
                m_str_OrigSupplierNumber = RS.Fields("ORIG_SUPPLIER_NUM")
                m_str_OrigSupplierNumber = Trim(m_str_OrigSupplierNumber)
            End If
            m_str_PartID = ""
            If IsNull(RS.Fields("ID")) = False Then
                If IsNumeric(RS.Fields("ID")) = True Then
                    m_str_PartID = RS.Fields("ID")
                End If
            End If
            If m_str_OrigSupplierNumber = "" Then
                b_ErrorFound = True
                m_str_Msg = "Table NON_STOCK_CODED_PARTS. ID = " + m_str_PartID + ". "
                m_str_Msg = m_str_Msg + "ORIG_SUPPLIER_NAME = "
                m_str_Msg = m_str_Msg + m_str_OrigSupplierName + ". "
                m_str_Msg = m_str_Msg + ". Field ORIG_SUPPLIER_NUM has spaces only."
                lstCleanNSCPTables.AddItem m_str_Msg
                lstCleanNSCPTables.Refresh
            End If
'            ProgressBar1.Value = ProgressBar1.Value + 1
'            If ProgressBar1.Value = ProgressBar1.Max Then
'                ProgressBar1.Value = ProgressBar1.Min
'            End If
            RS.MoveNext
            DoEvents
        Next l_Count
    End If
    
    If b_ErrorFound = True Then
        If Not RS Is Nothing Then
            Set RS = Nothing
        End If
        If Not RS_1 Is Nothing Then
            Set RS_1 = Nothing
        End If
'        ProgressBar1.Value = ProgressBar1.Min
        m_str_Msg = "Please fix all errors shown above before further processing."
        lblMsg.Caption = m_str_Msg
        MsgBox m_str_Msg
        Exit Sub
    End If
    lblRecFound.Caption = ""
    lblCurrentRecord.Caption = ""
    lblRecordsQty.Caption = ""
    
    '9.7. Checks that fields NSC_PARTS_USED.ORIG_SUPPLIER_NAME are not NULLs.
    b_ErrorFound = False
    lstCleanNSCPTables.Clear
    m_str_Msg = "9.7. Checks that fields NSC_PARTS_USED.ORIG_SUPPLIER_NAME are not "
    m_str_Msg = m_str_Msg + "NULLs."
    lblMsg.Caption = m_str_Msg
    Set RS = modDBHelper.GetNSCPClean3("CES_INQUIRY.GET_NSCP_CLEAN_3")
    If RS.RecordCount > 0 Then
        ProgressBar1.Value = ProgressBar1.Min
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
            b_ErrorFound = True
            m_str_PartID = CStr(RS.Fields("ID"))
            m_str_Msg = "Table NSC_PARTS_USED. ID = " + m_str_PartID
            m_str_Msg = m_str_Msg + ". Data in the ORIG_SUPPLIER_NAME column is NULL."
            lstCleanNSCPTables.AddItem m_str_Msg
            lstCleanNSCPTables.Refresh
            ProgressBar1.Value = ProgressBar1.Value + 1
            If ProgressBar1.Value = ProgressBar1.Max Then
                ProgressBar1.Value = ProgressBar1.Min
            End If
            RS.MoveNext
            DoEvents
        Next l_Count
    End If

    If b_ErrorFound = True Then
        If Not RS Is Nothing Then
            Set RS = Nothing
        End If
        If Not RS_1 Is Nothing Then
            Set RS_1 = Nothing
        End If
        ProgressBar1.Value = ProgressBar1.Min
        m_str_Msg = "Please fix all errors shown above before further processing."
        lblMsg.Caption = m_str_Msg
        MsgBox m_str_Msg
        Exit Sub
    End If
    lblRecFound.Caption = ""
    lblCurrentRecord.Caption = ""
    lblRecordsQty.Caption = ""
    
    '9.8. Checks that fields NON_STOCK_CODED_PARTS.ORIG_SUPPLIER_NAME are not NULLs.
    b_ErrorFound = False
    lstCleanNSCPTables.Clear
    m_str_Msg = "9.8. Checks that fields NON_STOCK_CODED_PARTS.ORIG_SUPPLIER_NAME are "
    m_str_Msg = m_str_Msg + "not NULLs."
    lblMsg.Caption = m_str_Msg
    Set RS = modDBHelper.GetNSCPClean13("CES_INQUIRY.GET_NSCP_CLEAN_13")
    If RS.RecordCount > 0 Then
        ProgressBar1.Value = ProgressBar1.Min
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
            b_ErrorFound = True
            m_str_PartID = CStr(RS.Fields("ID"))
            m_str_Msg = "Table NON_STOCK_CODED_PARTS. ID = " + m_str_PartID
            m_str_Msg = m_str_Msg + ". Data in the ORIG_SUPPLIER_NAME column is NULL."
            lstCleanNSCPTables.AddItem m_str_Msg
            lstCleanNSCPTables.Refresh
            ProgressBar1.Value = ProgressBar1.Value + 1
            If ProgressBar1.Value = ProgressBar1.Max Then
                ProgressBar1.Value = ProgressBar1.Min
            End If
            RS.MoveNext
            DoEvents
        Next l_Count
    End If

    If b_ErrorFound = True Then
        If Not RS Is Nothing Then
            Set RS = Nothing
        End If
        If Not RS_1 Is Nothing Then
            Set RS_1 = Nothing
        End If
        ProgressBar1.Value = ProgressBar1.Min
        m_str_Msg = "Please fix all errors shown above before further processing."
        lblMsg.Caption = m_str_Msg
        MsgBox m_str_Msg
        Exit Sub
    End If
    lblRecFound.Caption = ""
    lblCurrentRecord.Caption = ""
    lblRecordsQty.Caption = ""
    
    '9.9. Checks that fields NSC_PARTS_USED.ORIG_SUPPLIER_NAME do not have only spaces.
    m_str_Msg = "9.9. Checks that fields NSC_PARTS_USED.ORIG_SUPPLIER_NAME do not have "
    m_str_Msg = m_str_Msg + "only spaces."
    lblMsg.Caption = m_str_Msg
    lblMsg.Refresh
    b_ErrorFound = False
    Set RS = modDBHelper.GetNSCPClean5("CES_INQUIRY.GET_NSCP_CLEAN_5")
    If RS.RecordCount > 0 Then
'        ProgressBar1.Value = ProgressBar1.Min
        lblRecordsQty.Caption = CLng(RS.RecordCount)
        lblRecordsQty.Refresh
        lblCurrentRecord.Caption = "0"
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
            lblCurrentRecord.Caption = CLng(l_Count)
            lblCurrentRecord.Refresh
            m_str_EstimateType = ""
            If IsNull(RS.Fields("LINK_TYPE")) = False Then
                m_str_EstimateType = RS.Fields("LINK_TYPE")
            End If
            m_str_EstimateNumber = ""
            If IsNull(RS.Fields("LINK_CODE")) = False Then
                m_str_EstimateNumber = RS.Fields("LINK_CODE")
            End If
            m_str_OrigSupplierName = ""
            If IsNull(RS.Fields("ORIG_SUPPLIER_NAME")) = False Then
                m_str_OrigSupplierName = RS.Fields("ORIG_SUPPLIER_NAME")
                m_str_OrigSupplierName = Trim(m_str_OrigSupplierName)
            End If
            m_str_OrigSupplierNumber = ""
            If IsNull(RS.Fields("ORIG_SUPP_NUM")) = False Then
                m_str_OrigSupplierNumber = RS.Fields("ORIG_SUPP_NUM")
            End If
            m_str_PartID = ""
            If IsNull(RS.Fields("ID")) = False Then
                If IsNumeric(RS.Fields("ID")) = True Then
                    m_str_PartID = RS.Fields("ID")
                End If
            End If
            If m_str_OrigSupplierName = "" Then
                b_ErrorFound = True
                m_str_Msg = "Table NSC_PARTS_USED. "
                m_str_Msg = m_str_Msg + "Est.Type = " + m_str_EstimateType + ". "
                m_str_Msg = m_str_Msg + "Est. Num = " + m_str_EstimateNumber + ". "
                m_str_Msg = m_str_Msg + "ORIG_SUPP_NUM = "
                m_str_Msg = m_str_Msg + m_str_OrigSupplierNumber + ". "
                m_str_Msg = m_str_Msg + "ID = " + m_str_PartID
                m_str_Msg = m_str_Msg + ". Field ORIG_SUPPLIER_NAME has spaces only."
                lstCleanNSCPTables.AddItem m_str_Msg
                lstCleanNSCPTables.Refresh
            End If
'            ProgressBar1.Value = ProgressBar1.Value + 1
'            If ProgressBar1.Value = ProgressBar1.Max Then
'                ProgressBar1.Value = ProgressBar1.Min
'            End If
            RS.MoveNext
            DoEvents
        Next l_Count
    End If
    
    If b_ErrorFound = True Then
        If Not RS Is Nothing Then
            Set RS = Nothing
        End If
        If Not RS_1 Is Nothing Then
            Set RS_1 = Nothing
        End If
'        ProgressBar1.Value = ProgressBar1.Min
        m_str_Msg = "Please fix all errors shown above before further processing."
        lblMsg.Caption = m_str_Msg
        MsgBox m_str_Msg
        Exit Sub
    End If
    lblRecFound.Caption = ""
    lblCurrentRecord.Caption = ""
    lblRecordsQty.Caption = ""
    
    '9.10. Checks that fields NON_STOCK_CODED_PARTS.ORIG_SUPPLIER_NAME do not have only
    '      spaces.
    m_str_Msg = "9.10. Checks that fields NON_STOCK_CODED_PARTS.ORIG_SUPPLIER_NAME do "
    m_str_Msg = m_str_Msg + "not have only spaces."
    lblMsg.Caption = m_str_Msg
    lblMsg.Refresh
    b_ErrorFound = False
    Set RS = modDBHelper.GetNSCPClean7("CES_INQUIRY.GET_NSCP_CLEAN_7")
    If RS.RecordCount > 0 Then
'        ProgressBar1.Value = ProgressBar1.Min
        lblRecordsQty.Caption = CLng(RS.RecordCount)
        lblRecordsQty.Refresh
        lblCurrentRecord.Caption = "0"
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
            lblCurrentRecord.Caption = CLng(l_Count)
            lblCurrentRecord.Refresh
            m_str_OrigSupplierName = ""
            If IsNull(RS.Fields("ORIG_SUPPLIER_NAME")) = False Then
                m_str_OrigSupplierName = RS.Fields("ORIG_SUPPLIER_NAME")
                m_str_OrigSupplierName = Trim(m_str_OrigSupplierName)
            End If
            m_str_OrigSupplierNumber = ""
            If IsNull(RS.Fields("ORIG_SUPPLIER_NUM")) = False Then
                m_str_OrigSupplierNumber = RS.Fields("ORIG_SUPPLIER_NUM")
            End If
            m_str_PartID = ""
            If IsNull(RS.Fields("ID")) = False Then
                If IsNumeric(RS.Fields("ID")) = True Then
                    m_str_PartID = RS.Fields("ID")
                End If
            End If
            If m_str_OrigSupplierNumber = "" Then
                b_ErrorFound = True
                m_str_Msg = "Table NON_STOCK_CODED_PARTS. ID = " + m_str_PartID + ". "
                m_str_Msg = m_str_Msg + "ORIG_SUPPLIER_NUM = "
                m_str_Msg = m_str_Msg + m_str_OrigSupplierNumber + ". "
                m_str_Msg = m_str_Msg + ". Field ORIG_SUPPLIER_NAME has spaces only."
                lstCleanNSCPTables.AddItem m_str_Msg
                lstCleanNSCPTables.Refresh
            End If
'            ProgressBar1.Value = ProgressBar1.Value + 1
'            If ProgressBar1.Value = ProgressBar1.Max Then
'                ProgressBar1.Value = ProgressBar1.Min
'            End If
            RS.MoveNext
            DoEvents
        Next l_Count
    End If
    
    If b_ErrorFound = True Then
        If Not RS Is Nothing Then
            Set RS = Nothing
        End If
        If Not RS_1 Is Nothing Then
            Set RS_1 = Nothing
        End If
'        ProgressBar1.Value = ProgressBar1.Min
        m_str_Msg = "Please fix all errors shown above before further processing."
        lblMsg.Caption = m_str_Msg
        MsgBox m_str_Msg
        Exit Sub
    End If
    lblRecFound.Caption = ""
    lblCurrentRecord.Caption = ""
    lblRecordsQty.Caption = ""
    
    '9.11. Check that combinations of ORIG_SUPPLIER_NUM + ORIG_SUPPLIER_NAME in the
    '      NON_STOCK_CODED_PARTS table are unique.
    m_str_Msg = "9.11. Check that combinations of ORIG_SUPPLIER_NUM + "
    m_str_Msg = m_str_Msg + "ORIG_SUPPLIER_NAME in the NON_STOCK_CODED_PARTS "
    m_str_Msg = m_str_Msg + " table are unique."
    lblMsg.Caption = m_str_Msg
    lblMsg.Refresh
    b_ErrorFound = False
    m_l_Duplications = 0
    lblRecFound.Caption = CStr(m_l_Duplications)
    lblRecFound.Refresh

    Set RS = modDBHelper.GetNSCPClean7("CES_INQUIRY.GET_NSCP_CLEAN_7")
    If RS.RecordCount > 0 Then
        lblRecordsQty.Caption = CLng(RS.RecordCount)
        lblRecordsQty.Refresh
        ProgressBar1.Value = ProgressBar1.Min
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
            lblCurrentRecord.Caption = CLng(l_Count)
            Me.Refresh
            m_str_OrigSupplierNumber = ""
            If IsNull(RS.Fields("ORIG_SUPPLIER_NUM")) = False Then
                m_str_OrigSupplierNumber = RS.Fields("ORIG_SUPPLIER_NUM")
            End If
            m_str_OrigSupplierName = ""
            If IsNull(RS.Fields("ORIG_SUPPLIER_NAME")) = False Then
                m_str_OrigSupplierName = RS.Fields("ORIG_SUPPLIER_NAME")
            End If
            m_str_Cost = ""
            m_str_PartID = CStr(RS.Fields("ID"))

            Set RS_1 = modDBHelper.GetNSCPClean14("CES_INQUIRY.GET_NSCP_CLEAN_14", _
                                                  m_str_OrigSupplierNumber, _
                                                  m_str_OrigSupplierName)
            If RS_1.RecordCount > 1 Then
                b_ErrorFound = True
                m_str_OrigSupplierNumber_1 = ""
                If IsNull(RS_1.Fields("ORIG_SUPPLIER_NUM")) = False Then
                    m_str_OrigSupplierNumber_1 = RS_1.Fields("ORIG_SUPPLIER_NUM")
                End If
                m_str_OrigSupplierName_1 = ""
                If IsNull(RS_1.Fields("ORIG_SUPPLIER_NAME")) = False Then
                    m_str_OrigSupplierName_1 = RS_1.Fields("ORIG_SUPPLIER_NAME")
                End If
                m_str_PartID_1 = CStr(RS_1.Fields("ID"))

                m_str_Msg = "Table NON_STOCK_CODED_PARTS. "
                m_str_Msg = m_str_Msg + "(ORIG_SUPPLIER_NUM+ORIG_SUPPLIER_NAME) "
                m_str_Msg = m_str_Msg + "duplication. "
                m_str_Msg = m_str_Msg + "ORIG_SUPPLIER_NUM = " + m_str_OrigSupplierNumber + ". "
                m_str_Msg = m_str_Msg + "ORIG_SUPPLIER_NAME = " + m_str_OrigSupplierName
                m_str_Msg = m_str_Msg + ". ID = " + m_str_PartID
                m_str_Msg = m_str_Msg + ". Dup. ID = " + m_str_PartID_1

                lstCleanNSCPTables.AddItem m_str_Msg
                lstCleanNSCPTables.Refresh

                m_l_Duplications = m_l_Duplications + 1
                lblRecFound.Caption = CStr(m_l_Duplications)
                lblRecFound.Refresh
            End If
            RS.MoveNext
            ProgressBar1.Value = ProgressBar1.Value + 1
            If ProgressBar1.Value = ProgressBar1.Max Then
                ProgressBar1.Value = ProgressBar1.Min
            End If
            DoEvents
        Next l_Count
    End If
    
    If b_ErrorFound = True Then
        If Not RS Is Nothing Then
            Set RS = Nothing
        End If
        If Not RS_1 Is Nothing Then
            Set RS_1 = Nothing
        End If
        ProgressBar1.Value = ProgressBar1.Min
        m_str_Msg = "Please fix all errors shown above before further processing."
        lblMsg.Caption = m_str_Msg
        MsgBox m_str_Msg
        Exit Sub
    End If
    lblRecFound.Caption = ""
    lblCurrentRecord.Caption = ""
    lblRecordsQty.Caption = ""
    
    '9.12. Check that each record in the NSC_PARTS_USED table has corresponded record
    '      in the NON_STOCK_CODED_PARTS table.
    m_str_Msg = "9.12. Check that each record in the NSC_PARTS_USED table has "
    m_str_Msg = m_str_Msg + "corresponded record in the NON_STOCK_CODED_PARTS table."
    lblMsg.Caption = m_str_Msg
    lblMsg.Refresh
    b_ErrorFound = False
    m_l_Duplications = 0
    lblRecFound.Caption = CStr(m_l_Duplications)

    Set RS = modDBHelper.GetNSCPClean5("CES_INQUIRY.GET_NSCP_CLEAN_5")
    If RS.RecordCount > 0 Then
        lblRecordsQty.Caption = CLng(RS.RecordCount)
        lblRecordsQty.Refresh
        ProgressBar1.Value = ProgressBar1.Min
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
            lblCurrentRecord.Caption = CLng(l_Count)
            Me.Refresh
            m_str_OrigSupplierNumber = ""
            If IsNull(RS.Fields("ORIG_SUPP_NUM")) = False Then
                m_str_OrigSupplierNumber = RS.Fields("ORIG_SUPPLIER_NUM")
            End If
            m_str_OrigSupplierName = ""
            If IsNull(RS.Fields("ORIG_SUPP_NAME")) = False Then
                m_str_OrigSupplierName = RS.Fields("ORIG_SUPPLIER_NAME")
            End If
            m_str_Cost = ""
            m_str_PartID = CStr(RS.Fields("ID"))

            Set RS_1 = modDBHelper.GetNSCPClean15("CES_INQUIRY.GET_NSCP_CLEAN_15", _
                                                  m_str_OrigSupplierNumber, _
                                                  m_str_OrigSupplierName)
            
            If RS_1.RecordCount = 0 Then
                b_ErrorFound = True
                m_str_OrigSupplierNumber_1 = ""
                If IsNull(RS_1.Fields("ORIG_SUPPLIER_NUM")) = False Then
                    m_str_OrigSupplierNumber_1 = RS_1.Fields("ORIG_SUPPLIER_NUM")
                End If
                m_str_OrigSupplierName_1 = ""
                If IsNull(RS_1.Fields("ORIG_SUPPLIER_NAME")) = False Then
                    m_str_OrigSupplierName_1 = RS_1.Fields("ORIG_SUPPLIER_NAME")
                End If
                m_str_PartID_1 = CStr(RS_1.Fields("ID"))

                m_str_Msg = "Table NSC_PARTS_USED. ID = " + m_str_PartID
                m_str_Msg = m_str_Msg + ". Does not have corresponded record in the "
                m_str_Msg = m_str_Msg + "NON_STOCK_CODED_PARTS table."
                
                lstCleanNSCPTables.AddItem m_str_Msg
                lstCleanNSCPTables.Refresh

                m_l_Duplications = m_l_Duplications + 1
                lblRecFound.Caption = CStr(m_l_Duplications)
                lblRecFound.Refresh
                DoEvents
            End If
            RS.MoveNext
            ProgressBar1.Value = ProgressBar1.Value + 1
            If ProgressBar1.Value = ProgressBar1.Max Then
                ProgressBar1.Value = ProgressBar1.Min
            End If
            DoEvents
        Next l_Count
    End If
    
    If b_ErrorFound = True Then
        If Not RS Is Nothing Then
            Set RS = Nothing
        End If
        If Not RS_1 Is Nothing Then
            Set RS_1 = Nothing
        End If
        ProgressBar1.Value = ProgressBar1.Min
        m_str_Msg = "Please fix all errors shown above before further processing."
        lblMsg.Caption = m_str_Msg
        MsgBox m_str_Msg
        Exit Sub
    End If
    lblRecFound.Caption = ""
    lblCurrentRecord.Caption = ""
    lblRecordsQty.Caption = ""
    
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    If Not RS_1 Is Nothing Then
        Set RS_1 = Nothing
    End If
    
    Call SetDefaultCursor
    m_b_InProgress = False
    ProgressBar1.Value = ProgressBar1.Min
    m_str_Msg = "Tables NON_STOCK_CODED_PARTS and NSC_PARTS_USED are cleaned."
    lblMsg.Caption = m_str_Msg
    MsgBox m_str_Msg
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "FinalChecks", Erl
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    If Not RS_1 Is Nothing Then
        Set RS_1 = Nothing
    End If
    ProgressBar1.Value = ProgressBar1.Min
    m_b_InProgress = False
    Call MakeButtonsEnabled(True)
    Call SetDefaultCursor
End Sub

Private Sub cmdStep1_Click()
    'Delete all records from the NSC_PARTS_USED table where ID is NULL.
    
    On Error GoTo Error_Handler

    m_b_InProgress = True
    Call MakeButtonsEnabled(False)
    lblMsg.Caption = "Step 1. " + m_str_const_BePatient
    lblMsg.Refresh
   
    Call SetWaitCursor
    
    lstCleanNSCPTables.Clear
    m_l_Duplications = 0
    lblRecFound.Caption = CStr(m_l_Duplications)
    m_l_Result = modDBHelper.DeleteCleanNSCP1( _
                                        "CES_DELETE.DELETE_CLEAN_NSCP_1", _
                                        m_l_RetVal)
    If m_l_Result = 0 Then
        m_b_1_StepDone = True
        m_str_Msg = "Step 1 is done. You can proceed to Step 2."
        lblMsg.Caption = m_str_Msg
        MsgBox m_str_Msg
    Else
        m_str_Msg = "Step 1 is failed. Stored procedure CES_DELETE.DELETE_CLEAN_NSCP_1 "
        m_str_Msg = m_str_Msg + "proceed to Step 2."
        lblMsg.Caption = m_str_Msg
        MsgBox m_str_Msg
    End If

    m_b_InProgress = False
    Call MakeButtonsEnabled(True)
    Call SetDefaultCursor
    
'Call FinalChecks
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdStep1_Click", Erl
    m_b_InProgress = False
    Call MakeButtonsEnabled(True)
    Call SetDefaultCursor
End Sub

Private Sub cmdStep2_Click()
    'Delete all records from the NON_STOCK_CODED_PARTS table where ID is NULL.
    
    On Error GoTo Error_Handler

    If m_b_1_StepDone = False Then
        MsgBox "Please run Step 1 first."
        Exit Sub
    End If
    
    m_b_InProgress = True
    Call MakeButtonsEnabled(False)
    lblMsg.Caption = "Step 2. " + m_str_const_BePatient
    lblMsg.Refresh
    
    Call SetWaitCursor
    
    lstCleanNSCPTables.Clear
    m_l_Duplications = 0
    lblRecFound.Caption = CStr(m_l_Duplications)
    m_l_Result = modDBHelper.DeleteCleanNSCP2( _
                                        "CES_DELETE.DELETE_CLEAN_NSCP_2", _
                                        m_l_RetVal)

    If m_l_Result = 0 Then
        m_str_Msg = "Step 2 is done. You can proceed to Step 3."
        m_b_2_StepDone = True
        lblMsg.Caption = m_str_Msg
        MsgBox m_str_Msg
    Else
        m_str_Msg = "Step 2 is failed. Further investigation needs to be done before "
        m_str_Msg = m_str_Msg + "proceed to Step 3."
        lblMsg.Caption = m_str_Msg
        MsgBox m_str_Msg
    End If

    m_b_InProgress = False
    Call MakeButtonsEnabled(True)
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdStep2_Click", Erl
    m_b_InProgress = False
    Call MakeButtonsEnabled(True)
    Call SetDefaultCursor
End Sub

Private Sub cmdStep3_Click()
    '3.1. Find all records in the NSC_PARTS_USED table where ORIG_SUPP_NUM is NULL.
    '3.2. If no record(s) found, delete all records from the NON_STOCK_CODED_PARTS
    'table where ORIG_SUPPLIER_NUM is NULL.
    
    Dim RS As ADODB.Recordset
    Dim l_Count As Long
    Dim m_l_Duplications As Long
    
    On Error GoTo Error_Handler
    
    If m_b_2_StepDone = False Then
        MsgBox "Please run Step 2 first."
        Exit Sub
    End If
    
    m_b_InProgress = True
    Call MakeButtonsEnabled(False)
    lblMsg.Caption = "Step 3. " + m_str_const_BePatient
    lblMsg.Refresh
    
    Call SetWaitCursor
    
    lstCleanNSCPTables.Clear
    m_l_Duplications = 0
    lblRecFound.Caption = CStr(m_l_Duplications)
    
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.GetNSCPClean1("CES_INQUIRY.GET_NSCP_CLEAN_1")
    
    If RS.RecordCount > 0 Then
        lblMsg.Caption = "Step 3.1. " + m_str_const_BePatient
        lblMsg.Refresh
        lblRecordsQty.Caption = CLng(RS.RecordCount)
        lblRecordsQty.Refresh
        ProgressBar1.Value = ProgressBar1.Min
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
            lblCurrentRecord.Caption = CLng(l_Count)
            lblCurrentRecord.Refresh
            m_str_EstimateType = ""
            If IsNull(RS.Fields("LINK_TYPE")) = False Then
                m_str_EstimateType = RS.Fields("LINK_TYPE")
            End If
            m_str_EstimateNumber = ""
            If IsNull(RS.Fields("LINK_CODE")) = False Then
                m_str_EstimateNumber = RS.Fields("LINK_CODE")
            End If
            m_str_OrigSupplierName = ""
            If IsNull(RS.Fields("ORIG_SUPPLIER_NAME")) = False Then
                m_str_OrigSupplierName = RS.Fields("ORIG_SUPPLIER_NAME")
            End If
            m_str_PartID = ""
            If IsNull(RS.Fields("ID")) = False Then
                If IsNumeric(RS.Fields("ID")) = True Then
                    m_str_PartID = RS.Fields("ID")
                End If
            End If
            
            m_str_Msg = "Est.Type = " + m_str_EstimateType + ". "
            m_str_Msg = m_str_Msg + "Est. Num = " + m_str_EstimateNumber + ". "
            m_str_Msg = m_str_Msg + "ORIG_SUPPLIER_NAME = "
            m_str_Msg = m_str_Msg + m_str_OrigSupplierName + ". "
            m_str_Msg = m_str_Msg + "Part ID = " + m_str_PartID
            m_str_Msg = m_str_Msg + ". Field ORIG_SUPP_NUM is NULL."
            
            lstCleanNSCPTables.AddItem m_str_Msg
            lstCleanNSCPTables.Refresh
            m_l_Duplications = m_l_Duplications + 1
            lblRecFound.Caption = CStr(m_l_Duplications)
            lblRecFound.Refresh
            ProgressBar1.Value = ProgressBar1.Value + 1
            If ProgressBar1.Value = ProgressBar1.Max Then
                ProgressBar1.Value = ProgressBar1.Min
            End If
            RS.MoveNext
        Next l_Count
        m_str_Msg = "Please fix all estimates shown, before proceed to Step 4."
        lblMsg.Caption = m_str_Msg
        MsgBox m_str_Msg
        m_b_InProgress = False
        Call MakeButtonsEnabled(True)
    Else
        lblMsg.Caption = "Step 3.2. " + m_str_const_BePatient
        lblRecordsQty.Caption = ""
        lblCurrentRecord.Caption = ""
        Me.Refresh
        'DELETE FROM NON_STOCK_CODED_PARTS WHERE ORIG_SUPPLIER_NUM IS NULL
        m_l_Result = modDBHelper.DeleteCleanNSCP3( _
                                            "CES_DELETE.DELETE_CLEAN_NSCP_3", _
                                            m_l_RetVal)
        If m_l_Result = 0 Then
            m_b_3_StepDone = True
            m_str_Msg = "Step 3 is done. You can proceed to Step 4."
            lblMsg.Caption = m_str_Msg
            MsgBox m_str_Msg
        Else
            m_str_Msg = "Step 3 is failed. Further investigation needs to be done "
            m_str_Msg = m_str_Msg + "before proceed to Step 4."
            lblMsg.Caption = m_str_Msg
            MsgBox m_str_Msg
        End If
        m_b_InProgress = False
        Call MakeButtonsEnabled(True)
    End If
    
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    
    lblRecordsQty.Caption = ""
    lblCurrentRecord.Caption = ""
    ProgressBar1.Value = ProgressBar1.Min
    Call MakeButtonsEnabled(True)
    
    Call SetDefaultCursor
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdStep3_Click", Erl
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    m_b_InProgress = False
    lblRecordsQty.Caption = ""
    lblCurrentRecord.Caption = ""
    Call MakeButtonsEnabled(True)
    Call SetDefaultCursor
End Sub

Private Sub cmdStep4_Click()
    '4.1. Find all records in the NSC_PARTS_USED table where ORIG_SUPP_NUM has
    'only spaces.
    '4.2. If no record(s) found, delete all records from the NON_STOCK_CODED_PARTS
    'table where ORIG_SUPPLIER_NUM has only spaces.
    
    Dim RS As ADODB.Recordset
    Dim l_Count As Long
    Dim l_Count1 As Long
    Dim str_Spaces As String
    Dim b_SpaceFound As Boolean
    Dim b_Failed As Boolean
    Dim l_RecQty As Long
    
    On Error GoTo Error_Handler
    
    If m_b_3_StepDone = False Then
        MsgBox "Please run Step 3 first."
        Exit Sub
    End If
    
    m_b_InProgress = True
    Call MakeButtonsEnabled(False)
    lblMsg.Caption = "Step 4. " + m_str_const_BePatient
    lblMsg.Refresh
    
    Call SetWaitCursor
    
    lstCleanNSCPTables.Clear
    m_l_Duplications = 0
    lblRecFound.Caption = CStr(m_l_Duplications)

    Set RS = New ADODB.Recordset
    
    b_SpaceFound = False
    str_Spaces = ""
    For l_Count1 = 1 To 50 'Field NCS_PARTS_USED.ORIG_SUPP_NUM has length = 50
        lblMsg.Caption = "Step 4.1. " + m_str_const_BePatient
        lblMsg.Refresh
        ProgressBar1.Value = ProgressBar1.Min
        str_Spaces = str_Spaces + " "
        Set RS = modDBHelper.GetNSCPClean2("CES_INQUIRY.GET_NSCP_CLEAN_2", str_Spaces)
        If RS.RecordCount > 0 Then
            lblRecordsQty.Caption = CLng(RS.RecordCount)
            lblRecordsQty.Refresh
            b_SpaceFound = True
            RS.MoveFirst
            For l_Count = 1 To RS.RecordCount
                lblCurrentRecord.Caption = CLng(l_Count)
                lblCurrentRecord.Refresh
                m_str_EstimateType = ""
                If IsNull(RS.Fields("LINK_TYPE")) = False Then
                    m_str_EstimateType = RS.Fields("LINK_TYPE")
                End If
                m_str_EstimateNumber = ""
                If IsNull(RS.Fields("LINK_CODE")) = False Then
                    m_str_EstimateNumber = RS.Fields("LINK_CODE")
                End If
                m_str_OrigSupplierName = ""
                If IsNull(RS.Fields("ORIG_SUPPLIER_NAME")) = False Then
                    m_str_OrigSupplierName = RS.Fields("ORIG_SUPPLIER_NAME")
                End If
                m_str_PartID = ""
                If IsNull(RS.Fields("ID")) = False Then
                    If IsNumeric(RS.Fields("ID")) = True Then
                        m_str_PartID = RS.Fields("ID")
                    End If
                End If
                
                m_str_Msg = "Est.Type = " + m_str_EstimateType + ". "
                m_str_Msg = m_str_Msg + "Est. Num = " + m_str_EstimateNumber + ". "
                m_str_Msg = m_str_Msg + "ORIG_SUPPLIER_NAME = "
                m_str_Msg = m_str_Msg + m_str_OrigSupplierName + ". "
                m_str_Msg = m_str_Msg + "Part ID = " + m_str_PartID
                m_str_Msg = m_str_Msg + ". Field ORIG_SUPP_NUM has " + CStr(l_Count1)
                m_str_Msg = m_str_Msg + " spaces only."
                
                lstCleanNSCPTables.AddItem m_str_Msg
                lstCleanNSCPTables.Refresh
                m_l_Duplications = m_l_Duplications + 1
                lblRecFound.Caption = CStr(m_l_Duplications)
                lblRecFound.Refresh
                ProgressBar1.Value = ProgressBar1.Value + 1
                If ProgressBar1.Value = ProgressBar1.Max Then
                    ProgressBar1.Value = ProgressBar1.Min
                End If
                RS.MoveNext
                DoEvents
            Next l_Count
        End If
    Next l_Count1
    
    If b_SpaceFound = False Then
        lblMsg.Caption = "Step 4.2. " + m_str_const_BePatient
        lblMsg.Refresh
        'Delete all records in the NON_STOCK_CODED_PARTS table where ORIG_SUPPLIER_NUM
        'has only spaces.
        str_Spaces = ""
        b_Failed = False
        lblRecordsQty.Caption = "50"
        lblRecordsQty.Refresh
        For l_Count1 = 1 To 50 'Field NON_STOCK_CODED_PARTS.ORIG_SUPPLIER_NUM has length = 50
            lblCurrentRecord.Caption = CLng(l_Count1)
            lblCurrentRecord.Refresh
            str_Spaces = str_Spaces + " "
            m_l_Result = modDBHelper.DeleteCleanNSCP4( _
                                            "CES_DELETE.DELETE_CLEAN_NSCP_4", _
                                            m_l_RetVal, str_Spaces)
    
            If m_l_Result <> 0 Then
                Call SetDefaultCursor
                b_Failed = True
                m_str_Msg = "Step 4.2 is failed. Further investigation needs to be done "
                m_str_Msg = m_str_Msg + "before proceed to Step 5."
                lblMsg.Caption = m_str_Msg
                MsgBox m_str_Msg
                lblRecordsQty.Caption = ""
                lblCurrentRecord.Caption = ""
                m_b_InProgress = False
                Call MakeButtonsEnabled(True)
                Exit Sub
            End If
            ProgressBar1.Value = ProgressBar1.Value + 1
            If ProgressBar1.Value = ProgressBar1.Max Then
                ProgressBar1.Value = ProgressBar1.Min
            End If
            DoEvents
        Next l_Count1
    Else
        ProgressBar1.Value = ProgressBar1.Min
        Call SetDefaultCursor
        m_str_Msg = "Please fix all estimates shown, before proceed to Step 5."
        lblMsg.Caption = m_str_Msg
        MsgBox m_str_Msg
        lblRecordsQty.Caption = ""
        lblCurrentRecord.Caption = ""
        m_b_InProgress = False
        Call MakeButtonsEnabled(True)
        Exit Sub
    End If
    
    m_b_4_StepDone = True
    
    m_b_InProgress = False
    ProgressBar1.Value = ProgressBar1.Min
    Call SetDefaultCursor
    m_str_Msg = "Step 4 is done. You can proceed to Step 5."
    lblMsg.Caption = m_str_Msg
    MsgBox m_str_Msg
    lblRecordsQty.Caption = ""
    lblCurrentRecord.Caption = ""
    Call MakeButtonsEnabled(True)
    
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdStep4_Click", Erl
    m_b_InProgress = False
    ProgressBar1.Value = ProgressBar1.Min
    lblRecordsQty.Caption = ""
    lblCurrentRecord.Caption = ""
    Call MakeButtonsEnabled(True)
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    Call SetDefaultCursor
End Sub

Private Sub cmdStep5_Click()
    '5.1. Find all records in the NSC_PARTS_USED table where ORIG_SUPPLIER_NAME is NULL.
    '5.2. If no record(s) found, delete all records from the NON_STOCK_CODED_PARTS table
    'where ORIG_SUPPLIER_NAME has only spaces.
    
    Dim RS As ADODB.Recordset
    Dim l_Count As Long
    
    On Error GoTo Error_Handler
    
    If m_b_4_StepDone = False Then
        MsgBox "Please run Step 4 first."
        Exit Sub
    End If
    
    m_b_InProgress = True
    Call MakeButtonsEnabled(False)
    lblMsg.Caption = "Step 5. " + m_str_const_BePatient
    Me.Refresh
    
    Call SetWaitCursor
    
    lstCleanNSCPTables.Clear
    m_l_Duplications = 0
    lblRecFound.Caption = CStr(m_l_Duplications)
    
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.GetNSCPClean3("CES_INQUIRY.GET_NSCP_CLEAN_3")

    If RS.RecordCount > 0 Then
        lblMsg.Caption = "Step 5.1. " + m_str_const_BePatient
        ProgressBar1.Value = ProgressBar1.Min
        lblRecordsQty.Caption = CLng(RS.RecordCount)
        lblRecordsQty.Refresh
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
            lblCurrentRecord.Caption = CLng(l_Count)
            lblCurrentRecord.Refresh
            m_str_EstimateType = ""
            If IsNull(RS.Fields("LINK_TYPE")) = False Then
                m_str_EstimateType = RS.Fields("LINK_TYPE")
            End If
            m_str_EstimateNumber = ""
            If IsNull(RS.Fields("LINK_CODE")) = False Then
                m_str_EstimateNumber = RS.Fields("LINK_CODE")
            End If
            m_str_OrigSupplierNumber = ""
            If IsNull(RS.Fields("ORIG_SUPP_NUM")) = False Then
                m_str_OrigSupplierNumber = RS.Fields("ORIG_SUPP_NUM")
            End If
            m_str_PartID = ""
            If IsNull(RS.Fields("ID")) = False Then
                If IsNumeric(RS.Fields("ID")) = True Then
                    m_str_PartID = RS.Fields("ID")
                End If
            End If
            
            m_str_Msg = "Est.Type = " + m_str_EstimateType + ". "
            m_str_Msg = m_str_Msg + "Est. Num = " + m_str_EstimateNumber + ". "
            m_str_Msg = m_str_Msg + "ORIG_SUPP_NUM = " + m_str_OrigSupplierNumber + ". "
            m_str_Msg = m_str_Msg + "Part ID = " + m_str_PartID
            m_str_Msg = m_str_Msg + ". Field ORIG_SUPPLIER_NAME is NULL."
            
            lstCleanNSCPTables.AddItem m_str_Msg
            lstCleanNSCPTables.Refresh
            m_l_Duplications = m_l_Duplications + 1
            lblRecFound.Caption = CStr(m_l_Duplications)
            ProgressBar1.Value = ProgressBar1.Value + 1
            If ProgressBar1.Value = ProgressBar1.Max Then
                ProgressBar1.Value = ProgressBar1.Min
            End If
            RS.MoveNext
            DoEvents
        Next l_Count
        Call SetDefaultCursor
        m_str_Msg = "Please fix all estimates shown, before proceed to Step 6."
        lblMsg.Caption = m_str_Msg
        MsgBox m_str_Msg
        m_b_InProgress = False
        Call MakeButtonsEnabled(True)
    Else
        lblMsg.Caption = "Step 5.2. " + m_str_const_BePatient
        'DELETE FROM NON_STOCK_CODED_PARTS WHERE ORIG_SUPP_NAME IS NULL
        m_l_Result = modDBHelper.DeleteCleanNSCP5( _
                                            "CES_DELETE.DELETE_CLEAN_NSCP_5", _
                                            m_l_RetVal)
    
        If m_l_Result = 0 Then
            Call SetDefaultCursor
            m_b_5_StepDone = True
            m_str_Msg = "Step 5 is done. You can proceed to Step 6."
            lblMsg.Caption = m_str_Msg
            MsgBox m_str_Msg
            m_b_InProgress = False
            Call MakeButtonsEnabled(True)
        Else
            Call SetDefaultCursor
            m_str_Msg = "Step 5.2 is failed. Further investigation needs to be done "
            m_str_Msg = m_str_Msg + "before proceed to Step 6."
            lblMsg.Caption = m_str_Msg
            MsgBox m_str_Msg
            m_b_InProgress = False
            Call MakeButtonsEnabled(True)
        End If
    End If
    
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    
    lblRecordsQty.Caption = ""
    lblCurrentRecord.Caption = ""
    ProgressBar1.Value = ProgressBar1.Min
    m_b_InProgress = False
    Call MakeButtonsEnabled(True)
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdStep5_Click", Erl
    m_b_InProgress = False
    lblRecordsQty.Caption = ""
    lblCurrentRecord.Caption = ""
    ProgressBar1.Value = ProgressBar1.Min
    Call MakeButtonsEnabled(True)
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    Call SetDefaultCursor
End Sub

Private Sub cmdStep6_Click()
    '6.1. Find all records in the NSC_PARTS_USED table where ORIG_SUPPLIER_NAME has only
    'spaces.
    '6.2. If no record(s) found, delete all records from the NON_STOCK_CODED_PARTS table
    'where ORIG_SUPPLIER_NAME has only spaces.
    
    Dim RS As ADODB.Recordset
    Dim l_Count As Long
    Dim l_Count1 As Long
    Dim str_Spaces As String
    Dim b_SpaceFound As Boolean
    Dim b_Failed As Boolean
    
    On Error GoTo Error_Handler
    
    If m_b_5_StepDone = False Then
        MsgBox "Please run Step 5 first."
        Exit Sub
    End If
    
    m_b_InProgress = True
    Call MakeButtonsEnabled(False)
    lblMsg.Caption = "Step 6. " + m_str_const_BePatient
    lblMsg.Refresh
    
    Call SetWaitCursor
    
    lstCleanNSCPTables.Clear
    m_l_Duplications = 0
    lblRecFound.Caption = CStr(m_l_Duplications)

    Set RS = New ADODB.Recordset
    
    b_SpaceFound = False
    str_Spaces = ""
    ProgressBar1.Value = ProgressBar1.Min
    lblMsg.Caption = "Step 6.1. " + m_str_const_BePatient
    For l_Count1 = 1 To 50 'Field NCS_PARTS_USED.ORIG_SUPPLIER_NAME has length = 50
        str_Spaces = str_Spaces + " "
        Set RS = modDBHelper.GetNSCPClean4("CES_INQUIRY.GET_NSCP_CLEAN_4", str_Spaces)
        If RS.RecordCount > 0 Then
            lblRecordsQty.Caption = CLng(RS.RecordCount)
            lblRecordsQty.Refresh
            b_SpaceFound = True
            RS.MoveFirst
            For l_Count = 1 To RS.RecordCount
                lblCurrentRecord.Caption = CLng(l_Count)
                lblCurrentRecord.Refresh
                m_str_EstimateType = ""
                If IsNull(RS.Fields("LINK_TYPE")) = False Then
                    m_str_EstimateType = RS.Fields("LINK_TYPE")
                End If
                m_str_EstimateNumber = ""
                If IsNull(RS.Fields("LINK_CODE")) = False Then
                    m_str_EstimateNumber = RS.Fields("LINK_CODE")
                End If
                m_str_OrigSupplierNumber = ""
                If IsNull(RS.Fields("ORIG_SUPP_NUM")) = False Then
                    m_str_OrigSupplierNumber = RS.Fields("ORIG_SUPP_NUM")
                End If
                m_str_PartID = ""
                If IsNull(RS.Fields("ID")) = False Then
                    If IsNumeric(RS.Fields("ID")) = True Then
                        m_str_PartID = RS.Fields("ID")
                    End If
                End If
                
                m_str_Msg = "Est.Type = " + m_str_EstimateType + ". "
                m_str_Msg = m_str_Msg + "Est. Num = " + m_str_EstimateNumber + ". "
                m_str_Msg = m_str_Msg + "ORIG_SUPPLIER_NUM = "
                m_str_Msg = m_str_Msg + m_str_OrigSupplierNumber + ". "
                m_str_Msg = m_str_Msg + "Part ID = " + m_str_PartID + "."
                m_str_Msg = m_str_Msg + "Field ORIG_SUPPLIER_NAME has " + CStr(l_Count1)
                m_str_Msg = m_str_Msg + " spaces only."
                
                lstCleanNSCPTables.AddItem m_str_Msg
                lstCleanNSCPTables.Refresh
                m_l_Duplications = m_l_Duplications + 1
                lblRecFound.Caption = CStr(m_l_Duplications)
                lblRecFound.Refresh
                ProgressBar1.Value = ProgressBar1.Value + 1
                If ProgressBar1.Value = ProgressBar1.Max Then
                    ProgressBar1.Value = ProgressBar1.Min
                End If
                RS.MoveNext
                DoEvents
            Next l_Count
        End If
    Next l_Count1
    
    If b_SpaceFound = False Then
        'Delete all records in the NON_STOCK_CODED_PARTS table where ORIG_SUPPLIER_NAME
        'has only spaces.
        str_Spaces = ""
        b_Failed = False
        lblRecordsQty.Caption = "50"
        lblRecordsQty.Refresh
        lblMsg.Caption = "Step 6.2. " + m_str_const_BePatient
        For l_Count1 = 1 To 50 'Field NON_STOCK_CODED_PARTS.ORIG_SUPPLIER_NAME has length = 50
            lblCurrentRecord.Caption = CLng(l_Count1)
            lblCurrentRecord.Refresh
            str_Spaces = str_Spaces + " "
            m_l_Result = modDBHelper.DeleteCleanNSCP6( _
                                            "CES_DELETE.DELETE_CLEAN_NSCP_6", _
                                            m_l_RetVal, str_Spaces)
            If m_l_Result <> 0 Then
                Call SetDefaultCursor
                b_Failed = True
                m_str_Msg = "Step 6.2 is failed. Further investigation needs to be done "
                m_str_Msg = m_str_Msg + "before proceed to Step 7."
                lblMsg.Caption = m_str_Msg
                MsgBox m_str_Msg
                lblRecordsQty.Caption = ""
                lblCurrentRecord.Caption = ""
                m_b_InProgress = False
                ProgressBar1.Value = ProgressBar1.Min
                Call MakeButtonsEnabled(True)
                Exit Sub
            End If
            ProgressBar1.Value = ProgressBar1.Value + 1
            If ProgressBar1.Value = ProgressBar1.Max Then
                ProgressBar1.Value = ProgressBar1.Min
            End If
        Next l_Count1
        DoEvents
    Else
        Call SetDefaultCursor
        m_str_Msg = "Please fix all estimates shown, before proceed to Step 7."
        lblMsg.Caption = m_str_Msg
        MsgBox m_str_Msg
        m_b_InProgress = False
        Call MakeButtonsEnabled(True)
        Exit Sub
    End If
    
    ProgressBar1.Value = ProgressBar1.Min
    m_b_6_StepDone = True
    m_str_Msg = "Step 6 is done. You can proceed to Step 7. "
    lblMsg.Caption = m_str_Msg
    lblRecordsQty.Caption = ""
    lblCurrentRecord.Caption = ""
    
    Call SetDefaultCursor
    m_str_Msg = "Before run Step 7,  you should create table NON_STOCK_CODED_PARTS_TEMP "
    m_str_Msg = m_str_Msg + "exact the same as table NON_STOCK_CODED_PARTS."
    MsgBox m_str_Msg
    
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    
    m_b_InProgress = False
    Call MakeButtonsEnabled(True)
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdStep6_Click", Erl
    m_b_InProgress = False
    lblRecordsQty.Caption = ""
    lblCurrentRecord.Caption = ""
    ProgressBar1.Value = ProgressBar1.Min
    Call MakeButtonsEnabled(True)
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    Call SetDefaultCursor
End Sub

Private Sub cmdStep7_Click()
    '7.1. Find all records in the NSC_PARTS_USED table where combination
    '     ORIG_SUPP_NUM + ORIG_SUPPLIER_NAME is duplicated.
    '7.2. Once no duplicate records are found in NSC_PARTS_USED table. For each part
    '     in the NSC_PARTS_USED table, find the corresponded part in the
    '     NON_STOCK_CODED_PARTS table and move it into the NON_STOCK_CODED_PARTS_TEMP
    '     table. Once the part is moved, it is deleted from the NON_STOCK_CODED_PARTS
    '     table.
    
    
    Dim RS As ADODB.Recordset
    Dim RS_1 As ADODB.Recordset
    Dim l_Count As Long
    Dim l_Count1 As Long
    
    On Error GoTo Error_Handler
    
    If m_b_6_StepDone = False Then
        MsgBox "Please run Step 6 first."
        Exit Sub
    End If
    
    m_str_Msg = "Before run Step 7, you should create table NON_STOCK_CODED_PARTS_TEMP "
    m_str_Msg = m_str_Msg + "exact the same as table NON_STOCK_CODED_PARTS. "
    m_str_Msg = m_str_Msg + "Is this table created?"
    m_l_Result = MsgBox(m_str_Msg, vbYesNo + vbExclamation)
    If m_l_Result = vbNo Then
        m_str_Msg = "When NON_STOCK_CODED_PARTS_TEMP table will be created you "
        m_str_Msg = m_str_Msg + "can run Step 7 again."
        MsgBox m_str_Msg
        Exit Sub
    End If
    
    m_b_InProgress = True
    Call MakeButtonsEnabled(False)
    lstCleanNSCPTables.Clear
    lblMsg.Caption = "Step 7. " + m_str_const_BePatient
    lblMsg.Refresh
    
    Call SetWaitCursor
    
    m_l_Duplications = 0
    lblRecFound.Caption = CStr(m_l_Duplications)

    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.GetNSCPClean5("CES_INQUIRY.GET_NSCP_CLEAN_5")
    
    Set RS_1 = New ADODB.Recordset
    Set RS_1 = modDBHelper.GetNSCPClean5("CES_INQUIRY.GET_NSCP_CLEAN_5")
    
    If RS.RecordCount > 0 Then
        lblMsg.Caption = "Step 7.1. " + m_str_const_BePatient
        lblRecordsQty.Caption = CLng(RS.RecordCount)
        lblRecordsQty.Refresh
        ProgressBar1.Value = ProgressBar1.Min
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
            lblCurrentRecord.Caption = CLng(l_Count)
            Me.Refresh
            m_str_OrigSupplierNumber = ""
            If IsNull(RS.Fields("ORIG_SUPP_NUM")) = False Then
                m_str_OrigSupplierNumber = RS.Fields("ORIG_SUPP_NUM")
            End If
            m_str_OrigSupplierName = ""
            If IsNull(RS.Fields("ORIG_SUPPLIER_NAME")) = False Then
                m_str_OrigSupplierName = RS.Fields("ORIG_SUPPLIER_NAME")
            End If
            m_str_Cost = ""
            If IsNull(RS.Fields("COST")) = False Then
                m_str_Cost = CStr(RS.Fields("COST"))
            End If
            m_str_EstimateType = ""
            If IsNull(RS.Fields("LINK_TYPE")) = False Then
                m_str_EstimateType = RS.Fields("LINK_TYPE")
            End If
            m_str_EstimateNumber = ""
            If IsNull(RS.Fields("LINK_CODE")) = False Then
                m_str_EstimateNumber = RS.Fields("LINK_CODE")
            End If
            m_str_PartID = CStr(RS.Fields("ID"))

            RS_1.MoveFirst
            RS_1.Move l_Count ' + 1
            For l_Count1 = l_Count To RS_1.RecordCount - 1
                m_str_OrigSupplierNumber_1 = ""
                If IsNull(RS_1.Fields("ORIG_SUPP_NUM")) = False Then
                    m_str_OrigSupplierNumber_1 = RS_1.Fields("ORIG_SUPP_NUM")
                End If
                m_str_OrigSupplierName_1 = ""
                If IsNull(RS_1.Fields("ORIG_SUPPLIER_NAME")) = False Then
                    m_str_OrigSupplierName_1 = RS_1.Fields("ORIG_SUPPLIER_NAME")
                End If
                m_str_Cost_1 = ""
                If IsNull(RS_1.Fields("COST")) = False Then
                    m_str_Cost_1 = CStr(RS_1.Fields("COST"))
                End If
                m_str_EstimateType_1 = ""
                If IsNull(RS_1.Fields("LINK_TYPE")) = False Then
                    m_str_EstimateType_1 = RS_1.Fields("LINK_TYPE")
                End If
                m_str_EstimateNumber_1 = ""
                If IsNull(RS_1.Fields("LINK_CODE")) = False Then
                    m_str_EstimateNumber_1 = RS_1.Fields("LINK_CODE")
                End If
                m_str_PartID_1 = CStr(RS_1.Fields("ID"))

                If m_str_OrigSupplierNumber = m_str_OrigSupplierNumber_1 And _
                   m_str_OrigSupplierName = m_str_OrigSupplierName_1 And _
                   m_str_PartID <> m_str_PartID_1 Then
                    m_l_Duplications = m_l_Duplications + 1

                    m_str_Msg = "ORIG_SUPPLIER_NUM = "
                    m_str_Msg = m_str_Msg + m_str_OrigSupplierNumber + ". "
                    m_str_Msg = m_str_Msg + "ORIG_SUPPLIER_NAME = "
                    m_str_Msg = m_str_Msg + m_str_OrigSupplierName
                    m_str_Msg = m_str_Msg + ". " + "COST = " + m_str_Cost
                    m_str_Msg = m_str_Msg + ". COST 1 = " + m_str_Cost_1
                    m_str_Msg = m_str_Msg + ". Est. Type = " + m_str_EstimateType
                    m_str_Msg = m_str_Msg + ". Est. Type 1 = " + m_str_EstimateType_1
                    m_str_Msg = m_str_Msg + ". Est. # = " + m_str_EstimateNumber
                    m_str_Msg = m_str_Msg + ". Est. # 1 = " + m_str_EstimateNumber_1
                    m_str_Msg = m_str_Msg + ". ID = " + m_str_PartID
                    m_str_Msg = m_str_Msg + ". Dup. ID = " + m_str_PartID_1

                    lstCleanNSCPTables.AddItem m_str_Msg
                    lstCleanNSCPTables.Refresh

                    lblRecFound.Caption = CStr(m_l_Duplications)
                    lblRecFound.Refresh
                End If
                RS_1.MoveNext
                DoEvents
            Next l_Count1
            RS.MoveNext
            ProgressBar1.Value = ProgressBar1.Value + 1
            If ProgressBar1.Value = ProgressBar1.Max Then
                ProgressBar1.Value = ProgressBar1.Min
            End If
            DoEvents
        Next l_Count
    End If
    
    ProgressBar1.Value = ProgressBar1.Min
    If m_l_Duplications > 0 Then
        Call SetDefaultCursor
        m_str_Msg = "Please fix all estimates shown, before proceed to Step 8."
        lblMsg.Caption = m_str_Msg
        MsgBox m_str_Msg
        m_b_InProgress = False
        Call MakeButtonsEnabled(True)
        Exit Sub
    ElseIf m_l_Duplications = 0 Then
        lblRecFound.Caption = ""
        lstCleanNSCPTables.Clear
        lblMsg.Caption = "Step 7.2. " + m_str_const_BePatient
        'No duplication was found.
        'Delete all data from the NON_STOCK_CODED_PARTS_TEMP table.
        Call SetWaitCursor
        m_l_Result = modDBHelper.DeleteCleanNSCP7( _
                                            "CES_DELETE.DELETE_CLEAN_NSCP_7", _
                                            m_l_RetVal)
        If m_l_Result <> 0 Then
            Call SetDefaultCursor
            m_str_Msg = "Unable delete records from the NON_STOCK_CODED_PARTS_TEMP table."
            lblMsg.Caption = m_str_Msg
            MsgBox m_str_Msg
            m_b_InProgress = False
            Call MakeButtonsEnabled(True)
            Exit Sub
        End If
        
        Set RS = modDBHelper.GetNSCPClean5("CES_INQUIRY.GET_NSCP_CLEAN_5")
        If RS.RecordCount > 0 Then
            lblRecordsQty.Caption = CLng(RS.RecordCount)
            lblRecordsQty.Refresh
            ProgressBar1.Value = ProgressBar1.Min
            For l_Count = 1 To RS.RecordCount
                lblCurrentRecord = CLng(l_Count)
                lblCurrentRecord.Refresh
                If IsNumeric(RS.Fields("ID")) = True Then
                    m_l_PartID = CLng(RS.Fields("ID"))
                    Set RS_1 = modDBHelper.GetNSCPClean6("CES_INQUIRY.GET_NSCP_CLEAN_6", _
                                                         m_l_PartID)
                    If RS_1.RecordCount = 0 Then
                        'Insert record into the NON_STOCK_CODED_PARTS_TEMP table, and
                        'delete this record from the NON_STOCK_CODED_PARTS table.
                        m_l_Result = modDBHelper.UpdateCleanNSCP1( _
                                                            "CES_UPDATE.UPDATE_NSCP_CLEAN_1", _
                                                            m_l_RetVal, _
                                                            m_l_PartID)
                        If m_l_Result <> 0 Then
                            'SP CES_UPDATE.UPDATE_NSCP_CLEAN_1 is failed.
                            '
                            '
                        End If
                    End If
                End If
                ProgressBar1.Value = ProgressBar1.Value + 1
                If ProgressBar1.Value = ProgressBar1.Max Then
                    ProgressBar1.Value = ProgressBar1.Min
                End If
                RS.MoveNext
                DoEvents
            Next l_Count
        End If
    End If
    
    ProgressBar1.Value = ProgressBar1.Min
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    If Not RS_1 Is Nothing Then
        Set RS_1 = Nothing
    End If
    
    lblCurrentRecord.Caption = ""
    lblRecordsQty.Caption = ""
    m_b_7_StepDone = True
    m_str_Msg = "Step 7 is done. You can proceed to Step 8. "
    lblMsg.Caption = m_str_Msg
    MsgBox m_str_Msg
    m_b_InProgress = False
    Call MakeButtonsEnabled(True)
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdStep7_Click", Erl
    m_b_InProgress = False
    ProgressBar1.Value = ProgressBar1.Min
    lblCurrentRecord.Caption = ""
    lblRecordsQty.Caption = ""
    Call MakeButtonsEnabled(True)
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    If Not RS_1 Is Nothing Then
        Set RS_1 = Nothing
    End If
End Sub

Private Sub cmdStep8_Click()
    'Go through each record in the NON_STOCK_CODED_PARTS table. If there are multiple
    'parts with the same ORIG_SUPPLIER_NUM + ORIG_SUPPLIER_NAME, only the first record
    'is copied into the NON_STOCK_CODED_PARTS_TEMP table. If the record is unique, then
    'it is copied straight into the NON_STOCK_CODED_PARTS_TEMP table. After each record
    'is processed it is subsequently deleted from the NON_STOCK_CODED_PARTS table. Once
    'completed, all records from the NON_STOCK_CODED_PARTS_TEMP are moved into the
    'NON_STOCK_CODED_PARTS table. Finally, all records from the NON_STOCK_CODED_PARTS
    'will be deleted.
    
    Dim RS As ADODB.Recordset
    Dim RS_1 As ADODB.Recordset
    Dim l_Count As Long
    
    On Error GoTo Error_Handler
    
    If m_b_7_StepDone = False Then
        MsgBox "Please run Step 7 first."
        Exit Sub
    End If
    m_b_InProgress = True
    Call MakeButtonsEnabled(True)
    lblMsg.Caption = "Step 8. " + m_str_const_BePatient
    lstCleanNSCPTables.Clear
    m_l_Duplications = 0
    lblRecFound.Caption = CStr(m_l_Duplications)
    lblRecFound.Refresh
    
    Call SetWaitCursor
    

    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.GetNSCPClean7("CES_INQUIRY.GET_NSCP_CLEAN_7")
    Set RS_1 = New ADODB.Recordset
    If RS.RecordCount > 0 Then
        lblRecordsQty.Caption = CLng(RS.RecordCount)
        lblRecordsQty.Refresh
        ProgressBar1.Value = ProgressBar1.Min
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
            lblCurrentRecord.Caption = CLng(l_Count)
            lblCurrentRecord.Refresh
            m_str_OrigSupplierNumber = ""
            If IsNull(RS.Fields("ORIG_SUPPLIER_NUM")) = False Then
                m_str_OrigSupplierNumber = RS.Fields("ORIG_SUPPLIER_NUM")
            End If
            m_str_OrigSupplierName = ""
            If IsNull(RS.Fields("ORIG_SUPPLIER_NAME")) = False Then
                m_str_OrigSupplierName = RS.Fields("ORIG_SUPPLIER_NAME")
            End If
            If IsNumeric(RS.Fields("ID")) = True Then
                m_l_PartID = CLng(RS.Fields("ID"))
                Set RS_1 = modDBHelper.GetNSCPClean8("CES_INQUIRY.GET_NSCP_CLEAN_8", _
                                                     m_str_OrigSupplierNumber, _
                                                     m_str_OrigSupplierName)
                If RS_1.RecordCount = 0 Then
                    'Insert record into the NON_STOCK_CODED_PARTS_TEMP table, and
                    'delete this record from the NON_STOCK_CODED_PARTS table.
                    m_l_Result = modDBHelper.UpdateCleanNSCP1( _
                                                    "CES_UPDATE.UPDATE_NSCP_CLEAN_1", _
                                                    m_l_RetVal, _
                                                    m_l_PartID)
                    If m_l_Result <> 0 Then
                        'SP CES_UPDATE.UPDATE_NSCP_CLEAN_1 is failed.
                        '
                        '
                    End If
                End If
            End If
            RS.MoveNext
            ProgressBar1.Value = ProgressBar1.Value + 1
            If ProgressBar1.Value = ProgressBar1.Max Then
                ProgressBar1.Value = ProgressBar1.Min
            End If
            DoEvents
        Next l_Count
    End If

    'Delete all records from the NON_STOCK_CODED_PARTS table.
    'Move all records from the NON_STOCK_CODED_PARTS_TEMP table into the
    'NON_STOCK_CODED_PARTS table.
    'Delete all records from the NON_STOCK_CODED_PARTS_TEMP table.
    m_l_Result = modDBHelper.UpdateCleanNSCP2( _
                                        "CES_UPDATE.UPDATE_NSCP_CLEAN_2", _
                                        m_l_RetVal)
    If m_l_Result <> 0 Then
        ProgressBar1.Value = ProgressBar1.Min
        Call SetDefaultCursor
        m_b_8_StepDone = False
        m_str_Msg = "Updating NON_STOCK_CODED_PARTS table is failed."
        m_str_Msg = m_str_Msg + "Further investigation needs to be done before "
        m_str_Msg = m_str_Msg + "proceed to Step 9."
        lblMsg.Caption = m_str_Msg
        MsgBox m_str_Msg
        
        lblRecordsQty.Caption = ""
        lblCurrentRecord.Caption = ""
        
        m_b_InProgress = False
        Call MakeButtonsEnabled(True)
        
        If Not RS Is Nothing Then
            Set RS = Nothing
        End If
        If Not RS_1 Is Nothing Then
            Set RS_1 = Nothing
        End If
        Exit Sub
    End If

    ProgressBar1.Value = ProgressBar1.Min
    Call SetDefaultCursor
    m_b_8_StepDone = True
    
    lblRecordsQty.Caption = ""
    lblCurrentRecord.Caption = ""
    
    m_b_InProgress = False
    Call MakeButtonsEnabled(True)
    
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    If Not RS_1 Is Nothing Then
        Set RS_1 = Nothing
    End If

    Call FinalChecks

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdStep8_Click", Erl
    m_b_InProgress = False
    lblRecordsQty.Caption = ""
    lblCurrentRecord.Caption = ""
    ProgressBar1.Value = ProgressBar1.Min
    Call MakeButtonsEnabled(True)
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    If Not RS_1 Is Nothing Then
        Set RS_1 = Nothing
    End If
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler
    
    'Set the window style to 'Layered'. Set the opacity of the window.
    Call modMain.SetWindowLayered(Me)

    m_b_1_StepDone = False
    m_b_2_StepDone = False
    m_b_3_StepDone = False
    m_b_4_StepDone = False
    m_b_5_StepDone = False
    m_b_6_StepDone = False
    m_b_7_StepDone = False
    m_b_8_StepDone = False

    Call modMain.SetTopmost(Me, True)

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", Erl
    Call SetDefaultCursor
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler

    If m_b_InProgress = True Then
        Cancel = True
    Else
        Call modMain.ChangeOpasityLayeredForm(Me, Me.Timer1, 255, 0, -5)
        Call SetDefaultCursor
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Timer1_Timer()
    On Error GoTo Error_Handler
    
    Call modMain.ChangeOpasityLayeredForm(Me, Me.Timer1, 0, 255, 5)
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Timer1_Timer", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub MakeButtonsEnabled(ByVal b_Flag As Boolean)
    On Error GoTo Error_Handler
    
    If b_Flag = True Then
        cmdStep1.Enabled = True
        cmdStep2.Enabled = True
        cmdStep3.Enabled = True
        cmdStep4.Enabled = True
        cmdStep5.Enabled = True
        cmdStep6.Enabled = True
        cmdStep7.Enabled = True
        cmdStep8.Enabled = True
        If m_b_1_StepDone = True Then
            cmdStep1.Enabled = False
            cmdStep1.Caption = "Done"
        End If
        If m_b_2_StepDone = True Then
            cmdStep2.Enabled = False
            cmdStep2.Caption = "Done"
        End If
        If m_b_3_StepDone = True Then
            cmdStep3.Enabled = False
            cmdStep3.Caption = "Done"
        End If
        If m_b_4_StepDone = True Then
            cmdStep4.Enabled = False
            cmdStep4.Caption = "Done"
        End If
        If m_b_5_StepDone = True Then
            cmdStep5.Enabled = False
            cmdStep5.Caption = "Done"
        End If
        If m_b_6_StepDone = True Then
            cmdStep6.Enabled = False
            cmdStep6.Caption = "Done"
        End If
        If m_b_7_StepDone = True Then
            cmdStep7.Enabled = False
            cmdStep7.Caption = "Done"
        End If
        If m_b_8_StepDone = True Then
            cmdStep8.Enabled = False
            cmdStep8.Caption = "Done"
        End If
    Else
        cmdStep1.Enabled = False
        cmdStep2.Enabled = False
        cmdStep3.Enabled = False
        cmdStep4.Enabled = False
        cmdStep5.Enabled = False
        cmdStep6.Enabled = False
        cmdStep7.Enabled = False
        cmdStep8.Enabled = False
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Timer1_Timer", g_l_ErrorLineNumber
End Sub

Option Explicit
Private Const SW_SHOWMAXIMIZED As Long = 3
Private m_str_Msg As String
Public m_str_LinkNumber As String
Public m_l_VehicleListID As Long
Public m_var_RowID As Variant

Private Sub UserPermissions()
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Then
        'Menu <View><Add Labour Task> is disabled.
        tbMenu.Buttons(2).ButtonMenus(1).Enabled = False
        'Menu <View><OEM KITS><Add OEM Kit To Vehicle> is disabled.
        tbMenu.Buttons(3).ButtonMenus(1).Enabled = False
        'Menu <View><Archived Database> is disabled.
        tbMenu.Buttons(3).ButtonMenus(4).Enabled = False
        'Menu <View><Archive Estimate>
        tbMenu.Buttons(2).ButtonMenus(2).Enabled = False

        'Menu <View><Modify History>
        tbMenu.Buttons(2).ButtonMenus(2).Enabled = False
        
        'Menu <OEM Kit><ADD OEM KIT TO VEHICLE>
        tbMenu.Buttons(4).ButtonMenus(1).Enabled = False
        
        txtDescription.Enabled = False
        txtVehicleSeriesCode.Enabled = False
        txtNumberOfBuses.Enabled = False
        txtSOPNumber.Enabled = False
        lblLabourOverheadPercent.Visible = False
        txtLabourOverheadPercent.Visible = False
        lblTotalHours.Visible = False
        txtTotalHours.Visible = False
        lblSelectedKitCost.Visible = False
        lblOEMKitPrice.Visible = False
        lblLabourSubtotal.Visible = False
        lblLabourOverheadAmount.Visible = False
        lblLabourTotal.Visible = False
        lblMaterialsTotal.Visible = False
        lblTotalBusCost.Visible = False
        txtSelectedKitCost.Visible = False
        txtOEMKitsTotal.Visible = False
        txtLabourSubtotal.Visible = False
        txtLabourOverheadAmount.Visible = False
        txtLabourTotal.Visible = False
        txtMaterialTotal.Visible = False
        txtTotalVehicleCost.Visible = False
        If grdLabour.Columns.Count > 2 Then
            'Grid "Labour". Columns "Time", "Wrench Time" is invisible.
            grdLabour.Columns("TIME").Visible = False
            grdLabour.Columns("WRENCH TIME").Visible = False
        End If
        'Grid "Materials Cost Centre Totals". Column "Total Cost" is invisible.
        grdMaterialsCostCentreTotals.Columns("TOTAL COST").Visible = False
        lblTaxTotal.Visible = False
        txtTaxTotal.Visible = False
        lblTotalVehicleCostWithTax.Visible = False
        txtTotalVehicleCostWithTax.Visible = False
    ElseIf g_l_AccessLevel = 2 Then
        
        'Menu <View><Add Labour Task> is disabled.
        tbMenu.Buttons(2).ButtonMenus(1).Enabled = False
        'Menu <View><OEM KITS><Add OEM Kit To Vehicle> is disabled.
        tbMenu.Buttons(3).ButtonMenus(1).Enabled = False
        'Menu <View><Archived Database> is disabled.
        tbMenu.Buttons(3).ButtonMenus(4).Enabled = False
        'Menu <View><Archive Estimate>
        tbMenu.Buttons(2).ButtonMenus(2).Enabled = False
        'Menu <View><Modify History>
        tbMenu.Buttons(2).ButtonMenus(2).Enabled = False
        
        'Menu <OEM Kit><ADD OEM KIT TO VEHICLE>
        tbMenu.Buttons(4).ButtonMenus(1).Enabled = False
        
        
        
        
        txtDescription.Enabled = False
        txtVehicleSeriesCode.Enabled = False
        txtLabourOverheadPercent.Enabled = False
        txtNumberOfBuses.Enabled = False
        txtTotalHours.Enabled = False
        txtSOPNumber.Enabled = False
        txtOEMKitsTotal.Enabled = False
        txtSelectedKitCost.Enabled = False
        txtLabourSubtotal.Enabled = False
        txtLabourOverheadAmount.Enabled = False
        txtLabourTotal.Enabled = False
        txtMaterialTotal.Enabled = False
        txtTotalVehicleCost.Enabled = False
    End If
    
    If g_l_AccessLevel < 4 Then
        tbMenu.Buttons(3).ButtonMenus(3).Enabled = False
        lblChangesMadeBy.Visible = False
        cboChangesMadeBy.Visible = False
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "UserPermissions", g_l_ErrorLineNumber
End Sub

'Populates the grids on the form
Private Sub Populate()

    Dim var_MMSStockCode As String
    Dim cur_MMSCost As String
    Dim var_NSCRowID As Variant
    Dim str_OrigSuppNum As String
    Dim str_FileText As String
    Dim FSO As FileSystemObject
    Dim TS As TextStream
    Dim RSNewStock As ADODB.Recordset
    Dim l_RetVal As Long
    Dim l_Result As Long
    Dim dbl_TaxRate As Double
    Dim RS As ADODB.Recordset
    Dim RS2 As ADODB.Recordset
    Dim l_Hours As Long
    Dim l_Minutes As Long
    Dim l_Count As Long
    Dim duplicate As Boolean
    
    On Error GoTo Error_Handler
    
    
    duplicate = False
    'First populate the rebuilt information
    Set RS = New ADODB.Recordset
    
    Set RS = modDBHelper.RetrieveVehicleEstimates("CES_INQUIRY.RETRIEVE_VEHICLE_ESTIMATES")
    
    If RS.RecordCount > 0 Then
        RS.Filter = "VEHICLE_LIST_ID = " + CStr(m_l_VehicleListID)
        txtVehicleSeriesCode.Text = RS.Fields.Item("veh_series_code")
        txtNumberOfBuses.Text = RS.Fields.Item("NUM_OF_VEHICLES")
        txtDescription.Text = RS.Fields.Item("PROJ_DESC")
        txtSOPNumber.Text = RS.Fields.Item("SOPNumber")
    End If
    'm_str_RBNumber = txtRebuiltCode.Text 'used when opening materials page from menu
       
    'Then populate the labour information
    Set RS = modDBHelper.RetrieveMBLabour("CES_INQUIRY.RETRIEVE_MB_LABOUR", _
                                          m_str_LinkNumber, _
                                          "BUS")
                                          
    If RS.RecordCount > 0 Then
        Set grdLabour.DataSource = RS
        RS.MoveFirst
        txtTotalHours.Text = DecimalToMinutes(ColumnTotals(RS, "Time addition"))
        RS.MoveFirst
    Else
        Set grdLabour.DataSource = Nothing
        txtTotalHours.Text = 0
    End If

        'Determine which non stock coded items have since been converted into stock coded
    'items.
    
    'First get the table containing each of the non stock coded items
    Set RS = modDBHelper.RetrieveNSCPUsed("CES_INQUIRY.RETRIEVE_NSCP_USED", _
                                          m_str_LinkNumber, _
                                          "BUS")
        
    'Loop through each of the non stock coded items
    If RS.RecordCount > 0 Then
        RS.MoveFirst
        Set RSNewStock = New ADODB.Recordset
        While Not RS.EOF
            'Get the original supplier number and row id
            str_OrigSuppNum = IIf(IsNull(RS.Fields.Item("SUPPLIER NUMBER").Value), "", RS.Fields.Item("SUPPLIER NUMBER").Value)
            var_NSCRowID = RS.Fields.Item("RowID")
            'Now attempt to get a stock coded part which matches the original supplier
            'number
            Set RSNewStock = modDBHelper.RetrieveSCOrigSupplierNum( _
                                        "CES_INQUIRY.RETRIEVE_SC_ORIG_SUPPLIER_NUM", _
                                        str_OrigSuppNum)
            
           If RSNewStock.RecordCount > 0 Then
                'There is a match
                'Get the MMS Stock Code for the item
                RSNewStock.MoveFirst
                var_MMSStockCode = RSNewStock.Fields.Item("mms_stock_code")
                cur_MMSCost = Round(RSNewStock.Fields.Item("MMS_New_Cost"), 2)
                'Append the text entry to be logged
                str_FileText = str_FileText & Trim(str_OrigSuppNum) & " to " & _
                               Trim(var_MMSStockCode) & Chr(13) & Chr(10)
                               
                'ensure a stockcoded part is not already attached to the estimate
                
                 Set RS2 = New ADODB.Recordset
        
                 Set RS2 = modDBHelper.RetrieveSCPUsed("CES_INQUIRY.RETRIEVE_SCP_USED", _
                                             m_str_LinkNumber, _
                                             "N", _
                                             "BUS")
                    If RS2.RecordCount > 0 Then
                        RS2.MoveFirst
                        For l_Count = 0 To RS2.RecordCount - 1
                            If RS2.Fields.Item("STOCK CODE") = Trim(var_MMSStockCode) Then
                                Call SetDefaultCursor
                                m_str_Msg = "Did not convert Non-Stocked-Coded part to Stocked-Coded-Part since MMS Stock Code"
                                m_str_Msg = m_str_Msg + " " + var_MMSStockCode + " is already used in this estimate"
                                MsgBox m_str_Msg, vbOKOnly Or vbExclamation, "Warning"
                                duplicate = True
                                Exit For
                            End If
                            RS2.MoveNext
                        Next l_Count
                    End If
                    Set RS2 = Nothing
                  
                  
                If duplicate = False Then
                'Transfer the entry to the stock coded make buy
                    l_Result = modDBHelper.TransferPartsUsed( _
                                                        "CES_UPDATE.TRANSFER_PARTS_USED", _
                                                        l_RetVal, _
                                                        var_MMSStockCode, _
                                                        cur_MMSCost, _
                                                        g_str_UserName, _
                                                        var_NSCRowID)
                                                        
                    ' Now if there have been any conversions log them in text file and inform the user
                    If str_FileText <> "" And duplicate = False Then
                        'Set FSO = New FileSystemObject
                        'Set TS = FSO.CreateTextFile("bus.log")
                        'TS.Write ("Vehicle #" & Trim(m_str_LinkNumber) & " Part Conversions:" & _
                                  Chr(13) & Chr(10) & Chr(13) & Chr(10) & _
                                  "Vendor Part Number to Stock Code" & Chr(13) & Chr(10) & _
                                  "--------------------------------" & Chr(13) & Chr(10) & str_FileText)
                        m_str_Msg = "Parts in the Vehicle Estimate have been converted to Stock Coded Parts."
                        m_str_Msg = m_str_Msg + Chr(13) + "Please see the log for details."
                        MsgBox m_str_Msg, vbOKOnly Or vbInformation, "Rebuilt Part Estimate"
                        
                        'The code below was added to prevent a permission error when attempting
                        'to run FSO's CreateTextFile
                        Dim frmNoticeMessage As frmNotice
                        Set frmNoticeMessage = New frmNotice
                        frmNoticeMessage.SetMessage "bus.log", "Vehicle #" & Trim(m_str_LinkNumber) & _
                            " Part Conversions:" & Chr(13) & Chr(10) & Chr(13) & Chr(10) & _
                            "Vendor Part Number to Stock Code" & Chr(13) & Chr(10) & _
                            "--------------------------------" & Chr(13) & Chr(10) & str_FileText
                        frmNoticeMessage.Show vbModal
                        
                        'TS.Close
                        'ShellExecute GetDesktopWindow(), "Open", App.Path & "\bus.log", "", "C:\", 6
                        
                    End If
                End If
            End If
            RSNewStock.Close
            RS.MoveNext
            
        Wend
    End If
    Set RSNewStock = Nothing
            
  

    'Populate the MATERIAL SUMMARY
    
    Set RS = modDBHelper.RetrieveRBPTotalCost2("CES_INQUIRY.RETRIEVE_RBP_TOTAL_COST2", m_str_LinkNumber, "BUS")
              
    If RS.RecordCount > 0 Then
          txtMaterialTotal.Text = Format(ColumnTotals(RS, "TOTAL COST"), "currency")
          RS.MoveFirst
    Else
        txtMaterialTotal.Text = Format(0#, "currency")
    End If
    
    'Set RS = RetrieveAllMaterialSummary("CES_INQUIRY.RETRIEVE_ALL_MATERIAL_SUMMARY")
    If RS.RecordCount > 0 Then
        Set grdMaterialsCostCentreTotals.DataSource = RS
       Else
           Set grdMaterialsCostCentreTotals.DataSource = Nothing
    End If

    Set RS = modDBHelper.RetrieveAllLabourHours("CES_INQUIRY.RETRIEVE_ALL_LABOUR", m_str_LinkNumber, "BUS")
      
    If RS.RecordCount > 0 Then
        txtLabourSubtotal.Text = Format(ColumnTotals(RS, "TOTAL COST"), "currency")
        RS.MoveFirst
        Set grdTotalTime.DataSource = RS
    Else
        txtLabourSubtotal.Text = Format(0#, "currency")
        Set grdTotalTime.DataSource = Nothing
    End If

    txtLabourOverheadPercent = Format(CCur(g_dbl_OverheadFringeValue), "percent")
    'Total each of the sections
    txtLabourOverheadAmount.Text = Format(CCur(txtLabourSubtotal.Text) * _
                                         CCur(g_dbl_OverheadFringeValue), _
                                          "Currency")
    Set RS = modDBHelper.RetrieveOEMKitsAttached("CES_INQUIRY.RETRIEVE_OEMKITS_ATTACHED", _
                                                 m_str_LinkNumber)
   
    If RS.RecordCount > 0 Then
        Set cboOEMKitsList.RowSource = RS
        cboOEMKitsList.ListField = "Part_Number"
        cboOEMKitsList.Text = RS.Fields(0).Value
        RS.MoveFirst
        txtOEMKitsTotal.Text = Format(OEMKitsTotal(RS), "currency")
    Else
        Set cboOEMKitsList.RowSource = Nothing
        cboOEMKitsList.Text = ""
        txtSelectedKitCost.Text = Format(0, "currency")
        txtOEMKitsTotal.Text = Format(0, "currency")
    End If
    
    ' Retrieve the tax rate
    Set RS = modDBHelper.RetrieveCESSettings("CES_INQUIRY.RETRIEVE_CES_SETTI", _
                                             "TAX_RATE")
    If RS.RecordCount > 0 Then
        dbl_TaxRate = CDbl(Replace(RS.Fields("VALUE").Value, ",", "."))
    Else
        dbl_TaxRate = 0
    End If
    Set RS = Nothing
    
    txtLabourTotal.Text = Format(CCur(txtLabourSubtotal.Text) + _
                                 CCur(txtLabourOverheadAmount.Text), _
                                 "Currency")
                                 
    frmBusAddMaterials.PassValues m_str_LinkNumber
    txtMaterialTotal.Text = Format(CCur(txtMaterialTotal.Text) - CCur(txtOEMKitsTotal.Text), "currency")
    'txtMaterialTotal.Text = frmBusAddMaterials.txtTotalMaterialsCost.Text
    txtTotalVehicleCost.Text = Format(CCur(txtLabourTotal.Text) + CCur(txtMaterialTotal.Text) + CCur(txtOEMKitsTotal.Text), "currency")
    txtTaxTotal.Text = Format(dbl_TaxRate * (CCur(txtMaterialTotal) + CCur(txtOEMKitsTotal.Text)), "currency")
    txtTotalVehicleCostWithTax.Text = Format(CCur(txtTaxTotal.Text) + CCur(txtTotalVehicleCost.Text), "currency")
    
    Call FormatColumns
    
    frmViewOEMKitOption.PassValues m_str_LinkNumber
    
    Call PopulateChangesMadeBy
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Populate", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub FormatColumns()
    On Error GoTo Error_Handler
    
     If Not grdLabour.Row Then
        grdLabour.Columns("CC").Width = 500
        'grdLabour.Columns("CC").Visible = False
        grdLabour.Columns("TASK").Width = 1600
        grdLabour.Columns("LABOUR TYPE").Width = 2120
        grdLabour.Columns("USAGE").Width = 620
        grdLabour.Columns("USAGE").Alignment = dbgRight
        grdLabour.Columns("TIME").Width = 600
        grdLabour.Columns("TIME").Alignment = dbgRight
        grdLabour.Columns("WRENCH TIME").Width = 1200
        grdLabour.Columns("WRENCH TIME").Alignment = dbgRight
        grdLabour.Columns("DATE REVISED").Width = 1900 '1725
        grdLabour.Columns("DATE REVISED").Alignment = dbgRight
        grdLabour.Columns("DATE REVISED").NumberFormat = "yyyy-mmm-dd hh:mm AMPM"
        grdLabour.Columns("TIME ADDITION").Visible = False
        grdLabour.Columns("VALUE").Visible = False
        grdLabour.Columns("ROWID").Visible = False
    End If

    If Not grdMaterialsCostCentreTotals.Row Then
        grdMaterialsCostCentreTotals.Columns("CC").Width = 500
        grdMaterialsCostCentreTotals.Columns("CC").Caption = "CC"
        grdMaterialsCostCentreTotals.Columns("TOTAL COST").Alignment = dbgRight
        grdMaterialsCostCentreTotals.Columns("TOTAL COST").NumberFormat = "$#,##0.00;($#,##0.00)"
        grdMaterialsCostCentreTotals.Columns("TOTAL COST").Width = 1400
        grdMaterialsCostCentreTotals.Columns("TAXABLE COST").Visible = False
    End If
          
    If Not grdTotalTime.Row Then
        grdTotalTime.Columns("COST CENTRE").Width = 500
        grdTotalTime.Columns("COST CENTRE").Caption = "CC"
        grdTotalTime.Columns("LABOUR HRS").Width = 1200
        grdTotalTime.Columns("LABOUR HRS").Alignment = dbgRight
        grdTotalTime.Columns("TOTAL COST").Visible = False
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "FormatColumns", g_l_ErrorLineNumber
End Sub

Private Sub cboOEMKitsList_Change()
    Dim str_PartNumber As String
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler

    str_PartNumber = Trim(cboOEMKitsList.Text)
    If str_PartNumber <> "" Then
        Set RS = New ADODB.Recordset
    
        Set RS = modDBHelper.SearchSCPart("CES_INQUIRY.SEARCH_SC_PART", _
                                          str_PartNumber, _
                                          "0", _
                                          "", _
                                          "", _
                                          2)
    
        If RS.RecordCount > 0 Then
            txtSelectedKitCost.Text = Format(RS("PRICE").Value, "currency")
        Else
            Set RS = modDBHelper.SearchOEMKits("CES_INQUIRY.SEARCH_OEM_KITS", _
                                               str_PartNumber, _
                                               " ")
            If RS.RecordCount > 0 Then
                 txtSelectedKitCost.Text = Format(RS("estimated_cost").Value, "currency")
            End If
        End If
    End If

    If Not RS Is Nothing Then
        Set RS = Nothing
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cboOEMKitsList_Change", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Public Sub PassValues(ByVal str_LinkNumber As String, ByVal l_VehicleListID As Long)
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    If Not frmAddOEMKitBusEstimate Is Nothing Then
        Unload frmAddOEMKitBusEstimate
    End If
    
    If Not frmViewOEMKitOption Is Nothing Then
        Unload frmViewOEMKitOption
    End If
    
    If Not frmOEMKitMaterials Is Nothing Then
        Unload frmOEMKitMaterials
    End If
    
    If Not frmOEMKitMaterialsRegistered Is Nothing Then
        Unload frmOEMKitMaterialsRegistered
    End If

    If Not frmViewAllLabour Is Nothing Then
        Unload frmViewAllLabour
    End If
    
    m_str_LinkNumber = str_LinkNumber
    m_l_VehicleListID = l_VehicleListID
        
    Call Populate
    Call UserPermissions
        
    If g_str_UseOverheadFringe = "F" Then
        lblLabourOverheadAmount.Caption = "Fringe Value Total"
    End If
        
    frmBusAddMaterials.txtPart.Text = txtVehicleSeriesCode.Text
    frmAddOEMKitBusEstimate.m_str_Vehicle_number = m_str_LinkNumber
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PassValues", g_l_ErrorLineNumber
End Sub

Public Sub RefreshForm()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    Call Populate
    Call UserPermissions
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "RefreshForm", g_l_ErrorLineNumber
End Sub

Private Sub cmdArchive()
    Dim l_Result As Long
    Dim l_RetVal As Long
    
    On Error GoTo Error_Handler
    m_str_Msg = "Are you sure you want to Archive this Vehicle Estimate?"
    l_Result = MsgBox(m_str_Msg, vbOKCancel Or vbQuestion, "Archive Vehicle Estimate?")
    
    If l_Result = vbOK Then
        Call SetWaitCursor
        ArchVehicleRBParts m_str_LinkNumber
        
        l_Result = modDBHelper.ArchiveBUS("CES_ARCHIVE.ARCHIVE_VEHICLE", _
                                    l_RetVal, _
                                    txtVehicleSeriesCode.Text, _
                                    g_str_UserName, _
                                    m_str_LinkNumber, _
                                    "BUS", _
                                    Trim(txtLabourSubtotal.Text), _
                                    Trim(txtLabourOverheadAmount.Text), _
                                    Trim(txtLabourTotal.Text), _
                                    Trim(txtMaterialTotal.Text), _
                                    Trim(txtTotalVehicleCost.Text), _
                                    Trim(txtTaxTotal.Text), _
                                    Trim(txtTotalVehicleCostWithTax.Text), _
                                    Trim(txtOEMKitsTotal.Text))
        If l_Result = 0 Then
            m_str_Msg = "Archiving Vehicle Estimate " + txtVehicleSeriesCode.Text + " is complete."
            MsgBox m_str_Msg, vbOKOnly Or vbInformation, "Vehicle Estimate Archive"
            Call SetDefaultCursor
        Else
            m_str_Msg = "Archiving Vehicle Estimate = " + txtVehicleSeriesCode.Text + " has failed."
            MsgBox m_str_Msg, vbInformation Or vbOKOnly, "Vehicle Estimate Archive"
            Call SetDefaultCursor
        End If
        
    End If
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdArchive_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub
'Refresh the current vehicle estimate form
Private Sub cmdRefresh_Click()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    Call RefreshForm
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdRefresh_click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor
    
    'Unload the add materials form
    If Not frmBusAddMaterials Is Nothing Then
        Unload frmBusAddMaterials
    End If
    
    'Unload the add oem kit form
    If Not frmAddOEMKitBusEstimate Is Nothing Then
        Unload frmAddOEMKitBusEstimate
    End If
    
    'Unload the view oem kit form
    If Not frmViewOEMKitOption Is Nothing Then
        Unload frmViewOEMKitOption
    End If

    'Unload the registered oem kit form
    If Not frmOEMKitMaterialsRegistered Is Nothing Then
        Unload frmOEMKitMaterialsRegistered
    End If

    'Unload the temp oem kit form
    If Not frmOEMKitMaterials Is Nothing Then
        Unload frmOEMKitMaterials
    End If
    
    'Unload the View All Labour form
    If Not frmViewAllLabour Is Nothing Then
        Unload frmViewAllLabour
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub grdLabour_DblClick()
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not allow user to go further, just exit sub.
        Exit Sub
    End If
    
    'Update the Labour in the Rebuilt Part
    If Not grdLabour.Row Then
        Call SetWaitCursor
        m_var_RowID = grdLabour.Columns("ROWID").Text
        frmAddLabourTask.m_str_LinkNumber = m_str_LinkNumber
        frmAddLabourTask.m_str_PartID = m_var_RowID
        frmAddLabourTask.m_str_AuditReference = CStr(m_l_VehicleListID)
        frmAddLabourTask.m_str_TypeID = "BUS"
        frmAddLabourTask.Show vbModal
        Call RefreshForm
        Call SetDefaultCursor
    End If

    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdLabour_DblClick", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub grdLabour_KeyDown(KeyCode As Integer, Shift As Integer)
    'Delete the Labour from the Rebuilt Part
    Dim str_PartID As String
    Dim l_RetVal As Long
    Dim l_Result As Long
    
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not allow user to go further, just exit sub.
        Exit Sub
    End If
    
    If KeyCode = vbKeyDelete Then
        m_str_Msg = "Are you sure you want to delete this item?"
        l_Result = MsgBox(m_str_Msg, vbOKCancel Or vbQuestion, "Rebuit Part")
        If l_Result = vbOK Then
            Call SetWaitCursor
            str_PartID = grdLabour.Columns("ROWID").Text
            l_Result = modDBHelper.DeleteMBLabour("CES_DELETE.DELETE_MBLABOUR", _
                                                  l_RetVal, _
                                                  str_PartID)
            'Add record to the AUDIT_MODIFY_HISTORY table.
            l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                        "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                        l_RetVal, _
                        "Delete Labour", _
                        CStr(m_l_VehicleListID), _
                        "BUS", _
                        "LABOUR TYPE ---> " + grdLabour.Columns("LABOUR TYPE").Text, _
                        "CC ---> " + grdLabour.Columns("CC").Text, _
                        "TASK ---> " + grdLabour.Columns("TASK").Text, _
                        "USAGE ---> " + grdLabour.Columns("USAGE").Text, _
                        "TIME ---> " + grdLabour.Columns("TIME").Text, _
                        "WRENCH TIME ---> " + grdLabour.Columns("WRENCH TIME").Text, _
                        "DATE REVISED ---> " + grdLabour.Columns("DATE REVISED").Text)
            Call RefreshForm
            Call SetDefaultCursor
        End If
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdLabour_KeyDown", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Public Sub RefreshOEMKits()
    Dim RS As Recordset
    On Error GoTo Error_Handler:
    
    Set RS = modDBHelper.RetrieveOEMKitsAttached("CES_INQUIRY.RETRIEVE_OEMKITS_ATTACHED", _
                                                 m_str_LinkNumber)
   
    If RS.RecordCount > 0 Then
        Set cboOEMKitsList.RowSource = RS
        cboOEMKitsList.ListField = "Part_Number"
        cboOEMKitsList.Text = RS.Fields(0).Value
        RS.MoveFirst
        txtOEMKitsTotal.Text = Format(OEMKitsTotal(RS), "currency")
    Else
        Set cboOEMKitsList.RowSource = Nothing
        cboOEMKitsList.Text = ""
    End If
    
    cboOEMKitsList_Change
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "RefreshOEMKits", g_l_ErrorLineNumber
End Sub

Private Sub tbMenu_ButtonMenuClick(ByVal ButtonMenu As MSComctlLib.ButtonMenu)
    Dim str_Temp As String
    
    On Error GoTo Error_Handler

    ' Act depending on the menu that is clicked
        Select Case ButtonMenu
        Case "Close"
            Unload Me
        Case "Print"
            showVehicleEstimateReport m_str_LinkNumber
        Case "Archive Vehicle"
            cmdArchive
        Case "Add Labour Task"
            frmAddLabourTask.m_str_LinkNumber = m_str_LinkNumber
            frmAddLabourTask.m_str_AuditReference = CStr(m_l_VehicleListID)
            frmAddLabourTask.m_str_TypeID = "BUS"
            frmAddLabourTask.Show vbModal
            'Call RefreshForm
        Case "Material Listing"
            If frmBusAddMaterials.WindowState = 1 Then
                frmBusAddMaterials.WindowState = 0
            End If
            frmBusAddMaterials.m_l_VehicleListID = m_l_VehicleListID
            frmBusAddMaterials.Show
            frmBusAddMaterials.SetFocus
            'Call RefreshForm
        Case "Modify History"
            'Close the Audit form if it is opened.
            If Not frmViewAudit Is Nothing Then
                Unload frmViewAudit
            End If
            str_Temp = " - Vehicle Cost Estimate Number: " + CStr(m_l_VehicleListID)
            frmViewAudit.m_str_EstimateNumber = CStr(m_l_VehicleListID)
            frmViewAudit.m_b_FromAdministration = False
            frmViewAudit.m_str_EstimateType = "BUS"
            frmViewAudit.Caption = frmViewAudit.Caption + str_Temp
            frmViewAudit.Show
        Case "Add OEM Kit to Vehicle"
            If frmAddOEMKitBusEstimate.WindowState = 1 Then
                frmAddOEMKitBusEstimate.WindowState = 0
            End If
            frmAddOEMKitBusEstimate.Show
            frmAddOEMKitBusEstimate.SetFocus
            'Call RefreshForm
        Case "View OEM Kits Attached"
            If frmViewOEMKitOption.WindowState = 1 Then
                frmViewOEMKitOption.WindowState = 0
            End If
            frmViewOEMKitOption.Show
            frmViewOEMKitOption.SetFocus
            'Call RefreshForm
        Case "Archived Database"
            frmArchivedHistory.m_str_LinkCode = m_l_VehicleListID
            frmArchivedHistory.m_str_EstimateType = "BUS"
            frmArchivedHistory.Show
        Case "All Labour"
            frmViewAllLabour.PassValues m_str_LinkNumber, "BUS"
            If frmViewAllLabour.WindowState = 1 Then
                frmViewAllLabour.WindowState = 0
            End If
            frmViewAllLabour.Show
            frmViewAllLabour.SetFocus
        Case "View Bill of Materials (Excel)"
            mnuViewBillOfMaterials_Click
    End Select
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "tbMenu_ButtonMenuClick", g_l_ErrorLineNumber
End Sub

Private Sub PopulateChangesMadeBy()
    Dim l_Count As Long
    Dim str_Temp As String
    Dim RS As ADODB.Recordset

    On Error GoTo Error_Handler

    cboChangesMadeBy.Clear

    Set RS = New ADODB.Recordset
    'Populate cboChangesMadeBy combo-box. Show only 5 recent items.
    Set RS = modDBHelper.RetrieveAudit6( _
                    "CES_INQUIRY.RETRIEVE_AUDIT_6", _
                    m_l_VehicleListID, _
                    "BUS")

    If RS.RecordCount > 0 Then
        RS.MoveFirst
        For l_Count = 0 To RS.RecordCount - 1
            If l_Count = 5 Then
                Exit For
            End If
            str_Temp = Format(RS.Fields.Item("DATE_CHANGED"), "yyyy-mmm-dd hh:mm:ss AMPM")
            str_Temp = CStr(str_Temp)
            str_Temp = str_Temp + " ---> "
            str_Temp = str_Temp + CStr(RS.Fields.Item("USER_NAME"))
            cboChangesMadeBy.AddItem str_Temp
            RS.MoveNext
        Next l_Count
    End If

    If RS.RecordCount > 0 Then
        cboChangesMadeBy.Text = cboChangesMadeBy.List(0)
    End If

    Set RS = Nothing

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateChangesMadeBy", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub



Private Sub mnuViewBillOfMaterials_Click()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.RetrieveCESSettings("CES_INQUIRY.RETRIEVE_CES_SETTI", _
                                             "BILL_OF_MATERIALS_PATH")
    
    If RS.EOF = False Then
        'Open the SOP PDF File using the default PDF viewer
        ShellExecute GetDesktopWindow, _
                     "Open", _
                     RS.Fields.Item("VALUE"), _
                     "", _
                     "C:\", _
                     SW_SHOWMAXIMIZED
    End If
    
    Set RS = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "mnuViewBillOfMaterials_Click", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub
Option Explicit

Public m_str_LinkNumber As String
Public m_l_VehicleListID As Long

Private Sub UserPermissions()
    On Error GoTo Error_Handler

    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        optLoadPart.Value = True
        optEditVehicleEstimate.Visible = False
        optCopyVehicleEstimate.Visible = False
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "userPermissions", g_l_ErrorLineNumber
End Sub

Private Sub cmdContinue_Click()
    On Error GoTo Error_Handler

    Call SetWaitCursor
    
    If optEditVehicleEstimate.Value = True Then
        frmAddVehCostEstimate.m_l_VehicleListID = m_l_VehicleListID
        Unload Me
        frmAddVehCostEstimate.Show vbModal
    ElseIf optLoadPart.Value = True Then
        frmVehCostEstimateMain.PassValues m_str_LinkNumber, m_l_VehicleListID
        Unload Me
        frmVehCostEstimateMain.Caption = "Vehicle Cost Estimate Number " + CStr(m_l_VehicleListID)
        frmVehCostEstimateMain.Show
        If frmVehCostEstimateMain.WindowState = 1 Then
           frmVehCostEstimateMain.WindowState = 0
        End If
        frmVehCostEstimateMain.SetFocus
    ElseIf optCopyVehicleEstimate.Value = True Then
        Unload Me
        frmCopyVehicleEstimate.PassVehicleID m_l_VehicleListID
        frmCopyVehicleEstimate.Show vbModal
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdContinue_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    Call UserPermissions
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Option Explicit

'********************************************************
' frmViewAllLabour: Shows all the labour involved in a
'                   particular estimate including any
'                   rebuilt parts contained in it.
'********************************************************

Private m_str_EstimateNumber As String
Private m_str_EstimateType As String

'********************************************************
' PassValues:   Recieves the values telling the form
'               which estimate to display the labour for.
'               Proceeds to display the appropriate
'               labour.
'********************************************************
Public Sub PassValues(str_EstimateNumber As String, str_EstimateType As String)
    On Error GoTo Error_Handler
          
    'Store the estimate type and number
    m_str_EstimateNumber = str_EstimateNumber
    m_str_EstimateType = str_EstimateType

    'Populates then formats the form
    Call SetWaitCursor
    Call PopulatePage
    Call FormatPage
    Call UserPermissions
    Call SetDefaultCursor
          
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PassValues", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub UserPermissions()
    On Error GoTo Error_Handler

    If g_l_AccessLevel = 1 Then
        'For users with Access Level = 1 all times and dollars are invisible.
        If grdLabour.Columns.Count > 2 Then
            grdLabour.Columns("TIME").Visible = False
            grdLabour.Columns("WRENCH TIME").Visible = False
            grdLabour.Columns("RATE PER HOUR").Visible = False
            grdLabour.Columns("EXTENDED TIME").Visible = False
            cmdPrintDocument.Visible = False
        End If
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "UserPermissions", g_l_ErrorLineNumber
End Sub

'********************************************************
' PopulatePage:   Displays the labour for this estimate
'               and all rebuilt parts contained
'               somewhere in this estimate.
'********************************************************
Private Sub PopulatePage()
    Dim str_Caption As String
    Dim str_Label As String
    Dim RS As ADODB.Recordset
    Dim l_Hours As Long
    Dim l_Minutes As Long
    Dim RSSettings As ADODB.Recordset
    Dim l_Result As Long
    Dim l_RetVal As Long
    
    On Error GoTo Error_Handler

    'Display the appropriate caption and label
    Select Case m_str_EstimateType
        Case "RB"
            str_Caption = "Rebuilt Part"
        Case "MB"
            str_Caption = "Make vs. Buy"
        Case "BUS"
            str_Caption = "Vehicle"
    End Select
    Me.Caption = "All Labour for " & str_Caption & " Estimate " & m_str_EstimateNumber
    

    Set RS = New ADODB.Recordset
'    'Populate the ALL_LABOUR_SUMMARY table
    Set RS = modDBHelper.RetrieveAllLabourHours("CES_INQUIRY.RETRIEVE_ALL_LABOUR", m_str_EstimateNumber, m_str_EstimateType)
   
    Set grdTotalTime.DataSource = RS
    
    Set RS = modDBHelper.RetrieveAllLabourSummary("CES_INQUIRY.RETRIEVE_ALL_LABOUR_SUMMARY")

    'Populate the grdTotalTime grid
    Set grdLabour.DataSource = RS
    
    Set RS = Nothing
    Set RSSettings = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulatePage", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    If Not RSSettings Is Nothing Then
        Set RSSettings = Nothing
    End If
End Sub

'********************************************************
' FormatPage:   Formats the controls on this page.
'********************************************************
Private Sub FormatPage()
    On Error GoTo Error_Handler

    If grdLabour.Columns.Count > 2 Then
        grdLabour.Columns("CC").Width = 500
        grdLabour.Columns("TASK").Width = 2500 '1520
        grdLabour.Columns("LABOUR TYPE").Width = 4000
        grdLabour.Columns("USAGE").Width = 620
        grdLabour.Columns("USAGE").Alignment = dbgRight
        grdLabour.Columns("TIME").Width = 500
        grdLabour.Columns("TIME").Alignment = dbgRight
        grdLabour.Columns("WRENCH TIME").Width = 1280
        grdLabour.Columns("WRENCH TIME").Alignment = dbgRight
        grdLabour.Columns("RATE PER HOUR").Alignment = dbgRight
        grdLabour.Columns("RATE PER HOUR").Width = 1350
        grdLabour.Columns("EXTENDED TIME").Alignment = dbgRight
        grdLabour.Columns("EXTENDED TIME").Width = 1300
        grdLabour.Columns("ESTIMATE TYPE").Visible = False
        grdLabour.Columns("ESTIMATE NUMBER").Visible = False
        grdLabour.Columns("TOTAL COST").Visible = False
    End If
    
    If grdTotalTime.Columns.Count >= 2 Then
        grdTotalTime.Columns("COST CENTRE").Width = 1500
        grdTotalTime.Columns("LABOUR HRS").Width = 1600
        grdTotalTime.Columns("LABOUR HRS").Alignment = dbgRight
        grdTotalTime.Columns("TOTAL COST").Visible = False
    End If
         
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "FormatPage", g_l_ErrorLineNumber
End Sub

Private Sub cmdPrintDocument_Click()
     Dim RS As ADODB.Recordset
     Dim xlApp As Excel.Application
     Dim xlBook As Excel.Workbook
     Dim xlSheet1 As Excel.Worksheet
     Dim xlSheet2 As Excel.Worksheet
     Dim l_Count As Long
     Dim str_Cell As String
     Dim str_Temp As String

    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    Set xlApp = CreateObject("Excel.Application")
    Set xlBook = xlApp.Workbooks.Add
    Set xlSheet1 = xlBook.Worksheets(1)
    Set xlSheet2 = xlBook.Worksheets(2)

    xlApp.ActiveWorkbook.Worksheets("Sheet3").Delete
    
    'Begin "ALL LABOUR" worksheet
    xlSheet1.Activate
    xlSheet1.Range("A1:J1").Font.Bold = True
    xlSheet1.Range("A1:J1").Font.Name = "Arial"
    xlSheet1.Range("A1:J1").Font.Size = 8

    'Set columns' headers
    xlSheet1.Range("A1").Value = "LABOUR TYPE"
    xlSheet1.Range("B1").Value = "CC"
    xlSheet1.Range("C1").Value = "TASK"
    xlSheet1.Range("D1").Value = "USAGE"
    xlSheet1.Range("E1").Value = "TIME"
    xlSheet1.Range("F1").Value = "WRENCH TIME"
    xlSheet1.Range("G1").Value = "RATE PER HOUR"
    xlSheet1.Range("H1").Value = "EXTENDED TIME"
    xlSheet1.Range("I1").Value = "ESTIMATE TYPE"
    xlSheet1.Range("J1").Value = "ESTIMATE NUMBER"

    'Set format for all columns = Text. In this case ESTIMATE NUMBER = 000024
    'will be shown as 000024, not 24
    xlSheet1.Range("A:A").NumberFormat = "@"
    xlSheet1.Range("B:B").NumberFormat = "@"
    xlSheet1.Range("C:C").NumberFormat = "@"
    xlSheet1.Range("D:D").NumberFormat = "@"
    xlSheet1.Range("E:E").NumberFormat = "@"
    xlSheet1.Range("F:F").NumberFormat = "@"
    xlSheet1.Range("G:G").NumberFormat = "@"
    xlSheet1.Range("H:H").NumberFormat = "@"
    xlSheet1.Range("I:I").NumberFormat = "@"
    xlSheet1.Range("J:J").NumberFormat = "@"

    'Set columns' width
    'Column "LABOUR TYPE"
    xlApp.ActiveWorkbook.Worksheets("Sheet1").Columns("A").ColumnWidth = 22
    'Column "CC"
    xlApp.ActiveWorkbook.Worksheets("Sheet1").Columns("B").ColumnWidth = 3
    'Column "TASK"
    xlApp.ActiveWorkbook.Worksheets("Sheet1").Columns("C").ColumnWidth = 22
    'Column "USAGE"
    xlApp.ActiveWorkbook.Worksheets("Sheet1").Columns("D").ColumnWidth = 5
    'Column "TIME"
    xlApp.ActiveWorkbook.Worksheets("Sheet1").Columns("E").ColumnWidth = 6
    'Column "WRENCH TIME"
    xlApp.ActiveWorkbook.Worksheets("Sheet1").Columns("F").ColumnWidth = 6
    'Column "RATE PER HOUR"
    xlApp.ActiveWorkbook.Worksheets("Sheet1").Columns("G").ColumnWidth = 6
    'Column "EXTENDED TIME"
    xlApp.ActiveWorkbook.Worksheets("Sheet1").Columns("H").ColumnWidth = 7
    'Column "ESTIMATE TYPE"
    xlApp.ActiveWorkbook.Worksheets("Sheet1").Columns("I").ColumnWidth = 7
    'Column "ESTIMATE NUMBER"
    xlApp.ActiveWorkbook.Worksheets("Sheet1").Columns("J").ColumnWidth = 7

    'Wrap text in the first row of the "WRENCH TIME" column
    xlSheet1.Range("F1").WrapText = True
    'Wrap text in the first row of the "RATE PER HOUR" column
    xlSheet1.Range("G1").WrapText = True
    'Wrap text in the first row of the "EXTENDED TIME" column
    xlSheet1.Range("H1").WrapText = True
    'Wrap text in the first row of the "ESTIMATE TYPE" column
    xlSheet1.Range("I1").WrapText = True
    'Wrap text in the first row of the "ESTIMATE NUMBER" column
    xlSheet1.Range("J1").WrapText = True

    xlApp.ActiveWorkbook.Worksheets("Sheet1").PageSetup.Orientation = xlLandscape

    If m_str_EstimateType = "RB" Then
        str_Temp = "RB Estimate # : " + m_str_EstimateNumber
    ElseIf m_str_EstimateType = "MB" Then
        str_Temp = "MB Estimate # : " + m_str_EstimateNumber
    ElseIf m_str_EstimateType = "BUS" Then
        str_Temp = "Bus Estimate # : " + m_str_EstimateNumber
    End If

    Set RS = New ADODB.Recordset
    Set RS.DataSource = grdLabour.DataSource
    If RS.RecordCount > 0 Then
        str_Cell = "A2:J" + CStr(RS.RecordCount + 2)
        xlSheet1.Range(str_Cell).Font.Name = "Arial"
        xlSheet1.Range(str_Cell).Font.Size = 7
        'Wrap text in the entire "LABOUR TYPE" column
        xlSheet1.Range("A1:A" + CStr(RS.RecordCount)).WrapText = True
        'Wrap text in the entire "TASK" column
        xlSheet1.Range("C1:C" + CStr(RS.RecordCount)).WrapText = True
        RS.MoveFirst
        For l_Count = 0 To RS.RecordCount - 1
            'Data in the "LABOUR TYPE" column
            str_Cell = "A" + CStr(l_Count + 2)
            xlSheet1.Range(str_Cell).Value = RS.Fields.Item("LABOUR TYPE").Value
            'Data in the "CC" column
            str_Cell = "B" + CStr(l_Count + 2)
            xlSheet1.Range(str_Cell).Value = RS.Fields.Item("CC").Value
            'Data in the "TASK" column
            str_Cell = "C" + CStr(l_Count + 2)
            xlSheet1.Range(str_Cell).Value = RS.Fields.Item("TASK").Value
            'Data in the "USAGE" column
            str_Cell = "D" + CStr(l_Count + 2)
            xlSheet1.Range(str_Cell).Value = RS.Fields.Item("USAGE").Value
            'Data in the "TIME" column
            str_Cell = "E" + CStr(l_Count + 2)
            xlSheet1.Range(str_Cell).Value = RS.Fields.Item("TIME").Value
            'Data in the "WRENCH TIME" column
            str_Cell = "F" + CStr(l_Count + 2)
            xlSheet1.Range(str_Cell).Value = RS.Fields.Item("WRENCH TIME").Value
            'Data in the "RATE PER HOUR" column
            str_Cell = "G" + CStr(l_Count + 2)
            xlSheet1.Range(str_Cell).Value = RS.Fields.Item("RATE PER HOUR").Value
            'Data in the "EXTENDED TIME" column
            str_Cell = "H" + CStr(l_Count + 2)
            xlSheet1.Range(str_Cell).Value = RS.Fields.Item("EXTENDED TIME").Value
            'Data in the "ESTIMATE TYPE" column
            str_Cell = "I" + CStr(l_Count + 2)
            xlSheet1.Range(str_Cell).Value = RS.Fields.Item("ESTIMATE TYPE").Value
            'Data in the "ESTIMATE NUMBER" column
            str_Cell = "J" + CStr(l_Count + 2)
            xlSheet1.Range(str_Cell).Value = RS.Fields.Item("ESTIMATE NUMBER").Value
            RS.MoveNext
        Next l_Count
    End If
    'Set headers and footers information
    xlApp.ActiveWorkbook.Worksheets("Sheet1").PageSetup.LeftHeader = _
                                "&""Arial""&10&B" + str_Temp + "&B"
    xlApp.ActiveWorkbook.Worksheets("Sheet1").PageSetup.CenterHeader = _
                                "&""Arial""&10&B" + "ALL LABOUR" + "&B"
    xlApp.ActiveWorkbook.Worksheets("Sheet1").PageSetup.RightHeader = _
                                "&""Arial""&10&B" + Format(Now, "yyyy-mmm-dd") + "&B"
    xlApp.ActiveWorkbook.Worksheets("Sheet1").PageSetup.RightFooter = _
                                "&""Arial""&10&B Page &P of &N&B"

    'Print first row in all pages
    xlApp.ActiveWorkbook.Worksheets("Sheet1").PageSetup.PrintTitleRows = _
                        xlApp.ActiveWorkbook.Worksheets("Sheet1").Rows(1).Address
    xlApp.ActiveWorkbook.Worksheets("Sheet1").PageSetup.PrintTitleColumns = _
                        xlApp.ActiveWorkbook.Worksheets("Sheet1").Columns("A:J").Address
    
    xlApp.ActiveWorkbook.Worksheets("Sheet1").PageSetup.PrintGridlines = True
    'End "ALL LABOUR" worksheet
    
    'Begin "ALL LABOUR SUMMARY" worksheet
    xlSheet2.Activate
    xlSheet2.Range("A1:B1").Font.Bold = True
    xlSheet2.Range("A1:B1").Font.Name = "Arial"
    xlSheet2.Range("A1:B1").Font.Size = 8
    
    'Set columns' headers
    xlSheet2.Range("A1").Value = "COST CENTRE"
    xlSheet2.Range("B1").Value = "LABOUR HRS"
    
    'Set format for all columns = Text
    xlSheet2.Range("A:A").NumberFormat = "@"
    xlSheet2.Range("B:B").NumberFormat = "@"
    
    'Set columns' width
    'Column "COST CENTRE"
    xlApp.ActiveWorkbook.Worksheets("Sheet2").Columns("A").ColumnWidth = 10
    'Column "LABOUR HRS"
    xlApp.ActiveWorkbook.Worksheets("Sheet2").Columns("B").ColumnWidth = 10
    
    xlApp.ActiveWorkbook.Worksheets("Sheet2").PageSetup.Orientation = xlPortrait

    If m_str_EstimateType = "RB" Then
        str_Temp = "RB Estimate # : " + m_str_EstimateNumber
    ElseIf m_str_EstimateType = "MB" Then
        str_Temp = "MB Estimate # : " + m_str_EstimateNumber
    ElseIf m_str_EstimateType = "BUS" Then
        str_Temp = "Bus Estimate # : " + m_str_EstimateNumber
    End If

    Set RS.DataSource = grdTotalTime.DataSource
    If RS.RecordCount > 0 Then
        str_Cell = "A2:B" + CStr(RS.RecordCount + 2)
        xlSheet2.Range(str_Cell).Font.Name = "Arial"
        xlSheet2.Range(str_Cell).Font.Size = 7
        RS.MoveFirst
        For l_Count = 0 To RS.RecordCount - 1
            'Data in the "COST CENTRE" column
            str_Cell = "A" + CStr(l_Count + 2)
            xlSheet2.Range(str_Cell).Value = RS.Fields.Item("COST CENTRE").Value
            'Data in the "LABOUR HRS" column
            str_Cell = "B" + CStr(l_Count + 2)
            xlSheet2.Range(str_Cell).Value = RS.Fields.Item("LABOUR HRS").Value
            RS.MoveNext
        Next l_Count
    End If
    
    'Set headers and footers information
    xlApp.ActiveWorkbook.Worksheets("Sheet2").PageSetup.LeftHeader = _
                                "&""Arial""&10&B" + str_Temp + "&B"
    xlApp.ActiveWorkbook.Worksheets("Sheet2").PageSetup.CenterHeader = _
                                "&""Arial""&10&B" + "ALL LABOUR SUMMARY" + "&B"
    xlApp.ActiveWorkbook.Worksheets("Sheet2").PageSetup.RightHeader = _
                                "&""Arial""&10&B" + Format(Now, "yyyy-mmm-dd") + "&B"
    xlApp.ActiveWorkbook.Worksheets("Sheet2").PageSetup.RightFooter = _
                                "&""Arial""&10&B Page &P of &N&B"

    'Print first row in all pages
    xlApp.ActiveWorkbook.Worksheets("Sheet2").PageSetup.PrintTitleRows = _
                                xlApp.ActiveWorkbook.Worksheets("Sheet2").Rows(1).Address
    xlApp.ActiveWorkbook.Worksheets("Sheet2").PageSetup.PrintTitleColumns = _
                        xlApp.ActiveWorkbook.Worksheets("Sheet2").Columns("A:B").Address
    
    xlApp.ActiveWorkbook.Worksheets("Sheet2").PageSetup.PrintGridlines = True
    'End "ALL LABOUR SUMMARY" worksheet
    
    xlSheet1.Activate
    
    xlApp.Caption = "ALL LABOUR - for " + g_str_UserName
    xlApp.ActiveWorkbook.Worksheets("Sheet1").Name = "ALL LABOUR"
    xlApp.ActiveWorkbook.Worksheets("Sheet2").Name = "ALL LABOUR SUMMARY"
    xlApp.Visible = True
    
    Set xlSheet1 = Nothing
    Set xlSheet2 = Nothing
    Set xlBook = Nothing
    Set xlApp = Nothing
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdPrintDocument_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    If Not xlSheet1 Is Nothing Then
        Set xlSheet1 = Nothing
    End If
    If Not xlSheet2 Is Nothing Then
        Set xlSheet2 = Nothing
    End If
    If Not xlBook Is Nothing Then
        Set xlBook = Nothing
    End If
    If Not xlApp Is Nothing Then
        Set xlApp = Nothing
    End If
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
          
    Call SetDefaultCursor
          
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub grdLabour_Click()

End Sub
Option Explicit

Public m_str_EstimateNumber As String
Public m_str_EstimateType As String
Public m_b_FromAdministration As Boolean

Private m_str_Msg As String
Private Const m_str_const_RBEstimate As String = "Rebuilt Part Estimate"
Private Const m_str_const_MBEstimate As String = "Make Vs. Buy Estimate"
Private Const m_str_const_VehEstimate As String = "Vehicle Estimate"
Private Const m_str_const_OEMKit As String = "OEM Kit"
Private Const m_str_const_NSCP As String = "Non-Stock Coded Part"

Private Sub calDateFrom_Click()
    On Error GoTo Error_Handler
    
    txtDateFrom.Text = Format(calDateFrom.Value, "yyyy-mmm-dd")
    calDateFrom.Visible = False
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "calDateFrom_Click", g_l_ErrorLineNumber
End Sub

Private Sub calDateTo_Click()
    On Error GoTo Error_Handler
    
    txtDateTo.Text = Format(calDateTo.Value, "yyyy-mmm-dd")
    calDateTo.Visible = False
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "calDateTo_Click", g_l_ErrorLineNumber
End Sub

Private Sub cboEstimateType_Click()
    Dim l_Count As Long
    Dim RS As ADODB.Recordset
'    Dim str_EstimateType As String
    
    On Error GoTo Error_Handler
    
    If optEsimate.Value = True Then
        If Trim(cboEstimateType.Text) = m_str_const_RBEstimate Then
            m_str_EstimateType = "RB"
        ElseIf Trim(cboEstimateType.Text) = m_str_const_MBEstimate Then
            m_str_EstimateType = "MB"
        ElseIf Trim(cboEstimateType.Text) = m_str_const_VehEstimate Then
            m_str_EstimateType = "BUS"
        ElseIf Trim(cboEstimateType.Text) = m_str_const_OEMKit Then
            m_str_EstimateType = "KIT"
        ElseIf Trim(cboEstimateType.Text) = m_str_const_NSCP Then
            m_str_EstimateType = "NSCP"
        End If
        'Based on data in the cboEstimateType combo-box, fill the cboEstimate combo-box.
        Set RS = New ADODB.Recordset
        
        Set RS = modDBHelper.RetrieveAudit3( _
                            "CES_INQUIRY.RETRIEVE_AUDIT_3", _
                            m_str_EstimateType)

        cboEstimate.Clear
        If RS.RecordCount > 0 Then
            RS.MoveFirst
            cboEstimate.AddItem "*"
            For l_Count = 0 To RS.RecordCount - 1
                cboEstimate.AddItem RS.Fields.Item("estimate_number")
                RS.MoveNext
            Next l_Count
        End If
        
        Set RS = Nothing
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cboEstimateType_Click", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub chkAndDate_Click()
    On Error GoTo Error_Handler

    If chkAndDate.Value = 1 Then
        cmdDateFrom.Enabled = True
        cmdDateTo.Enabled = True
    Else
        cmdDateFrom.Enabled = False
        calDateFrom.Visible = False
        cmdDateTo.Enabled = False
        calDateTo.Visible = False
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "chkAndDate_Click", g_l_ErrorLineNumber
End Sub

Private Sub cmdDateFrom_Click()
    On Error GoTo Error_Handler
    
    calDateTo.Visible = False
    calDateFrom.Visible = True
    calDateFrom.Today
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdDateFrom_Click", g_l_ErrorLineNumber
End Sub

Private Sub cmdDateTo_Click()
    On Error GoTo Error_Handler
    
    calDateFrom.Visible = False
    calDateTo.Visible = True
    calDateTo.Today
   
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdDateTo_Click", g_l_ErrorLineNumber
End Sub

Private Sub cmdShow_Click()
    Dim l_Count As Long
    Dim RS As ADODB.Recordset
    Dim b_DateIsChecked As Boolean
'    Dim str_EstimateType As String
    
    On Error GoTo Error_Handler
    
    calDateFrom.Visible = False
    calDateTo.Visible = False
    
    
    If optEsimate.Value = True Then
        If Trim(cboEstimate.Text) = "" Then
            m_str_Msg = "Please provide Estimate."
            MsgBox m_str_Msg
            cboEstimate.SetFocus
            Exit Sub
        End If
    End If
    
    b_DateIsChecked = False
    If chkAndDate.Value = 1 Then
        If IsDate(txtDateFrom.Text) = False Then
            m_str_Msg = "Please provide Date From."
            MsgBox m_str_Msg
            Exit Sub
        End If
        If IsDate(txtDateTo.Text) = False Then
            m_str_Msg = "Please provide Date To."
            MsgBox m_str_Msg
            Exit Sub
        End If
        If CDate(txtDateFrom.Text) >= CDate(txtDateTo.Text) Then
            m_str_Msg = "Date From should be less than Date To."
            MsgBox m_str_Msg
            Exit Sub
        End If
        b_DateIsChecked = True
    End If
    
    Call SetWaitCursor
    
    If Trim(cboEstimateType.Text) = m_str_const_RBEstimate Then
        m_str_EstimateType = "RB"
    ElseIf Trim(cboEstimateType.Text) = m_str_const_MBEstimate Then
        m_str_EstimateType = "MB"
    ElseIf Trim(cboEstimateType.Text) = m_str_const_VehEstimate Then
        m_str_EstimateType = "BUS"
    ElseIf Trim(cboEstimateType.Text) = m_str_const_OEMKit Then
        m_str_EstimateType = "KIT"
    ElseIf Trim(cboEstimateType.Text) = m_str_const_NSCP Then
        m_str_EstimateType = "NSCP"
    End If

    Set RS = New ADODB.Recordset
    
    If optAllEsimate.Value = True Then
        If cboUserName.Text = "ALL USERS" Then
            If b_DateIsChecked = False Then
                Set RS = modDBHelper.RetrieveAudit1( _
                                "CES_INQUIRY.RETRIEVE_AUDIT_1")
            Else
                Set RS = modDBHelper.RetrieveAudit2( _
                                "CES_INQUIRY.RETRIEVE_AUDIT_2", _
                                txtDateFrom.Text, _
                                txtDateTo.Text)
            End If
        Else
            If b_DateIsChecked = False Then
                Set RS = modDBHelper.RetrieveAudit4( _
                                "CES_INQUIRY.RETRIEVE_AUDIT_4", _
                                cboUserName.Text)
            
            Else
                Set RS = modDBHelper.RetrieveAudit5( _
                                "CES_INQUIRY.RETRIEVE_AUDIT_5", _
                                cboUserName.Text, _
                                txtDateFrom.Text, _
                                txtDateTo.Text)
            
            End If
        End If
        Set grdModifyHistory.DataSource = RS
        grdModifyHistory.Columns("ESTIMATE_NUMBER").Visible = True
        grdModifyHistory.Columns("ESTIMATE_TYPE").Visible = True
    Else 'If optAllEsimate.Value = False Then
        If cboUserName.Text = "ALL USERS" Then
            If b_DateIsChecked = False Then
                Set RS = modDBHelper.RetrieveAudit6( _
                                "CES_INQUIRY.RETRIEVE_AUDIT_6", _
                                Trim(cboEstimate.Text), _
                                m_str_EstimateType)
            Else
                Set RS = modDBHelper.RetrieveAudit7( _
                                "CES_INQUIRY.RETRIEVE_AUDIT_7", _
                                Trim(cboEstimate.Text), _
                                m_str_EstimateType, _
                                txtDateFrom.Text, _
                                txtDateTo.Text)
            End If
        Else
            If b_DateIsChecked = False Then
                Set RS = modDBHelper.RetrieveAudit8( _
                                "CES_INQUIRY.RETRIEVE_AUDIT_8", _
                                Trim(cboEstimate.Text), _
                                m_str_EstimateType, _
                                cboUserName.Text)
            Else
                Set RS = modDBHelper.RetrieveAudit9( _
                                "CES_INQUIRY.RETRIEVE_AUDIT_9", _
                                Trim(cboEstimate.Text), _
                                m_str_EstimateType, _
                                cboUserName.Text, _
                                txtDateFrom.Text, _
                                txtDateTo.Text)
            End If
        End If
        Set grdModifyHistory.DataSource = RS
        grdModifyHistory.Columns("ESTIMATE_NUMBER").Visible = False
        grdModifyHistory.Columns("ESTIMATE_TYPE").Visible = False
    End If
                        
    Set RS = Nothing
    grdModifyHistory.Columns("ID").Visible = False
    grdModifyHistory.Columns("DATE_CHANGED").NumberFormat = "yyyy-mmm-dd hh:mm:ss AMPM"
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdShow_Click", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    Call SetDefaultCursor
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    Call PopulateControls
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub PopulateControls()
    Dim l_Count As Long
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    cboEstimateType.AddItem m_str_const_RBEstimate
    cboEstimateType.AddItem m_str_const_VehEstimate
    cboEstimateType.AddItem m_str_const_MBEstimate
    cboEstimateType.AddItem m_str_const_OEMKit
    cboEstimateType.AddItem m_str_const_NSCP
    
    If m_str_EstimateType = "MB" Then
        cboEstimateType.Text = m_str_const_MBEstimate
    ElseIf m_str_EstimateType = "BUS" Then
        cboEstimateType.Text = m_str_const_VehEstimate
    ElseIf m_str_EstimateType = "RB" Then
        cboEstimateType.Text = m_str_const_RBEstimate
    ElseIf m_str_EstimateType = "KIT" Then
        cboEstimateType.Text = m_str_const_OEMKit
    End If

    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.RetrieveAllUsers("CES_INQUIRY.RETRIEVE_ALL_USERS")
    If RS.RecordCount > 0 Then
        RS.MoveFirst
        For l_Count = 0 To RS.RecordCount - 1
            cboUserName.AddItem RS.Fields.Item("USER NAME")
            RS.MoveNext
        Next l_Count
    End If
    Set RS = Nothing
    
    cboUserName.AddItem "ALL USERS"
    cboUserName.Text = "ALL USERS"
    
    Set grdModifyHistory.DataSource = Nothing
    
    If m_b_FromAdministration = False Then
        cboEstimate.Clear
        cboEstimate.AddItem m_str_EstimateNumber
        cboEstimate.Text = m_str_EstimateNumber
        
        Set RS = modDBHelper.RetrieveAudit6( _
                        "CES_INQUIRY.RETRIEVE_AUDIT_6", _
                        Trim(cboEstimate.Text), _
                        m_str_EstimateType)
        
        Set grdModifyHistory.DataSource = RS
        grdModifyHistory.Columns("ID").Visible = False
        grdModifyHistory.Columns("DATE_CHANGED").NumberFormat = "yyyy-mmm-dd hh:mm:ss AMPM"
        grdModifyHistory.Columns("ESTIMATE_NUMBER").Visible = False
        grdModifyHistory.Columns("ESTIMATE_TYPE").Visible = False
        
        optCurrentEsimate.Visible = True
        optCurrentEsimate.Value = True
        optEsimate.Value = False
        optAllEsimate.Value = False
        
        cboEstimateType.Visible = True
        cboEstimate.Visible = True
        cboEstimateType.Enabled = False
        cboEstimate.Enabled = False
    Else
        optCurrentEsimate.Visible = False
        optEsimate.Value = False
        optAllEsimate.Value = True
        Set RS = modDBHelper.RetrieveAudit1( _
                        "CES_INQUIRY.RETRIEVE_AUDIT_1")

        Set grdModifyHistory.DataSource = RS
        grdModifyHistory.Columns("ID").Visible = False
        grdModifyHistory.Columns("DATE_CHANGED").NumberFormat = "yyyy-mmm-dd hh:mm:ss AMPM"
        grdModifyHistory.Columns("ESTIMATE_NUMBER").Visible = True
        grdModifyHistory.Columns("ESTIMATE_TYPE").Visible = True
    End If

    If Not RS Is Nothing Then
        Set RS = Nothing
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateControls", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    Call SetDefaultCursor
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler

    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub grdModifyHistory_Click()

End Sub

Private Sub optAllEsimate_Click()
    On Error GoTo Error_Handler
    
    cboEstimateType.Enabled = False
    cboEstimateType.Visible = False
    cboEstimate.Enabled = False
    cboEstimate.Visible = False

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "optAllEsimate_Click", g_l_ErrorLineNumber
End Sub

Private Sub optCurrentEsimate_Click()
    On Error GoTo Error_Handler

    If optCurrentEsimate = True Then
        cboEstimateType.Visible = True
        cboEstimate.Visible = True
        cboEstimateType.Enabled = True
        If m_str_EstimateType = "MB" Then
            cboEstimateType.Text = m_str_const_MBEstimate
        ElseIf m_str_EstimateType = "BUS" Then
            cboEstimateType.Text = m_str_const_VehEstimate
        ElseIf m_str_EstimateType = "RB" Then
            cboEstimateType.Text = m_str_const_RBEstimate
        ElseIf m_str_EstimateType = "KIT" Then
            cboEstimateType.Text = m_str_const_OEMKit
        End If
        cboEstimateType.Enabled = False
        
        cboEstimate.Enabled = True
        cboEstimate.Clear
        cboEstimate.AddItem m_str_EstimateNumber
        cboEstimate.Text = m_str_EstimateNumber
        cboEstimate.Enabled = False
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "optCurrentEsimate_Click", g_l_ErrorLineNumber
End Sub

Private Sub optEsimate_Click()
    Dim l_Count As Long
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler

    Call SetWaitCursor
    
    If optEsimate.Value = True Then
        cboEstimateType.Visible = True
        cboEstimate.Visible = True
        cboEstimateType.Enabled = True
        cboEstimate.Enabled = True
        If Trim(cboEstimateType.Text) = m_str_const_RBEstimate Then
            m_str_EstimateType = "RB"
        ElseIf Trim(cboEstimateType.Text) = m_str_const_MBEstimate Then
            m_str_EstimateType = "MB"
        ElseIf Trim(cboEstimateType.Text) = m_str_const_VehEstimate Then
            m_str_EstimateType = "BUS"
        ElseIf Trim(cboEstimateType.Text) = m_str_const_OEMKit Then
            m_str_EstimateType = "KIT"
        ElseIf Trim(cboEstimateType.Text) = m_str_const_NSCP Then
            m_str_EstimateType = "NSCP"
        End If
        'Based on data in the cboEstimateType combo-box, fill the cboEstimate combo-box.
        Set RS = New ADODB.Recordset
        
        Set RS = modDBHelper.RetrieveAudit3( _
                            "CES_INQUIRY.RETRIEVE_AUDIT_3", _
                            m_str_EstimateType)
        cboEstimate.Clear
        If RS.RecordCount > 0 Then
            RS.MoveFirst
            cboEstimate.AddItem "*"
            For l_Count = 0 To RS.RecordCount - 1
                cboEstimate.AddItem RS.Fields.Item("estimate_number")
                RS.MoveNext
            Next l_Count
        End If
        
        Set RS = Nothing
    Else
        cboEstimateType.Enabled = False
        cboEstimate.Enabled = False
    End If

    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "optEsimate_Click", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    Call SetDefaultCursor
End Sub
Option Explicit

Private m_str_VehicleNumber As String

Public Sub PassValues(ByVal str_Vehicle_Number As String)
    On Error GoTo Error_Handler
    
    m_str_VehicleNumber = str_Vehicle_Number
    Call RefreshForm
    Call UserPermissions
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PassValues", g_l_ErrorLineNumber
End Sub

Private Sub RefreshForm()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    'Load current vehicle's kit list
    Set RS = modDBHelper.RetrieveOEMKitsAttached("CES_INQUIRY.RETRIEVE_OEMKITS_ATTACHED", _
                                                 m_str_VehicleNumber)
       
    If RS.RecordCount > 0 Then
        Set cboOEMKitsList.RowSource = RS
        cboOEMKitsList.ListField = "Part_Number"
        cboOEMKitsList.Text = RS.Fields(0).Value
        cmdDeleteOEMKit.Enabled = True
    Else
        cboOEMKitsList.Text = ""
        cmdDeleteOEMKit.Enabled = False
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "RefreshForm", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub cmdDeleteOEMKit_Click()
    Dim str_Msg As String
    Dim str_PartID As String
    Dim l_RetVal As Long
    Dim l_Result As Long
    Dim m_str_Msg As String
    On Error GoTo Error_Handler
    
    m_str_Msg = "Are you sure you want to delete this OEM Kit from the Bus Estimate?"
    l_Result = MsgBox(m_str_Msg, vbOKCancel Or vbQuestion, "Delete OEM KIT from Estimate")
    If l_Result = vbOK Then
        Call SetWaitCursor
        l_Result = modDBHelper.DeleteOEMKitAttached("CES_DELETE.DELETE_OEMKIT_ATTACHED", _
                                              l_RetVal, _
                                              m_str_VehicleNumber, _
                                              cboOEMKitsList.Text)
        Call SetDefaultCursor
        MsgBox ("OEM Kit has been deleted from the Bus Estimate")
        'Add record to the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                                    "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                                    l_RetVal, _
                                    "Delete OEM Kit from Vehicle Estimate", _
                                    m_str_VehicleNumber, _
                                    "BUS", _
                                    "OEM Kit Number ---> " + cboOEMKitsList.Text, _
                                    "")
    End If
    
    Call frmVehCostEstimateMain.RefreshForm
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdDeleteOEMKit_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub cmdViewOEMKit_Click()
    Dim RS As Recordset
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    Set RS = modDBHelper.SearchSCPart("CES_INQUIRY.SEARCH_SC_PART", _
                                                  cboOEMKitsList.Text, _
                                                  "0", _
                                                  "", _
                                                  "", _
                                                  2)
                                                  
    If RS.RecordCount > 0 Then
        frmOEMKitMaterialsRegistered.PassValue cboOEMKitsList.Text
        If frmOEMKitMaterialsRegistered.WindowState = 1 Then
            frmOEMKitMaterialsRegistered.WindowState = 0
        End If
        frmOEMKitMaterialsRegistered.Show
        frmOEMKitMaterialsRegistered.SetFocus
    Else
        frmOEMKitMaterials.PassValues cboOEMKitsList.Text, CLng(m_str_VehicleNumber)
        If frmOEMKitMaterials.WindowState = 1 Then
            frmOEMKitMaterials.WindowState = 0
        End If
        frmOEMKitMaterials.Show
        frmOEMKitMaterials.SetFocus
    End If
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdViewOEMKit_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub UserPermissions()
    On Error GoTo Error_Handler

    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        cmdDeleteOEMKit.Visible = False
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "UserPermissions", g_l_ErrorLineNumber
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler

    Call RefreshForm
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor
    'Keep the form open until the Make Buy Estimate Closes
    If UnloadMode = 0 Then
        Cancel = True
        Me.Hide
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub
Option Explicit

Private m_str_Msg As String
Private Const m_str_const_LabourTaskDescription As String = "Labour Task Description"
Private Const m_str_const_LabourType As String = "Labour Type"
Private Const m_str_const_SalaryRates As String = "Salary Rates"
Private Const m_str_const_EnfTransDiff As String = "Engines/Transmissions/Differentials"
Private Const m_str_const_ModVehInfo As String = "Modify Vehicle Info"
Private Const m_str_const_UserAccessAdmin As String = "User Access Administration"
Private Const m_str_const_ChangePassword As String = "Change Password"
Private Const m_str_const_ManListBuses As String = "Manage List of Buses"
Private Const m_str_const_ChangeSettings As String = "Change Settings"

Private Const m_str_const_LabourTaskDescription_Pass As String = "LTD"
Private Const m_str_const_LabourType_Pass As String = "LT"
Private Const m_str_const_SalaryRates_Pass As String = "SR"
Private Const m_str_const_EnfTransDiff_Pass As String = "ETD"
Private Const m_str_const_ModVehInfo_Pass As String = "MVI"
Private Const m_str_const_UserAccessAdmin_Pass As String = "UAA"
Private Const m_str_const_ChangePassword_Pass As String = "CP"
Private Const m_str_const_ManListBuses_Pass As String = "MLB"
Private Const m_str_const_ChangeSettings_Pass As String = "CS"

Private Const m_str_const_AllUsers As String = "ALL USERS"

Private Sub chkAndDate_Click()
    On Error GoTo Error_Handler

    If chkAndDate.Value = 1 Then
        cmdDateFrom.Enabled = True
        cmdDateTo.Enabled = True
    Else
        cmdDateFrom.Enabled = False
        calDateFrom.Visible = False
        cmdDateTo.Enabled = False
        calDateTo.Visible = False
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "chkAndDate_Click", g_l_ErrorLineNumber
End Sub

Private Sub cmdDateFrom_Click()
    On Error GoTo Error_Handler
    
    calDateTo.Visible = False
    calDateFrom.Visible = True
    calDateFrom.Today
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdDateFrom_Click", g_l_ErrorLineNumber
End Sub

Private Sub cmdDateTo_Click()
    On Error GoTo Error_Handler
    
    calDateFrom.Visible = False
    calDateTo.Today
    calDateTo.Visible = True
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdDateTo_Click", g_l_ErrorLineNumber
End Sub

Private Sub cmdShow_Click()
    Dim str_User As String
    Dim str_Settings As String
    Dim str_SettingsPass As String
    Dim b_DateIsChecked As Boolean
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    calDateFrom.Visible = False
    calDateTo.Visible = False
    
    str_SettingsPass = ""
    If optSettings.Value = True Then
        If Trim(cboSettings.Text) = "" Then
            m_str_Msg = "Please choose Settings."
            MsgBox m_str_Msg
            cboSettings.SetFocus
            Exit Sub
        Else
            str_Settings = cboSettings.Text
            If str_Settings = m_str_const_LabourTaskDescription Then
                str_SettingsPass = m_str_const_LabourTaskDescription_Pass
            ElseIf str_Settings = m_str_const_LabourType Then
                str_SettingsPass = m_str_const_LabourType_Pass
            ElseIf str_Settings = m_str_const_SalaryRates Then
                str_SettingsPass = m_str_const_SalaryRates_Pass
            ElseIf str_Settings = m_str_const_EnfTransDiff Then
                str_SettingsPass = m_str_const_EnfTransDiff_Pass
            ElseIf str_Settings = m_str_const_ModVehInfo Then
                str_SettingsPass = m_str_const_ModVehInfo_Pass
            ElseIf str_Settings = m_str_const_UserAccessAdmin Then
                str_SettingsPass = m_str_const_UserAccessAdmin_Pass
            ElseIf str_Settings = m_str_const_ChangePassword Then
                str_SettingsPass = m_str_const_ChangePassword_Pass
            ElseIf str_Settings = m_str_const_ManListBuses Then
                str_SettingsPass = m_str_const_ManListBuses_Pass
            ElseIf str_Settings = m_str_const_ChangeSettings Then
                str_SettingsPass = m_str_const_ChangeSettings_Pass
            End If
        End If
    End If
    
    b_DateIsChecked = False
    If chkAndDate.Value = 1 Then
        If IsDate(txtDateFrom.Text) = False Then
            m_str_Msg = "Please provide Date From."
            MsgBox m_str_Msg
            Exit Sub
        End If
        If IsDate(txtDateTo.Text) = False Then
            m_str_Msg = "Please provide Date To."
            MsgBox m_str_Msg
            Exit Sub
        End If
        If CDate(txtDateFrom.Text) >= CDate(txtDateTo.Text) Then
            m_str_Msg = "Date From should be less than Date To."
            MsgBox m_str_Msg
            Exit Sub
        End If
        b_DateIsChecked = True
    End If
    
    str_User = Trim(cboUserName.Text)
    Set RS = New ADODB.Recordset
    
    If optAllEsimate.Value = True Then
        If str_User = m_str_const_AllUsers Then
            If b_DateIsChecked = False Then
                Set RS = modDBHelper.RetrieveAudit10("CES_INQUIRY.RETRIEVE_AUDIT_10")
            Else
                Set RS = modDBHelper.RetrieveAudit11( _
                                "CES_INQUIRY.RETRIEVE_AUDIT_11", _
                                txtDateFrom, _
                                txtDateTo)
            End If
        Else 'If str_User <> m_str_const_AllUsers Then
            If b_DateIsChecked = False Then
                Set RS = modDBHelper.RetrieveAudit12("CES_INQUIRY.RETRIEVE_AUDIT_12", _
                                                     str_User)
            Else
                Set RS = modDBHelper.RetrieveAudit13( _
                                "CES_INQUIRY.RETRIEVE_AUDIT_13", _
                                str_User, _
                                txtDateFrom, _
                                txtDateTo)
            End If
        End If
        Set grdModifyHistory.DataSource = RS
    Else 'optAllEsimate.Value = False Then
        If str_User = m_str_const_AllUsers Then
            If b_DateIsChecked = False Then
                Set RS = modDBHelper.RetrieveAudit14("CES_INQUIRY.RETRIEVE_AUDIT_14", _
                                                     str_SettingsPass)
            Else
                Set RS = modDBHelper.RetrieveAudit15("CES_INQUIRY.RETRIEVE_AUDIT_15", _
                                                     str_SettingsPass, _
                                                     txtDateFrom, _
                                                     txtDateTo)
            End If
        Else 'If str_User <> m_str_const_AllUsers Then
            If b_DateIsChecked = False Then
                Set RS = modDBHelper.RetrieveAudit16("CES_INQUIRY.RETRIEVE_AUDIT_16", _
                                                     str_SettingsPass, _
                                                     str_User)
            Else
                Set RS = modDBHelper.RetrieveAudit17("CES_INQUIRY.RETRIEVE_AUDIT_17", _
                                                     str_SettingsPass, _
                                                     str_User, _
                                                     txtDateFrom, _
                                                     txtDateTo)
            End If
        End If
        Set grdModifyHistory.DataSource = RS
    End If
    grdModifyHistory.Columns("ID").Visible = False
    grdModifyHistory.Columns("DATE_CHANGED").NumberFormat = "yyyy-mmm-dd hh:mm:ss AMPM"
    grdModifyHistory.Columns("ESTIMATE_NUMBER").Visible = False
    grdModifyHistory.Columns("ESTIMATE_TYPE").Visible = False
    
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdShow_Click", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler

    Call SetWaitCursor
    Call PopulateControls
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub PopulateControls()
    Dim l_Count As Long
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    cboSettings.Clear
    cboSettings.AddItem m_str_const_LabourTaskDescription
    cboSettings.AddItem m_str_const_LabourType
    cboSettings.AddItem m_str_const_SalaryRates
    cboSettings.AddItem m_str_const_EnfTransDiff
    cboSettings.AddItem m_str_const_ModVehInfo
    cboSettings.AddItem m_str_const_UserAccessAdmin
    cboSettings.AddItem m_str_const_ChangePassword
    cboSettings.AddItem m_str_const_ManListBuses
    cboSettings.AddItem m_str_const_ChangeSettings
    
    optSettings.Value = False
    optAllEsimate.Value = True
    cboSettings.Visible = False
    
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.RetrieveAllUsers("CES_INQUIRY.RETRIEVE_ALL_USERS")
    If RS.RecordCount > 0 Then
        RS.MoveFirst
        For l_Count = 0 To RS.RecordCount - 1
            cboUserName.AddItem RS.Fields.Item("USER NAME")
            RS.MoveNext
        Next l_Count
    End If
    
    cboUserName.AddItem m_str_const_AllUsers
    cboUserName.Text = m_str_const_AllUsers
    
    Set grdModifyHistory.DataSource = Nothing

    Set RS = modDBHelper.RetrieveAudit10("CES_INQUIRY.RETRIEVE_AUDIT_10")

    Set grdModifyHistory.DataSource = RS
    grdModifyHistory.Columns("ID").Visible = False
    grdModifyHistory.Columns("DATE_CHANGED").NumberFormat = "yyyy-mmm-dd hh:mm:ss AMPM"
    grdModifyHistory.Columns("ESTIMATE_NUMBER").Visible = False
    grdModifyHistory.Columns("ESTIMATE_TYPE").Visible = False
    
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateControls", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler

    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub grdModifyHistory_Click()

End Sub

Private Sub optAllEsimate_Click()
    On Error GoTo Error_Handler

    cboSettings.Visible = False

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "optAllEsimate_Click", g_l_ErrorLineNumber
End Sub

Private Sub optSettings_Click()
    On Error GoTo Error_Handler

    cboSettings.Visible = True

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "optSettings_Click", g_l_ErrorLineNumber
End Sub

Private Sub calDateFrom_Click()
    On Error GoTo Error_Handler
    
    txtDateFrom.Text = Format(calDateFrom.Value, "yyyy-mmm-dd")
    calDateFrom.Visible = False
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "calDateFrom_Click", g_l_ErrorLineNumber
End Sub

Private Sub calDateTo_Click()
    On Error GoTo Error_Handler
    
    txtDateTo.Text = Format(calDateTo.Value, "yyyy-mmm-dd")
    calDateTo.Visible = False
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "calDateTo_Click", g_l_ErrorLineNumber
End Sub
Option Explicit

Public Sub PopulateForm(ByVal str_StockCode As String, _
                        ByVal str_Description As String, _
                        ByVal str_Keyword As String, _
                        ByVal str_Price As String)
    
    On Error GoTo Error_Handler
    
    'Display the values in the text fields
    lblStockCodeValue.Caption = " " & str_StockCode
    lblDescriptionValue.Caption = " " & str_Description
    lblKeywordValue.Caption = " " & str_Keyword
    lblPriceValue.Caption = " " & str_Price
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateForm", g_l_ErrorLineNumber
End Sub

Private Sub cmdClose_Click()
    On Error GoTo Error_Handler
    
    Unload Me
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdClose_Click", g_l_ErrorLineNumber
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler

    If g_l_AccessLevel = 1 Then
        lblPrice.Visible = False
        lblPriceValue.Visible = False
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Modules :
modMain.bas :
Option Explicit

Private m_str_Msg As String
Public g_Conn As ADODB.Connection
Public g_l_ConnectionType As Long 'TestDB = 1, DevDB = 0
Public g_l_AccessLevel As Long
Public g_str_UserName As String
Public g_str_Password As String
'Next variable will be set in the frmMain, MDIForm_Load(...) sub. Do not change this
'variable in any other places, just use it!!!
Public g_dbl_NonProductiveTimeAdj As Double
'Next value will hold data from the USERS.USE_OVERHEAD_FRINGE field.
Public g_str_UseOverheadFringe As String
'Next variable will hold data:
' a. Or from the CES_SETTINGS.OVERHEAD - if g_str_UseOverheadFringe="O"
' b. Or from the CES_SETTINGS.FRINGE - if g_str_UseOverheadFringe="F"
Public g_dbl_OverheadFringeValue As Double

Public g_str_MSWordDocumentPath As String

Public Const g_const_str_DefaultPassword As String = "12345"

'Next variable will be used for the error-trapping. It will hold line number where
'error(s) happened.
Public g_l_ErrorLineNumber As Long

'All API declarations should be here, adn they should have be a Public.
Public Declare Function ShellExecute Lib "shell32.dll" Alias "ShellExecuteA" ( _
                       ByVal l_Hwnd As Long, _
                       ByVal str_Op As String, _
                       ByVal str_File As String, _
                       ByVal str_Params As String, _
                       ByVal str_Dir As String, _
                       ByVal l_FsShowCmd As Long) As Long
                       
Public Declare Function GetDesktopWindow Lib "user32" () As Long

Public Declare Function SetWindowPos Lib "user32" (ByVal hWnd As Long, _
    ByVal hWndInsertAfter As Long, ByVal X As Long, ByVal Y As Long, _
    ByVal cx As Long, ByVal cy As Long, ByVal uFlags As Long) As Long

' SetWindowPos constants:
Public Const HWND_TOPMOST = -1
Public Const HWND_NOTOPMOST = -2

Public Const SWP_NOSIZE = &H1
Public Const SWP_NOMOVE = &H2
Public Const SWP_NOACTIVATE = &H10

Private Const g_const_LWA_ALPHA = &H2
Private Const g_const_GWL_EXSTYLE = (-20)
Private Const g_const_WS_EX_LAYERED = &H80000

Private Declare Function GetWindowLong Lib "user32" _
    Alias "GetWindowLongA" (ByVal hWnd As Long, _
    ByVal nIndex As Long) As Long

Private Declare Function SetWindowLong Lib "user32" _
    Alias "SetWindowLongA" (ByVal hWnd As Long, _
    ByVal nIndex As Long, ByVal dwNewLong As Long) As Long

Private Declare Function SetLayeredWindowAttributes Lib "user32" _
    (ByVal hWnd As Long, ByVal crKey As Long, _
    ByVal bAlpha As Byte, ByVal dwFlags As Long) As Long

'Mouse Cursor Handles
Private m_l_hDefaultCursor As Long
Private m_l_hWaitCursor As Long

Private Declare Function GetCursor Lib "user32" () As Long
Private Declare Function LoadCursorFromFile Lib "user32" Alias "LoadCursorFromFileA" (ByVal lpFileName As String) As Long
Private Declare Function DestroyCursor Lib "user32" (ByVal hCur As Long) As Long
'Private Declare Function SetSystemCursor Lib "user32" (ByVal hcur As Long, ByVal id As Long) As Long
Private Declare Function SetCursor Lib "user32" (ByVal hCur As Long) As Long

Private Const OCR_NORMAL = 32512

Public Sub SetConnectionToDatabase()
    'Create connection to database. This connection will remain until user closed
    'frmMain form
    Dim str_ConnString As String
    
    On Error GoTo Error_Handler
    
    'Select connection string
    If g_l_ConnectionType = 0 Then
        str_ConnString = "Provider=MSDAORA.1;User ID=ces;Data Source=ces_dev;Persist Security Info=False;password=ces;timeout=60"
    ElseIf g_l_ConnectionType = 1 Then
        'str_ConnString = "Provider=MSDAORA.1;User ID=CES;Data Source=ces_tst;Persist Security Info=False;password=ces"
        str_ConnString = "Provider=MSDAORA.1;User ID=CES;Data Source=ces_dev;Persist Security Info=False;password=ces"
    ElseIf g_l_ConnectionType = 100 Then 'Production Database
        str_ConnString = "Provider=MSDAORA.1;User ID=ces;Data Source=ces_pd;Persist Security Info=False;password=cesprd1210"
        
    End If
    
    Set g_Conn = New ADODB.Connection
    g_Conn.ConnectionString = str_ConnString
    g_Conn.Open

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "SetConnectionToDatabase", g_l_ErrorLineNumber
End Sub

Public Sub SetWaitCursor()
    Dim l_RetVal As Long

    On Error GoTo Error_Handler
    
    l_RetVal = SetCursor(m_l_hWaitCursor)
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "SetWaitCursor", g_l_ErrorLineNumber
End Sub

Public Sub SetDefaultCursor()
    Dim l_RetVal As Long

    On Error GoTo Error_Handler
    
    l_RetVal = SetCursor(m_l_hDefaultCursor)
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "SetDefaultCursor", g_l_ErrorLineNumber
End Sub

Public Sub LoadCursors()
    Dim str_FilePath As String
    
    On Error GoTo Error_Handler
    
    str_FilePath = App.Path + "\hourgla2.ani"
    m_l_hWaitCursor = LoadCursorFromFile(str_FilePath)
    
    str_FilePath = "NORMAL01.CUR"
    m_l_hDefaultCursor = LoadCursorFromFile(str_FilePath)

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "LoadCursors", g_l_ErrorLineNumber
End Sub

Public Sub DestroyCursors()
    On Error GoTo Error_Handler

    DestroyCursor m_l_hDefaultCursor
    DestroyCursor m_l_hWaitCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "DestroyCursors", g_l_ErrorLineNumber
End Sub

'**Function no longer used**

'Checks the value passed in.  If the string is empty then it
'changes it to a '0', if not it keeps it the same.
'
'This is to change any inputted values that are supposed to be numbers
'to a valid number.  So if no number is entered, the value of 0 is assumed

'Public Function ChkCurr(ByVal str_Input As String) As String
'    On Error GoTo Error_Handler
'
'    If str_Input = "" Then
'        ChkCurr = "00"
'    Else
'        ChkCurr = str_Input
'    End If
'
'    Exit Function
'
'Error_Handler:
'    g_l_ErrorLineNumber = Erl()
'    modDBHelper.LogErrorToDB "modMain", "ChkCurr", g_l_ErrorLineNumber
'End Function

Public Function IsValidCurrency(ByVal str_Input As String) As Boolean
    Dim objRE As RegExp
    
    On Error GoTo Error_Handler
    
    Set objRE = New RegExp
    objRE.pattern = "\d+(\.\d{0,2})?"
 
    If objRE.Test(str_Input) Then
        IsValidCurrency = True
    Else
        IsValidCurrency = False
    End If
    Set objRE = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "IsValidCurrency", g_l_ErrorLineNumber
    If Not objRE Is Nothing Then
        Set objRE = Nothing
    End If
End Function

Public Function IsValidLong(ByVal str_Input As String) As Boolean
    On Error GoTo Error_Handler
 
    If CCur(str_Input) = CLng(str_Input) Then
        IsValidLong = True
        Exit Function
    Else
        IsValidLong = False
        Exit Function
    End If
    
    'By default function return FALSE
    IsValidLong = False
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "IsValidLong", g_l_ErrorLineNumber
End Function

'This function opens an email ready to be sent through outlook.
Public Function SendEmail()
    Dim str_ESubject As String
    Dim str_EBody As String
    Dim str_NewFileName As String
    Dim obj_Outlook As Object
    Dim obj_OutlookItem As Object
    
    On Error GoTo Error_Handler
    
    str_ESubject = "Report from the Cost Estimate System"
    'SendTo = ""
    'CCTo = ""
    str_EBody = "Sending report generated from Cost Estimate System " & vbCrLf & vbCrLf
    str_NewFileName = "C:\Program Files\Project Plan\project_listing.rpt"
    
    Set obj_Outlook = CreateObject("Outlook.Application")
    Set obj_OutlookItem = obj_Outlook.CreateItem(0)
    
    obj_OutlookItem.Subject = str_ESubject
    'obj_OutlookItem.To = SendTo
    'obj_OutlookItem.CC = CCTo
    obj_OutlookItem.Body = str_EBody
    obj_OutlookItem.Attachments.Add (str_NewFileName) ' Must be complete path
    obj_OutlookItem.Display
    'obj_OutlookItem.send
    
    Set obj_OutlookItem = Nothing
    Set obj_Outlook = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "SendEmail", g_l_ErrorLineNumber
    If Not obj_OutlookItem Is Nothing Then
        Set obj_OutlookItem = Nothing
    End If
    If Not obj_Outlook Is Nothing Then
        Set obj_Outlook = Nothing
    End If
End Function

'MakeParameter - does typesafe array creation for use with Run* functions
Public Function MakeParameter(ByVal str_Name As String, _
                              ByVal PType As ADODB.DataTypeEnum, _
                              ByVal n_Size As Integer, _
                              ByVal str_Value As String)
    On Error GoTo Error_Handler
    
    MakeParameter = Array(str_Name, PType, n_Size, str_Value)
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "MakeParameter", g_l_ErrorLineNumber
End Function

Public Sub CollectParams(ByRef cmd As Command, ParamArray argparams() As Variant)
    Dim var_Params As Variant
    Dim l_Count As Long
    Dim v As Variant
    
    On Error GoTo Error_Handler
    
    var_Params = argparams(0)
    For l_Count = LBound(var_Params) To UBound(var_Params)
        If UBound(var_Params(l_Count)) = 3 Then
            ' Check for nulls.
            If TypeName(var_Params(l_Count)(3)) = "String" Then
                v = IIf(var_Params(l_Count)(3) = "", Null, var_Params(l_Count)(3))
            ElseIf IsNumeric(var_Params(l_Count)(3)) Then
                v = IIf(var_Params(l_Count)(3) < 0, Null, var_Params(l_Count)(3))
            Else
                v = var_Params(l_Count)(3)
            End If
            cmd.Parameters.Append cmd.CreateParameter(var_Params(l_Count)(0), _
                                                      var_Params(l_Count)(1), _
                                                      adParamInput, _
                                                      var_Params(l_Count)(2), _
                                                      v)
        Else
            cmd.Parameters.Append cmd.CreateParameter(var_Params(l_Count)(0), _
                                                      var_Params(l_Count)(1), _
                                                      adParamInput, _
                                                      var_Params(l_Count)(2), _
                                                      var_Params(l_Count)(3))
        End If
    Next l_Count
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "CollectParams", g_l_ErrorLineNumber
End Sub

'================================================================================
'parseHours = takes in a string with a colon and parses the string by putting the values
'before and after the colon into 2 variables passed into the function
'================================================================================

Public Sub ParseHours(ByVal str_InputValue As String, _
                      ByRef var_Hours As Variant, _
                      ByRef var_Minutes As Variant)
    Dim temp 'temp array to hold values from the split function
    
    On Error GoTo Error_Handler
    
    temp = Split(str_InputValue, ":") 'splits the string into two at the first instance of ":"
    
    'the values before and after the ":" are saved into two variables passed in by reference
    var_Hours = temp(0) '
    
    'if no minutes were entered check and put 0 if empty
    'If UUBound(temp) < 1 Then
    '    minutes = 0
    'Else
    var_Minutes = temp(1)
   ' End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "ParseHours", g_l_ErrorLineNumber
End Sub

Public Sub AddTime(ByRef hours As Variant, ByRef minutes As Variant)
    Dim temp  'temp array to hold values from the split function
    Dim temp2
    
    On Error GoTo Error_Handler
    
    temp2 = hours
    
    'The minutes are passed already added together
    'we must maintain a base of 60, since minutes do not go higher than 59
    
    temp = RTrim(Round(minutes / 60, 3))
    temp = Split(temp, ".")
    temp(1) = (temp(1) / 100) * 60
    
    'add the hours added on
    hours = hours + temp(0) + temp2
    
    'the remainder of the division are the minutes
    minutes = temp(1)
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "AddTime", g_l_ErrorLineNumber
End Sub

Public Function MinutesToDecimal(ByVal minutes As Variant) As String
    Dim temp
    
    On Error GoTo Error_Handler
    
    temp = Round(minutes / 60, 2)
    
    If temp = 0 Then
        temp = 0
    Else
        temp = Split(temp, ".")
        MinutesToDecimal = temp(1)
    End If

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "MinutesToDecimal", g_l_ErrorLineNumber
End Function

'Grabs the size of the an array
Public Function UUBound(ByVal var_PassedArray As Variant) As Long
    Dim l_Size As Long
    
    On Error Resume Next
    
    l_Size = UBound(var_PassedArray) 'throws a subscript out of bounds error
    If Err = 9 Then
        UUBound = -1
    Else
        UUBound = l_Size
    End If
End Function

Public Function DecimalToMinutes(ByVal time As String) As String
    'Convert a number of hours into a time
    Dim hours As Integer
    Dim minutes As Integer
    Dim hours_s As String
    Dim minutes_s As String
    
    On Error GoTo Error_Handler
    
    hours = Int(time)
    minutes = (time - hours) * 60
    hours_s = hours
    minutes_s = minutes
    If Len(minutes_s) = 1 Then minutes_s = "0" & minutes_s
    DecimalToMinutes = hours_s & ":" & minutes_s

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "DecimalToMinutes", g_l_ErrorLineNumber
End Function

Public Function ColumnTotals(ByVal RS As Recordset, ByVal column As String) As Currency
    Dim l_Count As Long
    'Holds the ongoing total
    Dim curr_Temp As Currency
    'grid.Bookmark = grid.FirstRow
    On Error GoTo Error_Handler

    'Set pointer to first row
    If (RS.RecordCount > 0) Then
       
        RS.MoveFirst
        'On the input value 'column',
        Do While Not RS.EOF
            If IsNumeric(RS.Fields(column).Value) Then
                curr_Temp = curr_Temp + CCur(RS.Fields(column).Value)
            End If

            'If last row reached, do not look for last row +1 else error
            'If (l_Count <> (rs.RecordCount - 1)) And _
            '   (l_Count <= (rs.RecordCount - 1)) Then
                    'Get next row's bookmark value
                    'grid.Bookmark = grid.RowBookmark(grid.Row + 1)
                    
            'End If
            RS.MoveNext
        Loop
        'ColumnTotals = Round(curr_Temp, 2) 'round to 2 decimal places
        ColumnTotals = curr_Temp
    End If
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "ColumnTotals", g_l_ErrorLineNumber
End Function

'Totals the cost of all the parts in OEM Kits attached to a specific bus estimate.
'Input is the recordset of oemkits attached.

Public Function OEMKitsTotal(ByVal OEMKitsList As ADODB.Recordset) As Currency
    Dim runningTotal As Currency
    Dim tempRS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    runningTotal = 0
    OEMKitsList.MoveFirst
    
    'loop through all the attached parts
    Do While Not OEMKitsList.EOF
        
        'check to see if the part is stock coded or non stock coded (temp)
        Set tempRS = modDBHelper.SearchSCPart("CES_INQUIRY.SEARCH_SC_PART", _
                                                      OEMKitsList.Fields("part_number").Value, _
                                                      "0", _
                                                      "", _
                                                      "", _
                                                      2)
                                                      
        If tempRS.RecordCount > 0 Then
            runningTotal = runningTotal + tempRS("PRICE").Value
        Else
            Set tempRS = modDBHelper.SearchOEMKits("CES_INQUIRY.SEARCH_OEM_KITS", _
                                               OEMKitsList.Fields("part_number").Value, _
                                               " ")
            If tempRS.RecordCount > 0 Then
                 runningTotal = runningTotal + tempRS("estimated_cost").Value
            End If
            
        End If
        OEMKitsList.MoveNext
    Loop
    
    OEMKitsTotal = runningTotal
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modName", "OEMKitsTotal", g_l_ErrorLineNumber
End Function

Public Function CheckPercent(ByVal str_Percent As String) As Boolean
    Dim l_Length As Long
    Dim l_Counter As Long
    Dim str_Char As String
    Dim l_Index As Long
    Dim dbl_Percent As Double
    Dim str_Temp As String
    
    On Error GoTo Error_Handler

    l_Length = Len(str_Percent)
    'Only digits and dot are alloved in the str_Percent string
    For l_Counter = 1 To l_Length
        str_Char = Mid(str_Percent, l_Counter, 1)
        If str_Char <> "0" And str_Char <> "1" And str_Char <> "2" And _
           str_Char <> "3" And str_Char <> "4" And str_Char <> "5" And _
           str_Char <> "6" And str_Char <> "7" And str_Char <> "8" And _
           str_Char <> "9" And str_Char <> "." Then
            CheckPercent = False
            Exit Function
        End If
    Next l_Counter
 
    str_Temp = str_Percent
    'No more than one dot is allowed in the str_Percent string (i.e. or no dot, or one
    'dot only)
    l_Index = InStr(str_Temp, ".")
    If l_Index > 0 Then
        str_Temp = Mid(str_Temp, l_Index + 1)
        l_Index = InStr(str_Temp, ".")
        If l_Index > 0 Then
            CheckPercent = False
            Exit Function
        End If
    End If
    
    'Percent value can be >=0 and <= 100
    dbl_Percent = CDbl(str_Percent)
    If dbl_Percent < 0 Or dbl_Percent > 100 Then
        CheckPercent = False
        Exit Function
    End If
    
    'By default function return TRUE.
    CheckPercent = True
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "CheckPercent", g_l_ErrorLineNumber
End Function

Public Function ChangeNullToOneSpase(ByVal str_ToChange As Variant) As String
    On Error GoTo Error_Handler

    If IsNull(str_ToChange) = True Then
        ChangeNullToOneSpase = " "
        Exit Function
    Else
        ChangeNullToOneSpase = str_ToChange
        Exit Function
    End If
    
    'By default function returns string with one space character.
    ChangeNullToOneSpase = " "
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "ChangeNullToOneSpase", g_l_ErrorLineNumber
End Function

Public Sub AddLastPartToSubkitA(ByVal str_KitNumberPassed As String, _
                                ByVal str_PartTypePassed As String, _
                                ByVal str_SupplierNumberPassed As String, _
                                ByVal str_SupplierNamePassed As String, _
                                ByVal str_StockCodePassed As String, _
                                ByVal str_QtyPassed As String, _
                                ByVal str_DescriptionPassed As String)
    
    Dim RS As ADODB.Recordset
    Dim l_RetVal As Long
    Dim l_Result As Long
    Dim str_PartType As String
    Dim str_OEMNumber As String
    Dim str_OEM As String
    Dim str_TTCCode As String
    Dim str_QTY As String
    Dim str_RefNumber As String
    Dim str_Description As String
    Dim l_SeqNumber As Long
    Dim l_Count As Long
    Dim str_SubKitLetter As String
    Dim l_InsertedCount As Long

    On Error GoTo Error_Handler

    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.GetSubKits("CES_INQUIRY.GET_SUB_KITS", _
                                    str_KitNumberPassed)

    'Delete all records from the SUB_KITS table where
    'kit_part_number = str_KitNumberPassed
    l_Result = modDBHelper.DeleteSubKits( _
                                "CES_DELETE.DELETE_SUB_KITS", _
                                l_RetVal, _
                                str_KitNumberPassed)

    If RS.RecordCount > 0 Then
        'Find last item under "KIT A"
        l_InsertedCount = 1
        RS.MoveFirst
        If RS.RecordCount > 1 Then
            RS.MoveNext
            For l_Count = 1 To RS.RecordCount
                str_RefNumber = ChangeNullToOneSpase(RS.Fields("REF #"))
                If Left(str_RefNumber, 1) = "A" Then
                    l_InsertedCount = l_InsertedCount + 1
                Else
                    str_SubKitLetter = "A" + CStr(l_InsertedCount)
                    Exit For
                End If
                RS.MoveNext
            Next l_Count
        End If

        'Insert record with "REF #" = "KIT A"
        RS.MoveFirst
        str_PartType = ChangeNullToOneSpase(RS.Fields("PART TYPE"))
        str_OEMNumber = ChangeNullToOneSpase(RS.Fields("OEM #"))
        str_OEM = ChangeNullToOneSpase(RS.Fields("OEM"))
        str_TTCCode = ChangeNullToOneSpase(RS.Fields("TTC CODE"))
        str_QTY = ChangeNullToOneSpase(RS.Fields("QTY"))
        str_RefNumber = ChangeNullToOneSpase(RS.Fields("REF #"))
        str_Description = ChangeNullToOneSpase(RS.Fields("DESCRIPTION"))
        l_SeqNumber = CLng(RS.Fields("SEQUENCE"))
        l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", _
                                            l_RetVal, _
                                            str_KitNumberPassed, _
                                            str_PartType, _
                                            str_OEMNumber, _
                                            str_OEM, _
                                            str_TTCCode, _
                                            str_QTY, _
                                            str_RefNumber, _
                                            str_Description, _
                                            l_SeqNumber)

        If RS.RecordCount > 1 Then
            'Insert all records after "REF #" = "KIT A" and before record with
            '"REF #" = "KIT B"
            RS.MoveNext
            For l_Count = 2 To l_InsertedCount
                str_PartType = ChangeNullToOneSpase(RS.Fields("PART TYPE"))
                str_OEMNumber = ChangeNullToOneSpase(RS.Fields("OEM #"))
                str_OEM = ChangeNullToOneSpase(RS.Fields("OEM"))
                str_TTCCode = ChangeNullToOneSpase(RS.Fields("TTC CODE"))
                str_QTY = ChangeNullToOneSpase(RS.Fields("QTY"))
                str_RefNumber = ChangeNullToOneSpase(RS.Fields("REF #"))
                str_Description = ChangeNullToOneSpase(RS.Fields("DESCRIPTION"))
                l_SeqNumber = CLng(RS.Fields("SEQUENCE"))
                l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", _
                                                    l_RetVal, _
                                                    str_KitNumberPassed, _
                                                    str_PartType, _
                                                    str_OEMNumber, _
                                                    str_OEM, _
                                                    str_TTCCode, _
                                                    str_QTY, _
                                                    str_RefNumber, _
                                                    str_Description, _
                                                    l_SeqNumber)

                RS.MoveNext
            Next l_Count

            'Insert a new record.
            l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", _
                                                l_RetVal, _
                                                str_KitNumberPassed, _
                                                str_PartTypePassed, _
                                                str_SupplierNumberPassed, _
                                                str_SupplierNamePassed, _
                                                str_StockCodePassed, _
                                                str_QtyPassed, _
                                                str_SubKitLetter, _
                                                str_DescriptionPassed, _
                                                l_Count)

            'Insert rest of records (from the record with "REF #" = "KIT B").
            'Data is the same, just increase "SEQUENMCE" field by one
            RS.MoveFirst
            RS.Move l_InsertedCount
            For l_Count = l_InsertedCount + 1 To RS.RecordCount
                str_PartType = ChangeNullToOneSpase(RS.Fields("PART TYPE"))
                str_OEMNumber = ChangeNullToOneSpase(RS.Fields("OEM #"))
                str_OEM = ChangeNullToOneSpase(RS.Fields("OEM"))
                str_TTCCode = ChangeNullToOneSpase(RS.Fields("TTC CODE"))
                str_QTY = ChangeNullToOneSpase(RS.Fields("QTY"))
                str_RefNumber = ChangeNullToOneSpase(RS.Fields("REF #"))
                str_Description = ChangeNullToOneSpase(RS.Fields("DESCRIPTION"))
                l_SeqNumber = CLng(RS.Fields("SEQUENCE"))
                l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", _
                                                    l_RetVal, _
                                                    str_KitNumberPassed, _
                                                    str_PartType, _
                                                    str_OEMNumber, _
                                                    str_OEM, _
                                                    str_TTCCode, _
                                                    str_QTY, _
                                                    str_RefNumber, _
                                                    str_Description, _
                                                    l_Count + 1)

                RS.MoveNext
            Next l_Count
        End If
    End If

    If Not RS Is Nothing Then
        Set RS = Nothing
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "AddLastPartToSubkitA", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Public Sub SetWindowLayered(ByVal frm_PassedForm As Form)
    Dim l_Ret As Long
    
    On Error GoTo Error_Handler
    
    'Set the window style to 'Layered'
    l_Ret = modMain.GetWindowLong(frm_PassedForm.hWnd, modMain.g_const_GWL_EXSTYLE)
    l_Ret = l_Ret Or modMain.g_const_WS_EX_LAYERED
    SetWindowLong frm_PassedForm.hWnd, g_const_GWL_EXSTYLE, l_Ret
    'Set the opacity of the layered window to 0 - form became invisible.
    'In Timer1 we will set form opaque.
    SetLayeredWindowAttributes frm_PassedForm.hWnd, 0, 0, g_const_LWA_ALPHA

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "SetWindowLayered", g_l_ErrorLineNumber
End Sub

Public Sub ChangeOpasityLayeredForm(ByVal frm_PassedForm As Form, ByVal tmrTimer As Control, _
                            ByVal l_From As Long, ByVal l_To As Long, ByVal l_Step As Long)
    Dim l_Count As Long
    
    On Error GoTo Error_Handler
    
    For l_Count = l_From To l_To Step l_Step
        SetLayeredWindowAttributes frm_PassedForm.hWnd, 0, CByte(l_Count), 2
    Next l_Count
    tmrTimer.Interval = 0

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "CloseLayeredForm", g_l_ErrorLineNumber
End Sub

Public Sub SetTopmost(Form As Form, ByVal Topmost As Boolean)
    Dim hWndInsertAfter As Long
    
    If Topmost Then
        hWndInsertAfter = HWND_TOPMOST
    Else
        hWndInsertAfter = HWND_NOTOPMOST
    End If
    
    SetWindowPos Form.hWnd, hWndInsertAfter, 0, 0, 0, 0, _
        SWP_NOSIZE Or SWP_NOMOVE Or SWP_NOACTIVATE
End Sub


'================================================================================
'
'================================================================================

Public Sub ArchRBPSubsets(ByVal RBNumber As String)
    On Error GoTo Error_Handler
    Dim RS As ADODB.Recordset
    Dim formobject As Object
    Set RS = New ADODB.Recordset
    'Get RB part details
    Set RS = modDBHelper.SearchRBPart("CES_INQUIRY.SEARCH_RBPART", _
                                              RBNumber, _
                                              Val(""), _
                                              "", _
                                              "", _
                                              CLng(2))
    'Input RB part details into RB form
    If RS.RecordCount > 0 Then
    Set formobject = New frmRebuiltPartsMain
    formobject.PassValues RS.Fields.Item("MMS STOCK CODE"), RS.Fields.Item("REBUILT NUMBER"), RS.Fields.Item("ROWID")
    formobject.RefreshForm
    'Archive RB part
    formobject.Archive_RB True
    
    Set formobject = Nothing
    End If
    
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "ArchRBPSubsets", g_l_ErrorLineNumber
End Sub
'================================================================================
'
'================================================================================

'Public Sub ArchRBPSubsetsVeh(ByVal RBNumber As String)
    'On Error GoTo Error_Handler
    'Dim RS As ADODB.Recordset
 
   ' Set RS = New ADODB.Recordset
    'Get RB part details
    'Set RS = modDBHelper.SearchRBPart("CES_INQUIRY.SEARCH_RBPART", _
                                              RBNumber, _
                                              Val(""), _
                                              "", _
                                              "", _
                                              CLng(2))
    'Input RB part details into RB form
    'MsgBox RBNumber, vbOKOnly, "Testing"
    'If RS.RecordCount > 0 Then

    'frmRebuiltPartsMain.PassValues RS.Fields.Item("MMS STOCK CODE"), RS.Fields.Item("REBUILT NUMBER"), RS.Fields.Item("ROWID")
   ' frmRebuiltPartsMain.RefreshForm
    'Archive RB part
    'frmRebuiltPartsMain.cmdArchive_Click
   ' Else
  '  End If
    
    
 '   Exit Sub
'Error_Handler:
  '  g_l_ErrorLineNumber = Erl()
 '   modDBHelper.LogErrorToDB "modMain", "ArchRBPSubsets", g_l_ErrorLineNumber
'End Sub


'================================================================================
'
'================================================================================

Public Sub ArchVehicleRBParts(ByVal LinkNumber As String)
    On Error GoTo Error_Handler
    Dim RSV As ADODB.Recordset
    Set RSV = New ADODB.Recordset
    Set RSV = modDBHelper.RetrieveRBPUsed("CES_INQUIRY.RETRIEVE_RBP_USED", _
                                         LinkNumber, _
                                         "BUS")
    If RSV.RecordCount > 0 Then
        Do While RSV.EOF = False
        'Calls up details and Archives
        ArchRBPSubsets RSV.Fields.Item("REBUILT NUMBER")
        RSV.MoveNext
        Loop
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "ArchVehicleRBParts", g_l_ErrorLineNumber
End Sub
Class Modules :
clsDb.cls :
Option Explicit

Private Const m_l_const_Reconnect As Long = 10
'Private m_str_const_ConnString As String
Private m_Cmd As ADODB.Command
Private m_RS As ADODB.Recordset
Private m_str_Msg As String

'Public Sub checkTypeConnection()
'    On Error GoTo Error_Handler
'
'    If g_l_ConnectionType = 0 Then
'        m_str_const_ConnString = "Provider=MSDAORA.1;User ID=ces;Data Source=ces_dev;Persist Security Info=False;password=ces;timeout=60"
'    ElseIf g_l_ConnectionType = 1 Then
'        m_str_const_ConnString = "Provider=MSDAORA.1;User ID=ces;Data Source=ces_tst;Persist Security Info=False;password=ces;timeout=60"
'    ElseIf g_l_ConnectionType = 100 Then 'Production Database
'        m_str_const_ConnString = "Provider=MSDAORA.1;User ID=ces;Data Source=ces_pd;Persist Security Info=False;password=cesprd1210;Timeout=0"
'    End If
'
'    Exit Sub
'Error_Handler:
'    MsgBox "Can not retrieve Connection String."
'End Sub

'Returns a long after running an Oracle stored procedure after taking in the procedure
'name and the parameters.
Public Function RunFNReturnLong(ByVal str_SPName As String, _
                                ByRef l_RetVal As Long, _
                                ParamArray params() As Variant) As Long
    Dim l_Count As Long
    
    On Error GoTo Error_Handler
    
    l_Count = 1
    
'    checkTypeConnection
    'm_Cmd.CommandTimeout = 0
L1:    m_Cmd.ActiveConnection = g_Conn
    m_Cmd.CommandText = str_SPName
    m_Cmd.CommandType = adCmdStoredProc
    m_Cmd.Parameters.Append m_Cmd.CreateParameter(, adInteger, adParamReturnValue)
    CollectParams m_Cmd, params
    'Assume the last parameter is outgoing and named @retval
    m_Cmd.Parameters.Append m_Cmd.CreateParameter("@outval", adInteger, adParamOutput, 4)
    
    'Execute without a resulting recordset and pull out the "return value" parameter
    m_Cmd.Execute , , ADODB.adExecuteNoRecords
    RunFNReturnLong = m_Cmd.Parameters("@outval").Value
    l_RetVal = CLng(m_Cmd.Parameters(0).Value)
    
      
    Set m_Cmd.ActiveConnection = Nothing
    Set m_Cmd = Nothing
    
    Exit Function
    
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "clsDB", "RunFNReturnLong", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If g_Conn Is Nothing Then
        Call modMain.SetConnectionToDatabase
    End If
    If m_Cmd.ActiveConnection Is Nothing Or m_Cmd Is Nothing Then
        'Try to reconnect to database
        If l_Count < m_l_const_Reconnect Then
           Set m_Cmd.ActiveConnection = Nothing
            Set m_Cmd = Nothing
            Set m_Cmd = New ADODB.Command
            l_Count = l_Count + 1
            GoTo L1
        Else
            'No connection to database.
            m_str_Msg = "A critical network error has occured. Please call the Service "
            m_str_Msg = m_str_Msg + "Desc at 4357 to report this error."
            MsgBox m_str_Msg, vbCritical
            End
        End If
    End If
    'Close objects if they are alive
    If Not m_Cmd Is Nothing Then
        Set m_Cmd = Nothing
    End If
End Function

'Returns a long after running an Oracle stored procedure after taking in the procedure
'name and the parameters.
Public Function RunFNReturnNumber(ByVal str_SPName As String, _
                                ByRef l_RetVal As Long, _
                                ParamArray params() As Variant) As Currency
    Dim l_Count As Long
    
    On Error GoTo Error_Handler
    
'    checkTypeConnection
    'm_Cmd.CommandTimeout = 0
L2:    m_Cmd.ActiveConnection = g_Conn
    m_Cmd.CommandText = str_SPName
     
    m_Cmd.CommandType = adCmdStoredProc
    m_Cmd.Parameters.Append m_Cmd.CreateParameter(, adInteger, adParamReturnValue)
    CollectParams m_Cmd, params
    'Assume the last parameter is outgoing and named @retval
    m_Cmd.Parameters.Append m_Cmd.CreateParameter("@outval", adNumeric, adParamOutput, 4)
    
    'Execute without a resulting recordset and pull out the "return value" parameter
    m_Cmd.Execute , , ADODB.adExecuteNoRecords
    RunFNReturnNumber = m_Cmd.Parameters("@outval").Value
    l_RetVal = CLng(m_Cmd.Parameters(0).Value)
      
    Set m_Cmd.ActiveConnection = Nothing
    Set m_Cmd = Nothing
    
    Exit Function
    
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "clsDB", "RunFNReturnNumber", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If g_Conn Is Nothing Then
        Call modMain.SetConnectionToDatabase
    End If
    If m_Cmd.ActiveConnection Is Nothing Or m_Cmd Is Nothing Then
        'Try to reconnect to database
        If l_Count < m_l_const_Reconnect Then
            Set m_Cmd.ActiveConnection = Nothing
            Set m_Cmd = Nothing
            Set m_Cmd = New ADODB.Command
            l_Count = l_Count + 1
            GoTo L2
        Else
            'No connection to database.
            m_str_Msg = "A critical network error has occured. Please call the Service "
            m_str_Msg = m_str_Msg + "Desc at 4357 to report this error."
            MsgBox m_str_Msg, vbCritical
            End
        End If
    End If
    'Close objects if they are alive
    If Not m_Cmd Is Nothing Then
        Set m_Cmd = Nothing
    End If
End Function

'Returns a recordset after running an Oracle stored procedure after taking in the procedure name and
'the parameters.
Public Function RunSPReturnRS(ByVal str_SPName As String, _
                              ParamArray params() As Variant) As ADODB.Recordset
    
    Dim l_Count As Long
    
    On Error GoTo Error_Handler
    
    Set m_RS = New Recordset
    
'    checkTypeConnection
    'm_Cmd.CommandTimeout = 0
L3:    m_Cmd.ActiveConnection = g_Conn
    m_Cmd.CommandText = str_SPName
    m_Cmd.CommandType = adCmdStoredProc
    
    CollectParams m_Cmd, params
    
    'Execute the query for readonly
    m_RS.CursorLocation = adUseClient
    m_RS.Open m_Cmd, , adOpenForwardOnly, adLockReadOnly
'''''    m_RS.Open m_Cmd, , adOpenKeyset, adLockOptimistic
    
    Set RunSPReturnRS = m_RS
    
    Set m_RS.ActiveConnection = Nothing
    Set m_RS = Nothing
    Set m_Cmd.ActiveConnection = Nothing
    Set m_Cmd = Nothing
    
    Exit Function
    
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "clsDB", "RunSPReturnRS", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If g_Conn Is Nothing Then
        Call modMain.SetConnectionToDatabase
    End If
    If m_Cmd.ActiveConnection Is Nothing Or m_Cmd Is Nothing Then
        'Try to reconnect to database
        If l_Count < m_l_const_Reconnect Then
            Set m_Cmd.ActiveConnection = Nothing
            Set m_Cmd = Nothing
            Set m_Cmd = New ADODB.Command
            Set m_RS = Nothing
            Set m_RS = New Recordset
            l_Count = l_Count + 1
            GoTo L3
        Else
            'No connection to database.
            m_str_Msg = "A critical network error has occured. Please call the Service "
            m_str_Msg = m_str_Msg + "Desc at 4357 to report this error."
            MsgBox m_str_Msg, vbCritical
            End
        End If
    End If
    
    'Close objects if they are alive
    If Not m_RS Is Nothing Then
        Set m_RS = Nothing
    End If

    If Not m_Cmd Is Nothing Then
        Set m_Cmd = Nothing
    End If
End Function

Private Sub Class_Initialize()
    'Create only Connection and Command objects here. All properties will be set up in
    'the corresponded functions.
    Set m_Cmd = New ADODB.Command
End Sub

Private Sub Class_Terminate()
    'Close only Connection and Command objects here.
    If Not m_Cmd Is Nothing Then
        Set m_Cmd = Nothing
    End If
End Sub
clsEdge.cls :
' Represents an edge in a directed graph

Option Explicit

' Member variables
Private m_StartingVertex As clsVertex
Private m_EndingVertex As clsVertex
Private m_l_EdgeType As Long

' Stores the starting vertex that this edge is incident with
Public Property Get StartingVertex() As clsVertex
    Set StartingVertex = m_StartingVertex
End Property

Public Property Let StartingVertex(ByVal NewValue As clsVertex)
    Set m_StartingVertex = NewValue
End Property

' Stores the ending vertex that this edge is incident with
Public Property Get EndingVertex() As clsVertex
    Set EndingVertex = m_EndingVertex
End Property

Public Property Let EndingVertex(ByVal NewValue As clsVertex)
    Set m_EndingVertex = NewValue
End Property

' Stores the type of edge as calculated by a depth first search
' Use constants NONE, TREE, FRONT, BACK, CROSS
Public Property Get EdgeType() As Long
    EdgeType = m_l_EdgeType
End Property

Public Property Let EdgeType(ByVal NewValue As Long)
    m_l_EdgeType = NewValue
End Property

' Initialize instance variables
Private Sub Class_Initialize()

End Sub

' Terminate instance variables
Private Sub Class_Terminate()
    Set m_StartingVertex = Nothing
    Set m_EndingVertex = Nothing
End Sub
clsGraph.cls :
' Represents a directed graph

Option Explicit

' Constants used to represent vertex colours
Private Const WHITE As Long = 0
Private Const GREY As Long = 1
Private Const BLACK As Long = 2
 
' Constants used to represent edge labelling
Private Const NONE As Long = -1
Private Const TREE As Long = 0
Private Const FRONT As Long = 1
Private Const BACK As Long = 2
Private Const CROSS As Long = 3

' Store the list of vertices
Private m_c_VertexList As Collection

' Stores the list of edges
Private m_c_EdgeList As Collection

' Stores the current time
Private m_l_Time As Long

' Initializes all instance members of the class
Private Sub Class_Initialize()
    Set m_c_VertexList = New Collection
    Set m_c_EdgeList = New Collection
End Sub

' Terminates all instance members of the class
Private Sub Class_Terminate()
    Set m_c_VertexList = Nothing
    Set m_c_EdgeList = Nothing
End Sub

' Adds a new vertex to the graph
Public Sub AddVertex(ID As String)
    Dim Vertex As clsVertex
    
    On Error GoTo Error_Handler
    
    Set Vertex = New clsVertex
    Vertex.ID = ID
    m_c_VertexList.Add Vertex, ID
    Set Vertex = Nothing
    Exit Sub
Error_Handler:
    Set Vertex = Nothing
    modDBHelper.LogErrorToDB "clsGraph", "AddVertex", Erl
End Sub

' Adds a new edge to the graph
Public Sub AddEdge(StartingVertexID As String, EndingVertexID As String)
    On Error GoTo Error_Handler:
    Dim Edge As clsEdge
    Dim StartingVertex As clsVertex
    Dim EndingVertex As clsVertex
    ' Get the starting vertex
    Set StartingVertex = m_c_VertexList(StartingVertexID)
    ' Get the ending vertex
    Set EndingVertex = m_c_VertexList(EndingVertexID)
    ' Create the edge
    Set Edge = New clsEdge
    ' Add the vertices to the edge
    Edge.StartingVertex = StartingVertex
    Edge.EndingVertex = EndingVertex
    ' Add the edge to the starting vertex
    StartingVertex.AddIncidentEdge Edge
    ' Add the edge to the ending vertex
    EndingVertex.AddTerminatingEdge Edge
    ' Add the edge to the master list
    m_c_EdgeList.Add Edge
    ' Clean up references
    Set Edge = Nothing
    Set StartingVertex = Nothing
    Set EndingVertex = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "clsGraph", "AddEdge", g_l_ErrorLineNumber
    Set Edge = Nothing
    Set StartingVertex = Nothing
    Set EndingVertex = Nothing
End Sub

' Determines whether or not cycles exist in the graph
Public Function CycleExists() As Boolean
    Dim c_CycleEdges As Collection
    
    On Error GoTo Error_Handler
    
    Set c_CycleEdges = GetCycleEdges
    If c_CycleEdges.Count > 0 Then
        CycleExists = True
    Else
        CycleExists = False
    End If
    Set c_CycleEdges = Nothing
        
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "clsGraph", "CycleExists", g_l_ErrorLineNumber
    Set c_CycleEdges = Nothing
End Function

' Returns the edges that cause directed cycles in the graph
Private Function GetCycleEdges() As Collection
    Dim Edge As clsEdge
    Dim c_CycleEdges As Collection
    
    On Error GoTo Error_Handler
    
    Set c_CycleEdges = New Collection
    ' Runs a depth first search
    Call RunDepthFirstSearch
    ' Gets the BACK edges
    For Each Edge In m_c_EdgeList
        If Edge.EdgeType = BACK Then c_CycleEdges.Add Edge
    Next
    ' Clean up references
    Set Edge = Nothing
    ' Return the edges
    Set GetCycleEdges = c_CycleEdges
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "clsGraph", "GetCycleEdges", g_l_ErrorLineNumber
    Set Edge = Nothing
End Function

' Determines whether or not a vertex exists
Public Function VertexExists(VertexID As String) As Boolean
    Dim l_Count As Long
    Dim Vertex As clsVertex
    
    On Error GoTo Error_Handler
    
    For l_Count = 1 To m_c_VertexList.Count
        Set Vertex = m_c_VertexList.Item(l_Count)
        If Vertex.ID = VertexID Then
            VertexExists = True
            Set Vertex = Nothing
            Exit Function
        End If
    Next
    VertexExists = False
    Set Vertex = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "clsGraph", "VertexExists", g_l_ErrorLineNumber
    Set Vertex = Nothing
End Function

' Returns a string indicating the entire cycle for the first
' cycle edge
Public Function FindCycle() As String
    Dim StartingVertex As clsVertex
    Dim EndingVertex As clsVertex
    Dim CycleEdge As clsEdge
    Dim str_RetVal As String
    
    On Error GoTo Error_Handler
    
    ' Get the cycle edge
    Set CycleEdge = GetCycleEdges.Item(1)
    ' Find the starting and ending vertices
    Set StartingVertex = CycleEdge.StartingVertex
    Set EndingVertex = CycleEdge.EndingVertex
    ' Find the cycle string
    ContinueCycleString str_RetVal, StartingVertex, EndingVertex
    ' Return the cycle string
    FindCycle = str_RetVal & "Rebuilt Part " & EndingVertex.ID & " containing Rebuilt Part " & StartingVertex.ID
    ' Clean up references
    Set StartingVertex = Nothing
    Set EndingVertex = Nothing
    Set CycleEdge = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "clsGraph", "FindCycle", g_l_ErrorLineNumber
    Set StartingVertex = Nothing
    Set EndingVertex = Nothing
    Set CycleEdge = Nothing
End Function

' Returns part of the string used to display the cycle in the graph
Private Sub ContinueCycleString(ByRef str_RetVal As String, ByRef Vertex As clsVertex, ByRef FinalVertex As clsVertex)
    Dim Edge As clsEdge
    
    On Error GoTo Error_Handler
    
    If Vertex.ID = FinalVertex.ID Then
        ' The string has been completed so do nothing
    Else
        ' Find the terminating tree edge
        For Each Edge In Vertex.TerminatingEdges
            If Edge.EdgeType = TREE Then
                ' Continue building the string
                str_RetVal = str_RetVal & "Rebuilt Part " & Edge.EndingVertex.ID & " containing "
                ContinueCycleString str_RetVal, Edge.StartingVertex, FinalVertex
                Exit For
            End If
        Next
    End If
    Set Edge = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "clsGraph", "ContinueCycleString", g_l_ErrorLineNumber
    Set Edge = Nothing
End Sub

' Runs a depth first search on the graph, labelling
' all vertices and edges
Private Sub RunDepthFirstSearch()
    Dim Vertex As clsVertex
    Dim Edge As clsEdge
    
    On Error GoTo Error_Handler
    
    ' STEP 1: Label each vertex as WHITE
    For Each Vertex In m_c_VertexList
        Vertex.Colour = WHITE
    Next
    ' STEP 2: Label each edge as NONE
    For Each Edge In m_c_EdgeList
        Edge.EdgeType = NONE
    Next
    ' STEP 3: Set time to 0
    m_l_Time = 0
    ' STEP 4: Run a DFS Visit on each WHITE vertex
    For Each Vertex In m_c_VertexList
        If Vertex.Colour = WHITE Then RunDFSVisit Vertex
    Next
    ' STEP 5: Label each of the EDGES
    For Each Edge In m_c_EdgeList
        If Edge.EdgeType = NONE Then
            If (Edge.EndingVertex.DiscoveryTime <= Edge.StartingVertex.DiscoveryTime) And _
               (Edge.StartingVertex.DiscoveryTime <= Edge.StartingVertex.FinishedTime) And _
               (Edge.StartingVertex.FinishedTime <= Edge.EndingVertex.FinishedTime) Then
                        Edge.EdgeType = BACK
            ElseIf (Edge.EndingVertex.DiscoveryTime <= Edge.EndingVertex.FinishedTime) And _
                   (Edge.EndingVertex.FinishedTime <= Edge.StartingVertex.DiscoveryTime) And _
                   (Edge.StartingVertex.DiscoveryTime <= Edge.StartingVertex.FinishedTime) Then
                        Edge.EdgeType = CROSS
            Else
                        Edge.EdgeType = FRONT
            End If
        End If
    Next
    ' STEP 6: Clean up references
    Set Vertex = Nothing
    Set Edge = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "clsGraph", "RunDepthFirstSearch", g_l_ErrorLineNumber
    Set Vertex = Nothing
    Set Edge = Nothing
End Sub

' Runs the depth first search on a given vertex
Private Sub RunDFSVisit(Vertex As clsVertex)
    Dim AdjVertex As clsVertex
    Dim IncEdge As clsEdge
    
    On Error GoTo Error_Handler
    
    ' STEP 1: Sets the colour to GREY
    Vertex.Colour = GREY
    ' STEP 2: Increment the time
    m_l_Time = m_l_Time + 1
    ' STEP 3: Record the discovery time
    Vertex.DiscoveryTime = m_l_Time
    ' STEP 4: Run a depth first seach on all adjacent vertices which
    '         are still white and label the incident edges as tree
    For Each IncEdge In Vertex.IncidentEdges
        Set AdjVertex = IncEdge.EndingVertex
        If AdjVertex.Colour = WHITE Then
            IncEdge.EdgeType = TREE
            RunDFSVisit AdjVertex
        End If
    Next
    ' STEP 5: Sets the colour to BLACK
    Vertex.Colour = BLACK
    ' STEP 6: Increments the time
    m_l_Time = m_l_Time + 1
    ' STEP 7: Record the finished time
    Vertex.FinishedTime = m_l_Time
    ' STEP 8: Clean up references
    Set AdjVertex = Nothing
    Set IncEdge = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "clsGraph", "RunDFSVisit", g_l_ErrorLineNumber
    Set AdjVertex = Nothing
    Set IncEdge = Nothing
End Sub

function onGridCellSave(e) {
    const field = e.container.find("input").attr("name");
    const model = e.model;

    const relevantFields = ["Qty", "UnitCost", "CoreCost", "Percentage"];

    console.log("===== [onGridCellSave] Event Start =====");
    console.log("Edited Field:", field);
    console.log("e.values:", e.values);

    // Skip if not a relevant field
    if (!relevantFields.includes(field)) {
        console.log("Not a TotalCost-impacting field. Exit.");
        return;
    }

    // Merge model and new values
    const merged = {};
    relevantFields.forEach(f => {
        merged[f] = e.values[f] ?? model[f] ?? 0;
    });

    console.log("Merged for calculation:", merged);

    // Recalculate
    const coreCharge = merged.Qty * merged.CoreCost * (merged.Percentage / 100);
    const totalUnitCost = merged.Qty * merged.UnitCost * (merged.Percentage / 100);
    const totalCost = totalUnitCost + coreCharge;

    model.set("CoreCharge", coreCharge);
    model.set("TotalCost", totalCost);

    console.log("Calculated TotalCost:", totalCost);

    // Refresh cell UI
    const grid = e.container.closest(".k-grid").data("kendoGrid");
    const row = grid.table.find(`tr[data-uid="${model.uid}"]`);
    const totalCostIndex = grid.columns.findIndex(c => c.field === "TotalCost");

    if (totalCostIndex !== -1) {
        const cell = row.children().eq(totalCostIndex);
        const formatted = kendo.toString(totalCost, "c2");
        cell.html(kendo.htmlEncode(formatted));
        console.log("Updated TotalCost cell visually:", formatted);
    }

    console.log("===== [onGridCellSave] Event End =====");
}

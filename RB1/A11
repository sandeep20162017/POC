javascript
Copy
// Force redraw
grid.refresh(); // REMOVE THIS LINE
With:

javascript
Copy
// Force style update without refresh
grid.thead.hide().show();
2. Updated CSS (Add to site.min.css)
css
Copy
/* UNSAVED ROWS - HIGH PRIORITY */
.k-grid table > tbody > tr.unsaved-row,
.k-grid table > tbody > tr.unsaved-row.k-alt {
    background-color: #ff000020 !important; /* Red background with transparency */
    border-left: 3px solid #ff0000 !important; /* Solid red border */
}

/* Modified cells */
.k-grid table > tbody > tr.unsaved-row td.unsaved-cell {
    background-color: #ff000010 !important; /* Lighter red for cells */
    box-shadow: inset 0 0 0 1px #ff000040 !important; /* Red inner glow */
}

/* Badge styling */
.k-grid table > tbody > tr.unsaved-row .unsaved-badge {
    background: #ff0000 !important; /* Pure red badge */
    color: white !important;
    font-size: 0.7em;
    padding: 1px 4px;
    border-radius: 2px;
    position: absolute;
    right: 2px;
    top: 50%;
    transform: translateY(-50%);
    z-index: 1000;
}
3. Modified JavaScript
javascript
Copy
function onLabourGridDataBound(e) {
    const grid = e.sender;
    const ds = grid.dataSource;
    unsavedChangesExist = false;

    // Clear previous styling
    $(".unsaved-row, .unsaved-cell, .unsaved-badge").remove();

    // Apply new styling
    ds.view().forEach(item => {
        const row = grid.tbody.find(`tr[data-uid='${item.uid}']`);
        
        if (item.dirty || item.isNew()) {
            // Add row class
            row.addClass("unsaved-row");
            
            // Add badge to first cell
            const firstCell = row.find("td:first");
            if (!firstCell.find(".unsaved-badge").length) {
                firstCell.append(`<span class="unsaved-badge">UNSAVED</span>`);
            }

            // Highlight modified cells
            Object.keys(item.modified || {}).forEach(field => {
                row.find(`td[data-field='${field}']`)
                   .addClass("unsaved-cell");
            });
            
            unsavedChangesExist = true;
        }
    });

    // Update tab indicator
    const tabStrip = $("#rebuildPartsTabStrip").data("kendoTabStrip");
    if (tabStrip?.items().length) {
        $(tabStrip.items()[0].element)
            .find(".k-link")
            .toggleClass("has-unsaved", unsavedChangesExist);
    }
}

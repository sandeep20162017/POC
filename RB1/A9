Let's modify the CSS to make unsaved rows clearly red and add explicit comments. Here's the updated CSS section:

css
Copy
/* UNSAVED ROW STYLES */
/* ================================== */
/* Main row background color */
.k-grid .k-grid-content tr.unsaved-row,
.k-grid .k-grid-content tr.unsaved-row.k-alt {
    background-color: #ffebee !important; /* Light red background */
    border-left: 3px solid #ff1744 !important; /* Bright red accent */
}

/* Cell styling within unsaved rows */
.k-grid .k-grid-content tr.unsaved-row td {
    position: relative;
    background-color: inherit !important; /* Inherit row background */
}

/* Individual modified cells */
.k-grid .k-grid-content tr.unsaved-row td.unsaved-cell {
    background-color: #ffcdd2 !important; /* Medium red for modified cells */
    box-shadow: inset 0 0 0 1px #ef9a9a !important; /* Light red border */
}

/* Unsaved badge styling */
.k-grid .k-grid-content tr.unsaved-row .unsaved-badge {
    background: #d32f2f !important; /* Dark red badge */
    color: white !important;
    font-size: 0.75em !important;
    padding: 2px 6px !important;
    border-radius: 3px !important;
    position: absolute !important;
    right: 4px !important;
    top: 50% !important;
    transform: translateY(-50%) !important;
    z-index: 1000 !important;
}

/* Hover state override */
.k-grid tr.unsaved-row:hover td {
    background-color: #ffcdd2 !important; /* Maintain red on hover */
}
Key changes made:

Changed all background colors to red palette

Added explicit border colors for better visibility

Improved badge contrast with dark red

Added position: relative to cells for proper badge placement

Added !important to override Kendo's defaults

Update your JavaScript to ensure classes are applied:

javascript
Copy
function onLabourGridDataBound(e) {
    const grid = e.sender;
    const ds = grid.dataSource;
    unsavedChangesExist = false;

    // Clear previous styling
    grid.tbody.find("tr").removeClass("unsaved-row");
    grid.tbody.find(".unsaved-badge").remove();

    // Apply new styling
    ds.view().forEach(item => {
        const row = grid.tbody.find(`tr[data-uid='${item.uid}']`);
        
        if (item.dirty || item.isNew()) {
            // Add row class
            row.addClass("unsaved-row");
            
            // Add badge to first cell
            const firstCell = row.find("td:first");
            if (!firstCell.find(".unsaved-badge").length) {
                firstCell.append(`
                    <span class="unsaved-badge">UNSAVED</span>
                `);
            }

            // Highlight modified cells
            Object.keys(item.modified || {}).forEach(field => {
                row.find(`td[data-field='${field}']`)
                   .addClass("unsaved-cell");
            });
            
            unsavedChangesExist = true;
        }
    });

    // Force redraw
    grid.refresh();
}
This combination should now:

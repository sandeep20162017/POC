setTimeout(() => {
    const dataItems = ds.view();
    console.warn('üîç ComboBox Lock Check ‚Äî dataItems:', dataItems);
    console.warn('üîç GridType:', gridType);

    grid.tbody.find("input[data-role='combobox'][data-lock-map].auto-lock-column").each(function () {
        const $input = $(this);
        const lockMap = $input.attr("data-lock-map");
        const combo = $input.data("kendoComboBox");
        const fieldName = $input.attr("name");
        const row = $input.closest("tr");
        const model = grid.dataItem(row);

        console.warn(`üìå ComboBox Field: ${fieldName}`);
        console.warn(`   - lockMap: ${lockMap}`);
        console.warn(`   - combo:`, combo);
        console.warn(`   - model:`, model);

        if (!combo || !lockMap || !gridType || !model) {
            console.warn("‚õî Missing combo/lockMap/gridType/model");
            return;
        }

        const rules = lockMap.split(";").reduce((acc, pair) => {
            const [key, val] = pair.split(":");
            if (key && val) acc[key.trim()] = val.trim();
            return acc;
        }, {});

        const lockRule = rules[gridType] || "none";
        let shouldLock = false;

        if (lockRule === "always") shouldLock = true;
        else if (lockRule === "notNew" && !model.isNew?.()) shouldLock = true;
        else if (lockRule === "newOnly" && model.isNew?.()) shouldLock = true;

        console.warn(`üîê Lock Decision for '${fieldName}' in '${gridType}': ${lockRule} ‚Üí ${shouldLock ? "LOCKED" : "EDITABLE"}`);

        if (shouldLock) {
            combo.enable(false);
            combo.wrapper.addClass("field-disabled");
            combo.input.prop("readonly", true);
        }
    });
}, 50);

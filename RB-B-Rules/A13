‚úÖ You Do Need .EditorViewData(...)
This is the only way to pass fieldName and columnLockMap into the ComboBoxEditor.cshtml, where you'll apply the correct HTML attributes on the actual input.

‚úÖ Correct Column Definition in Grid
csharp
Copy
Edit
columns.Bound(c => c.KeyWord)
    .Title("KeyWord")
    .EditorTemplateName("ComboBoxEditor")
    .EditorViewData(new Dictionary<string, object>
    {
        { "LockMap", "RbGrid:always;MakevsBuy:notNew;Vehicle:notNew" }
    })
    .Width(100);
üîÅ Don't use .HtmlAttributes(...) for data-role or data-lock-map on the column ‚Äî those go in the editor.

‚úÖ ComboBoxEditor.cshtml ‚Äî Full Working Version
Location: Views/Shared/EditorTemplates/ComboBoxEditor.cshtml

csharp
Copy
Edit
@model object

@{
    var fieldName = ViewData.TemplateInfo.GetFullHtmlFieldName("");
    var columnLockMap = ViewData["LockMap"]?.ToString() ?? "";
}

@(Html.Kendo().ComboBox()
    .Name(fieldName)
    .DataTextField("Text")
    .DataValueField("Value")
    .Filter(FilterType.Contains)
    .AutoBind(false)
    .MinLength(2)
    .EnforceMinLength(true)
    .Placeholder("Search...")
    .NoDataTemplate("<div style='color: red; font-weight: bold;'>Invalid Selection</div>")
    .HtmlAttributes(new Dictionary<string, object>
    {
        { "name", fieldName },
        { "data-role", "combobox" },
        { "data-lock-map", columnLockMap },
        { "class", "auto-lock-column" }
    })
    .Events(e =>
    {
        e.DataBound("onComboBoxDataBound");
        e.Change("onComboBoxChange");
    })
    .DataSource(source =>
    {
        source.Read(read =>
        {
            read.Url(Url.Action("GetAutoCompleteData", "AutoComplete"))
                .Type(HttpVerbs.Get)
                .Data("getComboBoxParams");
        })
        .ServerFiltering(true);
    })
    .Template("#= Text #")
)

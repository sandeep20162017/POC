1. Use HTML Attributes to Mark Columns as “AutoLocked”
In your grid column definitions, tag the fields that should become read-only after auto-population with a class or data attribute:

csharp
Copy
Edit
columns.Bound(c => c.KeyWord)
    .Title("KeyWord")
    .EditorTemplateName("ComboBoxEditor")
    .HtmlAttributes(new { @class = "auto-lock-column" }) // <-- Tag it
    .Width(100);

columns.Bound(c => c.Description)
    .Title("Description")
    .EditorTemplateName("ComboBoxEditor")
    .HtmlAttributes(new { @class = "auto-lock-column" }) // <-- Tag it
    .Width(120);
You can even add a custom attribute if you want more control:

csharp
Copy
Edit
.HtmlAttributes(new { @class = "auto-lock-column", data_field = "KeyWord" })
✅ 2. Use a Shared JS Function to Lock These Columns if Flag is Set
Make your onEdit event function generic and reusable:

javascript
Copy
Edit
function onGridEdit(e) {
    var model = e.model;

    if (!model.IsPopulated) return;

    // Look for all fields tagged as auto-lock
    e.container.find(".auto-lock-column").each(function () {
        var fieldName = $(this).attr("name");
        var combo = $(this).data("kendoComboBox");

        if (combo) {
            combo.enable(false);
            combo.wrapper.addClass("field-disabled");
            combo.input.prop("readonly", true);
        }
    });
}
Now just set the .Events(ev => ev.Edit("onGridEdit")) on each grid and you’re done. You can even use the same view model structure across grids to keep it DRY.

<script>
    function onRbGridDataBound(e) {
        console.warn('üöÄ onRbGridDataBound called');

        const grid = e.sender;
        const ds = grid.dataSource;
        const gridType = grid.wrapper.attr("data-grid-type");
        const dataItems = ds.view();

        console.warn("üìã Grid Type:", gridType);
        console.warn("üìã Data Items:", dataItems);

        // --- Unsaved row styling ---
        unsavedChangesExist = false;
        $(".unsaved-row, .unsaved-cell, .unsaved-badge").remove();

        dataItems.forEach(item => {
            const row = grid.tbody.find(`tr[data-uid='${item.uid}']`);
            console.warn("üß± Processing row for:", item, row);

            if (item.dirty || item.isNew()) {
                row.addClass("unsaved-row");

                const firstCell = row.find("td:first");
                if (!firstCell.find(".unsaved-badge").length) {
                    firstCell.append(`<span class="unsaved-badge">UNSAVED</span>`);
                }

                Object.keys(item.modified || {}).forEach(field => {
                    row.find(`td[data-field='${field}']`).addClass("unsaved-cell");
                });

                unsavedChangesExist = true;
            }
        });

        const tabStrip = $("#vehicleTabStrip").data("kendoTabStrip");
        if (tabStrip?.items().length) {
            $(tabStrip.items()[0].element)
                .find(".k-link")
                .toggleClass("has-unsaved", unsavedChangesExist);
        }

        const gridName = grid.element.attr('id');
        let originalAddCommand = grid.addRow;

        grid.addRow = function () {
            if (!grid.dataSource.hasChanges()) {
                originalAddCommand.call(grid);
            }
        };

        grid.dataSource.bind("change", function () {
            updateToolbarButtons(gridName);
        });

        updateToolbarButtons(gridName);

        // --- Locking logic after editors are rendered ---
        setTimeout(() => {
            console.warn("üîí Checking for ComboBoxes to lock...");

            grid.tbody.find("input[data-role='combobox'][data-lock-map].auto-lock-column").each(function () {
                const $input = $(this);
                const lockMap = $input.attr("data-lock-map");
                const fieldName = $input.attr("name");
                const combo = $input.data("kendoComboBox");
                const row = $input.closest("tr");
                const model = grid.dataItem(row);

                console.warn(`üß© Found ComboBox: ${fieldName}`);
                console.warn(`üîç LockMap: ${lockMap}`);
                console.warn(`üîç Model:`, model);

                if (!combo || !lockMap || !model || !gridType) {
                    console.warn("‚õî Skipping due to missing combo/model/gridType/lockMap");
                    return;
                }

                const rules = lockMap.split(";").reduce((acc, pair) => {
                    const [key, val] = pair.split(":");
                    if (key && val) acc[key.trim()] = val.trim();
                    return acc;
                }, {});

                const lockRule = rules[gridType] || "none";
                let shouldLock = false;

                if (lockRule === "always") shouldLock = true;
                else if (lockRule === "notNew" && !model.isNew?.()) shouldLock = true;
                else if (lockRule === "newOnly" && model.isNew?.()) shouldLock = true;

                console.warn(`üîê Field '${fieldName}' in '${gridType}': rule = ${lockRule} ‚Üí ${shouldLock ? "LOCKED" : "EDITABLE"}`);

                if (shouldLock) {
                    combo.enable(false);
                    combo.wrapper.addClass("field-disabled");
                    combo.input.prop("readonly", true);
                }
            });
        }, 50);
    }
</script>

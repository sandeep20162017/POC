If you're seeing inconsistent behavior—like some ComboBoxes not locking correctly during new or edit mode transitions—it's because Kendo initializes editors asynchronously. A short setTimeout ensures your code runs after editors are fully wired up.

✅ Updated Shared onGridEdit Handler with setTimeout and model.isNew()
Here’s the updated and robust version of your handler:

javascript
Copy
Edit
function onGridEdit(e) {
    var model = e.model;

    // Only apply read-only logic if it's NOT a new item
    if (model.isNew()) return;

    // Delay locking logic to ensure all editors are initialized
    setTimeout(function () {
        e.container.find(".auto-lock-column").each(function () {
            var $field = $(this);
            var fieldName = $field.attr("name");
            var combo = $field.data("kendoComboBox");

            if (combo) {
                combo.enable(false);
                combo.wrapper.addClass("field-disabled");
                combo.input.prop("readonly", true);
            }
        });
    }, 30); // 20–50ms is usually safe
}
✅ How to Apply It
✅ Add the auto-lock-column class in your .HtmlAttributes(...).

✅ Hook this function in your grid's .Events(...):

csharp
Copy
Edit
.Events(ev => ev.Edit("onGridEdit"))
✅ Bonus: Using data-field for Custom Control
If needed, you can further control locking per field:

csharp
Copy
Edit
.HtmlAttributes(new { @class = "auto-lock-column", data_field = "KeyWord" })
Then filter in JS:

javascript
Copy
Edit
if (fieldName === "KeyWord" || fieldName === "Description") {
    // lock logic
}
This makes your lock logic robust, async-safe, and grid-agnostic, ready to use across all your views.

Need this wrapped into a shared partial script like we did earlier?

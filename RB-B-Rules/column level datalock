âœ… Step-by-Step Solution
ðŸ§© 1. Column-Level Only: Use data-lock-rule
In Razor:

csharp
Copy
Edit
columns.Bound(c => c.KeyWord)
    .Title("KeyWord")
    .EditorTemplateName("ComboBoxEditor")
    .HtmlAttributes(new { @class = "auto-lock-column", data_lock_rule = "notNew" });

columns.Bound(c => c.Description)
    .Title("Description")
    .EditorTemplateName("ComboBoxEditor")
    .HtmlAttributes(new { @class = "auto-lock-column", data_lock_rule = "always" });

columns.Bound(c => c.RebuiltStockNum)
    .Title("Rebuilt Number")
    .EditorTemplateName("RbComboBox")
    .HtmlAttributes(new { @class = "auto-lock-column", data_lock_rule = "newOnly" });
ðŸ§© 2. Shared JavaScript (Fully Decoupled Version)
Update your shared partial view (_GridEditLockHelper.cshtml) to ignore data_lock_mode:

html
Copy
Edit
<script>
    function onGridEditLockHandler(e) {
        var model = e.model;

        setTimeout(function () {
            var row = e.container.closest("tr");

            row.find("td.auto-lock-column").each(function () {
                var $td = $(this);
                var $input = $td.find("input[data-role='combobox']");
                var lockRule = $td.attr("data-lock-rule") || "none";
                var combo = $input.length ? $input.data("kendoComboBox") : null;

                if (!combo) return;

                var shouldLock = false;

                switch (lockRule) {
                    case "none":
                        shouldLock = false;
                        break;
                    case "always":
                        shouldLock = true;
                        break;
                    case "notNew":
                        shouldLock = !model.isNew();
                        break;
                    case "newOnly":
                        shouldLock = model.isNew();
                        break;
                }

                if (shouldLock) {
                    combo.enable(false);
                    combo.wrapper.addClass("field-disabled");
                    combo.input.prop("readonly", true);
                }
            });
        }, 30);
    }
</script>

Like above, Can you make chagees for both the tabs and clean up the code? Pls keep all the JS functions. If possible use ClientTemplat
Add debugging. Give me full files with all the changes.
@using BCES.Models.Vehicle
@using BCES.Models.Common
@model IEnumerable<BCES.Models.Vehicle.VehicleViewModel>
@* @Html.Partial("_CESGridEditLockHelper") *@

@{
    ViewData["Title"] = "Vehicle Estimate";
    var parentGridId = $"{ViewBag.PartNum}";/* save gridname in hidden field for JS */
    //var vehGridName = $"VehicleGrid_{ViewBag.PartNum}";

    var vehGridName = $"VehicleGrid";
}
<h6>Vehicle Estimate</h6>

@(Html.Kendo().TabStrip()
    .Name("vehicleTabStrip")
    .Animation(animation => animation.Open(effect => effect.Fade(FadeDirection.In)))
    .Items(tabstrip =>
    {
        tabstrip.Add().Text("Vehicles")
            .Selected(true)
            .Content(@<text>
    @try
    {

    @(Html.Kendo().Grid<VehicleViewModel>()
    .Name($"VehicleGrid")
    .Columns(columns =>
    {
    columns.Bound(c => c.VehicleListId).Title("Estimate #")

    .ClientTemplate("#= VehicleListId && VehicleListId !== 0 ? VehicleListId : '(System Generated)' #")
    .Filterable(ftb => ftb.Cell(cell => {
    cell.Operator("eq"); // Equal to
    cell.ShowOperators(true); // Hide the operator dropdown
    }))
  ..//remaining columns
    columns.Command(command =>
    {
    // command.Edit().Text(" ").IconClass("k-icon k-i-edit").HtmlAttributes(new { title = "Edit" }); // Edit button with tooltip
    command.Custom("Archive").Text(" ").IconClass("k-icon k-i-folder").Click("onArchiveClick").HtmlAttributes(new { title = "Archive" }); // Archive button with tooltip
    command.Custom("Copy").Text(" ").IconClass("k-icon k-i-copy").Click("onCopyEstimateClick").HtmlAttributes(new { title = "Copy Estimate" });//san17 copy estimate
    command.Custom("Delete")
    .Click("showDeleteConfirmation")
    .Text(" ")
    .IconClass("k-icon k-i-delete")
    .HtmlAttributes(new {
    @class = "text-danger",
    data_grid = "VehicleGrid",
    data_url = Url.Action("DeleteVehicle", "Vehicles"),
    data_id_field = "VehicleListId", //pk
    data_grid_type = "VehicleGrid" // static value
    });
    
    }).Title("Actions").IncludeInMenu(false).Width(300); // Set a fixed width for the Actions column
    })
    .ClientDetailTemplateId("vehicle-detail-template")
    .ToolBar(toolbar => {
    toolbar.Create().Text("Add new record").IconClass("k-icon k-i-plus").HtmlAttributes(new {
    title = "Add new record",
    @class = "k-primary"
    });
    toolbar.Save().SaveText("Save changes").CancelText("Cancel changes")
    .HtmlAttributes(new {
    title_save = "Save all changes",
    title_cancel = "Discard changes"
    });
    //toolbar.Excel().Text("Variance Report");
    })
    .Editable(editable => editable.Mode(GridEditMode.InCell))
    .Events(events => events
    .ExcelExport("onExcelExport")
    .DetailExpand("onDetailExpand")
    .DetailCollapse("onDetailCollapse")
    .DataBound("onVehGridDataBound")
    .Save("onVehGridSave")
    // .Edit("onVehEdit")
    )   
    .ClientDetailTemplateId("template")    
    .DataSource(dataSource => dataSource
    .Ajax()
    .PageSize(1)
    .Model(model =>
    {

    model.Id(c => c.VehicleListId); //it will be ArchiveListId for Archive Vehicle tab
    model.Field(c => c.VehicleListId).Editable(false);
    model.Field(c => c.ModifiedLastDate).Editable(false);
    model.Field(c => c.ModifiedLastBy).Editable(false);

    })
    .Events(events =>
    {
    events.RequestEnd("onVehRequestEnd");
    events.Error("onDataSourceError");

    })
    .Read(read => read.Url(Url.Action("GetVehiclesView", "Vehicles")).Type(HttpVerbs.Get))
    .Create(create => create.Url(Url.Action("AddVehiclesView", "Vehicles")).Type(HttpVerbs.Post))
    .Update(update => update.Url(Url.Action("UpdateVehiclesView", "Vehicles")).Type(HttpVerbs.Post))
    .Destroy(delete => delete.Url(Url.Action("DeleteVehiclesView", "Vehicles")).Type(HttpVerbs.Post))
    )
    )
..
</text>);

        tabstrip.Add().Text("Archived Vehicles")
            .Content(@<text>
    @try
    {
    @Html.Partial("_ArchivedVehicleIndex")
    }
    catch (Exception ex)
    {
    <div class="alert alert-danger">Error loading archived vehicles: @ex.Message</div>
    }
</text>);
    })
)

<!-- Custom Delete Confirmation Dialog -->
<div id="deleteConfirmationDialog" style="display: none;">
    <div class="confirmation-message">
        <span class="k-icon k-i-warning confirmation-icon"></span>
        <span>Are you sure you want to delete this item?</span>
    </div>
    <div class="confirmation-buttons">
        <button type="button" class="k-button cancel-btn">Cancel</button>
        <button type="button" class="k-button confirm-btn">Delete</button>
    </div>
</div>

<div id="notification"></div>

@* <input type="hidden" name="SelectedBuses" id="SelectedBusesHidden" value="" /> *@
<!-- Rest of HTML remains unchanged -->
@section Scripts {
    <script>
     

        // Vehicle Series display handler
        function formatVehicleSeries(buses) {
            if (!buses || !buses.length) return 'Select Vehicle';
            return buses.map(b =>
                `<span title="${b.BusName}">${truncateWords(b.BusName, 10)}</span>`
            ).join(', ');
        }

        // Update client template for Vehicle Series
        function refreshVehicleSeriesTemplate() {
            const gridName = $("#vehGridNameField").val();
            const grid = $("#" + gridName).data("kendoGrid");
            //const grid = $("#VehicleGrid").data("kendoGrid");
            grid.refresh();
        }


    </script>

    <script>
        var tabIndex = -1; //-1 when  Main grid is acive, if below tabs are active get the resp. tabIndex ssk
        var tabStripName = "";
        $(document).ready(function () {


            /////////
            $("#email-estimate-container").hide();
            $("#archived-email-estimate-container").hide();

            //// start visual save changes
            // Initialize main TabStrip with proper error handling
            const mainTabStrip = $("#vehicleTabStrip").data("kendoTabStrip");
            if (mainTabStrip) {
                mainTabStrip.select(0); // Select/expand the first tab (index 0) //ssk16
                // Correct tab item access using native array methods
                const tabs = mainTabStrip.items();
                if (tabs && tabs.length > 0) {
                    // Access first tab using array index
                    const firstTab = tabs[0];

                    $(firstTab.element).find(".k-link").addClass("has-unsaved");
                }

                // Add tabstrip styling
                mainTabStrip.wrapper.find(".k-tabstrip-items").append(`
                                                        <style>
                                                            .k-tabstrip-items .has-unsaved {
                                                                position: relative;
                                                                color: #d9534f !important;
                                                            }
                                                            .has-unsaved::after {
                                                                content: "•";
                                                                color: #d9534f;
                                                                position: absolute;
                                                                right: 8px;
                                                                top: 6px;
                                                                font-size: 1.5em;
                                                            }
                                                        </style>
                                                    `);
            } else {
                console.warn("Main TabStrip not found");
            }

            ////end visual save changes
            var grid = $("#VehicleGrid").data("kendoGrid");
            const gridName = $("#vehGridNameField").val();
            // const grid = $("#" + gridName).data("kendoGrid");

            // Initialize Kendo Notification for displaying messages
            var notificationElement = $("#notification");
            if (notificationElement.length === 0) {
                console.error("Notification element not found in the DOM.");
            } else {
                         console.log("user clicks the Cancel button logic ");
                console.log('grid :', grid);
                // Bind the Cancel event for the grid
                grid.bind("cancel", function (e) {
                    // This event is triggered when the user clicks the Cancel button
                    $.post('@Url.Action("CancelDetails", "Vehicles")', { vehicleListId: e.model.VehicleListId })
                        .done(function (data) {
                            if (notification) {
                                notification.show("Changes discarded!", "info");
                            } else {
                                console.error("Notification is not initialized.");
                            }
                        })
                        .fail(function (xhr, status, error) {
                            console.error("Error discarding changes: ", error);
                            if (notification) {
                                notification.show("An error occurred while discarding changes. Please try again.", "error");
                            } else {
                                console.error("Notification is not initialized.");
                            }
                        });
                });

                console.log("calling detailInit");
                grid.bind("detailInit", function (e) {
                    console.error("Inside detailInit");
                    const vehicleListId = e.data.VehicleListId;
                    parentGridId = vehicleListId;
                    console.error("vehicleListId : ", vehicleListId);

                    console.log("Detail initialization started for VehicleListId: " + e.data.VehicleListId);
                    var tabUrlLabourDetail = '@Url.Action("LabourDetailsPartial", "Vehicles")' + '?id=' + e.data.VehicleListId;
                    var tabUrlLabourHourSummary = '@Url.Action("LabourHourSummaryPartial", "Vehicles")' + '?id=' + e.data.VehicleListId;
                    var tabUrlMaterialCostSummary = '@Url.Action("MaterialCostSummaryPartial", "Vehicles")' + '?id=' + e.data.VehicleListId;
                    var tabScPartDetail = '@Url.Action("ScPartsUsedInEstimates", "Vehicles")' + '?id=' + e.data.VehicleListId;
                    var tabUrlNscDetail = '@Url.Action("NscDetailsPartial", "Vehicles")' + '?id=' + e.data.VehicleListId;
                    var tabUrlRbPartDetail = '@Url.Action("RbDetailsPartial", "Vehicles")' + '?id=' + e.data.VehicleListId;
                    var tabUrlTotalCost = '@Url.Action("TotalCostPartial", "Vehicles")' + '?id=' + e.data.VehicleListId;

                    // Get the container for the detail template
                    var container = e.detailCell.find("#detail-template-" + e.data.VehicleListId);

                    // Load the TabStrip structure
                    container.html(`
                                                                    <div id="tabstrip-container-${e.data.VehicleListId}">
                                                                <ul>
                                                                     <li>Labour Details</li>
                                                                    <li>Labour Hour</li>
                                                                    <li>Material Cost</li>
                                                                    <li>Stock Coded Parts</li>
                                                                    <li>Non Stock Coded Parts</li>
                                                                    <li>Rebuilt Parts</li>

                                                                    <li>Total Cost</li>
                                                                </ul>

                                                                        <div id="labour-details-content-${vehicleListId}"></div>
                                                                        <div id="labour-hour-summary-content-${vehicleListId}"></div>
                                                                        <div id="material-cost-summary-content-${vehicleListId}"></div>
                                                                        <div id="material-details-content-${vehicleListId}"></div>
                                                                        <div id="nsc-details-content-${vehicleListId}"></div>
                                                                        <div id="rb-part-details-content-${vehicleListId}"></div>

                                                                        <div id="total-cost-content-${vehicleListId}">"></div>
                                                            </div>
                                                        `);

                    // Initialize the Kendo TabStrip
                    console.log("Initialize tabScript ");

                    var tabStrip = $("#tabstrip-container-" + e.data.VehicleListId).kendoTabStrip({
                        animation: { open: { effects: "fadeIn" } },
                        select: function (e) {
                            tabIndex = $(e.item).index(); // Get the index of the selected tab
                            tabStripName = e.sender.element.attr("id"); //ssk tabStripName

                            // Check for unsaved changes in the current tab
                            var currentTabContent = tabStrip.contentElement(tabStrip.select().index());
                            var currentGrid = $(currentTabContent).find(".k-grid").data("kendoGrid");
                            console.log("*******currentGrid :", currentGrid);

                            console.log("*******currentTabContent :", currentTabContent);
                            //    var gridName = currentGrid.element.attr("id");
                            //  console.log("*******currentGridName :", gridName);
                            //  notification.show("currentGridName :" + gridName, "warning");



                            tabIndex = $(e.item).index(); // Get the index of the selected tab

                            if (currentGrid && (currentGrid.dataSource.hasChanges())) { //kendoNotification show waring for reaonly
                                console.log("hasChanges :", currentGrid.dataSource.hasChanges());

                                // Show a warning notification
                                if (notification) {
                                    notification.show("You have unsaved changes. Click on Update or Cancel changes before clicking next tab.", "warning");
                                    // notification.show(currentGrid);
                                    //  notification.show(currentGrid.dataSource.hasChanges());
                                } else {
                                    console.error("****** Notification is not initialized.");
                                }
                                e.preventDefault(); // Prevent the tab switch
                                return;
                            }
                            console.log("Load the partial view content for the selected tab");
                            // Load the partial view content for the selected tab
                            var tabUrl = tabIndex == 0 ? tabUrlLabourDetail :
                                tabIndex == 1 ? tabUrlLabourHourSummary :
                                    tabIndex == 2 ? tabUrlMaterialCostSummary :
                                        tabIndex == 3 ? tabScPartDetail :
                                            tabIndex == 4 ? tabUrlNscDetail :
                                                tabIndex == 5 ? tabUrlRbPartDetail :
                                                    tabUrlTotalCost;

                            $.get(tabUrl)
                                .done(function (data) {

                                    $(e.contentElement).html(data);
                                    kendo.init($(e.contentElement)); // Reinitialize Kendo widgets
                                    if (tabIndex == 0) {
                                        var gridName = 'LabourDetailsGrid_' + vehicleListId; //ssk2
                                        console.log('########  :gridName ', gridName);
                                    }

                                    console.log('########  :tabIndex ', tabIndex);
                                    // Reset the hasChanges() state for read-only tabs
                                    if (tabIndex == '6' || tabIndex == '1' || tabIndex == '2') { //read-only tab
                                        var grid = $(e.contentElement).find(".k-grid").data("kendoGrid");
                                        // console.log("*******currentGrid2 :", currentGrid);
                                        var gridName = grid.element.attr("id");
                                        console.log("*******currentGridName2 :", gridName);
                                        // console.log("*******currentTabContent :", currentTabContent);
                                        grid.dataSource.read(); // Refresh the data source
                                    }
                                })
                                .fail(function (xhr, status, error) {
                                    console.error("Error loading tab content: ", error);
                                    if (notification) {
                                        notification.show("An error occurred while loading the tab content. Please try again.", "error");
                                    } else {
                                        console.error("Notification is not initialized.");
                                    }
                                });
                        }
                    }).data("kendoTabStrip");

                    // Load the first tab's content
                    $.get(tabUrlLabourDetail)
                        .done(function (data) {
                            $("#labour-details-content-" + vehicleListId).html(data);
                            kendo.init($("#labour-details-content")); // Reinitialize Kendo widgets
                        })
                        .fail(function (xhr, status, error) {
                            console.error("Error loading initial tab content: ", error);
                            if (notification) {
                                notification.show("An error occurred while loading the initial tab content. Please try again.", "error");
                            } else {
                                console.error("Notification is not initialized.");
                            }
                        });
                    $.get(tabUrlTotalCost)
                        .done(function (data) {
                            $("#total-cost-content-" + vehicleListId).html(data);
                            kendo.init($("#total-cost-content-" + vehicleListId)); // init TotalCostGrid early
                            console.log("Total Cost tab preloaded for VehicleListId:", vehicleListId);
                        })
                        .fail(function (xhr, status, error) {
                            console.error("Error preloading Total Cost tab:", error);
                        });
                });
            }
            //archived --------------------------------------------
            var grid = $("#ArchivedVehicleGrid").data("kendoGrid");
            console.warn("Before Arch Initializaion " );

            // Initialize Kendo Notification for displaying messages
            var notificationElement = $("#archived-notification");
            if (notificationElement.length === 0) {
                console.error("Notification element not found in the DOM.");
            } else {
                var notification = notificationElement.kendoNotification({
                    position: {
                        pinned: true,
                        top: 50,
                        right: 50
                    },
                    autoHideAfter: 5000, // Hide after 5 seconds
                    stacking: "down"
                }).data("kendoNotification");
                   // Bind the detailInit event for the grid
                $(document).ready(function () {

    var grid = $("#ArchivedVehicleGrid").data("kendoGrid");

    // 🔥 Add Single Row Expansion Logic
    grid.bind("detailExpand", function (e) {
        grid.tbody.children("tr.k-master-row").each(function () {
            var masterRow = $(this);
            if (masterRow[0] !== e.masterRow[0]) {
                grid.collapseRow(masterRow);
            }
        });
    });

    // archive 
    grid.bind("detailInit", function (e) {

        console.warn("Detail initialization started for ArchVehicleList: " + e.data.ArchVehicleListId);
        console.log("Detail initialization started for VehicleList: " + e.data.VehicleListId);

        // Build all the tab URLs dynamically
        var tabUrlLabourDetail = '@Url.Action("LabourDetailsPartial", "Vehicles")' + '?oldid=' + e.data.VehicleListId + "&gridType=ArchivedVehicleGrid" + "&id=" + e.data.ArchVehicleListId;
        var tabUrlLabourHourSummary = '@Url.Action("LabourHourSummaryPartial", "Vehicles")' + '?id=' + e.data.ArchVehicleListId + "&gridType=ArchivedVehicleGrid";
        var tabUrlMaterialCostSummary = '@Url.Action("MaterialCostSummaryPartial", "Vehicles")' + '?id=' + e.data.ArchVehicleListId + "&gridType=ArchivedVehicleGrid";
        var tabScPartDetail = '@Url.Action("ScPartsUsedInEstimates", "Vehicles")' + '?id=' + e.data.ArchVehicleListId + "&gridType=ArchivedVehicleGrid";
        var tabUrlNscDetail = '@Url.Action("NscDetailsPartial", "Vehicles")' + '?id=' + e.data.ArchVehicleListId + "&gridType=ArchivedVehicleGrid";
        var tabUrlRbPartDetail = '@Url.Action("RbDetailsPartial", "Vehicles")' + '?id=' + e.data.ArchVehicleListId + "&gridType=ArchivedVehicleGrid";

        var container = e.detailCell.find("#archived-detail-template-" + e.data.ArchVehicleListId);
        console.warn("After Get the container for the detail template ArchVehicleList: " + e.data.ArchVehicleListId);

        console.warn("Before Load the TabStrip structure ArchVehicleList: " + e.data.ArchVehicleListId);

        // Build the TabStrip structure
        container.html(`
            <div id="archived-tabstrip-container-${e.data.ArchVehicleListId}">
                <ul>
                    <li class="k-state-active">Labour Details</li>
                    <li>Labour Hour Summary</li>
                    <li>Material Cost Summary</li>
                    <li>Stock Coded Parts</li>
                    <li>Non Stock Coded Parts</li>
                    <li>Rebuilt Built Parts</li>
                </ul>
                <div id="archived-labour-details-content-${e.data.ArchVehicleListId}"></div>
                <div id="archived-labour-hour-summary-content-${e.data.ArchVehicleListId}"></div>
                <div id="archived-material-cost-summary-content-${e.data.ArchVehicleListId}"></div>
                <div id="archived-sc-parts-content-${e.data.ArchVehicleListId}"></div>
                <div id="archived-nsc-details-content-${e.data.ArchVehicleListId}"></div>
                <div id="archived-rb-part-details-content-${e.data.ArchVehicleListId}"></div>
            </div>
        `);

        console.warn("After Load the TabStrip structure ArchVehicleList: " + e.data.ArchVehicleListId);

        var tabStrip = $("#archived-tabstrip-container-" + e.data.ArchVehicleListId).kendoTabStrip({
            animation: { open: { effects: "fadeIn" } },
            select: function (e) {

                tabIndex = $(e.item).index();
                tabStripName = e.sender.element.attr("id");
                console.warn("tabStripName: " + tabStripName);

                // Dynamically assign correct URL based on tab index
                var tabUrl = "";
                if (tabIndex == 0) {
                    tabUrl = tabUrlLabourDetail;
                    targetContentId = `#archived-labour-details-content-${e.data.ArchVehicleListId}`;
                } else if (tabIndex == 1) {
                    tabUrl = tabUrlLabourHourSummary;
                    targetContentId = `#archived-labour-hour-summary-content-${e.data.ArchVehicleListId}`;
                } else if (tabIndex == 2) {
                    tabUrl = tabUrlMaterialCostSummary;
                    targetContentId = `#archived-material-cost-summary-content-${e.data.ArchVehicleListId}`;
                } else if (tabIndex == 3) {
                    tabUrl = tabScPartDetail;
                    targetContentId = `#archived-sc-parts-content-${e.data.ArchVehicleListId}`;
                } else if (tabIndex == 4) {
                    tabUrl = tabUrlNscDetail;
                    targetContentId = `#archived-nsc-details-content-${e.data.ArchVehicleListId}`;
                } else if (tabIndex == 5) {
                    tabUrl = tabUrlRbPartDetail;
                    targetContentId = `#archived-rb-part-details-content-${e.data.ArchVehicleListId}`;
                }

                // Load content for selected tab
                $.get(tabUrl)
                    .done(function (data) {
                        $(targetContentId).html(data);
                        kendo.destroy($(targetContentId));
                        kendo.init($(targetContentId));
                    })
                    .fail(function (xhr, status, error) {
                        console.error("Error loading tab content: ", error);
                        if (notification) {
                            notification.show("An error occurred while loading tab content.", "error");
                        }
                    });
            }
        }).data("kendoTabStrip");

        console.warn("Load the first tab's content");

        // Initial load for first tab (Labour Details)
        var firstContentId = `#archived-labour-details-content-${e.data.ArchVehicleListId}`;
        $.get(tabUrlLabourDetail)
            .done(function (data) {
                $(firstContentId).html(data);
                kendo.destroy($(firstContentId));
                kendo.init($(firstContentId));
            })
            .fail(function (xhr, status, error) {
                console.error("Error loading initial tab content: ", error);
                if (notification) {
                    notification.show("An error occurred while loading initial tab content.", "error");
                }
            });
    });

});
                 
                 console.warn("archived end");
          }
            //archived end  ----------------------------------------

           
        function onArchiveClick(e) {
            e.preventDefault();

            // Retrieve the data item from the clicked row in VehicleGrid
            var grid = $("#VehicleGrid").data("kendoGrid");
            var row = $(e.currentTarget).closest("tr");
            var vehicleItem = grid.dataItem(row);

            if (!vehicleItem) {
                console.error("Vehicle data not found.");
                return;
            }

            // Extract PartNum from the vehicleItem
            var partNum = vehicleItem.VehicleListId;
            if (!partNum) {
                console.error("PartNum is missing in the vehicle data.");
                return;
            }

            // Construct the ID of the TotalCost grid using PartNum
            var totalCostGridId = `#TotalCostInRbModelGrid_${partNum}`;
            var totalCostGrid = $(totalCostGridId).data("kendoGrid");

            if (!totalCostGrid) {
                console.error(`TotalCost grid with ID ${totalCostGridId} not found.`);
                return;
            }

            // Retrieve the first (and only) data item from the TotalCost grid
            var totalCostDataItem = totalCostGrid.dataSource.view()[0];

            if (!totalCostDataItem) {
                console.error("TotalCost data not found.");
                return;
            }

            // Prepare the payload to send to the server
            var payload = {
                VehicleListId: vehicleItem.VehicleListId,
                VehSeriesCode: vehicleItem.VehSeriesCode,
                TypeId: "BUS", // Default value as per stored procedure
                Username: '@ViewBag.UserName?.ToString().ToUpper() ?? "SYSTEM"',
                LabourCost: totalCostDataItem.TotalLabourCost || 0,
                LabourOverheadAmount: totalCostDataItem.TotalLabourOverheadCost || 0,
                LabourTotal: totalCostDataItem.TotalLabourCost || 0,
                MaterialsTotal: totalCostDataItem.TotalMaterialCost || 0,
                TotalBusEstimateCost:( totalCostDataItem.TotalLabourCost + totalCostDataItem.TotalLabourOverheadCost + totalCostDataItem.TotalMaterialCost )|| 0,
                TaxTotal: totalCostDataItem.TaxTotal || 0,
                TotalCostTax: totalCostDataItem.TotalRebuiltPartCostWithTax || 0,
                OemKitsTotal: totalCostDataItem.OemKitsTotal || 0
            };

            console.log("Payload to be sent:", payload);

            // Send the data to the server via AJAX
            $.ajax({
                url: '@Url.Action("ArchiveVehicleDetails", "Vehicles")',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(payload),
                success: function (response) {
                    var notification = $("#notification").kendoNotification({
                        position: {
                            pinned: true,
                            top: 50,
                            right: 50
                        },
                        autoHideAfter: 5000,
                        stacking: "down"
                    }).data("kendoNotification");

                    notification.show(response.message || "Archived successfully.", "info");
                },
                error: function (xhr, status, error) {
                    console.error("Error archiving:", error);
                }
            });
        }

      <script id="template" type="text/x-kendo-template">
        <div id="detail-template-#=VehicleListId#"></div>
    </script>
    <script>


        function errorHandler(e) {
            if (e.errors) {
                var message = "Errors:\n";
                $.each(e.errors, function (key, value) {
                    if ('errors' in value) {
                        $.each(value.errors, function () {
                            message += this + "\n";
                        });
                    }
                });
                alert(message);
            }
        }

    </script>
    
        function onVehRequestEnd(e) {
            var notification = $("#notification").data("kendoNotification");

            if (e.type === "create" && e.response && Array.isArray(e.response.Data) && e.response.Data.length > 0) {
                var newId = e.response.Data[0].VehicleListId;
                kendo.alert("Record created with Estimate # <strong style='color:red'>" + newId + "</strong > ")
                // notification.success("<strong style='color:red;'>Record created with Vehicle ID: " + newId + "</strong>");
            } else if (e.type === "create") {
                notification.success("Record created successfully.");
            } else if (e.type === "update") {
                notification.success("Record updated.");
            } else if (e.type === "destroy") {
                notification.success("Record deleted.");
            }
        }

     
         function onRequestEnd(e, gridName) {
             console.warn('onRequestEnd - Grid name:', gridName);

             var grid = $("#" + gridName).data("kendoGrid");
            
            var notification = $("#notification").data("kendoNotification");
           // notification.success("onRequestEnd called - check grid name");
           console.warn('onRequestEnd - grid :', grid);
           
           
            console.warn('onRequestEnd - Resolved grid:', grid);

            if (!grid || !grid.dataSource) {
                console.error('onRequestEnd - or its dataSource is undefined. Skipping data reload.');
                return;
            }

            const reloadGrid = () => grid.dataSource.read();

            if (e.type === "create") {
                console.warn('onScRequestEnd - create');
                setTimeout(reloadGrid, 300);
                notification.success("Record created successfully.");
            } else if (e.type === "update") {
                console.warn('onScRequestEnd - update');
                setTimeout(reloadGrid, 300);
                notification.success("Record updated.");
            } else if (e.type === "destroy") {
                console.warn('onScRequestEnd - destroy');
                setTimeout(reloadGrid, 300);
                notification.success("Record deleted.");
            }
        }
        
    @* <script>
        function onLabourRequestEnd(e) {
            var notification = $("#notification").data("kendoNotification");
            notification.success(e.type);
            // Initialize notification FIRST

            if (e.type === "create") {
                var notification = $("#notification").data("kendoNotification");
                notification.success("VEHICLE Record created successfully");
                //location.reload();
               // $("#LabourDetailsGrid_@ViewBag.PartNum").data("kendoGrid").dataSource.read(); //force refresh grid
            } else if (e.type === "update") {
                var notification = $("#notification").data("kendoNotification");
                notification.success("VEHICLE Record updated successfully");
                //location.reload();
               // $("#LabourDetailsGrid_@ViewBag.PartNum").data("kendoGrid").dataSource.read();//force refresh grid
            } else if (e.type === "destroy") {
                var notification = $("#notification").data("kendoNotification");
                notification.success("VEHICLE Record deleted successfully");
                //location.reload();
              //  $("#LabourDetailsGrid_@ViewBag.PartNum").data("kendoGrid").dataSource.read();
            }
        }
    </script> *@

    <script>
        function getAutoCompleteParams() {
            var input = $("input[data-role='autocomplete']:focus");
            return {
                columnName: input.attr("name"),
                searchText: input.val() || "" // Handle empty search text
            };
        }

        function getComboBoxParams() {
            var input = $(".k-combobox input.k-input:focus");
            return {
                columnName: input.attr("name")?.replace("_input", "").split('.').pop(),
                searchText: input.val() || ""
            };
        }

    </script>
    <script>
         function onSaveChanges(e) {
            var notification = $("#notification").data("kendoNotification");
           // notification.success("onSaveChanges called");
            const grid = $("#NscPartsMaterialDetailsRebuiltPartsGrid").data("kendoGrid");
            const row = $(e.currentTarget).closest("tr");
            const dataItem = grid.dataItem(row);
            // const needsRecalc = dataItem.get("needsRecalculation"); //ssk4
            const needsRecalc = grid.dataSource.data().some(item => item.needsRecalculation);
        }

       
   
   
    <script>
        // Initialize custom confirmation dialog
        var deleteDialog = $("#deleteConfirmationDialog").kendoWindow({
            width: "400px",
            title: "Confirm Delete",
            modal: true,
            visible: false,
            actions: ["Close"]
        }).data("kendoWindow");

        function showDeleteConfirmation(e) {
            console.log("inside showDeleteConfirmation");
            e.preventDefault();

            var $btn = $(e.currentTarget);
            var gridId = $btn.data("grid");
            var deleteUrl = $btn.data("url");
            var idField = $btn.data("id-field");
            var gridType = $btn.data("grid-type");
            var grid = $("#" + gridId).data("kendoGrid");

            var dataItem = grid.dataItem($btn.closest("tr"));

            var $dialog = $("#deleteConfirmationDialog");
            console.log("inside showDeleteConfirmation -2");
            $dialog.data("grid", grid);
            $dialog.data("dataItem", dataItem);
            $dialog.data("url", deleteUrl);
            $dialog.data("idField", idField);

            $dialog.data("gridType", gridType); // add gridType
            var rebuiltStockNumField = $btn.data("rebuiltstocknum-field"); //ssk4
            $dialog.data("rebuiltStockNumField", rebuiltStockNumField); //ssk4
            console.log("inside showDeleteConfirmation gridType = ", gridType);
            deleteDialog.center().open();
        }


        $(document).on("click", "#deleteConfirmationDialog .confirm-btn", function () {
            console.log("inside deleteConfirmationDialog - 1");
            var $dialog = $("#deleteConfirmationDialog");
            var grid = $dialog.data("grid");
            var dataItem = $dialog.data("dataItem");
            var deleteUrl = $dialog.data("url");
            console.log("deleteUrl=", deleteUrl);
            var idField = $dialog.data("idField");
            //  var parentPartId = $dialog.data("parentGridId");
            // var mmsstockcodeField = $dialog.data("mmsstockcodeField");
            var gridType = $dialog.data("gridType");
            var notification = $("#notification").data("kendoNotification");
            console.log("******* inside deleteConfirmationDialog - 2");
            console.log("idField : ", idField);
            
            var dataToSend = {};
            //  var mmsValue = dataItem[mmsstockcodeField] || "";
            dataToSend[idField] = dataItem[idField];
            console.log("***** parentGridId :", parentGridId);
            //  dataToSend[parentPartId] = dataItem[parentGridId];
            dataToSend["parentPartId"] = parentGridId;// dataItem[mmsValue];
            dataToSend["gridType"] = gridType; // static param
            var rebuiltStockNumField = $dialog.data("rebuiltStockNumField"); // ssk4
            dataToSend["rebuiltStockNum"] = dataItem[rebuiltStockNumField]; // ssk4

            $.ajax({
                url: deleteUrl,
                type: 'POST',
                data: dataToSend,
                success: function () {
                    // grid.dataSource.remove(dataItem);
                    grid.dataSource.read(); //force refresh grid
                    notification.success("Record deleted successfully");
                    deleteDialog.close();
                },
                error: function (xhr) {
                    notification.error("Delete failed: " + xhr.responseText);
                    deleteDialog.close();
                }
            });
        });
        $(document).on("click", "#deleteConfirmationDialog .cancel-btn", function () {
            deleteDialog.close();
        });
    </script>

    <script>
        // Track unsaved changes state
        let unsavedChangesExist = false;

        function onLabourGridDataBound(e) {
             console.warn('onLabourGridDataBound');
            const grid = e.sender;
            const ds = grid.dataSource;
            unsavedChangesExist = false;

            // Clear previous styling
            $(".unsaved-row, .unsaved-cell, .unsaved-badge").remove();

            // Apply new styling
            ds.view().forEach(item => {
                const row = grid.tbody.find(`tr[data-uid='${item.uid}']`);

                if (item.dirty || item.isNew()) {
                    // Add row class
                    row.addClass("unsaved-row");

                    // Add badge to first cell
                    const firstCell = row.find("td:first");
                    if (!firstCell.find(".unsaved-badge").length) {
                        firstCell.append(`<span class="unsaved-badge">UNSAVED</span>`);
                    }

                    // Highlight modified cells
                    Object.keys(item.modified || {}).forEach(field => {
                        row.find(`td[data-field='${field}']`)
                            .addClass("unsaved-cell");
                    });

                    unsavedChangesExist = true;
                }
            });

            // Update tab indicator
            const tabStrip = $("#vehicleTabStrip").data("kendoTabStrip");
            if (tabStrip?.items().length) {
                $(tabStrip.items()[0].element)
                    .find(".k-link")
                    .toggleClass("has-unsaved", unsavedChangesExist);
            }

            //ssk12 start - Disable Save/Add
            var gridName = grid.element.attr('id'); //  like "LabourDetailsGrid_123"
            var originalAddCommand = null;


            // Initialize only once
            if (!originalAddCommand) {
                originalAddCommand = grid.addRow;
            }

            // Modify add command behavior
            grid.addRow = function () {
                if (!grid.dataSource.hasChanges()) {
                    originalAddCommand.call(grid);
                }
            };

            grid.dataSource.bind("change", function () {
                updateToolbarButtons(gridName);

            });

            updateToolbarButtons(gridName);


            //ssk12 end - Disable Save/Add

        }


        function onLabourGridSave(e) {
            console.warn('onLabourGridSave');

            const grid = e.sender;
            const notification = $("#notification").data("kendoNotification");

            grid.one("dataBound", () => grid.refresh());

            notification.success("Changes saved successfully");

            // Retry refresh safely
            let attempts = 0;
            const maxAttempts = 5;

            function tryReload() {
                if (grid && grid.dataSource) {
                    if (!grid.dataSource.hasChanges()) {
                        grid.dataSource.read().then(() => {
                            unsavedChangesExist = false;
                            console.log("Grid refreshed successfully after save.");
                        });
                    } else {
                        console.warn("Changes pending, skipping dataSource.read() to avoid conflict.");
                    }
                } else if (attempts < maxAttempts) {
                    attempts++;
                    setTimeout(tryReload, 200);
                } else {
                    console.error("Failed to refresh grid — dataSource not ready.");
                }
            }

            tryReload();
        }

        function onGridEdit(e) {
            // Re-apply styles after edit
            const grid = e.sender;
            grid.one("dataBound", () => grid.refresh());
        }
    </script>
    <script>
        function onDetailExpand(e) {
            // Add class to highlight row
            console.log("onDetailExpand");
            const grid = e.sender;
            const ds = grid.dataSource;
            console.log(e.masterRow);
            //$(e.masterRow).addClass("selected-row");
            $(e.masterRow).addClass("selected-row");

        }

        function onDetailCollapse(e) {
            // Remove highlight when detail is collapsed
            console.log("onDetailCollapse");
            const grid = e.sender;
            const ds = grid.dataSource;

            $(e.masterRow).removeClass("selected-row");

        }
    </script>
    <script>
        function onVehGridSave(e) {
            if (e.model.isNew()) {
                const row = e.sender.tbody.find(`[data-uid='${e.model.uid}']`);
                row.addClass("newly-added-row");
            }
        }

        function onVehGridDataBound(e) {
            // Maintain new row styling after paging/sorting
            e.sender.items().each(function () {
                const dataItem = e.sender.dataItem(this);
                if (dataItem.isNew()) {
                    $(this).addClass("newly-added-row");
                }
            });
            //ssk12 - Add/Save buttons
            const grid = e.sender;
            const ds = grid.dataSource;
            unsavedChangesExist = false;

            // Clear previous styling
            $(".unsaved-row, .unsaved-cell, .unsaved-badge").remove();

            // Apply new styling
            ds.view().forEach(item => {
                const row = grid.tbody.find(`tr[data-uid='${item.uid}']`);

                if (item.dirty || item.isNew()) {
                    // Add row class
                    row.addClass("unsaved-row");

                    // Add badge to first cell
                    const firstCell = row.find("td:first");
                    if (!firstCell.find(".unsaved-badge").length) {
                        firstCell.append(`<span class="unsaved-badge">UNSAVED</span>`);
                    }

                    // Highlight modified cells
                    Object.keys(item.modified || {}).forEach(field => {
                        row.find(`td[data-field='${field}']`)
                            .addClass("unsaved-cell");
                    });

                    unsavedChangesExist = true;
                }
            });

            // Update tab indicator
            const tabStrip = $("#vehicleTabStrip").data("kendoTabStrip");
            if (tabStrip?.items().length) {
                $(tabStrip.items()[0].element)
                    .find(".k-link")
                    .toggleClass("has-unsaved", unsavedChangesExist);
            }

            //ssk12 start - Disable Save/Add
            var gridName = grid.element.attr('id'); //  like "LabourDetailsGrid_123"
            var originalAddCommand = null;


            // Initialize only once
            if (!originalAddCommand) {
                originalAddCommand = grid.addRow;
            }

            // Modify add command behavior
            grid.addRow = function () {
                if (!grid.dataSource.hasChanges()) {
                    originalAddCommand.call(grid);
                }
            };

            grid.dataSource.bind("change", function () {
                updateToolbarButtons(gridName);
            });

            updateToolbarButtons(gridName);

            //ssk12 end - Disable Save/Add
        }
    </script>
    <script>
        var hoverTimer;

        $(document).on("mouseenter", ".stock-code-cell", function () {
            var $cell = $(this);
            var grid = $cell.closest(".k-grid").data("kendoGrid");
            var dataItem = grid.dataItem($cell.closest("tr"));

            if (!dataItem || !dataItem.MMSStockCode) return;

            // Start timer so we don't instantly show the dialog
            hoverTimer = setTimeout(function () {
                fetchPartDetails(dataItem.MMSStockCode);
            }, 500); // half-second delay before showing
        });

        $(document).on("mouseleave", ".stock-code-cell", function () {
            clearTimeout(hoverTimer);
        });

        function fetchPartDetails(mmsStockCode) {
            var notification = $("#notification").data("kendoNotification");

            $.ajax({
                url: '@Url.Action("GetScPartDetails", "ScPartsUsedInEstimates")',
                data: { mmsStockCode: mmsStockCode },
                beforeSend: function () {
                    notification.show("Fetching part details...", "info");
                },
                success: function (response) {
                    if (response && response.PartType && response.DetailedDesc) {
                        var dialog = $("#partDetailsDialog").data("kendoDialog");
                        dialog.content(`
                                                        <div style="padding: 10px;">
                                                            <p><strong>Part Type:</strong> ${response.PartType}</p>
                                                            <p><strong>Part Description:</strong> ${response.DetailedDesc}</p>
                                                            <p><strong>Part Unit CostCentre ($/unit):</strong> ${response.UnitCost}</p>
                                                        </div>
                                                    `);
                        dialog.open();
                    } else {
                        notification.show("No matching parts found for this Stock Code", "warning");
                    }
                },
                error: function (xhr) {
                    var errorMessage = xhr.status === 404
                        ? "Stock Code not found in system"
                        : "Error retrieving part details";
                    notification.show(errorMessage, "error");
                }
            });
        }
    </script>

    <script>
        function getSupplierNameParams() {
            var grid = $("#NscPartsMaterialDetailsRebuiltPartsGrid").data("kendoGrid");
            var row = grid.editable ? grid.editable.element.closest("tr") : null;
            var data = row ? grid.dataItem(row) : null;
            console.log("**** data.OrigSuppNum :", data.OrigSuppNum);

            return {
                supplierNumber: data ? data.OrigSuppNum : ""
            };
        }


        function onNscPartsComboBoxSelect(e) {
            var supplierName = this.dataItem(e.item.index()).Text;

            var grid = $("#NscPartsMaterialDetailsRebuiltPartsGrid").data("kendoGrid");
            var row = this.element.closest("tr");
            var data = grid.dataItem(row);

            var supplierNumber = data ? data.OrigSuppNum : "";
            console.log("**** onNscPartsComboBoxSelect -  supplierNumber :", supplierNumber);

            data.set("OrigSupplierName", supplierName);

            if (supplierNumber && supplierName) {
                $.ajax({
                    url: '/AutoComplete/GetSupplierDetailsByName',
                    type: 'GET',
                    data: {
                        supplierNumber: supplierNumber,
                        supplierName: supplierName
                    },
                    success: function (result) {
                        if (result) {
                            data.set("OemPartCost", result.PartCost);
                            data.set("Description", result.Description);
                            data.set("KeyWord", result.KeyWord);
                        }
                    },
                    error: function () {
                        console.error("Failed to fetch supplier details.");
                    }
                });
            }
        }
    </script>
    <script>
        function onRebuiltStockNumSelect(e) {
            console.log("%%%%%% Inside onRebuiltStockNumSelect");
            var dataItem = this.dataItem(e.item.index());
            var rebuiltStockNum = dataItem.Text;


            var grid = $("#RbPartsMaterialDetailsRebuiltPartsGrid").data("kendoGrid");
            var row = this.element.closest("tr");
            var data = grid.dataItem(row);
            console.log("%%%%%% Inside onRebuiltStockNumSelect : rebuiltStockNum :", rebuiltStockNum);


            // Reset values first
            data.set("MmsStockCode", "");
            data.set("CoreCharge", "");
            data.set("Description", "");
            data.set("KeyWord", "");
            data.set("UnitCost", 0.0);

            if (rebuiltStockNum) {
                $.ajax({
                    url: "/AutoComplete/GetRbPartDetails",
                    type: "GET",
                    data: { rebuiltStockNum: rebuiltStockNum },
                    success: function (result) {
                        if (result) {
                            data.set("RebuiltStockNum", result.RebuiltStockNum || "");
                            data.set("MmsStockCode", result.MmsStockCode || "");
                            data.set("CoreCharge", result.CoreCharge || "");
                            data.set("Description", result.Description || "");
                            data.set("KeyWord", result.KeyWord || "");
                            data.set("UnitCost", result.UnitCost || 0.0);
                        }
                    },
                    error: function (xhr) {
                        console.error("Error loading part details:", xhr.responseText);
                    }
                });
            }
        }
    </script>
    <script>
        function onScPartNumSelect(e) {
            console.warn('inside onScPartNumSelect');
            const selectedValue = e.sender.value();

            const $input = $(e.sender.input);
            const $row = $input.closest("tr");
            const grid = $row.closest("[data-role='grid']").data("kendoGrid");

            if (!grid) {
                console.error("⛔ Could not resolve grid.");
                return;
            }

            const model = grid.dataItem($row);
            if (!model || !selectedValue) {
                console.warn("⚠️ No selected value or model.");
                return;
            }

            // Clear existing values if needed
            model.set("MmsStockCode", "");
            model.set("Description", "");
            model.set("KeyWord", "");
            model.set("CoreCharge", "");
            model.set("UnitCost", "");

            // ✅ Pass selected value to AJAX call
            $.ajax({
                url: "/AutoComplete/GetScPartDetails",
                type: "GET",
                data: { mmsStockCode: selectedValue },
                success: function (result) {
                    if (result) {
                        model.set("MmsStockCode", result.MmsStockCode || "");
                        model.set("DetailedDesc", result.DetailedDesc || "");
                        model.set("PartType", result.PartType || "");
                        model.set("OrigSupplierNum", result.OrigSupplierNum || "");
                        model.set("OrigSupplierName", result.OrigSupplierName || "");
                        model.set("CoreCost", result.PartCost || "");
                        model.set("UnitCost", result.UnitCost || "");
                    }


                    console.warn("✅ AJAX result:", result);
                },
                error: function (xhr) {
                    console.error("❌ Failed to fetch part details:", xhr.responseText);
                }
            });
        }

    </script>
    <script>
        //ssk 6 - disable save
        function onRbDataSourceChange(e) {
            var grid = $("#RbPartsMaterialDetailsRebuiltPartsGrid").data("kendoGrid");
            var saveButton = grid.wrapper.find(".k-grid-save-changes");

            if (grid.dataSource.hasChanges()) {
                saveButton.prop("disabled", false).removeClass("k-button-disabled"); // Enable Save
            } else {
                saveButton.prop("disabled", true).addClass("k-button-disabled"); // Disable Save + Add CSS class
            }
        }

        function onRbRequestEnd(e) {
            var notification = $("#notification").data("kendoNotification");
            var grid = $("#RbPartsMaterialDetailsRebuiltPartsGrid").data("kendoGrid");

            if (e.type === "create" && !e.response.Errors) {
                // Only refresh if create was successful (no errors)
                grid.dataSource.read();
                notification.success("Changes saved successfully");
            }

            if (e.type === "update" && !e.response.Errors) {
                // Optional: if you also want to clear after update
                grid.dataSource.read();
                notification.success("Changes updated successfully");
            }

            if (e.type === "destroy" && !e.response.Errors) {
                // Optional: reset after delete too
                grid.dataSource.read();
                notification.success("Changes deleted successfully");
            }
        }
    </script>
    <script>
      

    </script>
    <script>
        function onEditParts(e) {
            var model = e.model;

            //if (model.isNew()) return;

            setTimeout(function () {
                // Find the row being edited
                var editRow = e.container.closest("tr");

                // For each cell tagged to be locked
                editRow.find("td.auto-lock-column").each(function () {
                    var $td = $(this);

                    // Find the hidden input that Kendo wires up the ComboBox on
                    var $input = $td.find("input[data-role='combobox']");
                    console.warn('$input :', $input);
                    if ($input.length) {
                        var combo = $input.data("kendoComboBox");
                        console.warn('combo :', combo);
                        if (combo) {
                            combo.enable(false);
                            combo.wrapper.addClass("field-disabled");
                            combo.input.prop("readonly", true);
                        }
                    }
                });
            }, 30);
        }
    </script>

    <script>
        function onScPartChange(e) {
            // ssk9 duplicate rebuilt part
            var selectedValue = e.sender.value() ? e.sender.value().trim() : "";

            console.log("Entered value:", selectedValue);

            if (selectedValue) {
                console.warn("parentGridId : ", parentGridId);
                console.warn("@(ViewBag.PartNum) : ", @(ViewBag.PartNum));
                //var grid = $("#ScPartsMaterialDetailsRebuiltPartsGrid").data("kendoGrid");
                const $cell = $(this);
                console.warn('$cell :', $cell);
                //const grid = $("#RbPartsMaterialDetailsRebuiltPartsGrid").data("kendoGrid");
                const grid = $cell.closest(".k-grid").data("kendoGrid"); //dynamically get  gridname

                // Get current row and model
                var cell = $(e.sender.wrapper).closest("td");
                var row = cell.closest("tr");
                var editingModel = grid.dataItem(row);

                console.log("Editing model ID:", editingModel && editingModel.Id, "UID:", editingModel && editingModel.uid);

                var isDuplicate = false;

                grid.dataSource.data().forEach(function (item, index) {
                    console.log("Checking row", index, "value:", item.RebuiltStockNum, "UID:", item.uid);

                    if (item && item.MMSStockCode && item !== editingModel) {
                        var existingValue = item.MMSStockCode.trim().toLowerCase();
                        var newValue = selectedValue.toLowerCase();

                        console.log("Comparing existing:", existingValue, "with new:", newValue);

                        if (existingValue === newValue) {
                            console.log("DUPLICATE FOUND at row", index);
                            isDuplicate = true;
                        }
                    }
                });

                if (isDuplicate) {
                    kendo.confirm("Stock Coded Part already exists!").then(function () {
                        setTimeout(function () {
                            grid.closeCell(cell);
                            grid.cancelChanges();
                        }, 100);
                    }, function () {
                        setTimeout(function () {
                            grid.closeCell(cell);
                            grid.cancelChanges();
                        }, 100);
                    });
                }
            }
        }
    </script>
    <script>
        function onRebuiltStockNumChange(e) {
            // ssk9 duplicate rebuilt part
            var selectedValue = e.sender.value() ? e.sender.value().trim() : "";

            console.log("Entered value:", selectedValue);

            if (selectedValue) {
                var grid = $("#RbPartsMaterialDetailsRebuiltPartsGrid").data("kendoGrid");

                // Get current row and model
                var cell = $(e.sender.wrapper).closest("td");
                var row = cell.closest("tr");
                var editingModel = grid.dataItem(row);

                console.log("Editing model ID:", editingModel && editingModel.Id, "UID:", editingModel && editingModel.uid);

                var isDuplicate = false;

                grid.dataSource.data().forEach(function (item, index) {
                    console.log("Checking row", index, "value:", item.RebuiltStockNum, "UID:", item.uid);

                    if (item && item.RebuiltStockNum && item !== editingModel) {
                        var existingValue = item.RebuiltStockNum.trim().toLowerCase();
                        var newValue = selectedValue.toLowerCase();

                        console.log("Comparing existing:", existingValue, "with new:", newValue);

                        if (existingValue === newValue) {
                            console.log("DUPLICATE FOUND at row", index);
                            isDuplicate = true;
                        }
                    }
                });

                if (isDuplicate) {
                    kendo.confirm("Rebuilt Part already exists!").then(function () {
                        setTimeout(function () {
                            grid.closeCell(cell);
                            grid.cancelChanges();
                        }, 100);
                    }, function () {
                        setTimeout(function () {
                            grid.closeCell(cell);
                            grid.cancelChanges();
                        }, 100);
                    });
                }
            }
        }
    </script>
    <script>
      
    </script>
    <script>
        function onNscGridDataBound(e) {
            const grid = e.sender;
            const ds = grid.dataSource;
            unsavedChangesExist = false;

            // Clear previous styling
            $(".unsaved-row, .unsaved-cell, .unsaved-badge").remove();

            // Apply new styling
            ds.view().forEach(item => {
                const row = grid.tbody.find(`tr[data-uid='${item.uid}']`);

                if (item.dirty || item.isNew()) {
                    // Add row class
                    row.addClass("unsaved-row");

                    // Add badge to first cell
                    const firstCell = row.find("td:first");
                    if (!firstCell.find(".unsaved-badge").length) {
                        firstCell.append(`<span class="unsaved-badge">UNSAVED</span>`);
                    }

                    // Highlight modified cells
                    Object.keys(item.modified || {}).forEach(field => {
                        row.find(`td[data-field='${field}']`)
                            .addClass("unsaved-cell");
                    });

                    unsavedChangesExist = true;
                }
            });

            // Update tab indicator
            const tabStrip = $("#vehicleTabStrip").data("kendoTabStrip");
            if (tabStrip?.items().length) {
                $(tabStrip.items()[0].element)
                    .find(".k-link")
                    .toggleClass("has-unsaved", unsavedChangesExist);
            }

            //ssk12 start - Disable Save/Add
            var gridName = grid.element.attr('id'); //  like "LabourDetailsGrid_123"
            var originalAddCommand = null;


            // Initialize only once
            if (!originalAddCommand) {
                originalAddCommand = grid.addRow;
            }

            // Modify add command behavior
            grid.addRow = function () {
                if (!grid.dataSource.hasChanges()) {
                    originalAddCommand.call(grid);
                }
            };

            grid.dataSource.bind("change", function () {
                updateToolbarButtons(gridName);
            });

            updateToolbarButtons(gridName);

            //ssk12 end - Disable Save/Add

        }

    </script>
    <script>
        function onScGridDataBound(e) {
            const grid = e.sender;
            const ds = grid.dataSource;
            unsavedChangesExist = false;

            // Clear previous styling
            $(".unsaved-row, .unsaved-cell, .unsaved-badge").remove();

            // Apply new styling
            ds.view().forEach(item => {
                const row = grid.tbody.find(`tr[data-uid='${item.uid}']`);

                if (item.dirty || item.isNew()) {
                    // Add row class
                    row.addClass("unsaved-row");

                    // Add badge to first cell
                    const firstCell = row.find("td:first");
                    if (!firstCell.find(".unsaved-badge").length) {
                        firstCell.append(`<span class="unsaved-badge">UNSAVED</span>`);
                    }

                    // Highlight modified cells
                    Object.keys(item.modified || {}).forEach(field => {
                        row.find(`td[data-field='${field}']`)
                            .addClass("unsaved-cell");
                    });

                    unsavedChangesExist = true;
                }
            });

            // Update tab indicator
            const tabStrip = $("#vehicleTabStrip").data("kendoTabStrip");
            if (tabStrip?.items().length) {
                $(tabStrip.items()[0].element)
                    .find(".k-link")
                    .toggleClass("has-unsaved", unsavedChangesExist);
            }

            //ssk12 start - Disable Save/Add
            var gridName = grid.element.attr('id'); //  like "LabourDetailsGrid_123"
            var originalAddCommand = null;


            // Initialize only once
            if (!originalAddCommand) {
                originalAddCommand = grid.addRow;
            }

            // Modify add command behavior
            grid.addRow = function () {
                if (!grid.dataSource.hasChanges()) {
                    originalAddCommand.call(grid);
                }
            };

            grid.dataSource.bind("change", function () {
                updateToolbarButtons(gridName);
            });

            updateToolbarButtons(gridName);

            //ssk12 end - Disable Save/Add

        }

    </script>
    <script>
        function onGridDataBound(e) {
            var notification = $("#notification").data("kendoNotification");
           // notification.success("onGridDataBound called");
            console.warn('onGridDataBound called');

            const grid = e.sender;
            const ds = grid.dataSource;
            const gridType = grid.wrapper.attr("data-grid-type");
            const dataItems = ds.view();

            console.warn("📋 Grid Type:", gridType);
            console.warn("📋 Data Items:", dataItems);

            // --- Unsaved row styling ---
            unsavedChangesExist = false;
            $(".unsaved-row, .unsaved-cell, .unsaved-badge").remove();

            dataItems.forEach(item => {
                const row = grid.tbody.find(`tr[data-uid='${item.uid}']`);
                console.warn("🧱 Processing row for:", item, row);

                if (item.dirty || item.isNew()) {
                    row.addClass("unsaved-row");

                    const firstCell = row.find("td:first");
                    if (!firstCell.find(".unsaved-badge").length) {
                        firstCell.append(`<span class="unsaved-badge">UNSAVED</span>`);
                    }

                    Object.keys(item.modified || {}).forEach(field => {
                        row.find(`td[data-field='${field}']`).addClass("unsaved-cell");
                    });

                    unsavedChangesExist = true;
                }
            });

            const tabStrip = $("#vehicleTabStrip").data("kendoTabStrip");
            if (tabStrip?.items().length) {
                $(tabStrip.items()[0].element)
                    .find(".k-link")
                    .toggleClass("has-unsaved", unsavedChangesExist);
            }

            const gridName = grid.element.attr('id');
            let originalAddCommand = grid.addRow;

            grid.addRow = function () {
                if (!grid.dataSource.hasChanges()) {
                    originalAddCommand.call(grid);
                }
            };

            grid.dataSource.bind("change", function () {
                updateToolbarButtons(gridName);
            });

            updateToolbarButtons(gridName);

            // 🚨 New: Bind click handler to detect when user clicks into editable ComboBox field
            grid.tbody.off("click.combo-lock").on("click.combo-lock", "td", function () {
                setTimeout(() => {
                    const $cell = $(this);
                    const $input = $cell.find("input[data-role='combobox'][data-lock-map].auto-lock-column");
                    if (!$input.length) return;

                    const gridType = grid.wrapper.attr("data-grid-type");
                    const combo = $input.data("kendoComboBox");
                    const fieldName = $input.attr("name");
                    const lockMap = $input.attr("data-lock-map");
                    const row = $input.closest("tr");
                    const model = grid.dataItem(row);

                    console.warn(`🧩 Clicked ComboBox Cell → Field: ${fieldName}`);
                    console.warn(`🔍 LockMap: ${lockMap}`);
                    console.warn(`🔍 GridType: ${gridType}`);
                    console.warn(`🔍 Model:`, model);

                    if (!combo || !lockMap || !gridType || !model) return;

                    const rules = lockMap.split(";").reduce((acc, pair) => {
                        const [key, val] = pair.split(":");
                        if (key && val) acc[key.trim()] = val.trim();
                        return acc;
                    }, {});

                    const lockRule = rules[gridType] || "none";
                    let shouldLock = false;

                    if (lockRule === "always") shouldLock = true;
                    else if (lockRule === "notNew" && !model.isNew?.()) shouldLock = true;
                    else if (lockRule === "newOnly" && model.isNew?.()) shouldLock = true;

                    console.warn(`🔐 Field '${fieldName}' in '${gridType}': ${lockRule} → ${shouldLock ? "LOCKED" : "EDITABLE"}`);

                    if (shouldLock) {
                        combo.enable(false);
                        combo.wrapper.addClass("field-disabled");
                        combo.input.prop("readonly", true);
                    }
                }, 50); // short delay ensures combo is rendered
            });
        }
    </script>
  
    <script>
        //san17 - onCopyEstimateClick
        function onCopyEstimateClick(e) {
            e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            $("#vehicleListId ").val(dataItem.VehicleListId);
            $("#oldprojDesc  ").val(dataItem.ProjDesc);
            $("#oldVehSeriesCode").val(dataItem.VehSeriesCode);
            $("#newVehSeriesCode").val("");
            $("#newprojDesc").val("");
            $("#copyEstimateDialog").data("kendoWindow").center().open();
        }
    </script>
    <script>
     
    </script>
    <script>
        function makeComboBoxReadOnly(e) {
            console.warn('makeComboBoxReadOnly');
            e.sender.input.attr("readonly", true);
        }
    </script>
    <script>
        function onComboBoxDataBound(e) {
            // Check if no data is available after filtering
            var notification = $("#notification").data("kendoNotification");

            if (e.sender.dataSource.total() === 0) {
                e.sender.value(null); // Clear the input
                e.sender.input.val(""); // Clear the text
                setTimeout(function () {
                    notification.show("Invalid Selection! Please choose from the list.", "error");
                    //alert("Invalid Selection! Please choose from the list.");
                }, 100);
            }
        }

        function onComboBoxChange(e) {
            var combo = e.sender;
            if (combo.selectedIndex === -1) {
                combo.value(null);
                combo.input.val("");
                combo.trigger("change");
                // Optional: Show error message
                $("#validationMessage").text("Invalid selection!").css("color", "red");
            } else {
                $("#validationMessage").text("");
            }
        }
        function onVehEdit(e) {
            console.warn('onVehEdit');
            // Maintain new row styling after paging/sorting
            e.sender.items().each(function () {
                const dataItem = e.sender.dataItem(this);
                if (dataItem.isNew()) {
                    $(this).addClass("newly-added-row");
                }
            });
            //ssk12 - Add/Save buttons
            const grid = e.sender;
            const ds = grid.dataSource;
            unsavedChangesExist = false;

            // Clear previous styling
            $(".unsaved-row, .unsaved-cell, .unsaved-badge").remove();

            // Apply new styling
            ds.view().forEach(item => {
                const row = grid.tbody.find(`tr[data-uid='${item.uid}']`);
                console.warn('item.dirty :', item.dirty);
                console.warn('item.isNew() :', item.isNew());
                if (item.dirty || item.isNew()) {
                    // Add row class
                    console.warn('onEdit - item.dirty || item.isNew()');
                    row.addClass("unsaved-row");

                    // Add badge to first cell
                    const firstCell = row.find("td:first");
                    if (!firstCell.find(".unsaved-badge").length) {
                        firstCell.append(`<span class="unsaved-badge">UNSAVED</span>`);
                    }

                    // Highlight modified cells
                    Object.keys(item.modified || {}).forEach(field => {
                        row.find(`td[data-field='${field}']`)
                            .addClass("unsaved-cell");
                    });

                    unsavedChangesExist = true;
                }
            });

            // Update tab indicator
            const tabStrip = $("#vehicleTabStrip").data("kendoTabStrip");
            if (tabStrip?.items().length) {
                $(tabStrip.items()[0].element)
                    .find(".k-link")
                    .toggleClass("has-unsaved", unsavedChangesExist);
            }

            //ssk12 start - Disable Save/Add
            var gridName = grid.element.attr('id'); //  like "LabourDetailsGrid_123"
            var originalAddCommand = null;


            // Initialize only once
            if (!originalAddCommand) {
                originalAddCommand = grid.addRow;
            }

            // Modify add command behavior
            grid.addRow = function () {
                if (!grid.dataSource.hasChanges()) {
                    originalAddCommand.call(grid);
                }
            };

            grid.dataSource.bind("change", function () {
                updateToolbarButtons(gridName);
            });

            updateToolbarButtons(gridName);

            //ssk12 end - Disable Save/Add
        }
    </script>
    <script>
        function validateCellInput(value, rules) {
            for (let rule of rules) {
                switch (rule.trim()) {
                    case 'MustBeNumeric':
                        if (!/^\d+(\.\d+)?$/.test(value)) {
                            return "Value must be numeric.";
                        }
                        break;
                    case 'MustBeAlphaCharacters':
                        if (!/^[A-Za-z]+$/.test(value)) {
                            return "Only alphabetic characters are allowed.";
                        }
                        break;
                    case 'NoSpecialCharacters':
                        if (/[^a-zA-Z0-9\s]/.test(value)) {
                            return "Special characters are not allowed.";
                        }
                        break;
                    case 'MustBePositive':
                        if (parseFloat(value) <= 0) {
                            return "Value must be positive.";
                        }
                        break;
                    default:
                        break;
                }
            }
            return null;
        }
    </script>
    <script>
        //ssk23 - validation
        let isUpdating = false;

        function onGridCellSave(e) {
            notifyValidationError("onGridCellSave");
            var column = e.column;
            var field = e.container.find("input").attr("name");
            var cell = e.container;
            var value = e.values[field];
            
             /* start validation logic */
            // Skip if this is a command column or field is not present
            if (!field || !cell) return;

            // Find the cell element inside the grid (it's wrapped in a <td>)
            var cellElement = cell.closest("td");
            if (!cellElement || !cellElement.length) return;

            // Get the business rule attribute from the cell
            var brData = cellElement.attr("data-br");
            if (!brData) return; // no validation rules defined for this cell

            var value = e.values[field];
            if (value == null || value === "") return; // optional: allow empty

            var rules = brData.split(',');
            var errorMessage = validateCellInput(value, rules);

            if (errorMessage) {
                notifyValidationError(errorMessage);
                // var notification = $("#gridNotification").data("kendoNotification");
                // if (notification) {
                //     notification.show(errorMessage, "error");
                // } else {
                //     alert(errorMessage); // fallback
                // }

                e.preventDefault(); // stop the save
            }

            /* end validation logic */
                        
        }

        function notifyValidationError(message) {
            const notification = $("#notification").data("kendoNotification");
            if (notification) {
                notification.error(message);
            } else {
                alert(message); // fallback
            }
        }

        function clearCell(container) {
            const input = container.find("input");
            input.val("");
            input.focus();
        }
    </script>
    <script>
        function onGridCellClose(e) {
            console.log("onGridCellClose");
            var field = e.container.find("input").attr("name");
            const model = e.model;

            if (!["Qty", "UnitCost", "CoreCost", "Percentage"].includes(field)) {
                return;
            }

            setTimeout(() => {
                const qty = parseFloat(model.Qty) || 0;
                const unitCost = parseFloat(model.UnitCost) || 0;
                const coreCost = parseFloat(model.CoreCost) || 0;
                const percentage = parseFloat(model.Percentage) || 0;

                const coreCharge = qty * coreCost * (percentage / 100);
                const totalUnitCost = qty * unitCost * (percentage / 100);
                const totalCost = totalUnitCost + coreCharge;

                model.set("CoreCharge", coreCharge);
                model.set("TotalCost", totalCost);

                const grid = e.sender;
                const row = grid.items().filter(`[data-uid='${model.uid}']`);
                const totalCostIndex = grid.columns.findIndex(c => c.field === "TotalCost");

                if (totalCostIndex !== -1 && row.length) {
                    const cell = row.children().eq(totalCostIndex);
                    const formatted = kendo.toString(totalCost, "c2");
                    cell.html(kendo.htmlEncode(formatted));
                }

                console.log("TotalCost recalculated and cell updated:", totalCost);
            }, 0);
        }
    </script>
    <script>
       
      
    
    </script>
}

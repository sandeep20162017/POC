
üîß PROJECT STRUCTURE
bash
Copy
Edit
/Views/Vehicles
    Index.cshtml          # Main tabstrip page
    VehiclesIndex.cshtml  # Active Vehicles grid
    ArchivedVehiclesIndex.cshtml # Archived Vehicles grid

/Views/Shared
    _VehicleTabs.cshtml
    _LabourDetails.cshtml
    _LabourHourSummary.cshtml
    _MaterialCostSummary.cshtml
    _ScParts.cshtml
    _NscParts.cshtml
    _RbParts.cshtml
    _TotalCost.cshtml

/Models
    VehicleViewModel.cs
    ArchivedVehicleViewModel.cs
    VehicleTabsViewModel.cs
    LabourDetailsRebuiltPartsViewModel.cs
üîß 1Ô∏è‚É£ Index.cshtml (main entry point)
csharp
Copy
Edit
@(Html.Kendo().TabStrip()
    .Name("vehicleTabStrip")
    .Animation(animation => animation.Open(effect => effect.Fade(FadeDirection.In)))
    .Items(tabstrip =>
    {
        tabstrip.Add().Text("Vehicles").Selected(true).LoadContentFrom("VehiclesIndex", "Vehicles");
        tabstrip.Add().Text("Archived Vehicles").LoadContentFrom("ArchivedVehiclesIndex", "Vehicles");
    })
)
‚úÖ This is your master tabstrip page. Both tabs load server-side views.

üîß 2Ô∏è‚É£ VehiclesIndex.cshtml (Active Vehicles Grid)
csharp
Copy
Edit
@(Html.Kendo().Grid<VehicleViewModel>()
    .Name("VehicleGrid")
    .Columns(columns =>
    {
        columns.Bound(c => c.VehicleListId).Title("Estimate #");
        columns.Bound(c => c.VehicleName).Title("Vehicle");
        columns.Bound(c => c.ModifiedLastBy).Title("Modified By");
        columns.Bound(c => c.ModifiedLastDate).Title("Modified Date");
    })
    .ClientDetailTemplateId("template")
    .DataSource(ds => ds.Ajax().Read(read => read.Url(Url.Action("GetVehicles", "Vehicles"))))
    .Pageable()
    .Sortable()
)

<script id="template" type="text/x-kendo-template">
    <div id="detail-template-#=VehicleListId#"></div>
</script>

@section Scripts {
<script>

$(document).ready(function () {

    var grid = $("#VehicleGrid").data("kendoGrid");

    grid.bind("detailExpand", function (e) {
        grid.tbody.children("tr.k-master-row").each(function () {
            if (this !== e.masterRow[0]) {
                grid.collapseRow($(this));
            }
        });
    });

    grid.bind("detailInit", function (e) {
        console.error("Inside detailInit for VehicleListId:", e.data.VehicleListId);

        const vehicleListId = e.data.VehicleListId;

        var tabUrlLabourDetail = '@Url.Action("LabourDetailsPartial", "Vehicles")' + '?id=' + vehicleListId;
        var tabUrlLabourHourSummary = '@Url.Action("LabourHourSummaryPartial", "Vehicles")' + '?id=' + vehicleListId;
        var tabUrlMaterialCostSummary = '@Url.Action("MaterialCostSummaryPartial", "Vehicles")' + '?id=' + vehicleListId;
        var tabScPartDetail = '@Url.Action("ScPartsUsedInEstimates", "Vehicles")' + '?id=' + vehicleListId;
        var tabUrlNscDetail = '@Url.Action("NscDetailsPartial", "Vehicles")' + '?id=' + vehicleListId;
        var tabUrlRbPartDetail = '@Url.Action("RbPartsPartial", "Vehicles")' + '?id=' + vehicleListId;
        var tabUrlTotalCost = '@Url.Action("TotalCostPartial", "Vehicles")' + '?id=' + vehicleListId;

        var container = e.detailCell.find("#detail-template-" + vehicleListId);
        container.html(`
            <div id="tabstrip-container-${vehicleListId}">
                <ul>
                    <li class="k-state-active">Labour Details</li>
                    <li>Labour Hour</li>
                    <li>Material Cost</li>
                    <li>Stock Coded Parts</li>
                    <li>Non Stock Coded Parts</li>
                    <li>Rebuilt Parts</li>
                    <li>Total Cost</li>
                </ul>
                <div id="labour-details-content-${vehicleListId}"></div>
                <div id="labour-hour-summary-content-${vehicleListId}"></div>
                <div id="material-cost-summary-content-${vehicleListId}"></div>
                <div id="material-details-content-${vehicleListId}"></div>
                <div id="nsc-details-content-${vehicleListId}"></div>
                <div id="rb-part-details-content-${vehicleListId}"></div>
                <div id="total-cost-content-${vehicleListId}"></div>
            </div>
        `);

        var tabStrip = $("#tabstrip-container-" + vehicleListId).kendoTabStrip({
            animation: { open: { effects: "fadeIn" } },
            select: function (e) {

                var index = $(e.item).index();
                console.warn("Selected tab index:", index);
                var tabMap = [
                    { url: tabUrlLabourDetail, target: `#labour-details-content-${vehicleListId}` },
                    { url: tabUrlLabourHourSummary, target: `#labour-hour-summary-content-${vehicleListId}` },
                    { url: tabUrlMaterialCostSummary, target: `#material-cost-summary-content-${vehicleListId}` },
                    { url: tabScPartDetail, target: `#material-details-content-${vehicleListId}` },
                    { url: tabUrlNscDetail, target: `#nsc-details-content-${vehicleListId}` },
                    { url: tabUrlRbPartDetail, target: `#rb-part-details-content-${vehicleListId}` },
                    { url: tabUrlTotalCost, target: `#total-cost-content-${vehicleListId}` }
                ];

                var selected = tabMap[index];
                if (selected) {
                    console.log("Loading tab:", selected.url);
                    $.get(selected.url)
                        .done(function (data) {
                            $(selected.target).html(data);
                            kendo.destroy($(selected.target));
                            kendo.init($(selected.target));
                        });
                }
            }
        }).data("kendoTabStrip");

        // Load first tab
        $.get(tabUrlLabourDetail)
            .done(function (data) {
                $(`#labour-details-content-${vehicleListId}`).html(data);
                kendo.destroy($(`#labour-details-content-${vehicleListId}`));
                kendo.init($(`#labour-details-content-${vehicleListId}`));
            });
    });

});

</script>
}
üëâ The ArchivedVehiclesIndex.cshtml will be nearly identical, except:

Use ArchivedVehicleGrid as name

Use ArchVehicleListId instead of VehicleListId

üîß 3Ô∏è‚É£ Partial Views
‚úÖ All partial views you already have (_LabourDetails, _LabourHourSummary, etc) remain unchanged, and continue to work.

‚úÖ Each partial view receives either:

csharp
Copy
Edit
@model VehicleTabsViewModel
And inside controller you just pass:

csharp
Copy
Edit
return PartialView("_LabourDetails", new VehicleTabsViewModel { ArchVehicleListId = id });
‚úÖ This is exactly how we keep your shared partial views working for both tabs.

üîß 4Ô∏è‚É£ Controllers
‚úÖ VehiclesController

csharp
Copy
Edit
public IActionResult GetVehicles([DataSourceRequest] DataSourceRequest request)
{
    var vehicles = _vehicleService.GetActiveVehicles();
    return Json(vehicles.ToDataSourceResult(request));
}
‚úÖ Same for ArchivedVehiclesController.

‚úÖ All your partial controllers stay the same.
==============================================

üîë BUT in your case:
‚úÖ Each partial view has its own dedicated model that matches the data for that tab.

For example:

Partial	Model
_LabourDetails.cshtml	IEnumerable<LabourDetailsRebuiltPartsViewModel>
_MaterialCostSummary.cshtml	IEnumerable<MaterialCostViewModel>
_ScParts.cshtml	IEnumerable<ScPartsViewModel>
_NscParts.cshtml	IEnumerable<NscPartsViewModel>
_RbParts.cshtml	IEnumerable<RbPartsViewModel>
_TotalCost.cshtml	IEnumerable<TotalCostViewModel>

üîë So in your real solution:
‚úÖ Each partial view continues to use its own full @model declaration:

Example:

csharp
Copy
Edit
@model IEnumerable<LabourDetailsRebuiltPartsViewModel>

@(Html.Kendo().Grid<LabourDetailsRebuiltPartsViewModel>()
    .Name($"LabourDetailsGrid_{Model.VehicleListId}")
    ...
‚úÖ The only reason I brought up VehicleTabsViewModel is if you wanted to pass just the ID to the partial view to generate unique IDs in Razor.

üîë But since you are already loading the full partial via AJAX, and each partial loads its own data via AJAX grid Read() calls, you don‚Äôt need to pass full model to partial.
üëâ You only need to pass ID (VehicleListId or ArchVehicleListId) into the partial view via query string in URL.

The grid inside each partial will call its Read() action with that ID.

üîß üîë ‚úÖ THE REAL FINAL FORM FOR YOU:
‚úÖ Each partial stays like this:

Example: _LabourDetails.cshtml
csharp
Copy
Edit
@model IEnumerable<LabourDetailsRebuiltPartsViewModel>

@(Html.Kendo().Grid<LabourDetailsRebuiltPartsViewModel>()
    .Name($"LabourDetailsGrid_{ViewBag.VehicleListId}")
    .DataSource(dataSource => dataSource
        .Ajax()
        .Read(read => read.Url(Url.Action("GetLabourDetails", "LabourDetails", new { id = ViewBag.VehicleListId })))
        .Create(create => create.Url(Url.Action("CreateLabourDetail", "LabourDetails", new { id = ViewBag.VehicleListId })))
        .Update(update => update.Url(Url.Action("UpdateLabourDetail", "LabourDetails", new { id = ViewBag.VehicleListId })))
        .Destroy(delete => delete.Url(Url.Action("DeleteLabourDetail", "LabourDetails", new { id = ViewBag.VehicleListId })))
    )
)
üîë ‚úÖ How do we pass VehicleListId into ViewBag for Razor inside the partial?
üëâ In your controller action that serves the partial:

csharp
Copy
Edit
public IActionResult LabourDetailsPartial(string id)
{
    ViewBag.VehicleListId = id;
    return PartialView("_LabourDetails");
}
‚úÖ Now Razor has the ID it needs to generate unique grid name: LabourDetailsGrid_{ViewBag.VehicleListId}
====================================
<div id="vehicleTabStrip">
    <ul>
        <li class="k-state-active">Vehicles</li>
        <li>Archived Vehicles</li>
    </ul>
    <div>
        @await Html.PartialAsync("VehiclesIndex")
    </div>
    <div>
        @await Html.PartialAsync("ArchivedVehiclesIndex")
    </div>
</div>

@section Scripts {
    <script>
        $("#vehicleTabStrip").kendoTabStrip({
            animation: { open: { effects: "fadeIn" } }
        });
    </script>
}

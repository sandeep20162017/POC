You don't use .DetailTemplate() â€” instead, you configure detail templates entirely via:

javascript
Copy
Edit
grid.bind("detailInit", function(e) { ... })
This is fully client-side.

ðŸ”§ So your Grid should be declared in Razor like this (no DetailTemplate at all):
csharp
Copy
Edit
@(Html.Kendo().Grid<YourNamespace.VehicleModel>()
    .Name("ArchivedVehicleGrid")
    .Columns(columns =>
    {
        columns.Bound(c => c.ArchVehicleListId).Title("ArchVehicle ID");
        columns.Bound(c => c.VehicleListId).Title("Vehicle ID");
        columns.Bound(c => c.VehicleName).Title("Vehicle Name");
        // Other columns...
    })
    .DataSource(dataSource => dataSource
        .Ajax()
        .Read(read => read.Url(Url.Action("GetArchivedVehicles", "Vehicles")))
    )
    .Pageable()
    .Sortable()
)
ðŸ”§ Then in your JavaScript:
javascript
Copy
Edit
$(document).ready(function () {
    var grid = $("#ArchivedVehicleGrid").data("kendoGrid");

    grid.bind("detailInit", function (e) {
        var detailRow = e.detailRow;

        // Create a container for partial view
        var containerId = "labour-container-" + e.data.ArchVehicleListId;
        detailRow.append('<div id="' + containerId + '"></div>');

        var url = '@Url.Action("LabourDetailsPartial", "Vehicles")'
            + '?id=' + e.data.ArchVehicleListId
            + '&gridType=ArchivedVehicleGrid';

        $("#" + containerId).load(url);
    });
});

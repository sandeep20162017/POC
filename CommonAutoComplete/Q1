You are ASP.NET core 8.0 and Telerik ASP .NET Core expert.
Pls help me fix following error.
I would like to use the same logic for multiple columns on the same grid. 
Ideally, following core should get the column name and user entered values and pass it to the controller.
I am using inLine edit for the grid, so yu may need to use Jquery to get column and userentered text.
Exception : TypeError e.slice is not a function
Error : AutoComplete widget not found for column: TaskDescription  

Stack :  

  at init.success (https://kendo.cdn.telerik.com/2021.2.511/js/kendo.all.min.js:28:14829)
    at success (https://kendo.cdn.telerik.com/2021.2.511/js/kendo.all.min.js:28:13526)
    at n.success (https://kendo.cdn.telerik.com/2021.2.511/js/kendo.all.min.js:28:1882)
    at c (https://code.jquery.com/jquery-3.7.1.min.js:2:25304)
    at Object.fireWith [as resolveWith] (https://code.jquery.com/jquery-3.7.1.min.js:2:26053)
    at l (https://code.jquery.com/jquery-3.7.1.min.js:2:77782)
    at XMLHttpRequest.<anonymous> (https://code.jquery.com/jquery-3.7.1.min.js:2:80265)
AutoCompleteEditor.cshtml :

@model string

@(Html.Kendo().AutoComplete()
    .Name(ViewData.TemplateInfo.HtmlFieldPrefix) // Dynamic name based on the field
    .DataTextField("Text")
    .Filter("contains")
    .Placeholder("Type to search...")
    .HtmlAttributes(new { id = ViewData.TemplateInfo.HtmlFieldPrefix })
    
    .DataSource(source =>
    {
        source.Read(read =>
        {
            read.Url(Url.Action("GetAutoCompleteData", "AutoComplete"))
           .Type(HttpVerbs.Get)
           .Data("onAdditionalData")           
           ; // Pass additional data (e.g., column name)
        })
        ;
        
    })
)
@section Scripts {
    <script>
        function onAdditionalData() {
            // Get the column name dynamically
            var columnName = "@ViewData.ModelMetadata.PropertyName";
            return {
                columnName: columnName,
                searchText: $("#" + columnName).data("kendoAutoComplete").text()
                
            };
        }
    </script>
}
LabourTask.cshtml :
@model IEnumerable<BCES.Models.Admin.TaskModel>

@{
    ViewData["Title"] = "Task Description";
}
<h6>Task Details</h6>
@(
Html.Kendo().Grid<BCES.Models.Admin.TaskModel>()
                                .Name("TaskGrid")
                                .Columns(columns =>
                            {
                                columns.Bound(p => p.TaskId).Title("Task Id").Hidden(true) ;
                                columns.Bound(p => p.TaskDescription).Title("Task Description")
                                                .EditorTemplateName("AutoCompleteEditor"); 
                               
                                columns.Command(command =>
                                {
                                    if (@ViewBag.RoleId == 1)
                                    {
                                        command.Edit();
                                    }
                                    if (@ViewBag.RoleId == 1)
                                    {
                                        command.Destroy();
                                    }
                                }).Width(200);
                            })
                    .ToolBar(toolbar =>
                    {
                        if (@ViewBag.RoleId == 1)
                        {
                            toolbar.Create();
                        }
                    })
                .Editable(editable => editable.Mode(GridEditMode.InLine))

                .Pageable()
                .Sortable()
                .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
                .DataSource(dataSource => dataSource
                    .Ajax()
                    .Model(model =>
                    {
                        model.Id(u => u.TaskId);
                        model.Field(c => c.TaskDescription);

                    })

                    .Read(read => read.Url(Url.Action("ReadTasks", "Task")).Type(HttpVerbs.Get))
                    .Create(create => create.Url(Url.Action("CreateTask", "Task")).Type(HttpVerbs.Post))
                    .Update(update => update.Url(Url.Action("UpdateTask", "Task")).Type(HttpVerbs.Post))
                    .Destroy(delete => delete.Url(Url.Action("DeleteTask", "Task")).Type(HttpVerbs.Post))

                   )

            .Events(events => events.DataBound("onGridDataBound")) // Add dataBound event
)
@section Scripts {
    <script>
        // Define the onAdditionalData function
        function onAdditionalData() {
            var columnName = "TaskDescription"; // The ID of the input used for the editor
            var autoCompleteWidget = $("#" + columnName).data("kendoAutoComplete"); // Retrieve the widget instance
            console.log('autoCompleteWidget :')
            console.log(autoCompleteWidget);
            // Check if the widget is initialized and fetch the value
            if (autoCompleteWidget) {
                var searchText = autoCompleteWidget.value(); // Use value() to get the current input
                console.log("Search Text:", searchText);
                return {
                    columnName: columnName,
                    searchText: searchText
                };
            } else {
                console.error("AutoComplete widget not found for column:", columnName);
                return null;
            }
        }

        // Ensure the AutoComplete widget is initialized
        function onGridDataBound(e) {
            // Trigger the onAdditionalData function after the grid is fully loaded
            var additionalData = onAdditionalData();
            console.log("Additional Data:", additionalData);
        }
    </script>
}
AutoCompleteController.cs :
using Kendo.Mvc.Extensions;
using Kendo.Mvc.UI;
using BCES.Models.Parts;
using BCES.Controllers.Base;
using BCES.Data;
using System.Data;
using Dapper;
using Microsoft.AspNetCore.Mvc;


namespace BCES.Controllers.Common
{
    public class AutoCompleteController : BaseController
    {
        private readonly DapperContext _db;
        private readonly IDbConnection _dbConnection;
        private readonly IHttpContextAccessor _httpContextAccessor;


        public AutoCompleteController(DapperContext dapper, IHttpContextAccessor httpContextAccessor) : base(dapper, httpContextAccessor)
        {
            _db = dapper;
            _dbConnection = _db.CreateConnection();

            _httpContextAccessor = httpContextAccessor;
        }
        
        [HttpGet]
        public IActionResult GetAutoCompleteData(string columnName, string searchText)
        {
          //  searchText = "AU";
            // Validate inputs to prevent SQL injection
            if (string.IsNullOrEmpty(columnName) || string.IsNullOrEmpty(searchText))
            {
                return BadRequest("Invalid parameters.");
            }

            // Combined mapping: Maps grid column names to SQL column names and table names
            var combinedMapping = new Dictionary<string, (string SqlColumnName, string TableName)>
            {
                { "TaskDescription", ("TaskDescription", "[SBCES].[LabourTaskDescriptions]") }, // Grid column: TaskDescription, SQL column: TaskDescription, Table: [SBCES].[LabourTaskDescriptions]
                { "OrigSupplierName", ("SupplierName", "Suppliers") },
                { "KeyWord", ("Keyword", "Keywords") },
                { "Description", ("PartDescription", "Descriptions") }
            };

            if (!combinedMapping.ContainsKey(columnName))
            {
                return BadRequest("Invalid column name.");
            }

            // Get the SQL column name and table name from the combined mapping
            var mapping = combinedMapping[columnName];
            var sqlColumnName = mapping.SqlColumnName;
            var tableName = mapping.TableName;

            // Example: Use Dapper to fetch data from the database
            using (var connection = _dbConnection)
            {
                connection.Open();

                // Dynamically construct the SQL query
                var sql = $@"
                    SELECT DISTINCT {sqlColumnName} 
                    FROM {tableName} 
                    WHERE {sqlColumnName} LIKE   '" + searchText + "%' ";

                var results = connection.Query<string>(sql, new { SearchText = searchText });
                return Json(new { data = results.ToList() });
               // return results.Select(x => x.ToString());
            }
        }

    }

}

    




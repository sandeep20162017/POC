Pls make the similar required changes for below file. Mark p.LabourType, p.WageGroup,  p.LabourDefn as required field. Pls keep all the existing code and javascript.
Give me the complete file with css and javacript. Mark the changes as "logic for required col changes"

@model IEnumerable<BCES.Models.Admin.LabourTypeModel>

@{
    ViewData["Title"] = "Labour Type";
}

<h6>Labour Type</h6>

@(
Html.Kendo().Grid<BCES.Models.Admin.LabourTypeModel>()
                            .Name("LabourTypeGrid")
                            .Columns(columns =>
                            {
                                
                                columns.Bound(p => p.LabourType).Title("Labour Type").Hidden(true);
                                columns.Bound(p => p.WageGroup)
                                           .Title("Wage Group")
                                           .EditorTemplateName("WageGroupDropdown");
                                          
                                columns.Bound(p => p.LabourDefn).Title("Labour Definition").Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)));
                               @*  columns.Bound(p => p.WageGroup).Title("Wage Group").Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))); *@
                               @*  columns.Bound(p => p.RatePerHr)
                                            .Title("Rate Per Hr")
                                            .Format("{0:C2}")
                                            .EditorTemplateName("RatePerHrDropdown")
                                            .ClientTemplate("#: kendo.format('{0:C2}', RatePerHr) #"); *@


                                columns.Bound(p => p.HrsPerWeek).Title("Hours Per Week");
                              //  columns.Bound(p => p.OverheadType).Title("OverHead Type").Filterable(ftb => ftb.Cell(cell => cell.Operator("gte")));
                                
                                columns.Command(command =>
                                  {
                                      command.Custom("Delete")
                                           .Click("showDeleteConfirmation")
                                           .Text(" ")
                                           .IconClass("k-icon k-i-delete")
                                           .HtmlAttributes(new { @class = "text-danger", title = "Delete" });
                                  }).Title("Actions");
                            })
                            .Events(events => events.Edit("onEdit")) //uppercase
                     //InCell
                     .ToolBar(toolbar =>
                    {
                        toolbar.Create();
                        toolbar.Save();
                    })
                .Editable(editable => editable.Mode(GridEditMode.InCell)) 

                .Pageable()
                .Sortable()
                .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
                .DataSource(dataSource => dataSource
                    .Ajax()
                    .Events(events => events
                    .Error("onDataSourceError")
                    
                    .RequestEnd("onRequestEnd")
                     )
                    .Model(model =>
                    {
                        model.Id(u => u.LabourType);
                        model.Field(c => c.LabourType);
                        model.Field(c => c.RatePerHr);
                        model.Field(c => c.WageGroup);
                       
                      

                    })

                    .Read(read => read.Url(Url.Action("GetLabourType", "LabourType")).Type(HttpVerbs.Get))
                    .Create(create => create.Url(Url.Action("CreateLabourType", "LabourType")).Type(HttpVerbs.Post))
                    .Update(update => update.Url(Url.Action("UpdateLabourType", "LabourType")).Type(HttpVerbs.Post))
                    .Destroy(delete => delete.Url(Url.Action("DeleteLabourType", "LabourType")).Type(HttpVerbs.Post))

                   )

            )
<!-- Custom Delete Confirmation Dialog -->
<div id="deleteConfirmationDialog" style="display: none;">
    <div class="confirmation-message">
        <span class="k-icon k-i-warning confirmation-icon"></span>
        <!-- Edit this span text  -->
        <span>Are you sure you want to delete this item?</span>
    </div>
    <div class="confirmation-buttons">
        <button type="button" class="k-button cancel-btn">Cancel</button>
        <button type="button" class="k-button confirm-btn">Delete</button>
    </div>
</div>
<div id="notification"></div>
@section Scripts {
    <script>
        function getAutoCompleteParams() {
            var input = $("input[data-role='autocomplete']:focus");
            return {
                columnName: input.attr("name"),
                searchText: input.val() || "" // Handle empty search text
            };
        }
    </script>

    @* notification - add following JS, add div, add in grid .Error("onDataSourceError"),  .RequestEnd("onRequestEnd"), change contoller action to return json *@
    <script>
        // Initialize notification FIRST
        var notification = $("#notification").kendoNotification({
            position: {
                pinned: true,
                top: 50,
                right: 30
            },
            autoHideAfter: 4000,
            stacking: "down"
        }).data("kendoNotification");

        // Error handler
        function onDataSourceError(e) {
            let errorMessage = "Operation failed: ";

            if (e.errorThrown) {
                errorMessage += e.errorThrown;
            } else if (e.xhr && e.xhr.responseText) {
                errorMessage += e.xhr.responseText;
            }

            notification.error(errorMessage);
        }

        // Success handler
        function onRequestEnd(e) {
            if (e.type === "create") {
                notification.success("Record created successfully");
            } else if (e.type === "update") {
                notification.success("Record updated successfully");
            } else if (e.type === "destroy") {
                notification.success("Record deleted successfully");
            }
        }
    </script>
    <script>

        // Initialize custom confirmation dialog
        var deleteDialog = $("#deleteConfirmationDialog").kendoWindow({
            width: "400px",
            title: "Confirm Delete",
            modal: true,
            visible: false,
            actions: ["Close"]
        }).data("kendoWindow");

        function showDeleteConfirmation(e) {
            e.preventDefault();
            var grid = $("#LabourTypeGrid").data("kendoGrid");
            var dataItem = grid.dataItem($(e.currentTarget).closest("tr"));

            // Store reference to the dataItem
            deleteDialog.dataItem = dataItem;

            deleteDialog.center().open();
        }

        // Handle dialog buttons
        $(document).on("click", "#deleteConfirmationDialog .confirm-btn", function () {
            var grid = $("#LabourTypeGrid").data("kendoGrid");
            var dataItem = deleteDialog.dataItem;

            $.ajax({
                url: '@Url.Action("DeleteLabourType", "LabourType")',
                type: 'POST',
                data: { LabourType: dataItem.LabourType },
                success: function () {
                    grid.dataSource.remove(dataItem);
                    notification.success("Record deleted successfully");
                    deleteDialog.close();
                },
                error: function (xhr) {
                    notification.error("Delete failed: " + xhr.responseText);
                    deleteDialog.close();
                }
            });
        });

        $(document).on("click", "#deleteConfirmationDialog .cancel-btn", function () {
            deleteDialog.close();
        });

    </script>

    <script>
        //Uppercase logic
          function onEdit(e) {
            // Get the grid instance
            var grid = e.sender;
            var model = e.model;

            // Find the edited cell/column index
            var cell = e.container.closest("td");
            var columnIndex = cell.index();

            // Get the column definition for the edited cell
            var column = grid.columns[columnIndex];

            // Extract the field name from the column's `field` property
            var fieldName = column.field;

            console.log('fieldName:', fieldName);
            // Check if the edited column is "LabourDefn"
            if (fieldName === "LabourDefn") {
                // Find the input element in the editor container
                var input = e.container.find("input");

                // Convert input value to uppercase as the user types
                input.on("input", function() {
                    this.value = this.value.toUpperCase();
                });
            }
            //  // Enable/Disable WageGroup dropdown based on new/existing row
            // if (fieldName === "WageGroup") {
            //     var dropdown = e.container.find("[data-role='dropdownlist']").data("kendoDropDownList");
            //     if (model.isNew()) {
            //         dropdown.enable(true); // Enable for new items
            //     } else {
            //         dropdown.enable(false); // Disable for existing items
            //     }
            // }
        }
    </script>

}





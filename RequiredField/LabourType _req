@model IEnumerable<BCES.Models.Admin.LabourTypeModel>

@{
    ViewData["Title"] = "Labour Type";
}

<style>
    /* logic for required col changes - CSS for required columns */
    .required-header::after {
        content: " *";
        color: #e32;
        font-weight: bold;
    }
    .required-cell {
        background-color: rgba(255, 0, 0, 0.05);
    }
    .k-edit-cell.required-cell input,
    .k-edit-cell.required-cell .k-dropdown-wrap {
        border-left: 3px solid #e32;
        padding-left: 5px;
    }
</style>

<h6>Labour Type</h6>

@(
Html.Kendo().Grid<BCES.Models.Admin.LabourTypeModel>()
    .Name("LabourTypeGrid")
    .Columns(columns =>
    {
        columns.Bound(p => p.LabourType)
            .Title("Labour Type")
            .Hidden(true)
            .HeaderHtmlAttributes(new { @class = "required-header" });
            
        /* logic for required col changes - Added required indicators */
        columns.Bound(p => p.WageGroup)
            .Title("Wage Group")
            .HeaderHtmlAttributes(new { @class = "required-header" })
            .HtmlAttributes(new { @class = "required-cell" })
            .EditorTemplateName("WageGroupDropdown");
                                          
        /* logic for required col changes - Added required indicators */
        columns.Bound(p => p.LabourDefn)
            .Title("Labour Definition")
            .HeaderHtmlAttributes(new { @class = "required-header" })
            .HtmlAttributes(new { @class = "required-cell" })
            .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)));

        columns.Bound(p => p.HrsPerWeek)
            .Title("Hours Per Week");
                                
        columns.Command(command =>
        {
            command.Custom("Delete")
                .Click("showDeleteConfirmation")
                .Text(" ")
                .IconClass("k-icon k-i-delete")
                .HtmlAttributes(new { @class = "text-danger", title = "Delete" });
        }).Title("Actions");
    })
    .Events(events => events.Edit("onEdit"))
    .ToolBar(toolbar =>
    {
        toolbar.Create();
        toolbar.Save();
    })
    .Editable(editable => editable.Mode(GridEditMode.InCell))
    .Pageable()
    .Sortable()
    .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
    .DataSource(dataSource => dataSource
        .Ajax()
        .Events(events => events
            .Error("onDataSourceError")
            .RequestEnd("onRequestEnd")
        )
        .Model(model =>
        {
            model.Id(u => u.LabourType);
            model.Field(c => c.LabourType).Editable(true);
            model.Field(c => c.RatePerHr);
            model.Field(c => c.WageGroup).Editable(true);
            model.Field(c => c.LabourDefn).Editable(true);
        })
        .Read(read => read.Url(Url.Action("GetLabourType", "LabourType")).Type(HttpVerbs.Get))
        .Create(create => create.Url(Url.Action("CreateLabourType", "LabourType")).Type(HttpVerbs.Post))
        .Update(update => update.Url(Url.Action("UpdateLabourType", "LabourType")).Type(HttpVerbs.Post))
        .Destroy(delete => delete.Url(Url.Action("DeleteLabourType", "LabourType")).Type(HttpVerbs.Post))
    )
)

<!-- Custom Delete Confirmation Dialog -->
<div id="deleteConfirmationDialog" style="display: none;">
    <div class="confirmation-message">
        <span class="k-icon k-i-warning confirmation-icon"></span>
        <span>Are you sure you want to delete this item?</span>
    </div>
    <div class="confirmation-buttons">
        <button type="button" class="k-button cancel-btn">Cancel</button>
        <button type="button" class="k-button confirm-btn">Delete</button>
    </div>
</div>
<div id="notification"></div>

@section Scripts {
    <script>
        function getAutoCompleteParams() {
            var input = $("input[data-role='autocomplete']:focus");
            return {
                columnName: input.attr("name"),
                searchText: input.val() || ""
            };
        }
    </script>

    <script>
        // Initialize notification FIRST
        var notification = $("#notification").kendoNotification({
            position: {
                pinned: true,
                top: 50,
                right: 30
            },
            autoHideAfter: 4000,
            stacking: "down"
        }).data("kendoNotification");

        // Error handler
        function onDataSourceError(e) {
            let errorMessage = "Operation failed: ";

            if (e.errorThrown) {
                errorMessage += e.errorThrown;
            } else if (e.xhr && e.xhr.responseText) {
                errorMessage += e.xhr.responseText;
            }

            notification.error(errorMessage);
        }

        // Success handler
        function onRequestEnd(e) {
            if (e.type === "create") {
                notification.success("Record created successfully");
            } else if (e.type === "update") {
                notification.success("Record updated successfully");
            } else if (e.type === "destroy") {
                notification.success("Record deleted successfully");
            }
        }
    </script>

    <script>
        // Initialize custom confirmation dialog
        var deleteDialog = $("#deleteConfirmationDialog").kendoWindow({
            width: "400px",
            title: "Confirm Delete",
            modal: true,
            visible: false,
            actions: ["Close"]
        }).data("kendoWindow");

        function showDeleteConfirmation(e) {
            e.preventDefault();
            var grid = $("#LabourTypeGrid").data("kendoGrid");
            var dataItem = grid.dataItem($(e.currentTarget).closest("tr"));
            deleteDialog.dataItem = dataItem;
            deleteDialog.center().open();
        }

        $(document).on("click", "#deleteConfirmationDialog .confirm-btn", function () {
            var grid = $("#LabourTypeGrid").data("kendoGrid");
            var dataItem = deleteDialog.dataItem;

            $.ajax({
                url: '@Url.Action("DeleteLabourType", "LabourType")',
                type: 'POST',
                data: { LabourType: dataItem.LabourType },
                success: function () {
                    grid.dataSource.remove(dataItem);
                    notification.success("Record deleted successfully");
                    deleteDialog.close();
                },
                error: function (xhr) {
                    notification.error("Delete failed: " + xhr.responseText);
                    deleteDialog.close();
                }
            });
        });

        $(document).on("click", "#deleteConfirmationDialog .cancel-btn", function () {
            deleteDialog.close();
        });
    </script>

    <script>
        function onEdit(e) {
            var grid = e.sender;
            var model = e.model;
            var cell = e.container.closest("td");
            var columnIndex = cell.index();
            var column = grid.columns[columnIndex];
            var fieldName = column.field;

            console.log('fieldName:', fieldName);
            
            /* logic for required col changes - Highlight required fields during edit */
            if (fieldName === "LabourDefn" || fieldName === "WageGroup") {
                e.container.addClass("required-cell");
            }

            if (fieldName === "LabourDefn") {
                var input = e.container.find("input");
                input.on("input", function() {
                    this.value = this.value.toUpperCase();
                });
            }
        }
    </script>
}

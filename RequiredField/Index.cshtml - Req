@model IEnumerable<BCES.Models.Admin.UserViewModel>

@{
    ViewData["Title"] = "User Management";
}

<h6>User Management</h6>

<style>
    /* Logic for required col changes - CSS for required columns */
    .required-header::after {
        content: " *";
        color: #e32;
        font-weight: bold;
    }
    .required-cell {
        background-color: rgba(255, 0, 0, 0.05);
    }
    .k-edit-cell.required-cell input,
    .k-edit-cell.required-cell .k-dropdown-wrap {
        border-left: 3px solid #e32;
        padding-left: 5px;
    }
</style>

@(
Html.Kendo().Grid<BCES.Models.Admin.UserViewModel>()
    .Name("userGrid")
    .Columns(columns =>
    {
        /* Logic for required col changes - Added required indicators */
        columns.Bound(u => u.UserADId)
            .Title("User ID")
            .HeaderHtmlAttributes(new { @class = "required-header" })
            .HtmlAttributes(new { @class = "required-cell" });

        columns.Bound(u => u.UserName)
            .Title("User Name")
            .HeaderHtmlAttributes(new { @class = "required-header" })
            .HtmlAttributes(new { @class = "required-cell" });

        columns.Bound(u => u.RoleName)
            .Title("Role Name")
            .HeaderHtmlAttributes(new { @class = "required-header" })
            .HtmlAttributes(new { @class = "required-cell" })
            .ClientTemplate("#: RoleName #")
            .EditorTemplateName("RoleTypeDropDown");

        columns.Command(command =>
        {
            command.Custom("Delete")
                .Click("showDeleteConfirmation")
                .Text(" ")
                .IconClass("k-icon k-i-delete")
                .HtmlAttributes(new { @class = "text-danger", title = "Delete" });
        }).Title("Actions");
    })
    .ToolBar(toolbar =>
    {
        toolbar.Create();
        toolbar.Save();
    })
    .Editable(editable => editable.Mode(GridEditMode.InCell))
    .Pageable()
    .Sortable()
    .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
    .DataSource(dataSource => dataSource
        .Ajax() 
        .Batch(false)
        .Events(events =>
        {
            events.RequestEnd("onRequestEnd"); 
            events.Error("onDataSourceError");
        })
        .Read(read => read.Url(Url.Action("ReadUsers", "UserManagementGrid")).Type(HttpVerbs.Get))
        .Create(create => create.Url(Url.Action("AddUser", "UserManagementGrid")).Type(HttpVerbs.Post))
        .Update(update => update.Url(Url.Action("UpdateUser", "UserManagementGrid")).Type(HttpVerbs.Post))
        .Destroy(delete => delete.Url(Url.Action("DeleteUser", "UserManagementGrid", new { userID = "{0}" })).Type(HttpVerbs.Post))
        .Model(model =>
        {
            model.Id(u => u.UserID);
            model.Field(u => u.UserADId).Editable(true);
            model.Field(u => u.UserName).Editable(true);
            model.Field(u => u.RoleId).DefaultValue(0); 
            model.Field(u => u.RoleName);
        })
    )
)

<!-- Custom Delete Confirmation Dialog -->
<div id="deleteConfirmationDialog" style="display: none;">
    <div class="confirmation-message">
        <span class="k-icon k-i-warning confirmation-icon"></span>
        <span>Are you sure you want to delete this item?</span>
    </div>
    <div class="confirmation-buttons">
        <button type="button" class="k-button cancel-btn">Cancel</button>
        <button type="button" class="k-button confirm-btn">Delete</button>
    </div>
</div>
<div id="notification"></div>
<input type="hidden" name="SelectedSites" id="SelectedSitesHidden" value="" />

@section Scripts {
    <script>
        $(document).ready(function() {
            var notification = $("#notification").kendoNotification({
                position: {
                    pinned: true,
                    top: 50,
                    right: 30
                },
                autoHideAfter: 4000,
                stacking: "down"
            }).data("kendoNotification");
        });

        function onSiteChange(e) {
            var model = e.model;
            console.log("event: sitechange");
            var selectedSites = this.value();
            console.log("selected sites :");
            console.log(selectedSites);
            
            $.ajax({
                url: '@Url.Action("GetSelectedSites", "UserManagementGrid")',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ sites: selectedSites }),
                beforeSend: function (xhr) {
                    console.log("Sending data :", JSON.stringify({ sites: selectedSites }));
                },
                success: function (data) {
                    console.log('GetSelectedSites : Success:', data);
                },
                error: function (error, data) {
                    console.log(':GetSelectedSites : datasent : ', data);
                    console.error('GetSelectedSites : Error:', error);
                }
            });
        }

        function onSiteDataBound() {
            console.log("event: sitedataBound");          
        }

        function onRoleChange(e) {
            console.log("onRoleChange");
            var selectedRoleId = this.value();
            var selectedRoleName = this.text();
            console.log("onRoleChange :", selectedRoleId);
            console.log("onRoleChange :", selectedRoleName );
         
            var grid = $("#userGrid").data("kendoGrid");
            var currentModel = grid.dataItem($(e.sender.element).closest("tr"));
            if (selectedRoleId != 0) {
                currentModel.set("RoleId", selectedRoleId);
                currentModel.set("RoleName", selectedRoleName);
            }
        }
              
        function errorHandler(e) {
            if (e.errors) {
                var message = "Errors:\n";
                $.each(e.errors, function (key, value) {
                    if ('errors' in value) {
                        $.each(value.errors, function () {
                            message += this + "\n";
                        });
                    }
                });
                alert(message);
            }
        }

        // Error handler
        function onDataSourceError(e) {
            let errorMessage =  e.xhr.responseText;

            if (e.errors) {
                $.each(e.errors, function (key, value) {
                    if (value.errors) {
                        errorMessage += value.errors.join(", ");
                    }
                });
            }

            var notification = $("#notification").data("kendoNotification");
            notification.error(errorMessage);
            $("#userGrid").data("kendoGrid").dataSource.read();
        }

        // Success handler
        function onRequestEnd(e) {
            var notification = $("#notification").data("kendoNotification");
            if (e.type === "create") {
                notification.success("Record created successfully");
                $("#userGrid").data("kendoGrid").dataSource.read();
            } else if (e.type === "update") {
                notification.success("Record updated successfully");
                $("#userGrid").data("kendoGrid").dataSource.read();
            } else if (e.type === "destroy") {
                notification.success("Record deleted successfully");
                $("#userGrid").data("kendoGrid").dataSource.read();
            } 
        }

        // Initialize custom confirmation dialog
        var deleteDialog = $("#deleteConfirmationDialog").kendoWindow({
            width: "400px",
            title: "Confirm Delete",
            modal: true,
            visible: false,
            actions: ["Close"]
        }).data("kendoWindow");

        function showDeleteConfirmation(e) {
            e.preventDefault();
            var grid = $("#userGrid").data("kendoGrid");
            var dataItem = grid.dataItem($(e.currentTarget).closest("tr"));
            deleteDialog.dataItem = dataItem;
            deleteDialog.center().open();
        }

        // Handle dialog buttons
        $(document).on("click", "#deleteConfirmationDialog .confirm-btn", function () {
            var notification = $("#notification").data("kendoNotification");
            var grid = $("#userGrid").data("kendoGrid");
            var dataItem = deleteDialog.dataItem;

            $.ajax({
                url: '@Url.Action("DeleteUser", "UserManagementGrid")',
                type: 'POST',
                data: { UserID: dataItem.UserID },
                success: function () {
                    grid.dataSource.remove(dataItem);
                    notification.success("Record deleted successfully");
                    deleteDialog.close();
                },
                error: function (xhr) {
                    notification.error("Delete failed: " + xhr.responseText);
                    deleteDialog.close();
                }
            });
        });

        $(document).on("click", "#deleteConfirmationDialog .cancel-btn", function () {
            deleteDialog.close();
        });

        function getDropDownParams() {
            var input = $(".k-dropdown input.k-input:focus");
            if (input.length) {
                return {
                    columnName: input.attr("name")?.replace("_input", ""), 
                    searchText: input.val() || "" 
                };
            }
            return {};
        }

        function onDropdownFiltering(e) {
            var dropdown = e.sender;
            var params = {
                columnName: dropdown.element.attr("data-column"),
                searchText: e.filter?.value || ""
            };
            console.log("Params sent to controller:", params);
            if (params.columnName) {
                dropdown.dataSource.read(params);
            }
        }

        $(document).on("keydown", ".k-dropdown .k-input", function(e) {
            if (e.keyCode === 13) {
                return true;
            }
            e.preventDefault();
        });
    </script>
}

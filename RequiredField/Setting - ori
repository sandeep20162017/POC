Pls make the similar required changes for below file. Mark p.Value as required field. Pls keep all the existing code and javascript.
Give me the complete file with css and javacript. Mark the changes as "logic for required col changes"
@model IEnumerable<BCES.Models.Admin.SettingModel>

@{
    ViewData["Title"] = "Settings";
}

<h6>Settings</h6>

@(
Html.Kendo().Grid<BCES.Models.Admin.SettingModel>()
                            .Name("SettingGrid")
                            .Columns(columns =>
                            {
                                columns.Bound(p => p.CesSettingId).Title("Setting ID").Visible(false);
                                columns.Bound(p => p.Parameter).Title("Parameter");
                                columns.Bound(p => p.Value).Title("Value");
                                
                                @* columns.Command(command =>
                                {
                                    if (@ViewBag.RoleId == 1)
                                    {
                                        command.Edit().Text(" ").IconClass("k-icon k-i-edit").HtmlAttributes(new { title = "Edit" }); // Edit button with tooltip
                                    }
                                    if (@ViewBag.RoleId == 1)
                                    {

                                     //   command.Destroy().Text(" ").IconClass("k-icon k-i-delete").HtmlAttributes(new { title = "Delete" }); // Edit button with tooltip
                                    }
                                }).Width(200); *@
                            })
                     //InCell
                     .ToolBar(toolbar =>
                    {
                       // toolbar.Create();
                        toolbar.Save();
                    })
                .Editable(editable => editable.Mode(GridEditMode.InCell))

                .Pageable()
                .Sortable()
                .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
                .DataSource(dataSource => dataSource
                    .Ajax()
                    .Events(events => events
                    .Error("onDataSourceError")
                    .RequestEnd("onRequestEnd")
                     )
                    .Model(model =>
                    {
                        model.Id(u => u.CesSettingId);
                        model.Field(c => c.Parameter).Editable(false);
                        model.Field(c => c.Value);
                        

                    })

                    .Read(read => read.Url(Url.Action("GetSetting", "Setting")).Type(HttpVerbs.Get))
                  //  .Create(create => create.Url(Url.Action("CreateEmpSalary", "EmpSalary")).Type(HttpVerbs.Post))
                    .Update(update => update.Url(Url.Action("UpdateSetting", "Setting")).Type(HttpVerbs.Post))
                  //  .Destroy(delete => delete.Url(Url.Action("DeleteEmpSalary", "EmpSalary")).Type(HttpVerbs.Post))

                   )

            )
<div id="notification"></div>
@section Scripts {
    <script>
        function getAutoCompleteParams() {
            var input = $("input[data-role='autocomplete']:focus");
            return {
                columnName: input.attr("name"),
                searchText: input.val() || "" // Handle empty search text
            };
        }
    </script>

    @* notification - add following JS, add div, add in grid .Error("onDataSourceError"),  .RequestEnd("onRequestEnd"), change contoller action to return json *@
    <script>
        // Initialize notification FIRST
        var notification = $("#notification").kendoNotification({
            position: {
            pinned: true,
        top: 50,
        right: 30
                },
        autoHideAfter: 4000,
        stacking: "down"
            }).data("kendoNotification");

        // Error handler
        function onDataSourceError(e) {
            let errorMessage = "Operation failed: ";

        if (e.errorThrown) {
            errorMessage += e.errorThrown;
                } else if (e.xhr && e.xhr.responseText) {
            errorMessage += e.xhr.responseText;
                }

        notification.error(errorMessage);
            }

        // Success handler
        function onRequestEnd(e) {
                if (e.type === "create") {
            notification.success("Record created successfully");
                } else if (e.type === "update") {
            notification.success("Record updated successfully");
                } else if (e.type === "destroy") {
            notification.success("Record deleted successfully");
                }
            }
    </script>

}




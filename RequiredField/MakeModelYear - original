You are ASp.NET v8 and Telerik ASp.NET Core expert.
As per your suggetion pls maark Make, Model, Year coluns visually required columns. Pls give me full file along with all the javascript functions. Do not delete any functinality.
Comment the changes in the code as "Required field logic". Give me css to include in my project css file

Index.cshtml:
@model IEnumerable<BCES.Models.Admin.MakeModelYearModel>

@{
    ViewData["Title"] = "Make-Model-Year";
}
<h6>Make Model Year</h6>
@(
    Html.Kendo().Grid<BCES.Models.Admin.MakeModelYearModel>()
        .Name("MakeModelBuyGrid")
        .Columns(columns =>
        {
            columns.Bound(p => p.Make).Title("Make").Editable("isNameEditable");
            columns.Bound(p => p.VehicleModel).Title("Model").Editable("isNameEditable");
            columns.Bound(p => p.Year).Title("Year").Editable("isNameEditable");
           
           
            columns.Command(command =>
               {
                   //  command.Edit().Text(" ").IconClass("k-icon k-i-edit").HtmlAttributes(new { title = "Edit" });
                   command.Custom("Delete")
                       .Click("showDeleteConfirmation")
                       .Text(" ")
                       .IconClass("k-icon k-i-delete")
                       .HtmlAttributes(new { @class = "text-danger", title = "Delete" });
               }).Title("Actions");
        })
        .Events(events => events.Edit("onEdit"))
         //InCell
         .ToolBar(toolbar =>
        {
            toolbar.Create();
            toolbar.Save();
        })
        .Editable(editable => editable.Mode(GridEditMode.InCell)) 
        .Pageable()
        .Sortable()
        .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
        .DataSource(dataSource => dataSource
            .Ajax()
            .Events(events => events
                    .Error("onDataSourceError")
                    .RequestEnd("onRequestEnd")
                     )
            .Model(model =>
            {
                model.Id(u => u.Make);
                model.Field(c => c.Make);
            })
            .Read(read => read.Url(Url.Action("ReadMakeModelYear", "MakeModelYear")).Type(HttpVerbs.Get))
            .Create(create => create.Url(Url.Action("CreateMakeModelYear", "MakeModelYear")).Type(HttpVerbs.Post))
            .Update(update => update.Url(Url.Action("UpdateMakeModelYear", "MakeModelYear")).Type(HttpVerbs.Post))
           .Destroy(delete => delete.Url(Url.Action("DeleteMakeModelYear", "MakeModelYear")).Type(HttpVerbs.Post))
        )
       

        )
)
<!-- Custom Delete Confirmation Dialog -->
<div id="deleteConfirmationDialog" style="display: none;">
    <div class="confirmation-message">
        <span class="k-icon k-i-warning confirmation-icon"></span>
        <!-- Edit this span text  -->
        <span>Are you sure you want to delete this item?</span>
    </div>
    <div class="confirmation-buttons">
        <button type="button" class="k-button cancel-btn">Cancel</button>
        <button type="button" class="k-button confirm-btn">Delete</button>
    </div>
</div>
<div id="notification"></div>
@section Scripts {
    <script>
        // Initialize notification FIRST
        var notification = $("#notification").kendoNotification({
            position: {
                pinned: true,
                top: 50,
                right: 30
            },
            autoHideAfter: 4000,
            stacking: "down"
        }).data("kendoNotification");

        // Error handler
        function onDataSourceError(e) {
            let errorMessage = e.xhr.responseText;

            // if (e.errorThrown) {
            //     errorMessage += e.errorThrown;
            // } else if (e.xhr && e.xhr.responseText) {
            //     errorMessage += e.xhr.responseText;
            // }

            notification.error(errorMessage);
            $("#MakeModelBuyGrid").data("kendoGrid").dataSource.read(); //force refresh grid
        }

        // Success handler
        function onRequestEnd(e) {
            if (e.type === "create") {
                notification.success("Record created successfully");
            } else if (e.type === "update") {
                notification.success("Record updated successfully");
            } else if (e.type === "destroy") {
                notification.success("Record deleted successfully");
            }
        }
    </script>
    <script>

        // Initialize custom confirmation dialog
        var deleteDialog = $("#deleteConfirmationDialog").kendoWindow({
            width: "400px",
            title: "Confirm Delete",
            modal: true,
            visible: false,
            actions: ["Close"]
        }).data("kendoWindow");

        function showDeleteConfirmation(e) {
            e.preventDefault();
            var grid = $("#MakeModelBuyGrid").data("kendoGrid");
            var dataItem = grid.dataItem($(e.currentTarget).closest("tr"));

            // Store reference to the dataItem
            deleteDialog.dataItem = dataItem;

            deleteDialog.center().open();
        }

        // Handle dialog buttons
        $(document).on("click", "#deleteConfirmationDialog .confirm-btn", function () {
            var grid = $("#MakeModelBuyGrid").data("kendoGrid");
            var dataItem = deleteDialog.dataItem;

            $.ajax({
                url: '@Url.Action("DeleteMakeModelYear", "MakeModelYear")',
                type: 'POST',
                data: { Make: dataItem.Make, VehicleModel: dataItem.VehicleModel, Year: dataItem.Year },
                success: function () {
                    grid.dataSource.remove(dataItem);
                    notification.success("Record deleted successfully");
                    deleteDialog.close();
                },
                error: function (xhr) {
                    notification.error("Delete failed: " + xhr.responseText);
                    deleteDialog.close();
                }
            });
        });

        $(document).on("click", "#deleteConfirmationDialog .cancel-btn", function () {
            deleteDialog.close();
        });

    </script>
    <script>
        function onEdit(e) {
            // Get the grid instance
            var grid = e.sender;

            // Find the edited cell/column index
            var cell = e.container.closest("td");
            var columnIndex = cell.index();

            // Get the column definition for the edited cell
            var column = grid.columns[columnIndex];

            // Extract the field name from the column's `field` property
            var fieldName = column.field;

            console.log('fieldName:', fieldName);
            // Check if the edited column is "LabourDefn"
            if (fieldName === "VehicleModel" || fieldName === "Make") {
                // Find the input element in the editor container
                var input = e.container.find("input");

                // Convert input value to uppercase as the user types
                input.on("input", function () {
                    this.value = this.value.toUpperCase();
                });
            }
        }
        function isNameEditable(dataItem) {
            // Allow editing only if the dataItem is new (i.e., in create mode)
            return dataItem.isNew();
        }
    </script>


}

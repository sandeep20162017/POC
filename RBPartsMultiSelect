You are ASP.NET core (v 8.0) and Telerik ASP.NET core expert.
I am using Telerik grid. One of the columns in the grid (Title("Vehicle Series")) uses Telerik Multi Select editor template (EditorTemplateName("VehicleSeriesEditor")).
This editor templete or multi select is not working properly.
Controller function GetVehicleSeries never got called. Also on page load, following exception is thrown.
Pls help fix the issue.
JS exception :
jquery-3.7.1.min.js:2 jQuery.Deferred exception: Cannot read properties of undefined (reading 'eq') TypeError: Cannot read properties of undefined (reading 'eq')
    at init.<anonymous> (https://kendo.cdn.telerik.com/2021.2.511/js/kendo.all.min.js:81:20096)
    at init.trigger (https://kendo.cdn.telerik.com/2021.2.511/js/kendo.all.min.js:25:8038)
    at init.set (https://kendo.cdn.telerik.com/2021.2.511/js/kendo.all.min.js:27:21549)
    at init._refreshUI (https://kendo.cdn.telerik.com/2021.2.511/js/kendo.all.min.js:81:21034)
    at new init (https://kendo.cdn.telerik.com/2021.2.511/js/kendo.all.min.js:81:18436)
    at HTMLSpanElement.<anonymous> (https://kendo.cdn.telerik.com/2021.2.511/js/kendo.all.min.js:26:6236)
    at Function.each (https://code.jquery.com/jquery-3.7.1.min.js:2:3129)
    at R.each (https://code.jquery.com/jquery-3.7.1.min.js:2:1594)
    at R.kendoFilterCell (https://kendo.cdn.telerik.com/2021.2.511/js/kendo.all.min.js:26:6213)
    at init._filterRow (https://kendo.cdn.telerik.com/2021.2.511/js/kendo.all.min.js:63:18850) undefined
Index.cshtml :
@using BCES.Models.Parts
@using BCES.Models.Common
@model IEnumerable<BCES.Models.Parts.RebuiltPartsViewModel>

@{
    ViewData["Title"] = "Rebuilt Parts";
}

<h4>Rebuilt Parts</h4>

@(Html.Kendo().TabStrip()
    .Name("rebuildPartsTabStrip")
    .Animation(animation => animation.Open(effect => effect.Fade(FadeDirection.In)))
    .Items(tabstrip =>
    {
        tabstrip.Add().Text("Rebuilt Parts")
            .Selected(true) // Ensure the first tab is selected by default
            .Content(@<text>
                @try
                {
                    @(Html.Kendo().Grid<RebuiltPartsViewModel>()
                        .Name("RebuiltPartsGrid")
                        .Columns(columns =>
                        {
                            columns.Bound(c => c.RebuiltStockNum).Title("Rebuilt Stock Code").Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)));
                            columns.Bound(c => c.MmsStockCode).Title("MMS Stock Code").Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)));
                            columns.Bound(c => c.DetailedDesc).Title("Description").Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).EditorTemplateName("AutoCompleteEditor");
                            columns.Bound(c => c.Keyword).Title("Keyword").Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)));
                            @* columns.Bound(c => c.JobNumber).Title("Job Number").Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))); *@
                            columns.Bound(c => c.CorePartNum).Title("Core Code").Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)));
                           @*  columns.Bound(c => c.CoreCharge).Title("Core Cost").Filterable(ftb => ftb.Cell(cell => cell.Operator("gte"))).Format("{0:C2}").EditorTemplateName("Currency"); *@
                            columns.Bound(c => c.Percentage).Title("Percentage");
                            columns.Bound(c => c.BuyNewCost).Title("Buy Cost").Filterable(ftb => ftb.Cell(cell => cell.Operator("gte"))).Format("{0:C2}").EditorTemplateName("Currency");
                            columns.Bound(c => c.RemanCost).Title("Reman. Cost").Filterable(ftb => ftb.Cell(cell => cell.Operator("gte"))).Format("{0:C2}").EditorTemplateName("Currency");
                           @*  columns.Bound(c => c.ExternalCost).Title("External Cost").Filterable(ftb => ftb.Cell(cell => cell.Operator("gte"))).Format("{0:C2}").EditorTemplateName("Currency"); *@
                            columns.Bound(c => c.EstimatedCost).Title("Estimated Cost").Filterable(ftb => ftb.Cell(cell => cell.Operator("gte"))).Format("{0:C2}").EditorTemplateName("Currency");
                            @* columns.Bound(c => c.TotalRebuiltPartCost).Title("Total Cost").Filterable(ftb => ftb.Cell(cell => cell.Operator("gte"))).Format("{0:C2}").EditorTemplateName("Currency"); *@

                            //multiselect - Expert pls help fix this
                            columns.Bound(c => c.ListOfBus)
                            .Title("Vehicle Series")
                            .ClientTemplate("# if (ListOfBus && ListOfBus.length > 0) { # #= ListOfBus.map(bus => bus.Description).join(', ') # # } else { # - # } #")
                            .EditorTemplateName("VehicleSeriesEditor");

                           @*  columns.Bound(c => c.ListOfBusIds).Title("Vehicle Series")
                          //  .Hidden(true) // Keep this column hidden from the grid view
                            .Filterable(false) // Explicitly disable filtering for this column
                            .ClientTemplate("# if (ListOfBus && ListOfBus.length > 0) { # #= ListOfBus.map(bus => bus.Description).join(', ') # # } else { # - # } #")
                            .EditorTemplateName("VehicleSeriesEditor"); *@


                            columns.Command(command =>
                            {
                                command.Edit().Text(" ").IconClass("k-icon k-i-edit").HtmlAttributes(new { title = "Edit" }); // Edit button with tooltip
                                command.Custom("Archive").Text(" ").IconClass("k-icon k-i-folder").Click("onArchiveClick").HtmlAttributes(new { title = "Archive" }); // Archive button with tooltip
                                command.Custom("Save to Excel").Text(" ").IconClass("k-icon k-i-file-excel").Click("onSaveToExcelClick").HtmlAttributes(new { title = "Save to Excel" }); // Save to Excel button with tooltip
                                command.Custom("Email Estimate").Text(" ").IconClass("k-icon k-i-email").Click("onEmailEstimateClick").HtmlAttributes(new { title = "Email Estimate" }); // Email Estimate button with tooltip
                            }).Title("Actions").Width(200).HtmlAttributes(new { @class = "action-buttons" }); // Set a fixed width for the Actions column
                        })
                        .ToolBar(toolbar => { toolbar.Create(); })
                        .Editable(editable => editable.Mode(GridEditMode.InLine))
                        .Pageable()
                        .Sortable()
                        .ClientDetailTemplateId("template")
                        .Resizable(r => r.Columns(true))
                        .Filterable(ftb => ftb.Mode(GridFilterMode.Row)) //Disable for multiselect
                        .DataSource(dataSource => dataSource
                            .Ajax()
                            .Model(model =>
                            {
                                model.Id(c => c.RbMasterlistId);
                                model.Field(c => c.RbMasterlistId);
                                model.Field(c => c.RebuiltStockNum).Editable(true);
                                model.Field(c => c.MmsStockCode).Editable(true);
                               // model.Field(u => u.ListIds).DefaultValue(new List<int>());
                               // model.Field(u => u.BusNames).DefaultValue(new List<string>());
                                model.Field(c => c.ListOfBus).DefaultValue(new List<BCES.Models.Parts.BusesModel>()).Editable(true); //multiselect
                                model.Field(c => c.LabourDetailsRebuiltParts).DefaultValue(new List<BCES.Models.Parts.LabourDetailsRebuiltPartsViewModel>()).Editable(false);
                              //  model.Field(p => p.ListOfBusIds).DefaultValue(new List<int?>()); //multiselect
                                })
                                 .Events(events => events.RequestStart("onRequestStart"))      

                            .Read(read => read.Url(Url.Action("GetRebuiltPartsView", "RebuiltParts")).Type(HttpVerbs.Get))
                            .Create(create => create.Url(Url.Action("AddRebuiltPartsView", "RebuiltParts")).Type(HttpVerbs.Post))
                            .Update(update => update.Url(Url.Action("UpdateRebuiltPartsView", "RebuiltParts")).Type(HttpVerbs.Post))
                        )
                    )

   
    
                }
                catch (Exception ex)
                {
                    <div class="alert alert-danger">Error loading rebuilt parts: @ex.Message</div>
                }
            </text>);
           
             
        
        tabstrip.Add().Text("Archived Parts")
            .Content(@<text>
                @try
                {
                    @Html.Partial("_ArchivedIndex")
                }
                catch (Exception ex)
                {
                    <div class="alert alert-danger">Error loading archived parts: @ex.Message</div>
                }
            </text>);
    })
)

<!-- Placeholder for dynamically loaded email estimate popup and notification -->
<div id="email-estimate-container">
     @Html.Partial("_EmailEstimatePopup")
    <div id="estimates-container"></div>
    <div id="notification"></div>    
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            $("#email-estimate-container").hide();
            $("#archived-email-estimate-container").hide();
             
                $(document).on("kendo:editor-opened", function () {
                    $("#ListOfBusIds").trigger("change");
                });
           
           /////////////////////////////// VehicleSeries multiselect end
            var grid = $("#RebuiltPartsGrid").data("kendoGrid");

            // Initialize Kendo Notification for displaying messages
            var notificationElement = $("#notification");
            if (notificationElement.length === 0) {
                console.error("Notification element not found in the DOM.");
            } else {
                var notification = notificationElement.kendoNotification({
                    position: {
                        pinned: true,
                        top: 50,
                        right: 50
                    },
                    autoHideAfter: 5000, // Hide after 5 seconds
                    stacking: "down"
                }).data("kendoNotification");

                // Bind the Save event for the grid
                grid.bind("save", function (e) {
                    //debugger;
                    notification.show(e.model.RebuiltStockNum); // Display the stock number in the notification
                });

                
                // Bind the Cancel event for the grid
                grid.bind("cancel", function (e) {
                    // This event is triggered when the user clicks the Cancel button
                    $.post('@Url.Action("CancelDetails", "RebuiltParts")', { rebuiltPartNum: e.model.RebuiltStockNum })
                        .done(function (data) {
                            if (notification) {
                                notification.show("Changes discarded!", "info");
                            } else {
                                console.error("Notification is not initialized.");
                            }
                        })
                        .fail(function (xhr, status, error) {
                            console.error("Error discarding changes: ", error);
                            if (notification) {
                                notification.show("An error occurred while discarding changes. Please try again.", "error");
                            } else {
                                console.error("Notification is not initialized.");
                            }
                        });
                });

                grid.bind("detailInit", function (e) {
                    console.log("Detail initialization started for RebuiltStockNum: " + e.data.RebuiltStockNum);
                    var tabUrlLabourDetail = '@Url.Action("LabourDetailsPartial", "RebuiltParts")' + '?rebuiltPartNum=' + e.data.RebuiltStockNum;
                    var tabUrlLabourHourSummary = '@Url.Action("LabourHourSummaryPartial", "RebuiltParts")' + '?rebuiltPartNum=' + e.data.RebuiltStockNum;
                    var tabUrlMaterialCostSummary = '@Url.Action("MaterialCostSummaryPartial", "RebuiltParts")' + '?rebuiltPartNum=' + e.data.RebuiltStockNum;
                    var tabScPartDetail = '@Url.Action("ScPartsUsedInRbParts", "RebuiltParts")' + '?rebuiltPartNum=' + e.data.RebuiltStockNum;
                    var tabUrlNscDetail = '@Url.Action("NscDetailsPartial", "RebuiltParts")' + '?rebuiltPartNum=' + e.data.RebuiltStockNum;
                    var tabUrlRbPartDetail = '@Url.Action("RbDetailsPartial", "RebuiltParts")' + '?rebuiltPartNum=' + e.data.RebuiltStockNum;
                    var tabUrlTotalCost = '@Url.Action("TotalCostPartial", "RebuiltParts")' + '?rebuiltPartNum=' + e.data.RebuiltStockNum;

                    // Get the container for the detail template
                    var container = e.detailCell.find("#detail-template-" + e.data.RebuiltStockNum);

                    // Load the TabStrip structure
                    container.html(`
                                <div id="tabstrip-container-${e.data.RebuiltStockNum}">
                                    <ul>
                                        <li class="k-state-active">Labour Details</li>
                                        <li>Labour Hour</li>
                                        <li>Material: Cost</li>
                                        <li>Material: SC Parts</li>
                                        <li>Material: NSC Parts</li>
                                        <li>Material: RB Parts</li>
                                        <li>Total Cost</li>
                                    </ul>
                                    <div id="labour-details-content"></div>
                                    <div id="labour-hour-summary-content"></div>
                                    <div id="material-cost-summary-content"></div>
                                    <div id="material-details-content"></div>
                                    <div id="nsc-details-content"></div>
                                    <div id="rb-part-details-content"></div>
                                    <div id="total-cost-content"></div>
                                </div>
                            `);

                    // Initialize the Kendo TabStrip
                    var tabStrip = $("#tabstrip-container-" + e.data.RebuiltStockNum).kendoTabStrip({
                        animation: { open: { effects: "fadeIn" } },
                        select: function (e) {
                            var tabIndex = $(e.item).index(); // Get the index of the selected tab

                            // Check for unsaved changes in the current tab
                            var currentTabContent = tabStrip.contentElement(tabStrip.select().index());
                            var currentGrid = $(currentTabContent).find(".k-grid").data("kendoGrid");

                            if (currentGrid && (currentGrid.dataSource.hasChanges())) {
                                // Show a warning notification
                                if (notification) {
                                    notification.show("You have unsaved changes. Click on Update or Cancel changes before clicking next tab.", "warning");
                                } else {
                                    console.error("Notification is not initialized.");
                                }
                                e.preventDefault(); // Prevent the tab switch
                                return;
                            }

                            // Load the partial view content for the selected tab
                            var tabUrl = tabIndex == 0 ? tabUrlLabourDetail :
                                tabIndex == 1 ? tabUrlLabourHourSummary :
                                    tabIndex == 2 ? tabUrlMaterialCostSummary :
                                        tabIndex == 3 ? tabScPartDetail :
                                            tabIndex == 4 ? tabUrlNscDetail :
                                                tabIndex == 5 ? tabUrlRbPartDetail :
                                                    tabUrlTotalCost;

                            $.get(tabUrl)
                                .done(function (data) {
                                    $(e.contentElement).html(data);
                                    kendo.init($(e.contentElement)); // Reinitialize Kendo widgets

                                    // Reset the hasChanges() state for read-only tabs
                                    if (tabIndex === 6) { // Assuming the last tab is the read-only tab
                                        var totalCostGrid = $(e.contentElement).find(".k-grid").data("kendoGrid");
                                        notification.show("tabIndex === 6");
                                        if (totalCostGrid) {
                                            notification.show("inside totalCostGrid");
                                            totalCostGrid.dataSource.read(); // Refresh the data source
                                        }
                                    }
                                })
                                .fail(function (xhr, status, error) {
                                    console.error("Error loading tab content: ", error);
                                    if (notification) {
                                        notification.show("An error occurred while loading the tab content. Please try again.", "error");
                                    } else {
                                        console.error("Notification is not initialized.");
                                    }
                                });
                        }
                    }).data("kendoTabStrip");

                    // Load the first tab's content
                    $.get(tabUrlLabourDetail)
                        .done(function (data) {
                            $("#labour-details-content").html(data);
                            kendo.init($("#labour-details-content")); // Reinitialize Kendo widgets
                        })
                        .fail(function (xhr, status, error) {
                            console.error("Error loading initial tab content: ", error);
                            if (notification) {
                                notification.show("An error occurred while loading the initial tab content. Please try again.", "error");
                            } else {
                                console.error("Notification is not initialized.");
                            }
                        });
                });
            }
            //archived --------------------------------------------
            var grid = $("#ArchivedRebuiltPartsGrid").data("kendoGrid");

            // Initialize Kendo Notification for displaying messages
            var notificationElement = $("#archived-notification");
            if (notificationElement.length === 0) {
                console.error("Notification element not found in the DOM.");
            } else {
                var notification = notificationElement.kendoNotification({
                    position: {
                        pinned: true,
                        top: 50,
                        right: 50
                    },
                    autoHideAfter: 5000, // Hide after 5 seconds
                    stacking: "down"
                }).data("kendoNotification");

                // Bind the detailInit event for the grid
                grid.bind("detailInit", function (e) {
                    console.log("Detail initialization started for RebuiltStockNum: " + e.data.RebuiltStockNum);
                    var tabUrlLabourDetail = '@Url.Action("LabourDetailsPartial", "RebuiltParts")' + '?rebuiltPartNum=' + e.data.RebuiltStockNum;
                    var tabUrlLabourHourSummary = '@Url.Action("LabourHourSummaryPartial", "RebuiltParts")' + '?rebuiltPartNum=' + e.data.RebuiltStockNum;
                    var tabUrlMaterialCostSummary = '@Url.Action("MaterialCostSummaryPartial", "RebuiltParts")' + '?rebuiltPartNum=' + e.data.RebuiltStockNum;
                    var tabScPartDetail = '@Url.Action("ScPartsUsedInRbParts", "RebuiltParts")' + '?rebuiltPartNum=' + e.data.RebuiltStockNum;
                    var tabUrlNscDetail = '@Url.Action("NscDetailsPartial", "RebuiltParts")' + '?rebuiltPartNum=' + e.data.RebuiltStockNum;
                    var tabUrlRbPartDetail = '@Url.Action("RbDetailsPartial", "RebuiltParts")' + '?rebuiltPartNum=' + e.data.RebuiltStockNum;
                    var tabUrlTotalCost = '@Url.Action("TotalCostPartial", "RebuiltParts")' + '?rebuiltPartNum=' + e.data.RebuiltStockNum;

                    // Get the container for the detail template
                    var container = e.detailCell.find("#archived-detail-template-" + e.data.RebuiltStockNum);

                    // Load the TabStrip structure
                    container.html(`
                                <div id="archived-tabstrip-container-${e.data.RebuiltStockNum}">
                                    <ul>
                                        <li class="k-state-active">Labour Details</li>
                                        <li>Labour Hour</li>
                                        <li>Material: Cost</li>
                                        <li>Material: SC Parts</li>
                                        <li>Material: NSC Parts</li>
                                        <li>Material: RB Parts</li>
                                        <li>Total Cost</li>
                                    </ul>
                                    <div id="archived-labour-details-content"></div>
                                    <div id="archived-labour-hour-summary-content"></div>
                                    <div id="archived-material-cost-summary-content"></div>
                                    <div id="archived-material-details-content"></div>
                                    <div id="archived-nsc-details-content"></div>
                                    <div id="archived-rb-part-details-content"></div>
                                    <div id="archived-total-cost-content"></div>
                                </div>
                            `);

                    // Initialize the Kendo TabStrip
                    var tabStrip = $("#archived-tabstrip-container-" + e.data.RebuiltStockNum).kendoTabStrip({
                        animation: { open: { effects: "fadeIn" } },
                        select: function (e) {
                            var tabIndex = $(e.item).index(); // Get the index of the selected tab

                            // Load the partial view content for the selected tab
                            var tabUrl = tabIndex == 0 ? tabUrlLabourDetail :
                                tabIndex == 1 ? tabUrlLabourHourSummary :
                                    tabIndex == 2 ? tabUrlMaterialCostSummary :
                                        tabIndex == 3 ? tabScPartDetail :
                                            tabIndex == 4 ? tabUrlNscDetail :
                                                tabIndex == 5 ? tabUrlRbPartDetail :
                                                    tabUrlTotalCost;

                            $.get(tabUrl)
                                .done(function (data) {
                                    $(e.contentElement).html(data);
                                    kendo.init($(e.contentElement)); // Reinitialize Kendo widgets
                                })
                                .fail(function (xhr, status, error) {
                                    console.error("Error loading tab content: ", error);
                                    if (notification) {
                                        notification.show("An error occurred while loading the tab content. Please try again.", "error");
                                    } else {
                                        console.error("Notification is not initialized.");
                                    }
                                });
                        }
                    }).data("kendoTabStrip");

                    // Load the first tab's content
                    $.get(tabUrlLabourDetail)
                        .done(function (data) {
                            $("#archived-labour-details-content").html(data);
                            kendo.init($("#archived-labour-details-content")); // Reinitialize Kendo widgets
                        })
                        .fail(function (xhr, status, error) {
                            console.error("Error loading initial tab content: ", error);
                            if (notification) {
                                notification.show("An error occurred while loading the initial tab content. Please try again.", "error");
                            } else {
                                console.error("Notification is not initialized.");
                            }
                        });
                });
            }
            //archived end  ----------------------------------------
        });

        function onArchiveClick(e) {
            e.preventDefault();
            var grid = $("#RebuiltPartsGrid").data("kendoGrid");
            var dataItem = grid.dataItem($(e.currentTarget).closest("tr"));

            // Call the controller action with the entire dataItem as JSON
            $.ajax({
                url: '@Url.Action("ArchiveDetails", "RebuiltParts")',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(dataItem),
                success: function (data) {
                    // Display a Kendo Notification
                    var notification = $("#notification").kendoNotification({
                        position: {
                            pinned: true,
                            top: 50,
                            right: 50
                        },
                        autoHideAfter: 5000, // Hide after 5 seconds
                        stacking: "down"
                    }).data("kendoNotification");

                    notification.show("Archive is clicked.", "info");
                },
                error: function (xhr, status, error) {
                    console.error("Error archiving: ", error);
                }
            });
        }

        function onEmailEstimateClick(e) {
            e.preventDefault();
            var grid = $("#RebuiltPartsGrid").data("kendoGrid");
            var dataItem = grid.dataItem($(e.currentTarget).closest("tr"));
            var rebuiltPartNum = dataItem.RebuiltStockNum;

            // Show the email estimate container
            $("#email-estimate-container").show();

            // Generate the Excel file by calling SaveToExcel via AJAX
            $.ajax({
                url: '@Url.Action("SaveToExcel", "Export")',
                type: 'GET',
                data: { rebuiltPartNum: rebuiltPartNum },
                xhrFields: {
                    responseType: 'blob' // Ensure the response is treated as a binary file
                },
                success: function (data) {
                    // Create a link element to trigger the file download
                    var link = document.createElement('a');
                    link.href = window.URL.createObjectURL(data);
                    link.download = `${rebuiltPartNum}_RebuiltParts_Estimate.xlsx`;
                    link.click();

                    // Set the subject with the rebuilt number and today's date
                    var today = new Date();
                    var subject = `Rebuilt Part Estimates for ${rebuiltPartNum} - Date ${today.toLocaleDateString()} ${today.toLocaleTimeString()}`;

                    // Set the form values
                    $("#to").val("");
                    $("#subject").val(subject);
                    $("#body").val(`Dear Sir/Madam,\nPlease find attached here with Rebuilt Part Estimate for ${rebuiltPartNum}.\n\nThank you`);

                    // Open the Kendo Window
                    var kendoWindow = $("#emailEstimateWindow").data("kendoWindow");
                    if (kendoWindow) {
                        kendoWindow.center().open();
                    } else {
                        console.error("Kendo Window not found.");
                    }
                },
                error: function (xhr, status, error) {
                    console.error("Error downloading Excel file:", error);
                }
            });
        }

        function onSaveToExcelClick(e) {
            e.preventDefault();
            var grid = $("#RebuiltPartsGrid").data("kendoGrid");
            var dataItem = grid.dataItem($(e.currentTarget).closest("tr"));
            var rebuiltPartNum = dataItem.RebuiltStockNum;

            // Directly trigger the file download
            window.location.href = '@Url.Action("SaveToExcel", "Export")' + '?rebuiltPartNum=' + rebuiltPartNum;
        }

        function onCancelEmailClick() {
            // Close the Kendo Window
            var window = $("#emailEstimateWindow").data("kendoWindow");
            window.close();

            // Show a notification
            var notification = $("#notification").data("kendoNotification");
            notification.show("Email Request Cancelled", "info");
        }
    </script>

    <script id="template" type="text/x-kendo-template">
        <div id="detail-template-#=RebuiltStockNum#"></div>
    </script>
    <script>
         function onArchivedEmailEstimateClick(e) {
            e.preventDefault();
            var grid = $("#ArchivedRebuiltPartsGrid").data("kendoGrid");
            var dataItem = grid.dataItem($(e.currentTarget).closest("tr"));
            var rebuiltPartNum = dataItem.RebuiltStockNum;

            // Show the email estimate container
            $("#archived-email-estimate-container").show();

            // Generate the Excel file by calling SaveToExcel via AJAX
            $.ajax({
                url: '@Url.Action("SaveToExcel", "Export")',
                type: 'GET',
                data: { rebuiltPartNum: rebuiltPartNum },
                xhrFields: {
                    responseType: 'blob' // Ensure the response is treated as a binary file
                },
                success: function (data) {
                    // Create a link element to trigger the file download
                    var link = document.createElement('a');
                    link.href = window.URL.createObjectURL(data);
                    link.download = `${rebuiltPartNum}_RebuiltParts_Estimate.xlsx`;
                    link.click();

                    // Set the subject with the rebuilt number and today's date
                    var today = new Date();
                    var subject = `Rebuilt Part Estimates for ${rebuiltPartNum} - Date ${today.toLocaleDateString()} ${today.toLocaleTimeString()}`;

                    // Set the form values
                    $("#to").val("");
                    $("#subject").val(subject);
                    $("#body").val(`Dear Sir/Madam,\nPlease find attached here with Rebuilt Part Estimate for ${rebuiltPartNum}.\n\nThank you`);

                    // Open the Kendo Window
                    var kendoWindow = $("#emailEstimateWindow").data("kendoWindow");
                    if (kendoWindow) {
                        kendoWindow.center().open();
                    } else {
                        console.error("Kendo Window not found.");
                    }
                },
                error: function (xhr, status, error) {
                    console.error("Error downloading Excel file:", error);
                }
            });
        }

        function onArchivedSaveToExcelClick(e) {
            e.preventDefault();
            var grid = $("#ArchivedRebuiltPartsGrid").data("kendoGrid");
            var dataItem = grid.dataItem($(e.currentTarget).closest("tr"));
            var rebuiltPartNum = dataItem.RebuiltStockNum;

            // Directly trigger the file download
            window.location.href = '@Url.Action("SaveToExcel", "Export")' + '?rebuiltPartNum=' + rebuiltPartNum;
        }
    </script>
    <script id="archived-template" type="text/x-kendo-template">
        <div id="archived-detail-template-#=RebuiltStockNum#"></div>
    </script>
   <script>
        // Event triggered before any CRUD operation (Read, Update, Destroy)
        function onRequestStart(e) {
            // Check if the request type is Update or Destroy
            if (e.type === "update" || e.type === "destroy") {
                var grid = $("#RebuiltPartsGrid").data("kendoGrid");
                var selectedRow = grid.select(); // Get the selected row
                var dataItem = grid.dataItem(selectedRow); // Get the data for the selected row

                if (dataItem && dataItem.RebuiltStockNum) {
                    // Append RebuiltStockNum to the request
                    e.sender.transport.options.update.data = { RebuiltStockNum: dataItem.RebuiltStockNum };
                    e.sender.transport.options.destroy.data = { RebuiltStockNum: dataItem.RebuiltStockNum };
                }
            }
        }
    </script>
    <script>
        function getAutoCompleteParams() {
            var input = $("input[data-role='autocomplete']:focus");
            return {
                columnName: input.attr("name"),
                searchText: input.val() || "" // Handle empty search text
            };
        }
    </script>

}
VehicleSeriesEditor.cshtml :
@model List<BCES.Models.Parts.BusesModel>;

@(Html.Kendo().MultiSelect()
    .Name("ListOfBus")
    .DataTextField("Description")
    .DataValueField("ListId")
    .Placeholder("Select vehicle series...")
    .BindTo((IEnumerable<BCES.Models.Parts.BusesModel>)ViewData["Buses"])
    .AutoClose(false)
    .Value(Model)
    .DataSource(source =>
    {
        source.Read(read => read.Url(Url.Action("GetVehicleSeries", "RebuiltParts")).Type(HttpVerbs.Get));
    })
)
RebuiltPartsController.cs :
using Dapper;
using Microsoft.AspNetCore.Mvc;
using Dapper;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Threading.Tasks;
using Telerik.DataSource;
using Telerik.DataSource.Extensions;
using BCES.Models.Admin;
using Kendo.Mvc.UI;
using Kendo.Mvc.Extensions;
using DataSourceRequest = Kendo.Mvc.UI.DataSourceRequest;
using BCES.Data;
using Telerik.SvgIcons;
using Microsoft.AspNetCore.Http;
using Microsoft.EntityFrameworkCore.Metadata.Conventions;
using BCES.Controllers.Base;
using BCES.Models.Parts;
using BCES.Models.Common;
using BCES.Models.Parts;
using System.Data;
using OfficeOpenXml;
using System.IO;
using MailKit.Net.Smtp;
using MimeKit;
using MailKit.Security;



using Newtonsoft.Json.Linq;
using static System.Net.Mime.MediaTypeNames;
using Azure.Core;
using BCES.Controllers.Admin;
using System.Net.Mail;
using Multipart = MimeKit.Multipart;
using SmtpClient = MailKit.Net.Smtp.SmtpClient;
using System.Data.SqlClient;
using Microsoft.AspNetCore.Authorization;
using System.Text.Encodings.Web;

//using System.Net.Mime;
//using CES.Views.Shared;
namespace BCES.Controllers.Parts
{
    // [Route("api/[controller]")]
    public class RebuiltPartsController : BaseController
    {
        private readonly DapperContext _db;
        private readonly IDbConnection _dbConnection;
        private readonly IHttpContextAccessor _httpContextAccessor;
        private readonly IServiceProvider _serviceProvider;
        private readonly BusesController _busesController;
        private readonly LabourDetailsController _labourDetailsController;


        public RebuiltPartsController(DapperContext dapper, IHttpContextAccessor httpContextAccessor,
                                      IServiceProvider serviceProvider, BusesController busesController,
                                      LabourDetailsController labourDetailsController
                                    ) : base(dapper, httpContextAccessor)
        {
            _db = dapper;
            _dbConnection = _db.CreateConnection();
            _httpContextAccessor = httpContextAccessor;
            _serviceProvider = serviceProvider;
            _busesController = busesController;
            _labourDetailsController = labourDetailsController;
        }

        [HttpGet("RebuiltPartsIndex")]
        [AllowAnonymous]
        public IActionResult RebuiltPartsIndex()
        {
            // return View();
            return View("~/Views/Parts/RebuiltParts/Index.cshtml");
        }

        [AllowAnonymous]
        public IActionResult ArchivedIndex()
        {
            // return View();
            return View("~/Views/Parts/RebuiltParts/ArchivedIndex.cshtml");
        }


        [HttpGet]
        [AllowAnonymous]
        public async Task<JsonResult> GetRebuiltPartsView([DataSourceRequest] DataSourceRequest request)
        {
            // Fetch data for the grid (you can use Dapper or any other method)
            var model = await GetRebuiltPartsData();
            return Json(model.ToDataSourceResult(request));
        }

        [HttpGet]
        [AllowAnonymous]
        public async Task<JsonResult> GetArchivedRebuiltPartsView([DataSourceRequest] DataSourceRequest request)
        {
            // Fetch data for the grid (you can use Dapper or any other method)
            var model = await GetArchivedRebuiltPartsData();
            return Json(model.ToDataSourceResult(request));
        }
        
        [AllowAnonymous]
        private async Task<IEnumerable<RebuiltPartsViewModel>> GetRebuiltPartsData()
        {
            try
            {
                var query = @"
            SELECT 
                rbm.RbMasterlistId,
                rbm.RebuiltStockNum,
                rbm.MmsStockCode,
                rbm.Keyword,
                rbm.JobNumber,
                rbm.CorePartNum,
                rbm.DetailedDesc,
                rbm.CoreCharge,
                rbm.EstimatedCost,
                rbm.BuyNewCost,
                rbm.RemanCost,
                lb.ListId,
                lb.Description
            FROM SBCES.RbMasterlist rbm
            LEFT JOIN SBCES.RbListOfBuses rbl ON rbm.RebuiltStockNum = rbl.RebuiltStockNum
            LEFT JOIN SBCES.ListOfBuses lb ON rbl.ListId = lb.ListId
            ";

                var result = await _dbConnection.QueryAsync<RebuiltPartsViewModel, BusesModel, RebuiltPartsViewModel>(
                    query,
                    (rebuiltPart, bus) =>
                    {
                        if (bus?.ListId != null)
                        {
                            rebuiltPart.ListOfBus ??= new List<BusesModel>();
                            rebuiltPart.ListOfBus.Add(bus);
                        }
                        return rebuiltPart;
                    },
                    splitOn: "ListId"
                );

                // Group by RbMasterlistId to aggregate buses
                var groupedData = result
                    .GroupBy(r => r.RbMasterlistId)
                    .Select(g =>
                    {
                        var mainRecord = g.First();
                        mainRecord.ListOfBus = g.SelectMany(r => r.ListOfBus)
                                              .DistinctBy(b => b.ListId)
                                              .ToList();
                        return mainRecord;
                    })
                    .ToList();

                return groupedData;
            }
            catch (Exception ex)
            {
                // Log error (you should implement proper logging here)
                Console.WriteLine($"Error fetching rebuilt parts: {ex.Message}");
                return new List<RebuiltPartsViewModel>();
            }
        }

        //[HttpPost]
        //[AllowAnonymous]
        ////[Consumes("application/x-www-form-urlencoded")]
        //public async Task<IActionResult> UpdateRebuiltPartsView([DataSourceRequest] DataSourceRequest request,  [FromForm] RebuiltPartsViewModel model)
        //{
        //    try
        //    {
        //        //if (string.IsNullOrEmpty(RebuiltPartsViewModel.RebuiltStockNum) || model == null)
        //        //{
        //        //    return BadRequest("Invalid data.");
        //        //}

        //        // Update the RebuiltPart in the database
        //        var updatePartSql = @"
        //    //UPDATE SBCES.RbMasterlist
        //    //SET ... -- Add fields to update here
        //    //WHERE RebuiltStockNum = @RebuiltStockNum";

        //    //    await _dbConnection.ExecuteAsync(updatePartSql, new { RebuiltStockNum });

        //    //    // Update associated buses
        //    //    var deleteOldBusesSql = "DELETE FROM SBCES.RBLISTOFBUSES WHERE RebuiltStockNum = @RebuiltStockNum";
        //    //    await _dbConnection.ExecuteAsync(deleteOldBusesSql, new { RebuiltStockNum });

        //        if (model.ListOfBusIds?.Any() == true)
        //        {
        //            var insertNewBusesSql = @"
        //        INSERT INTO SBCES.RBLISTOFBUSES (RebuiltStockNum, ListId)
        //        VALUES (@RebuiltStockNum, @ListId)";

        //            //foreach (var listId in model.ListOfBusIds.Where(id => id.HasValue))
        //            //{
        //            //    await _dbConnection.ExecuteAsync(insertNewBusesSql, new { RebuiltStockNum, ListId = listId.Value });
        //            //}
        //        }

        //        return Json(new { success = true });
        //    }
        //    catch (Exception ex)
        //    {
        //        return StatusCode(500, $"Internal server error: {ex.Message}");
        //    }
        //}

        [HttpPost]
        [AllowAnonymous]
        public async Task<IActionResult> UpdateRebuiltPartsView(
     [DataSourceRequest] DataSourceRequest request,
     [FromForm] RebuiltPartsViewModel model)
        {
            try
            {
                if (model == null)
                {
                    return BadRequest("Invalid data.");
                }

                var updatePartSql = @"
            UPDATE SBCES.RbMasterlist
            SET
                LastModifiedBy = UPPER(ISNULL(@LastModifiedBy, ' ')),
                DateEntered = GETDATE(),
                JobNumber = UPPER(ISNULL(@JobNumber, ' ')),
                CoreCharge = ISNULL(@CoreCharge, ' '),
                CorePartNum = ISNULL(@CorePartNum, ' '),
                Keyword = UPPER(ISNULL(@Keyword, ' ')),
                DetailedDesc = UPPER(ISNULL(@DetailedDesc, ' ')),
                MmsStockCode = ISNULL(@MmsStockCode, ' '),
                SopNumber = ISNULL(@SopNumber, ' '),
                BuyNewCost = ISNULL(@BuyNewCost, ''),
                RemanCost = ISNULL(@RemanCost, ''),
                ExternalCost = ISNULL(@ExternalCost, ''),
                Active = @IsActive
            WHERE RebuiltStockNum = @RebuiltStockNum";

                await _dbConnection.ExecuteAsync(updatePartSql, new
                {
                    model.LastModifiedBy,
                    model.JobNumber,
                    model.CoreCharge,
                    model.CorePartNum,
                    model.Keyword,
                    model.DetailedDesc,
                    model.MmsStockCode,
                    model.SopNumber,
                    model.BuyNewCost,
                    model.RemanCost,
                    ExternalCost = "", // Adjust as needed
                    IsActive = model.IsActive ? 1 : 0,
                    model.RebuiltStockNum
                });

                // Update buses
                var deleteOldBusesSql = "DELETE FROM SBCES.RbListOfBuses WHERE RebuiltStockNum = @RebuiltStockNum";
                await _dbConnection.ExecuteAsync(deleteOldBusesSql, new { model.RebuiltStockNum });

                //if (model.ListOfBusIds?.Any() == true)
                //{
                //    var insertNewBusesSql = @"
                //INSERT INTO SBCES.RbListOfBuses (RebuiltStockNum, ListId)
                //VALUES (@RebuiltStockNum, @ListId)";

                //    foreach (var listId in model.ListOfBusIds.Where(id => id.HasValue))
                //    {
                //        await _dbConnection.ExecuteAsync(insertNewBusesSql, new
                //        {
                //            model.RebuiltStockNum,
                //            ListId = listId.Value
                //        });
                //    }
                //}

                return Json(new { success = true });
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }

        [HttpPost]
        [AllowAnonymous]
        public async Task<IActionResult> DeleteRebuiltPart(string RebuiltStockNum)
        {
            //TODO - Confirm with Rafael if delete is required
            try
            {
                if (string.IsNullOrEmpty(RebuiltStockNum))
                {
                    return BadRequest("Invalid data.");
                }

                var deletePartSql = "DELETE FROM SBCES.RbMasterlist WHERE RebuiltStockNum = @RebuiltStockNum";
                var deleteBusesSql = "DELETE FROM SBCES.RBLISTOFBUSES WHERE RebuiltStockNum = @RebuiltStockNum";

                await _dbConnection.ExecuteAsync(deleteBusesSql, new { RebuiltStockNum });
                await _dbConnection.ExecuteAsync(deletePartSql, new { RebuiltStockNum });

                return Json(new { success = true });
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }



        [HttpGet]
        [AllowAnonymous]
        public async Task<IActionResult> GetVehicleSeries()
        {
            try
            {
                var sql = @"
            SELECT
                RBLISTOFBUSES.listid AS ListId,
                LISTOFBUSES.description AS Description
            FROM
                SBCES.RBLISTOFBUSES
            INNER JOIN
                SBCES.LISTOFBUSES ON RBLISTOFBUSES.listid = LISTOFBUSES.listid";

                var vehicleSeries = await _dbConnection.QueryAsync<BusesModel>(sql);

                // Ensure null ListId entries are removed
                var validVehicleSeries = vehicleSeries.Where(vs => vs.ListId.HasValue);

                return Json(validVehicleSeries);
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }
       
        [AllowAnonymous]
        private async Task<IEnumerable<RebuiltPartsViewModel>> GetArchivedRebuiltPartsData()
        {
            try
            {
                // Base query for rebuilt parts data
                var rebuiltPartsQuery = @"
                                          SELECT
                                               rbm.ArchRbMasterlistId,
                                               rbm.[RebuiltStockNum],
                                               rbm.[MmsStockCode],
                                               rbm.[Keyword],
                                               rbm.JobNumber,
                                               rbm.[CorePartNum],
                                               rbm.[DetailedDesc],
                                               rbm.[CoreCharge],
                                              -- rbm.[EstimatedCost],
                                               -- rbm.[ExternalCost],
                                              --  rbm.[RemanCost],
	                                           rbm.[MaterialsTotal],
	                                           rbm.[LabourTotal],
		                                        rbm.[MaterialsTotal],
		                                        rbm.[TotalRebuiltPartCost],
		                                        rbm.[TotalCostTax],      
	                                           rbm.[EnteredBy],
                                              rbm.[DateEntered] 
                                        FROM [SBCES].[ArchRbMasterlist] rbm
                                            ";

                var rebuiltParts = (await _dbConnection.QueryAsync<RebuiltPartsViewModel>(rebuiltPartsQuery)).ToList();

                

                return rebuiltParts;
            }
            catch (Exception ex)
            {
                // Handle errors gracefully
                return null;
            }
        }

                [HttpPost]
        [AllowAnonymous]
        public async Task<IActionResult> AddRebuiltPartsView(
    [DataSourceRequest] DataSourceRequest request,
    [FromForm] RebuiltPartsViewModel rebuiltPartsViewModel)
        {
            try
            {
                if (rebuiltPartsViewModel == null)
                {
                    return BadRequest("Invalid data.");
                }

                // Ensure ListOfBus is initialized (if needed)
                rebuiltPartsViewModel.ListOfBus ??= new List<BusesModel>();

                // Insert the rebuilt part into the database
                var insertPartSql = @"
            INSERT INTO SBCES.RbMasterlist 
            (
                RebuiltStockNum, MmsStockCode, Keyword, JobNumber, CorePartNum, 
                DetailedDesc, CoreCharge, EstimatedCost, BuyNewCost, RemanCost, 
                ExternalCost, LastModifiedBy, DateEntered, IsActive
            )
            VALUES 
            (
                @RebuiltStockNum, @MmsStockCode, @Keyword, @JobNumber, @CorePartNum, 
                @DetailedDesc, @CoreCharge, @EstimatedCost, @BuyNewCost, @RemanCost, 
                @ExternalCost, @LastModifiedBy, GETDATE(), @IsActive
            )";

                await _dbConnection.ExecuteAsync(insertPartSql, new
                {
                    rebuiltPartsViewModel.RebuiltStockNum,
                    rebuiltPartsViewModel.MmsStockCode,
                    rebuiltPartsViewModel.Keyword,
                    rebuiltPartsViewModel.JobNumber,
                    rebuiltPartsViewModel.CorePartNum,
                    rebuiltPartsViewModel.DetailedDesc,
                    rebuiltPartsViewModel.CoreCharge,
                    rebuiltPartsViewModel.EstimatedCost,
                    rebuiltPartsViewModel.BuyNewCost,
                    rebuiltPartsViewModel.RemanCost,
                    ExternalCost = "", // Adjust as needed
                    LastModifiedBy = User.Identity.Name, // Or your logic
                    IsActive = rebuiltPartsViewModel.IsActive ? 1 : 0
                });

                // Insert associated buses
                if (rebuiltPartsViewModel.ListOfBus?.Any() == true)
                {
                    var insertBusesSql = @"
                INSERT INTO SBCES.RbListOfBuses (RebuiltStockNum, ListId)
                VALUES (@RebuiltStockNum, @ListId)";

                    foreach (var bus in rebuiltPartsViewModel.ListOfBus)
                    {
                        if (bus.ListId.HasValue)
                        {
                            await _dbConnection.ExecuteAsync(insertBusesSql, new
                            {
                                rebuiltPartsViewModel.RebuiltStockNum,
                                ListId = bus.ListId.Value
                            });
                        }
                    }
                }

                return Json(new { success = true });
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }

        private async Task<int> AddRebuiltPartAsync(RebuiltPartsViewModel rebuiltPartsViewModel)
        {

            // Start a transaction
            _dbConnection.Open();
            using (var transaction = _dbConnection.BeginTransaction())
            {
                try
                {
                    // Commit the transaction
                    transaction.Commit();
                    return 0;
                }
                catch (Exception ex)
                {
                    // Rollback the transaction in case of any error
                    transaction.Rollback();
                    // Handle or log the exception
                    throw new Exception("Failed to add rebuilt part.", ex);
                }
            }
        }

        //[HttpPost]
        //public async Task<IActionResult> UpdateRebuiltPartsView([DataSourceRequest] DataSourceRequest request, RebuiltPartsViewModel rebuiltPartsViewModel)
        //{
        //    try
        //    {
        //        // var userId = await UpdateRebuiltPartsView(rebuiltPartsViewModel);
        //        // return RedirectToAction("Index");
        //        return Ok();
        //    }
        //    catch (Exception ex)
        //    {
        //        return StatusCode(500, "An error occurred while adding Rebuilt Part.");
        //    }
        //}

        [AllowAnonymous]
        public IActionResult LabourDetailsPartial([FromQuery] string rebuiltPartNum)
        {
            // Pass the rebuiltPartNum to the partial view
            ViewBag.PartNum = rebuiltPartNum;
            ViewBag.GridType = "RbGrid";
            var model = new List<LabourDetailsRebuiltPartsViewModel> { };
            return PartialView("_LabourDetailsRebuiltParts", model);
        }
        [AllowAnonymous]
        public IActionResult ScPartsUsedInRbParts([FromQuery] string rebuiltPartNum)
        {
            // Pass the rebuiltPartNum to the partial view
            ViewBag.PartNum = rebuiltPartNum;
            ViewBag.GridType = "RbGrid";
            var model = new List<BCES.Models.Parts.StockCodedPartsViewModel> { };

            return PartialView("_ScPartsUsedInRbParts", model);

        }

        [AllowAnonymous]
        public IActionResult LabourHourSummaryPartial([FromQuery] string rebuiltPartNum)
        {
            // Pass the rebuiltPartNum to the partial view
            ViewBag.PartNum = rebuiltPartNum;
            ViewBag.GridType = "RbGrid";
            var model = new List<BCES.Models.Parts.LabourDetailsRebuiltPartsViewModel> { };
            return PartialView("_LabourHourSummaryRbParts", model);
        }

        [AllowAnonymous]
        public IActionResult MaterialCostSummaryPartial([FromQuery] string rebuiltPartNum)
        {
            // Pass the rebuiltPartNum to the partial view
            ViewBag.PartNum = rebuiltPartNum;
            ViewBag.GridType = "RbGrid";
            var model = new List<BCES.Models.Parts.MaterialCostSummaryInRbViewModel> { };
            return PartialView("_MaterialCostSummaryinRbParts", model);
        }
        [AllowAnonymous]
        public IActionResult NscDetailsPartial([FromQuery] string rebuiltPartNum)
        {
            // Pass the rebuiltPartNum to the partial view
            ViewBag.PartNum = rebuiltPartNum;
            ViewBag.GridType = "RbGrid";
            var model = new List<BCES.Models.Parts.NscPartsUsedViewModel> { };

            return PartialView("_NscPartsUsedInRbParts", model);

        }
        [AllowAnonymous]
        public IActionResult RbDetailsPartial([FromQuery] string rebuiltPartNum)
        {
            // Pass the rebuiltPartNum to the partial view
            ViewBag.PartNum = rebuiltPartNum;
            ViewBag.GridType = "RbGrid";
            var model = new List<BCES.Models.Parts.RebuiltPartsViewModel> { };
            return PartialView("_RbPartsUsedInRbParts", model);
        }

        [AllowAnonymous]
        public IActionResult TotalCostPartial([FromQuery] string rebuiltPartNum)
        {
            // Pass the rebuiltPartNum to the partial view
            ViewBag.PartNum = rebuiltPartNum;
            ViewBag.GridType = "RbGrid";
            var model = new List<BCES.Models.Parts.TotalCostInRbModel> { };
            return PartialView("_TotalCostInRbParts", model);
        }

        [HttpPost]
        [AllowAnonymous]
        public IActionResult SaveDetails()
        {
            // Save logic here
            return Json(new { success = true, message = "Saved Details successfully." });
        }


        [HttpPost]
        [AllowAnonymous]
        public IActionResult CancelDetails(int rebuiltPartNum)
        {
            try
            {
                // Return a success response
                return Json(new { success = true, message = "Changes discarded successfully." });
            }
            catch (Exception ex)
            {

                return Json(new { success = false, message = "An error occurred while discarding changes. Please try again." });
            }
        }
                

        [HttpPost("ArchiveDetails")]
        [AllowAnonymous]
        public IActionResult ArchiveDetails([FromBody] RebuiltPartsViewModel rebuiltPartsViewModel)
        {
            try
            {

                // Return a success response
                return Json(new { success = true, message = "Archiving rebuilt part number: {RebuiltPartNum}", rebuiltPartsViewModel.RebuiltStockNum });
            }
            catch (Exception ex)
            {
                return Json(new { success = false, message = "An error occurred while archiving. Please try again." });
            }
        }
        [HttpPost]
        [AllowAnonymous]
        public async Task<IActionResult> SendEmail(string to, string subject, string body, string rebuiltPartNum)
        {
            try
            {
                // Resolve the ExportController from the service provider
                var exportController = _serviceProvider.GetRequiredService<ExportController>();

                // Generate the Excel file in memory by calling SaveToExcel
                var memoryStream = await exportController.SaveToExcel(rebuiltPartNum);


                // Send the email with the attached Excel file
                var message = new MimeMessage();
                message.From.Add(new MailboxAddress("Sandeep Kanao", "sandeep.kanao@ttc.ca"));
                message.To.Add(new MailboxAddress("Sandeep.Kanao@ttc.ca", to));
                message.Subject = subject;
                message.Body = new TextPart("plain") { Text = body };

                var attachment = new MimePart("application", "vnd.openxmlformats-officedocument.spreadsheetml.sheet")
                {
                    Content = new MimeContent((Stream)memoryStream),
                    ContentDisposition = new ContentDisposition(ContentDisposition.Attachment),
                    ContentTransferEncoding = ContentEncoding.Base64,
                    FileName = $"{rebuiltPartNum}_RebuiltParts_Estimate.xlsx"
                };

                var multipart = new Multipart("mixed");
                multipart.Add(message.Body);
                multipart.Add(attachment);
                message.Body = multipart;

                using (var client = new SmtpClient())
                {
                    await client.ConnectAsync("smtp.freesmtpservers.com", 25, SecureSocketOptions.StartTls);
                   // await client.AuthenticateAsync("sandeep.kanao@gmail.com", "Perf4you@");
                    await client.SendAsync(message);
                    await client.DisconnectAsync(true);
                }

                return Json(new { success = true });
            }
            catch (Exception ex)
            {
                // Log the exception 
                Console.WriteLine($"Error sending email: {ex.Message}");

                return Json(new { success = false, message = ex.Message });
            }
        }

        [AllowAnonymous]
        public IActionResult DownloadExcel(string filePath)
        {
            var fileBytes = System.IO.File.ReadAllBytes(filePath);
            return File(fileBytes, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", Path.GetFileName(filePath));
        }

    

    }
}
BusesModel.cs :
                                                    namespace BCES.Models.Parts
{
    public class BusesModel
    {
        public int? ListId { get; set; }
        public string Description { get; set; }
       
    }
}
RebuiltPartsViewModel.cs :
                                                    namespace BCES.Models.Parts
{
    public class RebuiltPartsViewModel
    {
        
        public int RbMasterlistId {  get; set; }
        public string MmsStockCode { get; set; }
        public string DetailedDesc { get; set; }
       ...
       public List<BusesModel> ListOfBus { get; set; } = new List<BusesModel>();
      ..
      }
  }
                                                    

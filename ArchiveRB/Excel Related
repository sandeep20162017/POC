function onExcelExport(e) {
    var allowedFields = ["ColA", "ColC"]; // âœ… Include only these fields

    var sheet = e.workbook.sheets[0];

    // Filter out columns not in the allowed list
    sheet.columns = sheet.columns.filter(function(column, index) {
        var field = e.sender.columns[index] ? e.sender.columns[index].field : null;
        return allowedFields.includes(field);
    });

    // Remove row cells that are not in the allowed list
    sheet.rows.forEach(function(row) {
        row.cells = row.cells.filter(function(cell, index) {
            var field = e.sender.columns[index] ? e.sender.columns[index].field : null;
            return allowedFields.includes(field);
        });
    });

// Fix for DropDown IDs:
    var dropdownData = @Html.Raw(Json.Serialize(ViewData["DropDownData"]));
    sheet.rows.forEach(function(row, rowIndex) {
        if (rowIndex > 0) {
            var item = data[rowIndex - 1];
            if (item.ColD) {
                var textValue = dropdownData.find(x => x.Value == item.ColD)?.Text || item.ColD;
                row.cells[3].value = textValue; // Replace ID with text value
            }
        }
    });

==================
v2
function calculateValue(colA, colB) {
    return colA * colB; // Example calculation
}

function onExcelExport(e) {
    var sheet = e.workbook.sheets[0];
    var grid = $("#Grid").data("kendoGrid");
    var data = grid.dataSource.data();

    // ðŸ‘‰ Add a new column for the calculated value
    sheet.columns.push({ width: 150 });

    // ðŸ‘‰ Add a header for the calculated column
    sheet.rows[0].cells.push({
        value: "Calculated Value", // âœ… Custom header
        background: "#f3f3f3", // Optional formatting
        color: "#000000",
        bold: true
    });

    // ðŸ‘‰ Inject calculated values into the exported rows
    sheet.rows.forEach(function(row, rowIndex) {
        if (rowIndex > 0) { // Skip header row
            var colA = data[rowIndex - 1].ColA;
            var colB = data[rowIndex - 1].ColB;

            if (colA != null && colB != null) {
                row.cells.push({
                    value: calculateValue(colA, colB),
                    background: "#f9f9f9",
                    color: "#333"
                });
            }
        }
    });
}

}

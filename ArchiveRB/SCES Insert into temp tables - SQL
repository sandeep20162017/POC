USE [CES]
GO

DECLARE 
    @ViRebuiltStockNum VARCHAR(25) = '035434',
    @ViLinkNumber VARCHAR(25) = '035434',
    @ViTypeId VARCHAR(25) = 'RB',
    @ViUsername VARCHAR(50) = 'System',
    @ArchId INT,
    @EmployeeLabourBaseId INT;

-- Initialize output parameters to 0 to avoid NULLs
DECLARE 
    @ViLabourCost NUMERIC(20,2) = 0,
    @ViLabourOverhead NUMERIC(20,2) = 0,
    @ViMaterialsTotal NUMERIC(20,2) = 0,
    @ViTaxTotal NUMERIC(20,2) = 0,
    @ViTotalCostTax NUMERIC(20,2) = 0;

BEGIN TRY
    --BEGIN TRANSACTION;

    -- Step 1: Calculate Costs (ensure stored procedure handles NULLs)
    EXEC SBCES.CalculateTotalLabourAndMaterialsPartsInRB
        @RebuiltPartNum = @ViLinkNumber,
        @TotalLabourCost = @ViLabourCost OUTPUT,
        @TotalLabourOverHeadCost = @ViLabourOverhead OUTPUT,
        @TotalMaterialCost = @ViMaterialsTotal OUTPUT,
        @TaxTotal = @ViTaxTotal OUTPUT,
        @TotalRebuiltPartCostWithTax = @ViTotalCostTax OUTPUT;

    -- Step 2: Generate new ArchRbMasterlistId
    SELECT @ArchId = ISNULL(MAX(ArchRbMasterlistId), 0) + 1 
    FROM SBCES.ArchRbMasterlist;

    -- Step 3: Insert into #ArchRbMasterlist (handle NULLs explicitly)
    INSERT INTO #ArchRbMasterlist (
        ArchRbMasterlistId,
        MmsStockCode, 
        ItemRefNumber, 
        DetailedDesc, 
        Keyword,
        CorePartNum, 
        RebuiltStockNum, 
        CoreCharge, 
        JobNumber,
        EstimatedCost, 
        SopNumber, 
        DateEntered, 
        EnteredBy,
        LabourCost, 
        LabourOverheadAmount, 
        LabourTotal,
        MaterialsTotal, 
        TotalRebuiltPartCost, 
        TaxTotal, 
        TotalCostTax
    )
    SELECT
        @ArchId,
        ISNULL(RM.MmsStockCode, ''),
        ISNULL(RM.ItemRefNumber, ''),
        ISNULL(RM.DetailedDesc, ''),
        ISNULL(RM.Keyword, ''),
        ISNULL(RM.CorePartNum, ''),
        ISNULL(RM.RebuiltStockNum, ''),
        ISNULL(RM.CoreCharge, ''),
        ISNULL(RM.JobNumber, ''),
        ISNULL(RM.EstimatedCost, 0),
        ISNULL(RM.SopNumber, ''),
        GETDATE(),
        @ViUsername,
        ISNULL(@ViLabourCost, 0),
        ISNULL(@ViLabourOverhead, 0),
        ISNULL(@ViLabourCost, 0) + ISNULL(@ViLabourOverhead, 0),
        ISNULL(@ViMaterialsTotal, 0),
        ISNULL(@ViLabourCost, 0) + ISNULL(@ViMaterialsTotal, 0),
        ISNULL(@ViTaxTotal, 0),
        ISNULL(@ViTotalCostTax, 0)
    FROM SBCES.RbMasterlist RM
    WHERE RM.RebuiltStockNum = @ViRebuiltStockNum;

    -- Step 4: Generate EmployeeLabour IDs
    SELECT @EmployeeLabourBaseId = ISNULL(MAX(Id), 0) 
    FROM SBCES.ArchEmployeeLabour;

    -- Step 5: Insert into #ArchRbEmployeeLabour (handle NULLs)
    INSERT INTO #ArchRbEmployeeLabour (
        Id,
        LabourDefn, 
        DateEntered, 
        LinkNumber, 
        TypeId,
        CostCentre, 
        Task, 
        LabourType, 
        [Usage],
        HrsReqd, 
        AdjHrs, 
        TimeAddition, 
        ArchRbMasterlistId
    )
    SELECT
        @EmployeeLabourBaseId + ROW_NUMBER() OVER (ORDER BY EL.LabourDefn),
        ISNULL(EL.LabourDefn, ''),
        ISNULL(EL.DateEntered, GETDATE()),
        ISNULL(EL.LinkNumber, ''),
        ISNULL(EL.TypeId, ''),
        ISNULL(EL.CostCentre, ''),
        ISNULL(EL.Task, ''),
        ISNULL(EL.LabourType, ''),
        ISNULL(EL.[Usage], ''),
        ISNULL(EL.HrsReqd, ''),
        ISNULL(EL.AdjHrs, ''),
        ISNULL(EL.TimeAddition, 0),
        @ArchId
    FROM SBCES.EmployeeLabour EL
    WHERE EL.LinkNumber = @ViLinkNumber
        AND EL.TypeId = @ViTypeId;

    -- Steps 6-11: Remaining inserts (use ISNULL/COALESCE similarly)
    -- ...

 --   COMMIT TRANSACTION;
END TRY
BEGIN CATCH
    --ROLLBACK TRANSACTION;
    SELECT 
        ERROR_NUMBER() AS ErrorNumber,
        ERROR_MESSAGE() AS ErrorMessage;
END CATCH

-- Cleanup
DROP TABLE IF EXISTS #ArchRbMasterlist, ...;
GO

-- File: CreateTempTables.sql
USE [CES]
GO

-- Create all ARCH temp tables with corrected schemas
CREATE TABLE #ArchRbMasterlist (
    ArchRbMasterlistId INT NOT NULL,
    MmsStockCode VARCHAR(30) NULL,
    ItemRefNumber VARCHAR(16) NULL,
    DetailedDesc VARCHAR(250) NULL,
    Keyword VARCHAR(250) NULL,
    CorePartNum VARCHAR(30) NULL,
    RebuiltStockNum VARCHAR(30) NULL,
    CoreCharge VARCHAR(25) NULL,
    JobNumber VARCHAR(25) NULL,
    DateEntered DATETIME NULL,
    EnteredBy VARCHAR(50) NULL,
    EstimatedCost NUMERIC(20, 2) NOT NULL,
    SopNumber VARCHAR(25) NULL,
    LabourCost NUMERIC(20, 2) NOT NULL,
    LabourOverheadAmount NUMERIC(20, 2) NOT NULL,
    LabourTotal NUMERIC(20, 2) NOT NULL,
    MaterialsTotal NUMERIC(20, 2) NOT NULL,
    TotalRebuiltPartCost NUMERIC(20, 2) NOT NULL,
    TaxTotal NUMERIC(20, 2) NULL,
    TotalCostTax NUMERIC(20, 2) NULL,
    PRIMARY KEY (ArchRbMasterlistId)
);

CREATE TABLE #ArchRbEmployeeLabour (
    Id INT IDENTITY(1,1) NOT NULL,
    LabourDefn VARCHAR(50) NULL,
    DateEntered DATETIME NULL,
    LinkNumber VARCHAR(25) NULL,
    TypeId VARCHAR(5) NULL,
    CostCentre VARCHAR(5) NULL,
    Task VARCHAR(50) NULL,
    LabourType VARCHAR(5) NULL,
    [Usage] VARCHAR(25) NULL,
    HrsReqd VARCHAR(25) NULL,
    AdjHrs VARCHAR(25) NULL,
    TimeAddition NUMERIC(18, 2) NULL,
    ArchRbMasterlistId INT NOT NULL,
    PRIMARY KEY (Id)
);

CREATE TABLE #ArchRbScPartsUsed (
    MmsStockCode VARCHAR(30) NULL,
    DateEntered DATETIME NULL,
    RebPartCost NUMERIC(18, 2) NULL,
    UserEntered VARCHAR(50) NULL,
    MmsCost NUMERIC(18, 2) NULL,
    OemCost NUMERIC(18, 2) NULL,
    MmsRebuiltCode VARCHAR(30) NULL,
    CostCentre VARCHAR(4) NULL,
    QtyReqd VARCHAR(10) NULL,
    PercentUsage VARCHAR(10) NULL,
    LinkCode VARCHAR(30) NULL,
    RebuiltPart VARCHAR(1) NULL,
    LinkType VARCHAR(3) NULL,
    CoreCost NUMERIC(18, 2) NULL,
    ArchRbMasterlistId INT NOT NULL,
    TotalCost NUMERIC(18, 2) NULL,
    ScKeyword VARCHAR(50) NULL,
    ScDescription VARCHAR(500) NULL
);

CREATE TABLE #ArchRbNscPartsUsed (
    OrigSuppNum VARCHAR(50) NULL,
    OrigSupplierName VARCHAR(50) NULL,
    CostCentre VARCHAR(4) NULL,
    QtyReqd VARCHAR(10) NULL,
    PercentUsage VARCHAR(10) NULL,
    DateEntered DATETIME NULL,
    EnteredBy VARCHAR(25) NULL,
    LinkCode VARCHAR(30) NULL,
    Cost NUMERIC(18, 2) NULL,
    LinkType VARCHAR(3) NULL,
    CoreCost NUMERIC(18, 2) NULL,
    ArchRbMasterlistId INT NOT NULL,
    TotalCost NUMERIC(18, 2) NULL
);

CREATE TABLE #ArchRbLabourCcTotal (
    CostCentre VARCHAR(5) NULL,
    TotalHours VARCHAR(25) NULL,
    ArchRbMasterlistId INT NOT NULL
);

CREATE TABLE #ArchRbMaterialsCcTotal (
    CostCentre VARCHAR(5) NULL,
    TotalCost NUMERIC(18, 2) NULL,
    ArchRbMasterlistId INT NOT NULL
);

CREATE TABLE #ArchRbListBuses (
    BusDescription VARCHAR(500) NULL,
    ArchRbMasterlistId INT NOT NULL
);
---------------------
-- File: MainMigrationScript.sql
USE [CES]
GO

DECLARE @ViRebuiltStockNum VARCHAR(25) = '035434',
        @ViLinkNumber VARCHAR(25) = '035434',
        @ViTypeId VARCHAR(25) = 'RB',
        @ViUsername VARCHAR(50) = 'System',
        @ArchId INT;

-- Output Parameters
DECLARE @ViLabourCost NUMERIC(20,2),
        @ViLabourOverhead NUMERIC(20,2),
        @ViMaterialsTotal NUMERIC(20,2),
        @ViTaxTotal NUMERIC(20,2),
        @ViTotalCostTax NUMERIC(20,2);

BEGIN TRY
    --BEGIN TRANSACTION;

    -- Step 1: Calculate Costs
    EXEC SBCES.CalculateTotalLabourAndMaterialsPartsInRB
        @RebuiltPartNum = @ViLinkNumber,
        @TotalLabourCost = @ViLabourCost OUTPUT,
        @TotalLabourOverHeadCost = @ViLabourOverhead OUTPUT,
        @TotalMaterialCost = @ViMaterialsTotal OUTPUT,
        @TaxTotal = @ViTaxTotal OUTPUT,
        @TotalRebuiltPartCostWithTax = @ViTotalCostTax OUTPUT;

    -- Step 2: Insert into Masterlist
    INSERT INTO #ArchRbMasterlist (
        ArchRbMasterlistId, -- Assuming ID is generated externally
        MmsStockCode, ItemRefNumber, DetailedDesc, Keyword,
        CorePartNum, RebuiltStockNum, CoreCharge, JobNumber,
        EstimatedCost, SopNumber, DateEntered, EnteredBy,
        LabourCost, LabourOverheadAmount, LabourTotal,
        MaterialsTotal, TotalRebuiltPartCost, TaxTotal, TotalCostTax
    )
    SELECT
        RM.ArchRbMasterlistId, -- Adjust according to actual source
        RM.MmsStockCode,
        RM.ItemRefNumber,
        RM.DetailedDesc,
        RM.Keyword,
        RM.CorePartNum,
        RM.RebuiltStockNum,
        RM.CoreCharge,
        RM.JobNumber,
        RM.EstimatedCost,
        RM.SopNumber,
        GETDATE(), -- Assuming DateEntered is current date
        @ViUsername, -- Assuming EnteredBy is the current user
        @ViLabourCost,
        @ViLabourOverhead,
        @ViLabourCost + @ViLabourOverhead,
        @ViMaterialsTotal,
        @ViLabourCost + @ViMaterialsTotal,
        @ViTaxTotal,
        @ViTotalCostTax
    FROM SBCES.RbMasterlist RM
    WHERE RM.RebuiltStockNum = @ViRebuiltStockNum;

    SET @ArchId = SCOPE_IDENTITY(); -- Note: Only works if ArchRbMasterlistId is IDENTITY in temp table
    SELECT * FROM #ArchRbMasterlist;

    -- Step 3: Employee Labour
    INSERT INTO #ArchRbEmployeeLabour (
        LabourDefn, DateEntered, LinkNumber, TypeId,
        CostCentre, Task, LabourType, [Usage],
        HrsReqd, AdjHrs, TimeAddition, ArchRbMasterlistId
    )
    SELECT
        EL.LabourDefn,
        EL.DateEntered,
        EL.LinkNumber,
        EL.TypeId,
        EL.CostCentre,
        EL.Task,
        EL.LabourType,
        EL.[Usage], -- Keep as VARCHAR
        EL.HrsReqd,
        EL.AdjHrs,
        EL.TimeAddition, -- Ensure this is NUMERIC(18,2)
        @ArchId
    FROM SBCES.EmployeeLabour EL
    WHERE EL.LinkNumber = @ViLinkNumber
        AND EL.TypeId = @ViTypeId;

    SELECT * FROM #ArchRbEmployeeLabour;

    -- Step 4: SC Parts Used (Rebuilt)
    INSERT INTO #ArchRbScPartsUsed (
        MmsStockCode, DateEntered, RebPartCost, UserEntered,
        MmsCost, OemCost, MmsRebuiltCode, CostCentre,
        QtyReqd, PercentUsage, LinkCode, RebuiltPart,
        LinkType, CoreCost, ArchRbMasterlistId, TotalCost,
        ScKeyword, ScDescription
    )
    SELECT
        UPPER(SU.MmsStockCode),
        SU.DateEntered,
        ISNULL(A.RbUnitCost, 0),
        UPPER(SU.EnteredBy),
        ISNULL(SU.MmsCost, 0),
        ISNULL(SU.OemCost, 0),
        UPPER(SU.MmsRebuiltCode),
        UPPER(SU.CostCentre),
        SU.QtyReqd, -- Keep as VARCHAR
        SU.PercentUsage, -- Keep as VARCHAR
        @ViLinkNumber,
        'Y',
        'RB',
        SU.CoreCost,
        @ArchId,
        ISNULL(A.RbCost, 0),
        UPPER(RM.Keyword),
        UPPER(RM.DetailedDesc)
    FROM SBCES.ScPartsUsed SU
    LEFT JOIN SBCES.RbMasterlist RM 
        ON RM.RebuiltStockNum = SU.MmsRebuiltCode
    LEFT JOIN (
        SELECT 
            RbReference,
            SUM(TRY_CAST(TotalCost AS NUMERIC(18,2))) AS RbCost,
            SUM(TRY_CAST(TotalUnitCost AS NUMERIC(18,2))) AS RbUnitCost
        FROM SBCES.TempMaterialsList
        GROUP BY RbReference
    ) A ON A.RbReference = SU.MmsRebuiltCode
    WHERE SU.LinkCode = @ViLinkNumber
        AND SU.RebuiltPart = 'Y'
        AND SU.LinkType = @ViTypeId;

    SELECT * FROM #ArchRbScPartsUsed WHERE RebuiltPart = 'Y';

    -- Step 5: SC Parts Used (Non-Rebuilt)
    INSERT INTO #ArchRbScPartsUsed (
        MmsStockCode, DateEntered, RebPartCost, UserEntered,
        MmsCost, OemCost, MmsRebuiltCode, CostCentre,
        QtyReqd, PercentUsage, LinkCode, RebuiltPart,
        LinkType, CoreCost, ArchRbMasterlistId, TotalCost,
        ScKeyword, ScDescription
    )
    SELECT
        A.MmsStockCode,
        A.DateEntered,
        A.RebPartCost,
        A.EnteredBy,
        A.MmsCost,
        A.OemCost,
        A.MmsRebuiltCode,
        A.CostCentre,
        A.QtyReqd, -- VARCHAR
        A.PercentUsage, -- VARCHAR
        @ViLinkNumber,
        'N',
        @ViTypeId,
        SBCES.FinalCost(
            TRY_CAST(REPLACE(A.PercentUsage, ',', '.') AS NUMERIC(5,2)),
            TRY_CAST(A.QtyReqd AS NUMERIC(18,2)),
            A.CoreCost, 
            0
        ),
        @ArchId,
        A.MmsCost * TRY_CAST(A.QtyReqd AS NUMERIC(18,2)) 
            * (TRY_CAST(REPLACE(ISNULL(A.PercentUsage, '0'), ',', '.') AS NUMERIC(5,2))/100),
        ISNULL(B.PartType, ''),
        ISNULL(B.DetailedDesc, '')
    FROM SBCES.ScPartsUsed A
    LEFT JOIN SBCES.StockCodedParts B 
        ON B.MmsStockCode = A.MmsStockCode
    WHERE A.LinkCode = @ViLinkNumber
        AND A.LinkType = @ViTypeId
        AND A.RebuiltPart = 'N';

    SELECT * FROM #ArchRbScPartsUsed WHERE RebuiltPart = 'N';

    -- Step 6: NSC Parts Used
    INSERT INTO #ArchRbNscPartsUsed (
        OrigSuppNum, OrigSupplierName, CostCentre,
        QtyReqd, PercentUsage, DateEntered, EnteredBy,
        LinkCode, Cost, LinkType, CoreCost,
        ArchRbMasterlistId, TotalCost
    )
    SELECT
        NP.OrigSuppNum,
        NP.OrigSupplierName,
        NP.CostCentre,
        NP.QtyReqd, -- VARCHAR
        NP.PercentUsage, -- VARCHAR
        NP.DateEntered,
        NP.EnteredBy,
        NP.LinkCode,
        NP.Cost,
        NP.LinkType,
        SBCES.FinalCost(
            TRY_CAST(REPLACE(NP.PercentUsage, ',', '.') AS NUMERIC(5,2)),
            TRY_CAST(NP.QtyReqd AS NUMERIC(18,2)),
            NP.CoreCost, 
            0
        ),
        @ArchId,
        NP.Cost * TRY_CAST(NP.QtyReqd AS NUMERIC(18,2)) 
            * (TRY_CAST(REPLACE(ISNULL(NP.PercentUsage, '0'), ',', '.') AS NUMERIC(5,2))/100)
    FROM SBCES.NscPartsUsed NP
    WHERE NP.LinkCode = @ViLinkNumber
        AND NP.LinkType = @ViTypeId;

    SELECT * FROM #ArchRbNscPartsUsed;

    -- Step 7: Labour CC Total
    INSERT INTO #ArchRbLabourCcTotal (
        CostCentre, TotalHours, ArchRbMasterlistId
    )
    SELECT
        CC,
        CAST(SUM(TRY_CAST(ExtendedTime AS NUMERIC(18,2))) AS VARCHAR(25)), -- Match VARCHAR(25)
        @ArchId
    FROM SBCES.TempLabourList
    GROUP BY CC;

    SELECT * FROM #ArchRbLabourCcTotal;

    -- Step 8: Materials CC Total
    INSERT INTO #ArchRbMaterialsCcTotal (
        CostCentre, TotalCost, ArchRbMasterlistId
    )
    SELECT
        CostCentre,
        SUM(TRY_CAST(TotalCost AS NUMERIC(18,2))),
        @ArchId
    FROM SBCES.TempMaterialsList
    GROUP BY CostCentre;

    SELECT * FROM #ArchRbMaterialsCcTotal;

    -- Step 9: List Buses
    INSERT INTO #ArchRbListBuses (
        BusDescription, ArchRbMasterlistId
    )
    SELECT
        LB.Description,
        @ArchId
    FROM SBCES.RbListOfBuses RB
    INNER JOIN SBCES.ListOfBuses LB
        ON RB.ListId = LB.ListId
    WHERE RB.RebuiltStockNum = @ViLinkNumber;

    SELECT * FROM #ArchRbListBuses;

 --   COMMIT TRANSACTION;
END TRY
BEGIN CATCH
    ROLLBACK TRANSACTION;
    SELECT 
        ERROR_NUMBER() AS ErrorNumber,
        ERROR_MESSAGE() AS ErrorMessage;
END CATCH

-- Cleanup
DROP TABLE IF EXISTS #ArchRbMasterlist, #ArchRbEmployeeLabour,
                  #ArchRbScPartsUsed, #ArchRbNscPartsUsed,
                  #ArchRbLabourCcTotal, #ArchRbMaterialsCcTotal,
                  #ArchRbListBuses;

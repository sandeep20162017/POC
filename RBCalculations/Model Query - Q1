
based on your earlier suggetion, 
Following Select doesnt seem correct. LabourDetailsRebuiltPartsViewModel is a model embaded in TotalCostInRbModel and not SQL table.
Pls recheck my original ask, and rewrite the changes. If you need additional information pls ask me.
private async Task<IEnumerable<LabourDetailsRebuiltPartsViewModel>> GetLabourCostDetails(string partNum)
{
    try
    {
         string query = @"
                                SELECT 
                                    Id, 
                                    LabourDefn,
                                    DateEntered,
                                    LinkNumber,
                                    TypeId,
                                    CostCentre,
                                    Task,
                                    LabourType,
                                    Usage,
                                    DecimalHrs,
                                    EffectiveHours,
                                    AdjHrs,
                                    LabourCost,
                                    LabourOverheadTotal,
                                    AdjustedHours,
                                    LabourHrs,
                                    LabourMins,
                                    HrsReqd,
                                    DateRevised,
                                    TimeAddition,
                                    RebuiltPartNum,
                                    LastModifiedBy
                                FROM 
                                    LabourDetailsRebuiltPartsViewModel
                                WHERE 
                                    RebuiltPartNum ='"    + partNum + "'";

        // Execute the query using Dapper
        var labourDetails = await _dbConnection.QueryAsync<LabourDetailsRebuiltPartsViewModel>(
            query,
            new { PartNum = partNum }
        );

        // If nothing is found, return an empty list to avoid null reference issues
        return labourDetails ?? new List<LabourDetailsRebuiltPartsViewModel>();
    }
    catch (Exception ex)
    {
        // Log the exception (replace with proper logging)
        Console.WriteLine($"Error fetching labour details: {ex.Message}");
        return new List<LabourDetailsRebuiltPartsViewModel>();
    }
}
TotalCostInRBPartsModel.cs :
using System.ComponentModel.DataAnnotations;

namespace BCES.Models.Parts
{
    public class TotalCostInRbModel
    {
       
        [Key]
        public int Id { get; set; }

        //  allow multiple labour details per part
        public IEnumerable<LabourDetailsRebuiltPartsViewModel> LabourDetailsRebuiltParts { get; set; }

        public decimal LabourCost { get; set; }
        public decimal LabourOverhead { get; set; }
        public decimal LabourTotal { get; set; }
    }
}


private async Task<IEnumerable<LabourDetailsRebuiltPartsViewModel>> GetLabourCostDetails(string partNum)
{
    try
    {
        const string query = @"
            SELECT 
                Id, 
                LabourDefn,
                DateEntered,
                LinkNumber,
                TypeId,
                CostCentre,
                Task,
                LabourType,
                Usage,
                DecimalHrs,
                EffectiveHours,
                AdjHrs,
                LabourCost,
                LabourOverheadTotal,
                AdjustedHours,
                LabourHrs,
                LabourMins,
                HrsReqd,
                DateRevised,
                TimeAddition,
                RebuiltPartNum,
                LastModifiedBy
            FROM 
                LabourDetailsRebuiltPartsViewModel
            WHERE 
                RebuiltPartNum = @PartNum";

        // Execute the query using Dapper
        var labourDetails = await _dbConnection.QueryAsync<LabourDetailsRebuiltPartsViewModel>(
            query, 
            new { PartNum = partNum }
        );

        // If nothing is found, return an empty list to avoid null reference issues
        return labourDetails ?? new List<LabourDetailsRebuiltPartsViewModel>();
    }
    catch (Exception ex)
    {
        // Log the exception (replace with proper logging)
        Console.WriteLine($"Error fetching labour details: {ex.Message}");
        return new List<LabourDetailsRebuiltPartsViewModel>();
    }
}

. Update the ViewModel
Since we‚Äôre calculating values in SQL, the view model should be structured like this:

Models/Parts/TotalCostSummaryViewModel.cs
csharp
Copy
Edit
using System.ComponentModel.DataAnnotations;

namespace BCES.Models.Parts
{
    public class TotalCostSummaryViewModel
    {
        [Key]
        public int Id { get; set; }

        public string RebuiltPartNum { get; set; }

        public decimal DecimalHrs { get; set; }
        public decimal EffectiveHours { get; set; }
        public string AdjHrs { get; set; } // Formatted as HH:MM

        public decimal LabourRate { get; set; }
        public decimal LabourCost { get; set; }
        public decimal LabourOverheadTotal { get; set; }
    }
}
‚úÖ 2. Write the SQL Query with Calculations
Now we‚Äôll write a single complex query that:
‚úîÔ∏è Calculates DecimalHours, EffectiveHours, AdjHrs
‚úîÔ∏è Uses JOIN to get WageGroup and LabourRate
‚úîÔ∏è Uses subqueries for NonProductiveAdjustment and OverheadPercentage
‚úîÔ∏è Returns a flat result set

Controller Code:
csharp
Copy
Edit
[HttpGet]
public async Task<IActionResult> GetTotalCostInRbPartsData(string rebuiltPartNum)
{
    try
    {
        const string query = @"
            -- Create a temp table for calculations
            CREATE TABLE #TempLabourDetails
            (
                Id INT,
                RebuiltPartNum VARCHAR(30),
                DecimalHrs DECIMAL(18, 2),
                EffectiveHours DECIMAL(18, 2),
                AdjHrs VARCHAR(10),
                LabourRate DECIMAL(18, 2),
                LabourCost DECIMAL(18, 2),
                LabourOverheadTotal DECIMAL(18, 2)
            );

            -- Insert calculated values into temp table
            INSERT INTO #TempLabourDetails
            SELECT 
                EL.Id,
                EL.RebuiltPartNum,

                -- DecimalHours = LabourHrs + (LabourMins / 60)
                CAST(EL.LabourHrs AS DECIMAL(18,2)) + (CAST(EL.LabourMins AS DECIMAL(18,2)) / 60) AS DecimalHrs,

                -- EffectiveHours = DecimalHrs √ó (Usage / 100)
                (CAST(EL.LabourHrs AS DECIMAL(18,2)) + (CAST(EL.LabourMins AS DECIMAL(18,2)) / 60)) 
                * (CAST(NULLIF(EL.Usage, '') AS DECIMAL(18,2)) / 100) AS EffectiveHours,

                -- AdjHrs = EffectiveHours / NonProductiveAdjustment
                CAST(
                    ((CAST(EL.LabourHrs AS DECIMAL(18,2)) + (CAST(EL.LabourMins AS DECIMAL(18,2)) / 60)) 
                    * (CAST(NULLIF(EL.Usage, '') AS DECIMAL(18,2)) / 100)) 
                    / CAST(
                        (SELECT TOP 1 CAST(Value AS DECIMAL(18,2)) 
                         FROM [CES].[SBCES].[CesSettings]
                         WHERE Parameter = 'NON_PRODUCTIVE_ADJUSTMENT') AS DECIMAL(18,2)
                    ) AS VARCHAR(10)) AS AdjHrs,

                -- Get LabourRate using WageGroup lookup
                (SELECT TOP 1 ES.RatePerHour 
                 FROM [CES].[SBCES].[EmployeeSalaries] ES
                 WHERE ES.WageGroup = 
                 (SELECT TOP 1 EC.WageGroup
                  FROM [CES].[SBCES].[EmplClass] EC
                  WHERE EC.LabourDefn LIKE '%' + EL.LabourDefn + '%')) AS LabourRate,

                -- LabourCost = AdjHrs √ó LabourRate
                ISNULL(
                    (CAST(
                        ((CAST(EL.LabourHrs AS DECIMAL(18,2)) + (CAST(EL.LabourMins AS DECIMAL(18,2)) / 60)) 
                        * (CAST(NULLIF(EL.Usage, '') AS DECIMAL(18,2)) / 100)) 
                        / CAST(
                            (SELECT TOP 1 CAST(Value AS DECIMAL(18,2)) 
                             FROM [CES].[SBCES].[CesSettings]
                             WHERE Parameter = 'NON_PRODUCTIVE_ADJUSTMENT') AS DECIMAL(18,2)
                        ) AS DECIMAL(18,2))
                    * (SELECT TOP 1 ES.RatePerHour 
                       FROM [CES].[SBCES].[EmployeeSalaries] ES
                       WHERE ES.WageGroup = 
                       (SELECT TOP 1 EC.WageGroup
                        FROM [CES].[SBCES].[EmplClass] EC
                        WHERE EC.LabourDefn LIKE '%' + EL.LabourDefn + '%')
                    ), 0) AS LabourCost,

                -- LabourOverheadTotal = LabourCost √ó OverheadPercentage
                ISNULL(
                    (CAST(
                        ((CAST(EL.LabourHrs AS DECIMAL(18,2)) + (CAST(EL.LabourMins AS DECIMAL(18,2)) / 60)) 
                        * (CAST(NULLIF(EL.Usage, '') AS DECIMAL(18,2)) / 100)) 
                        / CAST(
                            (SELECT TOP 1 CAST(Value AS DECIMAL(18,2)) 
                             FROM [CES].[SBCES].[CesSettings]
                             WHERE Parameter = 'NON_PRODUCTIVE_ADJUSTMENT') AS DECIMAL(18,2)
                        ) AS DECIMAL(18,2))
                    * (SELECT TOP 1 CAST(Value AS DECIMAL(18,2)) 
                       FROM [CES].[SBCES].[CesSettings]
                       WHERE Parameter = 'OVERHEAD'
                    ), 0) AS LabourOverheadTotal

            FROM 
                SBCES.EmployeeLabour EL
            WHERE 
                EL.RebuiltPartNum = @RebuiltPartNum;

            -- Return the calculated values
            SELECT * FROM #TempLabourDetails;

            -- Cleanup temp table
            DROP TABLE #TempLabourDetails;
        ";

        var result = await _dbConnection.QueryAsync<TotalCostSummaryViewModel>(
            query,
            new { RebuiltPartNum = rebuiltPartNum }
        );

        return Json(result);
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error: {ex.Message}");
        return Json(new List<TotalCostSummaryViewModel>());
    }
}
‚úÖ 3. Update the Kendo Grid Binding
No changes to the grid except for model name:

html
Copy
Edit
@(Html.Kendo().Grid<BCES.Models.Parts.TotalCostSummaryViewModel>()
    .Name("TotalCostSummaryGrid")
    .Columns(columns =>
    {
        columns.Bound(c => c.DecimalHrs).Title("Decimal Hours");
        columns.Bound(c => c.EffectiveHours).Title("Effective Hours");
        columns.Bound(c => c.AdjHrs).Title("Adjusted Hours");
        columns.Bound(c => c.LabourRate).Title("Labour Rate");
        columns.Bound(c => c.LabourCost).Title("Labour Cost");
        columns.Bound(c => c.LabourOverheadTotal).Title("Labour Overhead");
    })
    .Pageable()
    .Sortable()
)
üöÄ Summary of Fixes:
‚úÖ All calculations done in SQL using JOIN and CASTING.
‚úÖ Clean handling of NULLs and type conversions.
‚úÖ Cleaned up the view model for simplicity.
‚úÖ Proper cleanup of the temp table.


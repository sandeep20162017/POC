GetLabourCostDetails using Dapper and Correct Tables
Here’s the corrected query:

csharp
Copy
Edit
private async Task<IEnumerable<LabourDetailsRebuiltPartsViewModel>> GetLabourCostDetails(string partNum)
{
    try
    {
        const string query = @"
            SELECT 
                EL.Id,
                EL.LabourDefn,
                EL.DateEntered,
                EL.LinkNumber,
                EL.TypeId,
                EL.CostCentre,
                EL.Task,
                EL.LabourType,
                REPLACE(EL.Usage, ',', '.') AS Usage,
                EL.HrsReqd,
                EL.AdjHrs,
                EL.DateRevised,
                EL.TimeAddition,
                EL.RebuiltPartNum,
                EL.LastModifiedBy,
                ISNULL(ES.RatePerHour, 0) AS LabourCost,
                ISNULL(EC.OverheadType, 0) AS LabourOverheadTotal
            FROM 
                SBCES.EmployeeLabour EL
            LEFT JOIN 
                SBCES.EmplClass EC ON EL.LabourDefn = UPPER(EC.LabourDefn)
            LEFT JOIN 
                SBCES.EmployeeSalaries ES ON EC.WageGroup = ES.WageGroup
            WHERE 
                EL.RebuiltPartNum = @PartNum";

        // Execute the query using Dapper
        var labourDetails = await _dbConnection.QueryAsync<LabourDetailsRebuiltPartsViewModel>(
            query,
            new { PartNum = partNum }
        );

        // Return an empty list if no records are found
        return labourDetails ?? new List<LabourDetailsRebuiltPartsViewModel>();
    }
    catch (Exception ex)
    {
        // Log the exception (use proper logging)
        Console.WriteLine($"Error fetching labour details: {ex.Message}");
        return new List<LabourDetailsRebuiltPartsViewModel>();
    }
}
2. Update GetTotalCostInRbPartsData
Now that GetLabourCostDetails works correctly, let's update GetTotalCostInRbPartsData to calculate totals:

csharp
Copy
Edit
public async Task<IEnumerable<TotalCostInRbModel>> GetTotalCostInRbPartsData(string partNum)
{
    try
    {
        var labourDetails = await GetLabourCostDetails(partNum);

        if (labourDetails.Any())
        {
            var totalCostModel = new TotalCostInRbModel
            {
                LabourDetailsRebuiltParts = labourDetails,
                LabourCost = Math.Round(labourDetails.Sum(x => x.LabourCost), 2),
                LabourOverhead = Math.Round(labourDetails.Sum(x => x.LabourOverheadTotal), 2),
                LabourTotal = Math.Round(labourDetails.Sum(x => x.LabourCost + x.LabourOverheadTotal), 2)
            };

            return new List<TotalCostInRbModel> { totalCostModel };
        }

        return new List<TotalCostInRbModel>();
    }
    catch (Exception ex)
    {
        // Log the exception
        Console.WriteLine($"Error fetching total cost data: {ex.Message}");
        return new List<TotalCostInRbModel>();
    }
}
3. Kendo Grid Binding in View
Ensure the grid correctly binds to the calculated values:

html
Copy
Edit
@(Html.Kendo().Grid<BCES.Models.Parts.TotalCostInRbModel>()
    .Name("TotalCostInRbModelGrid")
    .Columns(columns =>
    {
        columns.Bound(c => c.LabourCost).Title("Labour Cost").Format("{0:C2}");
        columns.Bound(c => c.LabourOverhead).Title("Labour Overhead").Format("{0:C2}");
        columns.Bound(c => c.LabourTotal).Title("Labour Total").Format("{0:C2}");
    })
    .DataSource(dataSource => dataSource
        .Ajax()
        .Read(read => read.Url(Url.Action("GetTotalCostInRbPartsData", "TotalCostInRbParts") + "?partNum=" + ViewBag.PartNum).Type(HttpVerbs.Get))
    )
    .Pageable()
    .Sortable()
    .Filterable()
)
4. Fix Parameter Handling in Controller
Instead of adding the parameter directly into the query (to avoid SQL injection), pass it using Dapper’s parameter handling:

csharp
Copy
Edit
new { PartNum = partNum }

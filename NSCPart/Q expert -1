I want to interate following combo box to Tekerik Kendo ASp.NET core grid column. Grid uses InCell edit.
Controllr action (GetAutoCompleteData) needs column name and search text. We need to pass these for ADD (new row) and edit InCell
@model object

@{
    var fieldName = ViewData.TemplateInfo.GetFullHtmlFieldName("");
}

@(Html.Kendo().ComboBox()
    .Name(fieldName)
    .DataTextField("Text")
    .DataValueField("Value")
    .Filter(FilterType.Contains)
    .Placeholder("Select...")
    
    .HtmlAttributes(new Dictionary<string, object>
    {
        { "name", fieldName },
        { "data-role", "autocomplete" }, // Correct role for ComboBox
        { "data-column", fieldName } // Pass column name
    })
    .DataSource(source =>
    {
        source.Read(read =>
        {
            read.Url(Url.Action("GetAutoCompleteData", "AutoComplete"))
                .Type(HttpVerbs.Get)
                .Data("getAutoCompleteParams"); // This triggers parameter collection
        })
        .ServerFiltering(true);
    })
    .Template("#= Text #")
)

Index.cshtml :
@(
Html.Kendo().Grid<BCES.Models.Parts.NscPartsUsedViewModel>()
                                .Name("NscPartsUsedGrid")
                                .Columns(columns =>
                            {
                                columns.Bound(p => p.NscPartsUsedId).Title("Part Id").Hidden(true); 
                                columns.Bound(p => p.OrigSuppNum).Title("Supplier Number").Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).EditorTemplateName("ComboBoxEditor");
...
.Editable(editable => editable.Mode(GridEditMode.InCell).TemplateName("NscPartsAddUpdate"))
...
 .Model(model =>
 {
     model.Id(u => u.NscPartsUsedId);
     model.Field(c => c.NscPartsUsedId);
      model.Field(c => c.OrigSupplierName);
       model.Field(c => c.OrigSuppNum);
                                                    
 })

 .Read(read => read.Url(Url.Action("GetNscPartsUsedView", "NscPartsUsed")).Type(HttpVerbs.Get))
 .Create(create => create.Url(Url.Action("CreateNscPartsUsed", "NscPartsUsed")).Type(HttpVerbs.Post))
 .Update(update => update.Url(Url.Action("UpdateNscPartsUsed", "NscPartsUsed")).Type(HttpVerbs.Post))
 .Destroy(delete => delete.Url(Url.Action("DeleteNscPartsUsed", "NscPartsUsed")).Type(HttpVerbs.Post))
..
)
 <script>
     function getAutoCompleteParams() {
         var input = $("input[data-role='autocomplete']:focus");
         return {
             columnName: input.attr("name"),
             searchText: input.val() || "" // Handle empty search text
         };
     }
 </script>

Verify Your Editor Templates
Ensure your ComboBoxEditor.cshtml has the correct data-role and data-column attributes:

html
Copy
@(Html.Kendo().ComboBox()
    .Name(fieldName)
    .DataTextField("Text")
    .DataValueField("Value")
    .Editable(false)
    .HtmlAttributes(new Dictionary<string, object>
    {
        { "name", fieldName },
        { "data-role", "combobox" }, // ✅ Must match Kendo's ComboBox role
        { "data-column", fieldName } // ✅ Passes column name
    })
    // ... rest of config
)
Run HTML
Common Fixes if Detection Still Fails:
Check Rendered HTML
Inspect the ComboBox/AutoComplete in the browser’s DevTools. The root element should have:

html
Copy
<div data-role="combobox" data-column="OrigSupplierName">...</div>
Run HTML
Confirm Widget Initialization
Add a test log to ensure widgets are initialized:

javascript
Copy
// In your grid initialization script
var grid = $("#NscPartsUsedGrid").data("kendoGrid");
grid.one("dataBound", function() {
    console.log("ComboBox instance:", $("#OrigSupplierName").data("kendoComboBox"));
});
Handle Dynamic Grid Rows
If the grid uses dynamic rows (e.g., in-cell editing), ensure the data-column attribute is propagated to new rows:

csharp
Copy
// In your ViewModel, ensure the field name matches
model.Field(c => c.OrigSupplierName); // Matches the column name in the grid

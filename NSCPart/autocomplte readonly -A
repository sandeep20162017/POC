date ComboBoxEditor.cshtml
Set the data-role to "combobox" and ensure data-column is correctly assigned:

html
Copy
@model object

@{
    var fieldName = ViewData.TemplateInfo.GetFullHtmlFieldName("");
}

@(Html.Kendo().ComboBox()
    .Name(fieldName)
    .DataTextField("Text")
    .DataValueField("Value")
    .Filter(FilterType.Contains)
    .Placeholder("Select...")
    .Editable(false) // Prevent typing
    .HtmlAttributes(new Dictionary<string, object>
    {
        { "name", fieldName },
        { "data-role", "combobox" }, // Correct role for ComboBox
        { "data-column", fieldName } // Pass column name
    })
    .DataSource(source =>
    {
        source.Read(read =>
        {
            read.Url(Url.Action("GetAutoCompleteData", "AutoComplete"))
                .Type(HttpVerbs.Get)
                .Data("getAutoCompleteParams"); // This triggers parameter collection
        })
        .ServerFiltering(true);
    })
)
Run HTML
2. Modify getAutoCompleteParams in Index.cshtml
Adjust the JavaScript to handle both AutoComplete and ComboBox widgets:

javascript
Copy
function getAutoCompleteParams() {
    var activeElement = document.activeElement;
    var input = $(activeElement);
    
    // Check if focused element is part of a ComboBox
    var comboBoxWidget = input.closest("[data-role='combobox']").data("kendoComboBox");
    // Check if focused element is part of an AutoComplete
    var autoCompleteWidget = input.closest("[data-role='autocomplete']").data("kendoAutoComplete");

    if (comboBoxWidget) {
        return {
            columnName: comboBoxWidget.element.attr("data-column"), // Get column from ComboBox's HTML attribute
            searchText: comboBoxWidget.input.val() || "" // Get current input value
        };
    } else if (autoCompleteWidget) {
        return {
            columnName: autoCompleteWidget.element.attr("data-column"), 
            searchText: autoCompleteWidget.input.val() || ""
        };
    }

    // Fallback if neither widget is found (unlikely)
    return {
        columnName: "",
        searchText: ""
    };
}
Key Changes:
ComboBox Configuration:

data-role="combobox": Ensures the ComboBox is distinguishable from AutoComplete.

data-column: Passes the column name (e.g., OrigSupplierName) to the backend.

JavaScript Logic:

Uses Kendo's widget API to retrieve the focused ComboBox/AutoComplete instance.

Extracts columnName from the widget's data-column HTML attribute.

Gets searchText from the widget's current input value.

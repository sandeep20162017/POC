You are ASP.NET core (v 8.0) and Telerik (Kendoo) ASP.NET core expert.
In below Index.cshtml, I want to use Telerik combobox for Supplier Number (OrigSuppNum) and Supplier Name (OrigSupplierName)column, sample below.
For Combobox, Try to Use the Autocomplte logic from  my Autocomplte control - code below (at least : read.Url(Url.Action("GetAutoCompleteData", "AutoComplete"))).
Make Supplier Number and Supplier name as read only.
Suggest controller changes if any. 

Telerik example of ComboBox :
<div class="k-d-flex k-justify-content-center" style="padding-top: 54px;">
    <div class="k-w-300">
        <h4 style="text-align: center;">Customize your Kendo T-shirt</h4>
        <img id="tshirt" alt="T-shirt image" src="@Url.Content("~/shared/web/combobox/tShirt.png")" />
        <label for="fabric">T-shirt Fabric</label>
        @(Html.Kendo().ComboBox()
            .Name("fabric")
            .Filter(FilterType.Contains)
            .Placeholder("Select fabric...")
            .DataTextField("Text")
            .DataValueField("Value")
            .BindTo(new List<SelectListItem>() {
                 new SelectListItem() {
                 Text = "Cotton", Value = "1"
                 },
                 new SelectListItem() {
                 Text = "Polyester", Value = "2"
                 },
                 new SelectListItem() {
                 Text = "Cotton/Polyester", Value = "3"
                 },
                 new SelectListItem() {
                 Text = "Rib Knit", Value = "4"
                 }
            })
            .SelectedIndex(3)
            .Suggest(true)
            .HtmlAttributes(new { style = "width:100%;" })
        )
        <br />
        <br />
        <br />
        <label for="size">T-shirt Size</label>
        @(Html.Kendo().ComboBox()
            .Name("size")
            .Placeholder("Select size...")
            .BindTo(new List<string>() {
                "X-Small",
                "Small",
                "Medium",
                "Large",
                "X-Large",
                "2X-Large"
                })
            .SelectedIndex(0)
            .Suggest(true)
            .HtmlAttributes(new { style = "width:100%;" })
         )
        <button class="k-button k-button-solid-primary k-button-solid k-button-md k-rounded-md" id="get" style="margin-top: 2em; float: right;">Customize</button>
    </div>
</div>
<style>
    #tshirt {
        display: block;
        margin: 2em auto;
    }

    .k-readonly {
        color: gray;
    }
</style>

<script>
        $(document).ready( function () {
            var fabric = $("#fabric").data("kendoComboBox");
            var size = $("#size").data("kendoComboBox");

            $("#get").click(function () {
                alert('Thank you! Your Choice is:\n\nFabric ID: ' + fabric.value() + ' and Size: ' + size.value());
            });
        });
    </script>
Index.cshtml :

@model IEnumerable<BCES.Models.Parts.NscPartsUsedViewModel>

@{
    ViewData["Title"] = "Non Stock Coded Parts";
}

 <h6>Non Stock Coded Parts</h6>

@(
Html.Kendo().Grid<BCES.Models.Parts.NscPartsUsedViewModel>()
                                .Name("NscPartsUsedGrid")
                                .Columns(columns =>
                            {
                                columns.Bound(p => p.NscPartsUsedId).Title("Part Id").Hidden(true); 
                                columns.Bound(p => p.OrigSuppNum).Title("Supplier Number").Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).EditorTemplateName("AutoCompleteEditor");
                                columns.Bound(p => p.OrigSupplierName).Title("Supplier Name").Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).EditorTemplateName("AutoCompleteEditor");
                                columns.Bound(p => p.KeyWord).Title("Keyword").Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).EditorTemplateName("AutoCompleteEditor");
                                columns.Bound(p => p.Description).Title("Description").Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).EditorTemplateName("AutoCompleteEditor");
                                columns.Bound(p => p.OemPartCost).Title("OEM Part Cost").Filterable(ftb => ftb.Cell(cell => cell.Operator("gte"))).Format("{0:C2}").EditorTemplateName("Currency");
                                columns.Command(command =>
                                  {
                                      command.Custom("Delete")
                                         .Click("showDeleteConfirmation")
                                         .Text(" ")
                                         .IconClass("k-icon k-i-delete")
                                         .HtmlAttributes(new { @class = "text-danger", title = "Delete" });
                                  }).Title("Actions");
                            })
                 //InCell
                 .ToolBar(toolbar =>
                    {
                        toolbar.Create();
                        toolbar.Save();
                    })
                .Editable(editable => editable.Mode(GridEditMode.InCell).TemplateName("NscPartsAddUpdate"))
                
                .Pageable()
                .Sortable()
                .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
                .DataSource(dataSource => dataSource
                    .Ajax()
                    .Events(events => events
                    .Error("onDataSourceError")
                    .RequestEnd("onRequestEnd")
                     )
                    .Model(model =>
                    {
                        model.Id(u => u.NscPartsUsedId);
                        model.Field(c => c.OrigSuppNum);
                        model.Field(c => c.OrigSupplierName);
                        model.Field(c => c.KeyWord);
                        model.Field(c => c.Description);
                        model.Field(c => c.OrigSuppNum);
                        model.Field(c => c.OemPartCost);                       
                                                                       
                    })
                   
                    .Read(read => read.Url(Url.Action("GetNscPartsUsedView", "NscPartsUsed")).Type(HttpVerbs.Get))
                    .Create(create => create.Url(Url.Action("CreateNscPartsUsed", "NscPartsUsed")).Type(HttpVerbs.Post))
                    .Update(update => update.Url(Url.Action("UpdateNscPartsUsed", "NscPartsUsed")).Type(HttpVerbs.Post))
                    .Destroy(delete => delete.Url(Url.Action("DeleteNscPartsUsed", "NscPartsUsed")).Type(HttpVerbs.Post))
                        
                   )
                
            )
<!-- Custom Delete Confirmation Dialog -->
<div id="deleteConfirmationDialog" style="display: none;">
    <div class="confirmation-message">
        <span class="k-icon k-i-warning confirmation-icon"></span>
        <!-- Edit this span text  -->
        <span>Are you sure you want to delete this item?</span>
    </div>
    <div class="confirmation-buttons">
        <button type="button" class="k-button cancel-btn">Cancel</button>
        <button type="button" class="k-button confirm-btn">Delete</button>
    </div>
</div>
<div id="notification"></div>
  @section Scripts {
    <script>
        function getAutoCompleteParams() {
            var input = $("input[data-role='autocomplete']:focus");
            return {
                columnName: input.attr("name"),
                searchText: input.val() || "" // Handle empty search text
            };
        }
    </script>
    
        @* notification - add following JS, add div, add in grid .Error("onDataSourceError"),  .RequestEnd("onRequestEnd"), change contoller action to return json *@
     <script>
            // Initialize notification FIRST
            var notification = $("#notification").kendoNotification({
                position: {
                pinned: true,
            top: 50,
            right: 30
                    },
            autoHideAfter: 4000,
            stacking: "down"
                }).data("kendoNotification");

            // Error handler
            function onDataSourceError(e) {
                let errorMessage = "Operation failed: ";

            if (e.errorThrown) {
                errorMessage += e.errorThrown;
                    } else if (e.xhr && e.xhr.responseText) {
                errorMessage += e.xhr.responseText;
                    }

            notification.error(errorMessage);
                }

            // Success handler
            function onRequestEnd(e) {
                    if (e.type === "create") {
                notification.success("Record created successfully");
                    } else if (e.type === "update") {
                notification.success("Record updated successfully");
                    } else if (e.type === "destroy") {
                notification.success("Record deleted successfully");
                    }
                }
    </script>

    <script>

        // Initialize custom confirmation dialog
        var deleteDialog = $("#deleteConfirmationDialog").kendoWindow({
            width: "400px",
            title: "Confirm Delete",
            modal: true,
            visible: false,
            actions: ["Close"]
        }).data("kendoWindow");

        function showDeleteConfirmation(e) {
            e.preventDefault();
            var grid = $("#NscPartsUsedGrid").data("kendoGrid");
            var dataItem = grid.dataItem($(e.currentTarget).closest("tr"));

            // Store reference to the dataItem
            deleteDialog.dataItem = dataItem;

            deleteDialog.center().open();
        }

        // Handle dialog buttons
        $(document).on("click", "#deleteConfirmationDialog .confirm-btn", function () {
            var grid = $("#NscPartsUsedGrid").data("kendoGrid");
            var dataItem = deleteDialog.dataItem;

            $.ajax({
                url: '@Url.Action("DeleteNscPartsUsed", "NscPartsUsed")',
                type: 'POST',
                data: { NscPartsUsedId: dataItem.NscPartsUsedId },
                success: function () {
                    grid.dataSource.remove(dataItem);
                    notification.success("Record deleted successfully");
                    deleteDialog.close();
                },
                error: function (xhr) {
                    notification.error("Delete failed: " + xhr.responseText);
                    deleteDialog.close();
                }
            });
        });

        $(document).on("click", "#deleteConfirmationDialog .cancel-btn", function () {
            deleteDialog.close();
        });

    </script>
    

  

       
  }

 AutoCompleteEditor.cshtml :
@model object

@{
    var fieldName = ViewData.TemplateInfo.GetFullHtmlFieldName("");
}

@(Html.Kendo().AutoComplete()
    .Name(fieldName)
    .DataTextField("Text") // Changed from "this" to "Text"
    .Filter("contains")
    .Placeholder("Type to search...")
    .HtmlAttributes(new Dictionary<string, object>
    {
        { "name", fieldName },
        { "data-role", "autocomplete" },
        { "data-column", fieldName }
    })
    .DataSource(source =>
    {
        source.Read(read =>
        {
            read.Url(Url.Action("GetAutoCompleteData", "AutoComplete"))
                .Type(HttpVerbs.Get)
                .Data("getAutoCompleteParams");
        })
        .ServerFiltering(true);
    })
    .Template("#= Text #") // Explicit template to display data
   
)
NSCPartsUsedController.cs :
namespace BCES.Controllers.Parts
{

    //[Route("NscPartsUsed")]
    public class NscPartsUsedController : BaseController
    {
        private readonly DapperContext _db;
        private readonly IDbConnection _dbConnection;
        private readonly IHttpContextAccessor _httpContextAccessor;


        public NscPartsUsedController(DapperContext dapper, IHttpContextAccessor httpContextAccessor) : base(dapper, httpContextAccessor)
        {
            _db = dapper;
            _dbConnection = _db.CreateConnection();

            _httpContextAccessor = httpContextAccessor;
        }
        // GET: NscPartsUsed/Index
        [HttpGet("NscPartsUsedIndex")]
        [AllowAnonymous]
        public IActionResult NscPartsUsedIndex()
        {
          // return View();
           return View("~/Views/Parts/NonStockCodedParts/Index.cshtml");
        }

        // POST: NscPartsUsed/GetNscPartsUsedView
        [HttpGet]
        [AllowAnonymous]
        public async Task<ActionResult> GetNscPartsUsedView([DataSourceRequest] DataSourceRequest request)
        {
            // Fetch data for the grid
            var model = await GetNscPartsUsedData();
            return Json(model.ToDataSourceResult(request));
        }

        // POST: NscPartsUsed/CreateNscPartsUsed
       [HttpPost]
        [AllowAnonymous]
        public async Task<IActionResult> CreateNscPartsUsed([DataSourceRequest] DataSourceRequest request, [FromForm] NscPartsUsedViewModel nscPartsUsed)
        {
            if (!ModelState.IsValid)
            {
                var errors = ModelState.Values
                    .SelectMany(v => v.Errors)
                    .Select(e => e.ErrorMessage);
                return BadRequest(new { Errors = errors });
            }


            try
            {
                var insertQuery = String.Format(@"
                INSERT INTO SBCES.NonStockCodedParts (OrigSupplierNum, OrigSupplierName,OemPartCost, DetailedDesc, Keyword, LastModifiedDate)
                VALUES ('{0}', '{1}', {2}, '{3}', '{4}', '{5}')",
                    nscPartsUsed.OrigSuppNum,
                                  nscPartsUsed.OrigSupplierName,
                                  nscPartsUsed.OemPartCost,
                                  nscPartsUsed.Description,
                                   nscPartsUsed.KeyWord,
                                   DateTime.Now  
                     );

                
                await _dbConnection.ExecuteAsync(insertQuery, nscPartsUsed);
                return Json(new { success = true });
            }
            catch (Exception ex)
            {
                return StatusCode(500, "An error occurred while updating the Non Stock Coded Part.");
            }
            
        }

        
        [HttpPost]
        [AllowAnonymous]
        public async Task<IActionResult> UpdateNscPartsUsed([DataSourceRequest] DataSourceRequest request, [FromForm] NscPartsUsedViewModel nscPartsUsed)
        {
            try
            {
                if (!ModelState.IsValid)
                {
                    var errors = ModelState.Values
                        .SelectMany(v => v.Errors)
                        .Select(e => e.ErrorMessage);
                    return BadRequest(new { Errors = errors });
                }

                string updateQuery = string.Format(@" UPDATE SBCES.NonStockCodedParts 
                   SET   
                    OrigSupplierNum = '{0}', 
                    OrigSupplierName = '{1}',
                    OemPartCost= {2},
                    DetailedDesc =  '{3}',
                    Keyword = '{4}'
                    
                WHERE 
                    Id = {5}", nscPartsUsed.OrigSuppNum, 
                              nscPartsUsed.OrigSupplierName, 
                              nscPartsUsed.OemPartCost,  
                              nscPartsUsed.Description, 
                              @nscPartsUsed.KeyWord, 
                              nscPartsUsed.NscPartsUsedId
                              );
                
               

                await _dbConnection.ExecuteAsync(updateQuery, nscPartsUsed);
                return Json(new { success = true });
            }
            catch (Exception ex)
            {
                return StatusCode(500, "An error occurred while updating the Non Stock Coded Part.");
            }
            
        }

        // DELETE: NscPartsUsed/DeleteNscPartsUsed/{id}
      //  [HttpDelete("{id}")]
        [HttpPost]
        [AllowAnonymous]
        public async Task<IActionResult> DeleteNscPartsUsed([DataSourceRequest] DataSourceRequest request, NscPartsUsedViewModel nscPartsUsed)
        {
            try
            {
                var deleteQuery = String.Format(@"
                DELETE FROM SCES.NscPartsUsed
                WHERE NscPartsUsedId  = {0}", nscPartsUsed.NscPartsUsedId);


                await _dbConnection.ExecuteAsync(deleteQuery, nscPartsUsed);
                return Json(new { success = true });
            }
            catch (Exception ex)
            {
                return StatusCode(500, "An error occurred while deleting the Non Stock Coded Part.");
            }
           
        }

        private async Task<IEnumerable<NscPartsUsedViewModel>> GetNscPartsUsedData()
        {
            try
            {
                var query = @"
                SELECT 
                    nspu.Id as NscPartsUsedId,
                    nspu.OrigSupplierNum as OrigSuppNum,
                    nspu.OrigSupplierName,
                    nspu.OemPartCost,                   
                    nspu.DetailedDesc as Description,
                    nspu.Keyword
                FROM 
                    SBCES.NonStockCodedParts nspu;";


                return await _dbConnection.QueryAsync<NscPartsUsedViewModel>(query);
            }
            catch (Exception ex)
            {
                return null;
            }
            
        }

    }
}

        

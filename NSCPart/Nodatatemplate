Step 1: Configure ComboBox with NoDataTemplate
razor
Copy
@(Html.Kendo().ComboBox()
    .Name("YourProperty")
    .DataTextField("Text")
    .DataValueField("Value")
    .Filter(FilterType.Contains)
    .MinLength(2)
    .NoDataTemplate("<div id='invalid-selection-message' class='text-danger'>Invalid Selection!</div>") // Plain HTML string
    .DataSource(source => 
    {
        source.Read(read => read.Action("GetFilteredData", "YourController"));
    })
    .Events(e => e
        .DataBound("onComboBoxDataBound") // Detect when data is loaded
        .Change("onComboBoxChange")       // Clear invalid state on valid selection
    )
)
Step 2: Add JavaScript Logic
javascript
Copy
var isInvalid = false; // Track invalid state

// When ComboBox data is loaded, check if it's empty
function onComboBoxDataBound(e) {
    var combobox = e.sender;
    isInvalid = combobox.dataSource.view().length === 0;

    if (isInvalid) {
        // Block grid save
        var grid = $("#grid").data("kendoGrid");
        grid.bind("saveRow", function (e) {
            e.preventDefault();
            kendo.ui.showNotification("Invalid selection: Pake proper value!", "error");
        });
    }
}

// When a valid selection is made, reset the invalid state
function onComboBoxChange(e) {
    isInvalid = false;
    $("#invalid-selection-message").hide();
    
    // Restore grid save
    var grid = $("#grid").data("kendoGrid");
    grid.unbind("saveRow");
}
Step 3: Configure Grid
razor
Copy
@(Html.Kendo().Grid<YourModel>()
    .Name("grid")
    .Columns(columns => 
    {
        columns.Bound(p => p.YourProperty).EditorTemplateName("CustomComboBoxEditor");
    })
    .Editable(editable => editable.Mode(GridEditMode.InCell))
)
js : 
function onGridSave(e) {
    if (e.field === "YourProperty") {
        // Validate the value (e.model.YourProperty)
        if (isInvalid) {
            e.preventDefault(); // Block the save
            e.model.set("YourProperty", ""); // Clear invalid value
            showNotification("Invalid selection!", "error");
        }
    }
}

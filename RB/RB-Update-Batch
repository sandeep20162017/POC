[HttpPost]
[AllowAnonymous]
public IActionResult UpdateLabourDetail(
    [DataSourceRequest] DataSourceRequest request,
    [FromBody] IEnumerable<LabourDetailsRebuiltPartsViewModel> models,
    [FromQuery] string rebuiltPartNum) // Optional: Only if RebuiltPartNum is global
{
    if (models == null || !ModelState.IsValid)
    {
        return Json(models.ToDataSourceResult(request, ModelState));
    }

    foreach (var model in models)
    {
        try
        {
            string query = @"
UPDATE SBCES.EMPLOYEELABOUR 
SET 
    LABOURDEFN = @LabourDefn,
    DATEENTERED = @DateEntered,
    LINKNUMBER = @LinkNumber,
    TYPEID = @TypeId,
    COSTCENTRE = @CostCentre,
    TASK = @Task,
    LABOURTYPE = @LabourType,
    USAGE = @Usage,
    HRSREQD = @HrsReqd,
    ADJHRS = @AdjHrs,
    DATEREVISED = @DateRevised,
    TIMEADDITION = @TimeAddition,
    REBUILTPARTNUM = @RebuiltPartNum,  // Now from model
    LASTMODIFIEDBY = @LastModifiedBy
WHERE Id = @Id";  // Primary key

            var parameters = new
            {
                model.LabourDefn,
                DateEntered = DateTime.Now,
                model.LinkNumber,       // From model (not query)
                TypeId = "RB",            // Hardcoded or from model
                model.CostCentre,
                model.Task,
                model.LabourType,
                model.Usage,
                model.HrsReqd,
                model.AdjHrs,
                DateRevised = DateTime.Now,
                model.TimeAddition,
                model.RebuiltPartNum,     // From model (not query)
                LastModifiedBy = ViewBag.UserName,
                model.Id                  // Critical for WHERE
            };

            _dbConnection.Execute(query, parameters);
        }
        catch (Exception ex)
        {
            // Log error and handle state
            ModelState.AddModelError("", "Error updating row: " + ex.Message);
        }
    }

    return Json(models.ToDataSourceResult(request, ModelState));
}

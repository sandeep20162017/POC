You are ASp.NET v 8.0 core and Telerik ASP.NET Core expert.
I added task 'ABCD'. Controller model taskModel.TaskDescription = 'ABCD' and record gets inserted in the database. This is correct.
I then added, task 'ABC' This time controller gets called 2 times. First time taskModel.TaskDescription = 'ABC' next time askModel.TaskDescription = 'ABCD'. This is incorrect.
Why controller is getting called twice?
I am using Telerik ASP.NET Core grid, InCell Edit.
cshtml file :
@model IEnumerable<BCES.Models.Admin.TaskModel>

@{
    ViewData["Title"] = "Task Description";
}

<style>
    /* logic for required col changes - CSS for required columns */
    .required-header::after {
        content: " *";
        color: #e32;
        font-weight: bold;
    }
    .required-cell {
        background-color: rgba(255, 0, 0, 0.05);
    }
    .k-edit-cell.required-cell input {
        border-left: 3px solid #e32;
        padding-left: 5px;
    }
</style>

<h6>Task Details</h6>
@(
    Html.Kendo().Grid<BCES.Models.Admin.TaskModel>()
        .Name("TaskGrid")
        .Columns(columns =>
        {
            columns.Bound(p => p.TaskId).Title("Task Id").Hidden(true);
            
            /* logic for required col changes - Added required indicators */
            columns.Bound(p => p.TaskDescription)
                .Title("Task Description")
                .HeaderHtmlAttributes(new { @class = "required-header" })
                .HtmlAttributes(new { @class = "required-cell" });
                
            columns.Command(command =>
           {
               command.Custom("Delete")
                  .Click("showDeleteConfirmation")
                  .Text(" ")
                  .IconClass("k-icon k-i-delete")
                  .HtmlAttributes(new { @class = "text-danger", title = "Delete" });
           }).Title("Actions");
        })
        .Events(events => events.Edit("onEdit"))
        .ToolBar(toolbar =>
        {
            toolbar.Create();
            toolbar.Save();
        })
        .Editable(editable => editable.Mode(GridEditMode.InCell))
        .Pageable()
        .Sortable()
        .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
        .DataSource(dataSource => dataSource
            .Ajax()
            .Events(events => events
                    .Error("onDataSourceError")
                    .RequestEnd("onRequestEnd")
                     )
            .Model(model =>
            {
                model.Id(u => u.TaskId);
                model.Field(c => c.TaskDescription).Editable(true);
            })
            .Read(read => read.Url(Url.Action("ReadTasks", "Task")).Type(HttpVerbs.Get))
            .Create(create => create.Url(Url.Action("CreateTask", "Task")).Type(HttpVerbs.Post))
            .Update(update => update.Url(Url.Action("UpdateTask", "Task")).Type(HttpVerbs.Post))
            .Destroy(delete => delete.Url(Url.Action("DeleteTask", "Task")).Type(HttpVerbs.Post))
        )
)

<!-- Custom Delete Confirmation Dialog -->
<div id="deleteConfirmationDialog" style="display: none;">
    <div class="confirmation-message">
        <span class="k-icon k-i-warning confirmation-icon"></span>
        <span>Are you sure you want to delete this item?</span>
    </div>
    <div class="confirmation-buttons">
        <button type="button" class="k-button cancel-btn">Cancel</button>
        <button type="button" class="k-button confirm-btn">Delete</button>
    </div>
</div>
<div id="notification"></div>

@section Scripts {
    <script>
        function getAutoCompleteParams() {
            var input = $("input[data-role='autocomplete']:focus");
            return {
                columnName: input.attr("name"),
                searchText: input.val() || ""
            };
        }  
    </script>
    <script>
        // Initialize notification FIRST
        var notification = $("#notification").kendoNotification({
            position: {
                pinned: true,
                top: 50,
                right: 30
            },
            autoHideAfter: 4000,
            stacking: "down"
        }).data("kendoNotification");

        // Error handler
        function onDataSourceError(e) {
            let errorMessage = "Operation failed. ";

            if (e.errorThrown) {
                errorMessage += e.errorThrown;
            } else if (e.xhr && e.xhr.responseText) {
                errorMessage += e.xhr.responseText;
            }

            notification.error(errorMessage);
        }

        // Success handler
        function onRequestEnd(e) {
            if (e.type === "create") {
                notification.success("Record created successfully");
            } else if (e.type === "update") {
                notification.success("Record updated successfully");
            } else if (e.type === "destroy") {
                notification.success("Record deleted successfully");
            }
        }
    </script>
    <script>
        // Initialize custom confirmation dialog
        var deleteDialog = $("#deleteConfirmationDialog").kendoWindow({
            width: "400px",
            title: "Confirm Delete",
            modal: true,
            visible: false,
            actions: ["Close"]
        }).data("kendoWindow");

        function showDeleteConfirmation(e) {
            e.preventDefault();
            var grid = $("#TaskGrid").data("kendoGrid");
            var dataItem = grid.dataItem($(e.currentTarget).closest("tr"));
            deleteDialog.dataItem = dataItem;
            deleteDialog.center().open();
        }

        $(document).on("click", "#deleteConfirmationDialog .confirm-btn", function () {
            var grid = $("#TaskGrid").data("kendoGrid");
            var dataItem = deleteDialog.dataItem;

            $.ajax({
                url: '@Url.Action("DeleteTask", "Task")',
                type: 'POST',
                data: { TaskId: dataItem.TaskId },
                success: function () {
                    grid.dataSource.remove(dataItem);
                    notification.success("Record deleted successfully");
                    deleteDialog.close();
                },
                error: function (xhr) {
                    notification.error("Delete failed: " + xhr.responseText);
                    deleteDialog.close();
                }
            });
        });

        $(document).on("click", "#deleteConfirmationDialog .cancel-btn", function () {
            deleteDialog.close();
        });
    </script>
    <script>
        function onEdit(e) {
            var grid = e.sender;
            var cell = e.container.closest("td");
            var columnIndex = cell.index();
            var column = grid.columns[columnIndex];
            var fieldName = column.field;

            console.log('fieldName:', fieldName);
            if (fieldName === "TaskDescription") {
                var input = e.container.find("input");
                input.on("input", function () {
                    this.value = this.value.toUpperCase();
                });
                
                // logic for required col changes - Highlight required field during edit
                e.container.addClass("required-cell");
            }
        }
    </script>
}
Controller :
[HttpPost]
[AllowAnonymous]

public async Task<IActionResult> CreateTask([DataSourceRequest] DataSourceRequest request, [FromForm] TaskModel taskModel)
{
    if (!ModelState.IsValid)
    {
        return BadRequest(ModelState);
    }
    _dbConnection.Open();
    using (var transaction = _dbConnection.BeginTransaction())
    {

        try
        {
            //check if useADId Exits in database
            var checkiftaskExistsQuery = @"
                                SELECT count(*)
                                FROM  SBCES.LabourTaskDescriptions
                                where TaskDescription = '" + taskModel.TaskDescription + "'";
            var fetchedTask = await _dbConnection.QuerySingleOrDefaultAsync<int>(checkiftaskExistsQuery, new { TaskDescription = taskModel.TaskDescription }, transaction);
            if (fetchedTask > 0)
            {
                transaction.Rollback();
                // Handle or log the exception
                throw new Exception("Failed to add task. Task exists.");
            }
            var insertQuery = String.Format(@" 
                                    INSERT INTO SBCES.LabourTaskDescriptions (TaskID, TaskDescription)
                                    VALUES ((select MAX(TaskID) + 1 from SBCES.LabourTaskDescriptions) , '{0}'); ",

                taskModel.TaskDescription
                );


            await _dbConnection.ExecuteAsync(insertQuery, taskModel,  transaction);

            // Commit the transaction
            transaction.Commit();

            return Json(new { success = true });
        }
        catch (Exception ex)
        {
            return StatusCode(500, "An error occurred while updating the Task.");
        }
    }

}


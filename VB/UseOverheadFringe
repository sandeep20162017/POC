Based on the following additional information, can you pls tell me where is g_str_UseOverheadFringe set? Is it set globally for all the users or just single user?
If it uses radio button, then is this settigs for all the users or single user? This cliect server app is on the shared drive so all the users are using the same exe, though they 
have different logins.
frmChangeSettings :
Option Explicit

Private Const m_str_const_Msg1 As String = "Labour Overhead should be a positive number between 0 and 2 inclusive."
Private Const m_str_const_Msg2 As String = "Non Productive Adjustment should be a positive number or zero."
Private Const m_str_const_Msg3 As String = "Tax Rate should be a positive number between 0 and 1 inclusive."
Private Const m_str_const_Msg4 As String = "Fringe Value should be a positive number between 0 and 2 inclusive."
Private m_dbl_LabourOverhead As Double
Private m_dbl_FringeValue As Doublea
Private m_dbl_NonProductiveAdjustment As Double
Private m_dbl_TaxRate As Double
Private m_str_Msg As String
Private m_dbl_Initial_LabourOverhead As Double
Private m_dbl_Initial_FringeValue As Double
Private m_dbl_Initial_NonProductiveAdjustment As Double
Private m_dbl_Initial_TaxRate As Double

Private Sub cmdUpdate_Click()
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim l_Count As Long
    Dim str_Temp As String
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor

    'Data in the txtLabourOverhead edit-box should be a positive number between 0
    'and 2 inclusive.
    If IsNumeric(txtLabourOverhead.Text) = False Then
        Call SetDefaultCursor
        MsgBox m_str_const_Msg1
        txtLabourOverhead.Text = CStr(m_dbl_Initial_LabourOverhead)
        txtLabourOverhead.SetFocus
        Exit Sub
    End If
    m_dbl_LabourOverhead = CDbl(txtLabourOverhead.Text)
    If m_dbl_LabourOverhead < 0 Or m_dbl_LabourOverhead > 2 Then
        Call SetDefaultCursor
        MsgBox m_str_const_Msg1
        txtLabourOverhead.Text = CStr(m_dbl_Initial_LabourOverhead)
        txtLabourOverhead.SetFocus
        Exit Sub
    End If
            
    'Data in the txtFingeValue edit-box should be a positive number between 0
    'and 2 inclusive.
    If IsNumeric(txtFingeValue.Text) = False Then
        Call SetDefaultCursor
        MsgBox m_str_const_Msg4
        txtFingeValue.Text = CStr(m_dbl_Initial_FringeValue)
        txtFingeValue.SetFocus
        Exit Sub
    End If
    m_dbl_FringeValue = CDbl(txtFingeValue.Text)
    If m_dbl_FringeValue < 0 Or m_dbl_FringeValue > 2 Then
        Call SetDefaultCursor
        MsgBox m_str_const_Msg4
        txtFingeValue.Text = CStr(m_dbl_Initial_FringeValue)
        txtFingeValue.SetFocus
        Exit Sub
    End If
            
    'Data in the txtNonProductiveAdjustment edit-box should be a number >= 0
    If IsNumeric(txtNonProductiveAdjustment.Text) = False Then
        Call SetDefaultCursor
        MsgBox m_str_const_Msg2
        txtNonProductiveAdjustment.Text = CStr(m_dbl_Initial_NonProductiveAdjustment)
        txtNonProductiveAdjustment.SetFocus
        Exit Sub
    End If
    m_dbl_NonProductiveAdjustment = CDbl(txtNonProductiveAdjustment.Text)
    If m_dbl_NonProductiveAdjustment < 0 Then
        Call SetDefaultCursor
        MsgBox m_str_const_Msg2
        txtNonProductiveAdjustment.Text = CStr(m_dbl_Initial_NonProductiveAdjustment)
        txtNonProductiveAdjustment.SetFocus
        Exit Sub
    End If
    
    'Data in the txtTaxRate edit-box should be a positive number between 0
    'and 1 inclusive.
    If IsNumeric(txtTaxRate.Text) = False Then
        Call SetDefaultCursor
        MsgBox m_str_const_Msg3
        txtTaxRate.Text = CStr(m_dbl_Initial_TaxRate)
        txtTaxRate.SetFocus
        Exit Sub
    End If
    m_dbl_TaxRate = CDbl(txtTaxRate.Text)
    If m_dbl_TaxRate < 0 Or m_dbl_TaxRate > 1 Then
        Call SetDefaultCursor
        MsgBox m_str_const_Msg3
        txtTaxRate.Text = CStr(m_dbl_Initial_TaxRate)
        txtTaxRate.SetFocus
        Exit Sub
    End If
    
    'User should choose one of the radio-buttons after txtLabourOverhead and txtFingeValue
    If optUseOverhead.Value = False And optUseFringe.Value = False Then
        Call SetDefaultCursor
        MsgBox "Please choose Overhead or Fringe value will be used."
        Exit Sub
    End If
    
    If optUseOverhead.Value = True Then
        g_str_UseOverheadFringe = "O"
        g_dbl_OverheadFringeValue = CDbl(txtLabourOverhead.Text)
        str_Temp = "Use Overhead value"
    End If
    If optUseFringe.Value = True Then
        g_str_UseOverheadFringe = "F"
        g_dbl_OverheadFringeValue = CDbl(txtFingeValue.Text)
        str_Temp = "Use Fringe value"
    End If
    
    g_dbl_NonProductiveTimeAdj = m_dbl_NonProductiveAdjustment
    l_Result = modDBHelper.UpdateCESSettings("CES_UPDATE.UPDATE_CES_SETTINGS", _
                                             l_RetVal, _
                                             "NON_PRODUCTIVE_ADJUSTMENT", _
                                             CStr(m_dbl_NonProductiveAdjustment))
    
    If l_Result <> 0 Then
        Call SetDefaultCursor
        m_str_Msg = "Unable to update CES Settings, field "
        m_str_Msg = m_str_Msg + "'NON_PRODUCTIVE_ADJUSTMENT'. Please call the "
        m_str_Msg = m_str_Msg + "Service Desc at 4357 to report this error."
        MsgBox m_str_Msg
        Exit Sub
    End If
    
    l_Result = modDBHelper.UpdateCESSettings("CES_UPDATE.UPDATE_CES_SETTINGS", _
                                             l_RetVal, _
                                             "OVERHEAD", _
                                             Replace(CStr(m_dbl_LabourOverhead), ".", ","))
    If l_Result <> 0 Then
        Call SetDefaultCursor
        m_str_Msg = "Unable to update CES Settings, field "
        m_str_Msg = m_str_Msg + "'OVERHEAD'. Please call the "
        m_str_Msg = m_str_Msg + "Service Desc at 4357 to report this error."
        MsgBox m_str_Msg
        Exit Sub
    End If
    
    l_Result = modDBHelper.UpdateCESSettings("CES_UPDATE.UPDATE_CES_SETTINGS", _
                                             l_RetVal, _
                                             "FRINGE", _
                                             Replace(CStr(m_dbl_FringeValue), ".", ","))
    If l_Result <> 0 Then
        Call SetDefaultCursor
        m_str_Msg = "Unable to update CES Settings, field "
        m_str_Msg = m_str_Msg + "'FRINGE'. Please call the "
        m_str_Msg = m_str_Msg + "Service Desc at 4357 to report this error."
        MsgBox m_str_Msg
        Exit Sub
    End If
    
    l_Result = modDBHelper.UpdateCESSettings("CES_UPDATE.UPDATE_CES_SETTINGS", _
                                             l_RetVal, _
                                             "TAX_RATE", _
                                             Replace(CStr(m_dbl_TaxRate), ".", ","))
    If l_Result <> 0 Then
        Call SetDefaultCursor
        m_str_Msg = "Unable to update CES Settings, field "
        m_str_Msg = m_str_Msg + "'TAX_RATE'. Please call the "
        m_str_Msg = m_str_Msg + "Service Desc at 4357 to report this error."
        MsgBox m_str_Msg
        Exit Sub
    End If
                                             
    l_Result = modDBHelper.UpdateOverheadFringe("CES_UPDATE.UPDATE_OVERHEAD_FRINGE", _
                                                l_RetVal, _
                                                g_str_UseOverheadFringe, _
                                                g_str_UserName)
    
     If l_Result <> 0 Then
        Call SetDefaultCursor
        m_str_Msg = "Unable to update CES Settings, field "
        m_str_Msg = m_str_Msg + "'OVERHEAD/FRINGE'. Please call the "
        m_str_Msg = m_str_Msg + "Service Desc at 4357 to report this error."
        MsgBox m_str_Msg
        Exit Sub
    End If
   
   If l_Result = 0 Then
        m_str_Msg = "CES Settings are updated."
        MsgBox m_str_Msg
        'Add record to the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                    "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                    l_RetVal, _
                    "Settings were updated in the System", _
                    0, _
                    "CS", _
                    "Labour Overhead ---> " + Trim(txtLabourOverhead.Text), _
                    "Fringe --->" + Trim(txtFingeValue.Text), _
                    "Use Value ---> " + str_Temp, _
                    "Non Productive Adjustment ---> " + Trim(txtNonProductiveAdjustment.Text), _
                    "Tax Rate ---> " + Trim(txtTaxRate.Text))
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdUpdate_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub cmdClose_Click()
    On Error GoTo Error_Handler

    Call SetDefaultCursor
    Unload Me
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdClose_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler

    Call SetWaitCursor
    Call UserPermissions
    Call PopulateControls
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub PopulateControls()
    Dim RS As ADODB.Recordset

    On Error GoTo Error_Handler

    Set RS = New ADODB.Recordset
    
    Set RS = modDBHelper.RetrieveCESSettings("CES_INQUIRY.RETRIEVE_CES_SETTI", "OVERHEAD")
    If RS.RecordCount = 1 Then
        txtLabourOverhead.Text = Replace(RS.Fields("VALUE").Value, ",", ".")
        m_dbl_Initial_LabourOverhead = CDbl(txtLabourOverhead.Text)
    Else
        m_str_Msg = "Can not retrieve OVERHEAD from the CES_SETTINGS "
        m_str_Msg = m_str_Msg + "table. Please contact Supervisor."
        MsgBox m_str_Msg, vbCritical + vbExclamation
        Exit Sub
    End If
    
    Set RS = modDBHelper.RetrieveCESSettings("CES_INQUIRY.RETRIEVE_CES_SETTI", "FRINGE")
    If RS.RecordCount = 1 Then
        txtFingeValue.Text = Replace(RS.Fields("VALUE").Value, ",", ".")
        m_dbl_Initial_FringeValue = CDbl(txtFingeValue.Text)
    Else
        m_str_Msg = "Can not retrieve FRINGE from the CES_SETTINGS "
        m_str_Msg = m_str_Msg + "table. Please contact Supervisor."
        MsgBox m_str_Msg, vbCritical + vbExclamation
        Exit Sub
    End If
    
    Set RS = modDBHelper.RetrieveCESSettings("CES_INQUIRY.RETRIEVE_CES_SETTI", _
                                             "NON_PRODUCTIVE_ADJUSTMENT")
    If RS.RecordCount = 1 Then
        txtNonProductiveAdjustment.Text = Replace(RS.Fields("VALUE").Value, ",", ".")
        m_dbl_Initial_NonProductiveAdjustment = CDbl(txtNonProductiveAdjustment.Text)
    Else
        m_str_Msg = "Can not retrieve NON_PRODUCTIVE_ADJUSTMENT from the CES_SETTINGS "
        m_str_Msg = m_str_Msg + "table. Please contact Supervisor."
        MsgBox m_str_Msg, vbCritical + vbExclamation
        Exit Sub
    End If
    
    Set RS = modDBHelper.RetrieveCESSettings("CES_INQUIRY.RETRIEVE_CES_SETTI", _
                                             "TAX_RATE")
    If RS.RecordCount = 1 Then
        txtTaxRate.Text = Replace(RS.Fields("VALUE").Value, ",", ".")
        m_dbl_Initial_TaxRate = CDbl(txtTaxRate.Text)
    Else
        m_str_Msg = "Can not retrieve TAX_RATE from the CES_SETTINGS "
        m_str_Msg = m_str_Msg + "table. Please contact Supervisor."
        MsgBox m_str_Msg, vbCritical + vbExclamation
        Exit Sub
    End If
    
    If g_str_UseOverheadFringe = "F" Then
        optUseFringe.Value = True
    Else
        g_str_UseOverheadFringe = "O"
        optUseOverhead.Value = True
    End If
    
    Set RS = Nothing

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateControls", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub UserPermissions()
    On Error GoTo Error_Handler
    If g_l_AccessLevel = 4 Or g_l_AccessLevel = 10 Then
        'No restrictions for users with Level 4 or 10.
    Else
        txtLabourOverhead.Enabled = False
        txtFingeValue.Enabled = False
        txtNonProductiveAdjustment.Enabled = False
        txtTaxRate.Enabled = False
        optUseOverhead.Enabled = True
        optUseFringe.Enabled = True
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "UserPermissions", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

frmLogin :
'---------------------------------------------------------------------
'The following is the login form for the DCE program
'The login merely connects to the database and queries the access level
'for the person logging in and routes that user to their authorized menu
'screen.
'----------------------------------------------------------------------
Option Explicit

Private m_str_Msg As String

Private Sub cmdCancel_Click()
10        On Error GoTo Error_Handler
          
          'Destroy our cursors, and unload the current form. Application will be terminated
          'automatically.
20        DestroyCursors
30        Unload Me
          
40        Exit Sub
Error_Handler:
50        g_l_ErrorLineNumber = Erl()
60        modDBHelper.LogErrorToDB Me.Name, "cmdCancel_Click", g_l_ErrorLineNumber
End Sub

'===============================================
' Retrieve's accesslevel based on username/pass
' given and opens menu accordingly or returns
' invalid username/pass if none returned
'===============================================
Private Sub cmdOK_Click()
          Dim RS As ADODB.Recordset
          Dim str_UserName As String
          Dim str_Password As String
          Dim l_Result As Long
          Dim l_RetVal As Long
          Dim dt_ResetAccessLevel As Date
          Dim l_AccessLevel As Long
          Dim l_PreviousAccessLevel As Long
          Dim str_ConnString As String
          
10        On Error GoTo Error_Handler
          
          'Set cursor to hourglass
20        Call SetWaitCursor
          
          'If chktestingDB check-box is visible
30        If chktestingDB.Visible = True Then
              '0 - for ces_dev Database.
              '1 - for ces_tst Database
              'If chktestingDB check-box is checked
              'Set g_l_ConnectionType = 1 (Application will run against Test database)
              'If chktestingDB check-box is unchecked
              'Set g_l_ConnectionType = 0 (Application will run against Development database)
40            g_l_ConnectionType = chktestingDB.Value
50        Else 'Else If chktestingDB check-box is unvisible
              'Set g_l_ConnectionType = 100 (Application will run against Production database)
60            g_l_ConnectionType = 1
70        End If
          
          'Set connection to database
80        Call modMain.SetConnectionToDatabase

          'Read trimmed data from the txtUserName text-box, and save it into str_UserName.
90        str_UserName = Trim(txtUserName.Text)
          'Read trimmed data from the txtPassword text-box, and save it into str_Password.
100       str_Password = Trim(txtPassword.Text)
          
          'In the USERS table try to find record with str_UserName and str_Password
110       Set RS = New ADODB.Recordset
120       Set RS = modDBHelper.RetrieveUsers("CES_INQUIRY.RETRIEVE_USERS", _
                                             str_UserName, _
                                             str_Password)
          'If record found
130       If RS.RecordCount > 0 Then
140           g_l_AccessLevel = CLng(RS.Fields.Item("ACCESS_LEVEL"))
150           g_str_UserName = UCase(str_UserName)
160           g_str_Password = str_Password
170           If IsNull(RS.Fields.Item("USE_OVERHEAD_FRINGE")) = False Then
180               g_str_UseOverheadFringe = RS.Fields.Item("USE_OVERHEAD_FRINGE")
190           End If
              
              'Check whether or not user needs change password.
200           If IsNull(RS.Fields.Item("PSWD_CHANGE_DATE")) = False Then
210               If CDate(RS.Fields.Item("PSWD_CHANGE_DATE")) <= Now Then
                      'Force user to change password.
220                   m_str_Msg = "Your password is expired. Do you want change it now?"
230                   l_Result = MsgBox(m_str_Msg, vbYesNo + vbInformation)
240                   If l_Result = vbNo Then
250                       Call SetDefaultCursor
                          'If user hit the <No> button, just terminate the application.
260                       Unload Me
270                       Exit Sub
280                   End If
290                   frmPassword.txtCurrentPassword.Enabled = False
300                   frmPassword.txtCurrentPassword.Text = str_Password
310                   frmPassword.txtCurrentPassword.PasswordChar = "*"
320                   frmPassword.Show vbModal
330                   If frmPassword.m_b_PasswordChanged = True Then
                          'Set field USERS.PSWD_CHANGE_DATE = NULL
340                       l_Result = modDBHelper.SetPSWDChangeDateNull( _
                                          "CES_UPDATE.SET_PSWD_CHANGE_DATE_NULL", _
                                          l_RetVal, _
                                          UCase(g_str_UserName))
350                       If l_Result <> 0 Then
                              'Field USERS.PSWD_CHANGE_DATE was not updated for some reason.
                              'Stop the application or allow user to go ??????
360                       End If
370                   End If
380               End If
390           End If
400       Else
410           Call SetDefaultCursor
420           If Not RS Is Nothing Then
430               Set RS = Nothing
440           End If
              'Invalid user or password.
450           m_str_Msg = "Invalid User Name or Password. Please try again!"
460           MsgBox m_str_Msg, , "Login"
470           txtUserName.SetFocus
480           Exit Sub
490       End If
          
          'Check do we need reset user's access level.
500       If IsNull(RS.Fields.Item("date_changed_back")) = False Then
510           dt_ResetAccessLevel = CDate(RS.Fields.Item("date_changed_back"))
520           If dt_ResetAccessLevel <= Now() Then
530               l_AccessLevel = CLng(RS.Fields.Item("previous_access_level"))
540               l_PreviousAccessLevel = CLng(RS.Fields.Item("access_level"))
550               l_Result = modDBHelper.ResetAccessLevel( _
                                                      "CES_UPDATE.RESET_ACCESS_LEVEL", _
                                                      l_RetVal, _
                                                      UCase(str_UserName), _
                                                      l_AccessLevel, _
                                                      l_PreviousAccessLevel)
                                                  
560               g_l_AccessLevel = l_AccessLevel
570           End If
580       End If
          
590       g_dbl_OverheadFringeValue = 0
600       If g_str_UseOverheadFringe = "F" Then
610           Set RS = modDBHelper.RetrieveCESSettings("CES_INQUIRY.RETRIEVE_CES_SETTI", "FRINGE")
620       Else
630           Set RS = modDBHelper.RetrieveCESSettings("CES_INQUIRY.RETRIEVE_CES_SETTI", "OVERHEAD")
640       End If
650       If RS.RecordCount > 0 Then
660           g_dbl_OverheadFringeValue = CDbl(Replace(RS.Fields.Item("VALUE"), ",", "."))
670       End If
          
680       Call SetDefaultCursor
690       If Not RS Is Nothing Then
700           Set RS = Nothing
710       End If
720       Unload Me
730       frmMain.Show

740       Exit Sub
Error_Handler:
750       g_l_ErrorLineNumber = Erl()
760       modDBHelper.LogErrorToDB Me.Name, "cmdOK_Click", g_l_ErrorLineNumber
770       Call SetDefaultCursor
780       If Not RS Is Nothing Then
790           Set RS = Nothing
800       End If
End Sub

Private Sub Form_Load()
          Dim l_Ret As Long
          
10        On Error GoTo Error_Handler
          
      '''    'Set the window style to 'Layered'. Set the opacity of the window.
      '''    Call modMain.SetWindowLayered(Me)

20        Exit Sub
Error_Handler:
30        g_l_ErrorLineNumber = Erl()
40        modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
10        On Error GoTo Error_Handler

      '''    Call modMain.ChangeOpasityLayeredForm(Me, Me.Timer1, 255, 0, -5)
20        Call SetDefaultCursor
          
30        Exit Sub
Error_Handler:
40        g_l_ErrorLineNumber = Erl()
50        modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
60        Call SetDefaultCursor
End Sub

Private Sub Timer1_Timer()
10        On Error GoTo Error_Handler
          
      '''    Call modMain.ChangeOpasityLayeredForm(Me, Me.Timer1, 0, 255, 5)
          
20        Exit Sub
Error_Handler:
30        g_l_ErrorLineNumber = Erl()
40        modDBHelper.LogErrorToDB Me.Name, "Timer1_Timer", g_l_ErrorLineNumber
50        Call SetDefaultCursor
End Sub

Private Sub txtPassword_GotFocus()
10        On Error GoTo Error_Handler
          
          'Select whole text in the txtPassword edit-box.
20        txtPassword.SelStart = 0
30        txtPassword.SelLength = Len(txtPassword.Text)
          
40        Exit Sub
Error_Handler:
50        g_l_ErrorLineNumber = Erl()
60        modDBHelper.LogErrorToDB Me.Name, "txtPassword_GotFocus", g_l_ErrorLineNumber
End Sub

Private Sub txtUserName_KeyUp(KeyCode As Integer, Shift As Integer)
          Dim l_CursorPosition As Long
          Dim str_Data As String
          
10        On Error GoTo Error_Handler

          'Convert data in the txtUserName edit-box to upper case.
20        l_CursorPosition = txtUserName.SelStart
30        str_Data = txtUserName.Text
40        str_Data = UCase(str_Data)
50        txtUserName.Text = str_Data
60        txtUserName.SelStart = l_CursorPosition

70        Exit Sub
Error_Handler:
80        g_l_ErrorLineNumber = Erl()
90        modDBHelper.LogErrorToDB Me.Name, "txtUserName_KeyUp", g_l_ErrorLineNumber
End Sub


Use case :Add/Update  labour tasks in RB Parts:
Cost Centre (CC): 05H2
Task Description: Air Conditioning
Labour Position: Automotive Welder
Hours Required: 30:40
Percentage Usage: 80

Formulae :
1. Convert Hours and Minutes to Decimal
Decimal Hours = Hours + (Minutes / 60)
             = 30 + (40 / 60)
             = 30 + 0.6667
             = 30.6667 hours
2. Apply Percentage Usage
Effective Hours = Decimal Hours × Percentage Usage
                = 30.6667 × 0.8
                = 24.5333 hours
3. Calculate Wrench Time (Adjusted Hours)
Wrench Time = Effective Hours / Non-Productive Time Adjustment Factor (from CES_Settings also hardcoded in app as 1.2)
            = 24.5333 / 1.2
            = 20.4444 hours
4. Labour Hours in Summary Grid
The labour hours displayed in the summary grid are the effective hours after applying the percentage usage.
Effective Hours: 24.5333 hours
Convert to Hours and Minutes:
Hours: 24
Minutes: 0.5333 × 60 = 32 minutes
Labour Hours Displayed: 24:32 (rounded)
5.  Labour Cost Calculation
Labour Cost = Wrench Time × Labour Rate
            = 20.4444 × 35
            = $715.55
6. Labour Overhead Total
The overhead total is calculated as a percentage of the labour cost. The overhead percentage is retrieved from the system settings.
Overhead Total = Labour Cost × Overhead Percentage
               = 712.00 × 0.728
               = $518.34
7. Labour Total
The labour total is the sum of the labour cost and the overhead total
Labour Total = Labour Cost + Overhead Total
             = 712.00 + 519.82
             = $1231.82


Populating Dropdowns
Task Description: Populated using CES_INQUIRY.RETRIEVE_TASK_DESCRIPTION.
Labour Position: Populated using CES_INQUIRY.RETRIEVE_LABOUR_POSITION.
Cost Centre: Populated using CES_INQUIRY.RETRIEVE_COST_CENTRES.

Adding/Updating Labour Tasks
When a user adds or updates a labour task, the cmdAddLabourTask_Click event is triggered. 
This event collects the necessary data (Labour Position, Cost Centre, Task Description, Hours Required, Minutes Required, and Percentage Usage) and 
calls the stored procedure CES_UPDATE.ADD_LABOUR_TASKS or CES_UPDATE.UPDATE_LABOUR_TASKS to insert or update the labour task in the database.

Code :multiple SQL calls with fallback logic
Private Function GetLabourRate(str_CostCentre As String, str_LabourPosition As String) As Double
    Dim RS As ADODB.Recordset
    Dim dbl_LabourRate As Double
    
    ' Try to retrieve labour rate based on cost centre
    Set RS = modDBHelper.RetrieveCostCentreRate("CES_INQUIRY.RETRIEVE_COST_CENTRE_RATE", str_CostCentre)
    If RS.RecordCount > 0 Then
        dbl_LabourRate = CDbl(RS.Fields("RATE_PER_HOUR").Value)
    Else
        ' Fallback to labour position
        Set RS = modDBHelper.RetrieveLabourRate("CES_INQUIRY.RETRIEVE_LABOUR_RATE", str_LabourPosition)
        If RS.RecordCount > 0 Then
            dbl_LabourRate = CDbl(RS.Fields("RATE_PER_HOUR").Value)
        Else
            ' Fallback to default rate
            dbl_LabourRate = 35.00
        End If
    End If
    
    GetLabourRate = dbl_LabourRate
End Function

SQL calls :
CES_INQUIRY.RETRIEVE_LABOUR_RATE, CES_INQUIRY.RETRIEVE_COST_CENTRE_RATE, or CES_INQUIRY.RETRIEVE_EMPLOYEE_SALARIES.

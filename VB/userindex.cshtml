You are ASp.NET core v 8.0 and Telerik ASP.NET core expert.
In the following code, to select Role, I have to click twice.
Also Gris uses InCell edit. When page gets loaded, first cell column UserADId is active.
Is it possible to make UserName column ative as soon as Usermoves out of UserId column
Also when user types in some thing in the User Name column make RoleName active.
Index.cshtml :
@model IEnumerable<BCES.Models.Admin.UserViewModel>

@{
    ViewData["Title"] = "User Management";

}


<h6>User Management</h6>


@(
Html.Kendo().Grid<BCES.Models.Admin.UserViewModel>()
                    .Name("userGrid")
                    .Columns(columns =>
                    {
                        columns.Bound(u => u.UserADId).Title("User ID");
                        columns.Bound(u => u.UserName).Title("User Name");
                        // columns.Bound(u => u.UserContactNo).Title("Phone Number");

                        columns.Bound(u => u.RoleName) 
                            .Title("Role Name")
                            .EditorTemplateName("RoleNameDropDown");

                        @* columns.Bound(u => u.SiteIds).Title("Site Name")                       
                        .ClientTemplate("# if (typeof Sites != 'undefined' && Sites && Sites.length > 0) { # #= Sites.map(site => site.SiteName).join(', ') # # } else { # Select Site # } #")
                                                 .EditorTemplateName("SiteCheckBoxGroup"); *@

                        columns.Command(command =>
                        {
                             

                            command.Custom("Delete")
                              .Click("showDeleteConfirmation")
                              .Text(" ")
                              .IconClass("k-icon k-i-delete")
                              .HtmlAttributes(new { @class = "text-danger", title = "Delete" });
                        }).Title("Actions");
                       
                        })
                            .ToolBar(toolbar =>
                            {
                                toolbar.Create();
                                toolbar.Save();
                            })
                            .Editable(editable => editable.Mode(GridEditMode.InCell))
                            
                            .Pageable()
                            .Sortable()
                            

                             .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
                            // .Scrollable()

                            .DataSource(dataSource => dataSource
                                .Ajax()                               
                            .Events(events =>
                                {
                                    events.RequestEnd("onRequestEnd"); 
                                    events.Error("onDataSourceError");
                        
                                })
                        .Read(read => read.Url(Url.Action("ReadUsers", "UserManagementGrid")).Type(HttpVerbs.Get))
                        .Create(create => create.Url(Url.Action("AddUser", "UserManagementGrid")).Type(HttpVerbs.Post))
                        .Update(update => update.Url(Url.Action("UpdateUser", "UserManagementGrid")).Type(HttpVerbs.Post))
                        .Destroy(delete => delete.Url(Url.Action("DeleteUser", "UserManagementGrid", new { userID = "{0}" })).Type(HttpVerbs.Post))
                      
                    
                   
                    .Model(model =>
                    {
                        model.Id(u => u.UserID);
                        model.Field(u => u.UserADId).Editable(true);
                        model.Field(u => u.UserName).Editable(true);
                        model.Field(u => u.RoleId).DefaultValue(0); 
                        model.Field(u => u.RoleName).Editable(true);
                   
                    })
        
    )
)
<!-- Custom Delete Confirmation Dialog -->
<div id="deleteConfirmationDialog" style="display: none;">
    <div class="confirmation-message">
        <span class="k-icon k-i-warning confirmation-icon"></span>
        <!-- Edit this span text  -->
        <span>Are you sure you want to delete this item?</span>
    </div>
    <div class="confirmation-buttons">
        <button type="button" class="k-button cancel-btn">Cancel</button>
        <button type="button" class="k-button confirm-btn">Delete</button>
    </div>
</div>
<!-- Add the notification element -->
<div id="notification"></div>
<input type="hidden" name="SelectedSites" id="SelectedSitesHidden" value="" />
@section Scripts {
    <script>
          $(document).ready(function() {
            var notification = $("#notification").kendoNotification({
                position: {
                    pinned: true,
                    top: 50,
                    right: 30
                },
                autoHideAfter: 4000,
                stacking: "down"
            }).data("kendoNotification");

            //Delete
            // Use event delegation for dynamically generated delete buttons
         
        });
        //sites       

        function onSiteChange(e) {
           // debugger;
            var model = e.model;
            
            console.log("event: sitechange");
            var selectedSites = this.value();
            console.log("selected sites :");
            console.log(selectedSites);
            
            $.ajax({
                url: '@Url.Action("GetSelectedSites", "UserManagementGrid")',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ sites: selectedSites }),
                beforeSend: function (xhr) {
                    console.log("Sending data :", JSON.stringify({ sites: selectedSites }));
                },
                success: function (data) {
                    console.log('GetSelectedSites : Success:', data);
                    // Optionally, update the UI with the response
                },

                error: function (error, data) {
                    console.log(':GetSelectedSites : datasent : ', data);
                    console.error('GetSelectedSites : Error:', error);
                }
            });
            ////
        }


        function onSiteDataBound() {
            console.log("event: sitedataBound");          

        }


        function onRoleChange(e) {
            var selectedRoleId = this.value();
            var selectedRoleName = this.text();

            var grid = $("#userGrid").data("kendoGrid");
            var currentModel = grid.dataItem($(e.sender.element).closest("tr"));
            currentModel.set("RoleId", selectedRoleId);
            currentModel.set("RoleName", selectedRoleName);
        }
              

        
        function errorHandler(e) {
            if (e.errors) {
                var message = "Errors:\n";
                $.each(e.errors, function (key, value) {
                    if ('errors' in value) {
                        $.each(value.errors, function () {
                            message += this + "\n";
                        });
                    }
                });
                alert(message);
            }
        }
    </script>
   
    

    @* notification - add following JS, add div, add in grid .Error("onDataSourceError"),  .RequestEnd("onRequestEnd"), change contoller action to return json *@
    <script>
             
        // Error handler
        function onDataSourceError(e) {
            //debugger;
            let errorMessage = "Operation failed. " + e.errorThrown;

                if (e.errors) {
                    // Display validation errors
                    $.each(e.errors, function (key, value) {
                        if (value.errors) {
                            errorMessage += value.errors.join(", ");
                        }
                    });
                } 
                // else if (e.errorThrown) {
                //     errorMessage += e.errorThrown;
                // } else if (e.xhr && e.xhr.responseText) {
                //     errorMessage += e.xhr.responseText;
                // }

                var notification = $("#notification").data("kendoNotification");
                notification.error(errorMessage);
            }

        // Success handler
        function onRequestEnd(e) {
           // debugger;
          // Initialize notification FIRST
       
                if (e.type === "create") {
                    var notification = $("#notification").data("kendoNotification");
                    notification.success("Record created successfully");
                    $("#userGrid").data("kendoGrid").dataSource.read(); //force refresh grid
                } else if (e.type === "update") {
                   var notification = $("#notification").data("kendoNotification");
                    notification.success("Record updated successfully");
                     $("#userGrid").data("kendoGrid").dataSource.read(); //force refresh grid
                } else if (e.type === "destroy") {
                    var notification = $("#notification").data("kendoNotification");
                     notification.success("Record deleted successfully");
                    $("#userGrid").data("kendoGrid").dataSource.read(); //force refresh grid
                } 
            }
    </script>
    <script>

        // Initialize custom confirmation dialog
        var deleteDialog = $("#deleteConfirmationDialog").kendoWindow({
            width: "400px",
            title: "Confirm Delete",
            modal: true,
            visible: false,
            actions: ["Close"]
        }).data("kendoWindow");

        function showDeleteConfirmation(e) {
            e.preventDefault();
            var grid = $("#userGrid").data("kendoGrid");
            var dataItem = grid.dataItem($(e.currentTarget).closest("tr"));

            // Store reference to the dataItem
            deleteDialog.dataItem = dataItem;

            deleteDialog.center().open();
        }

        // Handle dialog buttons
        $(document).on("click", "#deleteConfirmationDialog .confirm-btn", function () {
            var notification = $("#notification").data("kendoNotification");
            var grid = $("#userGrid").data("kendoGrid");
            var dataItem = deleteDialog.dataItem;

            $.ajax({
                url: '@Url.Action("DeleteUser", "UserManagementGrid")',
                type: 'POST',
                data: { UserID: dataItem.UserID },
                success: function () {
                    grid.dataSource.remove(dataItem);
                    notification.success("Record deleted successfully");
                    deleteDialog.close();
                },
                error: function (xhr) {
                    notification.error("Delete failed: " + xhr.responseText);
                    deleteDialog.close();
                }
            });
        });

        $(document).on("click", "#deleteConfirmationDialog .cancel-btn", function () {
            deleteDialog.close();
        });

    </script>
}


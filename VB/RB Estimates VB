frmRebuiltPartsMain :
Option Explicit

Private m_str_Msg As String
Private l_Result As Long
Private l_RetVal As Long

Public m_str_LinkNumber As String
Public m_str_RBNumber As String
Public m_var_RowID As Variant
Public m_isRB As Boolean
Public m_silent_mode As Boolean


Public Sub PassValues(ByVal str_LinkNumber As String, ByVal str_RBNumber As String, var_RowID As Variant)
   On Error GoTo Error_Handler
    
    ' Close the existing show all labour form
    If Not frmViewAllLabour Is Nothing Then
        Unload frmViewAllLabour
    End If
    
    m_str_LinkNumber = str_LinkNumber
    m_str_RBNumber = str_RBNumber
    m_var_RowID = var_RowID
    Call RefreshForm
    
    If g_str_UseOverheadFringe = "F" Then
        lblLabourOverheadAmount.Caption = "Fringe Value Total"
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PassValues", g_l_ErrorLineNumber
End Sub

Public Sub RefreshForm()
    On Error GoTo Error_Handler

    Call SetWaitCursor
    frmRebuiltPartsAddMaterials.PassValues m_str_RBNumber, m_str_LinkNumber
    Call Populate
    Call PopulateChangesMadeBy
    Call UserPermissions
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "RefreshForm", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub UserPermissions()
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Then
        'Menu <Add a Labour Task> is disabled.
        tbMenu.Buttons(2).ButtonMenus(1).Enabled = False
        'Menu <View><Archived Database> is disabled.
        tbMenu.Buttons(3).ButtonMenus(3).Enabled = False

        'Menu <Edit><Archive> is disabled.
        tbMenu.Buttons(2).ButtonMenus(3).Enabled = False
        
        If grdLabour.Columns.Count > 2 Then
            'Grid "Labour". Columns "Time", "Wrench Time" are invisible.
            grdLabour.Columns("TIME").Visible = False
            grdLabour.Columns("WRENCH TIME").Visible = False
        End If
        'Grid "Materials Cost Centre Totals". Column "Total Cost" is invisible.
        grdMaterialsCostCentreTotals.Columns("TOTAL COST").Visible = False
        'Controls in the right bottom corner of the form are invisible.
        lblLabourSubtotal.Visible = False
        lblLabourOverheadAmount.Visible = False
        lblLabourTotal.Visible = False
        lblMaterialsTotal.Visible = False
        lblTotalRebuiltPartCost.Visible = False
        txtLabourSubtotal.Visible = False
        txtLabourOverheadAmount.Visible = False
        txtLabourTotal.Visible = False
        txtMaterialTotal.Visible = False
        txtTotalRebuiltPartCost.Visible = False
        lblCoreCost.Visible = False
        txtCoreCost.Visible = False
        lblTaxTotal.Visible = False
        txtTaxTotal.Visible = False
        lblTotalWithTax.Visible = False
        txtTotalRebuiltPartCostWithTax.Visible = False
        'Button "Edit Rebuilt Part Info" is invisible.
        'btnRebuiltPartEdit.Visible = False
        'tbMenu.Buttons.Item.Enabled
        tbMenu.Buttons(2).ButtonMenus(2).Enabled = False
        'Edit-box "S.O.P. Number" is disabled
        txtSOPNumber.Enabled = False
        'Edit-boxes at the top of the form are disabled.
        txtRebuiltCode.Enabled = False
        txtKeyword.Enabled = False
        txtDescription.Enabled = False
    ElseIf g_l_AccessLevel = 2 Then
        'Menu <Add a Labour Task> is disabled.
        tbMenu.Buttons(2).ButtonMenus(1).Enabled = False
        'Menu <View><Archived Database> is disabled.
        tbMenu.Buttons(3).ButtonMenus(3).Enabled = False
         'Menu <Edit><Archive> is disabled.
        tbMenu.Buttons(2).ButtonMenus(3).Enabled = False
        'Button "Edit Rebuilt Part Info" is invisible.
        tbMenu.Buttons(2).ButtonMenus(2).Enabled = False
        
        'All controls except grids, are disabled.
        txtRebuiltCode.Enabled = False
        txtKeyword.Enabled = False
        txtDescription.Enabled = False
        txtLabourSubtotal.Enabled = False
        txtLabourOverheadAmount.Enabled = False
        txtLabourTotal.Enabled = False
        txtMaterialTotal.Enabled = False
        txtTotalRebuiltPartCost.Enabled = False
        txtSOPNumber.Enabled = False
    End If
    
    If g_l_AccessLevel < 4 Then
        tbMenu.Buttons(3).ButtonMenus(2).Enabled = False
        lblChangesMadeBy.Visible = False
        cboChangesMadeBy.Visible = False
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "UserPermissions", g_l_ErrorLineNumber
End Sub

'Populates the grids on the form
Public Sub Populate()
    Dim var_MMSStockCode As String
    Dim cur_MMSCost As String
    Dim var_NSCRowID As Variant
    Dim str_OrigSuppNum As String
    Dim str_FileText As String
    Dim FSO As FileSystemObject
    Dim TS As TextStream
    Dim RS As ADODB.Recordset
    Dim RS2 As ADODB.Recordset
    Dim RSNewStock As Recordset
    Dim str_LabourTotal As String
    Dim str_MaterialTotal As String
    Dim str_CoreCost As String
    Dim str_TotalRebuiltPartCost As String
    Dim dbl_TaxRate As Double
    Dim l_Hours As Long
    Dim l_Minutes As Long
    Dim l_Count As Long
    Dim duplicate As Boolean
    
    On Error GoTo Error_Handler
    
    'First populate the rebuilt information
    Set RS = New ADODB.Recordset
    duplicate = False 'initialize as false
    Set RS = modDBHelper.RetrieveRB("CES_INQUIRY.RETRIEVE_RB")
    If RS.RecordCount > 0 Then
        RS.Filter = "mms_stock_code = '" + m_str_LinkNumber + "' and rebuilt_stock_num = '" + m_str_RBNumber + "'"
        txtRebuiltCode.Text = RS.Fields.Item("REBUILT_STOCK_NUM")
        txtKeyword.Text = RS.Fields.Item("KEYWORD")
        txtDescription.Text = RS.Fields.Item("DETAILED_DESC")
        txtSOPNumber.Text = RS.Fields.Item("SOP_NUMBER")
        txtJobNumber.Text = RS.Fields.Item("JOB_NUMBER")
        txtMMSBuyCode.Text = RS.Fields.Item("MMS_STOCK_CODE")
        txtCoreCode.Text = RS.Fields.Item("CORE_PART_NUM")
        If Trim(RS.Fields.Item("CORE_CHARGE")) = "" Then
            txtCoreCost.Text = Format("0", "currency")
        Else
            txtCoreCost.Text = Format(RS.Fields.Item("CORE_CHARGE"), "currency")
        End If
         If IsNull(Trim(RS.Fields.Item("ACTIVE"))) Then
            txtNonActive.Caption = ""
        Else
            txtNonActive.Caption = "NON-ACTIVE"
        End If
    End If
    m_str_RBNumber = txtRebuiltCode.Text 'used when opening materials page from menu
    'Determine which non stock coded items have since been converted into stock coded
    'items.
    'First get the table containing each of the non stock coded items
    Set RS = modDBHelper.RetrieveNSCPUsed("CES_INQUIRY.RETRIEVE_NSCP_USED", _
                                          m_str_RBNumber, _
                                          "RB")
        
    'Loop through each of the non stock coded items
    If RS.RecordCount > 0 Then
        RS.MoveFirst
        Set RSNewStock = New ADODB.Recordset
        While Not RS.EOF
            'Get the original supplier number and row id
            str_OrigSuppNum = IIf(IsNull(RS.Fields.Item("SUPPLIER NUMBER").Value), "", RS.Fields.Item("SUPPLIER NUMBER").Value)
            var_NSCRowID = RS.Fields.Item("RowID")
            'Now attempt to get a stock coded part which matches the original supplier
            'number
            Set RSNewStock = modDBHelper.RetrieveSCOrigSupplierNum( _
                                        "CES_INQUIRY.RETRIEVE_SC_ORIG_SUPPLIER_NUM", _
                                        str_OrigSuppNum)
            
           If RSNewStock.RecordCount > 0 Then
                'There is a match
                'Get the MMS Stock Code for the item
                RSNewStock.MoveFirst
                var_MMSStockCode = RSNewStock.Fields.Item("mms_stock_code")
                cur_MMSCost = RSNewStock.Fields.Item("MMS_New_Cost")
                'Append the text entry to be logged
                str_FileText = str_FileText & Trim(str_OrigSuppNum) & " to " & _
                               Trim(var_MMSStockCode) & Chr(13) & Chr(10)
                
                'ensure a stockcoded part is not already attached to the estimate
                
                 Set RS2 = New ADODB.Recordset
        
                 Set RS2 = modDBHelper.RetrieveSCPUsed("CES_INQUIRY.RETRIEVE_SCP_USED", _
                                             m_str_RBNumber, _
                                             "N", _
                                             "RB")
                    If RS2.RecordCount > 0 Then
                        RS2.MoveFirst
                        For l_Count = 0 To RS2.RecordCount - 1
                            If RS2.Fields.Item("STOCK CODE") = Trim(var_MMSStockCode) Then
                                Call SetDefaultCursor
                                'Set RS2 = Nothing
                                'm_str_Msg = "Did not convert Non-Stocked-Coded part to Stocked-Coded-Part since MMS Stock Code"
                                'm_str_Msg = m_str_Msg + " " + var_MMSStockCode + " is already used in this estimate"
                                'MsgBox m_str_Msg, vbOKOnly Or vbExclamation, "Warning"
                                duplicate = True
                                Exit For
                            End If
                            RS2.MoveNext
                        Next l_Count
                   
                    End If
                    Set RS2 = Nothing
                
                'Transfer the entry to the stock coded make buy
                If duplicate = False Then
                l_Result = modDBHelper.TransferPartsUsed( _
                                                    "CES_UPDATE.TRANSFER_PARTS_USED", _
                                                    l_RetVal, _
                                                    var_MMSStockCode, _
                                                    cur_MMSCost, _
                                                    g_str_UserName, _
                                                    var_NSCRowID)
                                                    
                  ' Now if there have been any conversions log them in text file and inform the user
                If str_FileText <> "" Then
                    'Set FSO = New FileSystemObject
                    'Set TS = FSO.CreateTextFile("rb.log")
                    'TS.Write ("Rebuilt Part #" & Trim(m_str_LinkNumber) & " Part Conversions:" & _
                              Chr(13) & Chr(10) & Chr(13) & Chr(10) & _
                              "Vendor Part Number to Stock Code" & Chr(13) & Chr(10) & _
                              "--------------------------------" & Chr(13) & Chr(10) & str_FileText)
                    m_str_Msg = "Parts in the Rebuilt Part have been converted to Stock Coded Parts."
                    m_str_Msg = m_str_Msg + Chr(13) + "Please see the log for details."
                    MsgBox m_str_Msg, vbOKOnly Or vbInformation, "Rebuilt Part Estimate"
                    
                    'The code below was added to prevent a permission error when attempting
                    'to run FSO's CreateTextFile
                    Dim frmNoticeMessage As frmNotice
                    Set frmNoticeMessage = New frmNotice
                    frmNoticeMessage.SetMessage "rb.log", "Rebuilt Part #" & Trim(m_str_LinkNumber) & " Part Conversions:" & _
                        Chr(13) & Chr(10) & Chr(13) & Chr(10) & _
                        "Vendor Part Number to Stock Code" & Chr(13) & Chr(10) & _
                        "--------------------------------" & Chr(13) & Chr(10) & str_FileText
                    frmNoticeMessage.Show vbModal
                    
                    'TS.Close
                    'ShellExecute GetDesktopWindow(), "Open", App.Path & "\rb.log", "", "C:\", 6
                    
                End If
                
                End If
            End If
            duplicate = False 'reset duplicate flag for next non-stock-coded part we check
            RSNewStock.Close
            RS.MoveNext
            
        Wend
    End If
    Set RSNewStock = Nothing
            
  
    'Then populate the labour information
    Set RS = modDBHelper.RetrieveMBLabour("CES_INQUIRY.RETRIEVE_MB_LABOUR", _
                                          m_str_RBNumber, _
                                          "RB")
    If RS.RecordCount > 0 Then
        Set grdLabour.DataSource = RS
    Else
        Set grdLabour.DataSource = Nothing
    End If
    
    
    Set RS = modDBHelper.RetrieveAllLabourHours("CES_INQUIRY.RETRIEVE_ALL_LABOUR", m_str_RBNumber, "RB")
    
    If RS.RecordCount > 0 Then
        txtLabourSubtotal.Text = Format(ColumnTotals(RS, "TOTAL COST"), "currency")
        RS.MoveFirst
        Set grdTotalTime.DataSource = RS
    Else
        txtLabourSubtotal.Text = Format(0#, "currency")
         Set grdTotalTime.DataSource = Nothing
    End If

    'Populate the ALL_LABOUR_SUMMARY table
    
    'Populate the ALL_MATERIALS_SUMMARY table
    
    'Set RS = modMain.CalculateAllMaterials(m_str_RBNumber, "RB")
        
    Set RS = modDBHelper.RetrieveRBPTotalCost2("CES_INQUIRY.RETRIEVE_RBP_TOTAL_COST2", m_str_RBNumber, "RB")
        
    If RS.RecordCount > 0 Then
          txtMaterialTotal.Text = Format(ColumnTotals(RS, "TOTAL COST"), "currency")
          RS.MoveFirst
    Else
        txtMaterialTotal.Text = Format(0#, "currency")
    End If
 
   'Set RS = RetrieveAllMaterialSummary("CES_INQUIRY.RETRIEVE_ALL_MATERIAL_SUMMARY")

    If RS.RecordCount > 0 Then
        Set grdMaterialsCostCentreTotals.DataSource = RS
    Else
        Set grdMaterialsCostCentreTotals.DataSource = Nothing
    End If
    
    'Total each of the sections
    txtLabourOverheadAmount.Text = Format(CCur(txtLabourSubtotal.Text) * _
                                          CCur(g_dbl_OverheadFringeValue), _
                                          "Currency")
    'cboBusSeries
    Set RS = modDBHelper.RetrieveRBListOfBuses("CES_INQUIRY.RB_LIST_BUSES", _
                                               Trim(txtRebuiltCode.Text))
        
    If RS.RecordCount > 0 Then
        Do While Not RS.EOF
        cboBusSeries.AddItem (RS.Fields(1).Value)
        RS.MoveNext
        Loop
        cboBusSeries.Text = cboBusSeries.List(0)
    End If
    
    
    ' Retrieve the tax rate
    Set RS = modDBHelper.RetrieveCESSettings("CES_INQUIRY.RETRIEVE_CES_SETTI", _
                                             "TAX_RATE")
    If RS.RecordCount > 0 Then
        dbl_TaxRate = CDbl(Replace(RS.Fields("VALUE").Value, ",", "."))
    Else
        dbl_TaxRate = 0
    End If
    Set RS = Nothing
    
    txtLabourTotal.Text = Format(CCur(txtLabourSubtotal.Text) + _
                                 CCur(txtLabourOverheadAmount.Text), _
                                 "Currency")
                                 
    'txtMaterialTotal.Text = frmRebuiltPartsAddMaterials.txtTotalMaterialsCost.Text
    
    str_LabourTotal = Trim(txtLabourTotal.Text)
    
    If str_LabourTotal = "" Then
        str_LabourTotal = "0"
    Else
        If IsNumeric(str_LabourTotal) = False Then
            str_LabourTotal = "0"
        End If
    End If
    
    str_MaterialTotal = Trim(txtMaterialTotal.Text)
    If str_MaterialTotal = "" Then
        str_MaterialTotal = "0"
    Else
        If IsNumeric(str_MaterialTotal) = False Then
            str_MaterialTotal = "0"
        End If
    End If
    
    str_CoreCost = Trim(txtCoreCost.Text)
    If str_CoreCost = "" Then
        str_CoreCost = "0"
    Else
        If IsNumeric(str_CoreCost) = False Then
            str_CoreCost = "0"
        End If
    End If
    
    txtTaxTotal.Text = Format(dbl_TaxRate * CCur(txtMaterialTotal), "currency")
    
    txtTotalRebuiltPartCost.Text = Format(CCur(str_LabourTotal) + CCur(str_MaterialTotal) - CCur(str_CoreCost), "currency")
        
    str_TotalRebuiltPartCost = Trim(txtTotalRebuiltPartCost.Text)
    If str_TotalRebuiltPartCost = "" Then
        str_TotalRebuiltPartCost = "0.00"
    End If
 
    txtTotalRebuiltPartCostWithTax.Text = Format(CCur(txtTaxTotal.Text) + CCur(txtTotalRebuiltPartCost.Text), "currency")

    'PropagateRebuiltPartChanges m_str_RBNumber, False
    
    'Format the columns of the data grids
    Call FormatColumns
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Populate", g_l_ErrorLineNumber
    If Not RSNewStock Is Nothing Then
        Set RSNewStock = Nothing
    End If
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub FormatColumns()
    On Error GoTo Error_Handler
    
    If Not grdLabour.Row Then
        grdLabour.Columns("CC").Width = 500
        'grdLabour.Columns("CC").Visible = False
        grdLabour.Columns("TASK").Width = 1600
        grdLabour.Columns("LABOUR TYPE").Width = 2120
        grdLabour.Columns("USAGE").Width = 620
        grdLabour.Columns("USAGE").Alignment = dbgRight
        grdLabour.Columns("TIME").Width = 600
        grdLabour.Columns("TIME").Alignment = dbgRight
        grdLabour.Columns("WRENCH TIME").Width = 1200
        grdLabour.Columns("WRENCH TIME").Alignment = dbgRight
        grdLabour.Columns("DATE REVISED").Width = 1900 '1725
        grdLabour.Columns("DATE REVISED").Alignment = dbgRight
        grdLabour.Columns("DATE REVISED").NumberFormat = "yyyy-mmm-dd hh:mm AMPM"
        grdLabour.Columns("TIME ADDITION").Visible = False
        grdLabour.Columns("VALUE").Visible = False
        grdLabour.Columns("ROWID").Visible = False
    End If

    If Not grdMaterialsCostCentreTotals.Row Then
        With grdMaterialsCostCentreTotals
            .Columns("CC").Width = 500
            .Columns("CC").Caption = "CC"
            .Columns("TOTAL COST").Alignment = dbgRight
            .Columns("TOTAL COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("TOTAL COST").Width = 1400
            .Columns("TAXABLE COST").Visible = False
        End With
    End If
    
    If Not grdTotalTime.Row Then
        grdTotalTime.Columns("COST CENTRE").Width = 500
        grdTotalTime.Columns("COST CENTRE").Caption = "CC"
        grdTotalTime.Columns("LABOUR HRS").Width = 1200
        grdTotalTime.Columns("LABOUR HRS").Alignment = dbgRight
          grdTotalTime.Columns("TOTAL COST").Visible = False
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "FormatColumns", g_l_ErrorLineNumber
End Sub

Private Sub btnRebuiltPartEdit_Click()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    frmAddRebuiltPart.m_str_MMSStockCode = m_str_LinkNumber
    frmAddRebuiltPart.m_str_RebuiltCode = m_str_RBNumber
    frmAddRebuiltPart.m_str_AuditReference = m_str_RBNumber
    frmAddRebuiltPart.Show vbModal
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "btnRebuiltPartEdit_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub cmdArchive_Click()
    
    On Error GoTo Error_Handler
    
    Archive_RB False
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdArchive_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub
Public Sub Archive_RB(ByVal silent_mode As Boolean)
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    If Not silent_mode Then
        m_str_Msg = "Are you sure you want to Archive Rebuilt Part # " + m_str_RBNumber + "?"
        l_Result = MsgBox(m_str_Msg, vbOKCancel Or vbQuestion, "Archive Rebuit Part?")
    Else
        l_Result = vbOK
        
        Set RS = New ADODB.Recordset
        Set RS = modDBHelper.RetrieveRBPUsed("CES_INQUIRY.RETRIEVE_RBP_USED", _
                                         txtRebuiltCode.Text, _
                                         "RB")
                                         
        '''Loops through any underlying RB parts and archives them, as well.
        If RS.RecordCount > 0 Then
            Do While RS.EOF = False
               
               'Calls up details and Archives
               ArchRBPSubsets (RS.Fields.Item("REBUILT NUMBER"))
               RS.MoveNext
            Loop
            
        End If
        Set RS = Nothing
        
    End If
     
     
    
    If l_Result = vbOK Then
        Call SetWaitCursor
             
        
        l_Result = modDBHelper.ArchiveRB("CES_ARCHIVE.ARCHIVE_RB", _
                                    l_RetVal, _
                                    txtRebuiltCode.Text, _
                                    g_str_UserName, _
                                    m_str_RBNumber, _
                                    "RB", _
                                    Trim(txtLabourSubtotal.Text), _
                                    Trim(txtLabourOverheadAmount.Text), _
                                    Trim(txtLabourTotal.Text), _
                                    Trim(txtMaterialTotal.Text), _
                                    Trim(txtTotalRebuiltPartCost.Text), _
                                    Trim(txtTaxTotal.Text), _
                                    Trim(txtTotalRebuiltPartCostWithTax.Text))
        
        If l_Result = 0 Then
            'Call SetDefaultCursor
            If Not silent_mode Then
                m_str_Msg = "Archiving Rebuilt Part Number = " + txtRebuiltCode.Text + " is complete."
                MsgBox m_str_Msg, vbOKOnly Or vbInformation, "Rebuilt Part Archiving"
            End If
        Else
            Call SetDefaultCursor
            m_str_Msg = "Archiving Rebuilt Part Number = " + txtRebuiltCode.Text + " has failed."
            MsgBox m_str_Msg, vbInformation Or vbOKOnly, "Rebuilt Part Archiving"
        End If
       
        
        
        '''''
    End If
    
    Call SetDefaultCursor
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdArchive_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor

End Sub



Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    Dim str_TotalRebuiltPartCost As String
    
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor
    
    'Unload the add materials form
    Unload frmRebuiltPartsAddMaterials
    
    ' Close the existing show all labour form
    If Not frmViewAllLabour Is Nothing Then
        Unload frmViewAllLabour
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub grdLabour_DblClick()
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not allow user go further, just exit sub.
        Exit Sub
    End If
    
    'Update the Labour in the Rebuilt Part
    If Not grdLabour.Row Then
        Call SetWaitCursor
        m_var_RowID = grdLabour.Columns("ROWID").Text
        frmAddLabourTask.m_str_AuditReference = Trim(txtRebuiltCode.Text)
        frmAddLabourTask.m_str_LinkNumber = m_str_RBNumber
        frmAddLabourTask.m_str_PartID = m_var_RowID
        frmAddLabourTask.m_str_TypeID = "RB"
        frmAddLabourTask.Show vbModal
        Call Populate
    End If

    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdLabour_DblClick", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub grdLabour_KeyDown(KeyCode As Integer, Shift As Integer)
    'Delete the Labour from the Rebuilt Part
    Dim str_PartID As String
    Dim RS As ADODB.Recordset
    Dim l_Count As Long
    
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not allow user go further, just exit sub.
        Exit Sub
    End If
    
    If KeyCode = vbKeyDelete Then
        m_str_Msg = "Are you sure you want to delete this item?"
        l_Result = MsgBox(m_str_Msg, vbOKCancel Or vbQuestion, "Rebuit Part")
        If l_Result = vbOK Then
            Call SetWaitCursor
            str_PartID = grdLabour.Columns("ROWID").Text
            l_Result = modDBHelper.DeleteMBLabour("CES_DELETE.DELETE_MBLABOUR", _
                                                  l_RetVal, _
                                                  str_PartID)
            '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT Begin >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            'Add record to the AUDIT_MODIFY_HISTORY table.
            l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                                        "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                                        l_RetVal, _
                                        "Delete Labour", _
                                        txtRebuiltCode.Text, _
                                        "RB", _
                                        "LABOUR TYPE ---> " + grdLabour.Columns("LABOUR TYPE").Text, _
                                        "CC ---> " + grdLabour.Columns("CC").Text, _
                                        "TASK ---> " + grdLabour.Columns("TASK").Text, _
                                        "USAGE ---> " + grdLabour.Columns("USAGE").Text, _
                                        "TIME ---> " + grdLabour.Columns("TIME").Text, _
                                        "WRENCH TIME ---> " + grdLabour.Columns("WRENCH TIME").Text, _
                                        "DATE REVISED ---> " + grdLabour.Columns("DATE REVISED").Text)
            
            Set RS = New ADODB.Recordset
            
            'In the SC_PARTS_USED table find all Estimates where the current RBE is present.
            Set RS = modDBHelper.RetrieveESTToPropagateRB("CES_INQUIRY.RETRIEVE_EST_TO_PROPAGATE_RB", _
                                                          txtRebuiltCode.Text)
            If RS.RecordCount > 0 Then
                RS.MoveFirst
                    For l_Count = 0 To RS.RecordCount - 1
                        'Add records to the AUDIT_MODIFY_HISTORY table.
                        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "Indirect change. Labour was deleted from the Rebuilt Part Estimate " + m_str_RBNumber, _
                            RS.Fields.Item("link_code"), _
                            RS.Fields.Item("link_type"), _
                            "LABOUR TYPE ---> " + grdLabour.Columns("LABOUR TYPE").Text, _
                            "CC ---> " + grdLabour.Columns("CC").Text, _
                            "TASK ---> " + grdLabour.Columns("TASK").Text, _
                            "USAGE ---> " + grdLabour.Columns("USAGE").Text, _
                            "TIME ---> " + grdLabour.Columns("TIME").Text, _
                            "WRENCH TIME ---> " + grdLabour.Columns("WRENCH TIME").Text, _
                            "DATE REVISED ---> " + grdLabour.Columns("DATE REVISED").Text)
                        
                        RS.MoveNext
                    Next l_Count
            End If
    
            Set RS = Nothing
            '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT End >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            Call RefreshForm
            Call SetDefaultCursor
        End If
    End If
    
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdLabour_KeyDown", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    Call SetDefaultCursor
End Sub

Private Sub PopulateChangesMadeBy()
    Dim l_Count As Long
    Dim str_Temp As String
    Dim RS As ADODB.Recordset

    On Error GoTo Error_Handler
    
    cboChangesMadeBy.Clear
    
    Set RS = New ADODB.Recordset
    'Populate cboChangesMadeBy combo-box. Show only 5 recent items.
    Set RS = modDBHelper.RetrieveAudit6( _
                    "CES_INQUIRY.RETRIEVE_AUDIT_6", _
                    txtRebuiltCode.Text, _
                    "RB")
    
    If RS.RecordCount > 0 Then
        RS.MoveFirst
        For l_Count = 0 To RS.RecordCount - 1
            If l_Count = 5 Then
                Exit For
            End If
            str_Temp = Format(RS.Fields.Item("DATE_CHANGED"), "yyyy-mmm-dd hh:mm:ss AMPM")
            str_Temp = CStr(str_Temp)
            str_Temp = str_Temp + " ---> "
            str_Temp = str_Temp + CStr(RS.Fields.Item("USER_NAME"))
            cboChangesMadeBy.AddItem str_Temp
            RS.MoveNext
        Next l_Count
    End If
    
    If RS.RecordCount > 0 Then
        cboChangesMadeBy.Text = cboChangesMadeBy.List(0)
    End If
    
    Set RS = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateChangesMadeBy", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub tbMenu_ButtonMenuClick(ByVal ButtonMenu As MSComctlLib.ButtonMenu)
    Dim str_Temp As String
    
    On Error GoTo Error_Handler
    
    Select Case ButtonMenu
        Case "Send To Mail Recipient"
            Call modMain.SendEmail
        Case "Close"
            Unload Me
        Case "Add a Labour Task"
            Call SetWaitCursor
            frmAddLabourTask.m_str_AuditReference = Trim(txtRebuiltCode.Text)
            frmAddLabourTask.m_str_LinkNumber = m_str_RBNumber
            frmAddLabourTask.m_str_TypeID = "RB"
            frmAddLabourTask.Show vbModal
            Call RefreshForm
            Call SetDefaultCursor
        Case "Materials Listing"
            If frmRebuiltPartsAddMaterials.WindowState = 1 Then
                frmRebuiltPartsAddMaterials.WindowState = 0
            End If
            frmRebuiltPartsAddMaterials.Show
            frmRebuiltPartsAddMaterials.SetFocus
        Case "Modify History"
            'Close the Audit form if it is opened.
            If Not frmViewAudit Is Nothing Then
                Unload frmViewAudit
            End If
            str_Temp = " - Rebuilt Part Estimate for Rebuilt Number: " + txtRebuiltCode.Text
            frmViewAudit.m_str_EstimateNumber = txtRebuiltCode.Text
            frmViewAudit.m_b_FromAdministration = False
            frmViewAudit.m_str_EstimateType = "RB"
            frmViewAudit.Caption = frmViewAudit.Caption + str_Temp
            frmViewAudit.Show
         Case "Archived Database"
            frmArchivedHistory.m_str_LinkCode = txtRebuiltCode.Text
            frmArchivedHistory.m_str_EstimateType = "RB"
            frmArchivedHistory.Show
         Case "All Labour"
            frmViewAllLabour.PassValues m_str_RBNumber, "RB"
            If frmViewAllLabour.WindowState = 1 Then
                frmViewAllLabour.WindowState = 0
            End If
            frmViewAllLabour.Show
            frmViewAllLabour.SetFocus
          Case "Edit Rebuilt Part Information"
         
                frmAddRebuiltPart.m_str_MMSStockCode = m_str_LinkNumber
                frmAddRebuiltPart.m_str_RebuiltCode = m_str_RBNumber
                frmAddRebuiltPart.m_str_AuditReference = m_str_RBNumber
                frmAddRebuiltPart.Show vbModal
        
        Case "Archive Rebuilt Part"
            Archive_RB False
        
        Case "Print"
            showRebuiltCostEstimateReport m_str_RBNumber, m_str_LinkNumber
    End Select
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "tbMenu_ButtonMenuClick", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

modDBHelper :
Option Explicit

Private m_str_Msg As String
Private m_obj_clsDb As clsDB

'This function will add a new row to the ERROR_LOG table:

' - g_str_UserName   into "USER_NAME" column
' - str_ModuleName   into "MODULE_NAME" column
' - str_FunctionName into "FUNCTION_NAME" column
' - l_LineNumber     into "LINE_NUM" column
' - l_ErrNum         into "ERR_NUM" column
' - str_ErrDesc      into "ERROR DESC" column
' - Now()            into "DATE_TIME" column
' - field "LOG NUMBER" will be incremented automatically.

Public Sub LogErrorToDB(ByVal str_ModuleName As String, _
                        ByVal str_FunctionName As String, _
                        ByVal l_LineNumber As Long)
    Dim l_RetVal As Long
    Dim l_ErrNum As Long
    Dim str_ErrDesc As String
    
    'Get error number and error description here!!!
    l_ErrNum = Err.Number
    str_ErrDesc = Err.Description
    
    
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Call m_obj_clsDb.RunFNReturnLong("CES_UPDATE.ADD_ERROR_LOG", _
                        l_RetVal, _
                        Array("vi_user_name", adChar, 25, g_str_UserName), _
                        Array("vi_date_time", adDate, 10, Now()), _
                        Array("vi_module_name", adChar, 100, str_ModuleName), _
                        Array("vi_function_name", adChar, 100, str_FunctionName), _
                        Array("vi_line_num", adInteger, 10, l_LineNumber), _
                        Array("vi_error_desc", adChar, 2000, str_ErrDesc), _
                        Array("vi_err_num", adInteger, 10, l_ErrNum))
    Set m_obj_clsDb = Nothing
    'Clean an Err object.
    Err.Clear
    m_str_Msg = "Application error. Take a screen-shot and contact Administrator. "
    m_str_Msg = m_str_Msg + "Date = " + CStr(Now()) + ". User Name = " + g_str_UserName
    MsgBox m_str_Msg
    
    Exit Sub
Error_Handler:
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
    m_str_Msg = "Logging error to the database failed. Please report this message to "
    m_str_Msg = m_str_Msg + "Administrator. Now program will be terminated."
    MsgBox m_str_Msg, vbCritical + vbOKOnly
    End
End Sub

Public Function AddEngines(ByVal str_SPName As String, _
                           ByRef l_RetVal As Long, _
                           ByVal str_Engine As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    AddEngines = m_obj_clsDb.RunFNReturnLong(str_SPName, _
                                              l_RetVal, _
                                              Array("@MAKE", adChar, 25, str_Engine))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "AddEngines", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function AddTransmissions(ByVal str_SPName As String, _
                                 ByRef l_RetVal As Long, _
                                 ByVal str_Transmission As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    AddTransmissions = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                                           Array("@MAKE", adChar, 25, str_Transmission))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "AddTransmissions", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function AddDifferentials(ByVal str_SPName As String, _
                                 ByRef l_RetVal As Long, _
                                 ByVal str_Differential As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    AddDifferentials = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                                           Array("@MAKE", adChar, 25, str_Differential))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "AddDifferentials", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateEngines(ByVal str_SPName As String, _
                              ByRef l_RetVal As Long, _
                              ByVal str_Engine As String, _
                              ByVal str_PartID As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateEngines = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                                        Array("@NAME", adChar, 25, str_Engine), _
                                        Array("@PARTID", adChar, 50, str_PartID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateEngines", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateTransmissions(ByVal str_SPName As String, _
                                    ByRef l_RetVal As Long, _
                                    ByVal str_Transmission As String, _
                                    ByVal str_PartID As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateTransmissions = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                                        Array("@NAME", adChar, 25, str_Transmission), _
                                        Array("@PARTID", adChar, 50, str_PartID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateTransmissions", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateDiffentials(ByVal str_SPName As String, _
                                  ByRef l_RetVal As Long, _
                                  ByVal str_Differential As String, _
                                  ByVal str_PartID As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateDiffentials = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                                        Array("@NAME", adChar, 25, str_Differential), _
                                        Array("@PARTID", adChar, 50, str_PartID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateDiffentials", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteMBLabour(ByVal str_SPName As String, _
                               ByRef l_RetVal As Long, _
                               ByVal str_PartID As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteMBLabour = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                                        Array("@IDPART", adChar, 50, str_PartID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteMBLabour", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteNSCP(ByVal str_SPName As String, _
                           ByRef l_RetVal As Long, _
                           ByVal str_PartID As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteNSCP = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                                        Array("@IDPART", adChar, 50, str_PartID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteNSCP", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function AddRBEstimate(ByVal str_SPName As String, _
                              ByRef l_RetVal As Long, _
                              ByVal str_MOD As String, _
                              ByVal str_JobNum As String, _
                              ByVal str_CoreCost As String, _
                              ByVal str_StockCode As String, _
                              ByVal str_CoreCode As String, _
                              ByVal str_Keyword As String, _
                              ByVal str_Desc As String, _
                              ByVal str_NewCode As String, _
                              ByVal str_SOPNumber As String, _
                              ByVal str_BuyCost As String, _
                              ByVal str_RemanufacturedCost As String, _
                              ByVal str_ExternalCost As String, _
                              ByVal int_optActive As Integer) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    AddRBEstimate = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@MOD", adChar, 50, str_MOD), _
                            Array("@JOBNUM", adChar, 25, str_JobNum), _
                            Array("@CORECH", adChar, 25, str_CoreCost), _
                            Array("@REB", adChar, 25, str_StockCode), _
                            Array("@CORE", adChar, 25, str_CoreCode), _
                            Array("@KEY", adChar, 250, str_Keyword), _
                            Array("@DETDESC", adChar, 250, str_Desc), _
                            Array("@MMS", adChar, 25, str_NewCode), _
                            Array("@SOPNumber", adChar, 25, str_SOPNumber), _
                            Array("@BuyCost", adChar, 25, str_BuyCost), _
                            Array("@RemanCost", adChar, 25, str_RemanufacturedCost), _
                            Array("@ExternalCost", adChar, 25, str_ExternalCost), _
                            Array("@ExternalCost", adInteger, 2, int_optActive))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "AddRBEstimate", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateRBEstimate(ByVal str_SPName As String, _
                                 ByRef l_RetVal As Long, _
                                 ByVal str_MOD As String, _
                                 ByVal str_JobNum As String, _
                                 ByVal str_CoreChange As String, _
                                 ByVal str_StockCode As String, _
                                 ByVal str_CoreCode As String, _
                                 ByVal str_Keyword As String, _
                                 ByVal str_Desc As String, _
                                 ByVal str_NewCode As String, _
                                 ByVal str_SOPNumber As String, _
                                 ByVal str_BuyCost As String, _
                                 ByVal str_RemanufacturedCost As String, _
                                 ByVal str_ExternalCost As String, _
                                 ByVal int_active As Integer) As Long
    On Error GoTo Error_Handler
 
    Set m_obj_clsDb = New clsDB
    UpdateRBEstimate = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@MOD", adChar, 50, str_MOD), _
                            Array("@JOBNUM", adChar, 25, str_JobNum), _
                            Array("@CORECH", adChar, 25, str_CoreChange), _
                            Array("@REB", adChar, 30, str_StockCode), _
                            Array("@CORE", adChar, 30, str_CoreCode), _
                            Array("@KEY", adChar, 250, str_Keyword), _
                            Array("@DETDESC", adChar, 250, str_Desc), _
                            Array("@MMS", adChar, 30, str_NewCode), _
                            Array("@SOPNumber", adChar, 30, str_SOPNumber), _
                            Array("@BuyCost", adChar, 25, str_BuyCost), _
                            Array("@RemanCost", adChar, 25, str_RemanufacturedCost), _
                            Array("@ExternalCost", adChar, 25, str_ExternalCost), _
                            Array("@Active", adInteger, 2, int_active))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateRBEstimate", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function AddVehicleEstimate(ByVal str_SPName As String, _
                                   ByRef l_RetVal As Long, _
                                   ByVal str_VehSeries As String, _
                                   ByVal str_VehDesc As String, _
                                   ByVal str_BusNum As String, _
                                   ByVal str_Make As String, _
                                   ByVal str_Model As String, _
                                   ByVal str_Year As String, _
                                   ByVal str_Engine As String, _
                                   ByVal str_Trans As String, _
                                   ByVal str_Diff As String, _
                                   ByVal str_UserName As String, _
                                   ByVal str_SOPNumber As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    AddVehicleEstimate = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@SERIES", adChar, 75, str_VehSeries), _
                            Array("@DESC", adChar, 200, str_VehDesc), _
                            Array("@NUMVEH", adChar, 10, str_BusNum), _
                            Array("@MAKE", adChar, 25, str_Make), _
                            Array("@MODEL", adChar, 25, str_Model), _
                            Array("@YEAR", adChar, 4, str_Year), _
                            Array("@ENGINE", adChar, 25, str_Engine), _
                            Array("@TRANS", adChar, 25, str_Trans), _
                            Array("@DIFF", adChar, 25, str_Diff), _
                            Array("@ENTERED_BY", adChar, 25, str_UserName), _
                            Array("@SOPNUMBER", adChar, 30, str_SOPNumber))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "AddVehicleEstimate", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateVehicleEstimate(ByVal str_SPName As String, _
                                      ByRef l_RetVal As Long, _
                                      ByVal str_VehSeries As String, _
                                      ByVal str_VehDesc As String, _
                                      ByVal str_BusNum As String, _
                                      ByVal str_Make As String, _
                                      ByVal str_Model As String, _
                                      ByVal str_Year As String, _
                                      ByVal str_Engine As String, _
                                      ByVal str_Trans As String, _
                                      ByVal str_Diff As String, _
                                      ByVal str_UserName As String, _
                                      ByVal l_VehicleListID As Long, _
                                      ByVal str_SOPNumber As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateVehicleEstimate = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                        Array("@SERIES", adChar, 75, str_VehSeries), _
                        Array("@DESC", adChar, 200, str_VehDesc), _
                        Array("@NUMVEH", adChar, 10, str_BusNum), _
                        Array("@MAKE", adChar, 25, str_Make), _
                        Array("@MODEL", adChar, 25, str_Model), _
                        Array("@YEAR", adChar, 4, str_Year), _
                        Array("@ENGINE", adChar, 25, str_Engine), _
                        Array("@TRANS", adChar, 25, str_Trans), _
                        Array("@DIFF", adChar, 25, str_Diff), _
                        Array("@ENTERED_BY", adChar, 25, str_UserName), _
                        Array("vi_vehicle_list_id", adInteger, 10, l_VehicleListID), _
                        Array("SOPNUMBER", adChar, 30, str_SOPNumber))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateVehicleEstimate", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteNSCPUsed(ByVal str_SPName As String, _
                               ByRef l_RetVal As Long, _
                               ByVal str_PartID As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteNSCPUsed = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                                        Array("@IDPART", adChar, 50, str_PartID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteNSCPUsed", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteSCPUsed(ByVal str_SPName As String, _
                              ByRef l_RetVal As Long, _
                              ByVal str_PartID As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteSCPUsed = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                                        Array("@IDPART", adChar, 50, str_PartID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteSCPUsed", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function AddErrorLog(ByVal str_SPName As String, _
                            ByRef l_RetVal As Long, _
                            ByVal str_FunctionName As String, _
                            ByVal str_UserName As String, _
                            ByVal str_ErrMsg As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    AddErrorLog = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@ERROR_FUNCTION", adChar, 50, str_FunctionName), _
                            Array("@USERNAME", adChar, 25, str_UserName), _
                            Array("@ERROR_DESC", adChar, 200, str_ErrMsg))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "AddErrorLog", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function AddNSCP(ByVal str_SPName As String, _
                        ByRef l_RetVal As Long, _
                        ByVal str_SupNumber As String, _
                        ByVal str_SupName As String, _
                        ByVal str_OEMPartCost As String, _
                        ByVal str_PartDesc As String, _
                        ByVal str_Keyword As String, _
                        ByVal str_EnteredBy As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    AddNSCP = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_orig_supplier_num", adChar, 50, str_SupNumber), _
                            Array("vi_orig_supplier_name", adChar, 50, str_SupName), _
                            Array("vi_oem_part_cost", adNumeric, 10, CDbl(str_OEMPartCost)), _
                            Array("vi_detailed_desc", adChar, 500, str_PartDesc), _
                            Array("vi_keyword", adChar, 50, str_Keyword), _
                            Array("vi_entered_by", adChar, 25, str_EnteredBy))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "AddNSCP", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateNSCP(ByVal str_SPName As String, _
                           ByRef l_RetVal As Long, _
                           ByVal str_SupNumber As String, _
                           ByVal str_SupName As String, _
                           ByVal str_Cost As String, _
                           ByVal str_PartDesc As String, _
                           ByVal str_Keyword As String, _
                           ByVal str_EnteredBy As String, _
                           ByVal str_RowID As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateNSCP = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@SUPPNUM", adChar, 50, str_SupNumber), _
                            Array("@SUPNAME", adChar, 50, str_SupName), _
                            Array("@COST", adNumeric, 10, CDbl(str_Cost)), _
                            Array("@DESC", adChar, 500, str_PartDesc), _
                            Array("@KEYWORD", adChar, 50, str_Keyword), _
                            Array("@ENTERED_BY", adChar, 25, str_EnteredBy), _
                            Array("@id", adChar, 25, str_RowID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateNSCP", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateNSCP2(ByVal str_SPName As String, _
                           ByRef l_RetVal As Long, _
                           ByVal str_ID As Long, _
                           ByVal str_RowID As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateNSCP2 = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@ID", adInteger, 10, str_ID), _
                            Array("@rowid", adChar, 25, str_RowID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateNSCP2", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteVehType(ByVal str_SPName As String, _
                              ByRef l_RetVal As Long, _
                              ByVal str_PartID As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteVehType = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@IDPART", adChar, 50, str_PartID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteVehType", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function AddVehTypes(ByVal str_SPName As String, _
                            ByRef l_RetVal As Long, _
                            ByVal str_Make As String, _
                            ByVal str_Model As String, _
                            ByVal str_Year As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    AddVehTypes = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@MAKE", adChar, 50, str_Make), _
                            Array("@MODEL", adChar, 50, str_Model), _
                            Array("@YEAR", adChar, 4, str_Year))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "AddVehTypes", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateVehTypes(ByVal str_SPName As String, _
                               ByRef l_RetVal As Long, _
                               ByVal str_Make As String, _
                               ByVal str_Model As String, _
                               ByVal str_Year As String, _
                               ByVal str_VehID As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateVehTypes = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@MAKE", adChar, 50, str_Make), _
                            Array("@MODEL", adChar, 50, str_Model), _
                            Array("@YEAR", adChar, 10, str_Year), _
                            Array("@VEHID", adChar, 25, str_VehID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateVehTypes", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteDiff(ByVal str_SPName As String, _
                           ByRef l_RetVal As Long, _
                           ByVal str_PartID As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteDiff = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@IDPART", adChar, 50, str_PartID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteDiff", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteEngine(ByVal str_SPName As String, _
                             ByRef l_RetVal As Long, _
                             ByVal str_PartID As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteEngine = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@IDPART", adChar, 50, str_PartID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteEngine", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteTrans(ByVal str_SPName As String, _
                            ByRef l_RetVal As Long, _
                            ByVal str_PartID As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteTrans = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@IDPART", adChar, 50, str_PartID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteTrans", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function AddMB(ByVal str_SPName As String, _
                      ByRef l_RetVal As Long, _
                      ByVal str_BenchNumber As String, _
                      ByVal str_BusType As String, _
                      ByVal str_BuyCode As String, _
                      ByVal str_BuyNewCost As String, _
                      ByVal str_CoreCode As String, _
                      ByVal str_Description As String, _
                      ByVal str_ExternalRebuilt As String, _
                      ByVal str_Keyword As String, _
                      ByVal str_MakeBuyNo As String, _
                      ByVal str_NumberOfBus As String, _
                      ByVal str_ProjectedAnnualUsage As String, _
                      ByVal str_RebuildCode As String, _
                      ByVal str_Remanufactured As String, _
                      ByVal str_OptRecommend As String, _
                      ByVal str_OptSample As String, _
                      ByVal str_VendorPartNo As String, _
                      ByVal str_InternalRebuilt As String, _
                      ByVal str_SOP As String, _
                      ByVal str_CoreCost As String, _
                      ByVal str_JobNumber As String, _
                      ByVal int_NewJobUseManualEntry As Integer) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    AddMB = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@BENCH", adChar, 25, str_BenchNumber), _
                            Array("@BUSTYPE", adChar, 50, str_BusType), _
                            Array("@BUYCODE", adChar, 25, str_BuyCode), _
                            Array("@BUYCODENEW", adChar, 25, str_BuyNewCost), _
                            Array("@CORECODE", adChar, 25, str_CoreCode), _
                            Array("@DESCRIPTION", adChar, 50, str_Description), _
                            Array("@EXTREBUILT", adChar, 25, str_ExternalRebuilt), _
                            Array("@KEYWORD", adChar, 50, str_Keyword), _
                            Array("@MBNUMBER", adChar, 25, str_MakeBuyNo), _
                            Array("@NUMOFBUS", adChar, 10, str_NumberOfBus), _
                            Array("@PROJECTED", adChar, 25, str_ProjectedAnnualUsage), _
                            Array("@REBUILDCODE", adChar, 25, str_RebuildCode), _
                            Array("@REMANUFACTURED", adChar, 25, str_Remanufactured), _
                            Array("@RECOMMEND", adChar, 1, str_OptRecommend), _
                            Array("@SAMPLE", adChar, 1, str_OptSample), _
                            Array("@VENDORPARTNUM", adChar, 25, str_VendorPartNo), _
                            Array("@INTERNALCOST", adChar, 25, str_InternalRebuilt), _
                            Array("@SOPNUM", adChar, 25, str_SOP), _
                            Array("vi_core_cost", adChar, 25, str_CoreCost), _
                            Array("vi_job_number", adChar, 25, str_JobNumber), _
                            Array("vi_manualNewPrice", adInteger, 8, int_NewJobUseManualEntry))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "AddMB", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateMBList(ByVal str_SPName As String, _
                             ByRef l_RetVal As Long, _
                             ByVal str_BenchNumber As String, _
                             ByVal str_BusType As String, _
                             ByVal str_BuyCode As String, _
                             ByVal str_BuyNewCost As String, _
                             ByVal str_CoreCode As String, _
                             ByVal str_Description As String, _
                             ByVal str_ExternalCost As String, _
                             ByVal str_Keyword As String, _
                             ByVal str_MBNumber As String, _
                             ByVal str_NumBusComp As String, _
                             ByVal str_AnnualUsage As String, _
                             ByVal str_RebuildCode As String, _
                             ByVal str_RemanCost As String, _
                             ByVal str_OptRecommend As String, _
                             ByVal str_OptSample As String, _
                             ByVal str_InternalCost As String, _
                             ByVal str_VendorPartNum As String, _
                             ByVal str_SOPNum As String, _
                             ByVal str_CoreCost As String, _
                             ByVal str_JobNumber As String, _
                             ByVal int_NewJobUseManualEntry As Integer, _
                             ByVal str_RowID As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateMBList = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_bench_number", adChar, 25, str_BenchNumber), _
                            Array("vi_bus_type", adChar, 50, str_BusType), _
                            Array("vi_buy_code", adChar, 25, str_BuyCode), _
                            Array("vi_buy_new_cost", adChar, 25, str_BuyNewCost), _
                            Array("vi_core_code", adChar, 25, str_CoreCode), _
                            Array("vi_description", adChar, 50, str_Description), _
                            Array("vi_external_cost", adChar, 25, str_ExternalCost), _
                            Array("vi_keyword", adChar, 50, str_Keyword), _
                            Array("vi_mb_number", adChar, 25, str_MBNumber), _
                            Array("vi_num_bus_comp", adChar, 10, str_NumBusComp), _
                            Array("vi_annual_usage", adChar, 25, str_AnnualUsage), _
                            Array("vi_rebuild_code", adChar, 25, str_RebuildCode), _
                            Array("vi_reman_cost", adChar, 25, str_RemanCost), _
                            Array("vi_recommendation", adChar, 1, str_OptRecommend), _
                            Array("vi_sample_provided", adChar, 1, str_OptSample), _
                            Array("vi_internal_cost", adChar, 25, str_InternalCost), _
                            Array("vi_vendor_part_num", adChar, 25, str_VendorPartNum), _
                            Array("vi_sop_num", adChar, 25, str_SOPNum), _
                            Array("vi_core_cost", adChar, 25, str_CoreCost), _
                            Array("vi_job_number", adChar, 25, str_JobNumber), _
                            Array("vi_manualNewPrice", adInteger, 8, int_NewJobUseManualEntry), _
                            Array("vi_partid", adChar, 50, str_RowID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateMBList", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteMB(ByVal str_SPName As String, _
                         ByRef l_RetVal As Long, _
                         ByVal str_MBNumber As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteMB = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_mb_number", adChar, 25, str_MBNumber))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteMB", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteVehicleEstimate(ByVal str_SPName As String, _
                                      ByRef l_RetVal As Long, _
                                      ByVal str_PartID As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteVehicleEstimate = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@IDPART", adChar, 50, str_PartID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteVehicleEstimate", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function TransferPartsUsed(ByVal str_SPName As String, _
                                  ByRef l_RetVal As Long, _
                                  ByVal str_MMSStockCode As String, _
                                  ByVal cur_MMSCost As Currency, _
                                  ByVal str_UserName As String, _
                                  ByVal var_NSCRowID As Variant) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    TransferPartsUsed = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                    Array("vi_mms_stock_code", adChar, 30, str_MMSStockCode), _
                    Array("vi_mms_cost", adNumeric, 20, cur_MMSCost), _
                    Array("vi_user_entered", adChar, 50, g_str_UserName), _
                    Array("@rowid", adChar, 50, var_NSCRowID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "TransferPartsUsed", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function AddLabourTasks(ByVal str_SPName As String, _
                               ByRef l_RetVal As Long, _
                               ByVal str_LabDefn As String, _
                               ByVal str_LinkNumber As String, _
                               ByVal str_TypeID As String, _
                               ByVal str_CostCentre As String, _
                               ByVal str_TaskDesc As String, _
                               ByVal str_LabourType As String, _
                               ByVal str_Usage As String, _
                               ByVal str_HrsReqd As String, _
                               ByVal str_AdjHrs As String, _
                               ByVal dbl_TimeAddition As Double, _
                               ByVal str_Rebuilt_Part_Num As String, _
                               ByVal str_LastModifiedBy As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    AddLabourTasks = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                        Array("vi_labour_defn", adChar, 50, str_LabDefn), _
                        Array("vi_link_number", adChar, 25, str_LinkNumber), _
                        Array("vi_typeid", adChar, 5, str_TypeID), _
                        Array("vi_costcentre", adChar, 5, str_CostCentre), _
                        Array("vi_task", adChar, 50, str_TaskDesc), _
                        Array("vi_labour_type", adChar, 5, str_LabourType), _
                        Array("vi_usage", adChar, 25, str_Usage), _
                        Array("vi_hrs_reqd", adChar, 25, str_HrsReqd), _
                        Array("vi_adj_hrs", adChar, 25, str_AdjHrs), _
                        Array("vi_time_addition", adDouble, 18, dbl_TimeAddition), _
                        Array("vi_rebuilt_part_num", adChar, 30, str_Rebuilt_Part_Num), _
                        Array("vi_last_modified_by", adChar, 25, str_LastModifiedBy))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "AddLabourTasks", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateLabourTasks(ByVal str_SPName As String, _
                                  ByRef l_RetVal As Long, _
                                  ByVal str_LabourDefn As String, _
                                  ByVal str_LinkNumber As String, _
                                  ByVal str_TypeID As String, _
                                  ByVal str_CostCentre As String, _
                                  ByVal str_TaskDesc As String, _
                                  ByVal str_LabourType As String, _
                                  ByVal str_Usage As String, _
                                  ByVal str_HrsReqd As String, _
                                  ByVal str_AdjHrs As String, _
                                  ByVal str_PartID As String, _
                                  ByVal dbl_TimeAddition As Double, _
                                  ByVal str_LastModifiedBy As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateLabourTasks = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_labour_defn", adChar, 50, str_LabourDefn), _
                            Array("vi_link_number", adChar, 25, str_LinkNumber), _
                            Array("vi_typeid", adChar, 5, str_TypeID), _
                            Array("vi_costcentre", adChar, 5, str_CostCentre), _
                            Array("vi_task", adChar, 50, str_TaskDesc), _
                            Array("vi_labour_type", adChar, 5, str_LabourType), _
                            Array("vi_usage", adChar, 25, str_Usage), _
                            Array("vi_hrs_reqd", adChar, 25, str_HrsReqd), _
                            Array("vi_adj_hrs", adChar, 25, str_AdjHrs), _
                            Array("vi_partid", adChar, 50, str_PartID), _
                            Array("vi_time_addition", adDouble, 18, dbl_TimeAddition), _
                            Array("vi_last_modified_by", adChar, 25, str_LastModifiedBy))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateLabourTasks", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function AddNSCPUsed(ByVal str_SPName As String, _
                            ByRef l_RetVal As Long, _
                            ByVal str_SupNumber As String, _
                            ByVal str_SupName As String, _
                            ByVal str_CostCentre As String, _
                            ByVal str_Quantity As String, _
                            ByVal str_Percent As String, _
                            ByVal str_UserName As String, _
                            ByVal str_LinkCode As String, _
                            ByVal cur_Cost As Currency, _
                            ByVal var_TypeCode As Variant, _
                            ByVal cur_CoreCost As Currency, _
                            ByVal lng_ID As Long) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    AddNSCPUsed = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@orig_supplier_num", adChar, 50, str_SupNumber), _
                            Array("@orig_supplier_name", adChar, 50, str_SupName), _
                            Array("@cost_centre", adChar, 4, str_CostCentre), _
                            Array("@qty_reqd", adChar, 10, str_Quantity), _
                            Array("@percent_usage", adChar, 10, str_Percent), _
                            Array("@entered_by", adChar, 25, str_UserName), _
                            Array("@mbnum", adChar, 30, str_LinkCode), _
                            Array("@cost", adNumeric, 20, cur_Cost), _
                            Array("@link_type", adChar, 3, var_TypeCode), _
                            Array("@corecost", adNumeric, 20, cur_CoreCost), _
                            Array("@ID", adInteger, 10, lng_ID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "AddNSCPUsed", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateNSCPUsed(ByVal str_SPName As String, _
                               ByRef l_RetVal As Long, _
                               ByVal str_SupNumber As String, _
                               ByVal str_SupName As String, _
                               ByVal str_CostCentre As String, _
                               ByVal str_Quantity As String, _
                               ByVal str_Percent As String, _
                               ByVal str_UserName As String, _
                               ByVal str_LinkCode As String, _
                               ByVal cur_Cost As Currency, _
                               ByVal var_RowID As Variant, _
                            ByVal cur_CoreCost As Currency) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateNSCPUsed = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@orig_supplier_num", adChar, 50, str_SupNumber), _
                            Array("@orig_supplier_name", adChar, 50, str_SupName), _
                            Array("@cost_centre", adChar, 4, str_CostCentre), _
                            Array("@qty_reqd", adChar, 10, str_Quantity), _
                            Array("@percent_usage", adChar, 10, str_Percent), _
                            Array("@entered_by", adChar, 25, str_UserName), _
                            Array("@mbnum", adChar, 30, str_LinkCode), _
                            Array("@cost", adNumeric, 20, cur_Cost), _
                            Array("@rowid", adChar, 50, var_RowID), _
                            Array("@corecost", adNumeric, 20, cur_CoreCost))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateNSCPUsed", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function AddSCPUsed(ByVal str_SPName As String, _
                           ByRef l_RetVal As Long, _
                           ByVal str_StockCode As String, _
                           ByVal str_CostCentre As String, _
                           ByVal str_Quantity As String, _
                           ByVal str_PercentUsage As String, _
                           ByVal str_UserName As String, _
                           ByVal cur_MMSCost As Currency, _
                           ByVal cur_OEMCost As Currency, _
                           ByVal str_LinkCode As String, _
                           ByVal str_RebuiltPart As String, _
                           ByVal str_LinkType As String, _
                           ByVal cur_CoreCost As Currency, _
                           ByVal str_rebuilt_code As String, _
                           ByVal cur_rebuilt_cost As Currency) As Long

    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    AddSCPUsed = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("mms_stock_code", adChar, 30, str_StockCode), _
                            Array("vi_cost_centre", adChar, 4, str_CostCentre), _
                            Array("vi_qty_reqd", adChar, 10, str_Quantity), _
                            Array("vi_percent_usage", adChar, 10, str_PercentUsage), _
                            Array("vi_user_entered", adChar, 30, str_UserName), _
                            Array("vi_link_code", adChar, 30, str_LinkCode), _
                            Array("vi_mms_cost", adNumeric, 30, cur_MMSCost), _
                            Array("vi_oem_cost", adNumeric, 30, cur_OEMCost), _
                            Array("vi_is_rebuilt_part", adChar, 1, str_RebuiltPart), _
                            Array("vi_link_type", adChar, 3, str_LinkType), _
                            Array("corecost", adNumeric, 20, cur_CoreCost), _
                            Array("vi_mms_rebuilt_code", adChar, 30, str_rebuilt_code), _
                            Array("vi_rebuilt_cost", adNumeric, 20, cur_rebuilt_cost))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "AddSCPUsed", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateSCPUsed(ByVal str_SPName As String, _
                              ByRef l_RetVal As Long, _
                              ByVal str_StockCode As String, _
                              ByVal str_CostCentre As String, _
                              ByVal str_Quantity As String, _
                              ByVal str_PercentUsage As String, _
                              ByVal str_UserName As String, _
                              ByVal str_MBNumber As String, _
                              ByVal cur_PartUnitCost As Currency, _
                              ByVal cur_OEMCost As Currency, _
                              ByVal m_var_RowID As Variant, _
                              ByVal cur_CoreCost As Currency) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateSCPUsed = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@mms_stock_code", adChar, 30, str_StockCode), _
                            Array("@cost_centre", adChar, 4, str_CostCentre), _
                            Array("@qty_reqd", adChar, 10, str_Quantity), _
                            Array("@percent_usage", adChar, 10, str_PercentUsage), _
                            Array("@user_entered", adChar, 50, str_UserName), _
                            Array("@makebuy_code", adChar, 30, str_MBNumber), _
                            Array("@mms_cost", adNumeric, 20, cur_PartUnitCost), _
                            Array("@oem_cost", adNumeric, 20, cur_OEMCost), _
                            Array("@rowid", adChar, 50, m_var_RowID), _
                            Array("@corecost", adNumeric, 20, cur_CoreCost))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateSCPUsed", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function AddRBPUsed(ByVal str_SPName As String, _
                           ByRef l_RetVal As Long, _
                           ByVal str_StockCode As String, _
                           ByVal str_CostCentre As String, _
                           ByVal str_Quantity As String, _
                           ByVal str_PercentUsage As String, _
                           ByVal str_UserName As String, _
                           ByVal str_MBNumber As String, _
                           ByVal cur_PartUnitCost As Currency, _
                           ByVal str_RebuiltNumber As String, _
                           ByVal var_TypeCode As Variant, _
                            ByVal cur_CoreCost As Currency) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    AddRBPUsed = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@mms_stock_code", adChar, 30, str_StockCode), _
                            Array("@cost_centre", adChar, 4, str_CostCentre), _
                            Array("@qty_reqd", adChar, 10, str_Quantity), _
                            Array("@percent_usage", adChar, 10, str_PercentUsage), _
                            Array("@user_entered", adChar, 50, str_UserName), _
                            Array("@makebuy_code", adChar, 30, str_MBNumber), _
                            Array("@estimated_cost", adNumeric, 20, cur_PartUnitCost), _
                            Array("@rebuilt_num", adChar, 30, str_RebuiltNumber), _
                            Array("@link_type", adChar, 3, var_TypeCode), _
                            Array("@corecost", adNumeric, 20, cur_CoreCost))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "AddRBPUsed", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateRBPUsed(ByVal str_SPName As String, _
                              ByRef l_RetVal As Long, _
                              ByVal str_CostCentre As String, _
                              ByVal str_Quantity As String, _
                              ByVal str_PercentUsage As String, _
                              ByVal str_UserName As String, _
                              ByVal str_MBNumber As String, _
                              ByVal cur_PartUnitCost As Currency, _
                              ByVal str_RebuiltNumber As String, _
                              ByVal var_RowID As Variant, _
                              ByVal cur_CoreCost As Currency) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateRBPUsed = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@cost_centre", adChar, 4, str_CostCentre), _
                            Array("@qty_reqd", adChar, 10, str_Quantity), _
                            Array("@percent_usage", adChar, 10, str_PercentUsage), _
                            Array("@user_entered", adChar, 50, str_UserName), _
                            Array("@makebuy_code", adChar, 30, str_MBNumber), _
                            Array("@estimated_cost", adNumeric, 20, cur_PartUnitCost), _
                            Array("@rebuilt_num", adChar, 30, str_RebuiltNumber), _
                            Array("@rowid", adChar, 50, var_RowID), _
                            Array("@corecost", adNumeric, 20, cur_CoreCost))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateRBPUsed", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveUsers(ByVal str_SPName As String, _
                              ByVal str_UserName As String, _
                              ByVal str_Password As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveUsers = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_username", adChar, 15, str_UserName), _
                            Array("vi_password", adChar, 25, str_Password))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveUsers", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveSOPFileName(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveSOPFileName = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveSOPFileName", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveTaskDescription(ByVal str_SPName As String) As ADODB.Recordset
    Dim m_obj_clsDb As clsDB
    
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveTaskDescription = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveTaskDescription", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveLabourPosition(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveLabourPosition = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveLabourPosition", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveCostCentres(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveCostCentres = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveCostCentres", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveMBAllLabour(ByVal str_SPName As String, _
                                    ByVal str_LabourID As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveMBAllLabour = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                                    Array("@IDLABOUR", adChar, 50, str_LabourID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveMBAllLabour", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchMB(ByVal str_SPName As String, _
                         ByVal str_MBNumber As String, _
                         ByVal str_RebuildNumber As String, _
                         ByVal str_Keyword As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB

    Set SearchMB = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_mb_num", adChar, 25, str_MBNumber), _
                            Array("vi_rebuild_code", adChar, 25, str_RebuildNumber), _
                            Array("vi_keyword", adChar, 50, str_Keyword))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchMB", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveNSCPUsed(ByVal str_SPName As String, _
                                 ByVal str_LinkCode As String, _
                                 ByVal str_LinkType As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveNSCPUsed = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_idnum", adChar, 30, str_LinkCode), _
                            Array("vi_link_type", adChar, 3, str_LinkType))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveNSCPUsed", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveALLNSCPUsed(ByVal str_SPName As String, _
                                 ByVal str_LinkCode As String, _
                                 ByVal str_LinkType As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveALLNSCPUsed = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_idnum", adChar, 30, str_LinkCode), _
                            Array("vi_link_type", adChar, 3, str_LinkType))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveALLNSCPUsed", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveSCPUsed(ByVal str_SPName As String, _
                                ByVal str_LinkCode As String, _
                                ByVal str_RebuiltPartChoice As String, _
                                ByVal str_LinkType As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveSCPUsed = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                    Array("vi_link_code", adChar, 30, str_LinkCode), _
                    Array("vi_rebuilt_part_choice", adChar, 1, str_RebuiltPartChoice), _
                    Array("vi_link_type", adChar, 3, str_LinkType))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveSCPUsed", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveRBPUsed(ByVal str_SPName As String, _
                                ByVal str_LinkCode As String, _
                                ByVal str_LinkType As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveRBPUsed = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_idnum", adChar, 30, str_LinkCode), _
                            Array("vi_link_type", adChar, 3, str_LinkType))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveRBPUsed", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveEngines(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveEngines = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveEngines", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveTransmissions(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveTransmissions = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveTransmissions", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveDifferentials(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveDifferentials = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveDifferentials", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveMB(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveMB = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveMB", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveUsersLike(ByVal str_SPName As String, _
                                  ByVal str_UserLike As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveUsersLike = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_username_like", adChar, 15, str_UserLike))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveUsersLike", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SetDefaultPassword(ByVal str_SPName As String, _
                                  ByRef l_RetVal As Long, _
                                  ByVal str_UserName As String, _
                                  ByVal str_DefaultPassword As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    SetDefaultPassword = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                                Array("vi_username", adChar, 15, str_UserName), _
                                Array("vi_password", adChar, 25, str_DefaultPassword))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SetDefaultPassword", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function PopulateNSCComboBoxes(ByVal str_SPName As String, _
                                      ByVal str_CompareType As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set PopulateNSCComboBoxes = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_cost_comparetype", adChar, 1, str_CompareType))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "PopulateNSCComboBoxes", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function PopulateCostCentres(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set PopulateCostCentres = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "PopulateCostCentres", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchNSCPart(ByVal str_SPName As String, _
                              ByVal str_OrigSupplierNumber As String, _
                              ByVal lng_OEMPartCost As Long, _
                              ByVal str_Description As String, _
                              ByVal str_Keyword As String, _
                              ByVal str_CostCompareType As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchNSCPart = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                    Array("vi_orig_supplier_num", adChar, 50, str_OrigSupplierNumber), _
                    Array("vi_oem_part_cost", adNumeric, 11, lng_OEMPartCost), _
                    Array("vi_description", adChar, 500, str_Description), _
                    Array("vi_keyword", adChar, 50, str_Keyword), _
                    Array("vi_cost_comparetype", adChar, 1, str_CostCompareType))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchNSCPart", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteUser(ByVal str_SPName As String, _
                            ByRef l_RetVal As Long, _
                            ByVal str_UserName As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteUser = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_username", adChar, 15, str_UserName))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteUser", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAllUsers(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAllUsers = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAllUsers", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchVehicleEstimate(ByVal str_SPName As String, _
                                      ByVal str_BusSeries As String, _
                                      ByVal str_BusDescription As String, _
                                      ByVal str_Make As String, _
                                      ByVal str_Model As String, _
                                      ByVal str_Year As String, _
                                      ByVal str_Engine As String, _
                                      ByVal str_Trans As String, _
                                      ByVal str_Differential As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchVehicleEstimate = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_veh_series", adChar, 75, str_BusSeries), _
                            Array("vi_proj_desc", adChar, 200, str_BusDescription), _
                            Array("vi_make", adChar, 25, str_Make), _
                            Array("vi_model", adChar, 25, str_Model), _
                            Array("vi_year", adChar, 4, str_Year), _
                            Array("vi_engine", adChar, 25, str_Engine), _
                            Array("vi_trans", adChar, 25, str_Trans), _
                            Array("vi_diff", adChar, 25, str_Differential))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchVehicleEstimate", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveVehicleTypes(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveVehicleTypes = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveVehicleTypes", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveVehicleEstimates(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveVehicleEstimates = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveVehicleEstimates", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchRBPart(ByVal str_SPName As String, _
                             ByVal str_RebuiltNumber As String, _
                             ByVal str_Price As String, _
                             ByVal str_Description As String, _
                             ByVal str_Keyword As String, _
                             ByVal l_CostCompareType As Long) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchRBPart = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                        Array("vi_orig_supplier_num", adChar, 30, str_RebuiltNumber), _
                        Array("vi_oem_part_cost", adChar, 25, str_Price), _
                        Array("vi_description", adChar, 250, str_Description), _
                        Array("vi_keyword", adChar, 250, str_Keyword), _
                        Array("vi_cost_comparetype", adInteger, 10, l_CostCompareType))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchRBPart", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchSCRBPartList(ByVal str_SPName As String, _
                                   ByVal str_RebuiltNumber As String, _
                                   ByVal str_Price As String, _
                                   ByVal str_Description As String, _
                                   ByVal l_CostCompareType As Long) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchSCRBPartList = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                        Array("vi_orig_supplier_num", adChar, 30, str_RebuiltNumber), _
                        Array("vi_oem_part_cost", adInteger, 9, str_Price), _
                        Array("vi_description", adChar, 500, str_Description), _
                        Array("vi_cost_comparetype", adInteger, 10, l_CostCompareType))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchSCRBPartList", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchSCPart(ByVal str_SPName As String, _
                             ByVal str_RebuiltNumber As String, _
                             ByVal str_Price As String, _
                             ByVal str_Description As String, _
                             ByVal str_Keyword As String, _
                             ByVal l_CostCompareType As Long) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchSCPart = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                        Array("vi_orig_supplier_num", adChar, 30, str_RebuiltNumber), _
                        Array("vi_oem_part_cost", adNumeric, 9, str_Price), _
                        Array("vi_description", adChar, 500, str_Description), _
                        Array("vi_keyword", adChar, 50, str_Keyword), _
                        Array("vi_cost_comparetype", adInteger, 10, l_CostCompareType))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchSCPart", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchNSCRBPartList(ByVal str_SPName As String, _
                                    ByVal str_RebuiltNumber As String, _
                                    ByVal str_Price As String, _
                                    ByVal str_Description As String, _
                                    ByVal l_CostCompareType As Long) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchNSCRBPartList = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                        Array("vi_orig_supplier_num", adChar, 50, str_RebuiltNumber), _
                        Array("vi_oem_part_cost", adInteger, 9, str_Price), _
                        Array("vi_description", adChar, 500, str_Description), _
                        Array("vi_cost_comparetype", adInteger, 10, l_CostCompareType))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchNSCRBPartList", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveRB(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveRB = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveRB", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveSCOrigSupplierNum(ByVal str_SPName As String, _
                                          ByVal str_OrigSuppNum As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveSCOrigSupplierNum = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_orig_supplier_num", adChar, 50, str_OrigSuppNum))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveSCOrigSupplierNum", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveMBLabour(ByVal str_SPName As String, _
                                 ByVal str_IDNumber As String, _
                                 ByVal str_Type As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveMBLabour = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_idnum", adChar, 25, str_IDNumber), _
                            Array("vi_type", adChar, 3, str_Type))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveMBLabour", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveMBCCLabour(ByVal str_SPName As String, _
                                   ByVal str_MBNumber As String, _
                                   ByVal str_TypeID As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveMBCCLabour = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_mb_num", adChar, 25, str_MBNumber), _
                            Array("vi_typeid", adChar, 5, str_TypeID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveMBCCLabour", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveCCTotals(ByVal str_SPName As String, _
                                 ByVal str_IDNumber As String, _
                                 ByVal str_LinkType As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveCCTotals = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_idnum", adChar, 25, str_IDNumber), _
                            Array("vi_link_type", adChar, 3, str_LinkType))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveCCTotals", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrievePassword(ByVal str_SPName As String, _
                                 ByVal str_UserName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrievePassword = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_user_name", adChar, 15, str_UserName))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrievePassword", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdatePassword(ByVal str_SPName As String, _
                                  ByRef l_RetVal As Long, _
                                  ByVal str_Password As String, _
                                  ByVal str_UserName As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdatePassword = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                                    Array("vi_password", adChar, 25, str_Password), _
                                    Array("vi_user_name", adChar, 50, str_UserName), _
                                    Array("vi_date_cahanged", adDate, 10, Now()))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdatePassword", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function PopulateRBComboBoxes(ByVal str_SPName As String, _
                                     ByVal str_CompareType As String) As ADODB.Recordset
    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set PopulateRBComboBoxes = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_cost_comparetype", adChar, 1, str_CompareType))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "PopulateRBComboBoxes", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveRBEstimates(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveRBEstimates = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveRBEstimates", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function PopulateSCComboBoxes(ByVal str_SPName As String, _
                                     ByVal str_CompareType As String) As ADODB.Recordset
    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set PopulateSCComboBoxes = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_cost_comparetype", adChar, 1, str_CompareType))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "PopulateSCComboBoxes", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function Add_User(ByVal str_SPName As String, _
                         ByRef l_RetVal As Long, _
                         ByVal str_UserName As String, _
                         ByVal l_AccessLevel As Long, _
                         ByVal str_Password As String, _
                         ByVal l_ForceChangePassword As Long) As Long
    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Add_User = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                    Array("vi_username", adChar, 15, str_UserName), _
                    Array("vi_access_level", adInteger, 1, l_AccessLevel), _
                    Array("vi_password", adChar, 25, str_Password), _
                    Array("vi_ForceChangePassword", adInteger, 1, l_ForceChangePassword))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "Add_User", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateAccessLevel(ByVal str_SPName As String, _
                                  ByRef l_RetVal As Long, _
                                  ByVal l_AccessLevel As Long, _
                                  ByVal l_PreviousAccessLevel As Long, _
                                  ByVal l_AccessLevelDays As Long, _
                                  ByVal str_UserName As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateAccessLevel = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                Array("vi_access_level", adInteger, 1, l_AccessLevel), _
                Array("vi_previous_access_level", adInteger, 1, l_PreviousAccessLevel), _
                Array("vi_access_level_days", adInteger, 10, l_AccessLevelDays), _
                Array("vi_username", adChar, 15, str_UserName))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateAccessLevel", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SetPSWDChangeDateNull(ByVal str_SPName As String, _
                                  ByRef l_RetVal As Long, _
                                  ByVal str_UserName As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    SetPSWDChangeDateNull = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                                        Array("vi_username", adChar, 15, str_UserName))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SetPSWDChangeDateNull", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveListOfBuses(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set RetrieveListOfBuses = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveListOfBuses", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function InsertMBListOFBuses(ByVal str_SPName As String, _
                                    ByRef l_RetVal As Long, _
                                    ByVal str_MakeBuyNumber As String, _
                                    ByVal l_ListID As Long) As Long
    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    InsertMBListOFBuses = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                    Array("vi_mb_number", adChar, 25, str_MakeBuyNumber), _
                    Array("vi_list_id", adInteger, 10, l_ListID))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "InsertMBListOFBuses", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function InsertRBListOFBuses(ByVal str_SPName As String, _
                                    ByRef l_RetVal As Long, _
                                    ByVal str_RebuiltStockCode As String, _
                                    ByVal l_ListID As Long) As Long
    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    InsertRBListOFBuses = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                    Array("vi_rebuilt_stock_num", adChar, 30, str_RebuiltStockCode), _
                    Array("vi_list_id", adInteger, 10, l_ListID))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "InsertRBListOFBuses", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function
                                            
Public Function RetrieveMBListOfBuses(ByVal str_SPName As String, _
                                      ByVal str_MakeBuyNumber As String) _
                                                                    As ADODB.Recordset
    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set RetrieveMBListOfBuses = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                                    Array("vi_mb_number", adChar, 25, str_MakeBuyNumber))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveMBListOfBuses", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveRBListOfBuses(ByVal str_SPName As String, _
                                      ByVal str_RebuiltStockCode As String) _
                                                                    As ADODB.Recordset
    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set RetrieveRBListOfBuses = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                    Array("vi_rebuilt_stock_num", adChar, 30, str_RebuiltStockCode))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveRBListOfBuses", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteMBListOFBuses(ByVal str_SPName As String, _
                         ByRef l_RetVal As Long, _
                         ByVal str_MBNumber As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteMBListOFBuses = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_mb_number", adChar, 25, str_MBNumber))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteMBListOFBuses", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteRBListOFBuses(ByVal str_SPName As String, _
                         ByRef l_RetVal As Long, _
                         ByVal str_RebuiltStockCode As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteRBListOFBuses = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                        Array("vi_rebuilt_stock_num", adChar, 30, str_RebuiltStockCode))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteRBListOFBuses", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveMBListByMBNumber(ByVal str_SPName As String, _
                                         ByVal str_MBNumber As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveMBListByMBNumber = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_mb_number", adChar, 25, str_MBNumber))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveMBListByMBNumber", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchArchiveHistory(ByVal str_SPName As String, _
                                     ByVal str_Number As String, _
                                     ByVal str_Type As String, _
                                     ByVal int_chkdate As Integer, _
                                     ByVal str_DateFrom As String, _
                                     ByVal str_DateTo As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchArchiveHistory = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_number", adChar, 30, str_Number), _
                            Array("vi_type", adChar, 30, str_Type), _
                            Array("vi_chkdate", adInteger, 20, int_chkdate), _
                            Array("vi_DateFrom", adChar, 50, str_DateFrom), _
                            Array("vi_DateTo", adChar, 50, str_DateTo))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchArchiveHistory", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function InsertRBMasterList(ByVal str_SPName As String, _
                                    ByRef l_RetVal As Long, _
                                    ByVal str_MMSStockCode As String, _
                                    ByVal str_DetailedDescription As String, _
                                    ByVal str_Keyword As String, _
                                    ByVal str_CorePartNumber As String, _
                                    ByVal str_RebuiltStockNumber As String, _
                                    ByVal str_JobNumber As String, _
                                    ByVal str_LastModifiedBy As String, _
                                    ByVal str_SOPNumber As String, _
                                    ByVal str_BuyCost As String, _
                                    ByVal str_RemanufacturedCost As String, _
                                    ByVal str_ExternalCost As String, _
                                    ByVal str_CoreCost As String) As Long
    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    InsertRBMasterList = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                    Array("vi_mms_stock_code", adChar, 30, str_MMSStockCode), _
                    Array("vi_detailed_desc", adChar, 250, str_DetailedDescription), _
                    Array("vi_keyword", adChar, 250, str_Keyword), _
                    Array("vi_core_part_num", adChar, 30, str_CorePartNumber), _
                    Array("vi_rebuilt_stock_num", adChar, 30, str_RebuiltStockNumber), _
                    Array("vi_job_number", adChar, 25, str_JobNumber), _
                    Array("vi_last_modified_by", adChar, 50, str_LastModifiedBy), _
                    Array("vi_sop_number", adChar, 30, str_SOPNumber), _
                    Array("@BuyCost", adChar, 25, str_BuyCost), _
                    Array("@RemanCost", adChar, 25, str_RemanufacturedCost), _
                    Array("@ExternalCost", adChar, 25, str_ExternalCost), _
                    Array("vi_core_cost", adChar, 25, str_CoreCost))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "InsertRBMasterList", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveEmployeeLabour(ByVal str_SPName As String, _
                                       ByVal str_LinkNumber As String, _
                                       ByVal str_TypeID As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveEmployeeLabour = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_link_number", adChar, 25, str_LinkNumber), _
                            Array("vi_typeid", adChar, 5, str_TypeID))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveEmployeeLabour", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveBusDescription(ByVal str_SPName As String, _
                                       ByVal str_BusDescription As String) _
                                                                    As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveBusDescription = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_description", adChar, 500, str_BusDescription))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveBusDescription", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function InsertListOfBuses(ByVal str_SPName As String, _
                                    ByRef l_RetVal As Long, _
                                    ByVal str_BusDescription As String) As Long
    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    InsertListOfBuses = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                    Array("vi_description", adChar, 500, str_BusDescription))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "InsertListOfBuses", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateListOfBuses(ByVal str_SPName As String, _
                                 ByRef l_RetVal As Long, _
                                 ByVal l_ListID As Long, _
                                 ByVal str_BusDescription As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateListOfBuses = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                                Array("vi_list_id", adInteger, 10, l_ListID), _
                                Array("vi_description", adChar, 500, str_BusDescription))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateListOfBuses", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetMBListOfBusesByListID(ByVal str_SPName As String, _
                                         ByVal l_ListID As Long) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set GetMBListOfBusesByListID = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_list_id", adInteger, 10, l_ListID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetMBListOfBusesByListID", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteFromListOfBuses(ByVal str_SPName As String, _
                                      ByRef l_RetVal As Long, _
                                      ByVal l_ListID As Long) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteFromListOfBuses = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                                            Array("vi_list_id", adInteger, 10, l_ListID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteFromListOfBuses", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAccessLevel(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAccessLevel = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAccessLevel", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function ResetAccessLevel(ByVal str_SPName As String, _
                                 ByRef l_RetVal As Long, _
                                 ByVal str_UserName As String, _
                                 ByVal l_AccessLevel As Long, _
                                 ByVal l_PreviousAccessLevel As Long) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    ResetAccessLevel = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                Array("vi_username", adChar, 15, str_UserName), _
                Array("vi_access_level", adInteger, 1, l_AccessLevel), _
                Array("vi_previous_access_level", adInteger, 1, l_PreviousAccessLevel))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "ResetAccessLevel", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function FindTaskDescription(ByVal str_SPName As String, _
                                    ByVal str_TaskDescription As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set FindTaskDescription = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                        Array("vi_task_description", adChar, 200, str_TaskDescription))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "FindTaskDescription", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function AddLabourTaskDescription(ByVal str_SPName As String, _
                                         ByRef l_RetVal As Long, _
                                         ByVal str_TaskDescription As String) As Long
    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    AddLabourTaskDescription = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                    Array("vi_task_description", adChar, 200, str_TaskDescription))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "AddLabourTaskDescription", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateLabourTaskDescription(ByVal str_SPName As String, _
                                            ByRef l_RetVal As Long, _
                                            ByVal str_TaskDescription As String, _
                                            ByVal m_l_TaskDescriptionID As Long) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateLabourTaskDescription = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                Array("vi_task_description", adChar, 200, str_TaskDescription), _
                Array("vi_task_id", adInteger, 10, m_l_TaskDescriptionID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateLabourTaskDescription", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteLabourTaskDescription(ByVal str_SPName As String, _
                                            ByRef l_RetVal As Long, _
                                            ByVal l_TaskDescriptionID As Long) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteLabourTaskDescription = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_task_id", adInteger, 10, l_TaskDescriptionID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteLabourTaskDescription", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveEmployeeSalaries(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveEmployeeSalaries = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveEmployeeSalaries", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchEmployeeSalaries(ByVal str_SPName As String, _
                                       ByVal dbl_SalaryRate As Double) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchEmployeeSalaries = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_rate_per_hour", adDouble, 10, dbl_SalaryRate))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchEmployeeSalaries", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function AddEmployeeSalaries(ByVal str_SPName As String, _
                                    ByRef l_RetVal As Long, _
                                    ByVal l_WageGroup As Long, _
                                    ByVal dbl_SalaryRate As Double) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    AddEmployeeSalaries = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                                Array("vi_wage_group", adInteger, 10, l_WageGroup), _
                                Array("vi_rate_per_hour", adDouble, 18, dbl_SalaryRate))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "AddEmployeeSalaries", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateEmployeeSalaries(ByVal str_SPName As String, _
                                       ByRef l_RetVal As Long, _
                                       ByVal l_WageGroup As Long, _
                                       ByVal dbl_SalaryRate As Double) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateEmployeeSalaries = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                                Array("vi_wage_group", adInteger, 10, l_WageGroup), _
                                Array("vi_rate_per_hour", adDouble, 10, dbl_SalaryRate))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateEmployeeSalaries", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchEmplClassWageGroup(ByVal str_SPName As String, _
                                         ByVal l_WageGroup As Long) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchEmplClassWageGroup = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_wage_group", adInteger, 10, l_WageGroup))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchEmplClassWageGroup", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteEmployeeSalaries(ByVal str_SPName As String, _
                                       ByRef l_RetVal As Long, _
                                       ByVal l_WageGroup As Long) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteEmployeeSalaries = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_wage_group", adInteger, 10, l_WageGroup))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteEmployeeSalaries", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function AddEmplClass(ByVal str_SPName As String, _
                             ByRef l_RetVal As Long, _
                             ByVal str_LabourDefinition As String, _
                             ByVal l_WageGroup As Long, _
                             ByVal dbl_HoursPerWeek As Double, _
                             ByVal dbl_OverheadType As Double) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    AddEmplClass = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                        Array("vi_labour_defn", adChar, 50, str_LabourDefinition), _
                        Array("vi_wage_group", adInteger, 10, l_WageGroup), _
                        Array("vi_hrs_per_week", adDouble, 18, dbl_HoursPerWeek), _
                        Array("vi_overheadtype", adDouble, 5, dbl_OverheadType))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "AddEmplClass", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchEmplClassLabourDefn(ByVal str_SPName As String, _
                                          ByVal str_LabourDefinition As String) _
                                                                    As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchEmplClassLabourDefn = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_labour_defn", adChar, 50, str_LabourDefinition))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchEmplClassLabourDefn", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteEmplClass(ByVal str_SPName As String, _
                                ByRef l_RetVal As Long, _
                                ByVal l_LabourType As Long) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteEmplClass = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_labour_type", adInteger, 10, l_LabourType))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteEmplClass", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchWageGroup(ByVal str_SPName As String, _
                                ByVal l_WageGroup As Long) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB

    Set SearchWageGroup = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_wage_group", adInteger, 10, l_WageGroup))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchWageGroup", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateEmplClass(ByVal str_SPName As String, _
                                       ByRef l_RetVal As Long, _
                                       ByVal l_LabourType As Long, _
                                       ByVal str_WageGroup As String, _
                                       ByVal str_LabourDefinition As String, _
                                       ByVal l_HoursPerWeek As Long, _
                                       ByVal dbl_OverheadType As Double) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateEmplClass = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_labour_type", adInteger, 10, l_LabourType), _
                            Array("vi_wage_group", adInteger, 10, str_WageGroup), _
                            Array("vi_labour_defn", adChar, 50, str_LabourDefinition), _
                            Array("vi_hrs_per_week", adInteger, 10, l_HoursPerWeek), _
                            Array("vi_overheadtype", adDouble, 10, dbl_OverheadType))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateEmplClass", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function
'Calls the procedure (str_SPName) with the given parameters from the CES packages
Public Function AddTempOEMKit(ByVal str_SPName As String, _
                              ByRef l_RetVal As Long, _
                              ByVal str_part_number As String, _
                              ByVal str_Description As String, _
                              ByVal str_Keyword As String, _
                              ByVal str_UserName As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    AddTempOEMKit = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                        Array("vi_part_number", adChar, 30, str_part_number), _
                        Array("vi_description", adChar, 500, str_Description), _
                        Array("vi_keyword", adChar, 50, str_Keyword), _
                        Array("vi_username", adChar, 25, str_UserName))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "AddTempOEMKit", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function
'Calls the procedure (str_SPName) with the given parameters from the CES packages
Public Function DeleteOEMKit(ByVal str_SPName As String, _
                         ByRef l_RetVal As Long, _
                         ByVal str_part_number As String) As Long
                         
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteOEMKit = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_part_number", adChar, 30, str_part_number))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteOEMKit", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function
'Calls the procedure (str_SPName) with the given parameters from the CES packages
Public Function SearchOEMKits(ByVal str_SPName As String, _
                             ByVal str_PartNumber As String, _
                             ByVal str_Description As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchOEMKits = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                    Array("vi_part_number", adChar, 30, str_PartNumber), _
                    Array("vi_description", adChar, 500, str_Description))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchOEMKit", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function
'Calls the procedure (str_SPName) with the given parameters from the CES packages
Public Function ArchSearchBuses(ByVal str_SPName As String, ByVal str_bus_type As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set ArchSearchBuses = m_obj_clsDb.RunSPReturnRS(str_SPName, Array("vi_arch_veh_bus_type", adChar, 75, str_bus_type))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "ArchSearchBuses", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function ArchSearchOEMKits(ByVal str_SPName As String, _
                             ByVal str_PartNumber As String, _
                             ByVal str_ID As Integer) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set ArchSearchOEMKits = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                    Array("vi_part_number", adChar, 30, str_PartNumber), _
                    Array("vi_id", adInteger, 18, str_ID))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "ArchSearchOEMKits", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function ADDOEMKitToBus(ByVal str_SPName As String, _
                             ByRef l_RetVal As Long, _
                             ByVal str_PartNumber As String, _
                             ByVal str_UserName As String, _
                             ByVal str_CostCentre As String, _
                             ByVal str_LinkNumber As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    ADDOEMKitToBus = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                    Array("vi_part_number", adChar, 30, str_PartNumber), _
                    Array("vi_username", adChar, 30, str_UserName), _
                    Array("vi_costcentre", adChar, 5, str_CostCentre), _
                    Array("vi_linknumber", adChar, 30, str_LinkNumber))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "ADDOEMKitToBus", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveOEMKitsAttached(ByVal str_SPName As String, _
                                        ByVal str_Link_code As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveOEMKitsAttached = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                                Array("vi_link_code", adChar, 30, str_Link_code))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveOEMKitsAttached", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteOEMKitAttached(ByVal str_SPName As String, _
                         ByRef l_RetVal As Long, _
                         ByVal str_Link_code As String, _
                         ByVal str_Vehicle_Number As String) As Long
                         
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteOEMKitAttached = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_link_code", adChar, 30, str_Link_code), _
                            Array("vi_vehicle_number", adChar, 30, str_Vehicle_Number))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteOEMKitAttached", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function retrieveSCKitData(ByVal str_SPName As String, _
                                  ByVal str_Link_code As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set retrieveSCKitData = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                                Array("vi_link_code", adChar, 30, str_Link_code))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "retrieveSCKitData", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateOEMKitCost(ByVal str_SPName As String, _
                                 ByRef l_RetVal As Long, _
                                 ByVal str_part_number As String, _
                                 ByVal str_Cost As Currency) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateOEMKitCost = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                Array("vi_part_number", adChar, 30, str_part_number), _
                Array("vi_cost", adCurrency, 20, str_Cost))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateOEMKitCost", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateRBCost(ByVal str_SPName As String, _
                             ByRef l_RetVal As Long, _
                             ByVal str_rebuilt_stock_num As String, _
                             ByVal str_Cost As Currency) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateRBCost = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                Array("vi_rebuilt_stock_num", adChar, 30, str_rebuilt_stock_num), _
                Array("vi_cost", adCurrency, 20, str_Cost))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateRBCost", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveArchRB(ByVal str_SPName As String, _
                               ByVal str_RBNumber As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveArchRB = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                Array("vi_rebuilt_code", adChar, 30, str_RBNumber))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveArchRB", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveArchMB(ByVal str_SPName As String, _
                               ByVal str_MBNumber As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveArchMB = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                Array("vi_MB_Number", adChar, 30, str_MBNumber))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveArchMB", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveArchBUS(ByVal str_SPName As String, _
                               ByVal str_VEH_ID As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveArchBUS = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                Array("vi_rebuilt_code", adChar, 30, str_VEH_ID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveArchBUS", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function ArchiveRB(ByVal str_SPName As String, _
                          ByRef l_RetVal As Long, _
                          ByVal str_RebuiltStockNum As String, _
                          ByVal str_UserName As String, _
                          ByVal str_LinkNumber As String, _
                          ByVal str_TypeID As String, _
                          ByVal str_LabourCost As String, _
                          ByVal str_LabourOverheadAmount As String, _
                          ByVal str_LabourTotal As String, _
                          ByVal str_MaterialsTotal As String, _
                          ByVal str_TotalRebuiltPartCost As String, _
                          ByVal str_TaxCost As String, _
                          ByVal str_TotalCostTax As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    ArchiveRB = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
        Array("vi_rebuilt_stock_num", adChar, 30, str_RebuiltStockNum), _
        Array("vi_username", adChar, 50, str_UserName), _
        Array("vi_link_number", adChar, 25, str_LinkNumber), _
        Array("vi_typeid", adChar, 5, str_TypeID), _
        Array("vi_labour_cost", adDouble, 18, str_LabourCost), _
        Array("vi_labour_overhead_amount", adDouble, 18, str_LabourOverheadAmount), _
        Array("vi_labour_total", adDouble, 18, str_LabourTotal), _
        Array("vi_materials_total", adDouble, 18, str_MaterialsTotal), _
        Array("vi_total_rebuilt_part_cost", adDouble, 18, str_TotalRebuiltPartCost), _
        Array("vi_total_tax", adDouble, 18, str_TaxCost), _
        Array("vi_total_cost_tax", adDouble, 18, str_TotalCostTax))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "ArchiveRB", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function ArchiveBUS(ByVal str_SPName As String, _
                           ByRef l_RetVal As Long, _
                           ByVal str_VehicleSeries As String, _
                           ByVal str_UserName As String, _
                           ByVal str_LinkNumber As String, _
                           ByVal str_TypeID As String, _
                           ByVal str_LabourCost As String, _
                           ByVal str_LabourOverheadAmount As String, _
                           ByVal str_LabourTotal As String, _
                           ByVal str_MaterialsTotal As String, _
                           ByVal str_TotalRebuiltPartCost As String, _
                           ByVal str_TaxCost As String, _
                           ByVal str_TotalCostTax As String, _
                           ByVal str_OEMKitsTotal As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    ArchiveBUS = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
        Array("vi_vehicle_series_num", adChar, 75, str_VehicleSeries), _
        Array("vi_username", adChar, 50, str_UserName), _
        Array("vi_link_number", adChar, 25, str_LinkNumber), _
        Array("vi_typeid", adChar, 5, str_TypeID), _
        Array("vi_labour_cost", adDouble, 18, str_LabourCost), _
        Array("vi_labour_overhead_amount", adDouble, 18, str_LabourOverheadAmount), _
        Array("vi_labour_total", adDouble, 18, str_LabourTotal), _
        Array("vi_materials_total", adDouble, 18, str_MaterialsTotal), _
        Array("vi_total_rebuilt_part_cost", adDouble, 18, str_TotalRebuiltPartCost), _
        Array("vi_total_tax", adDouble, 18, str_TaxCost), _
        Array("vi_total_cost_tax", adDouble, 18, str_TotalCostTax), _
        Array("vi_OEMKitsTotal", adDouble, 18, str_OEMKitsTotal))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "ArchiveBUS", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function ArchiveMB(ByVal str_SPName As String, _
                          ByRef l_RetVal As Long, _
                          ByVal str_MB_Number As String, _
                          ByVal str_UserName As String, _
                          ByVal str_LinkNumber As String, _
                          ByVal str_TypeID As String, _
                          ByVal str_LabourCost As String, _
                          ByVal str_LabourOverheadAmount As String, _
                          ByVal str_LabourTotal As String, _
                          ByVal str_MaterialsTotal As String, _
                          ByVal str_TotalRebuiltPartCost As String, _
                          ByVal str_TaxCost As String, _
                          ByVal str_TotalCostTax As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    ArchiveMB = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
        Array("vi_mb_number", adChar, 30, str_MB_Number), _
        Array("vi_username", adChar, 50, str_UserName), _
        Array("vi_link_number", adChar, 25, str_LinkNumber), _
        Array("vi_typeid", adChar, 5, str_TypeID), _
        Array("vi_labour_cost", adDouble, 18, str_LabourCost), _
        Array("vi_labour_overhead_amount", adDouble, 18, str_LabourOverheadAmount), _
        Array("vi_labour_total", adDouble, 18, str_LabourTotal), _
        Array("vi_materials_total", adDouble, 18, str_MaterialsTotal), _
        Array("vi_total_rebuilt_part_cost", adDouble, 18, str_TotalRebuiltPartCost), _
        Array("vi_total_tax", adDouble, 18, str_TaxCost), _
        Array("vi_total_cost_tax", adDouble, 18, str_TotalCostTax))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "ArchiveMB", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function ExecuteMMSSync(ByVal str_SPName As String, _
                               ByRef l_RetVal As Long) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    ExecuteMMSSync = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal)
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "ExecuteMMSSync", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetArchRBMasterList(ByVal str_SPName As String, _
                                    ByVal str_MMSStockCode As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set GetArchRBMasterList = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                    Array("vi_mms_stock_code", adChar, 30, str_MMSStockCode))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetArchRBMasterList", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetArchRBEmployeeLabour(ByVal str_SPName As String, _
                                        ByVal lng_ArchRBMasterlistID As Long) _
                                                                As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set GetArchRBEmployeeLabour = m_obj_clsDb.RunSPReturnRS(str_SPName, _
            Array("vi_arch_rb_masterlist_id", adInteger, 10, lng_ArchRBMasterlistID))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetArchRBEmployeeLabour", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetArchRBLabourCCTotal(ByVal str_SPName As String, _
                                       ByVal lng_ArchRBMasterlistID As Long) _
                                                                As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set GetArchRBLabourCCTotal = m_obj_clsDb.RunSPReturnRS(str_SPName, _
            Array("vi_arch_rb_masterlist_id", adInteger, 10, lng_ArchRBMasterlistID))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetArchRBLabourCCTotal", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetArchRBMaterialsCCTotal(ByVal str_SPName As String, _
                                          ByVal lng_ArchRBMasterlistID As Long) _
                                                                As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set GetArchRBMaterialsCCTotal = m_obj_clsDb.RunSPReturnRS(str_SPName, _
            Array("vi_arch_rb_masterlist_id", adInteger, 10, lng_ArchRBMasterlistID))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetArchRBMaterialsCCTotal", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetArchSCPartsUsed(ByVal str_SPName As String, _
                                   ByVal lng_ArchRBMasterlistID As Long) _
                                                                As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set GetArchSCPartsUsed = m_obj_clsDb.RunSPReturnRS(str_SPName, _
            Array("vi_arch_rb_masterlist_id", adInteger, 10, lng_ArchRBMasterlistID))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetArchSCPartsUsed", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchMBByBus(ByVal str_SPName As String, _
                         ByVal l_BusID As Long) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchMBByBus = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_bus_id", adInteger, 10, l_BusID))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchMBByBus", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveCESSettings(ByVal str_SPName As String, _
                                    ByVal str_Parameter As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveCESSettings = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_parameter", adChar, 100, str_Parameter))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveCESSettings", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function
Public Function RetrieveAllLabourHours(ByVal str_SPName As String, _
                                    ByVal str_EstimateNumber As String, ByVal str_EstimateType As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAllLabourHours = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_number", adChar, 25, str_EstimateNumber), _
                            Array("vi_type", adChar, 5, str_EstimateType))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAllLabourHours", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function
Public Function UpdateCESSettings(ByVal str_SPName As String, _
                                  ByRef l_RetVal As Long, _
                                  ByVal str_Parameter As String, _
                                  ByVal str_Value As String) As Long
    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    UpdateCESSettings = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                                Array("vi_parameter", adChar, 100, str_Parameter), _
                                Array("vi_value", adChar, 200, str_Value))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateCESSettings", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function


Public Function SearchKitByNumber(ByVal str_SPName As String, _
                                  ByVal str_PartNumber As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchKitByNumber = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                    Array("vi_part_number", adChar, 30, str_PartNumber))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchKitByNumber", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchNSCPByOrigSupplierNum(ByVal str_SPName As String, _
                                            ByVal str_SupplierNumber As String) _
                                                                As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchNSCPByOrigSupplierNum = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                    Array("vi_orig_supplier_num", adChar, 50, str_SupplierNumber))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchNSCPByOrigSupplierNum", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchEngineByName(ByVal str_SPName As String, _
                                   ByVal str_EngineName As String) _
                                                                As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchEngineByName = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                    Array("vi_name", adChar, 25, str_EngineName))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchEngineByName", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchTransmissionByName(ByVal str_SPName As String, _
                                         ByVal str_TransmissionName As String) _
                                                                As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchTransmissionByName = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                    Array("vi_name", adChar, 25, str_TransmissionName))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchTransmissionByName", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchDifferentialByName(ByVal str_SPName As String, _
                                         ByVal str_DifferentialName As String) _
                                                                As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchDifferentialByName = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                    Array("vi_name", adChar, 25, str_DifferentialName))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchDifferentialByName", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchVehTypeByKey(ByVal str_SPName As String, _
                                   ByVal str_Make As String, _
                                   ByVal str_Model As String, _
                                   ByVal str_Year As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchVehTypeByKey = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                    Array("vi_make", adChar, 25, str_Make), _
                    Array("vi_model", adChar, 25, str_Model), _
                    Array("vi_year", adChar, 4, str_Year))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchVehTypeByKey", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetAllNSCP(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set GetAllNSCP = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetAllNSCP", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateNSCP3(ByVal str_SPName As String, _
                            ByRef l_RetVal As Long, _
                            ByVal l_RecordID As Long, _
                            ByVal str_OrigSupplierNum As String, _
                            ByVal str_OrigSupplierName As String, _
                            ByVal str_DetailedDesc As String, _
                            ByVal str_Keyword As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateNSCP3 = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                Array("vi_id", adInteger, 10, l_RecordID), _
                Array("vi_orig_supplier_num", adChar, 50, str_OrigSupplierNum), _
                Array("vi_orig_supplier_name", adChar, 50, str_OrigSupplierName), _
                Array("vi_detailed_desc", adChar, 500, str_DetailedDesc), _
                Array("vi_keyword", adChar, 50, str_Keyword))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateNSCP3", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchNSCPPartBy2Fields(ByVal str_SPName As String, _
                                        ByVal str_SupplierNumber As String, _
                                        ByVal str_SupplierName As String) _
                                                                As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchNSCPPartBy2Fields = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                        Array("vi_orig_supplier_num", adChar, 50, str_SupplierNumber), _
                        Array("vi_orig_supplier_name", adChar, 50, str_SupplierName))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchNSCPPartBy2Fields", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function InsertIntoAuditModifyHistory(ByVal str_SPName As String, _
    ByRef l_RetVal As Long, ByVal str_Action As String, _
    ByVal str_EstimateNumber As String, ByVal str_EstimateType As String, _
    ByVal str_Ref1 As String, ByVal str_Ref2 As String, _
    Optional ByVal str_Ref3 As String = "", Optional ByVal str_Ref4 As String = "", _
    Optional ByVal str_Ref5 As String = "", Optional ByVal str_Ref6 As String = "", _
    Optional ByVal str_Ref7 As String = "", Optional ByVal str_Ref8 As String = "", _
    Optional ByVal str_Ref9 As String = "", Optional ByVal str_Ref10 As String = "", _
    Optional ByVal str_Ref11 As String = "", Optional ByVal str_Ref12 As String = "", _
    Optional ByVal str_Ref13 As String = "", Optional ByVal str_Ref14 As String = "", _
    Optional ByVal str_Ref15 As String = "", Optional ByVal str_Ref16 As String = "", _
    Optional ByVal str_Ref17 As String = "", Optional ByVal str_Ref18 As String = "", _
    Optional ByVal str_Ref19 As String = "", Optional ByVal str_Ref20 As String = "", _
    Optional ByVal str_Ref21 As String = "", Optional ByVal str_Ref22 As String = "", _
    Optional ByVal str_Ref23 As String = "", Optional ByVal str_Ref24 As String = "", _
    Optional ByVal str_Ref25 As String = "", Optional ByVal str_Ref26 As String = "", _
    Optional ByVal str_Ref27 As String = "", Optional ByVal str_Ref28 As String = "", _
    Optional ByVal str_Ref29 As String = "", Optional ByVal str_Ref30 As String = "", _
    Optional ByVal str_Ref31 As String = "", Optional ByVal str_Ref32 As String = "", _
    Optional ByVal str_Ref33 As String = "", Optional ByVal str_Ref34 As String = "", _
    Optional ByVal str_Ref35 As String = "", Optional ByVal str_Ref36 As String = "", _
    Optional ByVal str_Ref37 As String = "", Optional ByVal str_Ref38 As String = "") _
                                                                                As Long
    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    InsertIntoAuditModifyHistory = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
Array("vi_user_name", adChar, 15, g_str_UserName), _
Array("vi_action", adChar, 500, str_Action), _
Array("vi_estimate_number", adChar, 500, str_EstimateNumber), _
Array("vi_estimate_type", adChar, 4, str_EstimateType), _
Array("vi_ref_1", adChar, 500, str_Ref1), Array("vi_ref_2", adChar, 500, str_Ref2), _
Array("vi_ref_3", adChar, 500, str_Ref3), Array("vi_ref_4", adChar, 500, str_Ref4), _
Array("vi_ref_5", adChar, 500, str_Ref5), Array("vi_ref_6", adChar, 500, str_Ref6), _
Array("vi_ref_7", adChar, 500, str_Ref7), Array("vi_ref_8", adChar, 500, str_Ref8), _
Array("vi_ref_9", adChar, 500, str_Ref9), Array("vi_ref_10", adChar, 500, str_Ref10), _
Array("vi_ref_11", adChar, 500, str_Ref11), Array("vi_ref_12", adChar, 500, str_Ref12), _
Array("vi_ref_13", adChar, 500, str_Ref13), Array("vi_ref_14", adChar, 500, str_Ref14), _
Array("vi_ref_15", adChar, 500, str_Ref15), Array("vi_ref_16", adChar, 500, str_Ref16), _
Array("vi_ref_17", adChar, 500, str_Ref17), Array("vi_ref_18", adChar, 500, str_Ref18), _
Array("vi_ref_19", adChar, 500, str_Ref19), Array("vi_ref_20", adChar, 500, str_Ref20), _
Array("vi_ref_21", adChar, 500, str_Ref21), Array("vi_ref_22", adChar, 500, str_Ref22), _
Array("vi_ref_23", adChar, 500, str_Ref23), Array("vi_ref_24", adChar, 500, str_Ref24), _
Array("vi_ref_25", adChar, 500, str_Ref25), Array("vi_ref_26", adChar, 500, str_Ref26), _
Array("vi_ref_27", adChar, 500, str_Ref27), Array("vi_ref_28", adChar, 500, str_Ref28), _
Array("vi_ref_29", adChar, 500, str_Ref29), Array("vi_ref_30", adChar, 500, str_Ref30), _
Array("vi_ref_31", adChar, 500, str_Ref31), Array("vi_ref_32", adChar, 500, str_Ref32), _
Array("vi_ref_33", adChar, 500, str_Ref33), Array("vi_ref_34", adChar, 500, str_Ref34), _
Array("vi_ref_35", adChar, 500, str_Ref35), Array("vi_ref_36", adChar, 500, str_Ref36), _
Array("vi_ref_37", adChar, 500, str_Ref37), Array("vi_ref_38", adChar, 500, str_Ref38))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "InsertIntoAuditModifyHistory", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function FindSupplierNameByNumber(ByVal str_SPName As String, _
                                         ByVal str_SupplierNumber As String) _
                                                                    As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set FindSupplierNameByNumber = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                        Array("vi_orig_supplier_num", adChar, 50, str_SupplierNumber))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "FindSupplierNameByNumber", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function PropagateNSCPChanges(ByVal str_SPName As String, _
                                     ByRef l_RetVal As Long, _
                                     ByVal str_OrigSuppNum As String, _
                                     ByVal str_OrigSuppName As String, _
                                     ByVal cur_Cost As Currency, _
                                     ByVal l_ID As Long) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    PropagateNSCPChanges = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_orig_supp_num", adChar, 50, str_OrigSuppNum), _
                            Array("vi_orig_supp_name", adChar, 50, str_OrigSuppName), _
                            Array("vi_cost", adNumeric, 20, cur_Cost), _
                            Array("vi_id", adInteger, 10, l_ID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "PropagateNSCPChanges", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function PropagateRBPChanges(ByVal str_SPName As String, _
                                     ByRef l_RetVal As Long, _
                                     ByVal cur_Cost As Currency, _
                                     ByVal str_RBNumber As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    PropagateRBPChanges = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_cost", adNumeric, 20, cur_Cost), _
                            Array("vi_reb_number", adChar, 50, str_RBNumber))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "PropagateRBPChanges", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetNSCPartsUsedBySupplier(ByVal str_SPName As String, _
                                         ByVal str_SupplierNumber As String, _
                                         ByVal str_SupplierName As String) _
                                                                    As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set GetNSCPartsUsedBySupplier = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                        Array("vi_orig_supplier_num", adChar, 50, str_SupplierNumber), _
                        Array("vi_orig_supplier_name", adChar, 50, str_SupplierName))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetNSCPartsUsedBySupplier", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveRBPUsedDistinct(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveRBPUsedDistinct = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveRBPUsedDistinct", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveRBPUsedLinks(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveRBPUsedLinks = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveRBPUsedLinks", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveRBPToPropagateRB(ByVal str_SPName As String, _
                                         ByVal str_LinkCode As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveRBPToPropagateRB = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_idnum", adChar, 30, str_LinkCode))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveRBPToPropagateRB", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveRBPToPropagateNSC(ByVal str_SPName As String, _
                                         ByVal l_ID As Long) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveRBPToPropagateNSC = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                                Array("vi_idnum", adInteger, 10, l_ID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveRBPToPropagateNSC", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveRBPToPropagateSAL(ByVal str_SPName As String, _
                                          ByVal l_WageGroup As Long) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveRBPToPropagateSAL = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                                Array("vi_idnum", adInteger, 10, l_WageGroup))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveRBPToPropagateSAL", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveRBPToPropagateLAB(ByVal str_SPName As String, _
                                          ByVal str_LabourDefn As String) _
                                                                       As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveRBPToPropagateLAB = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                                Array("vi_idnum", adChar, 50, str_LabourDefn))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveRBPToPropagateLAB", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveESTToPropagateRB(ByVal str_SPName As String, _
                                         ByVal str_LinkCode As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveESTToPropagateRB = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_idnum", adChar, 30, str_LinkCode))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveESTToPropagateRB", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveRBPTotalCost(ByVal str_SPName As String, _
                                     ByVal str_RBNumber As String, _
                                     ByVal str_TypeID As String) As Currency
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    RetrieveRBPTotalCost = m_obj_clsDb.RunFNReturnNumber(str_SPName, _
                                    Array("vi_rbnum", adChar, 30, str_RBNumber), _
                                    Array("vi_link_type", adChar, 5, str_TypeID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveRBPTotalCost", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveRBPTotalCost2(ByVal str_SPName As String, _
                                     ByVal str_RBNumber As String, _
                                     ByVal str_TypeID As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    
    Set RetrieveRBPTotalCost2 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                                    Array("vi_rbnum", adChar, 30, str_RBNumber), _
                                    Array("vi_link_type", adChar, 5, str_TypeID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveRBPTotalCost2", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function


Public Function RetrieveKITTotalCost(ByVal str_SPName As String, _
                                     ByRef l_RetVal As Long, _
                                     ByVal str_PartNumber As String) As Currency
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    RetrieveKITTotalCost = m_obj_clsDb.RunFNReturnNumber(str_SPName, l_RetVal, _
                                    Array("vi_idnum", adChar, 25, str_PartNumber))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveKITTotalCost", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveKITToPropagateNSC(ByVal str_SPName As String, _
                                         ByVal l_ID As Long) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveKITToPropagateNSC = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                                Array("vi_idnum", adInteger, 10, l_ID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveKITToPropagateNSC", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveBusFromKitsUsed(ByVal str_SPName As String, _
                                        ByVal str_KitNumber As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveBusFromKitsUsed = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                                Array("vi_kit_number", adChar, 30, str_KitNumber))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveBusFromKitsUsed", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function CopyVehicleEstimate(ByVal str_SPName As String, _
                                     ByRef l_RetVal As Long, _
                                     ByVal l_ListID As Long, _
                                     ByVal str_BusSeries As String, _
                                     ByVal str_Description As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    CopyVehicleEstimate = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_list_id", adInteger, 10, l_ListID), _
                            Array("vi_bus_series", adChar, 75, str_BusSeries), _
                            Array("vi_description", adChar, 200, str_Description), _
                            Array("vi_entered_by", adChar, 25, g_str_UserName))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "CopyVehicleEstimate", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function CopyMBEstimate(ByVal str_SPName As String, _
                                     ByRef l_RetVal As Long, _
                                     ByVal str_MBNumber As String, _
                                     ByVal str_NewMBNumber As String, _
                                     ByVal str_Keyword As String, _
                                     ByVal str_RebuildNumber As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    CopyMBEstimate = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_mb_number", adChar, 20, str_MBNumber), _
                            Array("vi_new_mb_number", adChar, 20, str_NewMBNumber), _
                            Array("vi_keyword", adChar, 75, str_Keyword), _
                            Array("vi_rebuild_number", adChar, 20, str_RebuildNumber), _
                            Array("vi_entered_by", adChar, 25, g_str_UserName))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "CopyMBEstimate", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function CopyRBEstimate(ByVal str_SPName As String, _
                                     ByRef l_RetVal As Long, _
                                     ByVal str_RBNumber As String, _
                                     ByVal str_NewRBNumber As String, _
                                     ByVal str_Keyword As String, _
                                     ByVal str_MMSStockCode As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    CopyRBEstimate = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_rb_number", adChar, 20, str_RBNumber), _
                            Array("vi_new_rb_number", adChar, 20, str_NewRBNumber), _
                            Array("vi_keyword", adChar, 75, str_Keyword), _
                            Array("vi_description", adChar, 20, str_MMSStockCode), _
                            Array("vi_entered_by", adChar, 25, g_str_UserName))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "CopyRBEstimate", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAudit1(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAudit1 = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAudit1", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAudit2(ByVal str_SPName As String, _
                                ByVal str_DateFrom As String, _
                                ByVal str_DateTo As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAudit2 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_date_from", adChar, 20, str_DateFrom), _
                            Array("vi_date_to", adChar, 20, str_DateTo))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAudit2", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAudit3(ByVal str_SPName As String, _
                               ByVal str_EstimateType As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAudit3 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_estimate_type", adChar, 4, str_EstimateType))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAudit3", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAudit4(ByVal str_SPName As String, _
                                ByVal str_UserName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAudit4 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_user_name", adChar, 15, str_UserName))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAudit4", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAudit5(ByVal str_SPName As String, _
                                ByVal str_UserName As String, _
                                ByVal str_DateFrom As String, _
                                ByVal str_DateTo As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAudit5 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_user_name", adChar, 15, str_UserName), _
                            Array("vi_date_from", adChar, 20, str_DateFrom), _
                            Array("vi_date_to", adChar, 20, str_DateTo))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAudit5", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAudit6(ByVal str_SPName As String, _
                               ByVal str_EstimateNumber As String, _
                               ByVal str_EstimateType As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAudit6 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                        Array("vi_estimate_number", adChar, 500, str_EstimateNumber), _
                        Array("vi_estimate_type", adChar, 4, str_EstimateType))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAudit6", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAudit7(ByVal str_SPName As String, _
                               ByVal str_EstimateNumber As String, _
                               ByVal str_EstimateType As String, _
                               ByVal str_DateFrom As String, _
                               ByVal str_DateTo As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAudit7 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                        Array("vi_estimate_number", adChar, 500, str_EstimateNumber), _
                        Array("vi_estimate_type", adChar, 4, str_EstimateType), _
                        Array("vi_date_from", adChar, 20, str_DateFrom), _
                        Array("vi_date_to", adChar, 20, str_DateTo))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAudit7", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAudit8(ByVal str_SPName As String, _
                               ByVal str_EstimateNumber As String, _
                               ByVal str_EstimateType As String, _
                               ByVal str_UserName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAudit8 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                        Array("vi_estimate_number", adChar, 500, str_EstimateNumber), _
                        Array("vi_estimate_type", adChar, 4, str_EstimateType), _
                        Array("vi_user_name", adChar, 15, str_UserName))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAudit8", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAudit9(ByVal str_SPName As String, _
                               ByVal str_EstimateNumber As String, _
                               ByVal str_EstimateType As String, _
                               ByVal str_UserName As String, _
                               ByVal str_DateFrom As String, _
                               ByVal str_DateTo As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAudit9 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                        Array("vi_estimate_number", adChar, 500, str_EstimateNumber), _
                        Array("vi_estimate_type", adChar, 4, str_EstimateType), _
                        Array("vi_user_name", adChar, 15, str_UserName), _
                        Array("vi_date_from", adChar, 20, str_DateFrom), _
                        Array("vi_date_to", adChar, 20, str_DateTo))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAudit9", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAudit10(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAudit10 = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAudit10", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAudit11(ByVal str_SPName As String, _
                                ByVal str_DateFrom As String, _
                                ByVal str_DateTo As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAudit11 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_date_from", adChar, 20, str_DateFrom), _
                            Array("vi_date_to", adChar, 20, str_DateTo))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAudit11", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAudit12(ByVal str_SPName As String, _
                                ByVal str_UserName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAudit12 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_user_name", adChar, 15, str_UserName))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAudit12", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAudit13(ByVal str_SPName As String, _
                                ByVal str_UserName As String, _
                                ByVal str_DateFrom As String, _
                                ByVal str_DateTo As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAudit13 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_user_name", adChar, 15, str_UserName), _
                            Array("vi_date_from", adChar, 20, str_DateFrom), _
                            Array("vi_date_to", adChar, 20, str_DateTo))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAudit13", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAudit14(ByVal str_SPName As String, _
                                ByVal str_EstimateType As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAudit14 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_estimate_type", adChar, 4, str_EstimateType))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAudit14", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAudit15(ByVal str_SPName As String, _
                                ByVal str_EstimateType As String, _
                                ByVal str_DateFrom As String, _
                                ByVal str_DateTo As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAudit15 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_estimate_type", adChar, 4, str_EstimateType), _
                            Array("vi_date_from", adChar, 20, str_DateFrom), _
                            Array("vi_date_to", adChar, 20, str_DateTo))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAudit15", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAudit16(ByVal str_SPName As String, _
                                ByVal str_EstimateType As String, _
                                ByVal str_UserName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAudit16 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_estimate_type", adChar, 4, str_EstimateType), _
                            Array("vi_user_name", adChar, 15, str_UserName))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAudit16", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAudit17(ByVal str_SPName As String, _
                                ByVal str_EstimateType As String, _
                                ByVal str_UserName As String, _
                                ByVal str_DateFrom As String, _
                                ByVal str_DateTo As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAudit17 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_estimate_type", adChar, 4, str_EstimateType), _
                            Array("vi_user_name", adChar, 15, str_UserName), _
                            Array("vi_date_from", adChar, 20, str_DateFrom), _
                            Array("vi_date_to", adChar, 20, str_DateTo))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAudit17", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteAllLabourSummary(ByVal str_SPName As String, _
                                       ByRef l_RetVal As Long) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteAllLabourSummary = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal)
    
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteAllLabourSummary", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteAllMaterialSummary(ByVal str_SPName As String, _
                                       ByRef l_RetVal As Long) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteAllMaterialSummary = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal)
    
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteAllMaterialSummary", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function


Public Function InsertAllLabourSummary(ByVal str_SPName As String, _
                                       ByRef l_RetVal As Long, _
                                       ByVal str_LabourType As String, _
                                       ByVal str_CostCentre As String, _
                                       ByVal str_Task As String, _
                                       ByVal str_Usage As String, _
                                       ByVal str_Time As String, _
                                       ByVal str_WrenchTime As String, _
                                       ByVal str_RatePerHour As String, _
                                       ByVal str_TotalCost As String, _
                                       ByVal str_ExtendedTime As String, _
                                       ByVal str_EstimateType As String, _
                                       ByVal str_EstimateNumber As String) As Long
    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    InsertAllLabourSummary = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                    Array("vi_labour_type", adChar, 50, str_LabourType), _
                    Array("vi_cost_centre", adChar, 4, str_CostCentre), _
                    Array("vi_task", adChar, 200, str_Task), _
                    Array("vi_usage", adNumeric, 20, str_Usage), _
                    Array("vi_time", adNumeric, 20, str_Time), _
                    Array("vi_wrench_time", adChar, 8, str_WrenchTime), _
                    Array("vi_rate_per_hour", adNumeric, 20, str_RatePerHour), _
                    Array("vi_total_cost", adNumeric, 20, str_TotalCost), _
                    Array("vi_extended_time", adChar, 8, str_ExtendedTime), _
                    Array("vi_estimate_type", adChar, 3, str_EstimateType), _
                    Array("vi_estimate_number", adChar, 25, str_EstimateNumber))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "InsertAllLabourSummary", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function InsertAllMaterialSummary(ByVal str_SPName As String, _
                                       ByRef l_RetVal As Long, _
                                       ByVal str_CostCentre As String, _
                                       ByVal str_TotalCost As String, _
                                       ByVal str_TaxableCost As String, _
                                       ByVal str_RB_Reference As String) As Long
    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    InsertAllMaterialSummary = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                    Array("vi_cost_centre", adChar, 5, str_CostCentre), _
                    Array("vi_total_cost", adNumeric, 25, str_TotalCost), _
                    Array("vi_taxable_cost", adNumeric, 25, str_TaxableCost), _
                    Array("vi_rb_reference", adChar, 25, str_RB_Reference))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "InsertAllMaterialSummary", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAllLabourSummary(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAllLabourSummary = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAllLabourSummary", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAllMaterialSummary(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAllMaterialSummary = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAllMaterialSummary", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveSCPUsedROWID(ByVal str_SPName As String, _
                                ByVal str_RowID As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveSCPUsedROWID = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_str_ROWID", adChar, 50, str_RowID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveSCPUsedROWID", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveNSCPUsedROWID(ByVal str_SPName As String, _
                                ByVal str_RowID As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveNSCPUsedROWID = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_str_ROWID", adChar, 50, str_RowID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveNSCPUsedROWID", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function FindBusDescription(ByVal str_SPName As String, _
                                   ByVal str_BusDescription As String) As ADODB.Recordset
    On Error GoTo Error_Handler
          
    Set m_obj_clsDb = New clsDB
    Set FindBusDescription = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                        Array("vi_bus_description", adChar, 500, str_BusDescription))
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "FindBusDescription", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateBusDescription(ByVal str_SPName As String, _
                                     ByRef l_RetVal As Long, _
                                     ByVal str_BusDescription As String, _
                                     ByVal str_NewBusDescription As String, _
                                     ByVal m_l_BusDescriptionID As Long) As Long
    On Error GoTo Error_Handler
          
    Set m_obj_clsDb = New clsDB
    UpdateBusDescription = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
            Array("vi_list_id", adInteger, 10, m_l_BusDescriptionID), _
            Array("vi_bus_description", adChar, 500, str_BusDescription), _
            Array("vi_new_bus_description", adChar, 500, str_NewBusDescription))

    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateBusDescription", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetKitParts(ByVal str_SPName As String, _
                            ByVal str_LinkCode As String, _
                            ByVal str_LinkType As String, _
                            ByVal str_RebuiltPartChoice As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set GetKitParts = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                        Array("vi_link_code", adChar, 30, str_LinkCode), _
                        Array("vi_link_type", adChar, 3, str_LinkType), _
                        Array("vi_rebuilt_part_choice", adChar, 1, str_RebuiltPartChoice))
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetKitParts", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetSubKits(ByVal str_SPName As String, _
                            ByVal str_KitPartNumber As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set GetSubKits = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                          Array("vi_kit_part_number", adChar, 30, str_KitPartNumber))
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetSubKits", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function InsertSubKits(ByVal str_SPName As String, _
                              ByRef l_RetVal As Long, _
                              ByVal str_KitPartNumber As String, _
                              ByVal str_PartType As String, _
                              ByVal str_SupplierNumber As String, _
                              ByVal str_SupplierName As String, _
                              ByVal str_StockCode As String, _
                              ByVal str_QTY As String, _
                              ByVal str_SubKitLetter As String, _
                              ByVal str_Description As String, _
                              ByVal l_Sequence As Long) As Long
    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    InsertSubKits = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                    Array("vi_kit_part_number", adChar, 30, str_KitPartNumber), _
                    Array("vi_part_type", adChar, 3, str_PartType), _
                    Array("vi_supplier_number", adChar, 50, str_SupplierNumber), _
                    Array("vi_supplier_name", adChar, 50, str_SupplierName), _
                    Array("vi_stock_code", adChar, 30, str_StockCode), _
                    Array("vi_qty", adChar, 10, str_QTY), _
                    Array("vi_sub_kit_letter", adChar, 5, str_SubKitLetter), _
                    Array("vi_description", adChar, 500, str_Description), _
                    Array("vi_sequence", adInteger, 10, l_Sequence))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "InsertSubKits", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteSubKits(ByVal str_SPName As String, _
                              ByRef l_RetVal As Long, _
                              ByVal str_KitPartNumber As String) As Long
                              
    On Error GoTo Error_Handler
          
    Set m_obj_clsDb = New clsDB
    DeleteSubKits = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                             Array("vi_kit_part_number", adChar, 30, str_KitPartNumber))
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteSubKits", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateSubKits(ByVal str_SPName As String, _
                              ByRef l_RetVal As Long, _
                              ByVal str_KitPartNumber As String, _
                              ByVal str_SupplierNumber As String, _
                              ByVal str_SupplierName As String, _
                              ByVal str_StockCode As String, _
                              ByVal str_QTY As String, _
                              ByVal str_Description As String) As Long
    On Error GoTo Error_Handler
          
    Set m_obj_clsDb = New clsDB
    UpdateSubKits = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                        Array("vi_kit_part_number", adChar, 30, str_KitPartNumber), _
                        Array("vi_supplier_number", adChar, 50, str_SupplierNumber), _
                        Array("vi_supplier_name", adChar, 50, str_SupplierName), _
                        Array("vi_stock_code", adChar, 30, str_StockCode), _
                        Array("vi_qty", adChar, 10, str_QTY), _
                        Array("vi_description", adChar, 500, str_Description))
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateSubKits", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateSubKits1(ByVal str_SPName As String, _
                               ByRef l_RetVal As Long, _
                               ByVal str_SupplierNumber As String, _
                               ByVal str_SupplierName As String, _
                               ByVal str_Description As String) As Long
    On Error GoTo Error_Handler
          
    Set m_obj_clsDb = New clsDB
    UpdateSubKits1 = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                        Array("vi_supplier_number", adChar, 50, str_SupplierNumber), _
                        Array("vi_supplier_name", adChar, 50, str_SupplierName), _
                        Array("vi_description", adChar, 500, str_Description))
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateSubKits1", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteSubKits1(ByVal str_SPName As String, _
                               ByRef l_RetVal As Long, _
                               ByVal str_KitPartNumber As String, _
                               ByVal str_SupplierNumber As String, _
                               ByVal str_SupplierName As String, _
                               ByVal str_StockCode As String) As Long
    On Error GoTo Error_Handler
          
    Set m_obj_clsDb = New clsDB
    DeleteSubKits1 = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                        Array("vi_kit_part_number", adChar, 30, str_KitPartNumber), _
                        Array("vi_supplier_number", adChar, 50, str_SupplierNumber), _
                        Array("vi_supplier_name", adChar, 50, str_SupplierName), _
                        Array("vi_stock_code", adChar, 30, str_StockCode))
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteSubKits1", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetAllFromSubKits(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
          
    Set m_obj_clsDb = New clsDB
    Set GetAllFromSubKits = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetAllFromSubKits", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteAllSubKits(ByVal str_SPName As String, _
                                 ByRef l_RetVal As Long) As Long
    On Error GoTo Error_Handler
          
    Set m_obj_clsDb = New clsDB
    DeleteAllSubKits = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal)
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteAllSubKits", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateOverheadFringe(ByVal str_SPName As String, _
                                     ByRef l_RetVal As Long, _
                                     ByVal str_UseOverheadFringe As String, _
                                     ByVal str_UserName As String) As Long
    On Error GoTo Error_Handler
          
    Set m_obj_clsDb = New clsDB
    UpdateOverheadFringe = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                    Array("vi_use_overhead_fringe", adChar, 1, str_UseOverheadFringe), _
                    Array("vi_username", adChar, 15, str_UserName))
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateOverheadFringe", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteCleanNSCP1(ByVal str_SPName As String, _
                                 ByRef l_RetVal As Long) As Long
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteCleanNSCP1 = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal)
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteCleanNSCP1", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteCleanNSCP2(ByVal str_SPName As String, _
                                 ByRef l_RetVal As Long) As Long
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    On Error GoTo Error_Handler
          
    Set m_obj_clsDb = New clsDB
    DeleteCleanNSCP2 = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal)
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteCleanNSCP2", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetNSCPClean1(ByVal str_SPName As String) As ADODB.Recordset
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    Dim m_obj_clsDb As clsDB

    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set GetNSCPClean1 = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetNSCPClean1", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteCleanNSCP3(ByVal str_SPName As String, _
                                 ByRef l_RetVal As Long) As Long
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    On Error GoTo Error_Handler
          
    Set m_obj_clsDb = New clsDB
    DeleteCleanNSCP3 = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal)
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteCleanNSCP3", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetNSCPClean2(ByVal str_SPName As String, _
                              ByVal str_Passed As String) As ADODB.Recordset
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    Dim m_obj_clsDb As clsDB

    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set GetNSCPClean2 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                          Array("vi_orig_supp_num", adChar, 50, str_Passed))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetNSCPClean2", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteCleanNSCP4(ByVal str_SPName As String, _
                                 ByRef l_RetVal As Long, _
                                 ByVal str_Passed As String) As Long
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    On Error GoTo Error_Handler
          
    Set m_obj_clsDb = New clsDB
    DeleteCleanNSCP4 = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_orig_supplier_num", adChar, 50, str_Passed))
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteCleanNSCP4", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetNSCPClean3(ByVal str_SPName As String) As ADODB.Recordset
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    Dim m_obj_clsDb As clsDB

    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set GetNSCPClean3 = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetNSCPClean3", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteCleanNSCP5(ByVal str_SPName As String, _
                                 ByRef l_RetVal As Long) As Long
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    On Error GoTo Error_Handler
          
    Set m_obj_clsDb = New clsDB
    DeleteCleanNSCP5 = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal)
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteCleanNSCP5", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetNSCPClean4(ByVal str_SPName As String, _
                              ByVal str_Passed As String) As ADODB.Recordset
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    Dim m_obj_clsDb As clsDB

    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set GetNSCPClean4 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                          Array("vi_orig_supp_name", adChar, 50, str_Passed))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetNSCPClean4", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteCleanNSCP6(ByVal str_SPName As String, _
                                 ByRef l_RetVal As Long, _
                                 ByVal str_Passed As String) As Long
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    On Error GoTo Error_Handler
          
    Set m_obj_clsDb = New clsDB
    DeleteCleanNSCP6 = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_orig_supplier_num", adChar, 50, str_Passed))
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteCleanNSCP6", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetNSCPClean5(ByVal str_SPName As String) As ADODB.Recordset
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    Dim m_obj_clsDb As clsDB

    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set GetNSCPClean5 = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetNSCPClean5", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteCleanNSCP7(ByVal str_SPName As String, _
                                 ByRef l_RetVal As Long) As Long
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    On Error GoTo Error_Handler
          
    Set m_obj_clsDb = New clsDB
    DeleteCleanNSCP7 = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal)
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteCleanNSCP7", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetNSCPClean6(ByVal str_SPName As String, _
                              ByVal l_PartID As Long) As ADODB.Recordset
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set GetNSCPClean6 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                        Array("vi_id", adInteger, 10, l_PartID))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetNSCPClean6", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateCleanNSCP1(ByVal str_SPName As String, _
                                 ByRef l_RetVal As Long, _
                                 l_PartID As Long) As Long
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    On Error GoTo Error_Handler
          
    Set m_obj_clsDb = New clsDB
    UpdateCleanNSCP1 = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                        Array("vi_id", adInteger, 10, l_PartID))
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateCleanNSCP1", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetNSCPClean7(ByVal str_SPName As String) As ADODB.Recordset
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    Dim m_obj_clsDb As clsDB

    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set GetNSCPClean7 = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetNSCPClean7", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetNSCPClean8(ByVal str_SPName As String, _
                              ByVal str_OrigSupplierNum As String, _
                              ByVal str_Orig_SupplierName As String) As ADODB.Recordset
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    Dim m_obj_clsDb As clsDB

    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set GetNSCPClean8 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                          Array("vi_orig_supplier_num", adChar, 50, str_OrigSupplierNum), _
                          Array("vi_orig_supplier_name", adChar, 50, str_Orig_SupplierName))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetNSCPClean8", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateCleanNSCP2(ByVal str_SPName As String, _
                                 ByRef l_RetVal As Long) As Long
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    On Error GoTo Error_Handler
          
    Set m_obj_clsDb = New clsDB
    UpdateCleanNSCP2 = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal)
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateCleanNSCP2", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetNSCPClean9(ByVal str_SPName As String) As ADODB.Recordset
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    Dim m_obj_clsDb As clsDB

    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set GetNSCPClean9 = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetNSCPClean9", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetNSCPClean10(ByVal str_SPName As String) As ADODB.Recordset
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    Dim m_obj_clsDb As clsDB

    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set GetNSCPClean10 = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetNSCPClean10", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetNSCPClean11(ByVal str_SPName As String) As ADODB.Recordset
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    Dim m_obj_clsDb As clsDB

    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set GetNSCPClean11 = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetNSCPClean11", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetNSCPClean12(ByVal str_SPName As String) As ADODB.Recordset
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    Dim m_obj_clsDb As clsDB

    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set GetNSCPClean12 = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetNSCPClean12", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetNSCPClean13(ByVal str_SPName As String) As ADODB.Recordset
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    Dim m_obj_clsDb As clsDB

    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set GetNSCPClean13 = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetNSCPClean13", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetNSCPClean14(ByVal str_SPName As String, _
                              ByVal str_OrigSupplierNum As String, _
                              ByVal str_Orig_SupplierName As String) As ADODB.Recordset
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    Dim m_obj_clsDb As clsDB

    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set GetNSCPClean14 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                          Array("vi_orig_supp_num", adChar, 50, str_OrigSupplierNum), _
                          Array("vi_orig_supplier_name", adChar, 50, str_Orig_SupplierName))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetNSCPClean14", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetNSCPClean15(ByVal str_SPName As String, _
                              ByVal str_OrigSupplierNum As String, _
                              ByVal str_Orig_SupplierName As String) As ADODB.Recordset
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    Dim m_obj_clsDb As clsDB

    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set GetNSCPClean15 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                          Array("vi_orig_supplier_num", adChar, 50, str_OrigSupplierNum), _
                          Array("vi_orig_supplier_name", adChar, 50, str_Orig_SupplierName))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetNSCPClean15", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchRBPartBusSeries(ByVal str_SPName As String, _
                             ByVal str_RebuiltNumber As String, _
                             ByVal str_Description As String, _
                             ByVal str_Keyword As String, _
                             ByVal l_BusSeriesID As Long, _
                             ByVal l_SearchOption As Long) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchRBPartBusSeries = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                        Array("vi_rebuilt_num", adChar, 30, str_RebuiltNumber), _
                        Array("vi_description", adChar, 250, str_Description), _
                        Array("vi_keyword", adChar, 250, str_Keyword), _
                        Array("vi_bus_series_id", adInteger, 10, l_BusSeriesID), _
                        Array("vi_search_option", adInteger, 10, l_SearchOption))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchRBPartBusSeries", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetCostVarRS(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set GetCostVarRS = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetCostVarRS", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteMBEstimate(ByVal str_SPName As String, _
                         ByRef l_RetVal As Long, _
                         ByVal str_MBNumber As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteMBEstimate = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_mb_number", adChar, 25, str_MBNumber))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteMBEstimate", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteRBEstimate(ByVal str_SPName As String, _
                         ByRef l_RetVal As Long, _
                         ByRef str_RebuiltNumber As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteRBEstimate = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                        Array("vi_rb_num", adChar, 30, str_RebuiltNumber))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteRBEstimate", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteVehicleEstimateByID(ByVal str_SPName As String, _
                                      ByRef l_RetVal As Long, _
                                      ByRef str_LinkCode As String, _
                                      ByVal l_VehicleListID As Long) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteVehicleEstimateByID = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_link_code", adChar, 25, str_LinkCode), _
                            Array("vi_vehicle_list_id", adInteger, 10, l_VehicleListID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteVehicleEstimateByID", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function


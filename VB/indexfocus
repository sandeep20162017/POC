Here’s how you can update your grid definition to handle this:

➡️ Modify the Grid Configuration
Add an edit event handler in your grid configuration:

csharp
Copy
Edit
.Editable(editable => editable.Mode(GridEditMode.InCell))
.Events(events =>
{
    events.Edit("onEdit"); // Handle cell editing event
})
➡️ JavaScript Logic to Handle Focus Shift
Now, add the following onEdit function to manage the cell focus:

javascript
Copy
Edit
function onEdit(e) {
    var grid = $("#userGrid").data("kendoGrid");
    var fieldName = e.container.find("input").attr("name");

    if (fieldName === "UserADId") {
        // When UserADId editing is complete, shift focus to UserName
        e.container.find("input").on("blur", function () {
            setTimeout(function () {
                var nextCell = e.container.next(); // Get next cell
                if (nextCell.length) {
                    grid.editCell(nextCell);
                }
            }, 100); // Small delay to allow DOM update
        });
    }

    if (fieldName === "UserName") {
        // When user types in UserName, shift focus to RoleName dropdown
        e.container.find("input").on("input", function () {
            setTimeout(function () {
                var nextCell = e.container.next(); // Get the next cell
                if (nextCell.length) {
                    grid.editCell(nextCell); // Open the cell for editing
                    var dropdown = nextCell.find("input").data("kendoDropDownList");
                    if (dropdown) {
                        dropdown.open(); // Open the dropdown
                    }
                }
            }, 100);
        });
    }
}

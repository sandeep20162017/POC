you are Visual basic 6.0 expert. R. Remember the following code. 
I will ask question once you have remembered the following code  My quesions will be based on understanging the logic, stored procs used,emabaded usiess rulws etc.

frmRebuiltPrtsMain,frm is the entry point.

modBHelper.bas :
Option Explicit

Private m_str_Msg As String
Private m_obj_clsDb As clsDB

'This function will add a new row to the ERROR_LOG table:

' - g_str_UserName   into "USER_NAME" column
' - str_ModuleName   into "MODULE_NAME" column
' - str_FunctionName into "FUNCTION_NAME" column
' - l_LineNumber     into "LINE_NUM" column
' - l_ErrNum         into "ERR_NUM" column
' - str_ErrDesc      into "ERROR DESC" column
' - Now()            into "DATE_TIME" column
' - field "LOG NUMBER" will be incremented automatically.

Public Sub LogErrorToDB(ByVal str_ModuleName As String, _
                        ByVal str_FunctionName As String, _
                        ByVal l_LineNumber As Long)
    Dim l_RetVal As Long
    Dim l_ErrNum As Long
    Dim str_ErrDesc As String
    
    'Get error number and error description here!!!
    l_ErrNum = Err.Number
    str_ErrDesc = Err.Description
    
    
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Call m_obj_clsDb.RunFNReturnLong("CES_UPDATE.ADD_ERROR_LOG", _
                        l_RetVal, _
                        Array("vi_user_name", adChar, 25, g_str_UserName), _
                        Array("vi_date_time", adDate, 10, Now()), _
                        Array("vi_module_name", adChar, 100, str_ModuleName), _
                        Array("vi_function_name", adChar, 100, str_FunctionName), _
                        Array("vi_line_num", adInteger, 10, l_LineNumber), _
                        Array("vi_error_desc", adChar, 2000, str_ErrDesc), _
                        Array("vi_err_num", adInteger, 10, l_ErrNum))
    Set m_obj_clsDb = Nothing
    'Clean an Err object.
    Err.Clear
    m_str_Msg = "Application error. Take a screen-shot and contact Administrator. "
    m_str_Msg = m_str_Msg + "Date = " + CStr(Now()) + ". User Name = " + g_str_UserName
    MsgBox m_str_Msg
    
    Exit Sub
Error_Handler:
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
    m_str_Msg = "Logging error to the database failed. Please report this message to "
    m_str_Msg = m_str_Msg + "Administrator. Now program will be terminated."
    MsgBox m_str_Msg, vbCritical + vbOKOnly
    End
End Sub

Public Function AddEngines(ByVal str_SPName As String, _
                           ByRef l_RetVal As Long, _
                           ByVal str_Engine As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    AddEngines = m_obj_clsDb.RunFNReturnLong(str_SPName, _
                                              l_RetVal, _
                                              Array("@MAKE", adChar, 25, str_Engine))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "AddEngines", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function AddTransmissions(ByVal str_SPName As String, _
                                 ByRef l_RetVal As Long, _
                                 ByVal str_Transmission As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    AddTransmissions = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                                           Array("@MAKE", adChar, 25, str_Transmission))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "AddTransmissions", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function AddDifferentials(ByVal str_SPName As String, _
                                 ByRef l_RetVal As Long, _
                                 ByVal str_Differential As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    AddDifferentials = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                                           Array("@MAKE", adChar, 25, str_Differential))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "AddDifferentials", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateEngines(ByVal str_SPName As String, _
                              ByRef l_RetVal As Long, _
                              ByVal str_Engine As String, _
                              ByVal str_PartID As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateEngines = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                                        Array("@NAME", adChar, 25, str_Engine), _
                                        Array("@PARTID", adChar, 50, str_PartID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateEngines", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateTransmissions(ByVal str_SPName As String, _
                                    ByRef l_RetVal As Long, _
                                    ByVal str_Transmission As String, _
                                    ByVal str_PartID As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateTransmissions = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                                        Array("@NAME", adChar, 25, str_Transmission), _
                                        Array("@PARTID", adChar, 50, str_PartID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateTransmissions", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateDiffentials(ByVal str_SPName As String, _
                                  ByRef l_RetVal As Long, _
                                  ByVal str_Differential As String, _
                                  ByVal str_PartID As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateDiffentials = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                                        Array("@NAME", adChar, 25, str_Differential), _
                                        Array("@PARTID", adChar, 50, str_PartID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateDiffentials", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteMBLabour(ByVal str_SPName As String, _
                               ByRef l_RetVal As Long, _
                               ByVal str_PartID As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteMBLabour = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                                        Array("@IDPART", adChar, 50, str_PartID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteMBLabour", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteNSCP(ByVal str_SPName As String, _
                           ByRef l_RetVal As Long, _
                           ByVal str_PartID As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteNSCP = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                                        Array("@IDPART", adChar, 50, str_PartID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteNSCP", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function AddRBEstimate(ByVal str_SPName As String, _
                              ByRef l_RetVal As Long, _
                              ByVal str_MOD As String, _
                              ByVal str_JobNum As String, _
                              ByVal str_CoreCost As String, _
                              ByVal str_StockCode As String, _
                              ByVal str_CoreCode As String, _
                              ByVal str_Keyword As String, _
                              ByVal str_Desc As String, _
                              ByVal str_NewCode As String, _
                              ByVal str_SOPNumber As String, _
                              ByVal str_BuyCost As String, _
                              ByVal str_RemanufacturedCost As String, _
                              ByVal str_ExternalCost As String, _
                              ByVal int_optActive As Integer) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    AddRBEstimate = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@MOD", adChar, 50, str_MOD), _
                            Array("@JOBNUM", adChar, 25, str_JobNum), _
                            Array("@CORECH", adChar, 25, str_CoreCost), _
                            Array("@REB", adChar, 25, str_StockCode), _
                            Array("@CORE", adChar, 25, str_CoreCode), _
                            Array("@KEY", adChar, 250, str_Keyword), _
                            Array("@DETDESC", adChar, 250, str_Desc), _
                            Array("@MMS", adChar, 25, str_NewCode), _
                            Array("@SOPNumber", adChar, 25, str_SOPNumber), _
                            Array("@BuyCost", adChar, 25, str_BuyCost), _
                            Array("@RemanCost", adChar, 25, str_RemanufacturedCost), _
                            Array("@ExternalCost", adChar, 25, str_ExternalCost), _
                            Array("@ExternalCost", adInteger, 2, int_optActive))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "AddRBEstimate", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateRBEstimate(ByVal str_SPName As String, _
                                 ByRef l_RetVal As Long, _
                                 ByVal str_MOD As String, _
                                 ByVal str_JobNum As String, _
                                 ByVal str_CoreChange As String, _
                                 ByVal str_StockCode As String, _
                                 ByVal str_CoreCode As String, _
                                 ByVal str_Keyword As String, _
                                 ByVal str_Desc As String, _
                                 ByVal str_NewCode As String, _
                                 ByVal str_SOPNumber As String, _
                                 ByVal str_BuyCost As String, _
                                 ByVal str_RemanufacturedCost As String, _
                                 ByVal str_ExternalCost As String, _
                                 ByVal int_active As Integer) As Long
    On Error GoTo Error_Handler
 
    Set m_obj_clsDb = New clsDB
    UpdateRBEstimate = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@MOD", adChar, 50, str_MOD), _
                            Array("@JOBNUM", adChar, 25, str_JobNum), _
                            Array("@CORECH", adChar, 25, str_CoreChange), _
                            Array("@REB", adChar, 30, str_StockCode), _
                            Array("@CORE", adChar, 30, str_CoreCode), _
                            Array("@KEY", adChar, 250, str_Keyword), _
                            Array("@DETDESC", adChar, 250, str_Desc), _
                            Array("@MMS", adChar, 30, str_NewCode), _
                            Array("@SOPNumber", adChar, 30, str_SOPNumber), _
                            Array("@BuyCost", adChar, 25, str_BuyCost), _
                            Array("@RemanCost", adChar, 25, str_RemanufacturedCost), _
                            Array("@ExternalCost", adChar, 25, str_ExternalCost), _
                            Array("@Active", adInteger, 2, int_active))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateRBEstimate", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function AddVehicleEstimate(ByVal str_SPName As String, _
                                   ByRef l_RetVal As Long, _
                                   ByVal str_VehSeries As String, _
                                   ByVal str_VehDesc As String, _
                                   ByVal str_BusNum As String, _
                                   ByVal str_Make As String, _
                                   ByVal str_Model As String, _
                                   ByVal str_Year As String, _
                                   ByVal str_Engine As String, _
                                   ByVal str_Trans As String, _
                                   ByVal str_Diff As String, _
                                   ByVal str_UserName As String, _
                                   ByVal str_SOPNumber As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    AddVehicleEstimate = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@SERIES", adChar, 75, str_VehSeries), _
                            Array("@DESC", adChar, 200, str_VehDesc), _
                            Array("@NUMVEH", adChar, 10, str_BusNum), _
                            Array("@MAKE", adChar, 25, str_Make), _
                            Array("@MODEL", adChar, 25, str_Model), _
                            Array("@YEAR", adChar, 4, str_Year), _
                            Array("@ENGINE", adChar, 25, str_Engine), _
                            Array("@TRANS", adChar, 25, str_Trans), _
                            Array("@DIFF", adChar, 25, str_Diff), _
                            Array("@ENTERED_BY", adChar, 25, str_UserName), _
                            Array("@SOPNUMBER", adChar, 30, str_SOPNumber))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "AddVehicleEstimate", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateVehicleEstimate(ByVal str_SPName As String, _
                                      ByRef l_RetVal As Long, _
                                      ByVal str_VehSeries As String, _
                                      ByVal str_VehDesc As String, _
                                      ByVal str_BusNum As String, _
                                      ByVal str_Make As String, _
                                      ByVal str_Model As String, _
                                      ByVal str_Year As String, _
                                      ByVal str_Engine As String, _
                                      ByVal str_Trans As String, _
                                      ByVal str_Diff As String, _
                                      ByVal str_UserName As String, _
                                      ByVal l_VehicleListID As Long, _
                                      ByVal str_SOPNumber As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateVehicleEstimate = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                        Array("@SERIES", adChar, 75, str_VehSeries), _
                        Array("@DESC", adChar, 200, str_VehDesc), _
                        Array("@NUMVEH", adChar, 10, str_BusNum), _
                        Array("@MAKE", adChar, 25, str_Make), _
                        Array("@MODEL", adChar, 25, str_Model), _
                        Array("@YEAR", adChar, 4, str_Year), _
                        Array("@ENGINE", adChar, 25, str_Engine), _
                        Array("@TRANS", adChar, 25, str_Trans), _
                        Array("@DIFF", adChar, 25, str_Diff), _
                        Array("@ENTERED_BY", adChar, 25, str_UserName), _
                        Array("vi_vehicle_list_id", adInteger, 10, l_VehicleListID), _
                        Array("SOPNUMBER", adChar, 30, str_SOPNumber))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateVehicleEstimate", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteNSCPUsed(ByVal str_SPName As String, _
                               ByRef l_RetVal As Long, _
                               ByVal str_PartID As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteNSCPUsed = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                                        Array("@IDPART", adChar, 50, str_PartID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteNSCPUsed", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteSCPUsed(ByVal str_SPName As String, _
                              ByRef l_RetVal As Long, _
                              ByVal str_PartID As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteSCPUsed = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                                        Array("@IDPART", adChar, 50, str_PartID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteSCPUsed", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function AddErrorLog(ByVal str_SPName As String, _
                            ByRef l_RetVal As Long, _
                            ByVal str_FunctionName As String, _
                            ByVal str_UserName As String, _
                            ByVal str_ErrMsg As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    AddErrorLog = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@ERROR_FUNCTION", adChar, 50, str_FunctionName), _
                            Array("@USERNAME", adChar, 25, str_UserName), _
                            Array("@ERROR_DESC", adChar, 200, str_ErrMsg))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "AddErrorLog", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function AddNSCP(ByVal str_SPName As String, _
                        ByRef l_RetVal As Long, _
                        ByVal str_SupNumber As String, _
                        ByVal str_SupName As String, _
                        ByVal str_OEMPartCost As String, _
                        ByVal str_PartDesc As String, _
                        ByVal str_Keyword As String, _
                        ByVal str_EnteredBy As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    AddNSCP = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_orig_supplier_num", adChar, 50, str_SupNumber), _
                            Array("vi_orig_supplier_name", adChar, 50, str_SupName), _
                            Array("vi_oem_part_cost", adNumeric, 10, CDbl(str_OEMPartCost)), _
                            Array("vi_detailed_desc", adChar, 500, str_PartDesc), _
                            Array("vi_keyword", adChar, 50, str_Keyword), _
                            Array("vi_entered_by", adChar, 25, str_EnteredBy))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "AddNSCP", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateNSCP(ByVal str_SPName As String, _
                           ByRef l_RetVal As Long, _
                           ByVal str_SupNumber As String, _
                           ByVal str_SupName As String, _
                           ByVal str_Cost As String, _
                           ByVal str_PartDesc As String, _
                           ByVal str_Keyword As String, _
                           ByVal str_EnteredBy As String, _
                           ByVal str_RowID As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateNSCP = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@SUPPNUM", adChar, 50, str_SupNumber), _
                            Array("@SUPNAME", adChar, 50, str_SupName), _
                            Array("@COST", adNumeric, 10, CDbl(str_Cost)), _
                            Array("@DESC", adChar, 500, str_PartDesc), _
                            Array("@KEYWORD", adChar, 50, str_Keyword), _
                            Array("@ENTERED_BY", adChar, 25, str_EnteredBy), _
                            Array("@id", adChar, 25, str_RowID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateNSCP", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateNSCP2(ByVal str_SPName As String, _
                           ByRef l_RetVal As Long, _
                           ByVal str_ID As Long, _
                           ByVal str_RowID As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateNSCP2 = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@ID", adInteger, 10, str_ID), _
                            Array("@rowid", adChar, 25, str_RowID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateNSCP2", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteVehType(ByVal str_SPName As String, _
                              ByRef l_RetVal As Long, _
                              ByVal str_PartID As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteVehType = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@IDPART", adChar, 50, str_PartID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteVehType", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function AddVehTypes(ByVal str_SPName As String, _
                            ByRef l_RetVal As Long, _
                            ByVal str_Make As String, _
                            ByVal str_Model As String, _
                            ByVal str_Year As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    AddVehTypes = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@MAKE", adChar, 50, str_Make), _
                            Array("@MODEL", adChar, 50, str_Model), _
                            Array("@YEAR", adChar, 4, str_Year))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "AddVehTypes", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateVehTypes(ByVal str_SPName As String, _
                               ByRef l_RetVal As Long, _
                               ByVal str_Make As String, _
                               ByVal str_Model As String, _
                               ByVal str_Year As String, _
                               ByVal str_VehID As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateVehTypes = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@MAKE", adChar, 50, str_Make), _
                            Array("@MODEL", adChar, 50, str_Model), _
                            Array("@YEAR", adChar, 10, str_Year), _
                            Array("@VEHID", adChar, 25, str_VehID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateVehTypes", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteDiff(ByVal str_SPName As String, _
                           ByRef l_RetVal As Long, _
                           ByVal str_PartID As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteDiff = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@IDPART", adChar, 50, str_PartID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteDiff", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteEngine(ByVal str_SPName As String, _
                             ByRef l_RetVal As Long, _
                             ByVal str_PartID As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteEngine = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@IDPART", adChar, 50, str_PartID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteEngine", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteTrans(ByVal str_SPName As String, _
                            ByRef l_RetVal As Long, _
                            ByVal str_PartID As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteTrans = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@IDPART", adChar, 50, str_PartID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteTrans", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function AddMB(ByVal str_SPName As String, _
                      ByRef l_RetVal As Long, _
                      ByVal str_BenchNumber As String, _
                      ByVal str_BusType As String, _
                      ByVal str_BuyCode As String, _
                      ByVal str_BuyNewCost As String, _
                      ByVal str_CoreCode As String, _
                      ByVal str_Description As String, _
                      ByVal str_ExternalRebuilt As String, _
                      ByVal str_Keyword As String, _
                      ByVal str_MakeBuyNo As String, _
                      ByVal str_NumberOfBus As String, _
                      ByVal str_ProjectedAnnualUsage As String, _
                      ByVal str_RebuildCode As String, _
                      ByVal str_Remanufactured As String, _
                      ByVal str_OptRecommend As String, _
                      ByVal str_OptSample As String, _
                      ByVal str_VendorPartNo As String, _
                      ByVal str_InternalRebuilt As String, _
                      ByVal str_SOP As String, _
                      ByVal str_CoreCost As String, _
                      ByVal str_JobNumber As String, _
                      ByVal int_NewJobUseManualEntry As Integer) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    AddMB = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@BENCH", adChar, 25, str_BenchNumber), _
                            Array("@BUSTYPE", adChar, 50, str_BusType), _
                            Array("@BUYCODE", adChar, 25, str_BuyCode), _
                            Array("@BUYCODENEW", adChar, 25, str_BuyNewCost), _
                            Array("@CORECODE", adChar, 25, str_CoreCode), _
                            Array("@DESCRIPTION", adChar, 50, str_Description), _
                            Array("@EXTREBUILT", adChar, 25, str_ExternalRebuilt), _
                            Array("@KEYWORD", adChar, 50, str_Keyword), _
                            Array("@MBNUMBER", adChar, 25, str_MakeBuyNo), _
                            Array("@NUMOFBUS", adChar, 10, str_NumberOfBus), _
                            Array("@PROJECTED", adChar, 25, str_ProjectedAnnualUsage), _
                            Array("@REBUILDCODE", adChar, 25, str_RebuildCode), _
                            Array("@REMANUFACTURED", adChar, 25, str_Remanufactured), _
                            Array("@RECOMMEND", adChar, 1, str_OptRecommend), _
                            Array("@SAMPLE", adChar, 1, str_OptSample), _
                            Array("@VENDORPARTNUM", adChar, 25, str_VendorPartNo), _
                            Array("@INTERNALCOST", adChar, 25, str_InternalRebuilt), _
                            Array("@SOPNUM", adChar, 25, str_SOP), _
                            Array("vi_core_cost", adChar, 25, str_CoreCost), _
                            Array("vi_job_number", adChar, 25, str_JobNumber), _
                            Array("vi_manualNewPrice", adInteger, 8, int_NewJobUseManualEntry))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "AddMB", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateMBList(ByVal str_SPName As String, _
                             ByRef l_RetVal As Long, _
                             ByVal str_BenchNumber As String, _
                             ByVal str_BusType As String, _
                             ByVal str_BuyCode As String, _
                             ByVal str_BuyNewCost As String, _
                             ByVal str_CoreCode As String, _
                             ByVal str_Description As String, _
                             ByVal str_ExternalCost As String, _
                             ByVal str_Keyword As String, _
                             ByVal str_MBNumber As String, _
                             ByVal str_NumBusComp As String, _
                             ByVal str_AnnualUsage As String, _
                             ByVal str_RebuildCode As String, _
                             ByVal str_RemanCost As String, _
                             ByVal str_OptRecommend As String, _
                             ByVal str_OptSample As String, _
                             ByVal str_InternalCost As String, _
                             ByVal str_VendorPartNum As String, _
                             ByVal str_SOPNum As String, _
                             ByVal str_CoreCost As String, _
                             ByVal str_JobNumber As String, _
                             ByVal int_NewJobUseManualEntry As Integer, _
                             ByVal str_RowID As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateMBList = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_bench_number", adChar, 25, str_BenchNumber), _
                            Array("vi_bus_type", adChar, 50, str_BusType), _
                            Array("vi_buy_code", adChar, 25, str_BuyCode), _
                            Array("vi_buy_new_cost", adChar, 25, str_BuyNewCost), _
                            Array("vi_core_code", adChar, 25, str_CoreCode), _
                            Array("vi_description", adChar, 50, str_Description), _
                            Array("vi_external_cost", adChar, 25, str_ExternalCost), _
                            Array("vi_keyword", adChar, 50, str_Keyword), _
                            Array("vi_mb_number", adChar, 25, str_MBNumber), _
                            Array("vi_num_bus_comp", adChar, 10, str_NumBusComp), _
                            Array("vi_annual_usage", adChar, 25, str_AnnualUsage), _
                            Array("vi_rebuild_code", adChar, 25, str_RebuildCode), _
                            Array("vi_reman_cost", adChar, 25, str_RemanCost), _
                            Array("vi_recommendation", adChar, 1, str_OptRecommend), _
                            Array("vi_sample_provided", adChar, 1, str_OptSample), _
                            Array("vi_internal_cost", adChar, 25, str_InternalCost), _
                            Array("vi_vendor_part_num", adChar, 25, str_VendorPartNum), _
                            Array("vi_sop_num", adChar, 25, str_SOPNum), _
                            Array("vi_core_cost", adChar, 25, str_CoreCost), _
                            Array("vi_job_number", adChar, 25, str_JobNumber), _
                            Array("vi_manualNewPrice", adInteger, 8, int_NewJobUseManualEntry), _
                            Array("vi_partid", adChar, 50, str_RowID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateMBList", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteMB(ByVal str_SPName As String, _
                         ByRef l_RetVal As Long, _
                         ByVal str_MBNumber As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteMB = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_mb_number", adChar, 25, str_MBNumber))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteMB", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteVehicleEstimate(ByVal str_SPName As String, _
                                      ByRef l_RetVal As Long, _
                                      ByVal str_PartID As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteVehicleEstimate = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@IDPART", adChar, 50, str_PartID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteVehicleEstimate", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function TransferPartsUsed(ByVal str_SPName As String, _
                                  ByRef l_RetVal As Long, _
                                  ByVal str_MMSStockCode As String, _
                                  ByVal cur_MMSCost As Currency, _
                                  ByVal str_UserName As String, _
                                  ByVal var_NSCRowID As Variant) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    TransferPartsUsed = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                    Array("vi_mms_stock_code", adChar, 30, str_MMSStockCode), _
                    Array("vi_mms_cost", adNumeric, 20, cur_MMSCost), _
                    Array("vi_user_entered", adChar, 50, g_str_UserName), _
                    Array("@rowid", adChar, 50, var_NSCRowID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "TransferPartsUsed", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function AddLabourTasks(ByVal str_SPName As String, _
                               ByRef l_RetVal As Long, _
                               ByVal str_LabDefn As String, _
                               ByVal str_LinkNumber As String, _
                               ByVal str_TypeID As String, _
                               ByVal str_CostCentre As String, _
                               ByVal str_TaskDesc As String, _
                               ByVal str_LabourType As String, _
                               ByVal str_Usage As String, _
                               ByVal str_HrsReqd As String, _
                               ByVal str_AdjHrs As String, _
                               ByVal dbl_TimeAddition As Double, _
                               ByVal str_Rebuilt_Part_Num As String, _
                               ByVal str_LastModifiedBy As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    AddLabourTasks = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                        Array("vi_labour_defn", adChar, 50, str_LabDefn), _
                        Array("vi_link_number", adChar, 25, str_LinkNumber), _
                        Array("vi_typeid", adChar, 5, str_TypeID), _
                        Array("vi_costcentre", adChar, 5, str_CostCentre), _
                        Array("vi_task", adChar, 50, str_TaskDesc), _
                        Array("vi_labour_type", adChar, 5, str_LabourType), _
                        Array("vi_usage", adChar, 25, str_Usage), _
                        Array("vi_hrs_reqd", adChar, 25, str_HrsReqd), _
                        Array("vi_adj_hrs", adChar, 25, str_AdjHrs), _
                        Array("vi_time_addition", adDouble, 18, dbl_TimeAddition), _
                        Array("vi_rebuilt_part_num", adChar, 30, str_Rebuilt_Part_Num), _
                        Array("vi_last_modified_by", adChar, 25, str_LastModifiedBy))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "AddLabourTasks", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateLabourTasks(ByVal str_SPName As String, _
                                  ByRef l_RetVal As Long, _
                                  ByVal str_LabourDefn As String, _
                                  ByVal str_LinkNumber As String, _
                                  ByVal str_TypeID As String, _
                                  ByVal str_CostCentre As String, _
                                  ByVal str_TaskDesc As String, _
                                  ByVal str_LabourType As String, _
                                  ByVal str_Usage As String, _
                                  ByVal str_HrsReqd As String, _
                                  ByVal str_AdjHrs As String, _
                                  ByVal str_PartID As String, _
                                  ByVal dbl_TimeAddition As Double, _
                                  ByVal str_LastModifiedBy As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateLabourTasks = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_labour_defn", adChar, 50, str_LabourDefn), _
                            Array("vi_link_number", adChar, 25, str_LinkNumber), _
                            Array("vi_typeid", adChar, 5, str_TypeID), _
                            Array("vi_costcentre", adChar, 5, str_CostCentre), _
                            Array("vi_task", adChar, 50, str_TaskDesc), _
                            Array("vi_labour_type", adChar, 5, str_LabourType), _
                            Array("vi_usage", adChar, 25, str_Usage), _
                            Array("vi_hrs_reqd", adChar, 25, str_HrsReqd), _
                            Array("vi_adj_hrs", adChar, 25, str_AdjHrs), _
                            Array("vi_partid", adChar, 50, str_PartID), _
                            Array("vi_time_addition", adDouble, 18, dbl_TimeAddition), _
                            Array("vi_last_modified_by", adChar, 25, str_LastModifiedBy))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateLabourTasks", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function AddNSCPUsed(ByVal str_SPName As String, _
                            ByRef l_RetVal As Long, _
                            ByVal str_SupNumber As String, _
                            ByVal str_SupName As String, _
                            ByVal str_CostCentre As String, _
                            ByVal str_Quantity As String, _
                            ByVal str_Percent As String, _
                            ByVal str_UserName As String, _
                            ByVal str_LinkCode As String, _
                            ByVal cur_Cost As Currency, _
                            ByVal var_TypeCode As Variant, _
                            ByVal cur_CoreCost As Currency, _
                            ByVal lng_ID As Long) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    AddNSCPUsed = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@orig_supplier_num", adChar, 50, str_SupNumber), _
                            Array("@orig_supplier_name", adChar, 50, str_SupName), _
                            Array("@cost_centre", adChar, 4, str_CostCentre), _
                            Array("@qty_reqd", adChar, 10, str_Quantity), _
                            Array("@percent_usage", adChar, 10, str_Percent), _
                            Array("@entered_by", adChar, 25, str_UserName), _
                            Array("@mbnum", adChar, 30, str_LinkCode), _
                            Array("@cost", adNumeric, 20, cur_Cost), _
                            Array("@link_type", adChar, 3, var_TypeCode), _
                            Array("@corecost", adNumeric, 20, cur_CoreCost), _
                            Array("@ID", adInteger, 10, lng_ID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "AddNSCPUsed", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateNSCPUsed(ByVal str_SPName As String, _
                               ByRef l_RetVal As Long, _
                               ByVal str_SupNumber As String, _
                               ByVal str_SupName As String, _
                               ByVal str_CostCentre As String, _
                               ByVal str_Quantity As String, _
                               ByVal str_Percent As String, _
                               ByVal str_UserName As String, _
                               ByVal str_LinkCode As String, _
                               ByVal cur_Cost As Currency, _
                               ByVal var_RowID As Variant, _
                            ByVal cur_CoreCost As Currency) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateNSCPUsed = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@orig_supplier_num", adChar, 50, str_SupNumber), _
                            Array("@orig_supplier_name", adChar, 50, str_SupName), _
                            Array("@cost_centre", adChar, 4, str_CostCentre), _
                            Array("@qty_reqd", adChar, 10, str_Quantity), _
                            Array("@percent_usage", adChar, 10, str_Percent), _
                            Array("@entered_by", adChar, 25, str_UserName), _
                            Array("@mbnum", adChar, 30, str_LinkCode), _
                            Array("@cost", adNumeric, 20, cur_Cost), _
                            Array("@rowid", adChar, 50, var_RowID), _
                            Array("@corecost", adNumeric, 20, cur_CoreCost))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateNSCPUsed", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function AddSCPUsed(ByVal str_SPName As String, _
                           ByRef l_RetVal As Long, _
                           ByVal str_StockCode As String, _
                           ByVal str_CostCentre As String, _
                           ByVal str_Quantity As String, _
                           ByVal str_PercentUsage As String, _
                           ByVal str_UserName As String, _
                           ByVal cur_MMSCost As Currency, _
                           ByVal cur_OEMCost As Currency, _
                           ByVal str_LinkCode As String, _
                           ByVal str_RebuiltPart As String, _
                           ByVal str_LinkType As String, _
                           ByVal cur_CoreCost As Currency, _
                           ByVal str_rebuilt_code As String, _
                           ByVal cur_rebuilt_cost As Currency) As Long

    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    AddSCPUsed = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("mms_stock_code", adChar, 30, str_StockCode), _
                            Array("vi_cost_centre", adChar, 4, str_CostCentre), _
                            Array("vi_qty_reqd", adChar, 10, str_Quantity), _
                            Array("vi_percent_usage", adChar, 10, str_PercentUsage), _
                            Array("vi_user_entered", adChar, 30, str_UserName), _
                            Array("vi_link_code", adChar, 30, str_LinkCode), _
                            Array("vi_mms_cost", adNumeric, 30, cur_MMSCost), _
                            Array("vi_oem_cost", adNumeric, 30, cur_OEMCost), _
                            Array("vi_is_rebuilt_part", adChar, 1, str_RebuiltPart), _
                            Array("vi_link_type", adChar, 3, str_LinkType), _
                            Array("corecost", adNumeric, 20, cur_CoreCost), _
                            Array("vi_mms_rebuilt_code", adChar, 30, str_rebuilt_code), _
                            Array("vi_rebuilt_cost", adNumeric, 20, cur_rebuilt_cost))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "AddSCPUsed", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateSCPUsed(ByVal str_SPName As String, _
                              ByRef l_RetVal As Long, _
                              ByVal str_StockCode As String, _
                              ByVal str_CostCentre As String, _
                              ByVal str_Quantity As String, _
                              ByVal str_PercentUsage As String, _
                              ByVal str_UserName As String, _
                              ByVal str_MBNumber As String, _
                              ByVal cur_PartUnitCost As Currency, _
                              ByVal cur_OEMCost As Currency, _
                              ByVal m_var_RowID As Variant, _
                              ByVal cur_CoreCost As Currency) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateSCPUsed = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@mms_stock_code", adChar, 30, str_StockCode), _
                            Array("@cost_centre", adChar, 4, str_CostCentre), _
                            Array("@qty_reqd", adChar, 10, str_Quantity), _
                            Array("@percent_usage", adChar, 10, str_PercentUsage), _
                            Array("@user_entered", adChar, 50, str_UserName), _
                            Array("@makebuy_code", adChar, 30, str_MBNumber), _
                            Array("@mms_cost", adNumeric, 20, cur_PartUnitCost), _
                            Array("@oem_cost", adNumeric, 20, cur_OEMCost), _
                            Array("@rowid", adChar, 50, m_var_RowID), _
                            Array("@corecost", adNumeric, 20, cur_CoreCost))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateSCPUsed", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function AddRBPUsed(ByVal str_SPName As String, _
                           ByRef l_RetVal As Long, _
                           ByVal str_StockCode As String, _
                           ByVal str_CostCentre As String, _
                           ByVal str_Quantity As String, _
                           ByVal str_PercentUsage As String, _
                           ByVal str_UserName As String, _
                           ByVal str_MBNumber As String, _
                           ByVal cur_PartUnitCost As Currency, _
                           ByVal str_RebuiltNumber As String, _
                           ByVal var_TypeCode As Variant, _
                            ByVal cur_CoreCost As Currency) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    AddRBPUsed = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@mms_stock_code", adChar, 30, str_StockCode), _
                            Array("@cost_centre", adChar, 4, str_CostCentre), _
                            Array("@qty_reqd", adChar, 10, str_Quantity), _
                            Array("@percent_usage", adChar, 10, str_PercentUsage), _
                            Array("@user_entered", adChar, 50, str_UserName), _
                            Array("@makebuy_code", adChar, 30, str_MBNumber), _
                            Array("@estimated_cost", adNumeric, 20, cur_PartUnitCost), _
                            Array("@rebuilt_num", adChar, 30, str_RebuiltNumber), _
                            Array("@link_type", adChar, 3, var_TypeCode), _
                            Array("@corecost", adNumeric, 20, cur_CoreCost))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "AddRBPUsed", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateRBPUsed(ByVal str_SPName As String, _
                              ByRef l_RetVal As Long, _
                              ByVal str_CostCentre As String, _
                              ByVal str_Quantity As String, _
                              ByVal str_PercentUsage As String, _
                              ByVal str_UserName As String, _
                              ByVal str_MBNumber As String, _
                              ByVal cur_PartUnitCost As Currency, _
                              ByVal str_RebuiltNumber As String, _
                              ByVal var_RowID As Variant, _
                              ByVal cur_CoreCost As Currency) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateRBPUsed = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("@cost_centre", adChar, 4, str_CostCentre), _
                            Array("@qty_reqd", adChar, 10, str_Quantity), _
                            Array("@percent_usage", adChar, 10, str_PercentUsage), _
                            Array("@user_entered", adChar, 50, str_UserName), _
                            Array("@makebuy_code", adChar, 30, str_MBNumber), _
                            Array("@estimated_cost", adNumeric, 20, cur_PartUnitCost), _
                            Array("@rebuilt_num", adChar, 30, str_RebuiltNumber), _
                            Array("@rowid", adChar, 50, var_RowID), _
                            Array("@corecost", adNumeric, 20, cur_CoreCost))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateRBPUsed", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveUsers(ByVal str_SPName As String, _
                              ByVal str_UserName As String, _
                              ByVal str_Password As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveUsers = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_username", adChar, 15, str_UserName), _
                            Array("vi_password", adChar, 25, str_Password))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveUsers", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveSOPFileName(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveSOPFileName = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveSOPFileName", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveTaskDescription(ByVal str_SPName As String) As ADODB.Recordset
    Dim m_obj_clsDb As clsDB
    
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveTaskDescription = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveTaskDescription", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveLabourPosition(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveLabourPosition = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveLabourPosition", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveCostCentres(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveCostCentres = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveCostCentres", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveMBAllLabour(ByVal str_SPName As String, _
                                    ByVal str_LabourID As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveMBAllLabour = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                                    Array("@IDLABOUR", adChar, 50, str_LabourID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveMBAllLabour", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchMB(ByVal str_SPName As String, _
                         ByVal str_MBNumber As String, _
                         ByVal str_RebuildNumber As String, _
                         ByVal str_Keyword As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB

    Set SearchMB = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_mb_num", adChar, 25, str_MBNumber), _
                            Array("vi_rebuild_code", adChar, 25, str_RebuildNumber), _
                            Array("vi_keyword", adChar, 50, str_Keyword))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchMB", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveNSCPUsed(ByVal str_SPName As String, _
                                 ByVal str_LinkCode As String, _
                                 ByVal str_LinkType As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveNSCPUsed = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_idnum", adChar, 30, str_LinkCode), _
                            Array("vi_link_type", adChar, 3, str_LinkType))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveNSCPUsed", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveALLNSCPUsed(ByVal str_SPName As String, _
                                 ByVal str_LinkCode As String, _
                                 ByVal str_LinkType As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveALLNSCPUsed = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_idnum", adChar, 30, str_LinkCode), _
                            Array("vi_link_type", adChar, 3, str_LinkType))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveALLNSCPUsed", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveSCPUsed(ByVal str_SPName As String, _
                                ByVal str_LinkCode As String, _
                                ByVal str_RebuiltPartChoice As String, _
                                ByVal str_LinkType As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveSCPUsed = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                    Array("vi_link_code", adChar, 30, str_LinkCode), _
                    Array("vi_rebuilt_part_choice", adChar, 1, str_RebuiltPartChoice), _
                    Array("vi_link_type", adChar, 3, str_LinkType))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveSCPUsed", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveRBPUsed(ByVal str_SPName As String, _
                                ByVal str_LinkCode As String, _
                                ByVal str_LinkType As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveRBPUsed = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_idnum", adChar, 30, str_LinkCode), _
                            Array("vi_link_type", adChar, 3, str_LinkType))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveRBPUsed", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveEngines(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveEngines = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveEngines", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveTransmissions(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveTransmissions = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveTransmissions", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveDifferentials(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveDifferentials = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveDifferentials", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveMB(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveMB = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveMB", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveUsersLike(ByVal str_SPName As String, _
                                  ByVal str_UserLike As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveUsersLike = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_username_like", adChar, 15, str_UserLike))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveUsersLike", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SetDefaultPassword(ByVal str_SPName As String, _
                                  ByRef l_RetVal As Long, _
                                  ByVal str_UserName As String, _
                                  ByVal str_DefaultPassword As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    SetDefaultPassword = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                                Array("vi_username", adChar, 15, str_UserName), _
                                Array("vi_password", adChar, 25, str_DefaultPassword))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SetDefaultPassword", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function PopulateNSCComboBoxes(ByVal str_SPName As String, _
                                      ByVal str_CompareType As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set PopulateNSCComboBoxes = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_cost_comparetype", adChar, 1, str_CompareType))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "PopulateNSCComboBoxes", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function PopulateCostCentres(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set PopulateCostCentres = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "PopulateCostCentres", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchNSCPart(ByVal str_SPName As String, _
                              ByVal str_OrigSupplierNumber As String, _
                              ByVal lng_OEMPartCost As Long, _
                              ByVal str_Description As String, _
                              ByVal str_Keyword As String, _
                              ByVal str_CostCompareType As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchNSCPart = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                    Array("vi_orig_supplier_num", adChar, 50, str_OrigSupplierNumber), _
                    Array("vi_oem_part_cost", adNumeric, 11, lng_OEMPartCost), _
                    Array("vi_description", adChar, 500, str_Description), _
                    Array("vi_keyword", adChar, 50, str_Keyword), _
                    Array("vi_cost_comparetype", adChar, 1, str_CostCompareType))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchNSCPart", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteUser(ByVal str_SPName As String, _
                            ByRef l_RetVal As Long, _
                            ByVal str_UserName As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteUser = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_username", adChar, 15, str_UserName))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteUser", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAllUsers(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAllUsers = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAllUsers", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchVehicleEstimate(ByVal str_SPName As String, _
                                      ByVal str_BusSeries As String, _
                                      ByVal str_BusDescription As String, _
                                      ByVal str_Make As String, _
                                      ByVal str_Model As String, _
                                      ByVal str_Year As String, _
                                      ByVal str_Engine As String, _
                                      ByVal str_Trans As String, _
                                      ByVal str_Differential As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchVehicleEstimate = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_veh_series", adChar, 75, str_BusSeries), _
                            Array("vi_proj_desc", adChar, 200, str_BusDescription), _
                            Array("vi_make", adChar, 25, str_Make), _
                            Array("vi_model", adChar, 25, str_Model), _
                            Array("vi_year", adChar, 4, str_Year), _
                            Array("vi_engine", adChar, 25, str_Engine), _
                            Array("vi_trans", adChar, 25, str_Trans), _
                            Array("vi_diff", adChar, 25, str_Differential))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchVehicleEstimate", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveVehicleTypes(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveVehicleTypes = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveVehicleTypes", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveVehicleEstimates(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveVehicleEstimates = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveVehicleEstimates", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchRBPart(ByVal str_SPName As String, _
                             ByVal str_RebuiltNumber As String, _
                             ByVal str_Price As String, _
                             ByVal str_Description As String, _
                             ByVal str_Keyword As String, _
                             ByVal l_CostCompareType As Long) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchRBPart = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                        Array("vi_orig_supplier_num", adChar, 30, str_RebuiltNumber), _
                        Array("vi_oem_part_cost", adChar, 25, str_Price), _
                        Array("vi_description", adChar, 250, str_Description), _
                        Array("vi_keyword", adChar, 250, str_Keyword), _
                        Array("vi_cost_comparetype", adInteger, 10, l_CostCompareType))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchRBPart", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchSCRBPartList(ByVal str_SPName As String, _
                                   ByVal str_RebuiltNumber As String, _
                                   ByVal str_Price As String, _
                                   ByVal str_Description As String, _
                                   ByVal l_CostCompareType As Long) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchSCRBPartList = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                        Array("vi_orig_supplier_num", adChar, 30, str_RebuiltNumber), _
                        Array("vi_oem_part_cost", adInteger, 9, str_Price), _
                        Array("vi_description", adChar, 500, str_Description), _
                        Array("vi_cost_comparetype", adInteger, 10, l_CostCompareType))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchSCRBPartList", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchSCPart(ByVal str_SPName As String, _
                             ByVal str_RebuiltNumber As String, _
                             ByVal str_Price As String, _
                             ByVal str_Description As String, _
                             ByVal str_Keyword As String, _
                             ByVal l_CostCompareType As Long) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchSCPart = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                        Array("vi_orig_supplier_num", adChar, 30, str_RebuiltNumber), _
                        Array("vi_oem_part_cost", adNumeric, 9, str_Price), _
                        Array("vi_description", adChar, 500, str_Description), _
                        Array("vi_keyword", adChar, 50, str_Keyword), _
                        Array("vi_cost_comparetype", adInteger, 10, l_CostCompareType))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchSCPart", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchNSCRBPartList(ByVal str_SPName As String, _
                                    ByVal str_RebuiltNumber As String, _
                                    ByVal str_Price As String, _
                                    ByVal str_Description As String, _
                                    ByVal l_CostCompareType As Long) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchNSCRBPartList = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                        Array("vi_orig_supplier_num", adChar, 50, str_RebuiltNumber), _
                        Array("vi_oem_part_cost", adInteger, 9, str_Price), _
                        Array("vi_description", adChar, 500, str_Description), _
                        Array("vi_cost_comparetype", adInteger, 10, l_CostCompareType))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchNSCRBPartList", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveRB(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveRB = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveRB", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveSCOrigSupplierNum(ByVal str_SPName As String, _
                                          ByVal str_OrigSuppNum As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveSCOrigSupplierNum = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_orig_supplier_num", adChar, 50, str_OrigSuppNum))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveSCOrigSupplierNum", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveMBLabour(ByVal str_SPName As String, _
                                 ByVal str_IDNumber As String, _
                                 ByVal str_Type As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveMBLabour = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_idnum", adChar, 25, str_IDNumber), _
                            Array("vi_type", adChar, 3, str_Type))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveMBLabour", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveMBCCLabour(ByVal str_SPName As String, _
                                   ByVal str_MBNumber As String, _
                                   ByVal str_TypeID As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveMBCCLabour = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_mb_num", adChar, 25, str_MBNumber), _
                            Array("vi_typeid", adChar, 5, str_TypeID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveMBCCLabour", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveCCTotals(ByVal str_SPName As String, _
                                 ByVal str_IDNumber As String, _
                                 ByVal str_LinkType As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveCCTotals = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_idnum", adChar, 25, str_IDNumber), _
                            Array("vi_link_type", adChar, 3, str_LinkType))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveCCTotals", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrievePassword(ByVal str_SPName As String, _
                                 ByVal str_UserName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrievePassword = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_user_name", adChar, 15, str_UserName))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrievePassword", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdatePassword(ByVal str_SPName As String, _
                                  ByRef l_RetVal As Long, _
                                  ByVal str_Password As String, _
                                  ByVal str_UserName As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdatePassword = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                                    Array("vi_password", adChar, 25, str_Password), _
                                    Array("vi_user_name", adChar, 50, str_UserName), _
                                    Array("vi_date_cahanged", adDate, 10, Now()))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdatePassword", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function PopulateRBComboBoxes(ByVal str_SPName As String, _
                                     ByVal str_CompareType As String) As ADODB.Recordset
    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set PopulateRBComboBoxes = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_cost_comparetype", adChar, 1, str_CompareType))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "PopulateRBComboBoxes", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveRBEstimates(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveRBEstimates = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveRBEstimates", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function PopulateSCComboBoxes(ByVal str_SPName As String, _
                                     ByVal str_CompareType As String) As ADODB.Recordset
    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set PopulateSCComboBoxes = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_cost_comparetype", adChar, 1, str_CompareType))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "PopulateSCComboBoxes", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function Add_User(ByVal str_SPName As String, _
                         ByRef l_RetVal As Long, _
                         ByVal str_UserName As String, _
                         ByVal l_AccessLevel As Long, _
                         ByVal str_Password As String, _
                         ByVal l_ForceChangePassword As Long) As Long
    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Add_User = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                    Array("vi_username", adChar, 15, str_UserName), _
                    Array("vi_access_level", adInteger, 1, l_AccessLevel), _
                    Array("vi_password", adChar, 25, str_Password), _
                    Array("vi_ForceChangePassword", adInteger, 1, l_ForceChangePassword))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "Add_User", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateAccessLevel(ByVal str_SPName As String, _
                                  ByRef l_RetVal As Long, _
                                  ByVal l_AccessLevel As Long, _
                                  ByVal l_PreviousAccessLevel As Long, _
                                  ByVal l_AccessLevelDays As Long, _
                                  ByVal str_UserName As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateAccessLevel = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                Array("vi_access_level", adInteger, 1, l_AccessLevel), _
                Array("vi_previous_access_level", adInteger, 1, l_PreviousAccessLevel), _
                Array("vi_access_level_days", adInteger, 10, l_AccessLevelDays), _
                Array("vi_username", adChar, 15, str_UserName))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateAccessLevel", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SetPSWDChangeDateNull(ByVal str_SPName As String, _
                                  ByRef l_RetVal As Long, _
                                  ByVal str_UserName As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    SetPSWDChangeDateNull = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                                        Array("vi_username", adChar, 15, str_UserName))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SetPSWDChangeDateNull", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveListOfBuses(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set RetrieveListOfBuses = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveListOfBuses", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function InsertMBListOFBuses(ByVal str_SPName As String, _
                                    ByRef l_RetVal As Long, _
                                    ByVal str_MakeBuyNumber As String, _
                                    ByVal l_ListID As Long) As Long
    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    InsertMBListOFBuses = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                    Array("vi_mb_number", adChar, 25, str_MakeBuyNumber), _
                    Array("vi_list_id", adInteger, 10, l_ListID))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "InsertMBListOFBuses", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function InsertRBListOFBuses(ByVal str_SPName As String, _
                                    ByRef l_RetVal As Long, _
                                    ByVal str_RebuiltStockCode As String, _
                                    ByVal l_ListID As Long) As Long
    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    InsertRBListOFBuses = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                    Array("vi_rebuilt_stock_num", adChar, 30, str_RebuiltStockCode), _
                    Array("vi_list_id", adInteger, 10, l_ListID))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "InsertRBListOFBuses", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function
                                            
Public Function RetrieveMBListOfBuses(ByVal str_SPName As String, _
                                      ByVal str_MakeBuyNumber As String) _
                                                                    As ADODB.Recordset
    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set RetrieveMBListOfBuses = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                                    Array("vi_mb_number", adChar, 25, str_MakeBuyNumber))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveMBListOfBuses", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveRBListOfBuses(ByVal str_SPName As String, _
                                      ByVal str_RebuiltStockCode As String) _
                                                                    As ADODB.Recordset
    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set RetrieveRBListOfBuses = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                    Array("vi_rebuilt_stock_num", adChar, 30, str_RebuiltStockCode))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveRBListOfBuses", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteMBListOFBuses(ByVal str_SPName As String, _
                         ByRef l_RetVal As Long, _
                         ByVal str_MBNumber As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteMBListOFBuses = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_mb_number", adChar, 25, str_MBNumber))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteMBListOFBuses", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteRBListOFBuses(ByVal str_SPName As String, _
                         ByRef l_RetVal As Long, _
                         ByVal str_RebuiltStockCode As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteRBListOFBuses = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                        Array("vi_rebuilt_stock_num", adChar, 30, str_RebuiltStockCode))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteRBListOFBuses", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveMBListByMBNumber(ByVal str_SPName As String, _
                                         ByVal str_MBNumber As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveMBListByMBNumber = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_mb_number", adChar, 25, str_MBNumber))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveMBListByMBNumber", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchArchiveHistory(ByVal str_SPName As String, _
                                     ByVal str_Number As String, _
                                     ByVal str_Type As String, _
                                     ByVal int_chkdate As Integer, _
                                     ByVal str_DateFrom As String, _
                                     ByVal str_DateTo As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchArchiveHistory = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_number", adChar, 30, str_Number), _
                            Array("vi_type", adChar, 30, str_Type), _
                            Array("vi_chkdate", adInteger, 20, int_chkdate), _
                            Array("vi_DateFrom", adChar, 50, str_DateFrom), _
                            Array("vi_DateTo", adChar, 50, str_DateTo))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchArchiveHistory", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function InsertRBMasterList(ByVal str_SPName As String, _
                                    ByRef l_RetVal As Long, _
                                    ByVal str_MMSStockCode As String, _
                                    ByVal str_DetailedDescription As String, _
                                    ByVal str_Keyword As String, _
                                    ByVal str_CorePartNumber As String, _
                                    ByVal str_RebuiltStockNumber As String, _
                                    ByVal str_JobNumber As String, _
                                    ByVal str_LastModifiedBy As String, _
                                    ByVal str_SOPNumber As String, _
                                    ByVal str_BuyCost As String, _
                                    ByVal str_RemanufacturedCost As String, _
                                    ByVal str_ExternalCost As String, _
                                    ByVal str_CoreCost As String) As Long
    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    InsertRBMasterList = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                    Array("vi_mms_stock_code", adChar, 30, str_MMSStockCode), _
                    Array("vi_detailed_desc", adChar, 250, str_DetailedDescription), _
                    Array("vi_keyword", adChar, 250, str_Keyword), _
                    Array("vi_core_part_num", adChar, 30, str_CorePartNumber), _
                    Array("vi_rebuilt_stock_num", adChar, 30, str_RebuiltStockNumber), _
                    Array("vi_job_number", adChar, 25, str_JobNumber), _
                    Array("vi_last_modified_by", adChar, 50, str_LastModifiedBy), _
                    Array("vi_sop_number", adChar, 30, str_SOPNumber), _
                    Array("@BuyCost", adChar, 25, str_BuyCost), _
                    Array("@RemanCost", adChar, 25, str_RemanufacturedCost), _
                    Array("@ExternalCost", adChar, 25, str_ExternalCost), _
                    Array("vi_core_cost", adChar, 25, str_CoreCost))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "InsertRBMasterList", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveEmployeeLabour(ByVal str_SPName As String, _
                                       ByVal str_LinkNumber As String, _
                                       ByVal str_TypeID As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveEmployeeLabour = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_link_number", adChar, 25, str_LinkNumber), _
                            Array("vi_typeid", adChar, 5, str_TypeID))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveEmployeeLabour", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveBusDescription(ByVal str_SPName As String, _
                                       ByVal str_BusDescription As String) _
                                                                    As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveBusDescription = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_description", adChar, 500, str_BusDescription))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveBusDescription", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function InsertListOfBuses(ByVal str_SPName As String, _
                                    ByRef l_RetVal As Long, _
                                    ByVal str_BusDescription As String) As Long
    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    InsertListOfBuses = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                    Array("vi_description", adChar, 500, str_BusDescription))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "InsertListOfBuses", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateListOfBuses(ByVal str_SPName As String, _
                                 ByRef l_RetVal As Long, _
                                 ByVal l_ListID As Long, _
                                 ByVal str_BusDescription As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateListOfBuses = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                                Array("vi_list_id", adInteger, 10, l_ListID), _
                                Array("vi_description", adChar, 500, str_BusDescription))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateListOfBuses", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetMBListOfBusesByListID(ByVal str_SPName As String, _
                                         ByVal l_ListID As Long) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set GetMBListOfBusesByListID = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_list_id", adInteger, 10, l_ListID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetMBListOfBusesByListID", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteFromListOfBuses(ByVal str_SPName As String, _
                                      ByRef l_RetVal As Long, _
                                      ByVal l_ListID As Long) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteFromListOfBuses = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                                            Array("vi_list_id", adInteger, 10, l_ListID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteFromListOfBuses", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAccessLevel(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAccessLevel = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAccessLevel", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function ResetAccessLevel(ByVal str_SPName As String, _
                                 ByRef l_RetVal As Long, _
                                 ByVal str_UserName As String, _
                                 ByVal l_AccessLevel As Long, _
                                 ByVal l_PreviousAccessLevel As Long) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    ResetAccessLevel = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                Array("vi_username", adChar, 15, str_UserName), _
                Array("vi_access_level", adInteger, 1, l_AccessLevel), _
                Array("vi_previous_access_level", adInteger, 1, l_PreviousAccessLevel))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "ResetAccessLevel", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function FindTaskDescription(ByVal str_SPName As String, _
                                    ByVal str_TaskDescription As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set FindTaskDescription = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                        Array("vi_task_description", adChar, 200, str_TaskDescription))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "FindTaskDescription", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function AddLabourTaskDescription(ByVal str_SPName As String, _
                                         ByRef l_RetVal As Long, _
                                         ByVal str_TaskDescription As String) As Long
    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    AddLabourTaskDescription = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                    Array("vi_task_description", adChar, 200, str_TaskDescription))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "AddLabourTaskDescription", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateLabourTaskDescription(ByVal str_SPName As String, _
                                            ByRef l_RetVal As Long, _
                                            ByVal str_TaskDescription As String, _
                                            ByVal m_l_TaskDescriptionID As Long) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateLabourTaskDescription = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                Array("vi_task_description", adChar, 200, str_TaskDescription), _
                Array("vi_task_id", adInteger, 10, m_l_TaskDescriptionID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateLabourTaskDescription", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteLabourTaskDescription(ByVal str_SPName As String, _
                                            ByRef l_RetVal As Long, _
                                            ByVal l_TaskDescriptionID As Long) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteLabourTaskDescription = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_task_id", adInteger, 10, l_TaskDescriptionID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteLabourTaskDescription", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveEmployeeSalaries(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveEmployeeSalaries = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveEmployeeSalaries", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchEmployeeSalaries(ByVal str_SPName As String, _
                                       ByVal dbl_SalaryRate As Double) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchEmployeeSalaries = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_rate_per_hour", adDouble, 10, dbl_SalaryRate))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchEmployeeSalaries", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function AddEmployeeSalaries(ByVal str_SPName As String, _
                                    ByRef l_RetVal As Long, _
                                    ByVal l_WageGroup As Long, _
                                    ByVal dbl_SalaryRate As Double) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    AddEmployeeSalaries = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                                Array("vi_wage_group", adInteger, 10, l_WageGroup), _
                                Array("vi_rate_per_hour", adDouble, 18, dbl_SalaryRate))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "AddEmployeeSalaries", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateEmployeeSalaries(ByVal str_SPName As String, _
                                       ByRef l_RetVal As Long, _
                                       ByVal l_WageGroup As Long, _
                                       ByVal dbl_SalaryRate As Double) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateEmployeeSalaries = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                                Array("vi_wage_group", adInteger, 10, l_WageGroup), _
                                Array("vi_rate_per_hour", adDouble, 10, dbl_SalaryRate))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateEmployeeSalaries", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchEmplClassWageGroup(ByVal str_SPName As String, _
                                         ByVal l_WageGroup As Long) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchEmplClassWageGroup = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_wage_group", adInteger, 10, l_WageGroup))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchEmplClassWageGroup", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteEmployeeSalaries(ByVal str_SPName As String, _
                                       ByRef l_RetVal As Long, _
                                       ByVal l_WageGroup As Long) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteEmployeeSalaries = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_wage_group", adInteger, 10, l_WageGroup))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteEmployeeSalaries", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function AddEmplClass(ByVal str_SPName As String, _
                             ByRef l_RetVal As Long, _
                             ByVal str_LabourDefinition As String, _
                             ByVal l_WageGroup As Long, _
                             ByVal dbl_HoursPerWeek As Double, _
                             ByVal dbl_OverheadType As Double) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    AddEmplClass = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                        Array("vi_labour_defn", adChar, 50, str_LabourDefinition), _
                        Array("vi_wage_group", adInteger, 10, l_WageGroup), _
                        Array("vi_hrs_per_week", adDouble, 18, dbl_HoursPerWeek), _
                        Array("vi_overheadtype", adDouble, 5, dbl_OverheadType))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "AddEmplClass", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchEmplClassLabourDefn(ByVal str_SPName As String, _
                                          ByVal str_LabourDefinition As String) _
                                                                    As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchEmplClassLabourDefn = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_labour_defn", adChar, 50, str_LabourDefinition))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchEmplClassLabourDefn", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteEmplClass(ByVal str_SPName As String, _
                                ByRef l_RetVal As Long, _
                                ByVal l_LabourType As Long) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteEmplClass = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_labour_type", adInteger, 10, l_LabourType))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteEmplClass", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchWageGroup(ByVal str_SPName As String, _
                                ByVal l_WageGroup As Long) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB

    Set SearchWageGroup = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_wage_group", adInteger, 10, l_WageGroup))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchWageGroup", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateEmplClass(ByVal str_SPName As String, _
                                       ByRef l_RetVal As Long, _
                                       ByVal l_LabourType As Long, _
                                       ByVal str_WageGroup As String, _
                                       ByVal str_LabourDefinition As String, _
                                       ByVal l_HoursPerWeek As Long, _
                                       ByVal dbl_OverheadType As Double) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateEmplClass = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_labour_type", adInteger, 10, l_LabourType), _
                            Array("vi_wage_group", adInteger, 10, str_WageGroup), _
                            Array("vi_labour_defn", adChar, 50, str_LabourDefinition), _
                            Array("vi_hrs_per_week", adInteger, 10, l_HoursPerWeek), _
                            Array("vi_overheadtype", adDouble, 10, dbl_OverheadType))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateEmplClass", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function
'Calls the procedure (str_SPName) with the given parameters from the CES packages
Public Function AddTempOEMKit(ByVal str_SPName As String, _
                              ByRef l_RetVal As Long, _
                              ByVal str_part_number As String, _
                              ByVal str_Description As String, _
                              ByVal str_Keyword As String, _
                              ByVal str_UserName As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    AddTempOEMKit = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                        Array("vi_part_number", adChar, 30, str_part_number), _
                        Array("vi_description", adChar, 500, str_Description), _
                        Array("vi_keyword", adChar, 50, str_Keyword), _
                        Array("vi_username", adChar, 25, str_UserName))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "AddTempOEMKit", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function
'Calls the procedure (str_SPName) with the given parameters from the CES packages
Public Function DeleteOEMKit(ByVal str_SPName As String, _
                         ByRef l_RetVal As Long, _
                         ByVal str_part_number As String) As Long
                         
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteOEMKit = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_part_number", adChar, 30, str_part_number))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteOEMKit", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function
'Calls the procedure (str_SPName) with the given parameters from the CES packages
Public Function SearchOEMKits(ByVal str_SPName As String, _
                             ByVal str_PartNumber As String, _
                             ByVal str_Description As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchOEMKits = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                    Array("vi_part_number", adChar, 30, str_PartNumber), _
                    Array("vi_description", adChar, 500, str_Description))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchOEMKit", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function
'Calls the procedure (str_SPName) with the given parameters from the CES packages
Public Function ArchSearchBuses(ByVal str_SPName As String, ByVal str_bus_type As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set ArchSearchBuses = m_obj_clsDb.RunSPReturnRS(str_SPName, Array("vi_arch_veh_bus_type", adChar, 75, str_bus_type))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "ArchSearchBuses", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function ArchSearchOEMKits(ByVal str_SPName As String, _
                             ByVal str_PartNumber As String, _
                             ByVal str_ID As Integer) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set ArchSearchOEMKits = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                    Array("vi_part_number", adChar, 30, str_PartNumber), _
                    Array("vi_id", adInteger, 18, str_ID))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "ArchSearchOEMKits", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function ADDOEMKitToBus(ByVal str_SPName As String, _
                             ByRef l_RetVal As Long, _
                             ByVal str_PartNumber As String, _
                             ByVal str_UserName As String, _
                             ByVal str_CostCentre As String, _
                             ByVal str_LinkNumber As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    ADDOEMKitToBus = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                    Array("vi_part_number", adChar, 30, str_PartNumber), _
                    Array("vi_username", adChar, 30, str_UserName), _
                    Array("vi_costcentre", adChar, 5, str_CostCentre), _
                    Array("vi_linknumber", adChar, 30, str_LinkNumber))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "ADDOEMKitToBus", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveOEMKitsAttached(ByVal str_SPName As String, _
                                        ByVal str_Link_code As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveOEMKitsAttached = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                                Array("vi_link_code", adChar, 30, str_Link_code))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveOEMKitsAttached", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteOEMKitAttached(ByVal str_SPName As String, _
                         ByRef l_RetVal As Long, _
                         ByVal str_Link_code As String, _
                         ByVal str_Vehicle_Number As String) As Long
                         
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteOEMKitAttached = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_link_code", adChar, 30, str_Link_code), _
                            Array("vi_vehicle_number", adChar, 30, str_Vehicle_Number))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteOEMKitAttached", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function retrieveSCKitData(ByVal str_SPName As String, _
                                  ByVal str_Link_code As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set retrieveSCKitData = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                                Array("vi_link_code", adChar, 30, str_Link_code))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "retrieveSCKitData", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateOEMKitCost(ByVal str_SPName As String, _
                                 ByRef l_RetVal As Long, _
                                 ByVal str_part_number As String, _
                                 ByVal str_Cost As Currency) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateOEMKitCost = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                Array("vi_part_number", adChar, 30, str_part_number), _
                Array("vi_cost", adCurrency, 20, str_Cost))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateOEMKitCost", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateRBCost(ByVal str_SPName As String, _
                             ByRef l_RetVal As Long, _
                             ByVal str_rebuilt_stock_num As String, _
                             ByVal str_Cost As Currency) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateRBCost = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                Array("vi_rebuilt_stock_num", adChar, 30, str_rebuilt_stock_num), _
                Array("vi_cost", adCurrency, 20, str_Cost))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateRBCost", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveArchRB(ByVal str_SPName As String, _
                               ByVal str_RBNumber As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveArchRB = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                Array("vi_rebuilt_code", adChar, 30, str_RBNumber))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveArchRB", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveArchMB(ByVal str_SPName As String, _
                               ByVal str_MBNumber As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveArchMB = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                Array("vi_MB_Number", adChar, 30, str_MBNumber))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveArchMB", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveArchBUS(ByVal str_SPName As String, _
                               ByVal str_VEH_ID As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveArchBUS = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                Array("vi_rebuilt_code", adChar, 30, str_VEH_ID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveArchBUS", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function ArchiveRB(ByVal str_SPName As String, _
                          ByRef l_RetVal As Long, _
                          ByVal str_RebuiltStockNum As String, _
                          ByVal str_UserName As String, _
                          ByVal str_LinkNumber As String, _
                          ByVal str_TypeID As String, _
                          ByVal str_LabourCost As String, _
                          ByVal str_LabourOverheadAmount As String, _
                          ByVal str_LabourTotal As String, _
                          ByVal str_MaterialsTotal As String, _
                          ByVal str_TotalRebuiltPartCost As String, _
                          ByVal str_TaxCost As String, _
                          ByVal str_TotalCostTax As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    ArchiveRB = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
        Array("vi_rebuilt_stock_num", adChar, 30, str_RebuiltStockNum), _
        Array("vi_username", adChar, 50, str_UserName), _
        Array("vi_link_number", adChar, 25, str_LinkNumber), _
        Array("vi_typeid", adChar, 5, str_TypeID), _
        Array("vi_labour_cost", adDouble, 18, str_LabourCost), _
        Array("vi_labour_overhead_amount", adDouble, 18, str_LabourOverheadAmount), _
        Array("vi_labour_total", adDouble, 18, str_LabourTotal), _
        Array("vi_materials_total", adDouble, 18, str_MaterialsTotal), _
        Array("vi_total_rebuilt_part_cost", adDouble, 18, str_TotalRebuiltPartCost), _
        Array("vi_total_tax", adDouble, 18, str_TaxCost), _
        Array("vi_total_cost_tax", adDouble, 18, str_TotalCostTax))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "ArchiveRB", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function ArchiveBUS(ByVal str_SPName As String, _
                           ByRef l_RetVal As Long, _
                           ByVal str_VehicleSeries As String, _
                           ByVal str_UserName As String, _
                           ByVal str_LinkNumber As String, _
                           ByVal str_TypeID As String, _
                           ByVal str_LabourCost As String, _
                           ByVal str_LabourOverheadAmount As String, _
                           ByVal str_LabourTotal As String, _
                           ByVal str_MaterialsTotal As String, _
                           ByVal str_TotalRebuiltPartCost As String, _
                           ByVal str_TaxCost As String, _
                           ByVal str_TotalCostTax As String, _
                           ByVal str_OEMKitsTotal As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    ArchiveBUS = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
        Array("vi_vehicle_series_num", adChar, 75, str_VehicleSeries), _
        Array("vi_username", adChar, 50, str_UserName), _
        Array("vi_link_number", adChar, 25, str_LinkNumber), _
        Array("vi_typeid", adChar, 5, str_TypeID), _
        Array("vi_labour_cost", adDouble, 18, str_LabourCost), _
        Array("vi_labour_overhead_amount", adDouble, 18, str_LabourOverheadAmount), _
        Array("vi_labour_total", adDouble, 18, str_LabourTotal), _
        Array("vi_materials_total", adDouble, 18, str_MaterialsTotal), _
        Array("vi_total_rebuilt_part_cost", adDouble, 18, str_TotalRebuiltPartCost), _
        Array("vi_total_tax", adDouble, 18, str_TaxCost), _
        Array("vi_total_cost_tax", adDouble, 18, str_TotalCostTax), _
        Array("vi_OEMKitsTotal", adDouble, 18, str_OEMKitsTotal))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "ArchiveBUS", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function ArchiveMB(ByVal str_SPName As String, _
                          ByRef l_RetVal As Long, _
                          ByVal str_MB_Number As String, _
                          ByVal str_UserName As String, _
                          ByVal str_LinkNumber As String, _
                          ByVal str_TypeID As String, _
                          ByVal str_LabourCost As String, _
                          ByVal str_LabourOverheadAmount As String, _
                          ByVal str_LabourTotal As String, _
                          ByVal str_MaterialsTotal As String, _
                          ByVal str_TotalRebuiltPartCost As String, _
                          ByVal str_TaxCost As String, _
                          ByVal str_TotalCostTax As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    ArchiveMB = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
        Array("vi_mb_number", adChar, 30, str_MB_Number), _
        Array("vi_username", adChar, 50, str_UserName), _
        Array("vi_link_number", adChar, 25, str_LinkNumber), _
        Array("vi_typeid", adChar, 5, str_TypeID), _
        Array("vi_labour_cost", adDouble, 18, str_LabourCost), _
        Array("vi_labour_overhead_amount", adDouble, 18, str_LabourOverheadAmount), _
        Array("vi_labour_total", adDouble, 18, str_LabourTotal), _
        Array("vi_materials_total", adDouble, 18, str_MaterialsTotal), _
        Array("vi_total_rebuilt_part_cost", adDouble, 18, str_TotalRebuiltPartCost), _
        Array("vi_total_tax", adDouble, 18, str_TaxCost), _
        Array("vi_total_cost_tax", adDouble, 18, str_TotalCostTax))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "ArchiveMB", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function ExecuteMMSSync(ByVal str_SPName As String, _
                               ByRef l_RetVal As Long) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    ExecuteMMSSync = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal)
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "ExecuteMMSSync", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetArchRBMasterList(ByVal str_SPName As String, _
                                    ByVal str_MMSStockCode As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set GetArchRBMasterList = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                    Array("vi_mms_stock_code", adChar, 30, str_MMSStockCode))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetArchRBMasterList", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetArchRBEmployeeLabour(ByVal str_SPName As String, _
                                        ByVal lng_ArchRBMasterlistID As Long) _
                                                                As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set GetArchRBEmployeeLabour = m_obj_clsDb.RunSPReturnRS(str_SPName, _
            Array("vi_arch_rb_masterlist_id", adInteger, 10, lng_ArchRBMasterlistID))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetArchRBEmployeeLabour", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetArchRBLabourCCTotal(ByVal str_SPName As String, _
                                       ByVal lng_ArchRBMasterlistID As Long) _
                                                                As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set GetArchRBLabourCCTotal = m_obj_clsDb.RunSPReturnRS(str_SPName, _
            Array("vi_arch_rb_masterlist_id", adInteger, 10, lng_ArchRBMasterlistID))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetArchRBLabourCCTotal", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetArchRBMaterialsCCTotal(ByVal str_SPName As String, _
                                          ByVal lng_ArchRBMasterlistID As Long) _
                                                                As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set GetArchRBMaterialsCCTotal = m_obj_clsDb.RunSPReturnRS(str_SPName, _
            Array("vi_arch_rb_masterlist_id", adInteger, 10, lng_ArchRBMasterlistID))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetArchRBMaterialsCCTotal", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetArchSCPartsUsed(ByVal str_SPName As String, _
                                   ByVal lng_ArchRBMasterlistID As Long) _
                                                                As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set GetArchSCPartsUsed = m_obj_clsDb.RunSPReturnRS(str_SPName, _
            Array("vi_arch_rb_masterlist_id", adInteger, 10, lng_ArchRBMasterlistID))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetArchSCPartsUsed", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchMBByBus(ByVal str_SPName As String, _
                         ByVal l_BusID As Long) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchMBByBus = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_bus_id", adInteger, 10, l_BusID))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchMBByBus", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveCESSettings(ByVal str_SPName As String, _
                                    ByVal str_Parameter As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveCESSettings = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_parameter", adChar, 100, str_Parameter))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveCESSettings", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function
Public Function RetrieveAllLabourHours(ByVal str_SPName As String, _
                                    ByVal str_EstimateNumber As String, ByVal str_EstimateType As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAllLabourHours = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_number", adChar, 25, str_EstimateNumber), _
                            Array("vi_type", adChar, 5, str_EstimateType))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAllLabourHours", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function
Public Function UpdateCESSettings(ByVal str_SPName As String, _
                                  ByRef l_RetVal As Long, _
                                  ByVal str_Parameter As String, _
                                  ByVal str_Value As String) As Long
    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    UpdateCESSettings = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                                Array("vi_parameter", adChar, 100, str_Parameter), _
                                Array("vi_value", adChar, 200, str_Value))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateCESSettings", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function


Public Function SearchKitByNumber(ByVal str_SPName As String, _
                                  ByVal str_PartNumber As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchKitByNumber = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                    Array("vi_part_number", adChar, 30, str_PartNumber))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchKitByNumber", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchNSCPByOrigSupplierNum(ByVal str_SPName As String, _
                                            ByVal str_SupplierNumber As String) _
                                                                As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchNSCPByOrigSupplierNum = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                    Array("vi_orig_supplier_num", adChar, 50, str_SupplierNumber))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchNSCPByOrigSupplierNum", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchEngineByName(ByVal str_SPName As String, _
                                   ByVal str_EngineName As String) _
                                                                As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchEngineByName = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                    Array("vi_name", adChar, 25, str_EngineName))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchEngineByName", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchTransmissionByName(ByVal str_SPName As String, _
                                         ByVal str_TransmissionName As String) _
                                                                As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchTransmissionByName = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                    Array("vi_name", adChar, 25, str_TransmissionName))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchTransmissionByName", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchDifferentialByName(ByVal str_SPName As String, _
                                         ByVal str_DifferentialName As String) _
                                                                As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchDifferentialByName = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                    Array("vi_name", adChar, 25, str_DifferentialName))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchDifferentialByName", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchVehTypeByKey(ByVal str_SPName As String, _
                                   ByVal str_Make As String, _
                                   ByVal str_Model As String, _
                                   ByVal str_Year As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchVehTypeByKey = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                    Array("vi_make", adChar, 25, str_Make), _
                    Array("vi_model", adChar, 25, str_Model), _
                    Array("vi_year", adChar, 4, str_Year))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchVehTypeByKey", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetAllNSCP(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set GetAllNSCP = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetAllNSCP", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateNSCP3(ByVal str_SPName As String, _
                            ByRef l_RetVal As Long, _
                            ByVal l_RecordID As Long, _
                            ByVal str_OrigSupplierNum As String, _
                            ByVal str_OrigSupplierName As String, _
                            ByVal str_DetailedDesc As String, _
                            ByVal str_Keyword As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    UpdateNSCP3 = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                Array("vi_id", adInteger, 10, l_RecordID), _
                Array("vi_orig_supplier_num", adChar, 50, str_OrigSupplierNum), _
                Array("vi_orig_supplier_name", adChar, 50, str_OrigSupplierName), _
                Array("vi_detailed_desc", adChar, 500, str_DetailedDesc), _
                Array("vi_keyword", adChar, 50, str_Keyword))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateNSCP3", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchNSCPPartBy2Fields(ByVal str_SPName As String, _
                                        ByVal str_SupplierNumber As String, _
                                        ByVal str_SupplierName As String) _
                                                                As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchNSCPPartBy2Fields = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                        Array("vi_orig_supplier_num", adChar, 50, str_SupplierNumber), _
                        Array("vi_orig_supplier_name", adChar, 50, str_SupplierName))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchNSCPPartBy2Fields", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function InsertIntoAuditModifyHistory(ByVal str_SPName As String, _
    ByRef l_RetVal As Long, ByVal str_Action As String, _
    ByVal str_EstimateNumber As String, ByVal str_EstimateType As String, _
    ByVal str_Ref1 As String, ByVal str_Ref2 As String, _
    Optional ByVal str_Ref3 As String = "", Optional ByVal str_Ref4 As String = "", _
    Optional ByVal str_Ref5 As String = "", Optional ByVal str_Ref6 As String = "", _
    Optional ByVal str_Ref7 As String = "", Optional ByVal str_Ref8 As String = "", _
    Optional ByVal str_Ref9 As String = "", Optional ByVal str_Ref10 As String = "", _
    Optional ByVal str_Ref11 As String = "", Optional ByVal str_Ref12 As String = "", _
    Optional ByVal str_Ref13 As String = "", Optional ByVal str_Ref14 As String = "", _
    Optional ByVal str_Ref15 As String = "", Optional ByVal str_Ref16 As String = "", _
    Optional ByVal str_Ref17 As String = "", Optional ByVal str_Ref18 As String = "", _
    Optional ByVal str_Ref19 As String = "", Optional ByVal str_Ref20 As String = "", _
    Optional ByVal str_Ref21 As String = "", Optional ByVal str_Ref22 As String = "", _
    Optional ByVal str_Ref23 As String = "", Optional ByVal str_Ref24 As String = "", _
    Optional ByVal str_Ref25 As String = "", Optional ByVal str_Ref26 As String = "", _
    Optional ByVal str_Ref27 As String = "", Optional ByVal str_Ref28 As String = "", _
    Optional ByVal str_Ref29 As String = "", Optional ByVal str_Ref30 As String = "", _
    Optional ByVal str_Ref31 As String = "", Optional ByVal str_Ref32 As String = "", _
    Optional ByVal str_Ref33 As String = "", Optional ByVal str_Ref34 As String = "", _
    Optional ByVal str_Ref35 As String = "", Optional ByVal str_Ref36 As String = "", _
    Optional ByVal str_Ref37 As String = "", Optional ByVal str_Ref38 As String = "") _
                                                                                As Long
    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    InsertIntoAuditModifyHistory = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
Array("vi_user_name", adChar, 15, g_str_UserName), _
Array("vi_action", adChar, 500, str_Action), _
Array("vi_estimate_number", adChar, 500, str_EstimateNumber), _
Array("vi_estimate_type", adChar, 4, str_EstimateType), _
Array("vi_ref_1", adChar, 500, str_Ref1), Array("vi_ref_2", adChar, 500, str_Ref2), _
Array("vi_ref_3", adChar, 500, str_Ref3), Array("vi_ref_4", adChar, 500, str_Ref4), _
Array("vi_ref_5", adChar, 500, str_Ref5), Array("vi_ref_6", adChar, 500, str_Ref6), _
Array("vi_ref_7", adChar, 500, str_Ref7), Array("vi_ref_8", adChar, 500, str_Ref8), _
Array("vi_ref_9", adChar, 500, str_Ref9), Array("vi_ref_10", adChar, 500, str_Ref10), _
Array("vi_ref_11", adChar, 500, str_Ref11), Array("vi_ref_12", adChar, 500, str_Ref12), _
Array("vi_ref_13", adChar, 500, str_Ref13), Array("vi_ref_14", adChar, 500, str_Ref14), _
Array("vi_ref_15", adChar, 500, str_Ref15), Array("vi_ref_16", adChar, 500, str_Ref16), _
Array("vi_ref_17", adChar, 500, str_Ref17), Array("vi_ref_18", adChar, 500, str_Ref18), _
Array("vi_ref_19", adChar, 500, str_Ref19), Array("vi_ref_20", adChar, 500, str_Ref20), _
Array("vi_ref_21", adChar, 500, str_Ref21), Array("vi_ref_22", adChar, 500, str_Ref22), _
Array("vi_ref_23", adChar, 500, str_Ref23), Array("vi_ref_24", adChar, 500, str_Ref24), _
Array("vi_ref_25", adChar, 500, str_Ref25), Array("vi_ref_26", adChar, 500, str_Ref26), _
Array("vi_ref_27", adChar, 500, str_Ref27), Array("vi_ref_28", adChar, 500, str_Ref28), _
Array("vi_ref_29", adChar, 500, str_Ref29), Array("vi_ref_30", adChar, 500, str_Ref30), _
Array("vi_ref_31", adChar, 500, str_Ref31), Array("vi_ref_32", adChar, 500, str_Ref32), _
Array("vi_ref_33", adChar, 500, str_Ref33), Array("vi_ref_34", adChar, 500, str_Ref34), _
Array("vi_ref_35", adChar, 500, str_Ref35), Array("vi_ref_36", adChar, 500, str_Ref36), _
Array("vi_ref_37", adChar, 500, str_Ref37), Array("vi_ref_38", adChar, 500, str_Ref38))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "InsertIntoAuditModifyHistory", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function FindSupplierNameByNumber(ByVal str_SPName As String, _
                                         ByVal str_SupplierNumber As String) _
                                                                    As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set FindSupplierNameByNumber = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                        Array("vi_orig_supplier_num", adChar, 50, str_SupplierNumber))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "FindSupplierNameByNumber", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function PropagateNSCPChanges(ByVal str_SPName As String, _
                                     ByRef l_RetVal As Long, _
                                     ByVal str_OrigSuppNum As String, _
                                     ByVal str_OrigSuppName As String, _
                                     ByVal cur_Cost As Currency, _
                                     ByVal l_ID As Long) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    PropagateNSCPChanges = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_orig_supp_num", adChar, 50, str_OrigSuppNum), _
                            Array("vi_orig_supp_name", adChar, 50, str_OrigSuppName), _
                            Array("vi_cost", adNumeric, 20, cur_Cost), _
                            Array("vi_id", adInteger, 10, l_ID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "PropagateNSCPChanges", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function PropagateRBPChanges(ByVal str_SPName As String, _
                                     ByRef l_RetVal As Long, _
                                     ByVal cur_Cost As Currency, _
                                     ByVal str_RBNumber As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    PropagateRBPChanges = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_cost", adNumeric, 20, cur_Cost), _
                            Array("vi_reb_number", adChar, 50, str_RBNumber))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "PropagateRBPChanges", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetNSCPartsUsedBySupplier(ByVal str_SPName As String, _
                                         ByVal str_SupplierNumber As String, _
                                         ByVal str_SupplierName As String) _
                                                                    As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set GetNSCPartsUsedBySupplier = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                        Array("vi_orig_supplier_num", adChar, 50, str_SupplierNumber), _
                        Array("vi_orig_supplier_name", adChar, 50, str_SupplierName))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetNSCPartsUsedBySupplier", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveRBPUsedDistinct(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveRBPUsedDistinct = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveRBPUsedDistinct", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveRBPUsedLinks(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveRBPUsedLinks = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveRBPUsedLinks", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveRBPToPropagateRB(ByVal str_SPName As String, _
                                         ByVal str_LinkCode As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveRBPToPropagateRB = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_idnum", adChar, 30, str_LinkCode))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveRBPToPropagateRB", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveRBPToPropagateNSC(ByVal str_SPName As String, _
                                         ByVal l_ID As Long) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveRBPToPropagateNSC = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                                Array("vi_idnum", adInteger, 10, l_ID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveRBPToPropagateNSC", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveRBPToPropagateSAL(ByVal str_SPName As String, _
                                          ByVal l_WageGroup As Long) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveRBPToPropagateSAL = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                                Array("vi_idnum", adInteger, 10, l_WageGroup))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveRBPToPropagateSAL", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveRBPToPropagateLAB(ByVal str_SPName As String, _
                                          ByVal str_LabourDefn As String) _
                                                                       As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveRBPToPropagateLAB = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                                Array("vi_idnum", adChar, 50, str_LabourDefn))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveRBPToPropagateLAB", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveESTToPropagateRB(ByVal str_SPName As String, _
                                         ByVal str_LinkCode As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveESTToPropagateRB = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_idnum", adChar, 30, str_LinkCode))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveESTToPropagateRB", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveRBPTotalCost(ByVal str_SPName As String, _
                                     ByVal str_RBNumber As String, _
                                     ByVal str_TypeID As String) As Currency
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    RetrieveRBPTotalCost = m_obj_clsDb.RunFNReturnNumber(str_SPName, _
                                    Array("vi_rbnum", adChar, 30, str_RBNumber), _
                                    Array("vi_link_type", adChar, 5, str_TypeID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveRBPTotalCost", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveRBPTotalCost2(ByVal str_SPName As String, _
                                     ByVal str_RBNumber As String, _
                                     ByVal str_TypeID As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    
    Set RetrieveRBPTotalCost2 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                                    Array("vi_rbnum", adChar, 30, str_RBNumber), _
                                    Array("vi_link_type", adChar, 5, str_TypeID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveRBPTotalCost2", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function


Public Function RetrieveKITTotalCost(ByVal str_SPName As String, _
                                     ByRef l_RetVal As Long, _
                                     ByVal str_PartNumber As String) As Currency
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    RetrieveKITTotalCost = m_obj_clsDb.RunFNReturnNumber(str_SPName, l_RetVal, _
                                    Array("vi_idnum", adChar, 25, str_PartNumber))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveKITTotalCost", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveKITToPropagateNSC(ByVal str_SPName As String, _
                                         ByVal l_ID As Long) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveKITToPropagateNSC = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                                Array("vi_idnum", adInteger, 10, l_ID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveKITToPropagateNSC", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveBusFromKitsUsed(ByVal str_SPName As String, _
                                        ByVal str_KitNumber As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveBusFromKitsUsed = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                                Array("vi_kit_number", adChar, 30, str_KitNumber))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveBusFromKitsUsed", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function CopyVehicleEstimate(ByVal str_SPName As String, _
                                     ByRef l_RetVal As Long, _
                                     ByVal l_ListID As Long, _
                                     ByVal str_BusSeries As String, _
                                     ByVal str_Description As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    CopyVehicleEstimate = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_list_id", adInteger, 10, l_ListID), _
                            Array("vi_bus_series", adChar, 75, str_BusSeries), _
                            Array("vi_description", adChar, 200, str_Description), _
                            Array("vi_entered_by", adChar, 25, g_str_UserName))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "CopyVehicleEstimate", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function CopyMBEstimate(ByVal str_SPName As String, _
                                     ByRef l_RetVal As Long, _
                                     ByVal str_MBNumber As String, _
                                     ByVal str_NewMBNumber As String, _
                                     ByVal str_Keyword As String, _
                                     ByVal str_RebuildNumber As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    CopyMBEstimate = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_mb_number", adChar, 20, str_MBNumber), _
                            Array("vi_new_mb_number", adChar, 20, str_NewMBNumber), _
                            Array("vi_keyword", adChar, 75, str_Keyword), _
                            Array("vi_rebuild_number", adChar, 20, str_RebuildNumber), _
                            Array("vi_entered_by", adChar, 25, g_str_UserName))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "CopyMBEstimate", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function CopyRBEstimate(ByVal str_SPName As String, _
                                     ByRef l_RetVal As Long, _
                                     ByVal str_RBNumber As String, _
                                     ByVal str_NewRBNumber As String, _
                                     ByVal str_Keyword As String, _
                                     ByVal str_MMSStockCode As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    CopyRBEstimate = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_rb_number", adChar, 20, str_RBNumber), _
                            Array("vi_new_rb_number", adChar, 20, str_NewRBNumber), _
                            Array("vi_keyword", adChar, 75, str_Keyword), _
                            Array("vi_description", adChar, 20, str_MMSStockCode), _
                            Array("vi_entered_by", adChar, 25, g_str_UserName))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "CopyRBEstimate", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAudit1(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAudit1 = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAudit1", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAudit2(ByVal str_SPName As String, _
                                ByVal str_DateFrom As String, _
                                ByVal str_DateTo As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAudit2 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_date_from", adChar, 20, str_DateFrom), _
                            Array("vi_date_to", adChar, 20, str_DateTo))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAudit2", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAudit3(ByVal str_SPName As String, _
                               ByVal str_EstimateType As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAudit3 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_estimate_type", adChar, 4, str_EstimateType))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAudit3", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAudit4(ByVal str_SPName As String, _
                                ByVal str_UserName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAudit4 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_user_name", adChar, 15, str_UserName))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAudit4", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAudit5(ByVal str_SPName As String, _
                                ByVal str_UserName As String, _
                                ByVal str_DateFrom As String, _
                                ByVal str_DateTo As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAudit5 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_user_name", adChar, 15, str_UserName), _
                            Array("vi_date_from", adChar, 20, str_DateFrom), _
                            Array("vi_date_to", adChar, 20, str_DateTo))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAudit5", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAudit6(ByVal str_SPName As String, _
                               ByVal str_EstimateNumber As String, _
                               ByVal str_EstimateType As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAudit6 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                        Array("vi_estimate_number", adChar, 500, str_EstimateNumber), _
                        Array("vi_estimate_type", adChar, 4, str_EstimateType))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAudit6", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAudit7(ByVal str_SPName As String, _
                               ByVal str_EstimateNumber As String, _
                               ByVal str_EstimateType As String, _
                               ByVal str_DateFrom As String, _
                               ByVal str_DateTo As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAudit7 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                        Array("vi_estimate_number", adChar, 500, str_EstimateNumber), _
                        Array("vi_estimate_type", adChar, 4, str_EstimateType), _
                        Array("vi_date_from", adChar, 20, str_DateFrom), _
                        Array("vi_date_to", adChar, 20, str_DateTo))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAudit7", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAudit8(ByVal str_SPName As String, _
                               ByVal str_EstimateNumber As String, _
                               ByVal str_EstimateType As String, _
                               ByVal str_UserName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAudit8 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                        Array("vi_estimate_number", adChar, 500, str_EstimateNumber), _
                        Array("vi_estimate_type", adChar, 4, str_EstimateType), _
                        Array("vi_user_name", adChar, 15, str_UserName))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAudit8", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAudit9(ByVal str_SPName As String, _
                               ByVal str_EstimateNumber As String, _
                               ByVal str_EstimateType As String, _
                               ByVal str_UserName As String, _
                               ByVal str_DateFrom As String, _
                               ByVal str_DateTo As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAudit9 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                        Array("vi_estimate_number", adChar, 500, str_EstimateNumber), _
                        Array("vi_estimate_type", adChar, 4, str_EstimateType), _
                        Array("vi_user_name", adChar, 15, str_UserName), _
                        Array("vi_date_from", adChar, 20, str_DateFrom), _
                        Array("vi_date_to", adChar, 20, str_DateTo))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAudit9", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAudit10(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAudit10 = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAudit10", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAudit11(ByVal str_SPName As String, _
                                ByVal str_DateFrom As String, _
                                ByVal str_DateTo As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAudit11 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_date_from", adChar, 20, str_DateFrom), _
                            Array("vi_date_to", adChar, 20, str_DateTo))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAudit11", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAudit12(ByVal str_SPName As String, _
                                ByVal str_UserName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAudit12 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_user_name", adChar, 15, str_UserName))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAudit12", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAudit13(ByVal str_SPName As String, _
                                ByVal str_UserName As String, _
                                ByVal str_DateFrom As String, _
                                ByVal str_DateTo As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAudit13 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_user_name", adChar, 15, str_UserName), _
                            Array("vi_date_from", adChar, 20, str_DateFrom), _
                            Array("vi_date_to", adChar, 20, str_DateTo))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAudit13", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAudit14(ByVal str_SPName As String, _
                                ByVal str_EstimateType As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAudit14 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_estimate_type", adChar, 4, str_EstimateType))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAudit14", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAudit15(ByVal str_SPName As String, _
                                ByVal str_EstimateType As String, _
                                ByVal str_DateFrom As String, _
                                ByVal str_DateTo As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAudit15 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_estimate_type", adChar, 4, str_EstimateType), _
                            Array("vi_date_from", adChar, 20, str_DateFrom), _
                            Array("vi_date_to", adChar, 20, str_DateTo))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAudit15", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAudit16(ByVal str_SPName As String, _
                                ByVal str_EstimateType As String, _
                                ByVal str_UserName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAudit16 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_estimate_type", adChar, 4, str_EstimateType), _
                            Array("vi_user_name", adChar, 15, str_UserName))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAudit16", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAudit17(ByVal str_SPName As String, _
                                ByVal str_EstimateType As String, _
                                ByVal str_UserName As String, _
                                ByVal str_DateFrom As String, _
                                ByVal str_DateTo As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAudit17 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_estimate_type", adChar, 4, str_EstimateType), _
                            Array("vi_user_name", adChar, 15, str_UserName), _
                            Array("vi_date_from", adChar, 20, str_DateFrom), _
                            Array("vi_date_to", adChar, 20, str_DateTo))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAudit17", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteAllLabourSummary(ByVal str_SPName As String, _
                                       ByRef l_RetVal As Long) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteAllLabourSummary = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal)
    
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteAllLabourSummary", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteAllMaterialSummary(ByVal str_SPName As String, _
                                       ByRef l_RetVal As Long) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteAllMaterialSummary = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal)
    
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteAllMaterialSummary", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function


Public Function InsertAllLabourSummary(ByVal str_SPName As String, _
                                       ByRef l_RetVal As Long, _
                                       ByVal str_LabourType As String, _
                                       ByVal str_CostCentre As String, _
                                       ByVal str_Task As String, _
                                       ByVal str_Usage As String, _
                                       ByVal str_Time As String, _
                                       ByVal str_WrenchTime As String, _
                                       ByVal str_RatePerHour As String, _
                                       ByVal str_TotalCost As String, _
                                       ByVal str_ExtendedTime As String, _
                                       ByVal str_EstimateType As String, _
                                       ByVal str_EstimateNumber As String) As Long
    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    InsertAllLabourSummary = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                    Array("vi_labour_type", adChar, 50, str_LabourType), _
                    Array("vi_cost_centre", adChar, 4, str_CostCentre), _
                    Array("vi_task", adChar, 200, str_Task), _
                    Array("vi_usage", adNumeric, 20, str_Usage), _
                    Array("vi_time", adNumeric, 20, str_Time), _
                    Array("vi_wrench_time", adChar, 8, str_WrenchTime), _
                    Array("vi_rate_per_hour", adNumeric, 20, str_RatePerHour), _
                    Array("vi_total_cost", adNumeric, 20, str_TotalCost), _
                    Array("vi_extended_time", adChar, 8, str_ExtendedTime), _
                    Array("vi_estimate_type", adChar, 3, str_EstimateType), _
                    Array("vi_estimate_number", adChar, 25, str_EstimateNumber))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "InsertAllLabourSummary", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function InsertAllMaterialSummary(ByVal str_SPName As String, _
                                       ByRef l_RetVal As Long, _
                                       ByVal str_CostCentre As String, _
                                       ByVal str_TotalCost As String, _
                                       ByVal str_TaxableCost As String, _
                                       ByVal str_RB_Reference As String) As Long
    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    InsertAllMaterialSummary = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                    Array("vi_cost_centre", adChar, 5, str_CostCentre), _
                    Array("vi_total_cost", adNumeric, 25, str_TotalCost), _
                    Array("vi_taxable_cost", adNumeric, 25, str_TaxableCost), _
                    Array("vi_rb_reference", adChar, 25, str_RB_Reference))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "InsertAllMaterialSummary", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAllLabourSummary(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAllLabourSummary = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAllLabourSummary", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveAllMaterialSummary(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveAllMaterialSummary = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveAllMaterialSummary", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveSCPUsedROWID(ByVal str_SPName As String, _
                                ByVal str_RowID As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveSCPUsedROWID = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_str_ROWID", adChar, 50, str_RowID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveSCPUsedROWID", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function RetrieveNSCPUsedROWID(ByVal str_SPName As String, _
                                ByVal str_RowID As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set RetrieveNSCPUsedROWID = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                            Array("vi_str_ROWID", adChar, 50, str_RowID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "RetrieveNSCPUsedROWID", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function FindBusDescription(ByVal str_SPName As String, _
                                   ByVal str_BusDescription As String) As ADODB.Recordset
    On Error GoTo Error_Handler
          
    Set m_obj_clsDb = New clsDB
    Set FindBusDescription = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                        Array("vi_bus_description", adChar, 500, str_BusDescription))
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "FindBusDescription", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateBusDescription(ByVal str_SPName As String, _
                                     ByRef l_RetVal As Long, _
                                     ByVal str_BusDescription As String, _
                                     ByVal str_NewBusDescription As String, _
                                     ByVal m_l_BusDescriptionID As Long) As Long
    On Error GoTo Error_Handler
          
    Set m_obj_clsDb = New clsDB
    UpdateBusDescription = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
            Array("vi_list_id", adInteger, 10, m_l_BusDescriptionID), _
            Array("vi_bus_description", adChar, 500, str_BusDescription), _
            Array("vi_new_bus_description", adChar, 500, str_NewBusDescription))

    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateBusDescription", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetKitParts(ByVal str_SPName As String, _
                            ByVal str_LinkCode As String, _
                            ByVal str_LinkType As String, _
                            ByVal str_RebuiltPartChoice As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set GetKitParts = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                        Array("vi_link_code", adChar, 30, str_LinkCode), _
                        Array("vi_link_type", adChar, 3, str_LinkType), _
                        Array("vi_rebuilt_part_choice", adChar, 1, str_RebuiltPartChoice))
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetKitParts", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetSubKits(ByVal str_SPName As String, _
                            ByVal str_KitPartNumber As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set GetSubKits = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                          Array("vi_kit_part_number", adChar, 30, str_KitPartNumber))
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetSubKits", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function InsertSubKits(ByVal str_SPName As String, _
                              ByRef l_RetVal As Long, _
                              ByVal str_KitPartNumber As String, _
                              ByVal str_PartType As String, _
                              ByVal str_SupplierNumber As String, _
                              ByVal str_SupplierName As String, _
                              ByVal str_StockCode As String, _
                              ByVal str_QTY As String, _
                              ByVal str_SubKitLetter As String, _
                              ByVal str_Description As String, _
                              ByVal l_Sequence As Long) As Long
    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    InsertSubKits = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                    Array("vi_kit_part_number", adChar, 30, str_KitPartNumber), _
                    Array("vi_part_type", adChar, 3, str_PartType), _
                    Array("vi_supplier_number", adChar, 50, str_SupplierNumber), _
                    Array("vi_supplier_name", adChar, 50, str_SupplierName), _
                    Array("vi_stock_code", adChar, 30, str_StockCode), _
                    Array("vi_qty", adChar, 10, str_QTY), _
                    Array("vi_sub_kit_letter", adChar, 5, str_SubKitLetter), _
                    Array("vi_description", adChar, 500, str_Description), _
                    Array("vi_sequence", adInteger, 10, l_Sequence))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "InsertSubKits", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteSubKits(ByVal str_SPName As String, _
                              ByRef l_RetVal As Long, _
                              ByVal str_KitPartNumber As String) As Long
                              
    On Error GoTo Error_Handler
          
    Set m_obj_clsDb = New clsDB
    DeleteSubKits = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                             Array("vi_kit_part_number", adChar, 30, str_KitPartNumber))
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteSubKits", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateSubKits(ByVal str_SPName As String, _
                              ByRef l_RetVal As Long, _
                              ByVal str_KitPartNumber As String, _
                              ByVal str_SupplierNumber As String, _
                              ByVal str_SupplierName As String, _
                              ByVal str_StockCode As String, _
                              ByVal str_QTY As String, _
                              ByVal str_Description As String) As Long
    On Error GoTo Error_Handler
          
    Set m_obj_clsDb = New clsDB
    UpdateSubKits = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                        Array("vi_kit_part_number", adChar, 30, str_KitPartNumber), _
                        Array("vi_supplier_number", adChar, 50, str_SupplierNumber), _
                        Array("vi_supplier_name", adChar, 50, str_SupplierName), _
                        Array("vi_stock_code", adChar, 30, str_StockCode), _
                        Array("vi_qty", adChar, 10, str_QTY), _
                        Array("vi_description", adChar, 500, str_Description))
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateSubKits", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateSubKits1(ByVal str_SPName As String, _
                               ByRef l_RetVal As Long, _
                               ByVal str_SupplierNumber As String, _
                               ByVal str_SupplierName As String, _
                               ByVal str_Description As String) As Long
    On Error GoTo Error_Handler
          
    Set m_obj_clsDb = New clsDB
    UpdateSubKits1 = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                        Array("vi_supplier_number", adChar, 50, str_SupplierNumber), _
                        Array("vi_supplier_name", adChar, 50, str_SupplierName), _
                        Array("vi_description", adChar, 500, str_Description))
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateSubKits1", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteSubKits1(ByVal str_SPName As String, _
                               ByRef l_RetVal As Long, _
                               ByVal str_KitPartNumber As String, _
                               ByVal str_SupplierNumber As String, _
                               ByVal str_SupplierName As String, _
                               ByVal str_StockCode As String) As Long
    On Error GoTo Error_Handler
          
    Set m_obj_clsDb = New clsDB
    DeleteSubKits1 = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                        Array("vi_kit_part_number", adChar, 30, str_KitPartNumber), _
                        Array("vi_supplier_number", adChar, 50, str_SupplierNumber), _
                        Array("vi_supplier_name", adChar, 50, str_SupplierName), _
                        Array("vi_stock_code", adChar, 30, str_StockCode))
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteSubKits1", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetAllFromSubKits(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
          
    Set m_obj_clsDb = New clsDB
    Set GetAllFromSubKits = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetAllFromSubKits", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteAllSubKits(ByVal str_SPName As String, _
                                 ByRef l_RetVal As Long) As Long
    On Error GoTo Error_Handler
          
    Set m_obj_clsDb = New clsDB
    DeleteAllSubKits = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal)
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteAllSubKits", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateOverheadFringe(ByVal str_SPName As String, _
                                     ByRef l_RetVal As Long, _
                                     ByVal str_UseOverheadFringe As String, _
                                     ByVal str_UserName As String) As Long
    On Error GoTo Error_Handler
          
    Set m_obj_clsDb = New clsDB
    UpdateOverheadFringe = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                    Array("vi_use_overhead_fringe", adChar, 1, str_UseOverheadFringe), _
                    Array("vi_username", adChar, 15, str_UserName))
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateOverheadFringe", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteCleanNSCP1(ByVal str_SPName As String, _
                                 ByRef l_RetVal As Long) As Long
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteCleanNSCP1 = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal)
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteCleanNSCP1", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteCleanNSCP2(ByVal str_SPName As String, _
                                 ByRef l_RetVal As Long) As Long
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    On Error GoTo Error_Handler
          
    Set m_obj_clsDb = New clsDB
    DeleteCleanNSCP2 = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal)
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteCleanNSCP2", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetNSCPClean1(ByVal str_SPName As String) As ADODB.Recordset
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    Dim m_obj_clsDb As clsDB

    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set GetNSCPClean1 = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetNSCPClean1", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteCleanNSCP3(ByVal str_SPName As String, _
                                 ByRef l_RetVal As Long) As Long
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    On Error GoTo Error_Handler
          
    Set m_obj_clsDb = New clsDB
    DeleteCleanNSCP3 = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal)
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteCleanNSCP3", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetNSCPClean2(ByVal str_SPName As String, _
                              ByVal str_Passed As String) As ADODB.Recordset
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    Dim m_obj_clsDb As clsDB

    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set GetNSCPClean2 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                          Array("vi_orig_supp_num", adChar, 50, str_Passed))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetNSCPClean2", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteCleanNSCP4(ByVal str_SPName As String, _
                                 ByRef l_RetVal As Long, _
                                 ByVal str_Passed As String) As Long
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    On Error GoTo Error_Handler
          
    Set m_obj_clsDb = New clsDB
    DeleteCleanNSCP4 = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_orig_supplier_num", adChar, 50, str_Passed))
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteCleanNSCP4", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetNSCPClean3(ByVal str_SPName As String) As ADODB.Recordset
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    Dim m_obj_clsDb As clsDB

    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set GetNSCPClean3 = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetNSCPClean3", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteCleanNSCP5(ByVal str_SPName As String, _
                                 ByRef l_RetVal As Long) As Long
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    On Error GoTo Error_Handler
          
    Set m_obj_clsDb = New clsDB
    DeleteCleanNSCP5 = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal)
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteCleanNSCP5", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetNSCPClean4(ByVal str_SPName As String, _
                              ByVal str_Passed As String) As ADODB.Recordset
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    Dim m_obj_clsDb As clsDB

    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set GetNSCPClean4 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                          Array("vi_orig_supp_name", adChar, 50, str_Passed))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetNSCPClean4", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteCleanNSCP6(ByVal str_SPName As String, _
                                 ByRef l_RetVal As Long, _
                                 ByVal str_Passed As String) As Long
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    On Error GoTo Error_Handler
          
    Set m_obj_clsDb = New clsDB
    DeleteCleanNSCP6 = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_orig_supplier_num", adChar, 50, str_Passed))
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteCleanNSCP6", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetNSCPClean5(ByVal str_SPName As String) As ADODB.Recordset
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    Dim m_obj_clsDb As clsDB

    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set GetNSCPClean5 = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetNSCPClean5", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteCleanNSCP7(ByVal str_SPName As String, _
                                 ByRef l_RetVal As Long) As Long
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    On Error GoTo Error_Handler
          
    Set m_obj_clsDb = New clsDB
    DeleteCleanNSCP7 = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal)
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteCleanNSCP7", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetNSCPClean6(ByVal str_SPName As String, _
                              ByVal l_PartID As Long) As ADODB.Recordset
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set GetNSCPClean6 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                        Array("vi_id", adInteger, 10, l_PartID))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetNSCPClean6", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateCleanNSCP1(ByVal str_SPName As String, _
                                 ByRef l_RetVal As Long, _
                                 l_PartID As Long) As Long
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    On Error GoTo Error_Handler
          
    Set m_obj_clsDb = New clsDB
    UpdateCleanNSCP1 = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                        Array("vi_id", adInteger, 10, l_PartID))
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateCleanNSCP1", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetNSCPClean7(ByVal str_SPName As String) As ADODB.Recordset
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    Dim m_obj_clsDb As clsDB

    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set GetNSCPClean7 = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetNSCPClean7", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetNSCPClean8(ByVal str_SPName As String, _
                              ByVal str_OrigSupplierNum As String, _
                              ByVal str_Orig_SupplierName As String) As ADODB.Recordset
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    Dim m_obj_clsDb As clsDB

    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set GetNSCPClean8 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                          Array("vi_orig_supplier_num", adChar, 50, str_OrigSupplierNum), _
                          Array("vi_orig_supplier_name", adChar, 50, str_Orig_SupplierName))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetNSCPClean8", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function UpdateCleanNSCP2(ByVal str_SPName As String, _
                                 ByRef l_RetVal As Long) As Long
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    On Error GoTo Error_Handler
          
    Set m_obj_clsDb = New clsDB
    UpdateCleanNSCP2 = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal)
    Set m_obj_clsDb = Nothing
          
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "UpdateCleanNSCP2", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetNSCPClean9(ByVal str_SPName As String) As ADODB.Recordset
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    Dim m_obj_clsDb As clsDB

    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set GetNSCPClean9 = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetNSCPClean9", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetNSCPClean10(ByVal str_SPName As String) As ADODB.Recordset
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    Dim m_obj_clsDb As clsDB

    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set GetNSCPClean10 = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetNSCPClean10", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetNSCPClean11(ByVal str_SPName As String) As ADODB.Recordset
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    Dim m_obj_clsDb As clsDB

    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set GetNSCPClean11 = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetNSCPClean11", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetNSCPClean12(ByVal str_SPName As String) As ADODB.Recordset
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    Dim m_obj_clsDb As clsDB

    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set GetNSCPClean12 = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetNSCPClean12", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetNSCPClean13(ByVal str_SPName As String) As ADODB.Recordset
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    Dim m_obj_clsDb As clsDB

    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set GetNSCPClean13 = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetNSCPClean13", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetNSCPClean14(ByVal str_SPName As String, _
                              ByVal str_OrigSupplierNum As String, _
                              ByVal str_Orig_SupplierName As String) As ADODB.Recordset
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    Dim m_obj_clsDb As clsDB

    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set GetNSCPClean14 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                          Array("vi_orig_supp_num", adChar, 50, str_OrigSupplierNum), _
                          Array("vi_orig_supplier_name", adChar, 50, str_Orig_SupplierName))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetNSCPClean14", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetNSCPClean15(ByVal str_SPName As String, _
                              ByVal str_OrigSupplierNum As String, _
                              ByVal str_Orig_SupplierName As String) As ADODB.Recordset
    'Current function is used for cleaning the NON_STOCK_CODED_PARTS and
    'NSC_PARTS_USED tables only. Please do not use it somewhere else.
    Dim m_obj_clsDb As clsDB

    On Error GoTo Error_Handler

    Set m_obj_clsDb = New clsDB
    Set GetNSCPClean15 = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                          Array("vi_orig_supplier_num", adChar, 50, str_OrigSupplierNum), _
                          Array("vi_orig_supplier_name", adChar, 50, str_Orig_SupplierName))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetNSCPClean15", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function SearchRBPartBusSeries(ByVal str_SPName As String, _
                             ByVal str_RebuiltNumber As String, _
                             ByVal str_Description As String, _
                             ByVal str_Keyword As String, _
                             ByVal l_BusSeriesID As Long, _
                             ByVal l_SearchOption As Long) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set SearchRBPartBusSeries = m_obj_clsDb.RunSPReturnRS(str_SPName, _
                        Array("vi_rebuilt_num", adChar, 30, str_RebuiltNumber), _
                        Array("vi_description", adChar, 250, str_Description), _
                        Array("vi_keyword", adChar, 250, str_Keyword), _
                        Array("vi_bus_series_id", adInteger, 10, l_BusSeriesID), _
                        Array("vi_search_option", adInteger, 10, l_SearchOption))
    Set m_obj_clsDb = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "SearchRBPartBusSeries", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function GetCostVarRS(ByVal str_SPName As String) As ADODB.Recordset
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    Set GetCostVarRS = m_obj_clsDb.RunSPReturnRS(str_SPName)
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "GetCostVarRS", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteMBEstimate(ByVal str_SPName As String, _
                         ByRef l_RetVal As Long, _
                         ByVal str_MBNumber As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteMBEstimate = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_mb_number", adChar, 25, str_MBNumber))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteMBEstimate", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteRBEstimate(ByVal str_SPName As String, _
                         ByRef l_RetVal As Long, _
                         ByRef str_RebuiltNumber As String) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteRBEstimate = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                        Array("vi_rb_num", adChar, 30, str_RebuiltNumber))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteRBEstimate", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

Public Function DeleteVehicleEstimateByID(ByVal str_SPName As String, _
                                      ByRef l_RetVal As Long, _
                                      ByRef str_LinkCode As String, _
                                      ByVal l_VehicleListID As Long) As Long
    On Error GoTo Error_Handler
    
    Set m_obj_clsDb = New clsDB
    DeleteVehicleEstimateByID = m_obj_clsDb.RunFNReturnLong(str_SPName, l_RetVal, _
                            Array("vi_link_code", adChar, 25, str_LinkCode), _
                            Array("vi_vehicle_list_id", adInteger, 10, l_VehicleListID))
    Set m_obj_clsDb = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    LogErrorToDB "modDBHelper", "DeleteVehicleEstimateByID", g_l_ErrorLineNumber
    If Not m_obj_clsDb Is Nothing Then
        Set m_obj_clsDb = Nothing
    End If
End Function

modMain.bas :
Option Explicit

Private m_str_Msg As String
Public g_Conn As ADODB.Connection
Public g_l_ConnectionType As Long 'TestDB = 1, DevDB = 0
Public g_l_AccessLevel As Long
Public g_str_UserName As String
Public g_str_Password As String
'Next variable will be set in the frmMain, MDIForm_Load(...) sub. Do not change this
'variable in any other places, just use it!!!
Public g_dbl_NonProductiveTimeAdj As Double
'Next value will hold data from the USERS.USE_OVERHEAD_FRINGE field.
Public g_str_UseOverheadFringe As String
'Next variable will hold data:
' a. Or from the CES_SETTINGS.OVERHEAD - if g_str_UseOverheadFringe="O"
' b. Or from the CES_SETTINGS.FRINGE - if g_str_UseOverheadFringe="F"
Public g_dbl_OverheadFringeValue As Double

Public g_str_MSWordDocumentPath As String

Public Const g_const_str_DefaultPassword As String = "12345"

'Next variable will be used for the error-trapping. It will hold line number where
'error(s) happened.
Public g_l_ErrorLineNumber As Long

'All API declarations should be here, adn they should have be a Public.
Public Declare Function ShellExecute Lib "shell32.dll" Alias "ShellExecuteA" ( _
                       ByVal l_Hwnd As Long, _
                       ByVal str_Op As String, _
                       ByVal str_File As String, _
                       ByVal str_Params As String, _
                       ByVal str_Dir As String, _
                       ByVal l_FsShowCmd As Long) As Long
                       
Public Declare Function GetDesktopWindow Lib "user32" () As Long

Public Declare Function SetWindowPos Lib "user32" (ByVal hWnd As Long, _
    ByVal hWndInsertAfter As Long, ByVal x As Long, ByVal y As Long, _
    ByVal cx As Long, ByVal cy As Long, ByVal uFlags As Long) As Long

' SetWindowPos constants:
Public Const HWND_TOPMOST = -1
Public Const HWND_NOTOPMOST = -2

Public Const SWP_NOSIZE = &H1
Public Const SWP_NOMOVE = &H2
Public Const SWP_NOACTIVATE = &H10

Private Const g_const_LWA_ALPHA = &H2
Private Const g_const_GWL_EXSTYLE = (-20)
Private Const g_const_WS_EX_LAYERED = &H80000

Private Declare Function GetWindowLong Lib "user32" _
    Alias "GetWindowLongA" (ByVal hWnd As Long, _
    ByVal nIndex As Long) As Long

Private Declare Function SetWindowLong Lib "user32" _
    Alias "SetWindowLongA" (ByVal hWnd As Long, _
    ByVal nIndex As Long, ByVal dwNewLong As Long) As Long

Private Declare Function SetLayeredWindowAttributes Lib "user32" _
    (ByVal hWnd As Long, ByVal crKey As Long, _
    ByVal bAlpha As Byte, ByVal dwFlags As Long) As Long

'Mouse Cursor Handles
Private m_l_hDefaultCursor As Long
Private m_l_hWaitCursor As Long

Private Declare Function GetCursor Lib "user32" () As Long
Private Declare Function LoadCursorFromFile Lib "user32" Alias "LoadCursorFromFileA" (ByVal lpFileName As String) As Long
Private Declare Function DestroyCursor Lib "user32" (ByVal hCur As Long) As Long
'Private Declare Function SetSystemCursor Lib "user32" (ByVal hcur As Long, ByVal id As Long) As Long
Private Declare Function SetCursor Lib "user32" (ByVal hCur As Long) As Long

Private Const OCR_NORMAL = 32512

Public Sub SetConnectionToDatabase()
    'Create connection to database. This connection will remain until user closed
    'frmMain form
    Dim str_ConnString As String
    
    On Error GoTo Error_Handler
    
    'Select connection string
    If g_l_ConnectionType = 0 Then
        str_ConnString = "Provider=MSDAORA.1;User ID=ces;Data Source=ces_dev;Persist Security Info=False;password=ces;timeout=60"
    ElseIf g_l_ConnectionType = 1 Then
        'str_ConnString = "Provider=MSDAORA.1;User ID=CES;Data Source=ces_tst;Persist Security Info=False;password=ces"
        str_ConnString = "Provider=MSDAORA.1;User ID=CES;Data Source=ces_dev;Persist Security Info=False;password=ces"
    ElseIf g_l_ConnectionType = 100 Then 'Production Database
        str_ConnString = "Provider=MSDAORA.1;User ID=ces;Data Source=ces_pd;Persist Security Info=False;password=cesprd1210"
        
    End If
    
    Set g_Conn = New ADODB.Connection
    g_Conn.ConnectionString = str_ConnString
    g_Conn.Open

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "SetConnectionToDatabase", g_l_ErrorLineNumber
End Sub

Public Sub SetWaitCursor()
    Dim l_RetVal As Long

    On Error GoTo Error_Handler
    
    l_RetVal = SetCursor(m_l_hWaitCursor)
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "SetWaitCursor", g_l_ErrorLineNumber
End Sub

Public Sub SetDefaultCursor()
    Dim l_RetVal As Long

    On Error GoTo Error_Handler
    
    l_RetVal = SetCursor(m_l_hDefaultCursor)
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "SetDefaultCursor", g_l_ErrorLineNumber
End Sub

Public Sub LoadCursors()
    Dim str_FilePath As String
    
    On Error GoTo Error_Handler
    
    str_FilePath = App.Path + "\hourgla2.ani"
    m_l_hWaitCursor = LoadCursorFromFile(str_FilePath)
    
    str_FilePath = "NORMAL01.CUR"
    m_l_hDefaultCursor = LoadCursorFromFile(str_FilePath)

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "LoadCursors", g_l_ErrorLineNumber
End Sub

Public Sub DestroyCursors()
    On Error GoTo Error_Handler

    DestroyCursor m_l_hDefaultCursor
    DestroyCursor m_l_hWaitCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "DestroyCursors", g_l_ErrorLineNumber
End Sub

'**Function no longer used**

'Checks the value passed in.  If the string is empty then it
'changes it to a '0', if not it keeps it the same.
'
'This is to change any inputted values that are supposed to be numbers
'to a valid number.  So if no number is entered, the value of 0 is assumed

'Public Function ChkCurr(ByVal str_Input As String) As String
'    On Error GoTo Error_Handler
'
'    If str_Input = "" Then
'        ChkCurr = "00"
'    Else
'        ChkCurr = str_Input
'    End If
'
'    Exit Function
'
'Error_Handler:
'    g_l_ErrorLineNumber = Erl()
'    modDBHelper.LogErrorToDB "modMain", "ChkCurr", g_l_ErrorLineNumber
'End Function

Public Function IsValidCurrency(ByVal str_Input As String) As Boolean
    Dim objRE As RegExp
    
    On Error GoTo Error_Handler
    
    Set objRE = New RegExp
    objRE.pattern = "\d+(\.\d{0,2})?"
 
    If objRE.Test(str_Input) Then
        IsValidCurrency = True
    Else
        IsValidCurrency = False
    End If
    Set objRE = Nothing

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "IsValidCurrency", g_l_ErrorLineNumber
    If Not objRE Is Nothing Then
        Set objRE = Nothing
    End If
End Function

Public Function IsValidLong(ByVal str_Input As String) As Boolean
    On Error GoTo Error_Handler
 
    If CCur(str_Input) = CLng(str_Input) Then
        IsValidLong = True
        Exit Function
    Else
        IsValidLong = False
        Exit Function
    End If
    
    'By default function return FALSE
    IsValidLong = False
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "IsValidLong", g_l_ErrorLineNumber
End Function

'This function opens an email ready to be sent through outlook.
Public Function SendEmail()
    Dim str_ESubject As String
    Dim str_EBody As String
    Dim str_NewFileName As String
    Dim obj_Outlook As Object
    Dim obj_OutlookItem As Object
    
    On Error GoTo Error_Handler
    
    str_ESubject = "Report from the Cost Estimate System"
    'SendTo = ""
    'CCTo = ""
    str_EBody = "Sending report generated from Cost Estimate System " & vbCrLf & vbCrLf
    str_NewFileName = "C:\Program Files\Project Plan\project_listing.rpt"
    
    Set obj_Outlook = CreateObject("Outlook.Application")
    Set obj_OutlookItem = obj_Outlook.CreateItem(0)
    
    obj_OutlookItem.Subject = str_ESubject
    'obj_OutlookItem.To = SendTo
    'obj_OutlookItem.CC = CCTo
    obj_OutlookItem.Body = str_EBody
    obj_OutlookItem.Attachments.Add (str_NewFileName) ' Must be complete path
    obj_OutlookItem.Display
    'obj_OutlookItem.send
    
    Set obj_OutlookItem = Nothing
    Set obj_Outlook = Nothing
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "SendEmail", g_l_ErrorLineNumber
    If Not obj_OutlookItem Is Nothing Then
        Set obj_OutlookItem = Nothing
    End If
    If Not obj_Outlook Is Nothing Then
        Set obj_Outlook = Nothing
    End If
End Function

'MakeParameter - does typesafe array creation for use with Run* functions
Public Function MakeParameter(ByVal str_Name As String, _
                              ByVal PType As ADODB.DataTypeEnum, _
                              ByVal n_Size As Integer, _
                              ByVal str_Value As String)
    On Error GoTo Error_Handler
    
    MakeParameter = Array(str_Name, PType, n_Size, str_Value)
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "MakeParameter", g_l_ErrorLineNumber
End Function

Public Sub CollectParams(ByRef cmd As Command, ParamArray argparams() As Variant)
    Dim var_Params As Variant
    Dim l_Count As Long
    Dim v As Variant
    
    On Error GoTo Error_Handler
    
    var_Params = argparams(0)
    For l_Count = LBound(var_Params) To UBound(var_Params)
        If UBound(var_Params(l_Count)) = 3 Then
            ' Check for nulls.
            If TypeName(var_Params(l_Count)(3)) = "String" Then
                v = IIf(var_Params(l_Count)(3) = "", Null, var_Params(l_Count)(3))
            ElseIf IsNumeric(var_Params(l_Count)(3)) Then
                v = IIf(var_Params(l_Count)(3) < 0, Null, var_Params(l_Count)(3))
            Else
                v = var_Params(l_Count)(3)
            End If
            cmd.Parameters.Append cmd.CreateParameter(var_Params(l_Count)(0), _
                                                      var_Params(l_Count)(1), _
                                                      adParamInput, _
                                                      var_Params(l_Count)(2), _
                                                      v)
        Else
            cmd.Parameters.Append cmd.CreateParameter(var_Params(l_Count)(0), _
                                                      var_Params(l_Count)(1), _
                                                      adParamInput, _
                                                      var_Params(l_Count)(2), _
                                                      var_Params(l_Count)(3))
        End If
    Next l_Count
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "CollectParams", g_l_ErrorLineNumber
End Sub

'================================================================================
'parseHours = takes in a string with a colon and parses the string by putting the values
'before and after the colon into 2 variables passed into the function
'================================================================================

Public Sub ParseHours(ByVal str_InputValue As String, _
                      ByRef var_Hours As Variant, _
                      ByRef var_Minutes As Variant)
    Dim temp 'temp array to hold values from the split function
    
    On Error GoTo Error_Handler
    
    temp = Split(str_InputValue, ":") 'splits the string into two at the first instance of ":"
    
    'the values before and after the ":" are saved into two variables passed in by reference
    var_Hours = temp(0) '
    
    'if no minutes were entered check and put 0 if empty
    'If UUBound(temp) < 1 Then
    '    minutes = 0
    'Else
    var_Minutes = temp(1)
   ' End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "ParseHours", g_l_ErrorLineNumber
End Sub

Public Sub AddTime(ByRef hours As Variant, ByRef minutes As Variant)
    Dim temp  'temp array to hold values from the split function
    Dim temp2
    
    On Error GoTo Error_Handler
    
    temp2 = hours
    
    'The minutes are passed already added together
    'we must maintain a base of 60, since minutes do not go higher than 59
    
    temp = RTrim(Round(minutes / 60, 3))
    temp = Split(temp, ".")
    temp(1) = (temp(1) / 100) * 60
    
    'add the hours added on
    hours = hours + temp(0) + temp2
    
    'the remainder of the division are the minutes
    minutes = temp(1)
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "AddTime", g_l_ErrorLineNumber
End Sub

Public Function MinutesToDecimal(ByVal minutes As Variant) As String
    Dim temp
    
    On Error GoTo Error_Handler
    
    temp = Round(minutes / 60, 2)
    
    If temp = 0 Then
        temp = 0
    Else
        temp = Split(temp, ".")
        MinutesToDecimal = temp(1)
    End If

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "MinutesToDecimal", g_l_ErrorLineNumber
End Function

'Grabs the size of the an array
Public Function UUBound(ByVal var_PassedArray As Variant) As Long
    Dim l_Size As Long
    
    On Error Resume Next
    
    l_Size = UBound(var_PassedArray) 'throws a subscript out of bounds error
    If Err = 9 Then
        UUBound = -1
    Else
        UUBound = l_Size
    End If
End Function

Public Function DecimalToMinutes(ByVal time As String) As String
    'Convert a number of hours into a time
    Dim hours As Integer
    Dim minutes As Integer
    Dim hours_s As String
    Dim minutes_s As String
    
    On Error GoTo Error_Handler
    
    hours = Int(time)
    minutes = (time - hours) * 60
    hours_s = hours
    minutes_s = minutes
    If Len(minutes_s) = 1 Then minutes_s = "0" & minutes_s
    DecimalToMinutes = hours_s & ":" & minutes_s

    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "DecimalToMinutes", g_l_ErrorLineNumber
End Function

Public Function ColumnTotals(ByVal RS As Recordset, ByVal column As String) As Currency
    Dim l_Count As Long
    'Holds the ongoing total
    Dim curr_Temp As Currency
    'grid.Bookmark = grid.FirstRow
    On Error GoTo Error_Handler

    'Set pointer to first row
    If (RS.RecordCount > 0) Then
       
        RS.MoveFirst
        'On the input value 'column',
        Do While Not RS.EOF
            If IsNumeric(RS.Fields(column).Value) Then
                curr_Temp = curr_Temp + CCur(RS.Fields(column).Value)
            End If

            'If last row reached, do not look for last row +1 else error
            'If (l_Count <> (rs.RecordCount - 1)) And _
            '   (l_Count <= (rs.RecordCount - 1)) Then
                    'Get next row's bookmark value
                    'grid.Bookmark = grid.RowBookmark(grid.Row + 1)
                    
            'End If
            RS.MoveNext
        Loop
        'ColumnTotals = Round(curr_Temp, 2) 'round to 2 decimal places
        ColumnTotals = curr_Temp
    End If
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "ColumnTotals", g_l_ErrorLineNumber
End Function

'Totals the cost of all the parts in OEM Kits attached to a specific bus estimate.
'Input is the recordset of oemkits attached.

Public Function OEMKitsTotal(ByVal OEMKitsList As ADODB.Recordset) As Currency
    Dim runningTotal As Currency
    Dim tempRS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    runningTotal = 0
    OEMKitsList.MoveFirst
    
    'loop through all the attached parts
    Do While Not OEMKitsList.EOF
        
        'check to see if the part is stock coded or non stock coded (temp)
        Set tempRS = modDBHelper.SearchSCPart("CES_INQUIRY.SEARCH_SC_PART", _
                                                      OEMKitsList.Fields("part_number").Value, _
                                                      "0", _
                                                      "", _
                                                      "", _
                                                      2)
                                                      
        If tempRS.RecordCount > 0 Then
            runningTotal = runningTotal + tempRS("PRICE").Value
        Else
            Set tempRS = modDBHelper.SearchOEMKits("CES_INQUIRY.SEARCH_OEM_KITS", _
                                               OEMKitsList.Fields("part_number").Value, _
                                               " ")
            If tempRS.RecordCount > 0 Then
                 runningTotal = runningTotal + tempRS("estimated_cost").Value
            End If
            
        End If
        OEMKitsList.MoveNext
    Loop
    
    OEMKitsTotal = runningTotal
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modName", "OEMKitsTotal", g_l_ErrorLineNumber
End Function

Public Function CheckPercent(ByVal str_Percent As String) As Boolean
    Dim l_Length As Long
    Dim l_Counter As Long
    Dim str_Char As String
    Dim l_Index As Long
    Dim dbl_Percent As Double
    Dim str_Temp As String
    
    On Error GoTo Error_Handler

    l_Length = Len(str_Percent)
    'Only digits and dot are alloved in the str_Percent string
    For l_Counter = 1 To l_Length
        str_Char = Mid(str_Percent, l_Counter, 1)
        If str_Char <> "0" And str_Char <> "1" And str_Char <> "2" And _
           str_Char <> "3" And str_Char <> "4" And str_Char <> "5" And _
           str_Char <> "6" And str_Char <> "7" And str_Char <> "8" And _
           str_Char <> "9" And str_Char <> "." Then
            CheckPercent = False
            Exit Function
        End If
    Next l_Counter
 
    str_Temp = str_Percent
    'No more than one dot is allowed in the str_Percent string (i.e. or no dot, or one
    'dot only)
    l_Index = InStr(str_Temp, ".")
    If l_Index > 0 Then
        str_Temp = Mid(str_Temp, l_Index + 1)
        l_Index = InStr(str_Temp, ".")
        If l_Index > 0 Then
            CheckPercent = False
            Exit Function
        End If
    End If
    
    'Percent value can be >=0 and <= 100
    dbl_Percent = CDbl(str_Percent)
    If dbl_Percent < 0 Or dbl_Percent > 100 Then
        CheckPercent = False
        Exit Function
    End If
    
    'By default function return TRUE.
    CheckPercent = True
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "CheckPercent", g_l_ErrorLineNumber
End Function

Public Function ChangeNullToOneSpase(ByVal str_ToChange As Variant) As String
    On Error GoTo Error_Handler

    If IsNull(str_ToChange) = True Then
        ChangeNullToOneSpase = " "
        Exit Function
    Else
        ChangeNullToOneSpase = str_ToChange
        Exit Function
    End If
    
    'By default function returns string with one space character.
    ChangeNullToOneSpase = " "
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "ChangeNullToOneSpase", g_l_ErrorLineNumber
End Function

Public Sub AddLastPartToSubkitA(ByVal str_KitNumberPassed As String, _
                                ByVal str_PartTypePassed As String, _
                                ByVal str_SupplierNumberPassed As String, _
                                ByVal str_SupplierNamePassed As String, _
                                ByVal str_StockCodePassed As String, _
                                ByVal str_QtyPassed As String, _
                                ByVal str_DescriptionPassed As String)
    
    Dim RS As ADODB.Recordset
    Dim l_RetVal As Long
    Dim l_Result As Long
    Dim str_PartType As String
    Dim str_OEMNumber As String
    Dim str_OEM As String
    Dim str_TTCCode As String
    Dim str_QTY As String
    Dim str_RefNumber As String
    Dim str_Description As String
    Dim l_SeqNumber As Long
    Dim l_Count As Long
    Dim str_SubKitLetter As String
    Dim l_InsertedCount As Long

    On Error GoTo Error_Handler

    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.GetSubKits("CES_INQUIRY.GET_SUB_KITS", _
                                    str_KitNumberPassed)

    'Delete all records from the SUB_KITS table where
    'kit_part_number = str_KitNumberPassed
    l_Result = modDBHelper.DeleteSubKits( _
                                "CES_DELETE.DELETE_SUB_KITS", _
                                l_RetVal, _
                                str_KitNumberPassed)

    If RS.RecordCount > 0 Then
        'Find last item under "KIT A"
        l_InsertedCount = 1
        RS.MoveFirst
        If RS.RecordCount > 1 Then
            RS.MoveNext
            For l_Count = 1 To RS.RecordCount
                str_RefNumber = ChangeNullToOneSpase(RS.Fields("REF #"))
                If Left(str_RefNumber, 1) = "A" Then
                    l_InsertedCount = l_InsertedCount + 1
                Else
                    str_SubKitLetter = "A" + CStr(l_InsertedCount)
                    Exit For
                End If
                RS.MoveNext
            Next l_Count
        End If

        'Insert record with "REF #" = "KIT A"
        RS.MoveFirst
        str_PartType = ChangeNullToOneSpase(RS.Fields("PART TYPE"))
        str_OEMNumber = ChangeNullToOneSpase(RS.Fields("OEM #"))
        str_OEM = ChangeNullToOneSpase(RS.Fields("OEM"))
        str_TTCCode = ChangeNullToOneSpase(RS.Fields("TTC CODE"))
        str_QTY = ChangeNullToOneSpase(RS.Fields("QTY"))
        str_RefNumber = ChangeNullToOneSpase(RS.Fields("REF #"))
        str_Description = ChangeNullToOneSpase(RS.Fields("DESCRIPTION"))
        l_SeqNumber = CLng(RS.Fields("SEQUENCE"))
        l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", _
                                            l_RetVal, _
                                            str_KitNumberPassed, _
                                            str_PartType, _
                                            str_OEMNumber, _
                                            str_OEM, _
                                            str_TTCCode, _
                                            str_QTY, _
                                            str_RefNumber, _
                                            str_Description, _
                                            l_SeqNumber)

        If RS.RecordCount > 1 Then
            'Insert all records after "REF #" = "KIT A" and before record with
            '"REF #" = "KIT B"
            RS.MoveNext
            For l_Count = 2 To l_InsertedCount
                str_PartType = ChangeNullToOneSpase(RS.Fields("PART TYPE"))
                str_OEMNumber = ChangeNullToOneSpase(RS.Fields("OEM #"))
                str_OEM = ChangeNullToOneSpase(RS.Fields("OEM"))
                str_TTCCode = ChangeNullToOneSpase(RS.Fields("TTC CODE"))
                str_QTY = ChangeNullToOneSpase(RS.Fields("QTY"))
                str_RefNumber = ChangeNullToOneSpase(RS.Fields("REF #"))
                str_Description = ChangeNullToOneSpase(RS.Fields("DESCRIPTION"))
                l_SeqNumber = CLng(RS.Fields("SEQUENCE"))
                l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", _
                                                    l_RetVal, _
                                                    str_KitNumberPassed, _
                                                    str_PartType, _
                                                    str_OEMNumber, _
                                                    str_OEM, _
                                                    str_TTCCode, _
                                                    str_QTY, _
                                                    str_RefNumber, _
                                                    str_Description, _
                                                    l_SeqNumber)

                RS.MoveNext
            Next l_Count

            'Insert a new record.
            l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", _
                                                l_RetVal, _
                                                str_KitNumberPassed, _
                                                str_PartTypePassed, _
                                                str_SupplierNumberPassed, _
                                                str_SupplierNamePassed, _
                                                str_StockCodePassed, _
                                                str_QtyPassed, _
                                                str_SubKitLetter, _
                                                str_DescriptionPassed, _
                                                l_Count)

            'Insert rest of records (from the record with "REF #" = "KIT B").
            'Data is the same, just increase "SEQUENMCE" field by one
            RS.MoveFirst
            RS.Move l_InsertedCount
            For l_Count = l_InsertedCount + 1 To RS.RecordCount
                str_PartType = ChangeNullToOneSpase(RS.Fields("PART TYPE"))
                str_OEMNumber = ChangeNullToOneSpase(RS.Fields("OEM #"))
                str_OEM = ChangeNullToOneSpase(RS.Fields("OEM"))
                str_TTCCode = ChangeNullToOneSpase(RS.Fields("TTC CODE"))
                str_QTY = ChangeNullToOneSpase(RS.Fields("QTY"))
                str_RefNumber = ChangeNullToOneSpase(RS.Fields("REF #"))
                str_Description = ChangeNullToOneSpase(RS.Fields("DESCRIPTION"))
                l_SeqNumber = CLng(RS.Fields("SEQUENCE"))
                l_Result = modDBHelper.InsertSubKits("CES_UPDATE.INSERT_SUB_KITS", _
                                                    l_RetVal, _
                                                    str_KitNumberPassed, _
                                                    str_PartType, _
                                                    str_OEMNumber, _
                                                    str_OEM, _
                                                    str_TTCCode, _
                                                    str_QTY, _
                                                    str_RefNumber, _
                                                    str_Description, _
                                                    l_Count + 1)

                RS.MoveNext
            Next l_Count
        End If
    End If

    If Not RS Is Nothing Then
        Set RS = Nothing
    End If

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "AddLastPartToSubkitA", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Public Sub SetWindowLayered(ByVal frm_PassedForm As Form)
    Dim l_Ret As Long
    
    On Error GoTo Error_Handler
    
    'Set the window style to 'Layered'
    l_Ret = modMain.GetWindowLong(frm_PassedForm.hWnd, modMain.g_const_GWL_EXSTYLE)
    l_Ret = l_Ret Or modMain.g_const_WS_EX_LAYERED
    SetWindowLong frm_PassedForm.hWnd, g_const_GWL_EXSTYLE, l_Ret
    'Set the opacity of the layered window to 0 - form became invisible.
    'In Timer1 we will set form opaque.
    SetLayeredWindowAttributes frm_PassedForm.hWnd, 0, 0, g_const_LWA_ALPHA

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "SetWindowLayered", g_l_ErrorLineNumber
End Sub

Public Sub ChangeOpasityLayeredForm(ByVal frm_PassedForm As Form, ByVal tmrTimer As Control, _
                            ByVal l_From As Long, ByVal l_To As Long, ByVal l_Step As Long)
    Dim l_Count As Long
    
    On Error GoTo Error_Handler
    
    For l_Count = l_From To l_To Step l_Step
        SetLayeredWindowAttributes frm_PassedForm.hWnd, 0, CByte(l_Count), 2
    Next l_Count
    tmrTimer.Interval = 0

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "CloseLayeredForm", g_l_ErrorLineNumber
End Sub

Public Sub SetTopmost(Form As Form, ByVal Topmost As Boolean)
    Dim hWndInsertAfter As Long
    
    If Topmost Then
        hWndInsertAfter = HWND_TOPMOST
    Else
        hWndInsertAfter = HWND_NOTOPMOST
    End If
    
    SetWindowPos Form.hWnd, hWndInsertAfter, 0, 0, 0, 0, _
        SWP_NOSIZE Or SWP_NOMOVE Or SWP_NOACTIVATE
End Sub


'================================================================================
'
'================================================================================

Public Sub ArchRBPSubsets(ByVal RBNumber As String)
    On Error GoTo Error_Handler
    Dim RS As ADODB.Recordset
    Dim formobject As Object
    Set RS = New ADODB.Recordset
    'Get RB part details
    Set RS = modDBHelper.SearchRBPart("CES_INQUIRY.SEARCH_RBPART", _
                                              RBNumber, _
                                              Val(""), _
                                              "", _
                                              "", _
                                              CLng(2))
    'Input RB part details into RB form
    If RS.RecordCount > 0 Then
    Set formobject = New frmRebuiltPartsMain
    formobject.PassValues RS.Fields.Item("MMS STOCK CODE"), RS.Fields.Item("REBUILT NUMBER"), RS.Fields.Item("ROWID")
    formobject.RefreshForm
    'Archive RB part
    formobject.Archive_RB True
    
    Set formobject = Nothing
    End If
    
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "ArchRBPSubsets", g_l_ErrorLineNumber
End Sub
'================================================================================
'
'================================================================================

'Public Sub ArchRBPSubsetsVeh(ByVal RBNumber As String)
    'On Error GoTo Error_Handler
    'Dim RS As ADODB.Recordset
 
   ' Set RS = New ADODB.Recordset
    'Get RB part details
    'Set RS = modDBHelper.SearchRBPart("CES_INQUIRY.SEARCH_RBPART", _
                                              RBNumber, _
                                              Val(""), _
                                              "", _
                                              "", _
                                              CLng(2))
    'Input RB part details into RB form
    'MsgBox RBNumber, vbOKOnly, "Testing"
    'If RS.RecordCount > 0 Then

    'frmRebuiltPartsMain.PassValues RS.Fields.Item("MMS STOCK CODE"), RS.Fields.Item("REBUILT NUMBER"), RS.Fields.Item("ROWID")
   ' frmRebuiltPartsMain.RefreshForm
    'Archive RB part
    'frmRebuiltPartsMain.cmdArchive_Click
   ' Else
  '  End If
    
    
 '   Exit Sub
'Error_Handler:
  '  g_l_ErrorLineNumber = Erl()
 '   modDBHelper.LogErrorToDB "modMain", "ArchRBPSubsets", g_l_ErrorLineNumber
'End Sub


'================================================================================
'
'================================================================================

Public Sub ArchVehicleRBParts(ByVal LinkNumber As String)
    On Error GoTo Error_Handler
    Dim RSV As ADODB.Recordset
    Set RSV = New ADODB.Recordset
    Set RSV = modDBHelper.RetrieveRBPUsed("CES_INQUIRY.RETRIEVE_RBP_USED", _
                                         LinkNumber, _
                                         "BUS")
    If RSV.RecordCount > 0 Then
        Do While RSV.EOF = False
        'Calls up details and Archives
        ArchRBPSubsets RSV.Fields.Item("REBUILT NUMBER")
        RSV.MoveNext
        Loop
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB "modMain", "ArchVehicleRBParts", g_l_ErrorLineNumber
End Sub

frmRebuiltPartsMain.frm :
Option Explicit

Private m_str_Msg As String
Private l_Result As Long
Private l_RetVal As Long

Public m_str_LinkNumber As String
Public m_str_RBNumber As String
Public m_var_RowID As Variant
Public m_isRB As Boolean
Public m_silent_mode As Boolean


Public Sub PassValues(ByVal str_LinkNumber As String, ByVal str_RBNumber As String, var_RowID As Variant)
   On Error GoTo Error_Handler
    
    ' Close the existing show all labour form
    If Not frmViewAllLabour Is Nothing Then
        Unload frmViewAllLabour
    End If
    
    m_str_LinkNumber = str_LinkNumber
    m_str_RBNumber = str_RBNumber
    m_var_RowID = var_RowID
    Call RefreshForm
    
    If g_str_UseOverheadFringe = "F" Then
        lblLabourOverheadAmount.Caption = "Fringe Value Total"
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PassValues", g_l_ErrorLineNumber
End Sub

Public Sub RefreshForm()
    On Error GoTo Error_Handler

    Call SetWaitCursor
    frmRebuiltPartsAddMaterials.PassValues m_str_RBNumber, m_str_LinkNumber
    Call Populate
    Call PopulateChangesMadeBy
    Call UserPermissions
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "RefreshForm", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub UserPermissions()
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Then
        'Menu <Add a Labour Task> is disabled.
        tbMenu.Buttons(2).ButtonMenus(1).Enabled = False
        'Menu <View><Archived Database> is disabled.
        tbMenu.Buttons(3).ButtonMenus(3).Enabled = False

        'Menu <Edit><Archive> is disabled.
        tbMenu.Buttons(2).ButtonMenus(3).Enabled = False
        
        If grdLabour.Columns.Count > 2 Then
            'Grid "Labour". Columns "Time", "Wrench Time" are invisible.
            grdLabour.Columns("TIME").Visible = False
            grdLabour.Columns("WRENCH TIME").Visible = False
        End If
        'Grid "Materials Cost Centre Totals". Column "Total Cost" is invisible.
        grdMaterialsCostCentreTotals.Columns("TOTAL COST").Visible = False
        'Controls in the right bottom corner of the form are invisible.
        lblLabourSubtotal.Visible = False
        lblLabourOverheadAmount.Visible = False
        lblLabourTotal.Visible = False
        lblMaterialsTotal.Visible = False
        lblTotalRebuiltPartCost.Visible = False
        txtLabourSubtotal.Visible = False
        txtLabourOverheadAmount.Visible = False
        txtLabourTotal.Visible = False
        txtMaterialTotal.Visible = False
        txtTotalRebuiltPartCost.Visible = False
        lblCoreCost.Visible = False
        txtCoreCost.Visible = False
        lblTaxTotal.Visible = False
        txtTaxTotal.Visible = False
        lblTotalWithTax.Visible = False
        txtTotalRebuiltPartCostWithTax.Visible = False
        'Button "Edit Rebuilt Part Info" is invisible.
        'btnRebuiltPartEdit.Visible = False
        'tbMenu.Buttons.Item.Enabled
        tbMenu.Buttons(2).ButtonMenus(2).Enabled = False
        'Edit-box "S.O.P. Number" is disabled
        txtSOPNumber.Enabled = False
        'Edit-boxes at the top of the form are disabled.
        txtRebuiltCode.Enabled = False
        txtKeyword.Enabled = False
        txtDescription.Enabled = False
    ElseIf g_l_AccessLevel = 2 Then
        'Menu <Add a Labour Task> is disabled.
        tbMenu.Buttons(2).ButtonMenus(1).Enabled = False
        'Menu <View><Archived Database> is disabled.
        tbMenu.Buttons(3).ButtonMenus(3).Enabled = False
         'Menu <Edit><Archive> is disabled.
        tbMenu.Buttons(2).ButtonMenus(3).Enabled = False
        'Button "Edit Rebuilt Part Info" is invisible.
        tbMenu.Buttons(2).ButtonMenus(2).Enabled = False
        
        'All controls except grids, are disabled.
        txtRebuiltCode.Enabled = False
        txtKeyword.Enabled = False
        txtDescription.Enabled = False
        txtLabourSubtotal.Enabled = False
        txtLabourOverheadAmount.Enabled = False
        txtLabourTotal.Enabled = False
        txtMaterialTotal.Enabled = False
        txtTotalRebuiltPartCost.Enabled = False
        txtSOPNumber.Enabled = False
    End If
    
    If g_l_AccessLevel < 4 Then
        tbMenu.Buttons(3).ButtonMenus(2).Enabled = False
        lblChangesMadeBy.Visible = False
        cboChangesMadeBy.Visible = False
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "UserPermissions", g_l_ErrorLineNumber
End Sub

'Populates the grids on the form
Public Sub Populate()
    Dim var_MMSStockCode As String
    Dim cur_MMSCost As String
    Dim var_NSCRowID As Variant
    Dim str_OrigSuppNum As String
    Dim str_FileText As String
    Dim FSO As FileSystemObject
    Dim TS As TextStream
    Dim RS As ADODB.Recordset
    Dim RS2 As ADODB.Recordset
    Dim RSNewStock As Recordset
    Dim str_LabourTotal As String
    Dim str_MaterialTotal As String
    Dim str_CoreCost As String
    Dim str_TotalRebuiltPartCost As String
    Dim dbl_TaxRate As Double
    Dim l_Hours As Long
    Dim l_Minutes As Long
    Dim l_Count As Long
    Dim duplicate As Boolean
    
    On Error GoTo Error_Handler
    
    'First populate the rebuilt information
    Set RS = New ADODB.Recordset
    duplicate = False 'initialize as false
    Set RS = modDBHelper.RetrieveRB("CES_INQUIRY.RETRIEVE_RB")
    If RS.RecordCount > 0 Then
        RS.Filter = "mms_stock_code = '" + m_str_LinkNumber + "' and rebuilt_stock_num = '" + m_str_RBNumber + "'"
        txtRebuiltCode.Text = RS.Fields.Item("REBUILT_STOCK_NUM")
        txtKeyword.Text = RS.Fields.Item("KEYWORD")
        txtDescription.Text = RS.Fields.Item("DETAILED_DESC")
        txtSOPNumber.Text = RS.Fields.Item("SOP_NUMBER")
        txtJobNumber.Text = RS.Fields.Item("JOB_NUMBER")
        txtMMSBuyCode.Text = RS.Fields.Item("MMS_STOCK_CODE")
        txtCoreCode.Text = RS.Fields.Item("CORE_PART_NUM")
        If Trim(RS.Fields.Item("CORE_CHARGE")) = "" Then
            txtCoreCost.Text = Format("0", "currency")
        Else
            txtCoreCost.Text = Format(RS.Fields.Item("CORE_CHARGE"), "currency")
        End If
         If IsNull(Trim(RS.Fields.Item("ACTIVE"))) Then
            txtNonActive.Caption = ""
        Else
            txtNonActive.Caption = "NON-ACTIVE"
        End If
    End If
    m_str_RBNumber = txtRebuiltCode.Text 'used when opening materials page from menu
    'Determine which non stock coded items have since been converted into stock coded
    'items.
    'First get the table containing each of the non stock coded items
    Set RS = modDBHelper.RetrieveNSCPUsed("CES_INQUIRY.RETRIEVE_NSCP_USED", _
                                          m_str_RBNumber, _
                                          "RB")
        
    'Loop through each of the non stock coded items
    If RS.RecordCount > 0 Then
        RS.MoveFirst
        Set RSNewStock = New ADODB.Recordset
        While Not RS.EOF
            'Get the original supplier number and row id
            str_OrigSuppNum = IIf(IsNull(RS.Fields.Item("SUPPLIER NUMBER").Value), "", RS.Fields.Item("SUPPLIER NUMBER").Value)
            var_NSCRowID = RS.Fields.Item("RowID")
            'Now attempt to get a stock coded part which matches the original supplier
            'number
            Set RSNewStock = modDBHelper.RetrieveSCOrigSupplierNum( _
                                        "CES_INQUIRY.RETRIEVE_SC_ORIG_SUPPLIER_NUM", _
                                        str_OrigSuppNum)
            
           If RSNewStock.RecordCount > 0 Then
                'There is a match
                'Get the MMS Stock Code for the item
                RSNewStock.MoveFirst
                var_MMSStockCode = RSNewStock.Fields.Item("mms_stock_code")
                cur_MMSCost = RSNewStock.Fields.Item("MMS_New_Cost")
                'Append the text entry to be logged
                str_FileText = str_FileText & Trim(str_OrigSuppNum) & " to " & _
                               Trim(var_MMSStockCode) & Chr(13) & Chr(10)
                
                'ensure a stockcoded part is not already attached to the estimate
                
                 Set RS2 = New ADODB.Recordset
        
                 Set RS2 = modDBHelper.RetrieveSCPUsed("CES_INQUIRY.RETRIEVE_SCP_USED", _
                                             m_str_RBNumber, _
                                             "N", _
                                             "RB")
                    If RS2.RecordCount > 0 Then
                        RS2.MoveFirst
                        For l_Count = 0 To RS2.RecordCount - 1
                            If RS2.Fields.Item("STOCK CODE") = Trim(var_MMSStockCode) Then
                                Call SetDefaultCursor
                                'Set RS2 = Nothing
                                'm_str_Msg = "Did not convert Non-Stocked-Coded part to Stocked-Coded-Part since MMS Stock Code"
                                'm_str_Msg = m_str_Msg + " " + var_MMSStockCode + " is already used in this estimate"
                                'MsgBox m_str_Msg, vbOKOnly Or vbExclamation, "Warning"
                                duplicate = True
                                Exit For
                            End If
                            RS2.MoveNext
                        Next l_Count
                   
                    End If
                    Set RS2 = Nothing
                
                'Transfer the entry to the stock coded make buy
                If duplicate = False Then
                l_Result = modDBHelper.TransferPartsUsed( _
                                                    "CES_UPDATE.TRANSFER_PARTS_USED", _
                                                    l_RetVal, _
                                                    var_MMSStockCode, _
                                                    cur_MMSCost, _
                                                    g_str_UserName, _
                                                    var_NSCRowID)
                                                    
                  ' Now if there have been any conversions log them in text file and inform the user
                If str_FileText <> "" Then
                    'Set FSO = New FileSystemObject
                    'Set TS = FSO.CreateTextFile("rb.log")
                    'TS.Write ("Rebuilt Part #" & Trim(m_str_LinkNumber) & " Part Conversions:" & _
                              Chr(13) & Chr(10) & Chr(13) & Chr(10) & _
                              "Vendor Part Number to Stock Code" & Chr(13) & Chr(10) & _
                              "--------------------------------" & Chr(13) & Chr(10) & str_FileText)
                    m_str_Msg = "Parts in the Rebuilt Part have been converted to Stock Coded Parts."
                    m_str_Msg = m_str_Msg + Chr(13) + "Please see the log for details."
                    MsgBox m_str_Msg, vbOKOnly Or vbInformation, "Rebuilt Part Estimate"
                    
                    'The code below was added to prevent a permission error when attempting
                    'to run FSO's CreateTextFile
                    Dim frmNoticeMessage As frmNotice
                    Set frmNoticeMessage = New frmNotice
                    frmNoticeMessage.SetMessage "rb.log", "Rebuilt Part #" & Trim(m_str_LinkNumber) & " Part Conversions:" & _
                        Chr(13) & Chr(10) & Chr(13) & Chr(10) & _
                        "Vendor Part Number to Stock Code" & Chr(13) & Chr(10) & _
                        "--------------------------------" & Chr(13) & Chr(10) & str_FileText
                    frmNoticeMessage.Show vbModal
                    
                    'TS.Close
                    'ShellExecute GetDesktopWindow(), "Open", App.Path & "\rb.log", "", "C:\", 6
                    
                End If
                
                End If
            End If
            duplicate = False 'reset duplicate flag for next non-stock-coded part we check
            RSNewStock.Close
            RS.MoveNext
            
        Wend
    End If
    Set RSNewStock = Nothing
            
  
    'Then populate the labour information
    Set RS = modDBHelper.RetrieveMBLabour("CES_INQUIRY.RETRIEVE_MB_LABOUR", _
                                          m_str_RBNumber, _
                                          "RB")
    If RS.RecordCount > 0 Then
        Set grdLabour.DataSource = RS
    Else
        Set grdLabour.DataSource = Nothing
    End If
    
    
    Set RS = modDBHelper.RetrieveAllLabourHours("CES_INQUIRY.RETRIEVE_ALL_LABOUR", m_str_RBNumber, "RB")
    
    If RS.RecordCount > 0 Then
        txtLabourSubtotal.Text = Format(ColumnTotals(RS, "TOTAL COST"), "currency")
        RS.MoveFirst
        Set grdTotalTime.DataSource = RS
    Else
        txtLabourSubtotal.Text = Format(0#, "currency")
         Set grdTotalTime.DataSource = Nothing
    End If

    'Populate the ALL_LABOUR_SUMMARY table
    
    'Populate the ALL_MATERIALS_SUMMARY table
    
    'Set RS = modMain.CalculateAllMaterials(m_str_RBNumber, "RB")
        
    Set RS = modDBHelper.RetrieveRBPTotalCost2("CES_INQUIRY.RETRIEVE_RBP_TOTAL_COST2", m_str_RBNumber, "RB")
        
    If RS.RecordCount > 0 Then
          txtMaterialTotal.Text = Format(ColumnTotals(RS, "TOTAL COST"), "currency")
          RS.MoveFirst
    Else
        txtMaterialTotal.Text = Format(0#, "currency")
    End If
 
   'Set RS = RetrieveAllMaterialSummary("CES_INQUIRY.RETRIEVE_ALL_MATERIAL_SUMMARY")

    If RS.RecordCount > 0 Then
        Set grdMaterialsCostCentreTotals.DataSource = RS
    Else
        Set grdMaterialsCostCentreTotals.DataSource = Nothing
    End If
    
    'Total each of the sections
    txtLabourOverheadAmount.Text = Format(CCur(txtLabourSubtotal.Text) * _
                                          CCur(g_dbl_OverheadFringeValue), _
                                          "Currency")
    'cboBusSeries
    Set RS = modDBHelper.RetrieveRBListOfBuses("CES_INQUIRY.RB_LIST_BUSES", _
                                               Trim(txtRebuiltCode.Text))
        
    If RS.RecordCount > 0 Then
        Do While Not RS.EOF
        cboBusSeries.AddItem (RS.Fields(1).Value)
        RS.MoveNext
        Loop
        cboBusSeries.Text = cboBusSeries.List(0)
    End If
    
    
    ' Retrieve the tax rate
    Set RS = modDBHelper.RetrieveCESSettings("CES_INQUIRY.RETRIEVE_CES_SETTI", _
                                             "TAX_RATE")
    If RS.RecordCount > 0 Then
        dbl_TaxRate = CDbl(Replace(RS.Fields("VALUE").Value, ",", "."))
    Else
        dbl_TaxRate = 0
    End If
    Set RS = Nothing
    
    txtLabourTotal.Text = Format(CCur(txtLabourSubtotal.Text) + _
                                 CCur(txtLabourOverheadAmount.Text), _
                                 "Currency")
                                 
    'txtMaterialTotal.Text = frmRebuiltPartsAddMaterials.txtTotalMaterialsCost.Text
    
    str_LabourTotal = Trim(txtLabourTotal.Text)
    
    If str_LabourTotal = "" Then
        str_LabourTotal = "0"
    Else
        If IsNumeric(str_LabourTotal) = False Then
            str_LabourTotal = "0"
        End If
    End If
    
    str_MaterialTotal = Trim(txtMaterialTotal.Text)
    If str_MaterialTotal = "" Then
        str_MaterialTotal = "0"
    Else
        If IsNumeric(str_MaterialTotal) = False Then
            str_MaterialTotal = "0"
        End If
    End If
    
    str_CoreCost = Trim(txtCoreCost.Text)
    If str_CoreCost = "" Then
        str_CoreCost = "0"
    Else
        If IsNumeric(str_CoreCost) = False Then
            str_CoreCost = "0"
        End If
    End If
    
    txtTaxTotal.Text = Format(dbl_TaxRate * CCur(txtMaterialTotal), "currency")
    
    txtTotalRebuiltPartCost.Text = Format(CCur(str_LabourTotal) + CCur(str_MaterialTotal) - CCur(str_CoreCost), "currency")
        
    str_TotalRebuiltPartCost = Trim(txtTotalRebuiltPartCost.Text)
    If str_TotalRebuiltPartCost = "" Then
        str_TotalRebuiltPartCost = "0.00"
    End If
 
    txtTotalRebuiltPartCostWithTax.Text = Format(CCur(txtTaxTotal.Text) + CCur(txtTotalRebuiltPartCost.Text), "currency")

    'PropagateRebuiltPartChanges m_str_RBNumber, False
    
    'Format the columns of the data grids
    Call FormatColumns
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Populate", g_l_ErrorLineNumber
    If Not RSNewStock Is Nothing Then
        Set RSNewStock = Nothing
    End If
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub FormatColumns()
    On Error GoTo Error_Handler
    
    If Not grdLabour.Row Then
        grdLabour.Columns("CC").Width = 500
        'grdLabour.Columns("CC").Visible = False
        grdLabour.Columns("TASK").Width = 1600
        grdLabour.Columns("LABOUR TYPE").Width = 2120
        grdLabour.Columns("USAGE").Width = 620
        grdLabour.Columns("USAGE").Alignment = dbgRight
        grdLabour.Columns("TIME").Width = 600
        grdLabour.Columns("TIME").Alignment = dbgRight
        grdLabour.Columns("WRENCH TIME").Width = 1200
        grdLabour.Columns("WRENCH TIME").Alignment = dbgRight
        grdLabour.Columns("DATE REVISED").Width = 1900 '1725
        grdLabour.Columns("DATE REVISED").Alignment = dbgRight
        grdLabour.Columns("DATE REVISED").NumberFormat = "yyyy-mmm-dd hh:mm AMPM"
        grdLabour.Columns("TIME ADDITION").Visible = False
        grdLabour.Columns("VALUE").Visible = False
        grdLabour.Columns("ROWID").Visible = False
    End If

    If Not grdMaterialsCostCentreTotals.Row Then
        With grdMaterialsCostCentreTotals
            .Columns("CC").Width = 500
            .Columns("CC").Caption = "CC"
            .Columns("TOTAL COST").Alignment = dbgRight
            .Columns("TOTAL COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("TOTAL COST").Width = 1400
            .Columns("TAXABLE COST").Visible = False
        End With
    End If
    
    If Not grdTotalTime.Row Then
        grdTotalTime.Columns("COST CENTRE").Width = 500
        grdTotalTime.Columns("COST CENTRE").Caption = "CC"
        grdTotalTime.Columns("LABOUR HRS").Width = 1200
        grdTotalTime.Columns("LABOUR HRS").Alignment = dbgRight
          grdTotalTime.Columns("TOTAL COST").Visible = False
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "FormatColumns", g_l_ErrorLineNumber
End Sub

Private Sub btnRebuiltPartEdit_Click()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    frmAddRebuiltPart.m_str_MMSStockCode = m_str_LinkNumber
    frmAddRebuiltPart.m_str_RebuiltCode = m_str_RBNumber
    frmAddRebuiltPart.m_str_AuditReference = m_str_RBNumber
    frmAddRebuiltPart.Show vbModal
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "btnRebuiltPartEdit_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub cmdArchive_Click()
    
    On Error GoTo Error_Handler
    
    Archive_RB False
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdArchive_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub
Public Sub Archive_RB(ByVal silent_mode As Boolean)
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    If Not silent_mode Then
        m_str_Msg = "Are you sure you want to Archive Rebuilt Part # " + m_str_RBNumber + "?"
        l_Result = MsgBox(m_str_Msg, vbOKCancel Or vbQuestion, "Archive Rebuit Part?")
    Else
        l_Result = vbOK
        
        Set RS = New ADODB.Recordset
        Set RS = modDBHelper.RetrieveRBPUsed("CES_INQUIRY.RETRIEVE_RBP_USED", _
                                         txtRebuiltCode.Text, _
                                         "RB")
                                         
        '''Loops through any underlying RB parts and archives them, as well.
        If RS.RecordCount > 0 Then
            Do While RS.EOF = False
               
               'Calls up details and Archives
               ArchRBPSubsets (RS.Fields.Item("REBUILT NUMBER"))
               RS.MoveNext
            Loop
            
        End If
        Set RS = Nothing
        
    End If
     
     
    
    If l_Result = vbOK Then
        Call SetWaitCursor
             
        
        l_Result = modDBHelper.ArchiveRB("CES_ARCHIVE.ARCHIVE_RB", _
                                    l_RetVal, _
                                    txtRebuiltCode.Text, _
                                    g_str_UserName, _
                                    m_str_RBNumber, _
                                    "RB", _
                                    Trim(txtLabourSubtotal.Text), _
                                    Trim(txtLabourOverheadAmount.Text), _
                                    Trim(txtLabourTotal.Text), _
                                    Trim(txtMaterialTotal.Text), _
                                    Trim(txtTotalRebuiltPartCost.Text), _
                                    Trim(txtTaxTotal.Text), _
                                    Trim(txtTotalRebuiltPartCostWithTax.Text))
        
        If l_Result = 0 Then
            'Call SetDefaultCursor
            If Not silent_mode Then
                m_str_Msg = "Archiving Rebuilt Part Number = " + txtRebuiltCode.Text + " is complete."
                MsgBox m_str_Msg, vbOKOnly Or vbInformation, "Rebuilt Part Archiving"
            End If
        Else
            Call SetDefaultCursor
            m_str_Msg = "Archiving Rebuilt Part Number = " + txtRebuiltCode.Text + " has failed."
            MsgBox m_str_Msg, vbInformation Or vbOKOnly, "Rebuilt Part Archiving"
        End If
       
        
        
        '''''
    End If
    
    Call SetDefaultCursor
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdArchive_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor

End Sub



Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    Dim str_TotalRebuiltPartCost As String
    
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor
    
    'Unload the add materials form
    Unload frmRebuiltPartsAddMaterials
    
    ' Close the existing show all labour form
    If Not frmViewAllLabour Is Nothing Then
        Unload frmViewAllLabour
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub grdLabour_DblClick()
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not allow user go further, just exit sub.
        Exit Sub
    End If
    
    'Update the Labour in the Rebuilt Part
    If Not grdLabour.Row Then
        Call SetWaitCursor
        m_var_RowID = grdLabour.Columns("ROWID").Text
        frmAddLabourTask.m_str_AuditReference = Trim(txtRebuiltCode.Text)
        frmAddLabourTask.m_str_LinkNumber = m_str_RBNumber
        frmAddLabourTask.m_str_PartID = m_var_RowID
        frmAddLabourTask.m_str_TypeID = "RB"
        frmAddLabourTask.Show vbModal
        Call Populate
    End If

    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdLabour_DblClick", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub grdLabour_KeyDown(KeyCode As Integer, Shift As Integer)
    'Delete the Labour from the Rebuilt Part
    Dim str_PartID As String
    Dim RS As ADODB.Recordset
    Dim l_Count As Long
    
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not allow user go further, just exit sub.
        Exit Sub
    End If
    
    If KeyCode = vbKeyDelete Then
        m_str_Msg = "Are you sure you want to delete this item?"
        l_Result = MsgBox(m_str_Msg, vbOKCancel Or vbQuestion, "Rebuit Part")
        If l_Result = vbOK Then
            Call SetWaitCursor
            str_PartID = grdLabour.Columns("ROWID").Text
            l_Result = modDBHelper.DeleteMBLabour("CES_DELETE.DELETE_MBLABOUR", _
                                                  l_RetVal, _
                                                  str_PartID)
            '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT Begin >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            'Add record to the AUDIT_MODIFY_HISTORY table.
            l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                                        "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                                        l_RetVal, _
                                        "Delete Labour", _
                                        txtRebuiltCode.Text, _
                                        "RB", _
                                        "LABOUR TYPE ---> " + grdLabour.Columns("LABOUR TYPE").Text, _
                                        "CC ---> " + grdLabour.Columns("CC").Text, _
                                        "TASK ---> " + grdLabour.Columns("TASK").Text, _
                                        "USAGE ---> " + grdLabour.Columns("USAGE").Text, _
                                        "TIME ---> " + grdLabour.Columns("TIME").Text, _
                                        "WRENCH TIME ---> " + grdLabour.Columns("WRENCH TIME").Text, _
                                        "DATE REVISED ---> " + grdLabour.Columns("DATE REVISED").Text)
            
            Set RS = New ADODB.Recordset
            
            'In the SC_PARTS_USED table find all Estimates where the current RBE is present.
            Set RS = modDBHelper.RetrieveESTToPropagateRB("CES_INQUIRY.RETRIEVE_EST_TO_PROPAGATE_RB", _
                                                          txtRebuiltCode.Text)
            If RS.RecordCount > 0 Then
                RS.MoveFirst
                    For l_Count = 0 To RS.RecordCount - 1
                        'Add records to the AUDIT_MODIFY_HISTORY table.
                        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "Indirect change. Labour was deleted from the Rebuilt Part Estimate " + m_str_RBNumber, _
                            RS.Fields.Item("link_code"), _
                            RS.Fields.Item("link_type"), _
                            "LABOUR TYPE ---> " + grdLabour.Columns("LABOUR TYPE").Text, _
                            "CC ---> " + grdLabour.Columns("CC").Text, _
                            "TASK ---> " + grdLabour.Columns("TASK").Text, _
                            "USAGE ---> " + grdLabour.Columns("USAGE").Text, _
                            "TIME ---> " + grdLabour.Columns("TIME").Text, _
                            "WRENCH TIME ---> " + grdLabour.Columns("WRENCH TIME").Text, _
                            "DATE REVISED ---> " + grdLabour.Columns("DATE REVISED").Text)
                        
                        RS.MoveNext
                    Next l_Count
            End If
    
            Set RS = Nothing
            '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT End >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            Call RefreshForm
            Call SetDefaultCursor
        End If
    End If
    
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdLabour_KeyDown", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    Call SetDefaultCursor
End Sub

Private Sub PopulateChangesMadeBy()
    Dim l_Count As Long
    Dim str_Temp As String
    Dim RS As ADODB.Recordset

    On Error GoTo Error_Handler
    
    cboChangesMadeBy.Clear
    
    Set RS = New ADODB.Recordset
    'Populate cboChangesMadeBy combo-box. Show only 5 recent items.
    Set RS = modDBHelper.RetrieveAudit6( _
                    "CES_INQUIRY.RETRIEVE_AUDIT_6", _
                    txtRebuiltCode.Text, _
                    "RB")
    
    If RS.RecordCount > 0 Then
        RS.MoveFirst
        For l_Count = 0 To RS.RecordCount - 1
            If l_Count = 5 Then
                Exit For
            End If
            str_Temp = Format(RS.Fields.Item("DATE_CHANGED"), "yyyy-mmm-dd hh:mm:ss AMPM")
            str_Temp = CStr(str_Temp)
            str_Temp = str_Temp + " ---> "
            str_Temp = str_Temp + CStr(RS.Fields.Item("USER_NAME"))
            cboChangesMadeBy.AddItem str_Temp
            RS.MoveNext
        Next l_Count
    End If
    
    If RS.RecordCount > 0 Then
        cboChangesMadeBy.Text = cboChangesMadeBy.List(0)
    End If
    
    Set RS = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateChangesMadeBy", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub tbMenu_ButtonMenuClick(ByVal ButtonMenu As MSComctlLib.ButtonMenu)
    Dim str_Temp As String
    
    On Error GoTo Error_Handler
    
    Select Case ButtonMenu
        Case "Send To Mail Recipient"
            Call modMain.SendEmail
        Case "Close"
            Unload Me
        Case "Add a Labour Task"
            Call SetWaitCursor
            frmAddLabourTask.m_str_AuditReference = Trim(txtRebuiltCode.Text)
            frmAddLabourTask.m_str_LinkNumber = m_str_RBNumber
            frmAddLabourTask.m_str_TypeID = "RB"
            frmAddLabourTask.Show vbModal
            Call RefreshForm
            Call SetDefaultCursor
        Case "Materials Listing"
            If frmRebuiltPartsAddMaterials.WindowState = 1 Then
                frmRebuiltPartsAddMaterials.WindowState = 0
            End If
            frmRebuiltPartsAddMaterials.Show
            frmRebuiltPartsAddMaterials.SetFocus
        Case "Modify History"
            'Close the Audit form if it is opened.
            If Not frmViewAudit Is Nothing Then
                Unload frmViewAudit
            End If
            str_Temp = " - Rebuilt Part Estimate for Rebuilt Number: " + txtRebuiltCode.Text
            frmViewAudit.m_str_EstimateNumber = txtRebuiltCode.Text
            frmViewAudit.m_b_FromAdministration = False
            frmViewAudit.m_str_EstimateType = "RB"
            frmViewAudit.Caption = frmViewAudit.Caption + str_Temp
            frmViewAudit.Show
         Case "Archived Database"
            frmArchivedHistory.m_str_LinkCode = txtRebuiltCode.Text
            frmArchivedHistory.m_str_EstimateType = "RB"
            frmArchivedHistory.Show
         Case "All Labour"
            frmViewAllLabour.PassValues m_str_RBNumber, "RB"
            If frmViewAllLabour.WindowState = 1 Then
                frmViewAllLabour.WindowState = 0
            End If
            frmViewAllLabour.Show
            frmViewAllLabour.SetFocus
          Case "Edit Rebuilt Part Information"
         
                frmAddRebuiltPart.m_str_MMSStockCode = m_str_LinkNumber
                frmAddRebuiltPart.m_str_RebuiltCode = m_str_RBNumber
                frmAddRebuiltPart.m_str_AuditReference = m_str_RBNumber
                frmAddRebuiltPart.Show vbModal
        
        Case "Archive Rebuilt Part"
            Archive_RB False
        
        Case "Print"
            showRebuiltCostEstimateReport m_str_RBNumber, m_str_LinkNumber
    End Select
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "tbMenu_ButtonMenuClick", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

frmRebuiltPartAddMaterials.frm :
Option Explicit

Private m_str_Msg As String
Private m_str_RBNumber As String
Private m_str_LinkNumber As String

' Holds the previous search string
Private m_str_PreviousSearch As String
Private m_str_PreviousSearchType As String
Private m_var_RowSelected As Variant

Public Sub PassValues(ByVal str_RBNumber, ByVal str_LinkNumber)
    On Error GoTo Error_Handler
    
    m_str_RBNumber = str_RBNumber
    m_str_LinkNumber = m_str_RBNumber
    Call Populate
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PassValues", g_l_ErrorLineNumber
End Sub

Private Sub UserPermissions()
    On Error GoTo Error_Handler
        
    If g_l_AccessLevel = 1 Then
        'Button <Add Part> is invisible.
        cmdAddPart.Visible = False
        'Controls at the bottom of the form are invisible.
        lblRebuiltPartsTotal.Visible = False
        lblStockCodedPartsTotal.Visible = False
        lblNonStockCodedPartsTotal.Visible = False
        lblCoreCostTotal.Visible = False
        lblTotalMaterialsCost.Visible = False
        txtRebuiltPartsTotal.Visible = False
        txtStockCodedPartsTotal.Visible = False
        txtNonStockCodedPartsTotal.Visible = False
        txtCoreCostTotal.Visible = False
        txtTotalMaterialsCost.Visible = False
        If grdRebuiltPartsList.Columns.Count > 2 Then
            'Grid "Rebuilt Parts List". Columns"UNIT_COST", "TOTAL_COST" are
            'invisible.
            grdRebuiltPartsList.Columns("UNIT COST").Visible = False
'            grdRebuiltPartsList.Columns("CORE COST").Visible = False
            grdRebuiltPartsList.Columns("TOTAL COST").Visible = False
        End If
        If grdStockCodedPartsList.Columns.Count > 2 Then
            'Grid "Stock Coded Parts List". Columns"UNIT_COST", "CORE COST", "TOTAL_COST"
            'are invisible.
            grdStockCodedPartsList.Columns("UNIT COST").Visible = False
            grdStockCodedPartsList.Columns("CORE COST").Visible = False
            grdStockCodedPartsList.Columns("TOTAL COST").Visible = False
        End If
        If grdNonStockCodedPartsList.Columns.Count > 2 Then
            'Grid "Non-Stock Coded Parts List". Columns"COST", "CORE COST", "TOTAL_COST"
            'are invisible.
            grdNonStockCodedPartsList.Columns("UNIT COST").Visible = False
            grdNonStockCodedPartsList.Columns("CORE COST").Visible = False
            grdNonStockCodedPartsList.Columns("TOTAL COST").Visible = False
        End If
    ElseIf g_l_AccessLevel = 2 Then
        'Button <Add Part> is invisible.
        cmdAddPart.Visible = False
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "UserPermissions", g_l_ErrorLineNumber
End Sub

Private Sub cmdAddPart_Click()
    On Error GoTo Error_Handler
    
    If frmTypeOfPart.WindowState = 1 Or frmTypeOfPart.WindowState = 2 Then
        frmTypeOfPart.WindowState = 0
    End If
    frmTypeOfPart.m_str_LinkNumber = m_str_RBNumber
    frmTypeOfPart.m_str_AuditReference = Trim(txtRebuiltCode.Text)
    frmTypeOfPart.m_str_FormType = "Rebuilt"
    frmTypeOfPart.Show vbModal
    'Call frmRebuiltPartsMain.RefreshForm
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdAddPart_Click", g_l_ErrorLineNumber
End Sub

Private Sub Populate()
    On Error GoTo Error_Handler
    
    txtRebuiltCode.Text = m_str_RBNumber
    
    Call PopulateGrids
    Call FormatGrids
    Call UserPermissions

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Populate", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub cmdRefresh_Click()
    On Error GoTo Error_Handler
    
    Call frmRebuiltPartsMain.RefreshForm
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdRefresh_click", g_l_ErrorLineNumber
    Call SetDefaultCursor
    
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler

    Call SetWaitCursor
    'Keep the form open until the frmRebuiltPartsMain closes
    If UnloadMode = 0 Then
        Cancel = True
        Call SetDefaultCursor
        Me.Hide
    End If
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub PopulateGrids()
    Dim RS As ADODB.Recordset
'    Dim curr_RBCoreCostTotal As Currency
    Dim curr_SCPCoreCostTotal As Currency
    Dim curr_NSPCoreCostTotal As Currency
    Dim curr_CoreCostTotal As Currency
    Dim l_RetVal As Long
    Dim l_Result As Long
        
    On Error GoTo Error_Handler
        
    Set RS = New ADODB.Recordset
    
    'Populate the non-stock coded items
    Set RS = modDBHelper.RetrieveNSCPUsed("CES_INQUIRY.RETRIEVE_NSCP_USED", _
                                          m_str_LinkNumber, _
                                          "RB")
    
    If RS.RecordCount > 0 Then
        Set grdNonStockCodedPartsList.DataSource = RS
        curr_NSPCoreCostTotal = Format(ColumnTotals(RS, "core cost"), "currency")
        RS.MoveFirst
        txtNonStockCodedPartsTotal.Text = Format(ColumnTotals(RS, "total cost"), "currency")
    Else
        Set grdNonStockCodedPartsList.DataSource = Nothing
        curr_NSPCoreCostTotal = Format(0#, "currency")
        txtNonStockCodedPartsTotal.Text = Format(0#, "currency")
    End If
    
    'Populate the stock coded items
    Set RS = modDBHelper.RetrieveSCPUsed("CES_INQUIRY.RETRIEVE_SCP_USED", _
                                         m_str_LinkNumber, _
                                         "N", _
                                         "RB")
    
    If RS.RecordCount > 0 Then
        Set grdStockCodedPartsList.DataSource = RS
        curr_SCPCoreCostTotal = Format(ColumnTotals(RS, "CORE COST"), "currency")
        
        RS.MoveFirst
        txtStockCodedPartsTotal.Text = Format( _
                                    ColumnTotals(RS, "total cost"), "currency")
    Else
        Set grdStockCodedPartsList.DataSource = Nothing
        curr_SCPCoreCostTotal = Format(0#, "currency")
        txtStockCodedPartsTotal.Text = Format(0#, "currency")
    End If

    Set RS = modDBHelper.RetrieveRBPUsed("CES_INQUIRY.RETRIEVE_RBP_USED", _
                                         m_str_LinkNumber, _
                                         "RB")
    If RS.RecordCount > 0 Then
        Set grdRebuiltPartsList.DataSource = RS
'       curr_RBCoreCostTotal = Format(ColumnTotals(RS, "core cost"), "currency")
        RS.MoveFirst
        txtRebuiltPartsTotal.Text = Format(ColumnTotals(RS, "total cost"), "currency")
    Else
        Set grdRebuiltPartsList.DataSource = Nothing
'       curr_RBCoreCostTotal = Format(0#, "currency")
        txtRebuiltPartsTotal.Text = Format(0#, "currency")
    End If
        
    curr_CoreCostTotal = curr_SCPCoreCostTotal + curr_NSPCoreCostTotal
    
    'Calculate the materials total
    txtCoreCostTotal.Text = Format((curr_CoreCostTotal * -1), "currency")
    txtTotalMaterialsCost.Text = Format( _
                                CCur(txtRebuiltPartsTotal.Text) + _
                                CCur(txtNonStockCodedPartsTotal.Text) + _
                                CCur(txtStockCodedPartsTotal.Text) - curr_CoreCostTotal, "currency")

    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateGrids", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub FormatGrids()
    On Error GoTo Error_Handler
     
    If grdNonStockCodedPartsList.Columns.Count > 2 Then
        With grdNonStockCodedPartsList
            .Columns("SUPPLIER NUMBER").Width = 1900
            .Columns("SUPPLIER NAME").Width = 1700
            .Columns("CC").Width = 500
            .Columns("QTY").Alignment = dbgRight
            .Columns("QTY").Width = 500
            .Columns("%").Alignment = dbgRight
            .Columns("%").Width = 500
            .Columns("UNIT COST").Alignment = dbgRight
            .Columns("UNIT COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("UNIT COST").Width = 1200

            .Columns("CORE COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("CORE COST").Width = 1200
            .Columns("TOTAL COST").Alignment = dbgRight
            .Columns("TOTAL COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("TOTAL COST").Width = 1200
            .Columns("DESCRIPTION").Width = 4000
            .Columns("LAST MODIFIED DATE").Alignment = dbgRight
            .Columns("LAST MODIFIED DATE").Width = 2400
            .Columns("LAST MODIFIED DATE").NumberFormat = "yyyy-mmm-dd hh:mm:ss AMPM"
            .Columns("ID").Visible = False
            .Columns("ROWID").Visible = False
        End With
    End If
    
    If grdStockCodedPartsList.Columns.Count > 2 Then
        With grdStockCodedPartsList
            .Columns("UNIT COST").Alignment = dbgRight
            .Columns("UNIT COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("UNIT COST").Width = 1100
            .Columns("CC").Width = 500
            .Columns("QTY").Alignment = dbgRight
            .Columns("QTY").Width = 500
            .Columns("%").Alignment = dbgRight
            .Columns("%").Width = 500
            .Columns("CORE COST").Alignment = dbgRight
            .Columns("CORE COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("CORE COST").Width = 1200
            .Columns("TOTAL COST").Alignment = dbgRight
            .Columns("TOTAL COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("TOTAL COST").Width = 1200
            .Columns("DESCRIPTION").Width = 4000
            .Columns("DESCRIPTION").Caption = "DESCRIPTION"
            .Columns("OEM COST").Visible = False
            .Columns("MMS REBUILT CODE").Visible = False
            .Columns("REBUILT PART COST").Visible = False
            .Columns("REBUILT PART").Visible = False
            .Columns("ROWID").Visible = False
        End With
    End If
    
    If grdRebuiltPartsList.Columns.Count > 2 Then
        With grdRebuiltPartsList
            '.Columns("CC").Width = 500
            .Columns("CC").Visible = False
            .Columns("QTY").Alignment = dbgRight
            .Columns("QTY").Width = 500
            .Columns("%").Alignment = dbgRight
            .Columns("%").Width = 500
            .Columns("UNIT COST").Alignment = dbgRight
            .Columns("UNIT COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("UNIT COST").Width = 1200
'            .Columns("CORE COST").Alignment = dbgRight
'            .Columns("CORE COST").NumberFormat = "$#,##0.00;($#,##0.00)"
'            .Columns("CORE COST").Width = 1200
            .Columns("CORE COST").Visible = False
            .Columns("TOTAL COST").Alignment = dbgRight
            .Columns("TOTAL COST").NumberFormat = "$#,##0.00;($#,##0.00)"
            .Columns("TOTAL COST").Width = 1200
            .Columns("DESCRIPTION").Width = 4000
            .Columns("ROWID").Visible = False
        End With
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "FormatGrids", g_l_ErrorLineNumber
End Sub

Private Sub grdNonStockCodedPartsList_DblClick()
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not allow user go further, just exit sub.
        Exit Sub
    End If
    
    'Update the non stock coded part
    If grdNonStockCodedPartsList.Row >= 0 Then
          m_var_RowSelected = grdNonStockCodedPartsList.Bookmark
        Dim formshow As New frmAddNSCPToEstimate
        Call SetWaitCursor
        formshow.m_str_LinkNumber = m_str_LinkNumber
        formshow.Caption = "Edit a Non-Stock Coded Part in the Rebuilt Part Estimate"
        formshow.m_str_TypeCode = "RB"
        formshow.m_str_AuditReference = Trim(txtRebuiltCode.Text)
        formshow.PassValues grdNonStockCodedPartsList.Columns("SUPPLIER NUMBER").Value, _
                            grdNonStockCodedPartsList.Columns("SUPPLIER NAME").Value, _
                            grdNonStockCodedPartsList.Columns("CC").Value, _
                            grdNonStockCodedPartsList.Columns("%").Value, _
                            grdNonStockCodedPartsList.Columns("QTY").Value, _
                            grdNonStockCodedPartsList.Columns("ROWID").Value, _
                            grdNonStockCodedPartsList.Columns("CORE COST").Value
        formshow.cboSupplierName.Enabled = False
        formshow.cmdAdd.Enabled = True
        formshow.Show vbModal
        Call frmRebuiltPartsMain.RefreshForm
          grdNonStockCodedPartsList.Bookmark = m_var_RowSelected
        Call SetDefaultCursor
    End If
        
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdNonStockCodedPartsList_DblClick", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub grdNonStockCodedPartsList_KeyDown(KeyCode As Integer, Shift As Integer)
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim l_Count As Long
    Dim str_PartID As String
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler

    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not allow user go further, just exit sub.
        Exit Sub
    End If
    
    If KeyCode = vbKeyDelete And grdNonStockCodedPartsList.Row >= 0 Then
        m_str_Msg = "Are you sure you want to delete this item?"
        l_Result = MsgBox(m_str_Msg, vbOKCancel Or vbQuestion, _
                          "Delete Materials of this Rebuilt Part")
        If l_Result = vbOK Then
            str_PartID = grdNonStockCodedPartsList.Columns("ROWID").Text
            Call SetWaitCursor
            l_Result = modDBHelper.DeleteNSCPUsed("CES_DELETE.DELETE_NSCP_USED", _
                                                  l_RetVal, _
                                                  str_PartID)
                                                  
            '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT Begin >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            
            'Insert record into the AUDIT_MODIFY_HISTORY table.
            l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                    "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                    l_RetVal, _
                    "Delete Non-Stock Coded Part", _
                    Trim(txtRebuiltCode.Text), _
                    "RB", _
                    "SUPPLIER NUMBER ---> " + grdNonStockCodedPartsList.Columns("SUPPLIER NUMBER").Text, _
                    "SUPPLIER NAME ---> " + grdNonStockCodedPartsList.Columns("SUPPLIER NAME").Text, _
                    "CC ---> " + grdNonStockCodedPartsList.Columns("CC").Text, _
                    "QTY ---> " + grdNonStockCodedPartsList.Columns("QTY").Text, _
                    "% ---> " + grdNonStockCodedPartsList.Columns("%").Text, _
                    "UNIT COST ---> " + grdNonStockCodedPartsList.Columns("UNIT COST").Text, _
                    "CORE COST ---> " + grdNonStockCodedPartsList.Columns("CORE COST").Text, _
                    "TOTAL COST ---> " + grdNonStockCodedPartsList.Columns("TOTAL COST").Text, _
                    "DESCRIPTION ---> " + grdNonStockCodedPartsList.Columns("DESCRIPTION").Text, _
                    "KEYWORD ---> " + grdNonStockCodedPartsList.Columns("KEYWORD").Text, _
                    "LAST MODIFIED DATE ---> " + grdNonStockCodedPartsList.Columns("LAST MODIFIED DATE").Text)
            
            'Now find all estimates where current Rebuilt Part Estimate is present.
            Set RS = New ADODB.Recordset
            
            'In the SC_PARTS_USED table find all Estimates where the current RBE is present.
            Set RS = modDBHelper.RetrieveESTToPropagateRB("CES_INQUIRY.RETRIEVE_EST_TO_PROPAGATE_RB", _
                                                          m_str_RBNumber)
            If RS.RecordCount > 0 Then
                RS.MoveFirst
                    For l_Count = 0 To RS.RecordCount - 1
                        'Add records to the AUDIT_MODIFY_HISTORY table.
                        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "Indirect change. Non-Stock Coded Part was deleted from the Rebuilt Part Estimate " + m_str_RBNumber, _
                            RS.Fields.Item("link_code"), _
                            RS.Fields.Item("link_type"), _
                            "SUPPLIER NUMBER ---> " + grdNonStockCodedPartsList.Columns("SUPPLIER NUMBER").Text, _
                            "SUPPLIER NAME ---> " + grdNonStockCodedPartsList.Columns("SUPPLIER NAME").Text, _
                            "CC ---> " + grdNonStockCodedPartsList.Columns("CC").Text, _
                            "QTY ---> " + grdNonStockCodedPartsList.Columns("QTY").Text, _
                            "% ---> " + grdNonStockCodedPartsList.Columns("%").Text, _
                            "UNIT COST ---> " + grdNonStockCodedPartsList.Columns("UNIT COST").Text, _
                            "CORE COST ---> " + grdNonStockCodedPartsList.Columns("CORE COST").Text, _
                            "TOTAL COST ---> " + grdNonStockCodedPartsList.Columns("TOTAL COST").Text, _
                            "DESCRIPTION ---> " + grdNonStockCodedPartsList.Columns("DESCRIPTION").Text, _
                            "KEYWORD ---> " + grdNonStockCodedPartsList.Columns("KEYWORD").Text, _
                            "LAST MODIFIED DATE ---> " + grdNonStockCodedPartsList.Columns("LAST MODIFIED DATE").Text)
                        RS.MoveNext
                    Next l_Count
            End If
            Set RS = Nothing
            '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT End >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            Call frmRebuiltPartsMain.RefreshForm
            Call SetDefaultCursor
        End If
    End If

    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdNonStockCodedPartsList_KeyDown", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub grdStockCodedPartsList_DblClick()
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not allow user go further, just exit sub.
        Exit Sub
    End If
    
    'Update the stock coded part
    If grdStockCodedPartsList.Row >= 0 Then
          m_var_RowSelected = grdStockCodedPartsList.Bookmark
        Dim formshow As New frmAddSCPToEstimate
        Call SetWaitCursor
        formshow.Caption = "Edit a Stock Coded Part in the Rebuilt Part Estimate"
        formshow.m_str_TypeCode = "RB"
        'formshow.m_var_RowID = grdStockCodedPartsList.Columns("ROWID").Value
        formshow.m_str_MBNumber = m_str_LinkNumber
        formshow.m_str_AuditReference = Trim(txtRebuiltCode.Text)
        formshow.PassValues grdStockCodedPartsList.Columns("STOCK CODE").Value, _
                            grdStockCodedPartsList.Columns("CC").Value, _
                            grdStockCodedPartsList.Columns("%").Value, _
                            grdStockCodedPartsList.Columns("QTY").Value, _
                            grdStockCodedPartsList.Columns("ROWID").Value, _
                            grdStockCodedPartsList.Columns("CORE COST").Value
        formshow.Show vbModal
        Call frmRebuiltPartsMain.RefreshForm
          grdStockCodedPartsList.Bookmark = m_var_RowSelected
        Call SetDefaultCursor
    End If

    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdStockCodedPartsList_DblClick", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub grdStockCodedPartsList_KeyDown(KeyCode As Integer, Shift As Integer)
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim l_Count As Long
    Dim str_PartID As String
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not allow user go further, just exit sub.
        Exit Sub
    End If
    
    If KeyCode = vbKeyDelete And grdStockCodedPartsList.Row >= 0 Then
        m_str_Msg = "Are you sure you want to delete this item?"
        l_Result = MsgBox(m_str_Msg, vbOKCancel Or vbQuestion, _
                          "Delete Materials of this Rebuilt Part")
        If l_Result = vbOK Then
            str_PartID = grdStockCodedPartsList.Columns("ROWID").Text
            Call SetWaitCursor
            l_Result = modDBHelper.DeleteSCPUsed("CES_DELETE.DELETE_SCP_USED", _
                                                 l_RetVal, _
                                                 str_PartID)
            '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT Begin >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            'Insert record into the AUDIT_MODIFY_HISTORY table.
            l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                    "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                    l_RetVal, _
                    "Delete Stock Coded Part", _
                    Trim(txtRebuiltCode.Text), _
                    "RB", _
                    "STOCK CODE ---> " + grdStockCodedPartsList.Columns("STOCK CODE").Text, _
                    "UNIT COST ---> " + grdStockCodedPartsList.Columns("UNIT COST").Text, _
                    "CC ---> " + grdStockCodedPartsList.Columns("CC").Text, _
                    "QTY ---> " + grdStockCodedPartsList.Columns("QTY").Text, _
                    "% ---> " + grdStockCodedPartsList.Columns("%").Text, _
                    "CORE COST ---> " + grdStockCodedPartsList.Columns("CORE COST").Text, _
                    "TOTAL COST ---> " + grdStockCodedPartsList.Columns("TOTAL COST").Text, _
                    "DESCRIPTION ---> " + grdStockCodedPartsList.Columns("DESCRIPTION").Text, _
                    "KEYWORD ---> " + grdStockCodedPartsList.Columns("KEYWORD").Text)
            
            'Now find all estimates where current Rebuilt Part Estimate is present.
            Set RS = New ADODB.Recordset
            
            'In the SC_PARTS_USED table find all Estimates where the current RBE is present.
            Set RS = modDBHelper.RetrieveESTToPropagateRB("CES_INQUIRY.RETRIEVE_EST_TO_PROPAGATE_RB", _
                                                          m_str_RBNumber)
            If RS.RecordCount > 0 Then
                RS.MoveFirst
                    For l_Count = 0 To RS.RecordCount - 1
                        'Add records to the AUDIT_MODIFY_HISTORY table.
                        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "Indirect change. Stock Coded Part was deleted from the Rebuilt Part Estimate " + m_str_RBNumber, _
                            RS.Fields.Item("link_code"), _
                            RS.Fields.Item("link_type"), _
                            "STOCK CODE ---> " + grdStockCodedPartsList.Columns("STOCK CODE").Text, _
                            "UNIT COST ---> " + grdStockCodedPartsList.Columns("UNIT COST").Text, _
                            "CC ---> " + grdStockCodedPartsList.Columns("CC").Text, _
                            "QTY ---> " + grdStockCodedPartsList.Columns("QTY").Text, _
                            "% ---> " + grdStockCodedPartsList.Columns("%").Text, _
                            "CORE COST ---> " + grdStockCodedPartsList.Columns("CORE COST").Text, _
                            "TOTAL COST ---> " + grdStockCodedPartsList.Columns("TOTAL COST").Text, _
                            "DESCRIPTION ---> " + grdStockCodedPartsList.Columns("DESCRIPTION").Text, _
                            "KEYWORD ---> " + grdStockCodedPartsList.Columns("KEYWORD").Text)
                        RS.MoveNext
                    Next l_Count
            End If
            Set RS = Nothing
            '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT End >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            Call frmRebuiltPartsMain.RefreshForm
            Call SetDefaultCursor
        End If
    End If
    
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdStockCodedPartsList_KeyDown", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    Call SetDefaultCursor
End Sub

Private Sub grdRebuiltPartsList_DblClick()
    On Error GoTo Error_Handler

    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not allow user go further, just exit sub.
        Exit Sub
    End If

    'Update the stock coded part
    If grdRebuiltPartsList.Row >= 0 Then
          m_var_RowSelected = grdRebuiltPartsList.Bookmark
        Dim formshow As New frmAddRBPToEstimate
        Call SetWaitCursor
        formshow.Caption = "Edit a Rebuilt Part in the Rebuilt Part Estimate"
        formshow.m_str_TypeCode = "RB"
        formshow.m_str_LinkNumber = m_str_LinkNumber
        formshow.m_str_AuditReference = Trim(txtRebuiltCode.Text)
        formshow.PassValues grdRebuiltPartsList.Columns("REBUILT NUMBER").Value, _
                            grdRebuiltPartsList.Columns("%").Value, _
                            grdRebuiltPartsList.Columns("QTY").Value, _
                            grdRebuiltPartsList.Columns("ROWID").Value
        formshow.Show vbModal
        Call frmRebuiltPartsMain.RefreshForm
          grdRebuiltPartsList.Bookmark = m_var_RowSelected
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdRebuiltPartsList_DblClick", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub grdRebuiltPartsList_KeyDown(KeyCode As Integer, Shift As Integer)
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim l_Count As Long
    Dim str_PartID As String
    Dim RS As ADODB.Recordset
        
    On Error GoTo Error_Handler
    
    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        'Do not allow user go further, just exit sub.
        Exit Sub
    End If
    
    If KeyCode = vbKeyDelete And grdRebuiltPartsList.Row >= 0 Then
        m_str_Msg = "Are you sure you want to delete this item?"
        l_Result = MsgBox(m_str_Msg, vbOKCancel Or vbQuestion, _
                          "Delete Materials of this Rebuilt Part")
        If l_Result = vbOK Then
            str_PartID = grdRebuiltPartsList.Columns("ROWID").Text
            Call SetWaitCursor
            l_Result = modDBHelper.DeleteSCPUsed("CES_DELETE.DELETE_SCP_USED", _
                                                 l_RetVal, _
                                                 str_PartID)
            '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT Begin >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            'Insert record into the AUDIT_MODIFY_HISTORY table.
            l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                    "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                    l_RetVal, _
                    "Delete Rebuilt Part", _
                    Trim(txtRebuiltCode.Text), _
                    "RB", _
                    "UNIT COST ---> " + grdRebuiltPartsList.Columns("UNIT COST").Text, _
                    "REBUILT NUMBER ---> " + grdRebuiltPartsList.Columns("REBUILT NUMBER").Text, _
                    "CC ---> " + grdRebuiltPartsList.Columns("CC").Text, _
                    "QTY ---> " + grdRebuiltPartsList.Columns("QTY").Text, _
                    "% ---> " + grdRebuiltPartsList.Columns("%").Text, _
                    "TOTAL COST ---> " + grdRebuiltPartsList.Columns("TOTAL COST").Text, _
                    "DESCRIPTION ---> " + grdRebuiltPartsList.Columns("DESCRIPTION").Text, _
                    "KEYWORD ---> " + grdRebuiltPartsList.Columns("KEYWORD").Text)
            
            'Now find all estimates where current Rebuilt Part Estimate is present.
            Set RS = New ADODB.Recordset
            
            'In the SC_PARTS_USED table find all Estimates where the current RBE is present.
            Set RS = modDBHelper.RetrieveESTToPropagateRB("CES_INQUIRY.RETRIEVE_EST_TO_PROPAGATE_RB", _
                                                          m_str_RBNumber)
            If RS.RecordCount > 0 Then
                RS.MoveFirst
                    For l_Count = 0 To RS.RecordCount - 1
                        'Add records to the AUDIT_MODIFY_HISTORY table.
                        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "Indirect change. Rebuilt Part was deleted from the Rebuilt Part Estimate " + m_str_RBNumber, _
                            RS.Fields.Item("link_code"), _
                            RS.Fields.Item("link_type"), _
                            "UNIT COST ---> " + grdRebuiltPartsList.Columns("UNIT COST").Text, _
                            "REBUILT NUMBER ---> " + grdRebuiltPartsList.Columns("REBUILT NUMBER").Text, _
                            "CC ---> " + grdRebuiltPartsList.Columns("CC").Text, _
                            "QTY ---> " + grdRebuiltPartsList.Columns("QTY").Text, _
                            "% ---> " + grdRebuiltPartsList.Columns("%").Text, _
                            "TOTAL COST ---> " + grdRebuiltPartsList.Columns("TOTAL COST").Text, _
                            "DESCRIPTION ---> " + grdRebuiltPartsList.Columns("DESCRIPTION").Text, _
                            "KEYWORD ---> " + grdRebuiltPartsList.Columns("KEYWORD").Text)
                        RS.MoveNext
                    Next l_Count
            End If
            Set RS = Nothing
'>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT End >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            Call frmRebuiltPartsMain.RefreshForm
            Call SetDefaultCursor
        End If
    End If
    
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If

    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "grdRebuiltPartsList_KeyDown", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    Call SetDefaultCursor
End Sub

Private Sub optNSCPart_Click()
    On Error GoTo Error_Handler
    
    Call ChangeSearchLabel
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "optNSCPart_Click", g_l_ErrorLineNumber
End Sub

Private Sub optRBPart_Click()
    On Error GoTo Error_Handler
    
    Call ChangeSearchLabel
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "optRBPart_Click", g_l_ErrorLineNumber
End Sub

Private Sub optSCPart_Click()
    On Error GoTo Error_Handler
    
    Call ChangeSearchLabel
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "optSCPart_Click", g_l_ErrorLineNumber
End Sub

Private Sub ChangeSearchLabel()
    On Error GoTo Error_Handler:
    ' As the type to part to search by is changed, we must change
    ' the label to reflect this
    If optRBPart.Value = True Then
        lblKeyToSearch.Caption = "Rebuilt Number:"
    ElseIf optSCPart.Value = True Then
        lblKeyToSearch.Caption = "Stock Code:"
    ElseIf optNSCPart.Value = True Then
        lblKeyToSearch.Caption = "Supplier Number:"
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "ChangeSearchLabel", g_l_ErrorLineNumber
End Sub

Private Function SelectedOption()
    On Error GoTo Error_Handler:
    ' As the type to part to search by is changed, we must change
    ' the label to reflect this
    If optRBPart.Value = True Then
        SelectedOption = "RB"
    ElseIf optSCPart.Value = True Then
        SelectedOption = "SC"
    ElseIf optNSCPart.Value = True Then
        SelectedOption = "NSC"
    Else
        SelectedOption = ""
    End If
    
    Exit Function
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "SelectedOption", g_l_ErrorLineNumber
End Function

Private Sub cmdFindNext_Click()
    Dim RS As ADODB.Recordset
    Dim SearchGrid As DataGrid
    Dim str_SearchField As String
    Dim l_Counter As Long
    
    On Error GoTo Error_Handler:
        
    ' Must enter a value to search
    If txtKeyToSearch.Text = "" Then
        MsgBox "Enter a part to find.", vbExclamation, "Cost Estimate System"
        Exit Sub
    End If
    
    ' Get the grid, seach filed and the record set used for searching
    Select Case SelectedOption()
        Case "RB"
            Set SearchGrid = grdRebuiltPartsList
            str_SearchField = "[REBUILT NUMBER]"
        Case "SC"
            Set SearchGrid = grdStockCodedPartsList
            str_SearchField = "[STOCK CODE]"
        Case "NSC"
            Set SearchGrid = grdNonStockCodedPartsList
            str_SearchField = "[SUPPLIER NUMBER]"
    End Select
    
    If Not SearchGrid.DataSource Is Nothing Then
        Set RS = SearchGrid.DataSource
    Else
        MsgBox "No parts to find.", vbExclamation, "Cost Estimate System"
        Exit Sub
    End If
    
    ' If the grid has lost focus then start seach again
    If RS.AbsolutePage < 0 Then
        m_str_PreviousSearch = ""
        m_str_PreviousSearchType = ""
    End If
    
    ' Determine whether or not they are performing the same
    ' search again or starting a new search
    If m_str_PreviousSearch = txtKeyToSearch.Text And m_str_PreviousSearchType = SelectedOption() Then
        ' Continue Search
        If RS.RecordCount > 0 Then
            RS.AbsolutePosition = RS.Bookmark + 1
            RS.Find str_SearchField & " LIKE '%" & txtKeyToSearch.Text & "%'"
            If RS.EOF Then
                MsgBox "All matching parts have been found.", vbExclamation, "Cost Estimate System"
                m_str_PreviousSearch = ""
                m_str_PreviousSearchType = ""
            Else
                With SearchGrid
                    For l_Counter = .SelBookmarks.Count - 1 To 0 Step -1
                        .SelBookmarks.Remove l_Counter
                    Next
                    .SelBookmarks.Add .RowBookmark(.Row)
                End With
                m_str_PreviousSearch = txtKeyToSearch.Text
                m_str_PreviousSearchType = SelectedOption()
            End If
        Else
            MsgBox "No parts to find.", vbExclamation, "Cost Estimate System"
            m_str_PreviousSearch = txtKeyToSearch.Text
            m_str_PreviousSearchType = SelectedOption()
        End If
    Else
        ' Start New Search
        If RS.RecordCount > 0 Then
            RS.MoveFirst
            RS.Find str_SearchField & " LIKE '%" & txtKeyToSearch.Text & "%'"
            If RS.EOF Then
                RS.MoveFirst
                MsgBox "Part not found.", vbExclamation, "Cost Estimate System"
                With SearchGrid
                    For l_Counter = .SelBookmarks.Count - 1 To 0 Step -1
                        .SelBookmarks.Remove l_Counter
                    Next
                End With
                m_str_PreviousSearch = ""
                m_str_PreviousSearchType = ""
            Else
                With SearchGrid
                    For l_Counter = .SelBookmarks.Count - 1 To 0 Step -1
                        .SelBookmarks.Remove l_Counter
                    Next
                    .SelBookmarks.Add .RowBookmark(.Row)
                End With
                m_str_PreviousSearch = txtKeyToSearch.Text
                m_str_PreviousSearchType = SelectedOption()
            End If
        Else
            MsgBox "No parts to find.", vbExclamation, "Cost Estimate System"
            m_str_PreviousSearch = txtKeyToSearch.Text
            m_str_PreviousSearchType = SelectedOption()
        End If
    End If
            
    Set RS = Nothing
    Set SearchGrid = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdFindNext_Click", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    If Not SearchGrid Is Nothing Then
        Set SearchGrid = Nothing
    End If
End Sub

frmRebuiltPartEstimateOptions.frm :
Option Explicit

Public m_str_RBNumber As String
Public m_str_MMSStockCode As String
Public m_v_RowID As Variant

Private Sub UserPermissions()
    On Error GoTo Error_Handler

    If g_l_AccessLevel = 1 Or g_l_AccessLevel = 2 Then
        optLoadRBEstimate.Value = True
        optCopyRBEstimate.Visible = False
    End If
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "userPermissions", g_l_ErrorLineNumber
End Sub

Private Sub cmdContinue_Click()
    On Error GoTo Error_Handler

    Call SetWaitCursor
    
    If optLoadRBEstimate.Value = True Then
        frmRebuiltPartsMain.PassValues m_str_MMSStockCode, m_str_RBNumber, m_v_RowID
        
        Unload Me
        frmRebuiltPartsMain.Show
        If frmRebuiltPartsMain.WindowState = 1 Then
           frmRebuiltPartsMain.WindowState = 0
        End If
        frmRebuiltPartsMain.SetFocus
    ElseIf optCopyRBEstimate.Value = True Then
        Unload Me
        frmCopyRBEstimate.PassRBNumber m_str_RBNumber, m_str_MMSStockCode
        frmCopyRBEstimate.Show vbModal
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdContinue_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    Call UserPermissions
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub


Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub


frmCopyRBEstimate.frm :
Option Explicit

Private m_str_RBNumber As String
Private m_str_MMSStockCode As String


'-------------------------------------------------------
' Purpose:
'    Allows the user to pass a Rebuilt Number and a MMS Stock Code to the form
'    and populates the form with the information corresponding to the Numbers
'-------------------------------------------------------
Public Sub PassRBNumber(str_RBNumber As String, strMMSStockCode As String)
    On Error GoTo Error_Handler:
    
    ' Pass the RB Number
    m_str_RBNumber = str_RBNumber
    m_str_MMSStockCode = strMMSStockCode
    txtRBNumber.Text = Trim(m_str_RBNumber)
    txtMMSStockCode.Text = Trim(m_str_MMSStockCode)
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PassRBNumber", g_l_ErrorLineNumber
End Sub


'-------------------------------------------------------
' Purpose:
'    Creates a new Rebuilt Part Estimate as a copy of an
'    existing Rebuilt Part Estimate
'-------------------------------------------------------
Private Sub cmdCopy_Click()
    Dim s_NewNum As String
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim l_Count As Long
    Dim str_RBStockCodeFromDB As String
    Dim str_MMSStockCodeFromDB As String
    
    Dim RS As ADODB.Recordset

    On Error GoTo Error_Handler:

    Call SetWaitCursor

    'Make sure that new RB Number is Provided
    If Trim(txtNewRBNumber.Text) = "" Then
        Call SetDefaultCursor
        MsgBox "Please provide a Rebuilt number.", vbExclamation, "Copy Rebuilt Part Estimate"
        txtNewRBNumber.SetFocus
        Exit Sub
    End If
    
    'Make sure that new RB Number is not the same as the one to be copied.
    If UCase(Trim(txtNewRBNumber.Text)) = UCase(Trim(txtRBNumber.Text)) Then
        Call SetDefaultCursor
        MsgBox "Please provide a different Rebuilt Number for the new Rebuilt Part Estimate.", vbExclamation, "Copy Rebuilt Part Estimate"
        txtNewRBNumber.SetFocus
        Exit Sub
    End If
    
    'Make sure that new Rebuilt Number doesn't exist in the database.
    Set RS = modDBHelper.RetrieveRB("CES_INQUIRY.RETRIEVE_RB")
        
    If Not IsNull(RS) And RS.RecordCount > 0 Then
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
            str_RBStockCodeFromDB = RS.Fields.Item("REBUILT_STOCK_NUM")
            If UCase(Trim(txtNewRBNumber.Text)) = str_RBStockCodeFromDB Then
                Call SetDefaultCursor
                MsgBox "The new Rebuilt Number alreay exists. Please provide another one.", vbExclamation, "Copy Rebuilt Part Estimate"
                Set RS = Nothing
                txtNewRBNumber.SetFocus
                Exit Sub
            End If
            RS.MoveNext
        Next l_Count
        RS.MoveFirst
    End If
    
    
    'Make sure that new MMS Stock Code is Provided
    If Trim(txtNewMMSStockCode.Text) = "" Then
        Call SetDefaultCursor
        MsgBox "Please provide a MMS Stock code.", vbExclamation, "Copy Rebuilt Part Estimate"
        txtNewMMSStockCode.SetFocus
        Exit Sub
    End If
    
    'Make sure that new MMS Stock Code is not the same as the one to be copied.
    If UCase(Trim(txtNewMMSStockCode.Text)) = UCase(Trim(txtMMSStockCode.Text)) Then
        Call SetDefaultCursor
        MsgBox "Please provide a different MMS Stock Code for the new Rebuilt Part Estimate.", vbExclamation, "Copy Rebuilt Part Estimate"
        txtNewMMSStockCode.SetFocus
        Exit Sub
    End If
    
    'Make sure that new MMS Stock Code doesn't exist.
    If Not IsNull(RS) And RS.RecordCount > 0 Then
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
            str_MMSStockCodeFromDB = RS.Fields.Item("MMS_STOCK_CODE")
            If UCase(Trim(txtNewMMSStockCode.Text)) = str_MMSStockCodeFromDB Then
                Call SetDefaultCursor
                MsgBox "The new MMS Stock Code alreay exists. Please provide another one.", vbExclamation, "Copy Rebuilt Part Estimate"
                Set RS = Nothing
                txtNewMMSStockCode.SetFocus
                Exit Sub
            End If
            RS.MoveNext
        Next l_Count
        RS.MoveFirst
    End If
    
    Set RS = Nothing

    'Make sure that a Keyword is Provided
    If Trim(cboKeyword.Text) = "" Then
        Call SetDefaultCursor
        MsgBox "Please select a Keyword.", vbExclamation, "Copy Rebuilt Part Estimate"
        cboKeyword.SetFocus
        Exit Sub
    End If
    
    'Copy the Rebuilt Part Estimate
    l_Result = CopyRBEstimate("CES_UPDATE.COPY_RB_ESTIMATE", _
                                   l_RetVal, _
                                   m_str_RBNumber, _
                                   Trim(txtNewRBNumber.Text), _
                                   Trim(cboKeyword.Text), _
                                   Trim(txtNewMMSStockCode.Text))

    ' Determine whether the copy was successful
    If l_Result = 0 Then
        Call SetDefaultCursor
        s_NewNum = UCase(Trim(txtNewRBNumber.Text))
        MsgBox "Rebuilt Part Estimate was copied successfully." & _
                Chr(13) & "The new Rebuilt Part Number is " & _
                Trim(s_NewNum) & ".", _
                vbInformation, _
                "Copy Rebuit Part Estimate"
    Else
        Call SetDefaultCursor
        MsgBox "There was an error while copying Rebuilt Part Estimate information." & _
               Chr(13) & "Rebuilt Part Estimate was not copied successfully.", _
               vbCritical, _
               "Copy Rebuit Part Estimate"
    End If
    Call SetDefaultCursor
    Unload Me

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdCopy_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

'-------------------------------------------------------
' Purpose:
'    When the form loads, populates the combo boxes
'-------------------------------------------------------
Private Sub Form_Load()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler:
    
    Call SetWaitCursor
    
    ' Populate the keyword and Description combo box
    Set RS = modDBHelper.RetrieveRB("CES_INQUIRY.RETRIEVE_RB")
    
    Set cboKeyword.RowSource = RS
    
    cboKeyword.ListField = "keyword"
    
    ' Populate the Keyword and Description from the RB Number
    Set RS = modDBHelper.RetrieveRB("CES_INQUIRY.RETRIEVE_RB")
    If RS.RecordCount > 0 Then
        RS.Filter = "rebuilt_stock_num = '" + m_str_RBNumber + "'"
        txtKeyword.Text = RS.Fields.Item("keyword")
        cboKeyword.Text = RS.Fields.Item("keyword")
    End If

    Set RS = Nothing
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

'-------------------------------------------------------
' Purpose:
'    Closes the form without copying the Rebuilt Part estimate.
'-------------------------------------------------------
Private Sub cmdCancel_Click()
    On Error GoTo Error_Handler:
    
    Unload Me
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdCancel_Click", g_l_ErrorLineNumber
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub txtNewRBNumber_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtNewRBNumber edit-box to upper case.
    l_CursorPosition = txtNewRBNumber.SelStart
    str_Data = txtNewRBNumber.Text
    str_Data = UCase(str_Data)
    txtNewRBNumber.Text = str_Data
    txtNewRBNumber.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtNewRBNumber_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtNewMMSStockCode_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtNewMMSStockCode edit-box to upper case.
    l_CursorPosition = txtNewMMSStockCode.SelStart
    str_Data = txtNewMMSStockCode.Text
    str_Data = UCase(str_Data)
    txtNewMMSStockCode.Text = str_Data
    txtNewMMSStockCode.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtNewMMSStockCode", g_l_ErrorLineNumber
End Sub
frmAddRBPTToEstimate.frm :
Option Explicit

Private m_str_Msg As String
Private Const m_str_const_MsgBoxCaption As String = "Add / Update Rebuilt Parts"

Private m_var_RowID As Variant
Private m_str_MMSStockCode As String

Public m_str_LinkNumber As String
Public m_str_TypeCode As String
Public m_str_AuditReference As String

'Pass values to populate the form for editing
Public Sub PassValues(ByVal str_RebuiltNum As String, _
                      ByVal str_PercentUsage As String, _
                      ByVal str_Quantity As String, _
                      ByVal var_RowIDPass As Variant)
     On Error GoTo Error_Handler
     
     cboRebuiltNumber.Text = str_RebuiltNum
     Call ResolveRebuiltPart
     txtQuantity.Text = str_Quantity
     txtPercentUsage.Text = Replace(str_PercentUsage, ",", ".")
     m_var_RowID = var_RowIDPass
     cmdAdd.Caption = "Update"
     cmdClose.Visible = False
     cboRebuiltNumber.Enabled = False
     cmdResolve.Enabled = False

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PassValues", g_l_ErrorLineNumber
End Sub

Private Sub cmdAdd_Click()
    Dim l_RetVal As Long
    Dim l_Result As Long
    Dim l_Count As Long
    Dim str_PercentUsage As String
    Dim str_CostCentre As String
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    If cboRebuiltNumber.Text = "" Then
         If Not IsNumeric(cboRebuiltNumber.Text) Then
            Call SetDefaultCursor
            m_str_Msg = "Please enter a Rebuilt Number"
            MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
            cboRebuiltNumber.SetFocus
            Exit Sub
         End If
     End If
    If Not IsNumeric(txtQuantity.Text) Then
        Call SetDefaultCursor
        m_str_Msg = "Quantity not entered correctly."
        MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
        txtQuantity.SetFocus
        Exit Sub
    Else
        If Not IsValidLong(txtQuantity.Text) Then
            Call SetDefaultCursor
            m_str_Msg = "Quantity not entered correctly."
            MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
            txtQuantity.SetFocus
            Exit Sub
        End If
    End If
    'Check that quantity is positive number or zero.
    If CLng(txtQuantity.Text) < 0 Then
        Call SetDefaultCursor
        m_str_Msg = "Quantity not entered correctly."
        MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
        txtQuantity.SetFocus
        Exit Sub
    End If
    
    If txtPartUnitCost.Text = "" Then
        txtPartUnitCost.Text = 0
    End If
    
    'Check that user typed something into txtPercentUsage edit-box, and this data is
    'valid percent.
    str_PercentUsage = Trim(txtPercentUsage.Text)
    If str_PercentUsage = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please provide a Percent Usage. Percent Usage can be a "
        m_str_Msg = m_str_Msg + "positive number between 0 and 100 inclusive with "
        m_str_Msg = m_str_Msg + "possible fraction."
        MsgBox m_str_Msg, vbExclamation Or vbOKOnly, m_str_const_MsgBoxCaption
        txtPercentUsage.SetFocus
        Exit Sub
    End If
    If CheckPercent(str_PercentUsage) = False Then
        Call SetDefaultCursor
        m_str_Msg = "Percent Usage is not entered correctly. Percent Usage can be a "
        m_str_Msg = m_str_Msg + "positive number between 0 and 100 inclusive with "
        m_str_Msg = m_str_Msg + "possible fraction."
        MsgBox m_str_Msg, vbExclamation Or vbOKOnly, m_str_const_MsgBoxCaption
        txtPercentUsage.SetFocus
        Exit Sub
    End If
    
    str_PercentUsage = Replace(str_PercentUsage, ".", ",")
    
    'Check that user typed something into the txtQuantity edit-box, and this data is
    'valid quantity.

       
    If cmdAdd.Caption = "Add" Then
        'Before adding check that "Rebuilt Number" is not duplicated in the estimate.
        Set RS = New ADODB.Recordset
        Set RS = modDBHelper.RetrieveRBPUsed("CES_INQUIRY.RETRIEVE_RBP_USED", _
                                             m_str_LinkNumber, _
                                             m_str_TypeCode)
        If RS.RecordCount > 0 Then
            RS.MoveFirst
            For l_Count = 0 To RS.RecordCount - 1
                If RS.Fields.Item("REBUILT NUMBER") = cboRebuiltNumber.Text Then
                    Set RS = Nothing
                    Call SetDefaultCursor
                    m_str_Msg = "Record with the same Rebuilt Number is already exist "
                    m_str_Msg = m_str_Msg + "in the current Estimate. Please choose "
                    m_str_Msg = m_str_Msg + "another one."
                    MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
                    cboRebuiltNumber.SetFocus
                    Exit Sub
                End If
                RS.MoveNext
            Next l_Count
        End If
        Set RS = Nothing
        
        'Add a new stock coded part
        l_Result = modDBHelper.AddRBPUsed("CES_UPDATE.ADD_RBP_USED", _
                                          l_RetVal, _
                                          m_str_MMSStockCode, _
                                          " ", _
                                          txtQuantity.Text, _
                                          str_PercentUsage, _
                                          g_str_UserName, _
                                          m_str_LinkNumber, _
                                          CCur(txtPartUnitCost.Text), _
                                          cboRebuiltNumber.Text, _
                                          m_str_TypeCode, _
                                          CCur("0.00"))
                                          'CCur(txtCoreCost.Text))
        
        If (l_Result = 0) Then
            Call SetDefaultCursor
            m_str_Msg = "Rebuilt Part has been added."
            MsgBox m_str_Msg, vbInformation Or vbOKOnly, m_str_const_MsgBoxCaption
        Else
            Call SetDefaultCursor
            m_str_Msg = "There was an error adding Stock Coded Part. Please Contact "
            m_str_Msg = m_str_Msg + "Administrator."
            MsgBox m_str_Msg, vbCritical Or vbOKOnly, m_str_const_MsgBoxCaption
        End If
        cmdAdd.Enabled = False
        
        '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT Begin >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        
        'Insert record into the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                l_RetVal, _
                "Add Rebuilt Part", _
                m_str_AuditReference, _
                m_str_TypeCode, _
                "Rebuilt Number ---> " + Trim(cboRebuiltNumber.Text), _
                "Keyword ---> " + Trim(cboPartType.Text), _
                "Description ---> " + Trim(cboPartDescription.Text), _
                "Quantity ---> " + Trim(txtQuantity.Text), _
                "Percent Usage ---> " + Trim(txtPercentUsage.Text), _
                "Last Revised ---> " + Trim(txtLastRevised.Text), _
                "Part Cost ($/unit) ---> " + Trim(txtPartUnitCost.Text))
                
        ' If adding a rebuilt part inside a rebuilt part then cycle
        ' changes to all estimates containing this rebuilt part
        If m_str_TypeCode = "RB" Then
            
            'Now find all estimates where current Rebuilt Part Estimate is present.
            Set RS = New ADODB.Recordset
            
            'In the SC_PARTS_USED table find all Estimates where the current RBE is present.
            Set RS = modDBHelper.RetrieveESTToPropagateRB("CES_INQUIRY.RETRIEVE_EST_TO_PROPAGATE_RB", _
                                                          m_str_AuditReference)
            If RS.RecordCount > 0 Then
                RS.MoveFirst
                    For l_Count = 0 To RS.RecordCount - 1
                        'Add records to the AUDIT_MODIFY_HISTORY table.
                        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "Indirect change. Rebuilt Part was added to the Rebuilt Part Estimate " + m_str_AuditReference, _
                            RS.Fields.Item("link_code"), _
                            RS.Fields.Item("link_type"), _
                            "Rebuilt Number ---> " + Trim(cboRebuiltNumber.Text), _
                            "Keyword ---> " + Trim(cboPartType.Text), _
                            "Description ---> " + Trim(cboPartDescription.Text), _
                            "Quantity ---> " + Trim(txtQuantity.Text), _
                            "Percent Usage ---> " + Trim(txtPercentUsage.Text), _
                            "Last Revised ---> " + Trim(txtLastRevised.Text), _
                            "Part Cost ($/unit) ---> " + Trim(txtPartUnitCost.Text))
                        RS.MoveNext
                    Next l_Count
            End If
            Set RS = Nothing
                       
        End If
        '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT End >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    Else
        'Update an existing stock coded part
        l_Result = modDBHelper.UpdateRBPUsed("CES_UPDATE.UPDATE_RBP_USED", _
                                             l_RetVal, _
                                             " ", _
                                             txtQuantity.Text, _
                                             str_PercentUsage, _
                                             g_str_UserName, _
                                             m_str_LinkNumber, _
                                             CCur(txtPartUnitCost.Text), _
                                             cboRebuiltNumber.Text, _
                                             m_var_RowID, _
                                             CCur("0.00"))
                                             'CCur(txtCoreCost.Text))
    
        If (l_Result = 0) Then
            Call SetDefaultCursor
            m_str_Msg = "Rebuilt Part has been updated."
            MsgBox m_str_Msg, vbOKOnly Or vbInformation, m_str_const_MsgBoxCaption
        Else
            Call SetDefaultCursor
            m_str_Msg = "There was an error updating Rebuilt Part. Please Contact "
            m_str_Msg = m_str_Msg + "Administrator."
            MsgBox m_str_Msg, vbOKOnly Or vbCritical, m_str_const_MsgBoxCaption
        End If
        
         '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT Begin >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        
        'Insert record into the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                l_RetVal, _
                "Update Rebuilt Part", _
                m_str_AuditReference, _
                m_str_TypeCode, _
                "Rebuilt Number ---> " + Trim(cboRebuiltNumber.Text), _
                "Keyword ---> " + Trim(cboPartType.Text), _
                "Description ---> " + Trim(cboPartDescription.Text), _
                "Quantity ---> " + Trim(txtQuantity.Text), _
                "Percent Usage ---> " + Trim(txtPercentUsage.Text), _
                "Last Revised ---> " + Trim(txtLastRevised.Text), _
                "Part Cost ($/unit) ---> " + Trim(txtPartUnitCost.Text))
                
        ' If updating a rebuilt part inside a rebuilt part then cycle
        ' changes to all estimates containing this rebuilt part
        If m_str_TypeCode = "RB" Then
            
            'Now find all estimates where current Rebuilt Part Estimate is present.
            Set RS = New ADODB.Recordset
            
            'In the SC_PARTS_USED table find all Estimates where the current RBE is present.
            Set RS = modDBHelper.RetrieveESTToPropagateRB("CES_INQUIRY.RETRIEVE_EST_TO_PROPAGATE_RB", _
                                                          m_str_AuditReference)
            If RS.RecordCount > 0 Then
                RS.MoveFirst
                    For l_Count = 0 To RS.RecordCount - 1
                        'Add records to the AUDIT_MODIFY_HISTORY table.
                        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "Indirect change. Rebuilt Part was updated from the Rebuilt Part Estimate " + m_str_AuditReference, _
                            RS.Fields.Item("link_code"), _
                            RS.Fields.Item("link_type"), _
                            "Rebuilt Number ---> " + Trim(cboRebuiltNumber.Text), _
                            "Keyword ---> " + Trim(cboPartType.Text), _
                            "Description ---> " + Trim(cboPartDescription.Text), _
                            "Quantity ---> " + Trim(txtQuantity.Text), _
                            "Percent Usage ---> " + Trim(txtPercentUsage.Text), _
                            "Last Revised ---> " + Trim(txtLastRevised.Text), _
                            "Part Cost ($/unit) ---> " + Trim(txtPartUnitCost.Text))
                        RS.MoveNext
                    Next l_Count
            End If
            Set RS = Nothing
        End If
        '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT End >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        Unload Me
    End If

    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdAdd_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub cmdClose_Click()
    On Error GoTo Error_Handler
    
    Unload Me
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdClose_Click", g_l_ErrorLineNumber
End Sub

Private Sub ResolveRebuiltPart()
    Dim RS As ADODB.Recordset
    Dim RSCodes As ADODB.Recordset
    Dim RSLinks As ADODB.Recordset
    Dim RBPGraph As clsGraph
    Dim str_Cycle As String
    
    'Fills in the rest of the fields from the Rebuilt Code
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor

    Set RS = New ADODB.Recordset
    'Query the database to receive the information about the part
    'First populate the rebuilt information
    Set RS = modDBHelper.RetrieveRB("CES_INQUIRY.RETRIEVE_RB")
    RS.Filter = "rebuilt_stock_num = '" + cboRebuiltNumber.Text + "'"
    If RS.RecordCount > 0 Then
        RS.MoveFirst
        
        ' Before resolving the rebuilt part ensure that this part can legally be
        ' added with out creating any cycles of rebuilt parts in the system
        If m_str_TypeCode = "RB" Then
            ' Get all of the rebuilt part codes that are used and the links to other rebuilt parts
            Set RSCodes = modDBHelper.RetrieveRBPUsedDistinct("CES_INQUIRY.RETRIEVE_RBP_USED_DISTINCT")
            Set RSLinks = modDBHelper.RetrieveRBPUsedLinks("CES_INQUIRY.RETRIEVE_RBP_USED_LINKS")
            ' Now create a Graph of all Rebuilt Parts contained and containing other
            ' Rebuilt Parts
            Set RBPGraph = New clsGraph
            ' Add the vertices which are the Rebuilt Parts
            If RSCodes.RecordCount > 0 Then
                RSCodes.MoveFirst
                While Not RSCodes.EOF
                    RBPGraph.AddVertex UCase(RSCodes.Fields.Item("mms_rebuilt_code"))
                    RSCodes.MoveNext
                Wend
            End If
            ' Add the edges which show which rebuilt parts belong to which others
            If RSLinks.RecordCount > 0 Then
                RSLinks.MoveFirst
                While Not RSLinks.EOF
                    RBPGraph.AddEdge UCase(RSLinks.Fields.Item("mms_rebuilt_code")), UCase(RSLinks.Fields.Item("link_code"))
                    RSLinks.MoveNext
                Wend
            End If
            ' Now add the edge to represent the part to be added
            If Not RBPGraph.VertexExists(UCase(RS.Fields.Item("rebuilt_stock_num"))) Then
                RBPGraph.AddVertex UCase(RS.Fields.Item("rebuilt_stock_num"))
            End If
            If Not RBPGraph.VertexExists(UCase(m_str_LinkNumber)) Then
                RBPGraph.AddVertex UCase(m_str_LinkNumber)
            End If
            RBPGraph.AddEdge UCase(RS.Fields.Item("rebuilt_stock_num")), UCase(m_str_LinkNumber)
            ' Now use the graph object representing the rebuilt parts to determine
            ' whether or not any cycles exist
            If RBPGraph.CycleExists Then
                ' There is a cycle.  We must identify it
                str_Cycle = RBPGraph.FindCycle()
                ' Clean up and show message
                Call SetDefaultCursor
                Set RS = Nothing
                Set RSCodes = Nothing
                Set RSLinks = Nothing
                Set RBPGraph = Nothing
                cmdAdd.Enabled = False
                m_str_Msg = "Error. Adding this Rebuilt Part would create the following invalid cycle of Rebuilt Parts:"
                m_str_Msg = m_str_Msg & Chr(13) & str_Cycle
                MsgBox m_str_Msg, vbExclamation Or vbOKOnly, m_str_const_MsgBoxCaption
                Exit Sub
            End If
        End If
        
        'Load the values into the text boxes
        cboRebuiltNumber.Text = RS.Fields.Item("rebuilt_stock_num")
        cboPartType.Text = RS.Fields.Item("keyword")
        cboPartDescription.Text = RS.Fields.Item("detailed_desc")
      
        txtLastRevised.Text = IIf(IsNull(RS.Fields.Item("date_modified")), "", _
                                  RS.Fields.Item("date_modified"))
        If IsNull(RS.Fields.Item("mms_stock_code")) = True Then
            m_str_MMSStockCode = ""
        Else
            m_str_MMSStockCode = RS.Fields.Item("mms_stock_code")
        End If
        
       'Retrieve the material cost of the rebuilt part resolved
       Set RS = modDBHelper.RetrieveRBPTotalCost2("CES_INQUIRY.RETRIEVE_RBP_TOTAL_COST2", cboRebuiltNumber.Text, "RB")
              
       If RS.RecordCount > 0 Then
           txtPartUnitCost.Text = Format(ColumnTotals(RS, "TOTAL COST"), "currency")
       Else
           txtPartUnitCost.Text = "0"
       End If
       cmdAdd.Enabled = True
       cmdResolve.Default = False
       cmdAdd.Default = True
    Else
        Call SetDefaultCursor
        'Cannot find the part
        cmdAdd.Enabled = False
        cmdAdd.Default = False
        cmdResolve.Default = True
        m_str_Msg = "No information for the Rebuilt Number."
        MsgBox m_str_Msg, vbExclamation Or vbOKOnly, m_str_const_MsgBoxCaption
        'cboRebuiltNumber.SetFocus
    End If
    
    Set RS = Nothing
    Set RSCodes = Nothing
    Set RSLinks = Nothing
    Set RBPGraph = Nothing
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "ResolveRebuiltPart", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    If Not RSCodes Is Nothing Then
        Set RSCodes = Nothing
    End If
    If Not RSLinks Is Nothing Then
        Set RSLinks = Nothing
    End If
    If Not RBPGraph Is Nothing Then
        Set RBPGraph = Nothing
    End If
End Sub

Private Sub cmdResolve_Click()
    On Error GoTo Error_Handler
    
    Call ResolveRebuiltPart
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdResolve_Click", g_l_ErrorLineNumber
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    cboPartDescription.Enabled = False
    cboPartType.Enabled = False

    Call PopulateFields
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub PopulateFields()
    Dim RS As New ADODB.Recordset
    
    'Populate each of the combo boxes
    
    On Error GoTo Error_Handler
    
    Set cboRebuiltNumber.RowSource = modDBHelper.PopulateRBComboBoxes( _
                                                "CES_INQUIRY.POPULATE_RB_COMBOXES", _
                                                "1")
    cboRebuiltNumber.ListField = "rebuilt_stock_num"

    Set cboPartType.RowSource = modDBHelper.PopulateRBComboBoxes( _
                                                "CES_INQUIRY.POPULATE_RB_COMBOXES", _
                                                "2")
    cboPartType.ListField = "keyword"

    Set cboPartDescription.RowSource = modDBHelper.PopulateRBComboBoxes( _
                                                "CES_INQUIRY.POPULATE_RB_COMBOXES", _
                                                "3")
    cboPartDescription.ListField = "detailed_desc"
           
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateFields", g_l_ErrorLineNumber
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler

    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub txtPercentUsage_GotFocus()
    On Error GoTo Error_Handler

    txtPercentUsage.SelStart = 0
    txtPercentUsage.SelLength = Len(txtPercentUsage.Text)
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtPercentUsage_GotFocus", g_l_ErrorLineNumber
End Sub

Private Sub txtQuantity_GotFocus()
    On Error GoTo Error_Handler

    txtQuantity.SelStart = 0
    txtQuantity.SelLength = Len(txtQuantity.Text)
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtQuantity_GotFocus", g_l_ErrorLineNumber
End Sub
frmAddLabourtask.frm :
'=================================================================
'frmAddLabourTask.frm
'
'Adds a non stock coded part to the cost tracking system database.
'===============================================================
Option Explicit

Private m_str_Hours As String
Private m_str_Minutes As String
Private m_str_Msg As String
Private Const m_str_const_MsgBoxCaption As String = "Add / Update Labour Tasks"

Public m_str_TypeID As String
Public m_str_PartID As String
Public m_str_LinkNumber As String
Public m_str_AuditReference As String

Private Sub cmdClose_Click()
    On Error GoTo Error_Handler
    
    Unload Me
    Exit Sub
    
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdClose_Click", g_l_ErrorLineNumber
End Sub

'The cmdAddLabourTask_Click button either Adds a new non-stock coded part into
'the cost estimate system or updates an existing non-stock coded part
Private Sub cmdAddLabourTask_Click()
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim l_Count As Long
    Dim str_FixedMins As String
    Dim str_FixedHours As String
    Dim str_TimeInDecimal As String
    Dim str_AdjTimeInDecimal As String
    Dim str_LabourType As String
    Dim RS As ADODB.Recordset
    Dim str_PercentUsage As String
    Dim str_TaskDescription As String
    Dim str_CostCentre As String
    Dim str_LabourPosition As String
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    'Make sure that user choused something from the cboTaskDescription combo-box.
    str_TaskDescription = Trim(cboTaskDescription.Text)
    If str_TaskDescription = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please choose Task Description."
        MsgBox m_str_Msg, vbExclamation Or vbOKOnly, m_str_const_MsgBoxCaption
        cboTaskDescription.SetFocus
        Exit Sub
    End If
    
    'Make sure that user choused something from the cboLabourPosition combo-box.
    str_LabourPosition = Trim(cboLabourPosition.Text)
    If str_LabourPosition = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please choose Labour Position."
        MsgBox m_str_Msg, vbExclamation Or vbOKOnly, m_str_const_MsgBoxCaption
        cboLabourPosition.SetFocus
        Exit Sub
    End If
    
    'Make sure that user choused something from the cboCostCentre combo-box.
    str_CostCentre = Trim(cboCostCentre.Text)
    If str_CostCentre = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please choose Cost Centre."
        MsgBox m_str_Msg, vbExclamation Or vbOKOnly, m_str_const_MsgBoxCaption
        cboCostCentre.SetFocus
        Exit Sub
    End If
        
    'Confirm that the percent is entered correctly
    str_PercentUsage = Trim(txtPercentUsage.Text)
    If str_PercentUsage = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please enter Percent Usage."
        MsgBox m_str_Msg, vbExclamation Or vbOKOnly, m_str_const_MsgBoxCaption
        txtPercentUsage.SetFocus
        Exit Sub
    End If
    If CheckPercent(str_PercentUsage) = False Then
        Call SetDefaultCursor
        m_str_Msg = "Percent Usage is not entered correctly. Percent Usage can be a "
        m_str_Msg = m_str_Msg + "positive number between 0 and 100 inclusive with "
        m_str_Msg = m_str_Msg + "possible fraction."
        MsgBox m_str_Msg, vbExclamation Or vbOKOnly, m_str_const_MsgBoxCaption
        txtPercentUsage.SetFocus
        Exit Sub
    End If

    str_PercentUsage = Replace(str_PercentUsage, ".", ",")
    
    'Confirm that the hours are entered correctly
    str_FixedHours = Trim(txtHoursRequired.Text)
    If str_FixedHours = "" Then
        str_FixedHours = "0"
        txtHoursRequired.Text = "0"
    End If
    
    If Not IsValidLong(str_FixedHours) Or Int(str_FixedHours) < 0 Then
        Call SetDefaultCursor
        m_str_Msg = "Hours not entered correctly."
        MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
        txtHoursRequired.SetFocus
        Exit Sub
    End If
    str_FixedHours = Round(str_FixedHours, 0)
    
    'Confirm that the minutes are entered correctly
    str_FixedMins = Trim(txtMinutesRequired.Text)
    If str_FixedMins = "" Then
        str_FixedMins = "00"
        txtMinutesRequired.Text = "00"
    End If
    If Not IsValidLong(str_FixedHours) Then
        Call SetDefaultCursor
        m_str_Msg = "Minutes not entered correctly."
        MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
        txtMinutesRequired.SetFocus
        Exit Sub
    End If
    If Int(str_FixedMins) < 0 Or Int(str_FixedMins) > 59 Then
        Call SetDefaultCursor
        m_str_Msg = "Minutes must be between 0 and 59."
        MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
        txtMinutesRequired.SetFocus
        Exit Sub
    End If
    str_FixedMins = Round(str_FixedMins, 0)
    If (Len(str_FixedMins) = 1) Then
        str_FixedMins = 0 & str_FixedMins
    End If
    
    str_TimeInDecimal = str_FixedHours & "." & MinutesToDecimal(str_FixedMins)
    
    str_AdjTimeInDecimal = CStr(CDbl(str_TimeInDecimal) / g_dbl_NonProductiveTimeAdj)
    
    If cmdAddLabourTask.Caption = "Add Labour Task" Then
        l_Result = modDBHelper.AddLabourTasks("CES_UPDATE.ADD_LABOUR_TASKS", _
                                              l_RetVal, _
                                              str_LabourPosition, _
                                              m_str_LinkNumber, _
                                              m_str_TypeID, _
                                              str_CostCentre, _
                                              str_TaskDescription, _
                                              str_LabourType, _
                                              str_PercentUsage, _
                                              str_FixedHours & ":" & str_FixedMins, _
                                              DecimalToMinutes(str_AdjTimeInDecimal), _
                                              CDbl(str_TimeInDecimal), _
                                              " ", _
                                              g_str_UserName)
        If (l_Result = 0) Then
            Call SetDefaultCursor
            m_str_Msg = "Labour Task has been added."
            MsgBox m_str_Msg, vbInformation Or vbOKOnly, m_str_const_MsgBoxCaption
        Else
            Call SetDefaultCursor
            m_str_Msg = "There was an error adding the Labour Task.  Please Contact "
            m_str_Msg = m_str_Msg + "Administrator."
            MsgBox m_str_Msg, vbCritical Or vbOKOnly, m_str_const_MsgBoxCaption
            Exit Sub
        End If
        
        'Add record to the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "Add Labour Task", _
                            m_str_AuditReference, _
                            m_str_TypeID, _
                            "Task Description ---> " + str_TaskDescription, _
                            "Labour Position ---> " + str_LabourPosition, _
                            "Cost Centre ---> " + str_CostCentre, _
                            "Percent Usage ---> " + str_PercentUsage, _
                            "Hours Reqired (Hours) ---> " + str_FixedHours, _
                            "Hours Reqired (Minutes) ---> " + str_FixedMins)

        ' If adding a labour task was performed inside a rebuilt part then cycle
        ' changes to all estimates containing this rebuilt part
        If m_str_TypeID = "RB" Then
            
            'Now find all estimates where current Rebuilt Part Estimate is present.
            Set RS = New ADODB.Recordset
            
            'In the SC_PARTS_USED table find all Estimates where the current RBE is present.
            Set RS = modDBHelper.RetrieveESTToPropagateRB("CES_INQUIRY.RETRIEVE_EST_TO_PROPAGATE_RB", _
                                                          m_str_AuditReference)
            If RS.RecordCount > 0 Then
                RS.MoveFirst
                    For l_Count = 0 To RS.RecordCount - 1
                        'Add records to the AUDIT_MODIFY_HISTORY table.
                        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "Indirect change. Labour was added from the Rebuilt Part Estimate " + m_str_AuditReference, _
                            RS.Fields.Item("link_code"), _
                            RS.Fields.Item("link_type"), _
                            "Task Description ---> " + str_TaskDescription, _
                            "Labour Position ---> " + str_LabourPosition, _
                            "Cost Centre ---> " + str_CostCentre, _
                            "Percent Usage ---> " + str_PercentUsage, _
                            "Hours Reqired (Hours) ---> " + str_FixedHours, _
                            "Hours Reqired (Minutes) ---> " + str_FixedMins)
                        RS.MoveNext
                    Next l_Count
            End If
            Set RS = Nothing
        End If
    Else 'If cmdAddLabourTask.Caption = "Update Labour" Then
        l_Result = modDBHelper.UpdateLabourTasks("CES_UPDATE.UPDATE_LABOUR_TASKS", _
                                                 l_RetVal, _
                                                 str_LabourPosition, _
                                                 m_str_LinkNumber, _
                                                 m_str_TypeID, _
                                                 str_CostCentre, _
                                                 str_TaskDescription, _
                                                 str_LabourType, _
                                                 str_PercentUsage, _
                                                 str_FixedHours & ":" & str_FixedMins, _
                                                 DecimalToMinutes(str_AdjTimeInDecimal), _
                                                 m_str_PartID, _
                                                 CDbl(str_TimeInDecimal), _
                                                 g_str_UserName)
    
        If (l_Result = 0) Then
            Call SetDefaultCursor
            m_str_Msg = "Labour Task has been updated."
            MsgBox m_str_Msg, vbInformation Or vbOKOnly, m_str_const_MsgBoxCaption
        Else
            Call SetDefaultCursor
            m_str_Msg = "There was an error Updating the Labour Task.  Please Contact "
            m_str_Msg = m_str_Msg + "Administrator."
            MsgBox m_str_Msg, vbCritical Or vbOKOnly, m_str_const_MsgBoxCaption
            Exit Sub
        End If
        
        'Add record to the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "Update Labour Task", _
                            m_str_AuditReference, _
                            m_str_TypeID, _
                            "Task Description ---> " + str_TaskDescription, _
                            "Labour Position ---> " + str_LabourPosition, _
                            "Cost Centre ---> " + str_CostCentre, _
                            "Percent Usage ---> " + str_PercentUsage, _
                            "Hours Reqired (Hours) ---> " + str_FixedHours, _
                            "Hours Reqired (Minutes) ---> " + str_FixedMins)
        
        ' If updating a labour task was performed inside a rebuilt part then cycle
        ' changes to all estimates containing this rebuilt part
        If m_str_TypeID = "RB" Then
            
            'Now find all estimates where current Rebuilt Part Estimate is present.
            Set RS = New ADODB.Recordset
            
            'In the SC_PARTS_USED table find all Estimates where the current RBE is present.
            Set RS = modDBHelper.RetrieveESTToPropagateRB("CES_INQUIRY.RETRIEVE_EST_TO_PROPAGATE_RB", _
                                                          m_str_AuditReference)
            If RS.RecordCount > 0 Then
                RS.MoveFirst
                    For l_Count = 0 To RS.RecordCount - 1
                        'Add records to the AUDIT_MODIFY_HISTORY table.
                        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "Indirect change. Labour was updated from the Rebuilt Part Estimate " + m_str_AuditReference, _
                            RS.Fields.Item("link_code"), _
                            RS.Fields.Item("link_type"), _
                            "Task Description ---> " + str_TaskDescription, _
                            "Labour Position ---> " + str_LabourPosition, _
                            "Cost Centre ---> " + str_CostCentre, _
                            "Percent Usage ---> " + str_PercentUsage, _
                            "Hours Reqired (Hours) ---> " + str_FixedHours, _
                            "Hours Reqired (Minutes) ---> " + str_FixedMins)
                        RS.MoveNext
                    Next l_Count
            End If
            Set RS = Nothing
        End If
        Unload Me
    End If 'If cmdAddLabourTask.Caption = "Add Labour Task" Then
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdAddLabourTask_Click", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    Call SetDefaultCursor
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    Call PopulateDropdowns
    If (m_str_PartID <> "") Then
        cmdAddLabourTask.Caption = "Update Labour"
        Me.Caption = "Update a Labour Task"
        fraAddLabourTask.Caption = "Update a Labour Task"
        'Prepare to retrieve data
        Call PopulateFields
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub PopulateDropdowns()
    Dim RS As ADODB.Recordset

    On Error GoTo Error_Handler

    'Set RS = New ADODB.Recordset
    'Load the data into the input forms for editing
    
    Set RS = modDBHelper.RetrieveTaskDescription("CES_INQUIRY.RETRIEVE_TASK_DESCRIPTION")
    Set cboTaskDescription.RowSource = RS
    cboTaskDescription.ListField = "TASK DESCRIPTION"
    
    Set RS = modDBHelper.RetrieveLabourPosition("CES_INQUIRY.RETRIEVE_LABOUR_POSITION")
    Set cboLabourPosition.RowSource = RS
    cboLabourPosition.ListField = "LABOUR_DEFN"
    
    Set RS = modDBHelper.RetrieveCostCentres("CES_INQUIRY.RETRIEVE_COST_CENTRES")
    Set cboCostCentre.RowSource = RS
    cboCostCentre.ListField = "COST_CENTRE"

    Set RS = Nothing
    
    Exit Sub
    
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateDropdowns", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub PopulateFields()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    m_str_Hours = " "
    m_str_Minutes = " "
    'Query database to load vehicle estimate
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.RetrieveMBAllLabour("CES_INQUIRY.RETRIEVE_MB_ALL_LABOUR", m_str_PartID)
    If RS.RecordCount > 0 Then
        'RS.Filter = "rowid = '" + m_str_PartID + "'"
        ParseHours RS.Fields.Item("HRS_REQD"), m_str_Hours, m_str_Minutes
        
        'Load values into text boxes
        txtHoursRequired.Text = m_str_Hours
        txtMinutesRequired.Text = m_str_Minutes
        txtPercentUsage.Text = Replace(RS.Fields.Item("USAGE"), ",", ".")
        cboTaskDescription.Text = RS.Fields.Item("TASK")
        cboCostCentre.Text = RS.Fields.Item("COSTCENTRE")
        cboLabourPosition.Text = RS.Fields.Item("LABOUR_DEFN")
    End If
       
    Set RS = Nothing
    Exit Sub
    
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateFields", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor
    m_str_TypeID = ""
    m_str_PartID = ""
    m_str_LinkNumber = ""
    Unload Me
        
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub fraAddLabourTask_DragDrop(Source As Control, X As Single, Y As Single)

End Sub
frmAddNSCPartToEstimate.frm :
'==============================================================
'frmAddNSCPToEstimate.FRM
'
'Adds a vehicle estimate to the cost tracking system database.
'User enters/updates information into the input boxes and submits the values
'which are then saved into the database.
'===============================================================
Option Explicit

Private m_l_ID As Long
Private m_var_NSCPRowID As Variant
Private m_str_Msg As String
Private Const m_str_const_MsgBoxCaption As String = "Add / Update Non-Stock Coded Parts"

Public m_str_LinkNumber As String
Public m_str_TypeCode As String

Public m_var_RowID As Variant

Public m_str_AuditReference As String
Public m_str_AuditReferenceType As String

Private Sub cmdClose_Click()
    On Error GoTo Error_Handler
    
    Unload Me
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdClose_Click", g_l_ErrorLineNumber
End Sub

Private Sub cmdAdd_Click()
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_PercentUsage As String
    Dim RS As ADODB.Recordset
    Dim l_Count As Long

    On Error GoTo Error_Handler

    Call SetWaitCursor

    If Trim(cboSupplierNumber.Text) = "" Then
        If Not IsNumeric(cboSupplierNumber.Text) Then
            Call SetDefaultCursor
            m_str_Msg = "Please provide a Supplier Number."
            MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
            cboSupplierNumber.SetFocus
            Exit Sub
        End If
    End If
    
    'The percent usage
    str_PercentUsage = Trim(txtPercentUsage.Text)
    If str_PercentUsage = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Percent Usage is not entered correctly. Percent Usage can be a "
        m_str_Msg = m_str_Msg + "positive number between 0 and 100 inclusive with "
        m_str_Msg = m_str_Msg + "possible fraction."
        MsgBox m_str_Msg, vbExclamation Or vbOKOnly, m_str_const_MsgBoxCaption
        txtPercentUsage.SetFocus
        Exit Sub
    End If
    
    If CheckPercent(str_PercentUsage) = False Then
        Call SetDefaultCursor
        m_str_Msg = "Percent Usage is not entered correctly. Percent Usage can be a "
        m_str_Msg = m_str_Msg + "positive number between 0 and 100 inclusive with "
        m_str_Msg = m_str_Msg + "possible fraction."
        MsgBox m_str_Msg, vbExclamation Or vbOKOnly, m_str_const_MsgBoxCaption
        txtPercentUsage.SetFocus
        Exit Sub
    End If

    str_PercentUsage = Replace(str_PercentUsage, ".", ",")
    
    If Trim(cboCostCentre.Text) = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please provide a Cost Centre."
        MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
        cboCostCentre.SetFocus
        Exit Sub
    End If
    
    'Then validate Quantity
    If Not IsNumeric(txtQuantity.Text) Then
        Call SetDefaultCursor
        m_str_Msg = "Quantity not entered correctly."
        MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
        txtQuantity.SetFocus
        Exit Sub
    Else
        If Not IsValidLong(txtQuantity.Text) Then
            Call SetDefaultCursor
            m_str_Msg = "Quantity not entered correctly."
            MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
            txtQuantity.SetFocus
            Exit Sub
        End If
    End If
    
    If CLng(txtQuantity.Text) < 0 Then
        Call SetDefaultCursor
        m_str_Msg = "Quantity not entered correctly."
        MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
        txtQuantity.SetFocus
        Exit Sub
    End If
        
    If Trim(txtCoreCost.Text) = "" Then
        txtCoreCost.Text = "0"
    ElseIf Not IsNumeric(Trim(txtCoreCost.Text)) Or Val(txtCoreCost.Text) < 0 Then
        Call SetDefaultCursor
        m_str_Msg = "Core cost not entered correctly."
        MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
        txtCoreCost.SetFocus
        Exit Sub
    End If
        
    If txtPartUnitCost.Text = "" Then
        txtPartUnitCost.Text = "0"
    ElseIf Not IsNumeric(Trim(txtPartUnitCost.Text)) Or Val(txtPartUnitCost.Text) < 0 Then
        Call SetDefaultCursor
        m_str_Msg = "Part Unit cost not entered correctly."
        MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
        txtPartUnitCost.SetFocus
        Exit Sub
    End If
    
    If cmdAdd.Caption = "Add" Then
        'Before adding check that "Supplier Number" is not duplicated in the estimate.
        Set RS = New ADODB.Recordset
        Set RS = modDBHelper.RetrieveNSCPUsed("CES_INQUIRY.RETRIEVE_NSCP_USED", _
                                              m_str_LinkNumber, _
                                              m_str_TypeCode)
        If RS.RecordCount > 0 Then
            RS.MoveFirst
            For l_Count = 0 To RS.RecordCount - 1
                If RS.Fields.Item("SUPPLIER NUMBER") = Trim(cboSupplierNumber.Text) Then
                    Set RS = Nothing
                    Call SetDefaultCursor
                    m_str_Msg = "Record with the same Supplier Number is already exist "
                    m_str_Msg = m_str_Msg + "in the current Estimate. Please choose "
                    m_str_Msg = m_str_Msg + "another one."
                    MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
                    cmdResolve.Caption = "Find Supplier Name"
                    Set cboSupplierName.RowSource = Nothing
                    cboSupplierName.Text = ""
                    cboSupplierName.Enabled = False
                    cboSupplierNumber.SetFocus
                    Exit Sub
                End If
                RS.MoveNext
            Next l_Count
        End If
        Set RS = Nothing
        
        'Add new non-stock coded part
        l_Result = modDBHelper.AddNSCPUsed("CES_UPDATE.ADD_NSCP_USED", _
                                           l_RetVal, _
                                           cboSupplierNumber.Text, _
                                           cboSupplierName.Text, _
                                           cboCostCentre.Text, _
                                           txtQuantity.Text, _
                                           str_PercentUsage, _
                                           g_str_UserName, _
                                           m_str_LinkNumber, _
                                           CCur(txtPartUnitCost.Text), _
                                           m_str_TypeCode, _
                                           CCur(txtCoreCost.Text), _
                                           m_l_ID)
        If (l_Result = 0) Then
            m_str_Msg = "Non-Stock Coded Part has been added."
            MsgBox m_str_Msg, vbInformation Or vbOKOnly, m_str_const_MsgBoxCaption
        Else
            Call SetDefaultCursor
            m_str_Msg = "There was an error adding Non-Stock Coded Part. Please Contact "
            m_str_Msg = m_str_Msg + "Administrator."
            MsgBox m_str_Msg, vbCritical Or vbOKOnly, m_str_const_MsgBoxCaption
            Exit Sub
        End If
        cmdAdd.Enabled = False
        cmdEditDetails.Enabled = False
        cmdResolve.Caption = "Find Supplier Name"
        
        '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT Begin >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        
        'Insert record into the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                l_RetVal, _
                "Add Non-Stock Coded Part", _
                m_str_AuditReference, _
                m_str_TypeCode, _
                "Supplier Number ---> " + Trim(cboSupplierNumber.Text), _
                "Supplier Name ---> " + Trim(cboSupplierName.Text), _
                "Part Description ---> " + Trim(cboPartDescription.Text), _
                "Keyword ---> " + Trim(cboKeyword.Text), _
                "Cost Centre ---> " + Trim(cboCostCentre.Text), _
                "Quantity ---> " + Trim(txtQuantity.Text), _
                "Percent Usage ---> " + Trim(txtPercentUsage.Text), _
                "Last Revised ---> " + Trim(txtLastRevised.Text), _
                "Part Unit Cost ($/unit) ---> " + Trim(txtPartUnitCost.Text), _
                "Core Cost ($/unit) ---> " + Trim(txtCoreCost.Text))
        
        ' Now act depending on which type of estimate that the non-stock
        ' coded part was added to.
        If m_str_TypeCode = "KIT" Then
            'Add the current Part to the table SUB_KITS, after the last item in the
            'sub kit "KIT A"
            Call modMain.AddLastPartToSubkitA(m_str_AuditReference, _
                                              "NSC", _
                                              Trim(cboSupplierNumber.Text), _
                                              Trim(cboSupplierName.Text), _
                                              " ", _
                                              Trim(txtQuantity.Text), _
                                              Trim(cboPartDescription.Text))

            'Find all Vehicle Estimates where the current OEM Kit is presented.
            Set RS = New ADODB.Recordset
            Set RS = modDBHelper.RetrieveBusFromKitsUsed("CES_INQUIRY.RETRIEVE_BUS_FROM_KITS_USED", _
                                                         m_str_AuditReference)
            'Insert records for all Vehicle Estimates (where the current OEM Kit is
            'presented) into the AUDIT_MODIFY_HISTORY table.
            If RS.RecordCount > 0 Then
                RS.MoveFirst
                For l_Count = 0 To RS.RecordCount - 1
                    If IsNull(RS.Fields.Item("link_code")) = False Then
                        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "Indirect change. Non-Stock Coded Part was added to the OEM Kit " + m_str_AuditReference, _
                            RS.Fields.Item("link_code"), _
                            "BUS", _
                            "Supplier Number ---> " + Trim(cboSupplierNumber.Text), _
                            "Supplier Name ---> " + Trim(cboSupplierName.Text), _
                            "Part Description ---> " + Trim(cboPartDescription.Text), _
                            "Keyword ---> " + Trim(cboKeyword.Text), _
                            "Cost Centre ---> " + Trim(cboCostCentre.Text), _
                            "Quantity ---> " + Trim(txtQuantity.Text), _
                            "Percent Usage ---> " + Trim(txtPercentUsage.Text), _
                            "Last Revised ---> " + Trim(txtLastRevised.Text), _
                            "Part Unit Cost ($/unit) ---> " + Trim(txtPartUnitCost.Text), _
                            "Core Cost ($/unit) ---> " + Trim(txtCoreCost.Text))
                    End If
                    RS.MoveNext
                Next l_Count
            End If
        ElseIf m_str_TypeCode = "RB" Then
            ' If the estimate is a Rebuilt Part Estimate then cycle
            ' though all RB, MB and Veh Estimates containing this RBP
        
            Set RS = New ADODB.Recordset
            
            'In the SC_PARTS_USED table find all Estimates where the current RBE is present.
            Set RS = modDBHelper.RetrieveESTToPropagateRB("CES_INQUIRY.RETRIEVE_EST_TO_PROPAGATE_RB", _
                                                          m_str_AuditReference)
            If RS.RecordCount > 0 Then
                RS.MoveFirst
                    For l_Count = 0 To RS.RecordCount - 1
                        'Add records to the AUDIT_MODIFY_HISTORY table.
                        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "Indirect change. Non-Stock Coded Part was added to the Rebuilt Part Estimate " + m_str_AuditReference, _
                            RS.Fields.Item("link_code"), _
                            RS.Fields.Item("link_type"), _
                            "Supplier Number ---> " + Trim(cboSupplierNumber.Text), _
                            "Supplier Name ---> " + Trim(cboSupplierName.Text), _
                            "Part Description ---> " + Trim(cboPartDescription.Text), _
                            "Keyword ---> " + Trim(cboKeyword.Text), _
                            "Cost Centre ---> " + Trim(cboCostCentre.Text), _
                            "Quantity ---> " + Trim(txtQuantity.Text), _
                            "Percent Usage ---> " + Trim(txtPercentUsage.Text), _
                            "Last Revised ---> " + Trim(txtLastRevised.Text), _
                            "Part Unit Cost ($/unit) ---> " + Trim(txtPartUnitCost.Text), _
                            "Core Cost ($/unit) ---> " + Trim(txtCoreCost.Text))
                        RS.MoveNext
                    Next l_Count
            End If
            Set RS = Nothing
        
        End If
        '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT End >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        
        Set cboSupplierName.RowSource = Nothing
        cboSupplierName.Enabled = False
        cboSupplierName.Text = ""
        cboSupplierNumber.SetFocus
    Else 'If cmdAdd.Caption = "Update" Then
        'Update existing stock coded part
        l_Result = modDBHelper.UpdateNSCPUsed("CES_UPDATE.UPDATE_NSCP_USED", _
                                              l_RetVal, _
                                              cboSupplierNumber.Text, _
                                              cboSupplierName.Text, _
                                              cboCostCentre.Text, _
                                              txtQuantity.Text, _
                                              str_PercentUsage, _
                                              g_str_UserName, _
                                              m_str_LinkNumber, _
                                              CCur(txtPartUnitCost.Text), _
                                              m_var_RowID, _
                                              CCur(txtCoreCost.Text))
    
        If (l_Result = 0) Then
            m_str_Msg = "Non-Stock Coded Part has been updated."
            MsgBox m_str_Msg, vbInformation Or vbOKOnly, m_str_const_MsgBoxCaption
        Else
            Call SetDefaultCursor
            m_str_Msg = "There was an error updating Non-Stock Coded Part. Please Contact "
            m_str_Msg = m_str_Msg + "Administrator."
            MsgBox m_str_Msg, vbCritical Or vbOKOnly, m_str_const_MsgBoxCaption
            Exit Sub
        End If
        
        cmdResolve.Caption = "Find Supplier Name"
        
        '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT Begin >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        'Insert record into the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                    "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                    l_RetVal, _
                    "Update Non-Stock Coded Part", _
                    m_str_AuditReference, _
                    m_str_TypeCode, _
                    "Supplier Number ---> " + Trim(cboSupplierNumber.Text), _
                    "Supplier Name ---> " + Trim(cboSupplierName.Text), _
                    "Part Description ---> " + Trim(cboPartDescription.Text), _
                    "Keyword ---> " + Trim(cboKeyword.Text), _
                    "Cost Centre ---> " + Trim(cboCostCentre.Text), _
                    "Quantity ---> " + Trim(txtQuantity.Text), _
                    "Percent Usage ---> " + Trim(txtPercentUsage.Text), _
                    "Last Revised ---> " + Trim(txtLastRevised.Text), _
                    "Part Unit Cost ($/unit) ---> " + Trim(txtPartUnitCost.Text), _
                    "Core Cost ($/unit) ---> " + Trim(txtCoreCost.Text))
        
        ' Now act depending on which type of estimate that the non-stock
        ' coded part was added to.
        If m_str_TypeCode = "KIT" Then
            'In the SUB_KITS table update corresponded record.
            l_Result = modDBHelper.UpdateSubKits("CES_UPDATE.UPDATE_SUB_KITS", _
                                                 l_RetVal, _
                                                 m_str_AuditReference, _
                                                 Trim(cboSupplierNumber.Text), _
                                                 Trim(cboSupplierName.Text), _
                                                 " ", _
                                                 Trim(txtQuantity.Text), _
                                                 Trim(cboPartDescription.Text))

            'Find all Vehicle Estimates where the current OEM Kit is presented.
            Set RS = New ADODB.Recordset
            Set RS = modDBHelper.RetrieveBusFromKitsUsed("CES_INQUIRY.RETRIEVE_BUS_FROM_KITS_USED", _
                                                         m_str_AuditReference)
            'Insert records for all Vehicle Estimates (where the current OEM Kit is
            'presented) into the AUDIT_MODIFY_HISTORY table.
            If RS.RecordCount > 0 Then
                RS.MoveFirst
                For l_Count = 0 To RS.RecordCount - 1
                    If IsNull(RS.Fields.Item("link_code")) = False Then
                        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "Indirect change. Non-Stock Coded Part was updated from the OEM Kit " + m_str_AuditReference, _
                            RS.Fields.Item("link_code"), _
                            "BUS", _
                            "Supplier Number ---> " + Trim(cboSupplierNumber.Text), _
                            "Supplier Name ---> " + Trim(cboSupplierName.Text), _
                            "Part Description ---> " + Trim(cboPartDescription.Text), _
                            "Keyword ---> " + Trim(cboKeyword.Text), _
                            "Cost Centre ---> " + Trim(cboCostCentre.Text), _
                            "Quantity ---> " + Trim(txtQuantity.Text), _
                            "Percent Usage ---> " + Trim(txtPercentUsage.Text), _
                            "Last Revised ---> " + Trim(txtLastRevised.Text), _
                            "Part Unit Cost ($/unit) ---> " + Trim(txtPartUnitCost.Text), _
                            "Core Cost ($/unit) ---> " + Trim(txtCoreCost.Text))
                    End If
                    RS.MoveNext
                Next l_Count
            End If
        ElseIf m_str_TypeCode = "RB" Then
            ' If the estimate is a Rebuilt Part Estimate then cycle
            ' though all RB, MB and Veh Estimates containing this RBP
        
            Set RS = New ADODB.Recordset
            
            'In the SC_PARTS_USED table find all Estimates where the current RBE is present.
            Set RS = modDBHelper.RetrieveESTToPropagateRB("CES_INQUIRY.RETRIEVE_EST_TO_PROPAGATE_RB", _
                                                          m_str_AuditReference)
            If RS.RecordCount > 0 Then
                RS.MoveFirst
                    For l_Count = 0 To RS.RecordCount - 1
                        'Add records to the AUDIT_MODIFY_HISTORY table.
                        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "Indirect change. Non-Stock Coded Part was updated from the Rebuilt Part Estimate " + m_str_AuditReference, _
                            RS.Fields.Item("link_code"), _
                            RS.Fields.Item("link_type"), _
                            "Supplier Number ---> " + Trim(cboSupplierNumber.Text), _
                            "Supplier Name ---> " + Trim(cboSupplierName.Text), _
                            "Part Description ---> " + Trim(cboPartDescription.Text), _
                            "Keyword ---> " + Trim(cboKeyword.Text), _
                            "Cost Centre ---> " + Trim(cboCostCentre.Text), _
                            "Quantity ---> " + Trim(txtQuantity.Text), _
                            "Percent Usage ---> " + Trim(txtPercentUsage.Text), _
                            "Last Revised ---> " + Trim(txtLastRevised.Text), _
                            "Part Unit Cost ($/unit) ---> " + Trim(txtPartUnitCost.Text), _
                            "Core Cost ($/unit) ---> " + Trim(txtCoreCost.Text))
                        RS.MoveNext
                    Next l_Count
            End If
            Set RS = Nothing
        End If
        '>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUDIT End >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        
        Set cboSupplierName.RowSource = Nothing
        cboSupplierName.Text = ""
        cboSupplierName.Enabled = False
        Call SetDefaultCursor
       
        Unload Me
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdAdd_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub cmdEditDetails_Click()
    ' Allows the users to edit the details of the non-stock coded
    ' part before adding it to the part.
      
    Dim str_SupplierNumber As String
    Dim str_SupplierName As String
    Dim str_PartDescription As String
    Dim str_PartUnitCost As String
    Dim str_Keyword As String
    Dim temp 'temp array to hold values from the split function
    
    On Error GoTo Error_Handler
    
    'Splits the string into two at the first instance of ":"
    'the values before and after the ":" are saved into two variables passed in by
    'reference
    temp = Split(Trim(cboSupplierName.Text), " Price:")
    
    str_SupplierNumber = Trim(cboSupplierNumber.Text)
    str_SupplierName = temp(0) 'the values before the " Price:"
    str_PartDescription = Trim(cboPartDescription.Text)
    str_PartUnitCost = Trim(txtPartUnitCost.Text)
    str_Keyword = Trim(cboKeyword.Text)
    
    Call frmAddNonStockCodedPart.PassParameters(m_var_NSCPRowID, _
                                                m_l_ID, _
                                                str_SupplierNumber, _
                                                str_SupplierName, _
                                                str_PartDescription, _
                                                str_PartUnitCost, _
                                                str_Keyword, _
                                                True)
    frmAddNonStockCodedPart.m_str_AuditReference = m_str_AuditReference
    frmAddNonStockCodedPart.m_str_AuditReferenceType = m_str_TypeCode
    frmAddNonStockCodedPart.cboSupplierName.Enabled = False
    frmAddNonStockCodedPart.cboSupplierNumber.Enabled = False
    frmAddNonStockCodedPart.Show vbModal
    cmdResolve.Caption = "Resolve"
    ' Once the non stock coded part is updated refresh the form
    Call Resolve
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdEditDetails_Click", g_l_ErrorLineNumber
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    Me.Height = 4470
    Me.Width = 7185
    Call PopulateFields
    
    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Public Sub PassValues(ByVal str_SupplierNumber As String, _
                      ByVal str_SupplierName As String, _
                      ByVal str_CostCentre As String, _
                      ByVal str_PercentUsage As String, _
                      ByVal str_Quantity As String, _
                      ByVal var_RowIDPass As Variant, _
                      ByVal cur_CoreCost As Currency)
    
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    m_var_RowID = var_RowIDPass
    
    cboSupplierNumber.Text = str_SupplierNumber
    cboSupplierName.Text = str_SupplierName
    cmdResolve.Caption = "Resolve"
    
    Call Resolve
    
    cboCostCentre.Text = str_CostCentre
    txtQuantity.Text = Replace(str_Quantity, ",", ".")
    txtPercentUsage.Text = str_PercentUsage
    
    cmdAdd.Caption = "Update"
    cmdClose.Visible = False
    cmdResolve.Enabled = False
    cboSupplierNumber.Enabled = False
    
    Set RS = modDBHelper.RetrieveSCPUsedROWID("CES_INQUIRY.retrieve_one_nscp_used", _
                                             var_RowIDPass)
    txtCoreCost.Text = Format(RS("CORECOST"), "0.00")
    Set RS = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PassValues", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub PopulateFields()
    On Error GoTo Error_Handler
    
    Set cboSupplierNumber.RowSource = modDBHelper.PopulateNSCComboBoxes( _
                                                "CES_INQUIRY.POPULATE_NSC_COMBOXES", _
                                                "1")
    cboSupplierNumber.ListField = "orig_supplier_num"

    Set cboKeyword.RowSource = modDBHelper.PopulateNSCComboBoxes( _
                                                "CES_INQUIRY.POPULATE_NSC_COMBOXES", _
                                                "2")
    cboKeyword.ListField = "keyword"

    Set cboPartDescription.RowSource = modDBHelper.PopulateNSCComboBoxes( _
                                                "CES_INQUIRY.POPULATE_NSC_COMBOXES", _
                                                "3")
    cboPartDescription.ListField = "detailed_desc"


    Set cboCostCentre.RowSource = modDBHelper.PopulateCostCentres( _
                                                "CES_INQUIRY.RETRIEVE_COST_CENTRES")
    cboCostCentre.ListField = "cost_centre"

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateFields", g_l_ErrorLineNumber
End Sub

Private Sub cmdResolve_Click()
    On Error GoTo Error_Handler

    Call Resolve
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdResolve_Click", g_l_ErrorLineNumber
End Sub

Private Sub Resolve()
    Dim RS As ADODB.Recordset
    Dim temp
    
    On Error GoTo Error_Handler

    Call SetWaitCursor
    
    Set RS = New ADODB.Recordset
    
    If cmdResolve.Caption = "Resolve" Then
        'Query database to load vehicle estimate
        'retrieve part by part number only, save results to Recordset
        Set RS = modDBHelper.SearchNSCPPartBy2Fields( _
                                        "CES_INQUIRY.SEARCH_NSCP_PART_BY_2_FIELDS", _
                                        cboSupplierNumber.Text, _
                                        cboSupplierName.Text)
        If RS.RecordCount = 0 Then
            Set RS = Nothing
            Call SetDefaultCursor
            cmdAdd.Enabled = False
            cmdEditDetails.Enabled = False
            MsgBox "No information for the Part Number."
            cmdResolve.Caption = "Find Supplier Name"
            Exit Sub
        ElseIf RS.RecordCount > 1 Then
            Set RS = Nothing
            Call SetDefaultCursor
            cmdAdd.Enabled = False
            cmdEditDetails.Enabled = False
            m_str_Msg = "There are more than one record for this Non Stock Coded Part. "
            m_str_Msg = m_str_Msg + "Please edit/remove the duplicate(s) Non Stock "
            m_str_Msg = m_str_Msg + "Coded part from the system."
            MsgBox m_str_Msg
            Exit Sub
        ElseIf RS.RecordCount = 1 Then
            cboKeyword.Text = RS.Fields.Item("KEYWORD")
            cboPartDescription.Text = RS.Fields.Item("DESCRIPTION")
            txtPartUnitCost.Text = Format(RS.Fields.Item("PRICE"), "0.00")
            txtLastRevised.Text = RS.Fields.Item("LAST MODIFIED DATE")
            m_l_ID = RS.Fields.Item("ID")
            m_var_NSCPRowID = RS.Fields.Item("ROWID")
            cmdAdd.Enabled = True
            cmdResolve.Default = False
            cmdAdd.Default = True
            cmdEditDetails.Enabled = True
        End If
        cmdResolve.Caption = "Find Supplier Name"
    Else 'If cmdResolve.Caption = "Find Supplier Name"
        If Trim(cboSupplierNumber.Text) = "" Then
            Call SetDefaultCursor
            MsgBox "Please provide Supplier Number."
            cboSupplierNumber.SetFocus
            Exit Sub
        End If
        
        'Find Supplier Name by Spplier Number
        Set RS = modDBHelper.FindSupplierNameByNumber( _
                                        "CES_INQUIRY.FIND_SUPPLIER_NAME_BY_NUMBER", _
                                        Trim(cboSupplierNumber.Text))
        If RS.RecordCount = 0 Then
            Call SetDefaultCursor
            MsgBox "Can not find Supplier Name for provided Supplier Number."
            cboSupplierNumber.SetFocus
            Set RS = Nothing
            Exit Sub
        End If
        
        Set cboSupplierName.RowSource = RS
        cboSupplierName.ListField = "orig_supplier_name"
        cboSupplierName.Enabled = True
        cboSupplierName.Text = RS.Fields.Item("orig_supplier_name")
        cmdResolve.Caption = "Resolve"
    End If
        
    temp = Split(Trim(cboSupplierName.Text), " Price:")
    cboSupplierName.Text = temp(0)
    Set RS = Nothing
    
    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Resolve", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub txtPercentUsage_GotFocus()
    On Error GoTo Error_Handler

    txtPercentUsage.SelStart = 0
    txtPercentUsage.SelLength = Len(txtPercentUsage.Text)
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtPercentUsage_GotFocus", g_l_ErrorLineNumber
End Sub

Private Sub txtQuantity_GotFocus()
    On Error GoTo Error_Handler

    txtQuantity.SelStart = 0
    txtQuantity.SelLength = Len(txtQuantity.Text)
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtQuantity_GotFocus", g_l_ErrorLineNumber
End Sub
frmAddLabourTask.frm :
'=================================================================
'frmAddLabourTask.frm
'
'Adds a non stock coded part to the cost tracking system database.
'===============================================================
Option Explicit

Private m_str_Hours As String
Private m_str_Minutes As String
Private m_str_Msg As String
Private Const m_str_const_MsgBoxCaption As String = "Add / Update Labour Tasks"

Public m_str_TypeID As String
Public m_str_PartID As String
Public m_str_LinkNumber As String
Public m_str_AuditReference As String

Private Sub cmdClose_Click()
    On Error GoTo Error_Handler
    
    Unload Me
    Exit Sub
    
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdClose_Click", g_l_ErrorLineNumber
End Sub

'The cmdAddLabourTask_Click button either Adds a new non-stock coded part into
'the cost estimate system or updates an existing non-stock coded part
Private Sub cmdAddLabourTask_Click()
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim l_Count As Long
    Dim str_FixedMins As String
    Dim str_FixedHours As String
    Dim str_TimeInDecimal As String
    Dim str_AdjTimeInDecimal As String
    Dim str_LabourType As String
    Dim RS As ADODB.Recordset
    Dim str_PercentUsage As String
    Dim str_TaskDescription As String
    Dim str_CostCentre As String
    Dim str_LabourPosition As String
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    'Make sure that user choused something from the cboTaskDescription combo-box.
    str_TaskDescription = Trim(cboTaskDescription.Text)
    If str_TaskDescription = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please choose Task Description."
        MsgBox m_str_Msg, vbExclamation Or vbOKOnly, m_str_const_MsgBoxCaption
        cboTaskDescription.SetFocus
        Exit Sub
    End If
    
    'Make sure that user choused something from the cboLabourPosition combo-box.
    str_LabourPosition = Trim(cboLabourPosition.Text)
    If str_LabourPosition = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please choose Labour Position."
        MsgBox m_str_Msg, vbExclamation Or vbOKOnly, m_str_const_MsgBoxCaption
        cboLabourPosition.SetFocus
        Exit Sub
    End If
    
    'Make sure that user choused something from the cboCostCentre combo-box.
    str_CostCentre = Trim(cboCostCentre.Text)
    If str_CostCentre = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please choose Cost Centre."
        MsgBox m_str_Msg, vbExclamation Or vbOKOnly, m_str_const_MsgBoxCaption
        cboCostCentre.SetFocus
        Exit Sub
    End If
        
    'Confirm that the percent is entered correctly
    str_PercentUsage = Trim(txtPercentUsage.Text)
    If str_PercentUsage = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please enter Percent Usage."
        MsgBox m_str_Msg, vbExclamation Or vbOKOnly, m_str_const_MsgBoxCaption
        txtPercentUsage.SetFocus
        Exit Sub
    End If
    If CheckPercent(str_PercentUsage) = False Then
        Call SetDefaultCursor
        m_str_Msg = "Percent Usage is not entered correctly. Percent Usage can be a "
        m_str_Msg = m_str_Msg + "positive number between 0 and 100 inclusive with "
        m_str_Msg = m_str_Msg + "possible fraction."
        MsgBox m_str_Msg, vbExclamation Or vbOKOnly, m_str_const_MsgBoxCaption
        txtPercentUsage.SetFocus
        Exit Sub
    End If

    str_PercentUsage = Replace(str_PercentUsage, ".", ",")
    
    'Confirm that the hours are entered correctly
    str_FixedHours = Trim(txtHoursRequired.Text)
    If str_FixedHours = "" Then
        str_FixedHours = "0"
        txtHoursRequired.Text = "0"
    End If
    
    If Not IsValidLong(str_FixedHours) Or Int(str_FixedHours) < 0 Then
        Call SetDefaultCursor
        m_str_Msg = "Hours not entered correctly."
        MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
        txtHoursRequired.SetFocus
        Exit Sub
    End If
    str_FixedHours = Round(str_FixedHours, 0)
    
    'Confirm that the minutes are entered correctly
    str_FixedMins = Trim(txtMinutesRequired.Text)
    If str_FixedMins = "" Then
        str_FixedMins = "00"
        txtMinutesRequired.Text = "00"
    End If
    If Not IsValidLong(str_FixedHours) Then
        Call SetDefaultCursor
        m_str_Msg = "Minutes not entered correctly."
        MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
        txtMinutesRequired.SetFocus
        Exit Sub
    End If
    If Int(str_FixedMins) < 0 Or Int(str_FixedMins) > 59 Then
        Call SetDefaultCursor
        m_str_Msg = "Minutes must be between 0 and 59."
        MsgBox m_str_Msg, vbOKOnly Or vbExclamation, m_str_const_MsgBoxCaption
        txtMinutesRequired.SetFocus
        Exit Sub
    End If
    str_FixedMins = Round(str_FixedMins, 0)
    If (Len(str_FixedMins) = 1) Then
        str_FixedMins = 0 & str_FixedMins
    End If
    
    str_TimeInDecimal = str_FixedHours & "." & MinutesToDecimal(str_FixedMins)
    
    str_AdjTimeInDecimal = CStr(CDbl(str_TimeInDecimal) / g_dbl_NonProductiveTimeAdj)
    
    If cmdAddLabourTask.Caption = "Add Labour Task" Then
        l_Result = modDBHelper.AddLabourTasks("CES_UPDATE.ADD_LABOUR_TASKS", _
                                              l_RetVal, _
                                              str_LabourPosition, _
                                              m_str_LinkNumber, _
                                              m_str_TypeID, _
                                              str_CostCentre, _
                                              str_TaskDescription, _
                                              str_LabourType, _
                                              str_PercentUsage, _
                                              str_FixedHours & ":" & str_FixedMins, _
                                              DecimalToMinutes(str_AdjTimeInDecimal), _
                                              CDbl(str_TimeInDecimal), _
                                              " ", _
                                              g_str_UserName)
        If (l_Result = 0) Then
            Call SetDefaultCursor
            m_str_Msg = "Labour Task has been added."
            MsgBox m_str_Msg, vbInformation Or vbOKOnly, m_str_const_MsgBoxCaption
        Else
            Call SetDefaultCursor
            m_str_Msg = "There was an error adding the Labour Task.  Please Contact "
            m_str_Msg = m_str_Msg + "Administrator."
            MsgBox m_str_Msg, vbCritical Or vbOKOnly, m_str_const_MsgBoxCaption
            Exit Sub
        End If
        
        'Add record to the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "Add Labour Task", _
                            m_str_AuditReference, _
                            m_str_TypeID, _
                            "Task Description ---> " + str_TaskDescription, _
                            "Labour Position ---> " + str_LabourPosition, _
                            "Cost Centre ---> " + str_CostCentre, _
                            "Percent Usage ---> " + str_PercentUsage, _
                            "Hours Reqired (Hours) ---> " + str_FixedHours, _
                            "Hours Reqired (Minutes) ---> " + str_FixedMins)

        ' If adding a labour task was performed inside a rebuilt part then cycle
        ' changes to all estimates containing this rebuilt part
        If m_str_TypeID = "RB" Then
            
            'Now find all estimates where current Rebuilt Part Estimate is present.
            Set RS = New ADODB.Recordset
            
            'In the SC_PARTS_USED table find all Estimates where the current RBE is present.
            Set RS = modDBHelper.RetrieveESTToPropagateRB("CES_INQUIRY.RETRIEVE_EST_TO_PROPAGATE_RB", _
                                                          m_str_AuditReference)
            If RS.RecordCount > 0 Then
                RS.MoveFirst
                    For l_Count = 0 To RS.RecordCount - 1
                        'Add records to the AUDIT_MODIFY_HISTORY table.
                        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "Indirect change. Labour was added from the Rebuilt Part Estimate " + m_str_AuditReference, _
                            RS.Fields.Item("link_code"), _
                            RS.Fields.Item("link_type"), _
                            "Task Description ---> " + str_TaskDescription, _
                            "Labour Position ---> " + str_LabourPosition, _
                            "Cost Centre ---> " + str_CostCentre, _
                            "Percent Usage ---> " + str_PercentUsage, _
                            "Hours Reqired (Hours) ---> " + str_FixedHours, _
                            "Hours Reqired (Minutes) ---> " + str_FixedMins)
                        RS.MoveNext
                    Next l_Count
            End If
            Set RS = Nothing
        End If
    Else 'If cmdAddLabourTask.Caption = "Update Labour" Then
        l_Result = modDBHelper.UpdateLabourTasks("CES_UPDATE.UPDATE_LABOUR_TASKS", _
                                                 l_RetVal, _
                                                 str_LabourPosition, _
                                                 m_str_LinkNumber, _
                                                 m_str_TypeID, _
                                                 str_CostCentre, _
                                                 str_TaskDescription, _
                                                 str_LabourType, _
                                                 str_PercentUsage, _
                                                 str_FixedHours & ":" & str_FixedMins, _
                                                 DecimalToMinutes(str_AdjTimeInDecimal), _
                                                 m_str_PartID, _
                                                 CDbl(str_TimeInDecimal), _
                                                 g_str_UserName)
    
        If (l_Result = 0) Then
            Call SetDefaultCursor
            m_str_Msg = "Labour Task has been updated."
            MsgBox m_str_Msg, vbInformation Or vbOKOnly, m_str_const_MsgBoxCaption
        Else
            Call SetDefaultCursor
            m_str_Msg = "There was an error Updating the Labour Task.  Please Contact "
            m_str_Msg = m_str_Msg + "Administrator."
            MsgBox m_str_Msg, vbCritical Or vbOKOnly, m_str_const_MsgBoxCaption
            Exit Sub
        End If
        
        'Add record to the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "Update Labour Task", _
                            m_str_AuditReference, _
                            m_str_TypeID, _
                            "Task Description ---> " + str_TaskDescription, _
                            "Labour Position ---> " + str_LabourPosition, _
                            "Cost Centre ---> " + str_CostCentre, _
                            "Percent Usage ---> " + str_PercentUsage, _
                            "Hours Reqired (Hours) ---> " + str_FixedHours, _
                            "Hours Reqired (Minutes) ---> " + str_FixedMins)
        
        ' If updating a labour task was performed inside a rebuilt part then cycle
        ' changes to all estimates containing this rebuilt part
        If m_str_TypeID = "RB" Then
            
            'Now find all estimates where current Rebuilt Part Estimate is present.
            Set RS = New ADODB.Recordset
            
            'In the SC_PARTS_USED table find all Estimates where the current RBE is present.
            Set RS = modDBHelper.RetrieveESTToPropagateRB("CES_INQUIRY.RETRIEVE_EST_TO_PROPAGATE_RB", _
                                                          m_str_AuditReference)
            If RS.RecordCount > 0 Then
                RS.MoveFirst
                    For l_Count = 0 To RS.RecordCount - 1
                        'Add records to the AUDIT_MODIFY_HISTORY table.
                        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "Indirect change. Labour was updated from the Rebuilt Part Estimate " + m_str_AuditReference, _
                            RS.Fields.Item("link_code"), _
                            RS.Fields.Item("link_type"), _
                            "Task Description ---> " + str_TaskDescription, _
                            "Labour Position ---> " + str_LabourPosition, _
                            "Cost Centre ---> " + str_CostCentre, _
                            "Percent Usage ---> " + str_PercentUsage, _
                            "Hours Reqired (Hours) ---> " + str_FixedHours, _
                            "Hours Reqired (Minutes) ---> " + str_FixedMins)
                        RS.MoveNext
                    Next l_Count
            End If
            Set RS = Nothing
        End If
        Unload Me
    End If 'If cmdAddLabourTask.Caption = "Add Labour Task" Then
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdAddLabourTask_Click", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
    Call SetDefaultCursor
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    Call PopulateDropdowns
    If (m_str_PartID <> "") Then
        cmdAddLabourTask.Caption = "Update Labour"
        Me.Caption = "Update a Labour Task"
        fraAddLabourTask.Caption = "Update a Labour Task"
        'Prepare to retrieve data
        Call PopulateFields
    End If
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub PopulateDropdowns()
    Dim RS As ADODB.Recordset

    On Error GoTo Error_Handler

    'Set RS = New ADODB.Recordset
    'Load the data into the input forms for editing
    
    Set RS = modDBHelper.RetrieveTaskDescription("CES_INQUIRY.RETRIEVE_TASK_DESCRIPTION")
    Set cboTaskDescription.RowSource = RS
    cboTaskDescription.ListField = "TASK DESCRIPTION"
    
    Set RS = modDBHelper.RetrieveLabourPosition("CES_INQUIRY.RETRIEVE_LABOUR_POSITION")
    Set cboLabourPosition.RowSource = RS
    cboLabourPosition.ListField = "LABOUR_DEFN"
    
    Set RS = modDBHelper.RetrieveCostCentres("CES_INQUIRY.RETRIEVE_COST_CENTRES")
    Set cboCostCentre.RowSource = RS
    cboCostCentre.ListField = "COST_CENTRE"

    Set RS = Nothing
    
    Exit Sub
    
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateDropdowns", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub PopulateFields()
    Dim RS As ADODB.Recordset
    
    On Error GoTo Error_Handler
    
    m_str_Hours = " "
    m_str_Minutes = " "
    'Query database to load vehicle estimate
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.RetrieveMBAllLabour("CES_INQUIRY.RETRIEVE_MB_ALL_LABOUR", m_str_PartID)
    If RS.RecordCount > 0 Then
        'RS.Filter = "rowid = '" + m_str_PartID + "'"
        ParseHours RS.Fields.Item("HRS_REQD"), m_str_Hours, m_str_Minutes
        
        'Load values into text boxes
        txtHoursRequired.Text = m_str_Hours
        txtMinutesRequired.Text = m_str_Minutes
        txtPercentUsage.Text = Replace(RS.Fields.Item("USAGE"), ",", ".")
        cboTaskDescription.Text = RS.Fields.Item("TASK")
        cboCostCentre.Text = RS.Fields.Item("COSTCENTRE")
        cboLabourPosition.Text = RS.Fields.Item("LABOUR_DEFN")
    End If
       
    Set RS = Nothing
    Exit Sub
    
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateFields", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor
    m_str_TypeID = ""
    m_str_PartID = ""
    m_str_LinkNumber = ""
    Unload Me
        
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub fraAddLabourTask_DragDrop(Source As Control, X As Single, Y As Single)

End Sub

frmAddLabourGroup.frm :
'- - - - - - - - - - - - - - - - - - - - - - - - - - - - -
'Description:  This form adds/edits a new employee group.  An employee group is a specific
'              the labour job with its hours per week and pay.  This form allows the user to add
'              and edit this information.
'- - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Option Explicit

Private m_str_Msg As String

Private Sub cmdAdd_Click()
    Dim RS As ADODB.Recordset
    Dim str_LabourDefinition As String
    Dim dbl_RatePerHour As Double
    Dim dbl_HoursPerWeek As Double
    Dim dbl_OverheadType As Double
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim l_WageGroup As Long
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor

    'Check that user typed some data into txtLabourDefinition edit-box.
    str_LabourDefinition = Trim(txtLabourDefinition.Text)
    If str_LabourDefinition = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Labour definition can not be empty."
        MsgBox m_str_Msg, vbOKOnly + vbInformation
        txtLabourDefinition.SetFocus
        Exit Sub
    End If

    'Check that user choused some data from the cboRatePerHour combo-box.
    If cboRatePerHour.Text = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please choose Rate Per Hour."
        MsgBox m_str_Msg, vbOKOnly + vbInformation
        cboRatePerHour.SetFocus
        Exit Sub
    Else
        dbl_RatePerHour = CDbl(cboRatePerHour.Text)
    End If
    
    'Check that user choused some data from the cboHoursPerWeek combo-box.
    If cboHoursPerWeek.Text = "" Then
        Call SetDefaultCursor
        m_str_Msg = "Please choose Hours Per Week."
        MsgBox m_str_Msg, vbOKOnly + vbInformation
        cboHoursPerWeek.SetFocus
        Exit Sub
    Else
        dbl_HoursPerWeek = CDbl(cboHoursPerWeek.Text)
    End If
    
    'Check that data from the txtLabourDefinition edit-box is not duplicated in the
    'EMPL_CLASS table.
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.SearchEmplClassLabourDefn( _
                                        "CES_INQUIRY.SEARCH_EMPL_CLASS_LABOUR_DEFN", _
                                        str_LabourDefinition)
    If RS.RecordCount > 0 Then
        Set RS = Nothing
        Call SetDefaultCursor
        m_str_Msg = "The same Labour Definition already exists."
        MsgBox m_str_Msg, vbOKOnly + vbInformation
        txtLabourDefinition.SetFocus
        Exit Sub
    End If
    
    'Get value from the EMPLOYEE_SALARIES.WAGE_GROUP.
    Set RS = modDBHelper.SearchEmployeeSalaries( _
                                        "CES_INQUIRY.SEARCH_EMPLOYEE_SALARIES", _
                                        dbl_RatePerHour)
    If RS.RecordCount = 0 Then
        Set RS = Nothing
        Call SetDefaultCursor
        m_str_Msg = "The Rate Per Hour = '" + CStr(dbl_RatePerHour) + "' data in "
        m_str_Msg = m_str_Msg + "the EMPLOYEE_SALARIES does not exist. Please contact "
        m_str_Msg = m_str_Msg + "administrator."
        MsgBox m_str_Msg, vbOKOnly + vbInformation
        Exit Sub
    Else
        l_WageGroup = CLng(RS.Fields.Item("wage_group"))
    End If
    
    Set RS = Nothing
    
    'Insert a new record into the EMPL_CLASS table.
    l_Result = modDBHelper.AddEmplClass("CES_UPDATE.ADD_EMPL_CLASS", _
                                        l_RetVal, _
                                        str_LabourDefinition, _
                                        l_WageGroup, _
                                        dbl_HoursPerWeek, _
                                        dbl_OverheadType)
    If l_Result > 0 Then
        Call SetDefaultCursor
        m_str_Msg = "Employee Group is added."
        MsgBox m_str_Msg, vbOKOnly + vbInformation
        
        'Refresh grdEmployeeGroup grid in the frmEmployeeGroup screen.
        Call frmEmployeeGroup.PopulateGrid
        
        'Add record to the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                            "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                            l_RetVal, _
                            "Employee Group was added to the System", _
                            l_Result, _
                            "LT", _
                            "Labour Definition ---> " + Trim(txtLabourDefinition.Text), _
                            "Rate Per Hour ---> " + Trim(cboRatePerHour.Text), _
                            "Hours Per Week ---> " + Trim(cboHoursPerWeek.Text), _
                            "Overhead Type ---> " + Trim(txtOverheadType.Text))
        Unload Me
    Else
        Call SetDefaultCursor
        'For some reason record was not inserted into the EMPL_CLASS table.
        m_str_Msg = "Employee Group is not added. Please contact administrator."
        MsgBox m_str_Msg, vbOKOnly + vbInformation
    End If
    
        Call SetDefaultCursor
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdAdd_Click", g_l_ErrorLineNumber
    Call SetDefaultCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub cmdCancel_Click()
    On Error GoTo Error_Handler

    Unload Me
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdAdd_Click", g_l_ErrorLineNumber
End Sub

Private Sub Form_Load()
    On Error GoTo Error_Handler
    
    Call SetWaitCursor

    Call PopulateCombos
    
    txtOverheadType.Text = CStr(g_dbl_NonProductiveTimeAdj)
    
    Call SetDefaultCursor
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_Load", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub PopulateCombos()
    Dim RS As ADODB.Recordset
    Dim l_Count As Long
    
    On Error GoTo Error_Handler

    For l_Count = 1 To 168 ' 7 days x 24 hours = 168 hours in one week.
        cboHoursPerWeek.AddItem CStr(l_Count)
    Next l_Count
    cboHoursPerWeek.Text = "40"
    
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.RetrieveEmployeeSalaries("CES_INQUIRY.RETRIEVE_EMPLOYEE_SALARIES")
    
    Set cboRatePerHour.RowSource = RS
    cboRatePerHour.ListField = "RATE PER HOUR"
    
    Set RS = Nothing
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "PopulateCombos", g_l_ErrorLineNumber
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetDefaultCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetDefaultCursor
End Sub

Private Sub txtLabourDefinition_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim str_Data As String
    Dim l_CursorPosition As Long
    
    On Error GoTo Error_Handler

    'Convert data in the txtLabourDefinition edit-box to upper case.
    l_CursorPosition = txtLabourDefinition.SelStart
    str_Data = txtLabourDefinition.Text
    str_Data = UCase(str_Data)
    txtLabourDefinition.Text = str_Data
    txtLabourDefinition.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtLabourDefinition_KeyUp", g_l_ErrorLineNumber
End Sub
frmConvertToRebuiltPart.frm :
Option Explicit
Private m_str_Msg As String
Private RS As ADODB.Recordset

Private Sub cmdCancel_Click()
    On Error GoTo Error_Handler

    Unload Me

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdCancel_Click", g_l_ErrorLineNumber
End Sub

Private Sub cmdConvert_Click()
    Dim l_Result As Long
    Dim l_RetVal As Long
    Dim str_MBNumber As String
    Dim str_MMSStockCode As String
    Dim str_RBStockCodeFromDB As String
    Dim str_MMSStockCodeFromDB As String
    Dim str_DetailedDescription As String
    Dim str_Keyword As String
    Dim str_CorePartNumber As String
    Dim str_RebuiltStockNumber As String
    Dim str_JobNumber As String
    Dim str_SOPNumber As String
    Dim str_LastModifiedBy As String
    Dim str_BuyCost As String
    Dim str_ExternalCost As String
    Dim str_RemanufacturedCost As String
    Dim str_core_charge As String
    Dim l_Count As Long
    
    On Error GoTo Error_Handler
    
    Call SetWaitCursor
    
    str_RebuiltStockNumber = Trim(txtRebuiltPartNumber.Text)
    'Make sure that data in the txtRebuiltPartNumber edit-box is not empty.
    If str_RebuiltStockNumber = "" Then
        Call SetWaitCursor
        m_str_Msg = "Rebuilt Part # should not be empty."
        MsgBox m_str_Msg, vbInformation + vbOKOnly
        txtRebuiltPartNumber.SetFocus
        Exit Sub
    End If
    
    'Make sure that data in the txtStockCodedNumber edit-box is not empty.
    str_MMSStockCode = Trim(txtStockCodedNumber.Text)
    If str_MMSStockCode = "" Then
        Call SetWaitCursor
        m_str_Msg = "Stock Code # should not be empty."
        MsgBox m_str_Msg, vbInformation + vbOKOnly
        txtStockCodedNumber.SetFocus
        Exit Sub
    End If
    
    'Make sure that data in the txtRebuiltPartNumber edit-box is not in the
    'RB_MASTERLIST.REBUILT_STOCK_NUM field.
    
    Set RS = New ADODB.Recordset
    Set RS = modDBHelper.RetrieveRB("CES_INQUIRY.RETRIEVE_RB")
    
    If RS.RecordCount > 0 Then
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
            str_RBStockCodeFromDB = RS.Fields.Item("REBUILT_STOCK_NUM")
            If str_RebuiltStockNumber = str_RBStockCodeFromDB Then
                Call SetWaitCursor
                Set RS = Nothing
                m_str_Msg = "Rebuilt Part Number is duplicated. Please provide another one."
                MsgBox m_str_Msg, vbInformation + vbOKOnly
                If txtRebuiltPartNumber.Enabled = True Then
                    txtRebuiltPartNumber.SetFocus
                End If
                Exit Sub
            End If
            RS.MoveNext
        Next l_Count
    End If
    
    'NOTE. NEXT INSERTS ARE NOT ATOMIC. ALL OF THEM SHOULD BE UNDER ONE TRANSACTION.
    '      IF, LET SAY, ONE INSERTION "CES_UPDATE.ADD_NSCP_USED" WILL FAIL, DATA IN THE
    '      DATABASE WILL NOT BE CONSISTANT.
    
    'Get information from the MB_LIST table.
    str_MBNumber = Trim(txtMakeBuyNumber.Text)
    Set RS = modDBHelper.RetrieveMBListByMBNumber( _
                                        "CES_INQUIRY.RETRIEVE_MB_LIST_BY_MB_NUMBER", _
                                        str_MBNumber)
    str_DetailedDescription = RS.Fields.Item("DESCRIPTION")
    str_Keyword = RS.Fields.Item("KEYWORD")
    str_CorePartNumber = RS.Fields.Item("CORE_CODE")
    str_JobNumber = RS.Fields.Item("BENCH_NUMBER")
    str_LastModifiedBy = modMain.g_str_UserName
    str_SOPNumber = RS.Fields.Item("SOP_Number")
    str_BuyCost = RS.Fields.Item("Buy_New_cost")
    str_ExternalCost = RS.Fields.Item("External_Cost")
    str_RemanufacturedCost = RS.Fields.Item("Reman_Cost")
    str_JobNumber = " "
    If IsNull(RS.Fields.Item("JOB_NUMBER")) = False Then
        str_JobNumber = RS.Fields.Item("JOB_NUMBER")
    End If
    
    str_core_charge = RS.Fields.Item("CORE_CHARGE")
    
    'Insert a new record into RB_MASTERLIST table.
    l_Result = modDBHelper.InsertRBMasterList("CES_UPDATE.INSERT_RB_MASTERLIST", _
                                              l_RetVal, _
                                              str_MMSStockCode, _
                                              str_DetailedDescription, _
                                              str_Keyword, _
                                              str_CorePartNumber, _
                                              str_RebuiltStockNumber, _
                                              str_JobNumber, _
                                              str_LastModifiedBy, _
                                              str_SOPNumber, _
                                              str_BuyCost, _
                                              str_RemanufacturedCost, _
                                              str_ExternalCost, _
                                              str_core_charge)

    'In the NSC_PARTS_USED table find all records with LINK_CODE = str_MBNumber and
    'LINK_TYPE = "MB".
    Set RS = modDBHelper.RetrieveNSCPUsed("CES_INQUIRY.RETRIEVE_NSCP_USED_COPY", _
                                        str_MBNumber, _
                                        "MB")
    
    'Add new records to the NSC_PARTS_USED table, with all fields = fields from the RS,
    'except:
    'ENTERED_BY = current user name
    'LAST_MODIFIED_BY = current user name (done in CES_UPDATE.ADD_NSCP_USED)
    'LINK_TYPE = "RB"
    'LINK_CODE = data from the txtRebuiltPartNumber edit-box
    'DATE_ENTERED = current date (done in CES_UPDATE.ADD_NSCP_USED)
    'LAST_MODIFIED_DATE = current date (done in CES_UPDATE.ADD_NSCP_USED)
    If RS.RecordCount > 0 Then
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
            l_Result = modDBHelper.AddNSCPUsed("CES_UPDATE.ADD_NSCP_USED", _
                                               l_RetVal, _
                                               RS.Fields.Item("SUPPLIER NUMBER"), _
                                               RS.Fields.Item("SUPPLIER NAME"), _
                                               RS.Fields.Item("CC"), _
                                               RS.Fields.Item("QTY"), _
                                               RS.Fields.Item("%"), _
                                               modMain.g_str_UserName, _
                                               str_RebuiltStockNumber, _
                                               RS.Fields.Item("UNIT COST"), _
                                               "RB", _
                                               RS.Fields.Item("CORE COST"), _
                                               RS.Fields.Item("ID"))
            RS.MoveNext
        Next l_Count
    End If
    
    'In the SC_PARTS_USED table find all records with LINK_CODE = str_MBNumber and
    'LINK_TYPE = "MB" and REBUILT_PART = "Y"
    Set RS = modDBHelper.RetrieveSCPUsed("CES_INQUIRY.RETRIEVE_SCP_USED_COPY", _
                                         str_MBNumber, _
                                         "Y", _
                                         "MB")
    
    'Add new records to the SC_PARTS_USED table, with all fields = fields from the RS,
    'except:
    'USER_ENTERED = current user name
    'LAST_MODIFIED_BY = current user name (done in CES_UPDATE.ADD_SCP_USED)
    'LINK_TYPE = "RB"
    'LINK_CODE = data from the txtRebuiltPartNumber edit-box
    'DATE_ENTERED = current date (done in CES_UPDATE.ADD_SCP_USED)
    'LAST_MODIFIED_DATE = current date (done in CES_UPDATE.ADD_SCP_USED)
    If RS.RecordCount > 0 Then
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
        l_Result = modDBHelper.AddSCPUsed("CES_UPDATE.ADD_SCP_USED", _
                                          l_RetVal, _
                                          RS.Fields.Item("STOCK CODE"), _
                                          RS.Fields.Item("CC"), _
                                          RS.Fields.Item("QTY"), _
                                          RS.Fields.Item("%"), _
                                          modMain.g_str_UserName, _
                                          RS.Fields.Item("UNIT COST"), _
                                          RS.Fields.Item("OEM COST"), _
                                          str_RebuiltStockNumber, _
                                          RS.Fields.Item("REBUILT PART"), _
                                          "RB", _
                                          RS.Fields.Item("CORE COST"), _
                                          RS.Fields.Item("MMS REBUILT CODE"), _
                                          RS.Fields.Item("REBUILT PART COST"))
            RS.MoveNext
        Next l_Count
    End If
    
    Set RS = modDBHelper.RetrieveSCPUsed("CES_INQUIRY.RETRIEVE_SCP_USED_COPY", _
                                     str_MBNumber, _
                                     "N", _
                                     "MB")
    
    'Add new records to the SC_PARTS_USED table, with all fields = fields from the RS,
    'except:
    'USER_ENTERED = current user name
    'LAST_MODIFIED_BY = current user name (done in CES_UPDATE.ADD_SCP_USED)
    'LINK_TYPE = "RB"
    'LINK_CODE = data from the txtRebuiltPartNumber edit-box
    'DATE_ENTERED = current date (done in CES_UPDATE.ADD_SCP_USED)
    'LAST_MODIFIED_DATE = current date (done in CES_UPDATE.ADD_SCP_USED)
    If RS.RecordCount > 0 Then
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
        l_Result = modDBHelper.AddSCPUsed("CES_UPDATE.ADD_SCP_USED", _
                                          l_RetVal, _
                                          RS.Fields.Item("STOCK CODE"), _
                                          RS.Fields.Item("CC"), _
                                          RS.Fields.Item("QTY"), _
                                          RS.Fields.Item("%"), _
                                          modMain.g_str_UserName, _
                                          RS.Fields.Item("UNIT COST"), _
                                          RS.Fields.Item("OEM COST"), _
                                          str_RebuiltStockNumber, _
                                          RS.Fields.Item("REBUILT PART"), _
                                          "RB", _
                                          RS.Fields.Item("CORE COST"), _
                                               " ", _
                                               0)
            RS.MoveNext
        Next l_Count
    End If
    'In the EMPLOYEE_LABOUR table find all records with LINK_NUMBER = str_MBNumber and
    'TYPEID = "MB"
    Set RS = modDBHelper.RetrieveEmployeeLabour("CES_INQUIRY.RETRIEVE_EMPLOYEE_LABOUR", _
                                                str_MBNumber, _
                                                "MB")
    'Add new records to the EMPLOYEE_LABOUR table, with all fields = fields from the RS,
    'except:
    'TYPEID = "RB"
    'LINK_NUMBER = data from the txtRebuiltPartNumber edit-box
    'DATE_ENTERED = current date (done in CES_UPDATE.ADD_LABOUR_TASKS)
    'DATE_REVISED = current date (done in CES_UPDATE.ADD_LABOUR_TASKS)
    
    If RS.RecordCount > 0 Then
        RS.MoveFirst
        For l_Count = 1 To RS.RecordCount
        l_Result = modDBHelper.AddLabourTasks("CES_UPDATE.ADD_LABOUR_TASKS", _
                                              l_RetVal, _
                                              RS.Fields.Item("LABOUR_DEFN"), _
                                              str_RebuiltStockNumber, _
                                              "RB", _
                                              RS.Fields.Item("COSTCENTRE"), _
                                              RS.Fields.Item("TASK"), _
                                              RS.Fields.Item("LABOUR_TYPE"), _
                                              RS.Fields.Item("USAGE"), _
                                              RS.Fields.Item("HRS_REQD"), _
                                              RS.Fields.Item("ADJ_HRS"), _
                                              Replace(RS.Fields.Item("TIME_ADDITION").Value, ",", "."), _
                                              RS.Fields.Item("REBUILT_PART_NUM"), _
                                              g_str_UserName)
    
            RS.MoveNext
        Next l_Count
    End If
    
    'From the MB_LIST_OF_BUSES table get all records with
    'MB_NUMBER = data from the txtMakeBuyNumber edit-box.
    Set RS = modDBHelper.RetrieveMBListOfBuses("CES_INQUIRY.MB_LIST_BUSES", _
                                               str_MBNumber)
    'Go through all records in the RS, and insert records into the RB_LIST_OF_BUSES table.
    'Note: instead of field RS.Fields.Item("MB_NUMBER") we will insert data from the
    'txtRebuiltPartNumber edit-box ( = str_RebuiltStockNumber).
    If RS.RecordCount > 0 Then
        RS.MoveFirst
        For l_Count = 0 To RS.RecordCount - 1
            l_Result = modDBHelper.InsertRBListOFBuses( _
                                            "CES_UPDATE.INSERT_RB_LIST_OF_BUSES", _
                                            l_RetVal, _
                                            str_RebuiltStockNumber, _
                                            RS.Fields.Item("LIST_ID"))
            RS.MoveNext
        Next l_Count
    End If

    If l_Result = 0 Then
        
        'Add record to the AUDIT_MODIFY_HISTORY table.
        l_Result = modDBHelper.InsertIntoAuditModifyHistory( _
                                    "CES_UPDATE.AUDIT_INSERT_MODIFY_HISTORY", _
                                    l_RetVal, _
                                    "Make Vs Buy was Converted to a Rebuilt Part #" & str_RebuiltStockNumber, _
                                    str_MBNumber, _
                                    "MB", _
                                    "Description ---> " + str_DetailedDescription, _
                                    "Keyword ---> " + str_Keyword)

        
        m_str_Msg = "Conversion is done."
        MsgBox m_str_Msg, vbInformation + vbOKOnly
    Else
        'Conversion is failed for some reason.
        m_str_Msg = "Conversion is failed. Please contact Supervisor."
        MsgBox m_str_Msg, vbInformation + vbOKOnly
    End If
    
    Call SetWaitCursor
    Set RS = Nothing
    
    Unload Me
    
    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "cmdConvert_Click", g_l_ErrorLineNumber
    Call SetWaitCursor
    If Not RS Is Nothing Then
        Set RS = Nothing
    End If
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    On Error GoTo Error_Handler
    
    Call SetWaitCursor

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "Form_QueryUnload", g_l_ErrorLineNumber
    Call SetWaitCursor
End Sub

Private Sub txtRebuiltPartNumber_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtRebuiltPartNumber edit-box to upper case.
    l_CursorPosition = txtRebuiltPartNumber.SelStart
    str_Data = txtRebuiltPartNumber.Text
    str_Data = UCase(str_Data)
    txtRebuiltPartNumber.Text = str_Data
    txtRebuiltPartNumber.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtRebuiltPartNumber_KeyUp", g_l_ErrorLineNumber
End Sub

Private Sub txtStockCodedNumber_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim l_CursorPosition As Long
    Dim str_Data As String
    
    On Error GoTo Error_Handler

    'Convert data in the txtStockCodedNumber edit-box to upper case.
    l_CursorPosition = txtStockCodedNumber.SelStart
    str_Data = txtStockCodedNumber.Text
    str_Data = UCase(str_Data)
    txtStockCodedNumber.Text = str_Data
    txtStockCodedNumber.SelStart = l_CursorPosition

    Exit Sub
Error_Handler:
    g_l_ErrorLineNumber = Erl()
    modDBHelper.LogErrorToDB Me.Name, "txtStockCodedNumber_KeyUp", g_l_ErrorLineNumber
End Sub




            

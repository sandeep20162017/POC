1. Labour Rates and Cost Centers
Labour Rates: The labour rates are determined based on the Labour Position and Cost Centre selected by the user. The labour rate is fetched from the database based on the selected Labour Position.

Cost Centre: The Cost Centre is a dropdown that is populated from the database, and it is used to categorize the labour costs.

2. SQL Queries and Stored Procedures
Retrieving Labour Positions: The labour positions are retrieved using the stored procedure CES_INQUIRY.RETRIEVE_LABOUR_POSITION. This procedure fetches the list of labour positions from the database.

Retrieving Cost Centres: The cost centres are retrieved using the stored procedure CES_INQUIRY.RETRIEVE_COST_CENTRES. This procedure fetches the list of cost centres from the database.

Retrieving Task Descriptions: The task descriptions are retrieved using the stored procedure CES_INQUIRY.RETRIEVE_TASK_DESCRIPTION.

3. Adding/Updating Labour Tasks
When a user adds or updates a labour task, the cmdAddLabourTask_Click event is triggered. This event collects the necessary data (Labour Position, Cost Centre, Task Description, Hours Required, Minutes Required, and Percentage Usage) and calls the stored procedure CES_UPDATE.ADD_LABOUR_TASKS or CES_UPDATE.UPDATE_LABOUR_TASKS to insert or update the labour task in the database.

4. Example: Adding a New Labour Task
Cost Centre (CC): 05H2

Task Description: Air Conditioning

Labour Position: Automotive Welder

Hours Required: 30:40

Percentage Usage: 80

The SQL call to add this labour task would look something like this:

sql
Copy
EXEC CES_UPDATE.ADD_LABOUR_TASKS 
    @LabourPosition = 'Automotive Welder',
    @LinkNumber = 'YourLinkNumber',
    @TypeID = 'RB',
    @CostCentre = '05H2',
    @TaskDescription = 'Air Conditioning',
    @LabourType = 'YourLabourType',
    @PercentUsage = 80,
    @HoursRequired = '30:40',
    @AdjustedHours = 'YourAdjustedHours',
    @TimeAddition = 'YourTimeAddition',
    @UserName = 'YourUserName'
5. Populating Dropdowns
Task Description: Populated using CES_INQUIRY.RETRIEVE_TASK_DESCRIPTION.

Labour Position: Populated using CES_INQUIRY.RETRIEVE_LABOUR_POSITION.

Cost Centre: Populated using CES_INQUIRY.RETRIEVE_COST_CENTRES.

6. Dependencies
Labour Rates: The labour rates are dependent on the Labour Position selected from the dropdown. The rate per hour is associated with the labour position and is fetched from the database.

Cost Centre: The cost centre is used to categorize the labour costs and is selected from the dropdown.

7. Hardcoded Values and Formulas
Non-Productive Time Adjustment: The code uses a global variable g_dbl_NonProductiveTimeAdj to adjust the labour hours for non-productive time. This value is hardcoded and used in the calculation of adjusted hours.

Percentage Usage: The percentage usage is validated to ensure it is between 0 and 100.

8. SQL Calls Verification
The SQL calls are verified by checking the return value of the stored procedure calls. If the return value is 0, the operation is considered successful.

9. Conditions for Multiple SQL Calls
If the labour task is being added or updated within a Rebuilt Part Estimate (RB), the changes are propagated to all estimates containing this rebuilt part. This is done by calling the stored procedure CES_INQUIRY.RETRIEVE_EST_TO_PROPAGATE_RB to find all related estimates and then inserting records into the AUDIT_MODIFY_HISTORY table for each related estimate.

Summary
Labour Rates are set based on the Labour Position and Cost Centre selected by the user.

The Labour Position and Cost Centre dropdowns are populated from the database using stored procedures.

The Task Description dropdown is also populated from the database.

The labour rates are dependent on the Labour Position and are fetched from the database.

The Cost Centre is used to categorize the labour costs.

The Non-Productive Time Adjustment is a hardcoded value used to adjust the labour hours.

The Percentage Usage is validated to ensure it is between 0 and 100.

The SQL calls are verified by checking the return value of the stored procedure calls.

If the labour task is being added or updated within a Rebuilt Part Estimate (RB), the changes are propagated to all related estimates.

This should give you a comprehensive understanding of how labour rates are set and managed in the provided code. If you need further clarification or additional details, feel free to ask!

Based on the code provided explain below : Add Stock coded part
MMS Stock Code (drop down) : value selected 025129
Button Resolve, on click gets Part Information (Part Type (value :SWITCH), Part Description (TYPE : LIMITED SWITCH HEAD)) - Read only
Cost centre Drop Down (Editable) 
Quantity
Percentage Usage
Part Unit Cost ($/unit) - test box 20.00
Core cost ($/unit)
Questions :
1. How MMS Stock Code drop down is populated
2. SQL statement called when Resolve is clicked
3. How Cost Centre drop down is populated
4. SQL called when add button is clicked.
5. How estimates are calculated (formula and SQL calls)
(Due to technical issues, the search service is temporarily unavailable.)

Let's break down the process of adding a stock-coded part based on the provided code and your questions. The relevant form for this process is likely frmAddSCPToEstimate.frm or a similar form that handles the addition of stock-coded parts to an estimate.

1. How MMS Stock Code Dropdown is Populated
The MMS Stock Code dropdown is populated by querying the database for a list of stock-coded parts. This is typically done using a stored procedure or SQL query that retrieves the stock codes from a table (e.g., SC_PARTS or similar).

SQL Stored Procedure: CES_INQUIRY.POPULATE_SC_COMBOXES or similar.

Code Example:

vb
Copy
Set cboMMSStockCode.RowSource = modDBHelper.PopulateSCComboBoxes("CES_INQUIRY.POPULATE_SC_COMBOXES", "1")
cboMMSStockCode.ListField = "mms_stock_code"
Here, POPULATE_SC_COMBOXES is a stored procedure that retrieves the list of MMS stock codes from the database. The ListField property binds the dropdown to the mms_stock_code field.

2. SQL Statement Called When Resolve is Clicked
When the Resolve button is clicked, the system retrieves detailed information about the selected MMS stock code (e.g., 025129) from the database. This includes the Part Type, Part Description, and other relevant details.

SQL Stored Procedure: CES_INQUIRY.RETRIEVE_SC_PART_INFO or similar.

Code Example:

vb
Copy
Set RS = modDBHelper.RetrieveSCPartInfo("CES_INQUIRY.RETRIEVE_SC_PART_INFO", cboMMSStockCode.Text)
If RS.RecordCount > 0 Then
    cboPartType.Text = RS.Fields.Item("PART_TYPE")
    cboPartDescription.Text = RS.Fields.Item("PART_DESCRIPTION")
    txtPartUnitCost.Text = Format(RS.Fields.Item("UNIT_COST"), "0.00")
End If
The stored procedure RETRIEVE_SC_PART_INFO takes the selected MMS stock code as input and returns the part details.

3. How Cost Centre Dropdown is Populated
The Cost Centre dropdown is populated by querying the database for a list of cost centres. This is typically done using a stored procedure or SQL query.

SQL Stored Procedure: CES_INQUIRY.RETRIEVE_COST_CENTRES or similar.

Code Example:

vb
Copy
Set cboCostCentre.RowSource = modDBHelper.RetrieveCostCentres("CES_INQUIRY.RETRIEVE_COST_CENTRES")
cboCostCentre.ListField = "cost_centre"
The stored procedure RETRIEVE_COST_CENTRES retrieves the list of cost centres from the database, and the ListField property binds the dropdown to the cost_centre field.

4. SQL Called When Add Button is Clicked
When the Add button is clicked, the system inserts the stock-coded part into the estimate. This involves calling a stored procedure to add the part to the SC_PARTS_USED table or similar.

SQL Stored Procedure: CES_UPDATE.ADD_SCP_USED or similar.

Code Example:

vb
Copy
l_Result = modDBHelper.AddSCPUsed("CES_UPDATE.ADD_SCP_USED", _
                                  l_RetVal, _
                                  cboMMSStockCode.Text, _
                                  cboCostCentre.Text, _
                                  txtQuantity.Text, _
                                  txtPercentUsage.Text, _
                                  g_str_UserName, _
                                  CCur(txtPartUnitCost.Text), _
                                  CCur(txtCoreCost.Text), _
                                  m_str_LinkNumber, _
                                  "N", _
                                  "RB", _
                                  CCur(txtCoreCost.Text), _
                                  " ", _
                                  0)
The stored procedure ADD_SCP_USED takes the following parameters:

MMS Stock Code: Selected value from the dropdown.

Cost Centre: Selected value from the dropdown.

Quantity: Entered by the user.

Percentage Usage: Entered by the user.

Part Unit Cost: Entered by the user or fetched from the database.

Core Cost: Entered by the user.

Link Number: The estimate or rebuilt part number to which this part is being added.

Rebuilt Part: Indicates whether this is a rebuilt part (typically "N" for stock-coded parts).

Link Type: The type of estimate (e.g., "RB" for rebuilt parts).

Core Cost: The core cost entered by the user.

MMS Rebuilt Code: Typically blank for stock-coded parts.

Rebuilt Part Cost: Typically 0 for stock-coded parts.

5. How Estimates are Calculated (Formula and SQL Calls)
Estimates are calculated by summing up the costs of all parts and labour tasks associated with the estimate. The calculation involves:

Material Costs: Sum of (Quantity × Unit Cost × Percentage Usage) for all parts.

Labour Costs: Sum of (Hours × Labour Rate × Percentage Usage) for all labour tasks.

Core Costs: Sum of (Quantity × Core Cost × Percentage Usage) for all parts.

Formula for Material Costs
For each part:

Copy
Material Cost = Quantity × Unit Cost × (Percentage Usage / 100)
For the entire estimate:

Copy
Total Material Cost = Sum(Material Cost for all parts)
Formula for Labour Costs
For each labour task:

Copy
Labour Cost = Hours × Labour Rate × (Percentage Usage / 100)
For the entire estimate:

Copy
Total Labour Cost = Sum(Labour Cost for all tasks)
SQL Calls for Calculations
Retrieve Material Costs:

sql
Copy
EXEC CES_INQUIRY.RETRIEVE_SCP_USED @LinkNumber = 'YourLinkNumber', @LinkType = 'RB'
This retrieves all stock-coded parts used in the estimate and calculates their total cost.

Retrieve Labour Costs:

sql
Copy
EXEC CES_INQUIRY.RETRIEVE_MB_LABOUR @LinkNumber = 'YourLinkNumber', @LinkType = 'RB'
This retrieves all labour tasks associated with the estimate and calculates their total cost.

Calculate Total Estimate Cost:

sql
Copy
EXEC CES_INQUIRY.CALCULATE_ESTIMATE_TOTAL @LinkNumber = 'YourLinkNumber', @LinkType = 'RB'
This calculates the total cost of the estimate by summing up the material and labour costs.

Example Calculation
For a part with:

Quantity: 2

Unit Cost: $20.00

Percentage Usage: 80%

The material cost for this part would be:


Material Cost = 2 × 20.00 × (80 / 100) = $32.00
For a labour task with:

Hours: 10

Labour Rate: $30.00

Percentage Usage: 80%

The labour cost for this task would be:

Copy
Labour Cost = 10 × 30.00 × (80 / 100) = $240.00
The total estimate cost would be the sum of all material and labour costs.

Summary
MMS Stock Code Dropdown: Populated using CES_INQUIRY.POPULATE_SC_COMBOXES.
Resolve Button: Calls CES_INQUIRY.RETRIEVE_SC_PART_INFO to fetch part details.
Cost Centre Dropdown: Populated using CES_INQUIRY.RETRIEVE_COST_CENTRES.
Add Button: Calls CES_UPDATE.ADD_SCP_USED to add the part to the estimate.

Estimate Calculations:

Material Costs: Sum of (Quantity × Unit Cost × Percentage Usage).

Labour Costs: Sum of (Hours × Labour Rate × Percentage Usage).

SQL Calls: CES_INQUIRY.RETRIEVE_SCP_USED and CES_INQUIRY.RETRIEVE_MB_LABOUR.

You are ASp.NET core expert. You have vast knowledge of Telerik ASP.NET Core controls.
I have included my code here with.
In the Kendo rid, I want to use Telerik  multiselect  control to display vehicle series. (One user can have multiple vehicles). For Add, Edit, User should be able to select multiple  Vehicles. When page gets loaded,  for each user Vehciles should be displayed as comma separated string (or other way to see the vehicle description). Fix the following code or suggest the changes.
Code :
ListOfBuesModel.cs :
namespace BCES.Models.Common
{
    public class ListOfBusesModel
    {
        public int ListId { get; set; }
        public string Description { get; set; }
    }
}
RebuiltPartsViewModel.cs :
using BCES.Models.Common;

namespace BCES.Models.Parts
{
    public class RebuiltPartsViewModel
    {
      public int RbMasterlistId {  get; set; }
        public string MmsStockCode { get; set; }
        public string DetailedDesc { get; set; }
        public string Keyword { get; set; }
        public string JobNumber { get; set; }
        public string RebuiltStockNum { get; set; }
        public string? CoreCharge { get; set; }
        public string? CorePartNum { get; set; }

        public List<ListOfBusesModel> VehicleSeries { get; set; } = new List<ListOfBusesModel>();

        public string LastModifiedBy { get; set; }
        public string LastModifiedDate { get; set; }
        public string SopNumber { get; set; }
        public string? BuyNewCost { get; set; }
        public string? RemanCost { get; set; }
        public bool IsActive { get; set; }
      
    }
}
RebuiltPartsController.cs :
using Dapper;
using Microsoft.AspNetCore.Mvc;
using Dapper;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Threading.Tasks;
using Telerik.DataSource;
using Telerik.DataSource.Extensions;
using BCES.Models.Admin;
using Kendo.Mvc.UI;
using Kendo.Mvc.Extensions;
using DataSourceRequest = Kendo.Mvc.UI.DataSourceRequest;
using BCES.Data;
using Telerik.SvgIcons;
using Microsoft.AspNetCore.Http;
using Microsoft.EntityFrameworkCore.Metadata.Conventions;
using BCES.Controllers.Base;
using BCES.Models.Parts;
using BCES.Models.Common;

using Newtonsoft.Json.Linq;
using static System.Net.Mime.MediaTypeNames;
using Azure.Core;
namespace BCES.Controllers
{
    public class RebuiltPartsController : BaseController
    {
        private readonly DapperContext _db;
        private readonly IDbConnection _dbConnection;
        private readonly IHttpContextAccessor _httpContextAccessor;

        public RebuiltPartsController(DapperContext dapper, IHttpContextAccessor httpContextAccessor) : base(dapper, httpContextAccessor)
        {
            _db = dapper;
            _dbConnection = _db.CreateConnection();

            _httpContextAccessor = httpContextAccessor;
        }

        [HttpGet("RebuiltPartsIndex")]
        public IActionResult RebuiltPartsIndex()
        {
            // return View();
            return View("~/Views/Parts/RebuiltParts/Index.cshtml");
        }

        // POST: NscPartsUsed/GetNscPartsUsedView
        [HttpGet]
        public async Task<ActionResult> GetRebuiltPartsView([DataSourceRequest] DataSourceRequest request)
        {
            // Fetch data for the grid (you can use Dapper or any other method)
            var model = await GetRebuiltPartsData();
            return Json(model.ToDataSourceResult(request));
        }

        private async Task<IEnumerable<RebuiltPartsViewModel>> GetRebuiltPartsData()
        {
            try
            {
                var query = @"   
                           SELECT rbm.RbMasterlistId
                           ,rbm.[RbMasterlistId]
                          ,rbm.[RebuiltStockNum]
                          ,rbm.[MmsStockCode]
                          ,rbm.[Keyword]
                          ,rbm.JobNumber
                          ,rbm.[CorePartNum]
                          ,rbm.[DetailedDesc]
                          ,rbm.[CoreCharge]
                          ,rbm.[EstimatedCost]
                          ,rbm.[BuyNewCost]
                          ,rbm.[RemanCost]
                          ,rbm.[ExternalCost]
                         ,lb.Description AS VehicleSeries
                           from [SBCES].[RbMasterlist] rbm
                          INNER JOIN [SBCES].[RbListOfBuses] rlb ON rlb.[RebuiltStockNum] = rbm.[RebuiltStockNum]
                          INNER JOIN [SBCES].[ListOfBuses] lb ON rlb.ListId = lb.ListId
                             ";
                var rbParts = _dbConnection.Query<RebuiltPartsViewModel>(query).ToList();

                foreach (var rbPart in rbParts)
                {
                    rbPart.VehicleSeries = null;
                }

                return rbParts.Distinct().ToList();
            
            

            // return await _dbConnection.QueryAsync<RebuiltPartsViewModel>(query);
        }
            catch (Exception ex)
            {
                return null;
            }

        }

        [HttpGet]
        public async Task<IActionResult> ReadSites([DataSourceRequest] DataSourceRequest request)
        {
            var sites = await GetSites();
            return Json(sites);
        }

        private async Task<IEnumerable<ListOfBusesModel>> GetSites()
        {
            var query = "SELECT ListId, Description FROM SBCES.ListOfBuses";
            var vehicles = await _dbConnection.QueryAsync<ListOfBusesModel>(query);
            return vehicles.ToList();

        }

        [HttpPost]
        public async Task<IActionResult> GetSelectedVehicles([FromBody] dynamic data)
        {
            var sites = data?.sites?.ToObject<List<string>>() ?? Enumerable.Empty<string>();
           // _selectedSites = sites;
            var viewModel = new UserViewModel { SelectedSites = sites };
            return Json(viewModel);
        }

        [HttpGet]
        public async Task<IActionResult> GetRebuiltPartEstimates(string rebuiltNumber)
        {
            try
            {
                var model = await GetRebuiltPartEstimatesData(rebuiltNumber);
                return View("~/Views/Parts/RebuiltParts/_RebuiltPartEstimates.cshtml");
               // return PartialView("~/Views/Parts/RebuiltParts/_RebuiltPartEstimates.cshtml", model);
            }
            catch (Exception ex)
            {
                throw;
            }
        }

        private async Task<RebuiltPartEstimates> GetRebuiltPartEstimatesData(string rebuiltNumber)
        {
            var model = new RebuiltPartEstimates
            {
                JobNumber = "JN001",
                RebuiltStockNum = rebuiltNumber,
                MMSBuyCode = "MMSB001",
                SOPNumber = "SOP001",
                Keyword = "KEY001",
                CoreCode = "CORE001",
                Description = "Sample Description",
                VehicleSeries = "Series A",
                LastModified = "2023-10-01",
                LabourGrid = new List<LabourGridModel>
                {
                    new LabourGridModel { Id = 1, LabourCode = "L001", Description = "Labour 1", Hours = 2, Rate = 50, TotalCost = 100 },
                    new LabourGridModel { Id = 2, LabourCode = "L002", Description = "Labour 2", Hours = 3, Rate = 50, TotalCost = 150 }
                },
                LabourHourSummary = new List<SummaryGridModel>
                {
                    new SummaryGridModel { Category = "Category 1", Amount = 100 },
                    new SummaryGridModel { Category = "Category 2", Amount = 200 }
                },
                MaterialCostSummary = new List<SummaryGridModel>
                {
                    new SummaryGridModel { Category = "Material 1", Amount = 150 },
                    new SummaryGridModel { Category = "Material 2", Amount = 250 }
                },
                CoreCost = 50,
                MaterialsCost = 400,
                LabourCost = 250,
                LabourOverheadCost = 50,
                LabourTotal = 300,
                TotalRebuiltPartCost = 700,
                TaxTotal = 70,
                TotalRebuiltPartWithCost = 770,
                AdditionalInfo1 = "Info 1",
                AdditionalInfo2 = "Info 2"
            };
            return model;
            
        }

        [HttpGet]
        public async Task<IActionResult> GetLabour([DataSourceRequest] DataSourceRequest request)
        {
            try
            {
                //var model = await GetRebuiltPartsData();
               // return Json(model.ToDataSourceResult(request));
                var model = await GetLabourData(1);
                return Json(model);
            }
            catch (Exception ex)
            {
                throw;
            }
        }
        private async Task<LabourGridModel> GetLabourData(int id)
        {
            var model = new LabourGridModel
            {
               Id =1,
               LabourCode = "LC 001",
               Description = "Labor Description",
               Hours = 3,
               Rate= 25,
               TotalCost = 30
            };
            
            return model;
        }

        [HttpPost]
        public IActionResult ArchiveEstimate()
        {
            return Json(new { success = true, message = "Archived" });
        }

        [HttpPost]
        public IActionResult SaveEstimate()
        {
            return Json(new { success = true, message = "Saved" });
        }

        [HttpPost]
        public IActionResult UpdateEstimate()
        {
            return Json(new { success = true, message = "Updated" });
        }

        [HttpPost]
        public IActionResult ActionHandler(string action)
        {
            return Json(new { success = true, message = "{action} button clicked" });
        }

    }
}
RebuiltPartsVehiclesMultiSelect.cshtml :
@model IEnumerable<BCES.Models.Common.ListOfBusesModel>

@(
Html.Kendo().MultiSelect()
            .Name("multiselect")
            .Placeholder("Select Vehicle..")
            .DownArrow(true)
            .NoDataTemplateId("noDataTemplate")
            .DataTextField("Description")
            .DataValueField("ListId")
            .Filter("contains")
            .BindTo(Model)
            .AutoBind(true)
            .Value("ListId") // Prepopulate with selected SiteIds
            .DataSource(source =>
            {
                source.Read(read => read.Url(Url.Action("ReadVehicles", "RebuiltPartsGrid")).Type(HttpVerbs.Get));

            })
            .Events(e =>
                {
                    e.Change("onVehicleChange");
                })
        )
Index.cshtml :
@using BCES.Models.Parts
@model IEnumerable<BCES.Models.Parts.RebuiltPartsViewModel>

@{
    ViewData["Title"] = "Rebuilt Parts";
}

<h4>Rebuilt Parts</h4>

@(Html.Kendo().Grid<RebuiltPartsViewModel>()
    .Name("RebuiltPartsGrid")
    .Columns(columns =>
    {
        columns.Bound(c => c.RebuiltStockNum).Title("Rebuilt Stock Code").Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)));
        columns.Bound(c => c.MmsStockCode).Title("MMS Stock Code").Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)));
        columns.Bound(c => c.DetailedDesc).Title("Description").Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)));
        columns.Bound(c => c.Keyword).Title("Keyword").Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)));
        columns.Bound(c => c.JobNumber).Title("Job Number").Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)));
        columns.Bound(c => c.CorePartNum).Title("Core Code").Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)));
        @* columns.Bound(c => c.VehicleSeries).Title("Vehicle Series")
        .ClientTemplate("# if (typeof VehicleSeries != 'undefined' && VehicleSeries && VehicleSeries.length > 0) { # #= VehicleSeries.map(VehicleSeries => VehicleSeries.Description).join(', ') # # } else { # Select Vehicle # } #")
             .EditorTemplateName("RebuiltPartsVehicleSeriesMultiSelect");
        ; *@
        columns.Bound(c => c.CoreCharge).Title("Core Cost").Filterable(ftb => ftb.Cell(cell => cell.Operator("gte"))).Format("{0:C2}").EditorTemplateName("Currency"); ;
        columns.Bound(c => c.BuyNewCost).Title("Buy Cost").Filterable(ftb => ftb.Cell(cell => cell.Operator("gte"))).Format("{0:C2}").EditorTemplateName("Currency"); ;
        columns.Bound(c => c.RemanCost).Title("Remanufactured Cost").Filterable(ftb => ftb.Cell(cell => cell.Operator("gte"))).Format("{0:C2}").EditorTemplateName("Currency"); ;

       
       @*  columns.Bound(c => c.LastModifiedBy).Title("Modified By").EditorTemplateName("TextBoxTemplate"); *@
        @* columns.Bound(c => c.LastModifiedDate).Title("Modified Date").EditorTemplateName("TextBoxTemplate"); *@
       
        columns.Command(command =>
            {
                command.Edit();
                @* command.Destroy();
                command.Custom("Estimate").Click("openEstimates"); *@
            }).Title("Actions");
        
       
    })

    .ToolBar(toolbar => { toolbar.Create(); })
    .Editable(editable => editable.Mode(GridEditMode.InLine))
    .Pageable()
    .Sortable()
     .ClientDetailTemplateId("template")   
    .Resizable(r => r.Columns(true))
     .Groupable(g => g.ShowFooter(false))
    .Filterable(ftb => ftb.Mode(GridFilterMode.Row))    
    .Scrollable()

    .DataSource(dataSource => dataSource
        .Ajax()
        .Model(model =>
        {
            model.Id(c => c.RbMasterlistId);
            model.Field(c => c.RbMasterlistId);//.DefaultValue(new List<string>());
            model.Field(c => c.RebuiltStockNum);
        })
       
        .Read(read => read.Url(Url.Action("GetRebuiltPartsView", "RebuiltParts")).Type(HttpVerbs.Get))
            
    )
)
<div id="estimates-container"></div>

@section Scripts {
    <script>
        $(document).ready(function () {
            var grid = $("#RebuiltPartsGrid").data("kendoGrid");

            grid.bind("detailInit", function (e) {
                // Get the container for the detail template
                var container = e.detailCell.find("#detail-template-" + e.data.RebuiltStockNum);

                // Load PartialTest1
                $.get('/Common/PartialViewTest/PartialTest1', function (data) {
                    container.append(data); // Append the content of PartialTest1
                });

                // // Load PartialTest2
                // $.get('/Common/PartialViewTest/PartialTest2', function (data) {
                //     console.log(data);
                //     container.append(data); // Append the content of PartialTest2
                // });
            });
        });
    </script>


<script>
        function openEstimates(e) {
            e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var rebuiltStockNum = dataItem.RebuiltStockNum;
            $.ajax({
                url: '@Url.Action("GetRebuiltPartEstimates", "RebuiltParts")',
                type: 'GET',
                data: { RebuiltStockNum: rebuiltStockNum },
                success: function (result) {
                    $('#estimates-container').html(result);
                },
                error: function (xhr, status, error) {
                    console.error('An error occurred: ' + error);
                }
            });
        }
</script>
    <script id="template" type="text/x-kendo-template">
        <div id="detail-template-#=RebuiltStockNum#"></div>
    </script>

  
    <script>
        function dataBound() {
            this.expandRow(this.tbody.find("tr.k-master-row").first());
        }
    </script>

    <script>
        function onVehicleChange(e) {
            // debugger;
            console.log("event: onVehicleChange");
            var selectedVehicles = this.value();
            console.log("selected vehicles :");
            console.log(selectedVehicles);
        
            $.ajax({
                url: '@Url.Action("GetSelectedVehicles", "RebuiltPartsGrid")',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ vehicles: selectedVehicles }),
                beforeSend: function (xhr) {
                    console.log("Sending data :", JSON.stringify({ vehicles: selectedVehicles }));
                },
                success: function (data) {
                    console.log('Success:', data);
                    // Optionally, update the UI with the response
                },

                error: function (error, data) {
                    console.log('datasent : ', data);
                    console.error('Error:', error);
                }
            });
            ////
        }
    </script>
}

function getDropDownParams() {
    // Find the currently focused dropdown input field
    var activeInput = $("input.k-input:focus");

    // Go up to the dropdown wrapper to find the original 'name'
    var wrapper = activeInput.closest(".k-dropdown");

    var nameAttr = wrapper.find("select").attr("name"); // gets the name of the real <select>
    var searchText = activeInput.val() || "";

    return {
        columnName: nameAttr ? nameAttr.split('.').pop() : "",
        searchText: searchText
    };
}


@model object

@{
    var fieldName = ViewData.TemplateInfo.GetFullHtmlFieldName("");
}

@(Html.Kendo().DropDownList()
    .Name(fieldName)
    .DataTextField("Text")
    .DataValueField("Value")
    .Filter(FilterType.Contains)        // Enables search
    .OptionLabel("Search...")           // Placeholder text
    .AutoBind(false)                    // Load on first search, not on load
    .MinLength(2)                       // Trigger server call after 2 characters
    .HtmlAttributes(new Dictionary<string, object>
    {
        { "name", fieldName },
        { "data-column", fieldName }
    })
    .DataSource(source =>
    {
        source.Read(read =>
        {
            read.Url(Url.Action("GetAutoCompleteData", "AutoComplete"))
                .Type(HttpVerbs.Get)
                .Data("getComboBoxParams"); // Optional: passes extra params
        })
        .ServerFiltering(true); // Let server do the filtering
    })
)

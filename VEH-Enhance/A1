Q1: Change "No Data Found" to "Invalid Selection" in bold red:

csharp
@(Html.Kendo().ComboBox()
    // ... existing configuration ...
    .NoDataTemplate("<div style='color: red; font-weight: bold;'>Invalid Selection</div>")
    .Events(e => {
        e.DataBound("onComboBoxDataBound");
        e.Change("onComboBoxChange");
    })
)
Q2: Clear invalid input and prevent continuation:
Add these scripts:

javascript
function onComboBoxDataBound(e) {
    // Check if no data is available after filtering
    if (e.sender.dataSource.total() === 0) {
        e.sender.value(null); // Clear the input
        e.sender.input.val(""); // Clear the text
        setTimeout(function() {
            alert("Invalid Selection! Please choose from the list.");
        }, 100);
    }
}

function onComboBoxChange(e) {
    var combo = e.sender;
    if (combo.selectedIndex === -1) {
        combo.value(null);
        combo.input.val("");
        combo.trigger("change");
        // Optional: Show error message
        $("#validationMessage").text("Invalid selection!").css("color", "red");
    } else {
        $("#validationMessage").text("");
    }
}
Enhancements:

Input Validation:

csharp
// Add to your ComboBox configuration
.HtmlAttributes(new { required = "required", data_invalid_msg = "Invalid selection!" })
Prevent Form Submission:

javascript
// Add to your form submit handler
$("form").submit(function(e) {
    var invalidCombos = $("[data-role='combobox']").filter(function() {
        return $(this).data("kendoComboBox").selectedIndex === -1;
    });
    
    if (invalidCombos.length > 0) {
        e.preventDefault();
        alert("Please fix invalid selections before submitting.");
    }
});
Key modifications:

NoDataTemplate customizes the "no matches" message

DataBound event clears invalid input automatically


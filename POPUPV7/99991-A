How to make toolbar buttons (Add, Save, Cancel) look the same

Instead of relying on toolbar.Create() / toolbar.Save(), swap them for custom toolbar buttons with the same .Custom() style you used for grid commands.

Hereâ€™s how you can rewrite it:

.ToolBar(toolbar =>
{
    toolbar.ClientTemplate(@"
        <button class='k-button scparts-action-btn k-grid-add' onclick='onAddClick()'>
            <span class='k-icon k-i-plus'></span> Add
        </button>
        <button class='k-button scparts-action-btn k-primary' onclick='onSaveClick()'>
            <span class='k-icon k-i-save'></span> Save
        </button>
        <button class='k-button scparts-action-btn' onclick='onCancelClick()'>
            <span class='k-icon k-i-cancel'></span> Cancel
        </button>
    ");
})

ðŸ”¹ What this does

scparts-action-btn â†’ applies the same shared CSS class youâ€™re already using in popups + grid commands.

k-icon spans â†’ gives the same icon + text combo as your grid Copy/Archive/Delete.

k-primary on Save â†’ makes Save stand out (blue button, same as your Update popup button).

Custom click handlers (onAddClick, onSaveClick, onCancelClick) let you control the logic â€” you can still call the gridâ€™s built-in addRow() / saveChanges() inside these functions if needed.

Example:

function onAddClick() {
    $("#MyGrid").data("kendoGrid").addRow();
}

function onSaveClick() {
    $("#MyGrid").data("kendoGrid").saveChanges();
}

function onCancelClick() {
    $("#MyGrid").data("kendoGrid").cancelChanges();
}

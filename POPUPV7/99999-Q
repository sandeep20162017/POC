You are ASP.NET core, css, UI/UX expert.
I would like LabourDetailsRebuiltPartsViewModel.cshtml -  same widthnand height, same look and feel, 
same background, same border and same controller size like in _VehPopUp.cshtml.
If you need other details, just ask  me I will provide 
_VehPopUp.cshtml
@model BCES.Models.Vehicle.VehicleViewModel

<div class="scparts-popup-style">
    <div class="section-title">@(Model.VehicleListId == 0 ? "Add New Vehicle Estimate" : $"Estimate #{Model.VehicleListId}")</div>
    <div class="popup-action">
        <button id="btnSave" class="k-button k-primary" type="button">Update</button>
        <button id="btnCancelVehicle" class="k-button" type="button">Cancel</button>
       @*  <button id="btnSave" type="button">
            <span class="vehicle-btn-icon">✓</span> Save
        </button>
        <button id="btnCancelVehicle"  type="button">
            <span class="vehicle-btn-icon">✕</span> Cancel
        </button> *@
    </div>
</div>

<div class="form-container">
    <form id="vehicleForm">
        @Html.HiddenFor(m => m.VehicleListId)
        @Html.Hidden("formMode", Model.VehicleListId == 0 ? "Add" : "Edit", new { id = "formMode" })

        <!-- Vehicle Information Section -->
        <div class="section-title">Vehicle Information</div>

        <!-- Row 1: Estimate #, Vehicle Series, Quantity -->
        <div class="form-row">
           @*  <div class="form-group  double-width">
                @Html.LabelFor(m => m.VehicleListId, "Estimate #", new { @class = "form-label" })
                @Html.EditorFor(m => m.VehicleListId, new { htmlAttributes = new { @class = "k-textbox", style = "width:100%" } })

            </div> *@

            <div class="form-group  double-width">
                @Html.LabelFor(m => m.VehSeriesCode, "Vehicle Series", new { @class = "form-label required-label" })
                @Html.EditorFor(m => m.VehSeriesCode, "ComboBoxEditor", new
                    {
                        LockMap = "",
                        AdditionalAttributes = new Dictionary<string, object> {
                { "class", "form-control required-cell" },
                { "required", "required" }
                }
                    })
            </div>

            <div class="form-group  double-width">
                @Html.LabelFor(m => m.NumOfVehicles, "# Of Vehicles", new { @class = "form-label required-label" })
                @(Html.Kendo().NumericTextBox()
                    .Name("NumOfVehicles")
                    .Format("0")
                    .Min(1)
                    .Value(Model.NumOfVehicles)
                    .HtmlAttributes(new { @class = "form-control", required = "required" })
                    )
            </div>
        </div>

        <!-- Row 2: Description, SOP Number -->
        <div class="form-row">
            <div class="form-group  double-width">
                @Html.LabelFor(m => m.ProjDesc, "Description", new { @class = "form-label required-label" })
                @Html.EditorFor(m => m.ProjDesc, "ComboBoxEditor", new
                    {
                        LockMap = "",
                        AdditionalAttributes = new Dictionary<string, object> {
                { "class", "form-control required-cell" },
                { "required", "required" }
                }
                    })
            </div>

            <div class="form-group double-width">
                @Html.LabelFor(m => m.Sopnumber, "SOP Number", new { @class = "form-label" })
                @Html.EditorFor(m => m.Sopnumber, new { htmlAttributes = new { @class = "k-textbox", style = "width:100%" } })
          
            </div>
        </div>

        <!-- Specifications Section -->
        <div class="section-title">Specifications</div>

        <!-- Row 3: Make, Model, Year -->
        <div class="form-row">
            <div class="form-group  double-width">
                @Html.LabelFor(m => m.Make, "Make", new { @class = "form-label" })
                @Html.EditorFor(m => m.Make, "ComboBoxEditor", new
                    {
                        LockMap = "",
                        AdditionalAttributes = new Dictionary<string, object> {
                { "class", "form-control" }
                }
                    })
            </div>

            <div class="form-group  double-width">
                @Html.LabelFor(m => m.VehModel, "Model", new { @class = "form-label" })
                @Html.EditorFor(m => m.VehModel, "ComboBoxEditor", new
                    {
                        LockMap = "",
                        AdditionalAttributes = new Dictionary<string, object> {
                { "class", "form-control" }
                }
                    })
            </div>

            <div class="form-group  double-width">
                @Html.LabelFor(m => m.Year, "Year", new { @class = "form-label" })
                @(Html.Kendo().NumericTextBox()
                    .Name("Year")
                    .Format("0")
                    .Min(1900)
                    .Max(2100)
                    .Value(Model.Year)
                    .HtmlAttributes(new { @class = "form-control" })
                    )
            </div>
        </div>

        <!-- Row 4: Engine, Transmission, Differential -->
        <div class="form-row">
            <div class="form-group  double-width">
                @Html.LabelFor(m => m.Engine, "Engine", new { @class = "form-label" })
                @Html.EditorFor(m => m.Engine, "ComboBoxEditor", new
                    {
                        LockMap = "",
                        AdditionalAttributes = new Dictionary<string, object> {
                { "class", "form-control" }
                }
                    })
            </div>

            <div class="form-group  double-width">
                @Html.LabelFor(m => m.Transmission, "Transmission", new { @class = "form-label" })
                @Html.EditorFor(m => m.Transmission, "ComboBoxEditor", new
                    {
                        LockMap = "",
                        AdditionalAttributes = new Dictionary<string, object> {
                { "class", "form-control" }
                }
                    })
            </div>

            <div class="form-group  double-width">
                @Html.LabelFor(m => m.Differential, "Differential", new { @class = "form-label" })
                @Html.EditorFor(m => m.Differential, "ComboBoxEditor", new
                    {
                        LockMap = "",
                        AdditionalAttributes = new Dictionary<string, object> {
                { "class", "form-control" }
                }
                    })
            </div>
        </div>
        <!-- History -->
        <div class="section-title">History</div>
        <div class="form-row">
            <div class="form-group double-width">
                @Html.LabelFor(m => m.ModifiedLastBy, "Modified By", new { @class = "form-label" })
                @(Html.Kendo().TextBoxFor(m => m.ModifiedLastBy).HtmlAttributes(new { @readonly = "readonly" }))
            </div>
            <div class="form-group double-width">
                @Html.LabelFor(m => m.ModifiedLastDate, "Modified Date", new { @class = "form-label" })
                @(Html.Kendo().TextBoxFor(m => m.ModifiedLastDate).HtmlAttributes(new { @readonly = "readonly" }))
            </div>
        </div>
        
    </form>
LabourDetailsRebuiltPartsViewModel.cshtml
@model BCES.Models.Parts.LabourDetailsRebuiltPartsViewModel

<div class="labour-popup-style">

    <!-- Top-left action buttons -->
    <div class="popup-actions">
        <button class="k-button k-primary" type="button" onclick="saveLabourDeatilsPopup()">Update</button>
        <button class="k-button" type="button" onclick="cancelLabourDetailsPopup()">Cancel</button>
    </div>
    
    <!-- ===================== Row 1 ===================== -->
    <div class="section-title">Labour Type Information</div>
    <div class="form-row">
        <!-- Supplier Number -->
        <div class="form-group  double-width">
            @Html.LabelFor(m => m.LabourDefn, "Labour Type", new { @class = "form-label required-label" })
            @Html.EditorFor(m => m.LabourDefn, "ComboBoxEditor", new { htmlAttributes = new { required = "required" } })

        </div>

        <!-- Supplier Name -->
        <div class="form-group  double-width">
            @Html.LabelFor(m => m.Task, "Task", new { @class = "form-label required-label" })
            @Html.EditorFor(m => m.Task, "ComboBoxEditor", new { htmlAttributes = new { required = "required" } })


        </div>

        <!-- Keyword -->
        <div class="form-group  double-width">
            @Html.LabelFor(m => m.CostCentre, "Cost Centre", new { @class = "form-label" })
            @Html.EditorFor(m => m.CostCentre, "ComboBoxEditor", new { htmlAttributes = new { required = "required" } })
        </div>
    </div>

    
    <!-- Part Cost -->
    <div class="section-title">Labour Usage</div>
    <div class="form-row">
        <div class="form-group  double-width">
            @Html.LabelFor(m => m.Usage, "%", new { @class = "form-label" })
            @(Html.Kendo().NumericTextBoxFor(m => m.Usage).Format("n0").Min(0).Max(100).HtmlAttributes(new { required = "required" }))
        </div>
        <!-- Cost Centre -->
        <div class="form-group  double-width">
            @Html.LabelFor(m => m.LabourHrs, "Hrs", new { @class = "form-label required-label" })
            @(Html.Kendo().NumericTextBoxFor(m => m.LabourHrs).Min(0).Max(132).Format("n0"))
        </div>
        <div class="form-group  double-width">
            @Html.LabelFor(m => m.LabourMins, "Min", new { @class = "form-label required-label" })
            @(Html.Kendo().NumericTextBoxFor(m => m.LabourMins).Min(0).Max(59).Format("n0"))
            @* @Html.EditorFor(m => m.LabourMins, new { htmlAttributes = new { @class = "k-textbox", style = "width:100%" } }) *@
        </div>
    </div>
    <!-- History -->
    <div class="section-title">History</div>
    <div class="form-row">
        <div class="form-group double-width">
            @Html.LabelFor(m => m.LastModifiedBy, "Modified By", new { @class = "form-label" })
            @(Html.Kendo().TextBoxFor(m => m.LastModifiedBy).HtmlAttributes(new { @readonly = "readonly" }))
        </div>
        <div class="form-group double-width">
            @Html.LabelFor(m => m.DateRevised, "Modified Date", new { @class = "form-label" })
            @(Html.Kendo().TextBoxFor(m => m.DateRevised).HtmlAttributes(new { @readonly = "readonly" }))
        </div>
    </div>

</div>
css :
/* =========================================================
   GLOBAL BASE STYLES
   ========================================================= */

/* Apply consistent font and size across the app */
body,
.k-window,
.k-grid,
.k-tabstrip,
.k-textbox,
.k-dropdown,
.k-combobox,
.k-numerictextbox input,
.form-label {
    font-size: 11px !important;
    font-family: "Segoe UI", Arial, sans-serif;
}

    /* =========================================================
   POPUP WINDOWS
   ========================================================= */

    /* Ensure popups are solid white (no transparency) */
    .k-window,
    #estimatePopup.k-window,
    .k-window.scparts-popup-style {
        background-color: #ffffff !important;
        border: 1px solid #dbeaf7;
        border-radius: 6px;
    }

/* Overlay behind popups - solid white overlay (no transparency) */
.k-overlay {
    background: #c9e2f5 !important;
    opacity: 1 !important;
}

/* Main vehicle popup */
#estimatePopup.k-window {
    width: 100vw !important;
    height: 90vh !important;
}

/* Secondary popups (Stock, Non-stock, Labour) */
.k-window.scparts-popup-style {
    /*width: 40vw !important;*/
    height: calc(90vh - 10px) !important;
}

/* Hide Telerik default Update/Cancel buttons - custom buttons are used */
.k-window .k-edit-buttons {
    display: none !important;
}

/* Ensure secondary popup content expands with popup */
.k-window.scparts-popup-style .k-window-content,
.k-window.scparts-popup-style .form-container {
    width: 100% !important;
    height: 100% !important;
    box-sizing: border-box;
    overflow: auto;
}

/* Small dialogs (Delete, Copy, Confirm) */
#deleteConfirmationDialog.k-window,
#copyEstimateDialog.k-window,
.k-window[title*="Confirm"],
.k-window[title*="Copy Estimate"],
.k-window[title*="Delete"] {
    width: 400px !important;
    min-height: 180px;
}

/* Popup title bar */
.k-window-titlebar {
    background-color: #ffffff !important;
    color: #005a9e;
    font-weight: bold;
    border-bottom: 1px solid #dbeaf7;
}

/* =========================================================
   POPUP FORM CONTAINER
   ========================================================= */

/* Base container inside popup */
.form-container {
    background-color: #ffffff !important;
    border: 1px solid #dbeaf7;
    border-radius: 6px;
    padding: 10px;
    margin-bottom: 8px;
}

/* =========================================================
   POPUP ACTION BUTTONS
   ========================================================= */

/* General button styling */
.k-window .k-button {
    font-size: 11px !important;
    border-radius: 4px;
    padding: 6px 12px;
    background: #f5faff;
    border: 1px solid #c9e2f5;
    color: #003366;
}

    /* Hover state for buttons */
    .k-window .k-button:hover {
        background: #e1effa;
    }

    /* Primary action buttons */
    .k-window .k-button.k-primary {
        background-color: #007acc;
        border: 1px solid #007acc;
        color: #ffffff;
    }

        .k-window .k-button.k-primary:hover {
            background-color: #006bb3;
        }

/* =========================================================
   FORM LAYOUT (Multi-column rows)
   ========================================================= */

.form-row {
    display: flex;
    flex-wrap: nowrap;
    gap: 4px;
    margin-bottom: 4px;
}

.form-group {
    flex: 1;
    border: 1px solid #e1effa;
    padding: 4px;
    border-radius: 4px;
    background: #ffffff;
}

    .form-group.double-width {
        flex: 2;
    }

    .form-group.full-width {
        flex: 1 1 100%;
    }

.form-label {
    font-weight: 600;
    color: #005a9e;
    margin-bottom: 4px;
    display: inline-block;
}

/* Required field indicator */
.required-label::after {
    content: " *";
    color: red;
}

/* Input styling */
.k-textbox,
.k-dropdown,
.k-combobox,
.k-numerictextbox input {
    width: 100% !important;
    border-radius: 4px;
    border: 1px solid #c9e2f5;
    font-size: 11px !important;
    background: #ffffff;
    box-shadow: none; /* flat look, no shadows */
}

    /* Input focus state for better accessibility */
    .k-textbox:focus,
    .k-dropdown:focus,
    .k-combobox:focus,
    .k-numerictextbox input:focus {
        border-color: #66afe9;
        outline: none;
    }

/* =========================================================
   TABSTRIP
   ========================================================= */

/* Control overall TabStrip height */
#estimateTabs {
    height: calc(90vh - 10px);
    /*height : 100vh;*/
    overflow: auto;
}

/* Tab headers */
.k-tabstrip-items .k-item {
    font-size: 11px !important;
    background-color: #ffffff !important;
    color: #000000;
    border: 1px solid #c9e2f5;
    border-radius: 4px 4px 0 0;
    margin-right: 2px;
    padding: 4px 5px;
    cursor: pointer;
}

    /* Active tab */
    .k-tabstrip-items .k-item.k-state-active {
        background-color: #ffffff;
        font-weight: bold;
        color: #000000;
        border: 1px solid #c9e2f5;
        border-bottom: 2px solid #c9e2f5;
    }

/* Tab content area */
.k-tabstrip-content,
.k-tabstrip .k-content {
    font-size: 11px !important;
    color: #000000;
    background-color: #ffffff !important;
    border: 1px solid #c9e2f5 !important;
    padding: 8px 10px;
    box-sizing: border-box;
}

/* =========================================================
   GRID IMPROVEMENTS
   ========================================================= */

.k-grid {
    font-size: 11px !important;
    background-color: #ffffff;
    border: 1px solid #e1effa;
    border-radius: 4px;
}

.k-grid-header {
    background-color: #f5faff;
    font-weight: bold;
    color: #000000;
}

.k-grid .k-alt {
    background-color: #c9e2f5;
}

/* =========================================================
   SECTION TITLES
   ========================================================= */

.section-title {
    font-weight: bold;
    font-size: 11px;
    color: #005a9e;
    margin: 8px 0 6px 0;
    padding-bottom: 2px;
    border-bottom: 1px solid #c9e2f5;
}

    .section-title::before {
        content: "|";
        color: #007acc;
        margin-right: 6px;
        font-weight: bold;
    }
/* Force Telerik ComboBox dropdown list to be fully opaque */
.k-animation-container .k-list-container,
.k-list-container {
    background-color: #ffffff !important; /* solid white background */
    opacity: 1 !important; /* no transparency */
}

    /* Ensure list items are also fully visible */
    .k-list-container .k-list .k-item {
        background-color: #ffffff !important;
        opacity: 1 !important;
        color: #000000; /* text color for visibility */
    }

        /* Optional: highlight hovered item */
        .k-list-container .k-list .k-item.k-state-hover {
            background-color: #e1effa !important;
        }
/* Pop up styles - Labour Details*/
.k-window,
#estimatePopup.k-window,
.k-window.labour-popup-style {
    background-color: #ffffff !important;
    border: 1px solid #dbeaf7;
    border-radius: 6px;
}

/* Secondary popups (Stock, Non-stock, Labour) */
.k-window.labour-popup-style {
    width: 40vw !important;
    height: 70vh !important;
}
/* Ensure secondary popup content expands with popup */
    .k-window.labour-popup-style .k-window-content,
    .k-window.labour-popup-style .form-container {
        width: 100% !important;
        height: 100% !important;
        box-sizing: border-box;
        overflow: auto;
    }
/* Pop up styles - Rebuilt Parts Details*/

/* Secondary popups (rebuilt) */
    .k-window.rebuilt-popup-style {
        width: 40vw !important;
        height: 10vh !important;
    }
/* Ensure secondary popup content expands with popup */
        .k-window.rebuilt-popup-style .k-window-content,
        .k-window.rebuilt-popup-style .form-container {
            width: 100% !important;
            height: calc(90vh - 90px);
            box-sizing: border-box;
            overflow: auto;
        }
/* Control overall TabStrip height */
#costSummaryContent {
    height: calc(90vh - 90px) !important;
    /*height : 100vh;*/
    overflow: auto;
}
#rebuilt-popup-style {
    height: calc(90vh - 150px) !important;
    /*height : 100vh;*/
    overflow: auto;
}




</div>

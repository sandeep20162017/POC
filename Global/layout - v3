 FULL GLOBAL JAVASCRIPT
Paste this into your global JS file (site.js or _Layout.cshtml):

javascript
Copy
Edit
$(document).ready(function () {

    function updateSaveCancelButtons(grid) {
        const save = grid.wrapper.find(".k-grid-save-changes");
        const cancel = grid.wrapper.find(".k-grid-cancel-changes");
        const hasChanges = grid.dataSource.hasChanges();

        save.prop("disabled", !hasChanges).toggleClass("k-state-disabled", !hasChanges);
        cancel.prop("disabled", !hasChanges).toggleClass("k-state-disabled", !hasChanges);
    }

    function markRequiredColumns(grid) {
        const fields = grid.dataSource.options.schema.model.fields;

        grid.columns.forEach((col, idx) => {
            const th = grid.thead.find("th").eq(idx);
            if (fields[col.field] && fields[col.field].validation && fields[col.field].validation.required) {
                th.addClass("required-cell");
            }
        });
    }

    function handleInlineRequiredValidation(cell, fieldName, value) {
        const msg = "This field is required.";

        cell.removeClass("invalid-cell");
        cell.find(".validation-message").remove();

        if (!value || value.trim() === "") {
            cell.addClass("invalid-cell");
            cell.append(`<div class='validation-message'>${msg}</div>`);
            return false;
        }

        return true;
    }

    // Apply to every Kendo grid
    $(".k-grid").each(function () {
        const grid = $(this).data("kendoGrid");

        if (!grid) return;

        // On initial bind
        grid.bind("dataBound", function () {
            updateSaveCancelButtons(grid);
            markRequiredColumns(grid);
        });

        // On Edit start
        grid.bind("edit", function (e) {
            const row = e.container.closest("tr");
            row.addClass(e.model.isNew() ? "adding-row" : "editing-row");

            updateSaveCancelButtons(grid);
        });

        grid.bind("save", function () {
            updateSaveCancelButtons(grid);
        });

        grid.bind("cancel", function () {
            updateSaveCancelButtons(grid);
        });

        // Inline required field validation
        grid.table.on("focusout", "td.k-edit-cell input, td.k-edit-cell textarea", function () {
            const input = $(this);
            const cell = input.closest("td");
            const field = cell.attr("data-container-for");
            const value = input.val();
            const schema = grid.dataSource.options.schema.model.fields;

            if (schema[field] && schema[field].validation && schema[field].validation.required) {
                handleInlineRequiredValidation(cell, field, value);
            } else {
                cell.removeClass("invalid-cell").find(".validation-message").remove();
            }
        });
    });

    // MENU highlighting
    $(".k-menu .k-item").each(function () {
        const link = $(this).find(".k-link").first();
        if (link[0].href === window.location.href) {
            $(this).addClass("k-state-active");
        }
    });

});
ðŸŽ¨ FULL GLOBAL CSS
Add this to your global stylesheet (site.css):

css
Copy
Edit
/* Required Cell Header */
.k-grid .required-cell {
    background-color: #fff0f0;
    position: relative;
}
.k-grid .required-cell::after {
    content: "*";
    color: red;
    position: absolute;
    right: 8px;
    top: 50%;
    transform: translateY(-50%);
    font-size: 16px;
    font-weight: bold;
}

/* Validation Message under cell */
.k-grid .validation-message {
    font-size: 12px;
    color: #e53935;
    padding-top: 2px;
}

/* Invalid cell style */
.k-grid .invalid-cell {
    background-color: #ffe6e6 !important;
    border: 1px solid #e53935 !important;
}

/* Row coloring */
.k-grid .editing-row {
    background-color: #e8f5e9 !important;
}
.k-grid .adding-row {
    background-color: #e3f2fd !important;
}

/* Save/Cancel buttons */
.k-grid-save-changes {
    background: #2196f3;
    color: white;
    border: 1px solid #1976d2;
}
.k-grid-cancel-changes {
    background: #ef5350;
    color: white;
    border: 1px solid #d32f2f;
}
.k-grid-save-changes.k-state-disabled,
.k-grid-cancel-changes.k-state-disabled {
    background: #e0e0e0 !important;
    color: #757575 !important;
    border: 1px solid #bdbdbd !important;
    cursor: not-allowed;
}

/* Menu highlight */
.k-menu .k-link {
    transition: background 0.3s ease, color 0.3s ease;
    font-size: 15px;
    font-weight: 500;
}
.k-menu .k-item.k-state-active > .k-link {
    background: #007bff !important;
    color: white !important;
    font-weight: bold;
    border-radius: 4px;
}
.k-menu .k-item:not(.k-state-active):hover > .k-link {
    background: #e2e6ea !important;
    color: #0056b3 !important;
}
ðŸ§ª Sample Model Validation in ASP.NET Core
In your ViewModel (bound to grid):

csharp
Copy
Edit
public class PartViewModel
{
    public int Id { get; set; }

    [Required(ErrorMessage = "Part Number is required")]
    public string PartNumber { get; set; }

    [Required(ErrorMessage = "Qty is required")]
    public int? Quantity { get; set; }
}
âœ… Done: Now your UI behaves exactly like a modern app should.

Inline field feedback

Disabled Save until needed

Required field styling

Same experience for all grids

Menu item highlighting works globally

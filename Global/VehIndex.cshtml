In my application following tabs has its own grids. I want the same behaviour globally for parent and grids in
  <li>Labour Details</li>
                        <li>Labour Hour</li>
                        <li>Material Cost</li>
                        <li>Stock Coded Parts</li>
                        <li>Non Stock Coded Parts</li>
                        <li>Rebuilt Parts</li>
Pls give me complete css and JS files.
Index.cshtml :
<h6>Vehicle Estimate</h6>

@(Html.Kendo().TabStrip()
    .Name("vehicleTabStrip")
    .Animation(animation => animation.Open(effect => effect.Fade(FadeDirection.In)))
    .Items(tabstrip =>
    {
        tabstrip.Add().Text("Vehicles")
            .Selected(true)
            .Content(@<text>
    @try
    {
    @(Html.Kendo().Grid<VehicleViewModel>()
    .Name("VehicleGrid")
    .Columns(columns =>
    {
    columns.Bound(c => c.VehicleListId).Title("Estimate #")
    .Filterable(ftb => ftb.Cell(cell => cell.Operator("gte")))
    .EditorTemplateName("ComboBoxEditor")
    .IncludeInMenu(false)
    .Width(190).Lockable(true);

     columns.Bound(c => c.VehSeriesCode).Title("Vehicle Series Code")
    .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)))
    .EditorTemplateName("ComboBoxEditor")
    .Width(160);

    columns.Bound(c => c.NumOfVehicles).Title("Number Of Vehicles")
   // .ClientTemplate("#: truncateText(data.KeyWord) #")
    .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)))
    
    .Width(160).Hidden(false).MinScreenWidth(768);

     columns.Bound(c => c.ProjDesc).Title("Project Description")
    //.ClientTemplate("#: truncateText(data.Description) #")
    .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)))
    .EditorTemplateName("ComboBoxEditor")
    .Width(250).Hidden(false).MinScreenWidth(768);

   columns.Bound(c => c.Make).Title("Make")
   // .ClientTemplate("#: truncateText(data.JobNumber) #")
    .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)))
    .EditorTemplateName("ComboBoxEditor")
    .Width(160).Hidden(false).MinScreenWidth(768);

    @* columns.Bound(c => c.Model).Title("Model")
    .ClientTemplate("#: truncateText(data.CorePartNum) #")
    .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)))
    .Width(100).Hidden(false).MinScreenWidth(768); *@

    columns.Bound(c => c.Year).Title("Year")
    //.ClientTemplate("#: truncateText(data.CoreCharge) #")
    .Filterable(ftb => ftb.Cell(cell => cell.Operator("gte")))
    //.Format("{0:C}").EditorTemplateName("Currency")
    .EditorTemplateName("ComboBoxEditor")
    .Width(150).Hidden(false).MinScreenWidth(768); 

    columns.Bound(c => c.Engine).Title("Engine")
   // .ClientTemplate("#: truncateText(data.CoreCharge) #")
    .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)))
    .EditorTemplateName("ComboBoxEditor")
    //.Format("{0:C}").EditorTemplateName("Currency")
    .Width(150).Hidden(false).MinScreenWidth(768);

    columns.Bound(c => c.Transmission).Title("Transmission")
    .EditorTemplateName("ComboBoxEditor")
   // .ClientTemplate("#: truncateText(data.CoreCharge) #")
    .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)))
    //.Format("{0:C}").EditorTemplateName("Currency")
    .Width(150).Hidden(false).MinScreenWidth(768);

    columns.Bound(c => c.Sopnumber).Title("Sop Number")
    .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)))
   
    .Width(150).Hidden(false).MinScreenWidth(768);  

   

    columns.Command(command =>
    {
    // command.Edit().Text(" ").IconClass("k-icon k-i-edit").HtmlAttributes(new { title = "Edit" }); // Edit button with tooltip
    command.Custom("Archive").Text(" ").IconClass("k-icon k-i-folder").Click("onArchiveClick").HtmlAttributes(new { title = "Archive" }); // Archive button with tooltip
    command.Custom("Delete")
        .Click("showDeleteConfirmation")
        .Text(" ")
        .IconClass("k-icon k-i-delete")
        .HtmlAttributes(new {
            @class = "text-danger",
            data_grid = "VehicleGrid",
            data_url = Url.Action("DeleteVehicle", "Vehicles"),
            data_id_field = "VehicleListId", //pk
            data_grid_type = "VehicleGrid" // static value
    });
    command.Custom("Save to Excel").Text(" ").IconClass("k-icon k-i-file-excel").Click("onSaveToExcelClick").HtmlAttributes(new { title = "Save to Excel" }); // Save to Excel button with tooltip
    command.Custom("Email Estimate").Text(" ").IconClass("k-icon k-i-email").Click("onEmailEstimateClick").HtmlAttributes(new { title = "Email Estimate" }); // Email Estimate button with tooltip
    }).Title("Actions").IncludeInMenu(false).Width(300); // Set a fixed width for the Actions column
    })

    .ToolBar(toolbar => {
    toolbar.Create().Text("Add").IconClass("k-icon k-i-plus").HtmlAttributes(new {
    title = "Add new record",
    @class = "k-primary"
    });
    toolbar.Save().SaveText("Save").CancelText("Cancel")
    .HtmlAttributes(new {
    title_save = "Save all changes",
    title_cancel = "Discard changes"
    });
    toolbar.Excel().Text("Variance Report");
    })
    .Excel(excel =>
    {
    excel.FileName("VarianceReport.xlsx")
    .Filterable(true)
    .AllPages(true);

    })
    .Editable(editable => editable.Mode(GridEditMode.InCell))
    .Events(events => events
        .ExcelExport("onExcelExport")
        .DetailExpand("onDetailExpand")
        .DetailCollapse("onDetailCollapse")
        .DataBound("onVehGridDataBound")
        .Save("onVehGridSave")
    )
    //.Pageable()
    .Pageable(p => p
    .PageSizes(new int[] {1, 10, 20, 50 }) // Dropdown options
    .Position(GridPagerPosition.Top)    

    )
    .Sortable()
    .ClientDetailTemplateId("template")
    .Resizable(r => r.Columns(true))
    .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
    .ColumnMenu(menu => menu.Enabled(true))
    .Scrollable(s => s.Height("auto"))
    .Reorderable(reorder => reorder.Columns(true))
    .DataSource(dataSource => dataSource
    .Ajax()
    .PageSize(1)
    .Model(model =>
    {

    model.Id(c => c.VehicleListId);
    model.Field(c => c.VehicleListId).Editable(false);

    })
    .Events(events =>
    {
    events.RequestEnd("onRequestEnd");
    events.Error("onDataSourceError");

    })
    .Read(read => read.Url(Url.Action("GetVehiclesView", "Vehicles")).Type(HttpVerbs.Get))
    .Create(create => create.Url(Url.Action("AddVehiclesView", "Vehicles")).Type(HttpVerbs.Post))
    .Update(update => update.Url(Url.Action("UpdateVehiclesView", "Vehicles")).Type(HttpVerbs.Post))
    .Destroy(delete => delete.Url(Url.Action("DeleteVehiclesView", "Vehicles")).Type(HttpVerbs.Post))
    )
    )
    }
    catch (Exception ex)
    {
    <div class="alert alert-danger">Error loading Vehicle Estimate: @ex.Message</div>
    }
</text>);

        tabstrip.Add().Text("Archived Vehicles")
            .Content(@<text>
    @try
    {
    @Html.Partial("_ArchivedVehicleIndex")
    }
    catch (Exception ex)
    {
    <div class="alert alert-danger">Error loading archived vehicles: @ex.Message</div>
    }
</text>);
    })
)
  JS :
grid.bind("detailInit", function (e) {
    console.error("Inside detailInit");
const vehicleListId = e.data.VehicleListId;
    parentGridId = vehicleListId;
console.error("vehicleListId : ", vehicleListId);

console.log("Detail initialization started for VehicleListId: " + e.data.VehicleListId);
var tabUrlLabourDetail = '@Url.Action("LabourDetailsPartial", "Vehicles")' + '?id=' + e.data.VehicleListId;
var tabUrlLabourHourSummary = '@Url.Action("LabourHourSummaryPartial", "Vehicles")' + '?id=' + e.data.VehicleListId;
var tabUrlMaterialCostSummary = '@Url.Action("MaterialCostSummaryPartial", "Vehicles")' + '?id=' + e.data.VehicleListId;
var tabScPartDetail = '@Url.Action("ScPartsUsedInEstimates", "Vehicles")' + '?id=' + e.data.VehicleListId;
var tabUrlNscDetail = '@Url.Action("NscDetailsPartial", "Vehicles")' + '?id=' + e.data.VehicleListId;
var tabUrlRbPartDetail = '@Url.Action("RbDetailsPartial", "Vehicles")' + '?id=' + e.data.VehicleListId;
var tabUrlTotalCost = '@Url.Action("TotalCostPartial", "Vehicles")' + '?id=' + e.data.VehicleListId;

    // Get the container for the detail template
var container = e.detailCell.find("#detail-template-" + e.data.VehicleListId);

    // Load the TabStrip structure
    container.html(`
                        <div id="tabstrip-container-${e.data.VehicleListId}">
                    <ul>
                         <li>Labour Details</li>
                        <li>Labour Hour</li>
                        <li>Material Cost</li>
                        <li>Stock Coded Parts</li>
                        <li>Non Stock Coded Parts</li>
                        <li>Rebuilt Parts</li>

                        <li>Total Cost</li>
                    </ul>

                            <div id="labour-details-content-${vehicleListId}"></div>
                            <div id="labour-hour-summary-content-${vehicleListId}"></div>
                            <div id="material-cost-summary-content-${vehicleListId}"></div>
                            <div id="material-details-content-${vehicleListId}"></div>
                            <div id="nsc-details-content-${vehicleListId}"></div>
                            <div id="rb-part-details-content-${vehicleListId}"></div>

                            <div id="total-cost-content-${vehicleListId}">"></div>
                </div>
            `);

    // Initialize the Kendo TabStrip
    console.log("Initialize tabScript ");

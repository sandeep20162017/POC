Updated Global CSS
Replace your current global CSS with this:

html
Copy
Edit
<style>

/* --- GENERAL FIELD STYLES --- */
.k-invalid {
    border-color: #e53935 !important;
    background-color: #ffebee !important;
    transition: all 0.3s ease;
}
.k-invalid-msg, .field-validation-error {
    color: #e53935;
    font-size: 12px;
    margin-top: 2px;
    display: block;
}

/* --- DIALOGS --- */
.k-dialog {
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
}
.k-dialog-titlebar {
    background: #d32f2f;
    color: #fff;
    font-weight: bold;
    padding: 12px;
}
.k-dialog-content {
    font-size: 16px;
    padding: 20px;
}
.k-dialog-buttongroup .k-button {
    border-radius: 5px;
    padding: 8px 20px;
}
.k-dialog-buttongroup .k-button:first-child {
    background-color: #43a047;
    border-color: #43a047;
}
.k-dialog-buttongroup .k-button:last-child {
    background-color: #6c757d;
    border-color: #6c757d;
}

/* --- GRID ROW STYLING --- */
.k-grid .editing-row {
    background-color: #e8f5e9 !important;
    border: 2px solid #388e3c !important;
}
.k-grid .adding-row {
    background-color: #e3f2fd !important;
    border: 2px solid #1565c0 !important;
}

/* --- REQUIRED CELL INDICATOR --- */
.k-grid td.required-cell {
    background-color: #fff0f0;
    position: relative;
}
.k-grid td.required-cell::after {
    content: "*";
    color: #d32f2f;
    font-size: 16px;
    font-weight: bold;
    position: absolute;
    top: 4px;
    right: 6px;
}

/* --- SAVE / CANCEL BUTTONS --- */
.k-grid-save-changes {
    background: #2196f3;
    color: white;
    border: 1px solid #1976d2;
    transition: all 0.3s;
}
.k-grid-cancel-changes {
    background: #ef5350;
    color: white;
    border: 1px solid #e53935;
    transition: all 0.3s;
}
.k-grid-save-changes.k-state-disabled, .k-grid-cancel-changes.k-state-disabled {
    background: #e0e0e0;
    color: #757575;
    border: 1px solid #bdbdbd;
    pointer-events: none;
}

/* Save button glow when active */
.k-grid-save-changes:not(.k-state-disabled) {
    box-shadow: 0 0 8px #2196f3;
}

/* --- COMBOBOX (or input) INVALID STYLING --- */
.invalid-combobox {
    border: 2px solid #e53935;
    background-color: #ffebee;
}

/* --- MENU STYLING --- */
.k-menu .k-link {
    padding: 10px 14px;
    font-size: 15px;
    font-weight: 500;
    color: #333;
    transition: background 0.3s, color 0.3s;
}
.k-menu .k-item.k-state-active > .k-link {
    background-color: #1565c0;
    color: white;
    border-radius: 4px;
}
.k-menu .k-item:not(.k-state-active):hover > .k-link {
    background-color: #bbdefb;
    color: #0d47a1;
}
.k-menu .k-item.k-state-focused {
    box-shadow: inset 0 0 0 2px #1565c040;
}

/* --- READ-ONLY FIELDS --- */
.field-disabled {
    background: #f5f5f5;
    color: #777;
    pointer-events: none;
    opacity: 0.7;
}

</style>
ðŸ›  Updated Global JavaScript
âœ… This now:

No popups on Add New conflict

Inline required message under cell

Save/Cancel buttons work smartly

Only 1 add at a time per grid

Multiple grids supported

javascript
Copy
Edit
$(document).ready(function () {

    function updateSaveCancelButtons(grid) {
        var hasChanges = grid && grid.dataSource.hasChanges && grid.dataSource.hasChanges();
        var saveBtn = grid.wrapper.find(".k-grid-save-changes");
        var cancelBtn = grid.wrapper.find(".k-grid-cancel-changes");

        if (hasChanges) {
            saveBtn.prop("disabled", false).removeClass("k-state-disabled");
            cancelBtn.prop("disabled", false).removeClass("k-state-disabled");
        } else {
            saveBtn.prop("disabled", true).addClass("k-state-disabled");
            cancelBtn.prop("disabled", true).addClass("k-state-disabled");
        }
    }

    function hasNewRow(grid) {
        return grid.dataSource.data().some(function (item) {
            return item.isNew && item.isNew();
        });
    }

    function markRequiredFields(grid) {
        var modelFields = grid.dataSource.options.schema.model.fields;

        grid.tbody.find("tr").each(function () {
            var row = $(this);
            row.find("td").each(function (index) {
                var fieldName = grid.columns[index] && grid.columns[index].field;
                if (fieldName && modelFields[fieldName] && modelFields[fieldName].validation && modelFields[fieldName].validation.required) {
                    $(this).addClass("required-cell");
                }
            });
        });
    }

    // On Add New click globally
    $(document).on("click", ".k-grid-add", function (e) {
        var grid = $(this).closest(".k-grid").data("kendoGrid");
        if (grid && hasNewRow(grid)) {
            e.preventDefault();
            e.stopImmediatePropagation();
            $(this).addClass("k-button-disabled"); // visually disable Add button
        }
    });

    // On Edit Mode Enter
    $(document).on("kendoGridEdit", function (e) {
        var grid = $(e.target).data("kendoGrid");
        if (grid) {
            grid.tbody.find("tr").removeClass("editing-row adding-row");

            var editingRow = $(e.target).closest("tr");
            var model = grid.dataItem(editingRow);

            if (model.isNew && model.isNew()) {
                editingRow.addClass("adding-row");
            } else {
                editingRow.addClass("editing-row");
            }

            updateSaveCancelButtons(grid);
        }
    });

    // On DataSource change (save/cancel)
    $(document).on("kendoGridDataSourceChange", function (e) {
        var grid = $(e.target).data("kendoGrid");
        if (grid) {
            updateSaveCancelButtons(grid);
        }
    });

    // On Bound (Initial Load)
    $(document).on("kendoGridBound", function (e) {
        var grid = $(e.target).data("kendoGrid");
        if (grid) {
            markRequiredFields(grid);
            updateSaveCancelButtons(grid);
        }
    });

    // Initialize Save/Cancel buttons cleanly
    $(".k-grid").each(function () {
        var grid = $(this).data("kendoGrid");
        if (grid) {
            updateSaveCancelButtons(grid);
        }
    });

});

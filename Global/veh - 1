I want to mimic the same behaviour (enable disable buttons) and user can add only one row (Disable Add when grid has changes
Pls give me full css and JS files
_LabourDetails.cshtml :
@model IEnumerable<BCES.Models.Parts.LabourDetailsRebuiltPartsViewModel>

@{
    ViewData["Title"] = "Labour Details";
}

<h6>Labour Details</h6>

@(Html.Kendo().Grid<BCES.Models.Parts.LabourDetailsRebuiltPartsViewModel>()
    //.Name((string)ViewBag.PartNum)
    .Name($"LabourDetailsGrid_{ViewBag.PartNum}")
    //visual save changes
    .Events(events => events
        .DataBound("onLabourGridDataBound")
        .SaveChanges("onLabourGridSave")
        .Edit("onGridEdit")
    )
    .Columns(columns =>
    {
        columns.Bound(c => c.Id).Title("Id").Hidden(true);
        columns.Bound(c => c.LabourDefn).Title("Labour Type").EditorTemplateName("ComboBoxEditor").Width(150)
        .HtmlAttributes(new
        {
            //data_field = "LabourDefn",
            data_partnum = ViewBag.PartNum
        }); 
        columns.Bound(c => c.CostCentre).Title("Cost Centre").EditorTemplateName("ComboBoxEditor").Width(50);
        columns.Bound(c => c.Task).Title("Labour Task").EditorTemplateName("ComboBoxEditor").Width(100);
        columns.Bound(c => c.Usage).Title("Percent Usage").Width(50);
      //  columns.Bound(c => c.TimeAddition).Title("Time").Format("{0:N2}");
       // columns.Bound(c => c.RatePerHour).Title("Rate Per Hour").Format("{0:N2}");
        //columns.Bound(c => c.HrsReqd).Title("Hrs Reqd").Format("{0:N2}");
        columns.Bound(c => c.LabourHrs).Title("Labour Hrs").Width(50);
        columns.Bound(c => c.LabourMins).Title("Labour Mins").Width(50);

       // columns.Bound(c => c.DateRevised).Title("Date Revised");
       // columns.Command(command => command.Edit()).Title("Actions");
        columns.Command(command =>
        {
            if (@ViewBag.RoleId == 1)
            {
                // command.Edit().Text(" ").IconClass("k-icon k-i-edit").HtmlAttributes(new { title = "Edit" }); // Edit button with tooltip
            }
            if (@ViewBag.RoleId == 1)
            {

                command.Custom("Delete")
                 .Click("showDeleteConfirmation")
                 .Text(" ")
                 .IconClass("k-icon k-i-delete")
                 .HtmlAttributes(new
                 {
                     @class = "text-danger",
                     title = "Delete",
                     data_grid = $"LabourDetailsGrid_{ViewBag.PartNum}",
                     data_url = Url.Action("DeleteLabourDetail", "LabourDetails"),
                     data_id_field = "Id",
                     data_grid_type = "VehicleGrid"
                 });
            }
        }).Width(100);
    })
    .ToolBar(toolbar =>
    {
        if (@ViewBag.RoleId == 1)
        {
            toolbar.Create();
            toolbar.Save();
        }
    })
    .Editable(editable => editable.Mode(GridEditMode.InCell))
    .Pageable()
    .Sortable()
    .Resizable(r => r.Columns(true))
    .Scrollable(s => s.Height("auto"))
    .Resizable(r => r.Columns(true))
    .Scrollable()
    .DataSource(dataSource => dataSource
        .Ajax()
        .Batch(true)
        .ServerOperation(false)
        .Model(model =>
        {
            model.Id(c => c.Id); 
            model.Field(c => c.Id);
        })
        .Events(events =>
        {
            events.RequestEnd("onRequestEnd"); 
            events.Error("onDataSourceError");
            
        })


        .Read(read => read.Url(Url.Action("GetLabourDetails", "LabourDetails") + "?id=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Get))
        .Create(create => create.Url(Url.Action("CreateLabourDetail", "LabourDetails") + "?id=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Post))
        
            .Update(update => update.Url(Url.Action("UpdateLabourDetail", "LabourDetails") + "?id=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType)
            .Type(HttpVerbs.Post))
            
            
        .Destroy(delete => delete.Url(Url.Action("DeleteLabourDetail", "LabourDetails") + "?id=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Post))
    )
)
@section Scripts {
    
}
_RbPartsUsed.cshtml :
@model IEnumerable<BCES.Models.Parts.RebuiltPartsViewModel>

@{
    ViewData["Title"] = "Rebuilt Parts Used";
}

<h6>Rebuilt Parts Used</h6>

@(Html.Kendo().Grid<BCES.Models.Parts.RebuiltPartsViewModel>()
   
    .Name($"RbPartsMaterialDetailsRebuiltPartsGrid")
    .Columns(columns =>
    {
        //columns.Bound(c => c.RebuiltStockNum).Title("Rebuilt Number").Width(60);
        columns.Bound(c => c.Id).Title("Id").Hidden(true);
        columns.Bound(c => c.RebuiltStockNum).Title("Rebuilt Number").EditorTemplateName("RbComboBox").Filterable(ftb => ftb.Cell(cell => cell.Operator("gte"))).Width(100);
        columns.Bound(c => c.KeyWord).Title("KeyWord").Width(50);
        columns.Bound(c => c.Description).Title("Description").Width(70);
        
        columns.Bound(c => c.MmsStockCode).Title("MMS Stock Code").EditorTemplateName("ComboBoxEditor").Width(70);
       @*  columns.Command(command =>
       {)
            command.Custom(""Populate Details").Click("refreshRbPartDetails").IconClass("k-i-reload").HtmlAttributes(new { @class = "k-button k-button-icontext" });
           command.Custom("Populate Details").Click("refreshRbPartDetails").IconClass("k-i-reload").HtmlAttributes(new { @class = "k-button k-button-icontext" });

       }).Width(60); *@
        columns.Bound(c => c.CoreCharge).Title("Unit Cost").Width(60);
        columns.Bound(c => c.Qty).Title("Qty").Width(40);
       
        columns.Bound(c => c.Percentage).Title("Percentage").Width(50);
       @*  columns.Bound(c => c.TotalCost).Title("TotalCost").Width(60); *@
        
        
        // columns.Bound(c => c.DateRevised).Title("Date Revised");
        //columns.Command(command => command.Edit()).Title("Actions");
        columns.Command(command =>
      {
          if (@ViewBag.RoleId == 1)
          {
              // command.Edit().Text(" ").IconClass("k-icon k-i-edit").HtmlAttributes(new { title = "Edit" }); // Edit button with tooltip
          }
          if (@ViewBag.RoleId == 1)
          {

              command.Custom("Delete")
               .Click("showDeleteConfirmation")
               .Text(" ")
               .IconClass("k-icon k-i-delete")
               .HtmlAttributes(new
               {
                   @class = "text-danger",
                   title = "Delete",
                   data_grid = $"RbPartsMaterialDetailsRebuiltPartsGrid",
                   data_url = Url.Action("DeleteRbPartsUsedInRbtParts", "RbPartsUsedInEstimates"),
                   data_id_field = "Id",
                   data_rebuiltstocknum_field = "RebuiltStockNum", //ssk 4
                 //  data_mmsstockcode_field = "parentPartId",
                   data_grid_type = "RbPartGrid" 
               });
          }
      }).Width(100);
    })

    .ToolBar(toolbar =>
    {
        if (@ViewBag.RoleId == 1)
        {
            toolbar.Create();
            toolbar.Save();
        }
    })
    .Editable(editable => editable.Mode(GridEditMode.InCell).Enabled(true)) //ssk7 - Disable column on edit
    .Events(events => events.Edit("onEditRbParts")) //ssk7 - Disable column on edit
    
    .Pageable()
    .Sortable()
    .Resizable(r => r.Columns(true))
    // .Scrollable()
    .DataSource(dataSource => dataSource
        .Ajax()
        .Events(events => events
            .Change("onRbDataSourceChange")      // ssk6 -disable save when no changes
            .RequestEnd("onRbRequestEnd")         //ssk6
        )
       
        .Model(model =>
        {
            model.Id(c => c.Id);
            model.Field(c => c.Id);
            model.Field(c => c.RebuiltStockNum);
        })

        .Read(read => read.Url(Url.Action("GetRbPartsUsedInEstimates", "RbPartsUsedInEstimates") + "?id=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Get))
        .Create(create => create.Url(Url.Action("CreateRbPartsUsedInEstimates", "RbPartsUsedInEstimates") + "?id=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Post))
        .Update(update => update.Url(Url.Action("UpdateRbPartsUsedInEstimates", "RbPartsUsedInEstimates") + "?id=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Post))
        .Destroy(delete => delete.Url(Url.Action("DeleteRbPartsUsedInRbtParts", "RbPartsUsedInEstimates") + "?rebuiltPartNum=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Post))
    )
)
_NscPartsUsed.cshtml :
 @model IEnumerable<BCES.Models.Parts.NscPartsUsedViewModel>

@{
    ViewData["Title"] = "Non Stock Coded Parts Details";
    var nscGridName = $"NScPartsMaterialDetailsRebuiltPartsGrid_{ViewBag.PartNum}"; /* save gridname in hidden field for JS */
}

<h6>Non Stock Coded Parts Used</h6>
<input type="hidden" id="nscGridNameField" value="@nscGridName" /> @* save gridname in hidden field for JS *@
@(
Html.Kendo().Grid<BCES.Models.Parts.NscPartsUsedViewModel>()
                
                @* .Name($"NscPartsMaterialDetailsRebuiltPartsGrid_{ViewBag.PartNum}") *@
                .Name($"NscPartsMaterialDetailsRebuiltPartsGrid")
                .Columns(columns =>
                {
                    columns.Bound(c => c.OrigSuppNum).Title("Supplier Number").Filterable(ftb => ftb.Cell(cell => cell.Operator("gte"))).EditorTemplateName("ComboBoxEditor").Width(60);
                   @*  columns.Command(command =>
                   {
                       command.Custom("Populate Details").Click("refreshNscPartDetails").IconClass("k-i-reload").HtmlAttributes(new { @class = "k-button k-button-icontext" });

                   }).Width(60); *@
                    columns.Bound(c => c.OrigSupplierName).Title("Supplier Name").Filterable(ftb => ftb.Cell(cell => cell.Operator("Contains").SuggestionOperator(FilterType.Contains))).EditorTemplateName("NscSupplierComboBox").Width(50);

                    //  columns.Bound(c => c.OemPartCost).Title("Unit Cost").Format("{0:N2}").Width(30);
                    columns.Bound(c => c.CC).Title("CC").Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).EditorTemplateName("ComboBoxEditor").Width(40); ;
                    columns.Bound(c => c.Qty).Title("Qty").Width(30);                    
                    columns.Bound(c => c.Percentage).Title("Percentage").HtmlAttributes(new { data_field = "Percentage"}).Width(30);
                    columns.Bound(c => c.OemPartCost).Title("Part Cost").Width(30);
                    columns.Bound(c => c.CoreCost).Title("Core Cost").Width(30);
                    @* columns.Command(command =>
                    {
                        command.Custom("Re-Calculate")
                            .Click("recalculateTotalCost")
                            .HtmlAttributes(new { @class = "k-grid-recalculate" });
                    }).HtmlAttributes( new { data_field = "Commands" }).Width(80);

                    columns.Bound(c => c.TotalCost).Title("Total Cost").Width(30); *@
                    columns.Bound(c => c.Description).Title("Description").Width(50);
                    columns.Bound(c => c.KeyWord).Title("KeyWord").Width(50);
                    // columns.Bound(c => c.DateRevised).Title("Date Revised");
                    // columns.Command(command => command.Edit()).Title("Actions");
                    columns.Command(command =>
        {
            if (@ViewBag.RoleId == 1)
            {
                // command.Edit().Text(" ").IconClass("k-icon k-i-edit").HtmlAttributes(new { title = "Edit" }); // Edit button with tooltip
            }
            if (@ViewBag.RoleId == 1)
            {

                command.Custom("Delete")
                 .Click("showDeleteConfirmation")
                 .Text(" ")
                 .IconClass("k-icon k-i-delete")
                 .HtmlAttributes(new
                 {
                     @class = "text-danger",
                     title = "Delete",
                     data_grid = $"NscPartsMaterialDetailsRebuiltPartsGrid",
                     data_url = Url.Action("DeleteNscPartsUsedInEstimates", "NscPartsUsedInEstimates"),
                     data_id_field = "id",
                     //  data_mmsstockcode_field = "parentPartId",
                     data_grid_type = "NSCPartGrid"
                 });
            }
        }).Width(100);
                })

                .Events (events => 
                {
                    //events.Edit("onEdit") ;
                    //events.Save("onSave");
                    events.CellClose("onCellClose");
                    events.SaveChanges("onSaveChanges");

                })

     .ToolBar(toolbar =>
    {
        if (@ViewBag.RoleId == 1)
        {
            toolbar.Create();
            toolbar.Save();
        }
    })
    .Editable(editable => editable.Mode(GridEditMode.InCell))
    .Pageable()
    .Sortable()
    .Resizable(r => r.Columns(true))
   // .Scrollable()
    .DataSource(dataSource => dataSource
        .Ajax()
        .Batch(true)
        .ServerOperation(false)
        .Model(model =>
        {
            model.Id(c => c.OrigSuppNum);
            model.Field(c => c.OrigSupplierName).Editable(true);
            model.Field(c => c.OrigSuppNum).Editable(true);
            model.Field(c => c.OemPartCost).Editable(true);
           // model.Field(c => c.TotalCost).Editable(true);
         
          //  model.Field("needsRecalculation", typeof(bool)).DefaultValue(false);
        })
        .Events(events =>
        {
                      
            events.RequestEnd("onRequestEnd");
            events.Error("onDataSourceError");
        })

        .Read(read => read.Url(Url.Action("GetNscPartsUsedInEstimates", "NscPartsUsedInEstimates") + "?id=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Get))
       
        .Create(create => create.Url(Url.Action("CreateNscPartsUsedInEstimatess", "NscPartsUsedInEstimates") + "?id=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Post))
        .Update(update => update.Url(Url.Action("UpdateNscPartsUsedInEstimates", "NscPartsUsedInEstimates") + "?id=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Post))
        .Destroy(delete => delete.Url(Url.Action("DeleteNscPartsUsedInRbtParts", "NscPartsUsedInEstimates") + "?rebuiltPartNum=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Post))
    )

)

_ScPartsUsed.cshtml
    @model IEnumerable<BCES.Models.Parts.StockCodedPartsViewModel>

@{
    ViewData["Title"] = "Stock Coded Parts Details";
    var scGridName = $"ScPartsMaterialDetailsRebuiltPartsGrid_{ViewBag.PartNum}";
    
}
<input type="hidden" id="scGridNameField" value="@scGridName" /> @* save gridname in hidden field for JS *@
<h6>Stock Coded Parts Used</h6>

@(
Html.Kendo().Grid<BCES.Models.Parts.StockCodedPartsViewModel>()    
     .Name($"ScPartsMaterialDetailsRebuiltPartsGrid_{ViewBag.PartNum}")    
    .Columns(columns =>
    {
       // columns.Bound(c => c.MMSStockCode).Title("Stock Code").IncludeInMenu(false).EditorTemplateName("ComboBoxEditor").Width(70);
        columns.Bound(c => c.MMSStockCode)
                        .Title("Stock Code")
                        .HtmlAttributes(new { @class = "stock-code-cell", data_field = "MMSStockCode" })
                        .IncludeInMenu(false)
                        .EditorTemplateName("ComboBoxEditor")
                        .Width(70);
      @*  columns.Command(command =>
        {
            command.Custom("Populate Details").Click("refreshScPartDetails").IconClass("k-i-reload").HtmlAttributes(new { @class = "k-button k-button-icontext" });

        }).Width(60); *@
        //  columns.Bound(c => c.PartType).Title("Part Type");
        //  columns.Bound(c => c.Keyword).Title("Keyword").Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).EditorTemplateName("AutoCompleteEditor");
        //   columns.Bound(c => c.DetailedDesc).Title("Part Description");
        //  columns.Bound(c => c.UnitCost).Title("Unit Cost").Width(30);
        columns.Bound(c => c.Qty).Title("Qty").Width(20);
        columns.Bound(c => c.Percentage).Title("%").Width(50);
        columns.Bound(c => c.LinkCode).Hidden(true);
        columns.Bound(c => c.CC).Title("CC").Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).EditorTemplateName("ComboBoxEditor").Width(40); ;
             
        columns.Bound(c => c.CoreCost).Title("Core Cost").Format("{0:N2}").Width(100); 
     //   columns.Bound(c => c.TotalCost).Title("Total Cost").Format("{0:N2}").Width(100); ;
      
       
        // columns.Bound(c => c.DateRevised).Title("Date Revised");
       @*  columns.Command(command =>
        {
            if (@ViewBag.RoleId == 1)
            {
               // command.Edit().Text(" ").IconClass("k-icon k-i-edit").HtmlAttributes(new { title = "Edit" }); // Edit button with tooltip
            }
            if (@ViewBag.RoleId == 1)
            {

                command.Destroy().Text(" ").IconClass("k-icon k-i-delete").HtmlAttributes(new { title = "Delete" }); // Delete button with tooltip
            }
        }).Width(100); *@
        columns.Command(command =>
        {
            if (@ViewBag.RoleId == 1)
            {
                // command.Edit().Text(" ").IconClass("k-icon k-i-edit").HtmlAttributes(new { title = "Edit" }); // Edit button with tooltip
            }
            if (@ViewBag.RoleId == 1)
            {

                command.Custom("Delete")
                 .Click("showDeleteConfirmation")
                 .Text(" ")
                 .IconClass("k-icon k-i-delete")
                 .HtmlAttributes(new
                 {
                     @class = "text-danger",
                     title = "Delete",
                     data_grid = $"ScPartsMaterialDetailsRebuiltPartsGrid_{ViewBag.PartNum}",
                     data_url = Url.Action("DeleteScPartsUsedInEstimates", "ScPartsUsedInEstimates"),
                     data_id_field = "id",
                     //  data_mmsstockcode_field = "parentPartId",
                     data_grid_type = "SCPartGrid"
                 });
            }
        }).Width(100);
    })
  
     .ToolBar(toolbar =>
    {
        if (@ViewBag.RoleId == 1)
        {
            toolbar.Create();
            toolbar.Save();
        }
    })
    .Editable(editable => editable.Mode(GridEditMode.InCell))
    .Pageable()
    .Sortable()
    .Resizable(r => r.Columns(true))
    //.Scrollable()
    .DataSource(dataSource => dataSource
        .Ajax()
        .Batch(true)
        .ServerOperation(false)
        .Model(model =>
        {
            model.Id(c => c.MMSStockCode); 
            model.Field(c => c.MMSStockCode);
         //   model.Field(c => c.PartType).Editable(false);
         //   model.Field(c => c.DetailedDesc).Editable(false);
        })

        .Events(events =>
        {
            events.RequestEnd("onRequestEnd");
            events.Error("onDataSourceError");
        })

        .Read(read => read.Url(Url.Action("GetScPartsUsedInEstimates", "ScPartsUsedInEstimates") + "?id=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Get))
        .Create(create => create.Url(Url.Action("CreateScPartsUsedInEstimates", "ScPartsUsedInEstimates") + "?id=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Post))
        .Update(update => update.Url(Url.Action("UpdateScPartsUsedInEstimates", "ScPartsUsedInEstimates") + "?id=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Post))
        .Destroy(delete => delete.Url(Url.Action("DeleteScPartsUsedInEstimates", "ScPartsUsedInEstimates") + "?id=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Post))
    )
)

@(Html.Kendo().Dialog()
    .Name("partDetailsDialog")
    .Title("Part Details")
    .Width(400)
    .Modal(true)
    .Visible(false)
    .Actions(actions =>
    {
        actions.Add().Text("Close").Primary(true);
    })
)




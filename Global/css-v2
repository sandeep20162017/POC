🎨 FULL GLOBAL CSS (for Telerik ASP.NET Core Grid UI)
💡 Drop this into your site.css or _Layout.cshtml <style> block.

css
Copy
Edit
/* === REQUIRED FIELD STYLING === */
.k-grid td.required-cell {
    background-color: #fff0f0 !important;
    position: relative;
}
.k-grid td.required-cell::after {
    content: "*";
    color: red;
    font-size: 16px;
    font-weight: bold;
    position: absolute;
    top: 4px;
    right: 6px;
}
.k-invalid-msg, .validation-message {
    color: red;
    font-size: 12px;
    margin-top: 2px;
    display: block;
}

/* === GRID ROW STYLING === */
.k-grid .editing-row {
    background-color: #e8f5e9 !important;
    border-left: 3px solid #2e7d32 !important;
    transition: background 0.3s ease;
}
.k-grid .adding-row {
    background-color: #e3f2fd !important;
    border-left: 3px solid #1565c0 !important;
    transition: background 0.3s ease;
}
.k-grid tr.k-grid-edit-row.new-row td {
    background-color: #e3f2fd !important;
}

/* === BUTTON STYLING === */
.k-grid-save-changes {
    background-color: #2196f3 !important;
    color: white !important;
    border: 1px solid #1976d2 !important;
    transition: all 0.3s;
}
.k-grid-save-changes:not(.k-state-disabled) {
    box-shadow: 0 0 6px #2196f3;
}
.k-grid-save-changes.k-state-disabled {
    background: #e0e0e0 !important;
    color: #757575 !important;
    border: 1px solid #bdbdbd !important;
    pointer-events: none;
    cursor: not-allowed;
}
.k-grid-cancel-changes {
    background-color: #ef5350 !important;
    color: white !important;
    border: 1px solid #d32f2f !important;
}
.k-grid-cancel-changes.k-state-disabled {
    background: #e0e0e0 !important;
    color: #757575 !important;
    border: 1px solid #bdbdbd !important;
    pointer-events: none;
    cursor: not-allowed;
}

/* === MENU STYLING === */
.k-menu .k-link {
    padding: 10px 14px;
    font-size: 15px;
    font-weight: 500;
    color: #212529;
    transition: background-color 0.3s ease, color 0.3s ease;
}
.k-menu .k-item.k-state-active > .k-link,
.k-menu .k-item.k-state-selected > .k-link {
    background-color: #007bff !important;
    color: #fff !important;
    border-radius: 4px;
    font-weight: bold;
}
.k-menu .k-item:not(.k-state-active):hover > .k-link {
    background-color: #e2e6ea !important;
    color: #0056b3 !important;
    border-radius: 4px;
}

/* === DISABLED FIELD === */
.field-disabled {
    background-color: #eeeeee !important;
    color: #555 !important;
    pointer-events: none;
    opacity: 0.7;
    border: 1px solid #cccccc !important;
}
🧠 FULL GLOBAL JAVASCRIPT
💡 Place this in your site.js or directly in _Layout.cshtml <script> tag.

javascript
Copy
Edit
$(document).ready(function () {

    function updateSaveCancelButtons(grid) {
        var hasChanges = grid.dataSource.hasChanges();
        var save = grid.wrapper.find(".k-grid-save-changes");
        var cancel = grid.wrapper.find(".k-grid-cancel-changes");

        if (hasChanges) {
            save.prop("disabled", false).removeClass("k-state-disabled");
            cancel.prop("disabled", false).removeClass("k-state-disabled");
        } else {
            save.prop("disabled", true).addClass("k-state-disabled");
            cancel.prop("disabled", true).addClass("k-state-disabled");
        }
    }

    function hasNewRow(grid) {
        return grid.dataSource.data().some(function (item) {
            return item.isNew && item.isNew();
        });
    }

    function markRequiredColumns(grid) {
        var columns = grid.columns;
        var schema = grid.dataSource.options.schema.model.fields;

        columns.forEach(function (col, idx) {
            if (schema[col.field] && schema[col.field].validation && schema[col.field].validation.required) {
                var th = grid.thead.find("th").eq(idx);
                if (!th.hasClass("required-header")) {
                    th.addClass("required-cell");
                }
            }
        });
    }

    // Global: Block multiple new rows
    $(document).on("click", ".k-grid-add", function (e) {
        var grid = $(this).closest(".k-grid").data("kendoGrid");
        if (hasNewRow(grid)) {
            e.preventDefault();
            e.stopImmediatePropagation();
        }
    });

    // On grid edit
    $(document).on("kendoGridEdit", function (e) {
        var grid = $(e.target).data("kendoGrid");
        var editingRow = $(e.target).closest("tr");
        grid.tbody.find("tr").removeClass("editing-row adding-row");

        if (grid.dataItem(editingRow).isNew && grid.dataItem(editingRow).isNew()) {
            editingRow.addClass("adding-row");
        } else {
            editingRow.addClass("editing-row");
        }

        updateSaveCancelButtons(grid);
    });

    // On data change
    $(document).on("kendoGridDataSourceChange", function (e) {
        var grid = $(e.target).data("kendoGrid");
        updateSaveCancelButtons(grid);
    });

    // On grid bound
    $(document).on("kendoGridBound", function (e) {
        var grid = $(e.target).data("kendoGrid");
        markRequiredColumns(grid);
        updateSaveCancelButtons(grid);
    });

    // Tooltip on overflow
    $(document).on("mouseenter", ".k-grid td", function () {
        var cell = $(this);
        var text = cell.text().trim();
        if (this.scrollWidth > cell.innerWidth()) {
            cell.attr("title", text);
        } else {
            cell.removeAttr("title");
        }
    });
});
✅ Required Column Syntax (ASP.NET Core Razor)
In your Razor Grid definition (.Model() inside .DataSource()), do this:

csharp
Copy
Edit
.Model(model =>
{
    model.Id(p => p.Id); // primary key
    model.Field(p => p.Name).Editable(true).Validation(v => v.Required(true));
    model.Field(p => p.Email).Validation(v => v.Required(true));
    model.Field(p => p.Status); // not required
})
✔️ This tells the global script and styles which fields are required, and everything just works — asterisk, red background, and validation.

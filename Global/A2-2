Let's fix the visibility issues while maintaining proper grid functionality. Here's the corrected solution:

CSS (grid-controls.css):

css
/* Grid Toolbar Button States */
.k-grid-toolbar .k-button.k-grid-save-changes,
.k-grid-toolbar .k-button.k-grid-cancel-changes {
    transition: opacity 0.3s ease;
}

.k-grid-toolbar .k-button[disabled],
.k-grid-toolbar .k-button.k-state-disabled {
    opacity: 0.5;
    cursor: not-allowed;
    background-color: #f5f5f5 !important;
    border-color: #ddd !important;
    color: #999 !important;
}

/* Unsaved Changes Indicator */
.k-tabstrip-items .has-unsaved {
    position: relative;
    color: #d9534f !important;
}

.k-tabstrip-items .has-unsaved::after {
    content: "â€¢";
    position: absolute;
    right: 8px;
    top: 6px;
    color: #d9534f;
    font-size: 1.2em;
}

/* Ensure grid visibility in tabs */
.k-tabstrip-content {
    overflow: visible !important;
}

.k-tabstrip-content .k-grid {
    visibility: visible !important;
}
JavaScript (grid-management.js):

javascript
$(document).ready(function () {
    // Initialize main grid first
    const mainGrid = $('#VehicleGrid').data('kendoGrid');
    if (mainGrid) {
        initGridStateManagement(mainGrid);
        mainGrid.bind('detailInit', function (e) {
            initDetailGrid(e.detailCell);
        });
    }

    // Initialize tabstrip after grid
    const mainTabStrip = $('#vehicleTabStrip').data('kendoTabStrip');
    if (mainTabStrip) {
        initTabstripGrids(mainTabStrip);
    }

    // Initial button state
    setTimeout(() => disableAllGridControls(), 100);
});

// Core Functions
function initTabstripGrids(tabStrip) {
    if (!tabStrip || !tabStrip.items) return;

    // Initialize existing tabs
    Array.from(tabStrip.items()).forEach(item => {
        initTabGrids(item.contentElement);
    });

    // Handle tab activations
    tabStrip.unbind('activate').bind('activate', function (e) {
        setTimeout(() => {
            initTabGrids(e.contentElement);
            disableAllGridControls();
        }, 100);
    });
}

function disableAllGridControls() {
    // Main grids
    $('.k-grid').each(function () {
        const grid = $(this).data('kendoGrid');
        if (grid) toggleGridButtons(grid, false);
    });

    // Tabstrip grids
    $('.k-tabstrip').each(function () {
        const tabStrip = $(this).data('kendoTabStrip');
        if (tabStrip && tabStrip.items) {
            Array.from(tabStrip.items()).forEach(item => {
                initTabGrids(item.contentElement);
            });
        }
    });
}

function initGridStateManagement(grid) {
    if (!grid) return;

    // Initialize change tracking
    grid.dataSource.unbind('change').bind('change', function () {
        handleGridChanges(grid);
    });

    // Initial state
    toggleGridButtons(grid, grid.dataSource.hasChanges());
    
    // Force redraw for visibility
    setTimeout(() => grid.refresh(), 50);
}

function initTabGrids(container) {
    const $container = $(container);
    $container.find('.k-grid').each(function () {
        const grid = $(this).data('kendoGrid');
        if (grid) {
            initGridStateManagement(grid);
            grid.wrapper.show().css('visibility', 'visible');
        }
    });
}

// Rest of the functions remain the same as previous version
// (handleGridChanges, toggleGridButtons, initDetailGrid)

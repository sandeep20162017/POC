You are ASP.NET core 8.0 expert. My web (ASP.NET core 8.0) application needs to handle authentication and authorization. Below is my staup file.
When I run the application it always goes to https://localhost/Account/Login page.
I want to change the statup page to controller=Home, action=Index, instead of account/login page.
Remember I am using ASP.NET Core 8.0. Razor pages.
Startup.cshtml :
using BCES.Data;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Cors.Infrastructure;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json.Serialization;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using BCES.MiddleWare;
using Telerik.Reporting.Cache.File;
using Telerik.Reporting.Services;
using Telerik.Reporting.Services.Engine;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Telerik.Reporting.Cache.File;
using Telerik.Reporting.Services;
using Telerik.Reporting.Services.AspNetCore;
using Telerik.Reporting;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc.Authorization;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.DependencyInjection.Extensions;
using BCES.Controllers.Parts;
using BCES.Controllers.Base;

namespace BCES
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }
       
        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {

            //services.AddMvcCore().AddAuthorization(); //ssk

            // Add CORS support
            services.AddCors(options =>
            {
                options.AddPolicy("AllowAll", policy =>
                {
                    policy.AllowAnyOrigin()
                          .AllowAnyMethod()
                          .AllowAnyHeader();
                });
            });

            //ssk start
            services.AddMvc(config =>
            {
                var policy = new AuthorizationPolicyBuilder()
                    .RequireAuthenticatedUser()
                    .Build();

                config.Filters.Add(new AuthorizeFilter(policy));
            });

            //start ssk

            services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)
            .AddCookie(options =>
            {
                options.AccessDeniedPath = new PathString("/Home/Unauthorized");
            });

            services.AddAuthorization(options =>
           {
               options.AddPolicy("ADRoleOnly", SiteAccessPolicy(Configuration["SecuritySettings:ADGroup"].Split(";")));

           });
            
            //end ssk

            services.AddMvc(config =>
            {
                var policy = new AuthorizationPolicyBuilder()
                    .RequireAuthenticatedUser()
                    .Build();

                config.Filters.Add(new AuthorizeFilter(policy));
            });

            //ssk end
            // Add framework services.
            services
                .AddControllersWithViews()
                
                .AddRazorOptions(options =>
                {
                    options.ViewLocationFormats.Add("Views/Admin/{0}.cshtml");
                })
                // Maintain property names during serialization. See:
                // https://github.com/aspnet/Announcements/issues/194
                .AddNewtonsoftJson(options => options.SerializerSettings.ContractResolver = new DefaultContractResolver()); 
            services.AddScoped<ContextApplicationDB>();
            services.AddSingleton<DapperContext>();

           
            services.AddLogging();
            services.AddScoped<DapperContext>(); // Register DapperContext

            // Add Kendo UI services to the services container
            services.AddKendo();
            ////
            services.AddRazorPages().AddNewtonsoftJson();

            //var reportsPath = Path.Combine(Directory.GetCurrentDirectory(), "Reports");

            ////Reports
            //// Configure dependencies for ReportsController.
            //services.TryAddSingleton<IReportServiceConfiguration>(sp =>
            //new ReportServiceConfiguration
            //{
            //    ReportingEngineConfiguration = sp.GetService<IConfiguration>(),
            //    HostAppId = "Html5DemoAppCore",
            //    Storage = new FileStorage(),
            //    ReportSourceResolver = new UriReportSourceResolver(
            //        System.IO.Path.Combine(sp.GetService<IWebHostEnvironment>().ContentRootPath, "Reports")),
               
            //});

            //Add Session
            services.AddSession(options =>
            {
                options.IdleTimeout = TimeSpan.FromMinutes(30); // Set session timeout
                options.Cookie.HttpOnly = true; // Ensure the cookie is accessible only through HTTP
                options.Cookie.IsEssential = true; // Make the session cookie essential
                options.Cookie.SameSite = SameSiteMode.Lax;
                
            });

            // Add IHttpContextAccessor
            services.AddHttpContextAccessor();

            //Add Transient controllers
            services.AddTransient<ExportController>();
            services.AddTransient<RebuiltPartsController>();
            services.AddTransient<BusesController>();
            services.AddTransient<LabourDetailsController>();


            services.AddDistributedMemoryCache(); //ssk
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();

                
            }
            else
            {
                app.UseExceptionHandler("/Home/Error");
                // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
                app.UseHsts();
            }


            app.UseSession();

            // Use custom middleware to set session variables
           // app.UseMiddleware<RoleSessionMiddleware>();

            app.UseHttpsRedirection();
            app.UseStaticFiles();

            app.UseRouting();
            app.UseAuthentication(); //ssk
            app.UseAuthorization();

            

            // Apply CORS
            app.UseCors("AllowAll");
            
            //app.UseTelerikReporting();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();

                endpoints.MapControllerRoute(
                    name: "default",
                    pattern: "{controller=Home}/{action=Index}/{id?}");
            });
        }
        public static AuthorizationPolicy SiteAccessPolicy(string[] role)
        {

            var policy = new AuthorizationPolicyBuilder()
                // .AddRequirements(new ApiRequirement(role))
                .RequireRole(role)
                .RequireAuthenticatedUser()
                .Build();

            return policy;
        }

    }
}

Help fix error in the below logs
@model object

@{
    var fieldName = ViewData.TemplateInfo.GetFullHtmlFieldName("");
    var columnLockMap = ViewData["LockMap"]?.ToString() ?? "";
}

@(Html.Kendo().ComboBox()
    .Name(fieldName)
    .DataTextField("Value")
    .DataValueField("Value")
    .Filter(FilterType.Contains)
    //.Placeholder("Search...")
    .AutoBind(false)
   // .MinLength(2)
   // .EnforceMinLength(true)
    
    .HtmlAttributes(new Dictionary<string, object>
    {
        { "name", fieldName },
        { "data-column", fieldName },
        { "data-role", "combobox" },
        { "data-lock-map", columnLockMap },
        { "class", "auto-lock-column"  + " required-cell"},
        {"required", "required"}
    })
    .Events(e =>
    {
      //  e.DataBound("onComboBoxDataBound");
       // e.Change("onComboBoxChange");
    })
    .DataSource(source =>
    {
        source.Read(read =>
        {
            read.Url(Url.Action("GetAutoCompleteData", "AutoComplete"))
                .Type(HttpVerbs.Get)
                .Data("getComboBoxParams");
        })
        .ServerFiltering(true);
    })
    .Template("#= Text #")
)
VehDescriptionCombobox.cshtml :
@model object

@{
    var fieldName = ViewData.TemplateInfo.GetFullHtmlFieldName("");
    var columnLockMap = ViewData["LockMap"]?.ToString() ?? "";
}

@(Html.Kendo().ComboBox()
    .Name(fieldName)
    .DataTextField("Value")
    .DataValueField("Value")
    .Filter(FilterType.Contains)
    //.Placeholder("Search...")
    .AutoBind(false)
   // .MinLength(2)
   // .EnforceMinLength(true)
    
    .HtmlAttributes(new Dictionary<string, object>
    {
        { "name", fieldName },
        { "data-column", fieldName },
        { "data-role", "combobox" },
        { "data-lock-map", columnLockMap },
        { "class", "auto-lock-column"  + " required-cell"},
        {"required", "required"}
    })
    .Events(e =>
    {
      //  e.DataBound("onComboBoxDataBound");
       // e.Change("onComboBoxChange");
    })
    .DataSource(source =>
    {
        source.Read(read =>
        {
            read.Url(Url.Action("GetAutoCompleteData", "AutoComplete"))
                .Type(HttpVerbs.Get)
                .Data("getComboBoxParams");
        })
        .ServerFiltering(true);
    })
    .Template("#= Text #")
)
_VehPopUp.cshtml :
@model BCES.Models.Vehicle.VehicleViewModel

<div class="scparts-popup-style">
   @*  <div class="section-title">@(Model.VehicleListId == 0 ? "Add New Vehicle Estimate VehPOp" : $"Estimate #{Model.VehicleListId}")</div> *@
    <div class="popup-action">
        <button id="btnSave" class="k-button k-primary" type="button">Update</button>
        <button id="btnCancelVehicle" class="k-button" type="button">Cancel</button>
       @*  <button id="btnSave" type="button">
            <span class="vehicle-btn-icon">✓</span> Save
        </button>
        <button id="btnCancelVehicle"  type="button">
            <span class="vehicle-btn-icon">✕</span> Cancel
        </button> *@
    </div>
</div>

<div class="form-container">
    <form id="vehicleForm">
        @Html.HiddenFor(m => m.VehicleListId)
        @Html.Hidden("formMode", Model.VehicleListId == 0 ? "Add" : "Edit", new { id = "formMode" })

        <!-- Vehicle Information Section -->
        <div class="section-title">Vehicle Information</div>

        <!-- Row 1: Estimate #, Vehicle Series, Quantity -->
        <div class="form-row">
           @*  <div class="form-group  double-width">
                @Html.LabelFor(m => m.VehicleListId, "Estimate #", new { @class = "form-label" })
                @Html.EditorFor(m => m.VehicleListId, new { htmlAttributes = new { @class = "k-textbox", style = "width:100%" } })

            </div> *@

            <div class="form-group  double-width">
                @Html.LabelFor(m => m.VehSeriesCode, "Vehicle Series", new { @class = "form-label required-label" })
                @Html.EditorFor(m => m.VehSeriesCode, "ComboBoxEditor", new
                    {
                        LockMap = "",
                        AdditionalAttributes = new Dictionary<string, object> {
                { "class", "form-control required-cell" },
                { "required", "required" }
                }
                    })
            </div>

            <div class="form-group  double-width">
                @Html.LabelFor(m => m.NumOfVehicles, "# Of Vehicles", new { @class = "form-label required-label" })
                @(Html.Kendo().NumericTextBox()
                    .Name("NumOfVehicles")
                    .Format("0")
                    .Min(1)
                    .Value(Model.NumOfVehicles)
                    .HtmlAttributes(new { @class = "form-control", required = "required" })
                    )
            </div>
        </div>

        <!-- Row 2: Description, SOP Number -->
        <div class="form-row">
            <div class="form-group  double-width">
                @Html.LabelFor(m => m.ProjDesc, "Description", new { @class = "form-label required-label" })
                @Html.EditorFor(m => m.ProjDesc, "VehDescriptionComboBox", new
                    {
                        LockMap = "",
                        AdditionalAttributes = new Dictionary<string, object> {
                { "class", "form-control required-cell" },
                { "required", "required" }
                }
                    })
               
            </div>

            <div class="form-group double-width">
                @Html.LabelFor(m => m.Sopnumber, "SOP Number", new { @class = "form-label" })
                @Html.EditorFor(m => m.Sopnumber, new { htmlAttributes = new { @class = "k-textbox", style = "width:100%" } })
          
            </div>
        </div>

        <!-- Specifications Section -->
        <div class="section-title">Specifications</div>

        <!-- Row 3: Make, Model, Year -->
        <div class="form-row">
            <div class="form-group  double-width">
                @Html.LabelFor(m => m.Make, "Make", new { @class = "form-label" })
                @Html.EditorFor(m => m.Make, "ComboBoxEditor", new
                    {
                        LockMap = "",
                        AdditionalAttributes = new Dictionary<string, object> {
                { "class", "form-control" }
                }
                    })
            </div>

            <div class="form-group  double-width">
                @Html.LabelFor(m => m.VehModel, "Model", new { @class = "form-label" })
                @Html.EditorFor(m => m.VehModel, "ComboBoxEditor", new
                    {
                        LockMap = "",
                        AdditionalAttributes = new Dictionary<string, object> {
                { "class", "form-control" }
                }
                    })
            </div>

            <div class="form-group  double-width">
                @Html.LabelFor(m => m.Year, "Year", new { @class = "form-label" })
                @(Html.Kendo().NumericTextBox()
                    .Name("Year")
                    .Format("0")
                    .Min(1900)
                    .Max(2100)
                    .Value(Model.Year)
                    .HtmlAttributes(new { @class = "form-control" })
                    )
            </div>
        </div>

        <!-- Row 4: Engine, Transmission, Differential -->
        <div class="form-row">
            <div class="form-group  double-width">
                @Html.LabelFor(m => m.Engine, "Engine", new { @class = "form-label" })
                @Html.EditorFor(m => m.Engine, "ComboBoxEditor", new
                    {
                        LockMap = "",
                        AdditionalAttributes = new Dictionary<string, object> {
                { "class", "form-control" }
                }
                    })
            </div>

            <div class="form-group  double-width">
                @Html.LabelFor(m => m.Transmission, "Transmission", new { @class = "form-label" })
                @Html.EditorFor(m => m.Transmission, "ComboBoxEditor", new
                    {
                        LockMap = "",
                        AdditionalAttributes = new Dictionary<string, object> {
                { "class", "form-control" }
                }
                    })
            </div>

            <div class="form-group  double-width">
                @Html.LabelFor(m => m.Differential, "Differential", new { @class = "form-label" })
                @Html.EditorFor(m => m.Differential, "ComboBoxEditor", new
                    {
                        LockMap = "",
                        AdditionalAttributes = new Dictionary<string, object> {
                { "class", "form-control" }
                }
                    })
            </div>
        </div>
        <!-- History -->
        <div class="section-title">History</div>
        <div class="form-row">
            <div class="form-group double-width">
                @Html.LabelFor(m => m.ModifiedLastBy, "Modified By", new { @class = "form-label" })
                @(Html.Kendo().TextBoxFor(m => m.ModifiedLastBy).HtmlAttributes(new { @readonly = "readonly" }))
            </div>
            <div class="form-group double-width">
                @Html.LabelFor(m => m.ModifiedLastDate, "Modified Date", new { @class = "form-label" })
                @(Html.Kendo().TextBoxFor(m => m.ModifiedLastDate).HtmlAttributes(new { @readonly = "readonly" }))
            </div>
        </div>
        
    </form>
</div>

logs :
window.initVehiclePopupForm @ VehiclesIndex:106Understand this warningAI
VehiclesIndex:110 Add
window.initVehiclePopupForm @ VehiclesIndex:110Understand this warningAI
15Chrome is moving towards a new experience that allows users to choose to browse without third-party cookies.Understand this warningAI
VehiclesIndex:192 Uncaught TypeError: Cannot read properties of undefined (reading 'value')
    at HTMLFormElement.<anonymous> (VehiclesIndex:192:63)
    at HTMLFormElement.dispatch (jquery-3.7.1.min.js:2:40035)
    at v.handle (jquery-3.7.1.min.js:2:38006)
    at Object.trigger (jquery-3.7.1.min.js:2:70124)
    at HTMLFormElement.<anonymous> (jquery-3.7.1.min.js:2:70726)
    at Function.each (jquery-3.7.1.min.js:2:3129)
    at ce.fn.init.each (jquery-3.7.1.min.js:2:1594)
    at ce.fn.init.trigger (jquery-3.7.1.min.js:2:70701)
    at ce.fn.<computed> [as submit] (jquery-3.7.1.min.js:2:86549)
    at HTMLButtonElement.<anonymous> (VehiclesIndex:180:31)

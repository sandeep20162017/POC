Telerik InLinlineEdit
@(Html.Kendo().Grid<BCES.Models.Admin.BusModel>()
    .Name("busGrid")
    .Columns(columns =>
    {
        columns.Bound(u => u.ListId).Hidden(true);

        /* logic for required col changes - Added required indicators */
        columns.Bound(u => u.Description)
            .Title("Vehicle Name")
            .HeaderHtmlAttributes(new { @class = "required-header" })   ;

        columns.Command(command =>
                    {


                        command.Custom("Edit")
                            .Click("onEdit")
                            .Text("Edit")
                            .IconClass("k-icon k-i-edit")
                            .HtmlAttributes(new { @class = "scparts-action-btn k-button" });

                        command.Custom("Delete")
                            .Click("showDeleteConfirmation")
                            .Text("Delete")
                            .IconClass("k-icon k-i-delete")
                            .HtmlAttributes(new
                            {
                                @class = "scparts-action-btn k-button",
                                title = "Delete"
                            });
                    }).Title("Actions");
    })
    .Events(events => events.Edit("onEdit"))
   .ToolBar(toolbar =>
        {
            toolbar.ClientTemplate(@"
                <button class='k-button scparts-action-btn k-grid-add' onclick='onBusAddClick()'>
                    <span class='k-icon k-i-plus'></span> Add
                </button>
                <button class='k-button scparts-action-btn k-primary' onclick='onBusSaveClick()'>
                    <span class='k-icon k-i-save'></span> Save
                </button>
                <button class='k-button scparts-action-btn' onclick='onBusCancelClick()'>
                    <span class='k-icon k-i-cancel'></span> Cancel
                </button>
            ");
        })
        ...
        <script>
    function onEdit(e) {
        var grid = e.sender;
        var cell = e.container.closest("td");
        var columnIndex = cell.index();
        var column = grid.columns[columnIndex];
        var fieldName = column.field;

        console.log('fieldName:', fieldName);
        if (fieldName === "Description") {
            var input = e.container.find("input");
            input.on("input", function () {
                this.value = this.value.toUpperCase();
            });

            /* logic for required col changes - Highlight required field during edit */
            e.container.addClass("required-cell");
        }
    }
</script>
Error :
Uncaught TypeError: Cannot read properties of undefined (reading 'closest')
    at init.onEdit (Bus:191:40)
    at HTMLAnchorElement.i (jquery-3.7.1.min.js:2:86755)
    at HTMLDivElement.dispatch (jquery-3.7.1.min.js:2:40035)
    at HTMLDivElement.<anonymous> (jquery-3.7.1.min.js:2:38006)
    .Editable(editable => editable.Mode(GridEditMode.InLine))

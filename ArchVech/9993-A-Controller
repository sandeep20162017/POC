ArchVehicleController.cs
csharp
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Threading.Tasks;
using BCES.Models.Vehicle;
using BCES.Models.ArchVehicle;
using Dapper;
using Kendo.Mvc.Extensions;
using Kendo.Mvc.UI;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Oracle.ManagedDataAccess.Client;

namespace BCES.Controllers
{
    public class ArchVehicleController : Controller
    {
        private readonly IDbConnection _dbConnection;

        public ArchVehicleController(IConfiguration config)
        {
            _dbConnection = new OracleConnection(config.GetConnectionString("DefaultConnection"));
        }

        // === Grid Data for Archived Vehicles ===
        [HttpGet]
        [AllowAnonymous]
        public async Task<JsonResult> GetVehiclesView([DataSourceRequest] DataSourceRequest request)
        {
            try
            {
                var model = await GetVehiclesData();
                return Json(model.ToDataSourceResult(request));
            }
            catch (Exception ex)
            {
                return Json(new { error = ex.Message });
            }
        }

        private async Task<IEnumerable<VehicleViewModel>> GetVehiclesData()
        {
            try
            {
                var vehiclesQuery = @"
                    SELECT 
                        ARCH_VEHICLE_LIST_ID AS VehicleListId,
                        VEH_SERIES_CODE      AS VehSeriesCode,
                        MAKE,
                        MODEL,
                        YEAR,
                        ENGINE,
                        TRANSMISSION,
                        DIFFERENTIAL,
                        LABOURTOTAL,
                        MATERIALSTOTAL,
                        TOTALBUSESTIMATECOST,
                        OLDID
                    FROM ARCH_VEHICLE_LIST";

                var vehicles = (await _dbConnection.QueryAsync<VehicleViewModel>(vehiclesQuery)).ToList();
                return vehicles.Distinct().ToList();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error fetching vehicles data: {ex.Message}");
                return Enumerable.Empty<VehicleViewModel>();
            }
        }

        // === Popup Details Action ===
        [HttpGet]
        [AllowAnonymous]
        public async Task<IActionResult> ArchiveDetails(int id)
        {
            try
            {
                var vm = await GetArchVehiclePopup(id);
                return PartialView("_ArchVehiclePopup", vm);
            }
            catch (Exception ex)
            {
                return BadRequest(new { error = ex.Message });
            }
        }

        private async Task<ArchVehiclePopupViewModel> GetArchVehiclePopup(int id)
        {
            try
            {
                // Master
                var masterSql = @"SELECT * FROM ARCH_VEHICLE_LIST WHERE ARCH_VEHICLE_LIST_ID = :id";
                var master = await _dbConnection.QueryFirstOrDefaultAsync<dynamic>(masterSql, new { id });

                // SC Parts
                var scSql = @"SELECT MMSSTOCKCODE, SCDESCRIPTION, QTYREQD, TOTALCOST, REBUILTPART
                              FROM ARCH_VEH_SC_PARTS_USED
                              WHERE ARCH_VEHICLE_LIST_ID = :id";
                var scParts = await _dbConnection.QueryAsync<ScPartUsedViewModel>(scSql, new { id });

                // NSC Parts
                var nscSql = @"SELECT ORIGSUPPNUM, ORIGSUPPLIERNAME, QTYREQD, TOTALCOST
                               FROM ARCH_VEH_NSC_PARTS_USED
                               WHERE ARCH_VEHICLE_LIST_ID = :id";
                var nscParts = await _dbConnection.QueryAsync<NscPartUsedViewModel>(nscSql, new { id });

                // Employee Labour
                var labourSql = @"SELECT LABOURDEFN, TASK, HRSREQD, ADJHRS, TIMEADDITION
                                  FROM ARCH_VEH_EMPLOYEE_LABOUR
                                  WHERE ARCH_VEHICLE_LIST_ID = :id";
                var labour = await _dbConnection.QueryAsync<EmployeeLabourViewModel>(labourSql, new { id });

                // Labour Totals
                var labourTotalsSql = @"SELECT COSTCENTRE, TOTALHOURS
                                        FROM ARCH_VEH_LABOUR_CC_TOTAL
                                        WHERE ARCH_VEHICLE_LIST_ID = :id";
                var labourTotals = await _dbConnection.QueryAsync<LabourCcTotalViewModel>(labourTotalsSql, new { id });

                return new ArchVehiclePopupViewModel
                {
                    ArchVehicleListId = master.ARCH_VEHICLE_LIST_ID,
                    Make = master.MAKE,
                    Model = master.MODEL,
                    Year = master.YEAR,
                    Engine = master.ENGINE,
                    Transmission = master.TRANSMISSION,
                    Differential = master.DIFFERENTIAL,
                    LabourTotal = master.LABOURTOTAL,
                    MaterialsTotal = master.MATERIALSTOTAL,
                    TotalBusEstimateCost = master.TOTALBUSESTIMATECOST,
                    ScPartsUsed = scParts,
                    NscPartsUsed = nscParts,
                    EmployeeLabours = labour,
                    LabourCcTotals = labourTotals
                };
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error fetching archive details: {ex.Message}");
                return new ArchVehiclePopupViewModel();
            }
        }
    }
}
ðŸ”‘ Key Points

Generate view for above model based on below view. Itmusthave same look and feel  like below. The new view  will be pop-up sodjustvwidth
and height and inner container accourdingly. No  horizontal scroll. Vertical scroll is okay.
Form must have close button atvtop right.
All the  controls should use kendo text boxes and all are read only.
Sample view :
@model BCES.Models.Parts.NscPartsUsedViewModel
@Html.HiddenFor(m=>m.Oid)
<div class="scparts-popup-style">

    <!-- Top-left action buttons -->
    <div class="popup-actions">
        <button class="k-button k-primary" type="button" onclick="saveNscPartPopup()">Update</button>
        <button class="k-button" type="button" onclick="cancelNscPartPopup()">Cancel</button>
    </div>
    
    <!-- ===================== Row 1 ===================== -->
    <div class="section-title">Supplier Information</div>
    <div class="form-row">
        <!-- Supplier Number -->
        <div class="form-group  double-width">
            @Html.LabelFor(m => m.OrigSuppNum, "Supplier Number", new { @class = "form-label required-label" })
            @Html.EditorFor(m => m.OrigSuppNum, "NscComboBox", new { htmlAttributes = new { required = "required" } })
            
        </div>

        <!-- Supplier Name -->
        <div class="form-group  double-width">
            @Html.LabelFor(m => m.OrigSupplierName, "Supplier Name", new { @class = "form-label required-label" })
            @Html.EditorFor(m => m.OrigSupplierName, "NscSupplierComboBox", new { htmlAttributes = new { required = "required" } })

          
        </div>

        <!-- Keyword -->
        <div class="form-group  double-width">
            @Html.LabelFor(m => m.KeyWord, "Keyword", new { @class = "form-label" })
            @Html.EditorFor(m => m.KeyWord, new { htmlAttributes = new { @class = "k-textbox", style = "width:100%" } })
        </div>
    </div>

    <!-- ===================== Row 2 ===================== -->
    <div class="section-title">Part Description</div>
    <div class="form-row">
        <!-- Description -->
        <div class="form-group  full-width">
            @Html.LabelFor(m => m.Description, "Description", new { @class = "form-label" })
            @Html.EditorFor(m => m.Description, new { htmlAttributes = new { @class = "k-textbox", style = "width:100%" } })
        </div>
    </div>
        <!-- Part Cost -->
    <div class="section-title">Cost Details</div>
    <div class="form-row">
        
        <!-- Cost Centre -->
        <div class="form-group full-width">
            @Html.LabelFor(m => m.CC, "Cost Centre", new { @class = "form-label required-label" })
            @Html.EditorFor(m => m.CC, "ComboBoxEditor", new { htmlAttributes = new { required = "required" } })
        </div>
    </div>


    <!-- ===================== Row 3 ===================== -->
 
    <div class="section-title">Cost Details</div>
    <div class="form-row">
        <div class="form-group double-width">
            @Html.LabelFor(m => m.UnitCost, "Unit Cost", new { @class = "form-label" })
            @(Html.Kendo().NumericTextBoxFor(m => m.UnitCost).Format("c2"))
        </div>
        <div class="form-group double-width">
            @Html.LabelFor(m => m.Qty, "Quantity", new { @class = "form-label required-label" })
            @(Html.Kendo().NumericTextBoxFor(m => m.Qty).Min(0).Format("n0").HtmlAttributes(new { required = "required" }))
        </div>
        <div class="form-group double-width">
            @Html.LabelFor(m => m.Percentage, "%", new { @class = "form-label required-label" })
            @(Html.Kendo().NumericTextBoxFor(m => m.Percentage).Format("n0").Min(0).Max(100).HtmlAttributes(new { required = "required" }))
        </div>
        <div class="form-group double-width">
            @Html.LabelFor(m => m.TotalCost, "Total", new { @class = "form-label" })
            @(Html.Kendo().NumericTextBoxFor(m => m.TotalCost)
                .Format("c2")
                .Min(0)
                .HtmlAttributes(new { @readonly = "readonly" }))
        </div>
    </div>
    <!-- History -->
    <div class="section-title">History</div>
    <div class="form-row">
        <div class="form-group double-width">
            @Html.LabelFor(m => m.LastModifiedBy, "Modified By", new { @class = "form-label" })
            @(Html.Kendo().TextBoxFor(m => m.LastModifiedBy).HtmlAttributes(new { @readonly = "readonly" }))
        </div>
        <div class="form-group double-width">
            @Html.LabelFor(m => m.LastModifiedDate, "Modified Date", new { @class = "form-label" })
            @(Html.Kendo().TextBoxFor(m => m.LastModifiedDate).HtmlAttributes(new { @readonly = "readonly" }))
        </div>
    </div>

    @* ====== COMMENTED OUT FIELDS FROM _NScPartsUsed.cshtml ====== *@
    @* Core Cost
    <div class="form-row">
    <div class="form-group">
    <label class="form-label">Core Cost</label>
    @(Html.Kendo().NumericTextBoxFor(m => m.CoreCost)
    .Format("{0:C2}")
    .HtmlAttributes(new { data_br = "MustBeNumeric,NoSpecialCharacters,MustBePositive" })
    )
    </div>
    </div>
    *@

    @* Total Cost
    <div class="form-row">
    <div class="form-group">
    <label class="form-label">Total Cost</label>
    @(Html.Kendo().NumericTextBoxFor(m => m.TotalCost)
    .Format("{0:C2}")
    .HtmlAttributes(new { @readonly = "readonly" })
    )
    </div>
    </div>
    *@

    @* Last Modified By
    <div class="form-row">
    <div class="form-group">
    <label class="form-label">Modified By</label>
    @(Html.Kendo().TextBoxFor(m => m.LastModifiedBy)
    .HtmlAttributes(new { @readonly = "readonly", @class = "k-textbox" })
    )
    </div>
    </div>
    *@

    @* Last Modified Date
    <div class="form-row">
    <div class="form-group">
    <label class="form-label">Modified Date</label>
    @(Html.Kendo().DatePickerFor(m => m.LastModifiedDate)
    .HtmlAttributes(new { @readonly = "readonly" })
    )
    </div>
    </div>
    *@

</div>
@* 
@section scripts {
    <script>
        (function () {
            var $popup = $('.k-window-content:visible');

            // Save button triggers Kendo's update
            $popup.on('click', '.sc-save-btn', function () {
                $popup.find('.k-grid-update').trigger('click');
            });

            // Cancel button triggers Kendo's cancel
            $popup.on('click', '.sc-cancel-btn', function () {
                $popup.find('.k-grid-cancel').trigger('click');
            });
        })();
    </script>
} *@


You are ASP.NEt core v 8.0and Telerik ASp.NET core expert
Pls modify controller logic, remember WageGroup is PK.
check if WageGroup exists in the table SBCES.EMPLOYEESALARIES, if exists, update if not exists create a new (make sure to avoid duplicate).

Controller:
 public async Task<IActionResult> UpdateEmpSalary([DataSourceRequest] DataSourceRequest request, [FromForm] EmpSalaryModel empSalaryModel)
 {
     try
     {
       //check if WageGroup exists in the table SBCES.EMPLOYEESALARIES, if exists, update if not exists create a new
         string updateQuery = "UPDATE SBCES.EMPLOYEESALARIES SET RATEPERHOUR = " + empSalaryModel.RatePerHour + ", DATEENTERED =  '" + DateTime.Now + "' WHERE WAGEGROUP =" + empSalaryModel.WageGroup;
         await _dbConnection.ExecuteAsync(updateQuery, empSalaryModel);
         return Json(new { success = true });
     }
     catch (Exception ex)
     {
         return StatusCode(500, "An error occurred while updating the salary.");
     }

 }
Schema :
CREATE TABLE [SBCES].[EmployeeSalaries](
	[WageGroup] [int] NOT NULL,
	[RatePerHour] [numeric](18, 2) NULL,
	[DateEntered] [datetime] NULL,
 CONSTRAINT [PK_WageGroup] PRIMARY KEY CLUSTERED 
(
	[WageGroup] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
index.cshtml
@model IEnumerable<BCES.Models.Admin.EmpSalaryModel>

@{
    ViewData["Title"] = "Employee Salary";
}

<h4>Employee Salary</h4>

@(
Html.Kendo().Grid<BCES.Models.Admin.EmpSalaryModel>()
                            .Name("EmployeeSalaryGrid")
                            .Columns(columns =>
                            {
                                columns.Bound(p => p.WageGroup).Title("Wage Group");                               
                                columns.Bound(p => p.RatePerHour).Title("Rate Per Hr").Filterable(ftb => ftb.Cell(cell => cell.Operator("gte"))).Format("{0:C2}").EditorTemplateName("Currency");
                      // columns.Bound(p => p.DateEntered).Title("Date Entered");
                       columns.Command(command =>
                     {
                         command.Custom("Delete")
                              .Click("showDeleteConfirmation")
                              .Text(" ")
                              .IconClass("k-icon k-i-delete")
                              .HtmlAttributes(new { @class = "text-danger", title = "Delete" });
                     }).Title("Actions");
                            })
                     //InCell
                     .ToolBar(toolbar =>
                    {
                        toolbar.Create();
                        toolbar.Save();
                    })
                .Editable(editable => editable.Mode(GridEditMode.InCell))

                .Pageable()
                .Sortable()
                .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
                .DataSource(dataSource => dataSource
                    .Ajax()
                    .Events(events => events
                    .Error("onDataSourceError")
                    .RequestEnd("onRequestEnd")
                     )
                    .Model(model =>
                    {
                        model.Id(u => u.WageGroup);
                        model.Field(c => c.WageGroup).Editable(true);

                        model.Field(c => c.RatePerHour);
                        model.Field(c => c.DateEntered).Editable(false);

                    })

                    .Read(read => read.Url(Url.Action("GetEmpSalary", "EmpSalary")).Type(HttpVerbs.Get))
                    .Create(create => create.Url(Url.Action("CreateEmpSalary", "EmpSalary")).Type(HttpVerbs.Post))
                    .Update(update => update.Url(Url.Action("UpdateEmpSalary", "EmpSalary")).Type(HttpVerbs.Post))
                    .Destroy(delete => delete.Url(Url.Action("DeleteEmpSalary", "EmpSalary")).Type(HttpVerbs.Post))

                   )

            )
<!-- Custom Delete Confirmation Dialog -->
<div id="deleteConfirmationDialog" style="display: none;">
    <div class="confirmation-message">
        <span class="k-icon k-i-warning confirmation-icon"></span>
        <!-- Edit this span text  -->
        <span>Are you sure you want to delete this item?</span>
    </div>
    <div class="confirmation-buttons">
        <button type="button" class="k-button cancel-btn">Cancel</button>
        <button type="button" class="k-button confirm-btn">Delete</button>
    </div>
</div>
<div id="notification"></div>

@section Scripts {
    <script>
        function getAutoCompleteParams() {
            var input = $("input[data-role='autocomplete']:focus");
            return {
                columnName: input.attr("name"),
                searchText: input.val() || "" // Handle empty search text
            };
        }
    </script>

    @* notification - add following JS, add div, add in grid .Error("onDataSourceError"),  .RequestEnd("onRequestEnd"), change contoller action to return json *@
    <script>
        // Initialize notification FIRST
        var notification = $("#notification").kendoNotification({
            position: {
            pinned: true,
        top: 50,
        right: 30
                },
        autoHideAfter: 4000,
        stacking: "down"
            }).data("kendoNotification");

        // Error handler
        function onDataSourceError(e) {
            let errorMessage = "Operation failed. ";

        if (e.errorThrown) {
            errorMessage += e.errorThrown;
                } else if (e.xhr && e.xhr.responseText) {
            errorMessage += e.xhr.responseText;
                }

        notification.error(errorMessage);
            }

        // Success handler
        function onRequestEnd(e) {
                if (e.type === "create") {
            notification.success("Record created successfully");
                } else if (e.type === "update") {
            notification.success("Record updated successfully");
                } else if (e.type === "destroy") {
            notification.success("Record deleted successfully");
                }
            }
    </script>
    <script>

        // Initialize custom confirmation dialog
        var deleteDialog = $("#deleteConfirmationDialog").kendoWindow({
            width: "400px",
            title: "Confirm Delete",
            modal: true,
            visible: false,
            actions: ["Close"]
        }).data("kendoWindow");

        function showDeleteConfirmation(e) {
            e.preventDefault();
            var grid = $("#EmployeeSalaryGrid").data("kendoGrid");
            var dataItem = grid.dataItem($(e.currentTarget).closest("tr"));

            // Store reference to the dataItem
            deleteDialog.dataItem = dataItem;

            deleteDialog.center().open();
        }

        // Handle dialog buttons
        $(document).on("click", "#deleteConfirmationDialog .confirm-btn", function () {
            var grid = $("#EmployeeSalaryGrid").data("kendoGrid");
            var dataItem = deleteDialog.dataItem;

            $.ajax({
                url: '@Url.Action("DeleteEmpSalary", "EmpSalary")',
                type: 'POST',
                data: { WageGroup: dataItem.WageGroup },
                success: function () {
                    grid.dataSource.remove(dataItem);
                    notification.success("Record deleted successfully");
                    deleteDialog.close();
                },
                error: function (xhr) {
                    notification.error("Delete failed: " + xhr.responseText);
                    deleteDialog.close();
                }
            });
        });

        $(document).on("click", "#deleteConfirmationDialog .cancel-btn", function () {
            deleteDialog.close();
        });

    </script>
}

}




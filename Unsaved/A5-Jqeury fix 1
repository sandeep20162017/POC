ðŸ”§ Option 1: Delay Until Grid Is Ready
This is the quick fix â€” wrap your call in a delay:

js
Copy
Edit
setTimeout(function () {
    const $grid = $("#RbPartsMaterialDetailsRebuiltPartsGrid");
    if ($grid.length && $grid.data("kendoGrid")) {
        $grid.trackUnsavedChanges();
    } else {
        console.warn("Grid not ready yet:", $grid.attr("id"));
    }
}, 300); // You can increase delay if needed
ðŸ§© Option 2: Hook Right After Grid Is Rendered
If you're rendering your partial view dynamically (e.g., via tabs), you should call the plugin immediately after Kendo initializes the grid.

You can do this using Telerik's .Events() in your Razor code:

csharp
Copy
Edit
.Events(events => events.DataBound("onGridReady"))
Then in JS:

js
Copy
Edit
function onGridReady(e) {
    const grid = e.sender;
    const $el = grid.wrapper;
    if ($el && $el.trackUnsavedChanges) {
        $el.trackUnsavedChanges();
        console.log("Plugin attached via DataBound");
    }
}
This ensures you're calling .trackUnsavedChanges() only after the grid is fully rendered and available in the DOM.

âœ… Your Final Working Setup Should Look Like:
Razor (Partial View)
csharp
Copy
Edit
.Name("RbPartsMaterialDetailsRebuiltPartsGrid")
.Events(events => events.DataBound("onGridReady"))
JavaScript
js
Copy
Edit
function onGridReady(e) {
    const grid = e.sender;
    const $gridEl = grid.wrapper;

    if ($gridEl && typeof $gridEl.trackUnsavedChanges === "function") {
        $gridEl.trackUnsavedChanges();
    } else {
        console.warn("trackUnsavedChanges not available or grid wrapper not found");
    }
}

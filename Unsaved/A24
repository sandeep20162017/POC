Here's the complete solution with UNSAVED tags and consistent styling across all grids:

css
/* Add to your CSS */
/* Unified Unsaved Styling */
.k-grid .unsaved-row {
    position: relative;
    background-image: linear-gradient(
        to right,
        rgba(255, 235, 59, 0.1) 3px,
        transparent 3px
    );
}

.k-grid .k-state-created .unsaved-badge {
    background-color: #43a047; /* Green for new rows */
}

.k-grid .k-state-edited .unsaved-badge {
    background-color: #ffeb3b; /* Yellow for edited rows */
}

.k-grid .unsaved-badge {
    position: absolute;
    right: 5px;
    top: 50%;
    transform: translateY(-50%);
    padding: 2px 6px;
    border-radius: 3px;
    font-size: 0.75rem;
    font-weight: bold;
    color: rgba(0, 0, 0, 0.8);
    z-index: 100;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.k-grid .k-state-created,
.k-grid .k-state-created.k-alt {
    background-color: #e8f5e9 !important; /* Light green background */
}

.k-grid .k-state-edited,
.k-grid .k-state-edited.k-alt {
    background-color: #fffde7 !important; /* Light yellow background */
}

/* Status Indicator */
.k-grid .status-indicator {
    width: 4px;
    height: 100%;
    position: absolute;
    left: 0;
    top: 0;
    z-index: 99;
}

.k-state-created .status-indicator { background-color: #43a047; }
.k-state-edited .status-indicator { background-color: #ffeb3b; }
Add this JavaScript function to handle common grid styling:

javascript
// Unified grid styling function
function applyUnsavedStyling(grid) {
    grid.tbody.find("tr").each(function() {
        const row = $(this);
        const dataItem = grid.dataItem(row);
        const firstCell = row.find("td:first");
        
        // Clear existing indicators
        row.removeClass("k-state-created k-state-edited unsaved-row");
        row.find(".status-indicator, .unsaved-badge").remove();

        if (dataItem) {
            if (dataItem.isNew()) {
                row.addClass("k-state-created unsaved-row");
                row.prepend('<div class="status-indicator"></div>');
                firstCell.append('<span class="unsaved-badge">NEW</span>');
            } else if (dataItem.dirty) {
                row.addClass("k-state-edited unsaved-row");
                row.prepend('<div class="status-indicator"></div>');
                firstCell.append('<span class="unsaved-badge">EDITED</span>');
            }
        }
    });
}
Update your parent grid dataBound event:

javascript
function onVehGridDataBound(e) {
    const grid = e.sender;
    applyUnsavedStyling(grid);
    
    // Maintain existing functionality
    const ds = grid.dataSource;
    // ... rest of your existing parent grid code ...
}
For child grids (Labour, ScParts, NscParts, RbParts), add:

javascript
// Common child grid dataBound handler
function onChildGridDataBound(e) {
    const grid = e.sender;
    applyUnsavedStyling(grid);
    
    // Add any child-specific logic here
    // ... rest of your existing child grid code ...
}

// Common save handler
function onChildGridSave(e) {
    const grid = e.sender;
    const row = grid.tbody.find(`[data-uid='${e.model.uid}']`);
    row.removeClass("k-state-created k-state-edited unsaved-row");
    row.find(".status-indicator, .unsaved-badge").remove();
}

// Common cancel handler
function onChildGridCancel(e) {
    const grid = e.sender;
    const row = grid.tbody.find(`[data-uid='${e.model.uid}']`);
    row.removeClass("k-state-created k-state-edited unsaved-row");
    row.find(".status-indicator, .unsaved-badge").remove();
}
Update grid configurations:

csharp
// For parent grid
.Events(events => events
    .DataBound("onVehGridDataBound")
    .Save("onVehGridSave")
    .Cancel("onVehGridCancel")
)

// For each child grid (example for Labour grid)
.Events(events => events
    .DataBound("onChildGridDataBound")
    .Save("onChildGridSave")
    .Cancel("onChildGridCancel")
)
Key features:

NEW/EDITED badges with color coding

Status indicator stripes

Consistent hover effects

Unified styling across all grids

Responsive design

Clear visual hierarchy

Non-intrusive animations

Works with paging/sorting/filtering

The badges and status indicators will persist until:

Changes are saved

Changes are canceled

User navigates away

Grid is refreshed

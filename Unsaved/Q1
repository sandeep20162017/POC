You are ASP.nET core v 8 and Telerik AP.NET core expert. App uses Telerik grid. Uses InCell Edit.
In the following JS during edit or ading a new item.dirty or item.isNew() are always false.
Do we need touse explict gridname to get the values?
function onRbGridDataBound(e) {
    const grid = e.sender;
    const ds = grid.dataSource;
    unsavedChangesExist = false;
    console.log('onRbGridDataBound - unsavedChangesExist :', unsavedChangesExist);
    console.log('onRbGridDataBound - grid.dataSource.hasChanges() :', grid.dataSource.hasChanges());

    // Clear previous styling
    $(".unsaved-row, .unsaved-cell, .unsaved-badge").remove();

    // Apply new styling
    ds.view().forEach(item => {
        const row = grid.tbody.find(`tr[data-uid='${item.uid}']`);
        console.log('onRbGridDataBound - item.dirty :', item.dirty);
        console.log('onRbGridDataBound -  item.isNew() :', item.isNew());
        console.log('onRbGridDataBound - grid.dataSource.hasChanges() :', grid.dataSource.hasChanges());
        if (item.dirty || item.isNew()) { //item.dirty or item.isNew() are always false
            // Add row class
            row.addClass("unsaved-row");
.....
shared sshtml :
@model IEnumerable<BCES.Models.Parts.RebuiltPartsViewModel>

@{
    ViewData["Title"] = "Rebuilt Parts Used";
}

<h6>Rebuilt Parts Used</h6>

@(Html.Kendo().Grid<BCES.Models.Parts.RebuiltPartsViewModel>()
   
    .Name($"RbPartsMaterialDetailsRebuiltPartsGrid")
     .Events(events => events
                    .DataBound("onRbGridDataBound")

                )
    .Columns(columns =>
    {
        //columns.Bound(c => c.RebuiltStockNum).Title("Rebuilt Number").Width(60);
        columns.Bound(c => c.Id).Title("Id").Hidden(true);
        columns.Bound(c => c.RebuiltStockNum).Title("Rebuilt Number").EditorTemplateName("RbComboBox").Filterable(ftb => ftb.Cell(cell => cell.Operator("gte"))).Width(100);
        columns.Bound(c => c.KeyWord).Title("KeyWord").Width(50);
        columns.Bound(c => c.Description).Title("Description").Width(70);
        
        columns.Bound(c => c.MmsStockCode).Title("MMS Stock Code").EditorTemplateName("ComboBoxEditor").Width(70);
       @*  columns.Command(command =>
       {)
            command.Custom(""Populate Details").Click("refreshRbPartDetails").IconClass("k-i-reload").HtmlAttributes(new { @class = "k-button k-button-icontext" });
           command.Custom("Populate Details").Click("refreshRbPartDetails").IconClass("k-i-reload").HtmlAttributes(new { @class = "k-button k-button-icontext" });

       }).Width(60); *@
        columns.Bound(c => c.CoreCharge).Title("Unit Cost").Width(60);
        columns.Bound(c => c.Qty).Title("Qty").Width(40);
       
        columns.Bound(c => c.Percentage).Title("Percentage").Width(50);
       @*  columns.Bound(c => c.TotalCost).Title("TotalCost").Width(60); *@
        
        
        // columns.Bound(c => c.DateRevised).Title("Date Revised");
        //columns.Command(command => command.Edit()).Title("Actions");
        columns.Command(command =>
      {
          if (@ViewBag.RoleId == 1)
          {
              // command.Edit().Text(" ").IconClass("k-icon k-i-edit").HtmlAttributes(new { title = "Edit" }); // Edit button with tooltip
          }
          if (@ViewBag.RoleId == 1)
          {

              command.Custom("Delete")
               .Click("showDeleteConfirmation")
               .Text(" ")
               .IconClass("k-icon k-i-delete")
               .HtmlAttributes(new
               {
                   @class = "text-danger",
                   title = "Delete",
                   data_grid = $"RbPartsMaterialDetailsRebuiltPartsGrid",
                   data_url = Url.Action("DeleteRbPartsUsedInRbtParts", "RbPartsUsedInEstimates"),
                   data_id_field = "Id",
                   data_rebuiltstocknum_field = "RebuiltStockNum", //ssk 4
                 //  data_mmsstockcode_field = "parentPartId",
                   data_grid_type = "RbPartGrid" 
               });
          }
      }).Width(100);
    })

    .ToolBar(toolbar =>
    {
        if (@ViewBag.RoleId == 1)
        {
            toolbar.Create();
            toolbar.Save();
        }
    })
    .Editable(editable => editable.Mode(GridEditMode.InCell).Enabled(true)) //ssk7 - Disable column on edit
    .Events(events => events.Edit("onEditRbParts")) //ssk7 - Disable column on edit
    
    .Pageable()
    .Sortable()
    .Resizable(r => r.Columns(true))
    // .Scrollable()
    .DataSource(dataSource => dataSource
        .Ajax()
        .Events(events => events
            .Change("onRbDataSourceChange")      // ssk6 -disable save when no changes
            .RequestEnd("onRbRequestEnd")         //ssk6
        )
       
        .Model(model =>
        {
            model.Id(c => c.Id);
            model.Field(c => c.Id);
            model.Field(c => c.RebuiltStockNum);
        })

        .Read(read => read.Url(Url.Action("GetRbPartsUsedInEstimates", "RbPartsUsedInEstimates") + "?id=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Get))
        .Create(create => create.Url(Url.Action("CreateRbPartsUsedInEstimates", "RbPartsUsedInEstimates") + "?id=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Post))
        .Update(update => update.Url(Url.Action("UpdateRbPartsUsedInEstimates", "RbPartsUsedInEstimates") + "?id=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Post))
        .Destroy(delete => delete.Url(Url.Action("DeleteRbPartsUsedInRbtParts", "RbPartsUsedInEstimates") + "?rebuiltPartNum=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Post))
    )
)


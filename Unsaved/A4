üì¶ JavaScript: onRbDataSourceChange
js
Copy
Edit
function onRbDataSourceChange(e) {
    const grid = e.sender;
    const ds = grid.dataSource;

    // Clear existing tags
    $(".unsaved-floating-tag").remove();

    // Delay ensures row is rendered before accessing offset
    setTimeout(() => {
        ds.view().forEach(item => {
            if (item.dirty || item.isNew()) {
                const row = grid.tbody.find(`tr[data-uid='${item.uid}']`);

                // Row might not be available right after add; skip if not rendered
                if (!row.length) {
                    console.warn("Row not yet rendered for UID:", item.uid);
                    return;
                }

                row.addClass("unsaved-row");

                const rowOffset = row.offset();
                if (!rowOffset) return;

                const tag = $(`
                    <div class='unsaved-floating-tag animated-fade-in' data-uid='${item.uid}'>
                        ‚ö† UNSAVED CHANGES
                    </div>
                `).css({
                    position: "absolute",
                    top: rowOffset.top + row.outerHeight(),
                    left: rowOffset.left,
                    width: row.outerWidth(),
                    zIndex: 1000
                });

                $("body").append(tag);
            }
        });

        updateUnsavedTagPositions(grid);
    }, 100); // Wait 100ms for DOM to update
}
üîÅ Position Sync Helper
js
Copy
Edit
function updateUnsavedTagPositions(grid) {
    $(".unsaved-floating-tag").each(function () {
        const tag = $(this);
        const uid = tag.data("uid");
        const row = grid.tbody.find(`tr[data-uid='${uid}']`);
        if (!row.length) return;

        const rowOffset = row.offset();
        if (!rowOffset) return;

        tag.css({
            top: rowOffset.top + row.outerHeight(),
            left: rowOffset.left,
            width: row.outerWidth()
        });
    });
}
üìå Hook to Scroll/Resize
js
Copy
Edit
$(window).on("resize scroll", function () {
    const grid = $("#RbPartsMaterialDetailsRebuiltPartsGrid").data("kendoGrid");
    updateUnsavedTagPositions(grid);
});

$("#RbPartsMaterialDetailsRebuiltPartsGrid").on("scroll", ".k-grid-content", function () {
    const grid = $("#RbPartsMaterialDetailsRebuiltPartsGrid").data("kendoGrid");
    updateUnsavedTagPositions(grid);
});
üé® CSS
css
Copy
Edit
.unsaved-row {
    background-color: #fff9e6 !important;
}

.unsaved-floating-tag {
    background-color: #fff3cd;
    color: #856404;
    font-weight: bold;
    text-align: center;
    padding: 4px 10px;
    font-size: 13px;
    border: 1px solid #ffeeba;
    border-radius: 3px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    white-space: nowrap;
    pointer-events: none;
}

.animated-fade-in {
    animation: fadeInTag 0.4s ease-in-out;
}

@keyframes fadeInTag {
    from {
        opacity: 0;
        transform: translateY(-5px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}
üßπ On Save / Sync Cleanup
js
Copy
Edit
function onRbRequestEnd(e) {
    $(".unsaved-row").removeClass("unsaved-row");
    $(".unsaved-floating-tag").remove();
}
This fully dynamic, grid-agnostic, clean version solves:

‚úÖ Tags show for both edited and new rows

‚úÖ Floats properly even on scroll/resizing

‚úÖ No offset errors

‚úÖ No hardcoded grid ID ‚Äî uses e.sender

You are ASP.NET Core 8.0 and Telerik Kendo ASp Core expert. Could it be possible to migrate following code to SQL? Also explain what the code does.
code snippet :
 var rbParts = _dbConnection.Query<RebuiltPartsViewModel, ListOfBusesModel, LabourDetailsRebuiltPartsViewModel, RebuiltPartsViewModel>(
            query,
            (rbPart, vehicle, labourDetail) =>
            {
                rbPart.VehicleSeries.Add(vehicle);
                if (labourDetail != null)
                {
                    rbPart.LabourDetailsRebuiltParts.Add(labourDetail);
                }
                return rbPart;
            },
            splitOn: "ListId,LinkNumber"
        ).GroupBy(rbPart => rbPart.RbMasterlistId).Select(g =>
        {
            var groupedRbPart = g.First();
            groupedRbPart.VehicleSeries = g.SelectMany(rbPart => rbPart.VehicleSeries).Distinct().ToList();
            groupedRbPart.LabourDetailsRebuiltParts = g.SelectMany(rbPart => rbPart.LabourDetailsRebuiltParts).Distinct().ToList();
            return groupedRbPart;
        }).ToList();

full code :

private async Task<IEnumerable<RebuiltPartsViewModel>> GetRebuiltPartsData()
{
    try
    {
        var query = @"
                    SELECT rbm.RbMasterlistId,
                    rbm.[RebuiltStockNum],
                    rbm.[MmsStockCode],
                    rbm.[Keyword],
                    rbm.JobNumber,
                    rbm.[CorePartNum],
                    rbm.[DetailedDesc],
                    rbm.[CoreCharge],
                    rbm.[EstimatedCost],
                    rbm.[BuyNewCost],
                    rbm.[RemanCost],
                    rbm.[ExternalCost],
                    lb.ListId,
                    lb.Description AS Description,
                    EL.LINKNUMBER,
                    EL.LabourDefn AS [LabourType],
                     EL.LabourDefn AS [LabourType],
                    EL.CostCentre AS [CC],
                    EL.Task AS [Task],
                    REPLACE(EL.Usage, ',', '.') AS [Usage],
                    EL.HrsReqd AS [Time],
                    ES.RatePerHour AS [RATE PER HOUR],
                    EL.TimeAddition AS [TIME ADDITION]
                    
                        FROM [SBCES].[RbMasterlist] rbm
                        INNER JOIN [SBCES].[RbListOfBuses] rlb ON rlb.[RebuiltStockNum] = rbm.[RebuiltStockNum]
                        INNER JOIN [SBCES].[ListOfBuses] lb ON rlb.ListId = lb.ListId
                        left join [SBCES].[EmployeeLabour] el ON el.[LinkNumber] = rbm.[RebuiltStockNum]
                        JOIN SBCES.EmplClass EC ON EL.LabourDefn = UPPER(EC.LabourDefn)
                        JOIN SBCES.EmployeeSalaries ES ON EC.WageGroup = ES.WageGroup
                        ";

        var rbParts = _dbConnection.Query<RebuiltPartsViewModel, ListOfBusesModel, LabourDetailsRebuiltPartsViewModel, RebuiltPartsViewModel>(
            query,
            (rbPart, vehicle, labourDetail) =>
            {
                rbPart.VehicleSeries.Add(vehicle);
                if (labourDetail != null)
                {
                    rbPart.LabourDetailsRebuiltParts.Add(labourDetail);
                }
                return rbPart;
            },
            splitOn: "ListId,LinkNumber"
        ).GroupBy(rbPart => rbPart.RbMasterlistId).Select(g =>
        {
            var groupedRbPart = g.First();
            groupedRbPart.VehicleSeries = g.SelectMany(rbPart => rbPart.VehicleSeries).Distinct().ToList();
            groupedRbPart.LabourDetailsRebuiltParts = g.SelectMany(rbPart => rbPart.LabourDetailsRebuiltParts).Distinct().ToList();
            return groupedRbPart;
        }).ToList();

        return rbParts;
    }
    catch (Exception ex)
    {
        return null;
    }
}

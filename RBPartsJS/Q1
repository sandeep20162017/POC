In the main grid I have 3 RebuiltStockCodes
1, 2 and 3.
Whwn I click on 1, I see tab links Labor Details, Labour Hour, Material  cost etc
I click on Labour Details tab, labour details grid (with values) is visible including buttons Add, Save and Cancel
When I click on 2 I see tab links Labor Details, Labour Hour, Material  cost etc
When I click on Labour Details tab, I only see page header Labour Details labour details grid t  is visible including missing buttons Add, Save and Cancel.
I rereshed the page, 
I click on 2, labour details grid (with values) is visible including buttons Add, Save and Cancel
LabourDetails and all other tabs are partial view. No JS erros on the page.
Index.cshtml :
@using BCES.Models.Parts
@using BCES.Models.Common
@model IEnumerable<BCES.Models.Parts.RebuiltPartsViewModel>

@{
    ViewData["Title"] = "Rebuilt Parts";
}

<h4>Rebuilt Parts</h4>

@(Html.Kendo().TabStrip()
    .Name("rebuildPartsTabStrip")
    .Animation(animation => animation.Open(effect => effect.Fade(FadeDirection.In)))
    .Items(tabstrip =>
    {
        tabstrip.Add().Text("Rebuilt Parts")
            .Selected(true)
            .Content(@<text>
                @try
                {
                    @(Html.Kendo().Grid<RebuiltPartsViewModel>()
                        .Name("RebuiltPartsGrid")
                        .Columns(columns =>
                        {
                            columns.Bound(c => c.RebuiltStockNum).Title("Rebuilt Stock Code")
                                .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)))
                                .Width(130).Hidden(false).Lockable(false);

                            columns.Bound(c => c.MmsStockCode).Title("MMS Stock Code")
                                .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)))
                                .Width(130);

                            columns.Bound(c => c.DetailedDesc).Title("Description")
                                .ClientTemplate("#: truncateText(data.DetailedDesc) #")
                                .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)))
                                .Width(250).Hidden(false).MinScreenWidth(768);

                            columns.Bound(c => c.KeyWord).Title("Keyword")
                                .ClientTemplate("#: truncateText(data.KeyWord) #")
                                .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)))
                                .EditorTemplateName("CommonDropDownEditor")
                                .Width(120).Hidden(false).MinScreenWidth(768);

                            columns.Bound(c => c.JobNumber).Title("Job Number")
                                .ClientTemplate("#: truncateText(data.JobNumber) #")
                                .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)))
                                .Width(100).Hidden(false).MinScreenWidth(768);

                            columns.Bound(c => c.CorePartNum).Title("Core Code")
                                .ClientTemplate("#: truncateText(data.CorePartNum) #")
                                .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)))
                                .Width(100).Hidden(false).MinScreenWidth(768);

                            columns.Bound(c => c.CoreCharge).Title("Core Cost")
                                .ClientTemplate("#: truncateText(data.CoreCharge) #")
                                .Filterable(ftb => ftb.Cell(cell => cell.Operator("gte")))
                                .Format("{0:C}").EditorTemplateName("Currency")
                                .Width(80).Hidden(false).MinScreenWidth(768);

                            columns.Bound(c => c.RemanCost).Title("Remanufactured Cost")
                                .Filterable(ftb => ftb.Cell(cell => cell.Operator("gte")))
                                .EditorTemplateName("Currency")
                                .ClientTemplate("#:kendo.toString(RemanCost, 'c2')#")
                                .Width(80);

                            columns.Bound(p => p.CostSavingPerUnitDummy)
                                .Title("Cost Saving Per Unit")
                                .ClientTemplate("#= calculateCostSaving(data) #")
                                .Width(70);

                            columns.Bound(p => p.PercentageSavingPerUnitDummy)
                                .Title("Percentage Saving Per Unit")
                                .ClientTemplate("#= calculatePercentageSaving(data) #")
                                .Width(50);

                            columns.Bound(u => u.BusId).Title("Vehicle Series") 
                                // .ClientTemplate("# if (typeof Buses != 'undefined'  && Buses && Buses.length > 0) { # #= Buses.map(bus => bus.BusName).join(', ') # # } else { # Select Vehicle # } #")
                                .ClientTemplate("# if (typeof Buses != 'undefined' && Buses && Buses.length) { # #= Buses.map(bus => truncateWords(bus.BusName, 10)).join(', ') # # } else { # Select Vehicle # } #")
                                .EditorTemplateName("VehicleSeriesEditor")
                                .Width(130);

                            columns.Command(command =>
                            {
                               // command.Edit().Text(" ").IconClass("k-icon k-i-edit").HtmlAttributes(new { title = "Edit" }); // Edit button with tooltip
                                command.Custom("Archive").Text(" ").IconClass("k-icon k-i-folder").Click("onArchiveClick").HtmlAttributes(new { title = "Archive" }); // Archive button with tooltip
                                command.Custom("Save to Excel").Text(" ").IconClass("k-icon k-i-file-excel").Click("onSaveToExcelClick").HtmlAttributes(new { title = "Save to Excel" }); // Save to Excel button with tooltip
                                command.Custom("Email Estimate").Text(" ").IconClass("k-icon k-i-email").Click("onEmailEstimateClick").HtmlAttributes(new { title = "Email Estimate" }); // Email Estimate button with tooltip
                            }).Title("Actions").Width(220).HtmlAttributes(new { @class = "action-buttons" }); // Set a fixed width for the Actions column
                        })
                        
                        .ToolBar(toolbar => {
                            toolbar.Create().Text("Add").IconClass("k-icon k-i-plus").HtmlAttributes(new { 
                                title = "Add new record",
                                @class = "k-primary" 
                            });
                            toolbar.Save().SaveText("Save").CancelText("Cancel")
                                .HtmlAttributes(new { 
                                    title_save = "Save all changes",
                                    title_cancel = "Discard changes"
                                });
                        })
                        .Editable(editable => editable.Mode(GridEditMode.InCell))
                        .Pageable()
                        .Sortable()
                        .ClientDetailTemplateId("template")
                        .Resizable(r => r.Columns(true))
                        .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
                        .ColumnMenu(menu => menu.Enabled(true))
                        .Scrollable(s => s.Height("auto"))
                        .DataSource(dataSource => dataSource
                            .Ajax()
                            .Model(model =>
                            {
                                model.Id(c => c.RbMasterlistId);
                                model.Field(c => c.RebuiltStockNum).Editable(true);
                                model.Field(c => c.MmsStockCode).Editable(true);
                                model.Field(u => u.BusIds).DefaultValue(new List<int>());
                                model.Field(u => u.BusNames).DefaultValue(new List<string>());
                                model.Field(f => f.CostSavingPerUnitDummy).Editable(false);
                                model.Field(f => f.PercentageSavingPerUnitDummy).Editable(false);
                            })
                            .Events(events =>
                            {
                                events.RequestEnd("onRequestEnd"); 
                                events.Error("onDataSourceError");
                            })
                            .Read(read => read.Url(Url.Action("GetRebuiltPartsView", "RebuiltParts")).Type(HttpVerbs.Get))
                            .Create(create => create.Url(Url.Action("AddRebuiltPartsView", "RebuiltParts")).Type(HttpVerbs.Post))
                            .Update(update => update.Url(Url.Action("UpdateRebuiltPartsView", "RebuiltParts")).Type(HttpVerbs.Post))
                        )
                    )
                }
                catch (Exception ex)
                {
                    <div class="alert alert-danger">Error loading rebuilt parts: @ex.Message</div>
                }
            </text>);

        tabstrip.Add().Text("Archived Parts")
            .Content(@<text>
                @try
                {
                    @Html.Partial("_ArchivedIndex")
                }
                catch (Exception ex)
                {
                    <div class="alert alert-danger">Error loading archived parts: @ex.Message</div>
                }
            </text>);
    })
)

<style>
    .k-grid td {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }
    
    .k-grid-header .k-header {
        white-space: normal;
        vertical-align: top;
    }
    
    .k-grid .k-hierarchy-col {
        width: 10px; /* Fix detail template arrow column width */
    }
</style>

<div id="notification"></div>
<!-- Placeholder for dynamically loaded email estimate popup and notification -->
<div id="email-estimate-container" style="display: none;">
    @Html.Partial("_EmailEstimatePopup")
    <div id="estimates-container"></div>
     
</div>
<input type="hidden" name="SelectedBuses" id="SelectedBusesHidden" value="" />
<!-- Rest of HTML remains unchanged -->

@section Scripts {
    <script>
        // Truncation functions
        function truncateText(text, max=25) {
            return text?.length > max ? text.substr(0, max) + '...' : text;
          // return text;
        }

        function truncateWords(text, wordCount=10) {
            if (!text) return '';
            const words = text.split(/\s+/);
            return words.length > wordCount ? 
                words.slice(0, wordCount).join(' ') + '...' : 
                text;
        }

        // Vehicle Series display handler
        function formatVehicleSeries(buses) {
            if (!buses || !buses.length) return 'Select Vehicle';
            return buses.map(b => 
                `<span title="${b.BusName}">${truncateWords(b.BusName, 10)}</span>`
            ).join(', ');
        }

        // Update client template for Vehicle Series
        function refreshVehicleSeriesTemplate() {
            const grid = $("#RebuiltPartsGrid").data("kendoGrid");
            grid.refresh();
        }

       
    </script>

    <script>
        var tabIndex = -1; //-1 when  Main grid is acive, if below tabs are active get the resp. tabIndex ssk
        var tabStripName = "";
        $(document).ready(function () {
         

            /////////
            $("#email-estimate-container").hide();
            $("#archived-email-estimate-container").hide();
        
            var grid = $("#RebuiltPartsGrid").data("kendoGrid");

            // Initialize Kendo Notification for displaying messages
            var notificationElement = $("#notification");
            if (notificationElement.length === 0) {
                console.error("Notification element not found in the DOM.");
            } else {
                var notification = notificationElement.kendoNotification({
                    position: {
                        pinned: true,
                        top: 50,
                        right: 50
                    },
                    autoHideAfter: 5000, // Hide after 5 seconds
                    stacking: "down"
                }).data("kendoNotification");

                // // Bind the Save event for the grid
                // grid.bind("save", function (e) {
                //     // Optionally, update the UI with the response
                //     // Show a notification
                   
                //     var notification = $("#notification").data("kendoNotification");
                //    // notification.show("Vehicle Updated Successfully", "info");
                //     notification.show("Updated part successfully : " + e.model.RebuiltStockNum); // Display the stock number in the notification
                //     //$("#RebuiltPartsGrid").data("kendoGrid").dataSource.read(); //force refresh grid
                // });

                // Bind the Save event for the grid
                // grid.bind("save", function (e) {
                //     debugger;
                //     notification.show(e.model.RebuiltStockNum);
                //     // This event is triggered when the user clicks the Update button
                //     $.post('@Url.Action("UpdateRebuiltPartsView", "RebuiltParts")', { rebuiltPartNum: e.model.RebuiltStockNum })
                //         .done(function (data) {
                //             if (notification) {
                //                 notification.show("Changes saved successfully!", "success");
                //             } else {
                //                 console.error("Notification is not initialized.");
                //             }
                //         })
                //         .fail(function (xhr, status, error) {
                //             notification.show(e.model.RebuiltStockNum);
                //             console.error("Error saving changes: ", error);
                //             if (notification) {
                //                 notification.show("An error occurred while saving changes. Please try again.", "error");
                //             } else {
                //                 console.error("Notification is not initialized.");
                //             }
                //         });
                // });

                // Bind the Cancel event for the grid
                grid.bind("cancel", function (e) {
                    // This event is triggered when the user clicks the Cancel button
                    $.post('@Url.Action("CancelDetails", "RebuiltParts")', { rebuiltPartNum: e.model.RebuiltStockNum })
                        .done(function (data) {
                            if (notification) {
                                notification.show("Changes discarded!", "info");
                            } else {
                                console.error("Notification is not initialized.");
                            }
                        })
                        .fail(function (xhr, status, error) {
                            console.error("Error discarding changes: ", error);
                            if (notification) {
                                notification.show("An error occurred while discarding changes. Please try again.", "error");
                            } else {
                                console.error("Notification is not initialized.");
                            }
                        });
                });

                grid.bind("detailInit", function (e) {
                    const rebuiltStockNum = e.data.RebuiltStockNum;
                    
                    console.log("Detail initialization started for RebuiltStockNum: " + e.data.RebuiltStockNum);
                    var tabUrlLabourDetail = '@Url.Action("LabourDetailsPartial", "RebuiltParts")' + '?rebuiltPartNum=' + e.data.RebuiltStockNum;
                    var tabUrlLabourHourSummary = '@Url.Action("LabourHourSummaryPartial", "RebuiltParts")' + '?rebuiltPartNum=' + e.data.RebuiltStockNum;
                    var tabUrlMaterialCostSummary = '@Url.Action("MaterialCostSummaryPartial", "RebuiltParts")' + '?rebuiltPartNum=' + e.data.RebuiltStockNum;
                    var tabScPartDetail = '@Url.Action("ScPartsUsedInRbParts", "RebuiltParts")' + '?rebuiltPartNum=' + e.data.RebuiltStockNum;
                    var tabUrlNscDetail = '@Url.Action("NscDetailsPartial", "RebuiltParts")' + '?rebuiltPartNum=' + e.data.RebuiltStockNum;
                    var tabUrlRbPartDetail = '@Url.Action("RbDetailsPartial", "RebuiltParts")' + '?rebuiltPartNum=' + e.data.RebuiltStockNum;
                    var tabUrlTotalCost = '@Url.Action("TotalCostPartial", "RebuiltParts")' + '?rebuiltPartNum=' + e.data.RebuiltStockNum;

                    // Get the container for the detail template
                    var container = e.detailCell.find("#detail-template-" + e.data.RebuiltStockNum);

                    // Load the TabStrip structure
                    container.html(`
                                <div id="tabstrip-container-${e.data.RebuiltStockNum}">
                                    <ul>
                                         <li>Labour Details</li>
                                        <li>Labour Hour</li>
                                        <li>Material Cost</li>
                                        <li>Stock Coded Parts</li>
                                        <li>Non Stock Coded Parts</li>
                                        <li>Rebuilt Parts</li>
                                       
                                        <li>Total Cost</li>
                                    </ul>
                                    
                                    <div id="labour-details-content-${rebuiltStockNum}"></div>
                                    <div id="labour-hour-summary-content-${rebuiltStockNum}"></div>
                                    <div id="material-cost-summary-content-${rebuiltStockNum}"></div>
                                    <div id="material-details-content-${rebuiltStockNum}"></div>
                                    <div id="nsc-details-content-${rebuiltStockNum}"></div>
                                    <div id="rb-part-details-content-${rebuiltStockNum}"></div>
                                    
                                    <div id="total-cost-content-${rebuiltStockNum}">"></div>
                                </div>
                            `);

                    // Initialize the Kendo TabStrip
                    
                    var tabStrip = $("#tabstrip-container-" + e.data.RebuiltStockNum).kendoTabStrip({
                        animation: { open: { effects: "fadeIn" } },
                        select: function (e) {
                             tabIndex = $(e.item).index(); // Get the index of the selected tab
                             tabStripName = e.sender.element.attr("id") ; //ssk tabStripName

                            // Check for unsaved changes in the current tab
                            var currentTabContent = tabStrip.contentElement(tabStrip.select().index());
                            var currentGrid = $(currentTabContent).find(".k-grid").data("kendoGrid");
                            console.log("*******currentGrid :", currentGrid);

                             console.log("*******currentTabContent :", currentTabContent);
                            // var gridName = currentGrid.element.attr("id");
                            // console.log("*******currentGridName :", gridName);
                           

                             tabIndex = $(e.item).index(); // Get the index of the selected tab
                           
                            if (currentGrid &&  (currentGrid.dataSource.hasChanges()) ) { //kendoNotification show waring for reaonly
                            
                                // Show a warning notification
                                if (notification) {
                                    notification.show("You have unsaved changes. Click on Update or Cancel changes before clicking next tab.", "warning");
                                   // notification.show(currentGrid);
                                  //  notification.show(currentGrid.dataSource.hasChanges());
                                } else {
                                    console.error("Notification is not initialized.");
                                }
                                e.preventDefault(); // Prevent the tab switch
                                return;
                            }

                            // Load the partial view content for the selected tab
                            var tabUrl = tabIndex == 0 ? tabUrlLabourDetail :
                                tabIndex == 1 ? tabUrlLabourHourSummary :
                                    tabIndex == 2 ? tabUrlMaterialCostSummary :
                                        tabIndex == 3 ? tabScPartDetail :
                                            tabIndex == 4 ? tabUrlNscDetail :
                                                tabIndex == 5 ? tabUrlRbPartDetail :
                                                    tabUrlTotalCost;

                            $.get(tabUrl)
                                .done(function (data) {
                                     
                                    $(e.contentElement).html(data);
                                    kendo.init($(e.contentElement)); // Reinitialize Kendo widgets

                                    // Reset the hasChanges() state for read-only tabs
                                    if (tabIndex == '6' || tabIndex == '1' || tabIndex == '2') { //read-only tab
                                        var grid = $(e.contentElement).find(".k-grid").data("kendoGrid");
                                         console.log("*******currentGrid2 :", currentGrid);
                                         // var gridName = grid.element.attr("id");
                                        // console.log("*******currentGridName2 :", gridName);
                                       // console.log("*******currentTabContent :", currentTabContent);
                                            grid.dataSource.read(); // Refresh the data source                                      
                                    }
                                })
                                .fail(function (xhr, status, error) {
                                    console.error("Error loading tab content: ", error);
                                    if (notification) {
                                        notification.show("An error occurred while loading the tab content. Please try again.", "error");
                                    } else {
                                        console.error("Notification is not initialized.");
                                    }
                                });
                        }
                    }).data("kendoTabStrip");

                    // Load the first tab's content
                    $.get(tabUrlLabourDetail)
                        .done(function (data) {
                            $("#labour-details-content").html(data);
                            kendo.init($("#labour-details-content")); // Reinitialize Kendo widgets
                        })
                        .fail(function (xhr, status, error) {
                            console.error("Error loading initial tab content: ", error);
                            if (notification) {
                                notification.show("An error occurred while loading the initial tab content. Please try again.", "error");
                            } else {
                                console.error("Notification is not initialized.");
                            }
                        });
                });
            }
            //archived --------------------------------------------
            var grid = $("#ArchivedRebuiltPartsGrid").data("kendoGrid");

            // Initialize Kendo Notification for displaying messages
            var notificationElement = $("#archived-notification");
            if (notificationElement.length === 0) {
                console.error("Notification element not found in the DOM.");
            } else {
                var notification = notificationElement.kendoNotification({
                    position: {
                        pinned: true,
                        top: 50,
                        right: 50
                    },
                    autoHideAfter: 5000, // Hide after 5 seconds
                    stacking: "down"
                }).data("kendoNotification");

                // Bind the detailInit event for the grid
                grid.bind("detailInit", function (e) {
                    console.log("Detail initialization started for RebuiltStockNum: " + e.data.RebuiltStockNum);
                    var tabUrlLabourDetail = '@Url.Action("LabourDetailsPartial", "RebuiltParts")' + '?rebuiltPartNum=' + e.data.RebuiltStockNum;
                    var tabUrlLabourHourSummary = '@Url.Action("LabourHourSummaryPartial", "RebuiltParts")' + '?rebuiltPartNum=' + e.data.RebuiltStockNum;
                    var tabUrlMaterialCostSummary = '@Url.Action("MaterialCostSummaryPartial", "RebuiltParts")' + '?rebuiltPartNum=' + e.data.RebuiltStockNum;
                    var tabScPartDetail = '@Url.Action("ScPartsUsedInRbParts", "RebuiltParts")' + '?rebuiltPartNum=' + e.data.RebuiltStockNum;
                    var tabUrlNscDetail = '@Url.Action("NscDetailsPartial", "RebuiltParts")' + '?rebuiltPartNum=' + e.data.RebuiltStockNum;
                    var tabUrlRbPartDetail = '@Url.Action("RbDetailsPartial", "RebuiltParts")' + '?rebuiltPartNum=' + e.data.RebuiltStockNum;
                    var tabUrlTotalCost = '@Url.Action("TotalCostPartial", "RebuiltParts")' + '?rebuiltPartNum=' + e.data.RebuiltStockNum;

                    // Get the container for the detail template
                    var container = e.detailCell.find("#archived-detail-template-" + e.data.RebuiltStockNum);

                    // Load the TabStrip structure
                    container.html(`
                                <div id="archived-tabstrip-container-${e.data.RebuiltStockNum}">
                                    <ul>
                                        <li class="k-state-active">Labour Details</li>
                                        <li>Labour Hour</li>
                                        <li>Material: Cost</li>
                                        <li>Stock Coded Parts</li>
                                        <li>Non Stock Coded Parts</li>
                                        <li>Rebuilt Built Parts</li>
                                        <li>Total Cost</li>
                                    </ul>
                                    <div id="archived-labour-details-content"></div>
                                    <div id="archived-labour-hour-summary-content"></div>
                                    <div id="archived-material-cost-summary-content"></div>
                                    <div id="archived-material-details-content"></div>
                                    <div id="archived-nsc-details-content"></div>
                                    <div id="archived-rb-part-details-content"></div>
                                    <div id="archived-total-cost-content"></div>
                                </div>
                            `);

                    // Initialize the Kendo TabStrip
                    var tabStrip = $("#archived-tabstrip-container-" + e.data.RebuiltStockNum).kendoTabStrip({
                        animation: { open: { effects: "fadeIn" } },
                        select: function (e) {
                             tabIndex = $(e.item).index(); // Get the index of the selected tab
                              tabStripName = e.sender.element.attr("id") ; //ssk tabStripName

                            // Load the partial view content for the selected tab
                             tabUrl = tabIndex == 0 ? tabUrlLabourDetail :
                                tabIndex == 1 ? tabUrlLabourHourSummary :
                                    tabIndex == 2 ? tabUrlMaterialCostSummary :
                                        tabIndex == 3 ? tabScPartDetail :
                                            tabIndex == 4 ? tabUrlNscDetail :
                                                tabIndex == 5 ? tabUrlRbPartDetail :
                                                    tabUrlTotalCost;

                            $.get(tabUrl)
                                .done(function (data) {
                                    $(e.contentElement).html(data);
                                    kendo.init($(e.contentElement)); // Reinitialize Kendo widgets
                                })
                                .fail(function (xhr, status, error) {
                                    console.error("Error loading tab content: ", error);
                                    if (notification) {
                                        notification.show("An error occurred while loading the tab content. Please try again.", "error");
                                    } else {
                                        console.error("Notification is not initialized.");
                                    }
                                });
                        }
                    }).data("kendoTabStrip");

                    // Load the first tab's content
                    $.get(tabUrlLabourDetail)
                        .done(function (data) {
                            $("#archived-labour-details-content").html(data);
                            kendo.init($("#archived-labour-details-content")); // Reinitialize Kendo widgets
                        })
                        .fail(function (xhr, status, error) {
                            console.error("Error loading initial tab content: ", error);
                            if (notification) {
                                notification.show("An error occurred while loading the initial tab content. Please try again.", "error");
                            } else {
                                console.error("Notification is not initialized.");
                            }
                        });
                });
            }
            //archived end  ----------------------------------------
        });

        function onArchiveClick(e) {
            e.preventDefault();
            var grid = $("#RebuiltPartsGrid").data("kendoGrid");
            var dataItem = grid.dataItem($(e.currentTarget).closest("tr"));

            // Call the controller action with the entire dataItem as JSON
            $.ajax({
                url: '@Url.Action("ArchiveRBDetails", "RebuiltParts")',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(dataItem),
                success: function (data) {
                    // Display a Kendo Notification
                    var notification = $("#notification").kendoNotification({
                        position: {
                            pinned: true,
                            top: 50,
                            right: 50
                        },
                        autoHideAfter: 5000, // Hide after 5 seconds
                        stacking: "down"
                    }).data("kendoNotification");

                    notification.show("Archive is clicked.", "info");
                },
                error: function (xhr, status, error) {
                    console.error("Error archiving: ", error);
                }
            });
        }

        function onEmailEstimateClick(e) {
            e.preventDefault();
            var grid = $("#RebuiltPartsGrid").data("kendoGrid");
            var dataItem = grid.dataItem($(e.currentTarget).closest("tr"));
            var rebuiltPartNum = dataItem.RebuiltStockNum;

            // Show the email estimate container
            $("#email-estimate-container").show();

            // Generate the Excel file by calling SaveToExcel via AJAX
            $.ajax({
                url: '@Url.Action("SaveToExcel", "Export")',
                type: 'GET',
                data: { rebuiltPartNum: rebuiltPartNum },
                xhrFields: {
                    responseType: 'blob' // Ensure the response is treated as a binary file
                },
                success: function (data) {
                    // Create a link element to trigger the file download
                    var link = document.createElement('a');
                    link.href = window.URL.createObjectURL(data);
                    link.download = `${rebuiltPartNum}_RebuiltParts_Estimate.xlsx`;
                    link.click();

                    // Set the subject with the rebuilt number and today's date
                    var today = new Date();
                    var subject = `Rebuilt Part Estimates for ${rebuiltPartNum} - Date ${today.toLocaleDateString()} ${today.toLocaleTimeString()}`;

                    // Set the form values
                    $("#to").val("");
                    $("#subject").val(subject);
                    $("#body").val(`Dear Sir/Madam,\nPlease find attached here with Rebuilt Part Estimate for ${rebuiltPartNum}.\n\nThank you`);

                    // Open the Kendo Window
                    var kendoWindow = $("#emailEstimateWindow").data("kendoWindow");
                    if (kendoWindow) {
                        kendoWindow.center().open();
                    } else {
                        console.error("Kendo Window not found.");
                    }
                },
                error: function (xhr, status, error) {
                    console.error("Error downloading Excel file:", error);
                }
            });
        }

        function onSaveToExcelClick(e) {
            e.preventDefault();
            var grid = $("#RebuiltPartsGrid").data("kendoGrid");
            var dataItem = grid.dataItem($(e.currentTarget).closest("tr"));
            var rebuiltPartNum = dataItem.RebuiltStockNum;

            // Directly trigger the file download
            window.location.href = '@Url.Action("SaveToExcel", "Export")' + '?rebuiltPartNum=' + rebuiltPartNum;
        }

        function onCancelEmailClick() {
            // Close the Kendo Window
            var window = $("#emailEstimateWindow").data("kendoWindow");
            window.close();

            // Show a notification
            var notification = $("#notification").data("kendoNotification");
            notification.show("Email Request Cancelled", "info");
        }

        function getDropDownListParams() {
           // debugger;
           console.log("********** inside getDropDownListParams");
            var gridName = "RebuiltPartsGrid";
            console.log("tabStripName :", tabStripName); //ssk
            console.log("tabIndex :", tabIndex);           
             //if columnName == "Keyword" and  we are in the main grid
            if (tabIndex == -1) 
             { 
                 gridName = "RebuiltPartsGrid";
             }
            else if (tabIndex == 0) 
            { 
                 gridName = "LabourDetailsGrid";
            }
            else if (tabIndex == 3) 
            { 
                 gridName = "ScPartsMaterialDetailsRebuiltPartsGrid";
            }
            else if (tabIndex == 4) 
            { 
                 gridName = "NscPartsMaterialDetailsRebuiltPartsGrid";
            }
            else if (tabIndex == 5) 
            { 
                 gridName = "RbPartsMaterialDetailsRebuiltPartsGrid";
            }
            console.log("gridName :", gridName);

            var passedGridName = "#" +  gridName + "";
            console.log("passedGridName :", passedGridName);
            // 1. Get grid reference
            var grid = $(passedGridName).data("kendoGrid");
             console.log("*******currentGrid3 :", grid);
            //  var gridName = grid.element.attr("id");
              console.log("*******currentGridName3 :", gridName);
                           //  console.log("*******currentTabContent :", currentTabContent);
            if (!grid) {
                console.warn("%%%%%%% Grid not found");
                return {};
            }

            // 2. Find currently edited cell
            var editCell = grid.element.find(".k-edit-cell");
            if (editCell.length === 0) {
                console.warn("No active edit cell");
                return {};
            }

            // 3. Find dropdown input in edit cell
            var dropdownInput = editCell.find("input[data-role='dropdownlist']");
            if (!dropdownInput.length) {
                console.warn("Dropdown input not found");
                return {};
            }

            // 4. Get column name from data attribute
            var columnName = dropdownInput.attr("data-column") || "";
        
            // 5. Get dropdown instance and current filter value
            var dropdown = dropdownInput.data("kendoDropDownList");
            if (!dropdown) {
                console.warn("Dropdown instance not found");
                return {};
            }

            // 6. Get the ACTUAL FILTER TEXT from the DataSource
            var searchText = "";
            var currentFilter = dropdown.dataSource.filter();
            if (currentFilter && currentFilter.filters && currentFilter.filters.length > 0) {
                searchText = currentFilter.filters[0].value; // Get the filter value
            }

            console.log("Params:", { 
                columnName: columnName, 
                searchText: searchText 
            });

            return {
                columnName: columnName,
                searchText: searchText
            };
    }

        function onDropDownChange(e) {
            console.log("********* onDropDownChange");
            var column = e.sender.element.attr("data-column");
            console.log("column :", column);
            //if columnName == "Keyword" and  we are in the main grid, reset tabIndex 
            if (column == "KeywWord") {
                tabIndex = -1;
            }
        }
    </script>

    <script id="template" type="text/x-kendo-template">
        <div id="detail-template-#=RebuiltStockNum#"></div>
    </script>
    <script>
                  

        /////////////////
         function onArchivedEmailEstimateClick(e) {
            e.preventDefault();
            var grid = $("#ArchivedRebuiltPartsGrid").data("kendoGrid");
            var dataItem = grid.dataItem($(e.currentTarget).closest("tr"));
            var rebuiltPartNum = dataItem.RebuiltStockNum;

            // Show the email estimate container
            $("#archived-email-estimate-container").show();

            // Generate the Excel file by calling SaveToExcel via AJAX
            $.ajax({
                url: '@Url.Action("SaveToExcel", "Export")',
                type: 'GET',
                data: { rebuiltPartNum: rebuiltPartNum },
                xhrFields: {
                    responseType: 'blob' // Ensure the response is treated as a binary file
                },
                success: function (data) {
                    // Create a link element to trigger the file download
                    var link = document.createElement('a');
                    link.href = window.URL.createObjectURL(data);
                    link.download = `${rebuiltPartNum}_RebuiltParts_Estimate.xlsx`;
                    link.click();

                    // Set the subject with the rebuilt number and today's date
                    var today = new Date();
                    var subject = `Rebuilt Part Estimates for ${rebuiltPartNum} - Date ${today.toLocaleDateString()} ${today.toLocaleTimeString()}`;

                    // Set the form values
                    $("#to").val("");
                    $("#subject").val(subject);
                    $("#body").val(`Dear Sir/Madam,\nPlease find attached here with Rebuilt Part Estimate for ${rebuiltPartNum}.\n\nThank you`);

                    // Open the Kendo Window
                    var kendoWindow = $("#emailEstimateWindow").data("kendoWindow");
                    if (kendoWindow) {
                        kendoWindow.center().open();
                    } else {
                        console.error("Kendo Window not found.");
                    }
                },
                error: function (xhr, status, error) {
                    console.error("Error downloading Excel file:", error);
                }
            });
        }

        function onArchivedSaveToExcelClick(e) {
            e.preventDefault();
            var grid = $("#ArchivedRebuiltPartsGrid").data("kendoGrid");
            var dataItem = grid.dataItem($(e.currentTarget).closest("tr"));
            var rebuiltPartNum = dataItem.RebuiltStockNum;

            // Directly trigger the file download
            window.location.href = '@Url.Action("SaveToExcel", "Export")' + '?rebuiltPartNum=' + rebuiltPartNum;
        }
    </script>
    <script id="archived-template" type="text/x-kendo-template">
        <div id="archived-detail-template-#=RebuiltStockNum#"></div>
    </script>
   @* <script>
        // Event triggered before any CRUD operation (Read, Update, Destroy)
        function onRequestStart(e) {
            // Check if the request type is Update or Destroy
            if (e.type === "update" || e.type === "destroy") {
                var grid = $("#RebuiltPartsGrid").data("kendoGrid");
                var selectedRow = grid.select(); // Get the selected row
                var dataItem = grid.dataItem(selectedRow); // Get the data for the selected row

                if (dataItem && dataItem.RebuiltStockNum) {
                    // Append RebuiltStockNum to the request
                    e.sender.transport.options.update.data = { RebuiltStockNum: dataItem.RebuiltStockNum };
                    e.sender.transport.options.destroy.data = { RebuiltStockNum: dataItem.RebuiltStockNum };
                }
            }
        }
    </script> *@
    <script>
        function onBusChange(e) {
                 console.log("event: buschange");
                var selectedBuses = this.value();
                console.log("selected buses :");
                console.log(selectedBuses);
                               
                $.ajax({
                url: '@Url.Action("GetSelectedBuses", "RebuiltParts")',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ buses: selectedBuses }),
                beforeSend: function (xhr) {
                   
                    console.log("Sending data :", JSON.stringify({ buses: selectedBuses }));
                },
                success: function (data) {
                  
                    console.log('Success:', data);
                    
                },

                error: function (error, data) {
                    console.log('datasent : ', data);
                    console.error('Error:', error);
                }
            });
            }

            function onBusDataBound() {
                console.log("event: busdataBound");

            }

            function errorHandler(e) {
            if (e.errors) {
                var message = "Errors:\n";
                $.each(e.errors, function (key, value) {
                    if ('errors' in value) {
                        $.each(value.errors, function () {
                            message += this + "\n";
                        });
                    }
                });
                alert(message);
            }
        }
       
    </script>
    <script>
             
        // Error handler
        function onDataSourceError(e) {
              // debugger;
                let errorMessage = "onDataSourceError - Operation failed: ";

                if (e.errors) {
                    // Display validation errors
                    $.each(e.errors, function (key, value) {
                        if (value.errors) {
                            errorMessage += value.errors.join(", ");
                        }
                    });
                } 
                else if (e.errorThrown) {
                    errorMessage += e.errorThrown;
                } else if (e.xhr && e.xhr.responseText) {
                    errorMessage += e.xhr.responseText;
                }

                var notification = $("#notification").data("kendoNotification");
                notification.error(errorMessage);
            }

        // Success handler
        function onRequestEnd(e) {
           var notification = $("#notification").data("kendoNotification");
           notification.success(e.type);
          // Initialize notification FIRST
                 
                if (e.type === "create") {
                    var notification = $("#notification").data("kendoNotification");                    
                    notification.success("Record created successfully");
                  //  $("#userGrid").data("kendoGrid").dataSource.read(); //force refresh grid
                } else if (e.type === "update") {
                   var notification = $("#notification").data("kendoNotification");                   
                    notification.success("Record updated successfully");
                  //   $("#userGrid").data("kendoGrid").dataSource.read(); //force refresh grid
                } else if (e.type === "destroy") {
                    var notification = $("#notification").data("kendoNotification");                    
                     notification.success("Record deleted successfully");
                  //  $("#userGrid").data("kendoGrid").dataSource.read(); //force refresh grid
                } 
            }
    </script>

    <script>
    function getAutoCompleteParams() {
        var input = $("input[data-role='autocomplete']:focus");
        return {
            columnName: input.attr("name"),
            searchText: input.val() || "" // Handle empty search text
        };
    }
   
    function getComboBoxParams() {
        var input = $(".k-combobox input.k-input:focus");
        return {
            columnName: input.attr("name")?.replace("_input", ""),
            searchText: input.val() || ""
        };
    }
    
    </script>
   
    
       @* Start : Add following for validation *@
    <script>
        // Validation for AutoComplete
        function validateAutoCompleteSelection(e) {
            const column = e.sender.element.attr("data-column");
            const value = e.sender.value();
            let regex, error;

            if (column === "LabourDefn") {
                regex = /^[a-zA-Z0-9-()\s]*$/;
                error = "Invalid Labour Definition, check for special characters";
            }
            else if (column === "CostCentre") {
                regex = /^[a-zA-Z0-9-&()\s]*$/;
                error = "Invalid Cost Centre, check for special characters";
            }
            else if (column === "Task") {
                regex = /^[a-zA-Z0-9-&()\s]*$/;
                error = "Invalid Task, check for special characters";
            }

            if (regex && !regex.test(value)) {
                notification.error(error);
                e.sender.value("");
            }
        }

        // Inline Edit Validation
        function onEdit(e) {
            showNotification("info", "onEdit : " + e.field + ".");
            //Recalculate Totalcost
            if (["Percentage", "Qty", "OemPartCost"].includes(e.field)) {
                e.model.set("needsRecalculation", true);
                showNotification("info", "Please recalculate Total Cost after modifying " + e.field + ".");
            }
            const validationRules = {
                "LabourDefn": {
                    regex: /^[a-zA-Z0-9()\s]*$/,
                    error: "Invalid Supplier Name, check for special characters"
                },
                "CostCentre": {
                    regex: /^[a-zA-Z0-9&-()\s]*$/,
                    error: "Invalid Supplier Name, check for special characters"
                },
                "Task": {
                    regex: /^[a-zA-Z0-9&-()\s]*$/,
                    error: "Invalid Task, check for special characters"
                }
            };

            Object.entries(validationRules).forEach(([field, rule]) => {
                const input = e.container.find(`input[name='${field}']`);
                input.on("input", function() {
                    if (!rule.regex.test(this.value)) {
                        notification.error(rule.error);
                        $(this).addClass("k-invalid");
                    } else {
                        $(this).removeClass("k-invalid");
                    }
                });
            });

           
        }

        // Keep existing notification and error handlers
    </script>
    @* End : Add  validation *@
    <script>
        function refreshScPartDetails(e) {
            var grid = $("#ScPartsMaterialDetailsRebuiltPartsGrid").data("kendoGrid");
            var dataItem = grid.dataItem($(e.currentTarget).closest("tr"));
            var notification = $("#notification").data("kendoNotification");

            if (!dataItem.MMSStockCode) {
                notification.show("Please enter a valid Stock Code before refreshing", "error");
                return;
            }

            $.ajax({
                url: '@Url.Action("GetScPartDetails", "ScPartsUsedInRbParts")',
                data: { mmsStockCode: dataItem.MMSStockCode },
                beforeSend: function () {
                    notification.show("Fetching part details...", "info");
                },
                success: function (response) {
                    if (response && response.PartType && response.DetailedDesc) {
                        var dialog = $("#partDetailsDialog").data("kendoDialog");
                        dialog.content(`
                            <div style="padding: 10px;">
                                <p><strong>Part Type:</strong> ${response.PartType}</p>
                                <p><strong>Part Description:</strong> ${response.DetailedDesc}</p>
                                <p><strong>Part Unit CostCentre ($/unit):</strong> ${response.UnitCost}</p>
                            </div>
                        `);
                        dialog.open();
                    } else {
                        notification.show("No matching parts found for this Stock Code", "warning");
                    }
                },
                error: function (xhr) {
                    var errorMessage = xhr.status === 404
                        ? "Stock Code not found in system"
                        : "Error retrieving part details";
                    notification.show(errorMessage, "error");
                }
            });
        }

    </script>
    <script>
        function parseCurrency(value) {
            try {
                if (!value) return 0;
                // Remove non-numeric characters except digits, dots, and minus signs
                var numString = value.toString().replace(/[^0-9.-]/g, '');
                var num = parseFloat(numString);
                return isNaN(num) ? 0 : num;
            } catch (e) {
                showError("Error parsing currency: " + e.message);
                return 0;
            }
        }

        function formatNegative(value) {
            try {
                if (typeof value !== 'number') {
                    value = 0;
                }
                // Format to 2 decimal places and wrap negatives in parentheses
                return value < 0 ? `(${Math.abs(value).toFixed(2)})` : value.toFixed(2);
            } catch (e) {
                showError("Error formatting number: " + e.message);
                return '0.00';
            }
        }

        function calculateCostSaving(data) {
            try {
                var buyNew = parseCurrency(data.BuyNewCost);
                var reman = parseCurrency(data.RemanCost);
                var costSaving = buyNew - reman;
                return formatNegative(costSaving);
            } catch (e) {
                showError("Error calculating cost saving: " + e.message);
                return '0.00';
            }
        }

        function calculatePercentageSaving(data) {
            try {
                var buyNew = parseCurrency(data.BuyNewCost);
                var reman = parseCurrency(data.RemanCost);
                var costSaving = buyNew - reman;

                if (buyNew === 0) return '0.00%'; // Avoid division by zero

                var percentage = (costSaving / buyNew) * 100;
                return formatNegative(percentage) + '%';
            } catch (e) {
                showError("Error calculating percentage saving: " + e.message);
                return '0.00%';
            }
        }

        function showError(message) {
            var notification = $("#notification").data("kendoNotification");
            if (notification) {
                notification.error(message);
            } else {
                console.error("Notification widget not initialized. Error: " + message);
            }
        }
    </script>

    <script>
        function refreshNscPartDetails(e) {
            var grid = $("#NscPartsMaterialDetailsRebuiltPartsGrid").data("kendoGrid");
            var dataItem = grid.dataItem($(e.currentTarget).closest("tr"));
            var notification = $("#notification").data("kendoNotification");

            if (!dataItem.OrigSuppNum) {
                notification.show("Supplier Number is required to refresh details", "error");
                return;
            }

            $.ajax({
                url: '@Url.Action("RefreshNscPartDetails", "NscPartsUsedInRbParts")',
                data: { origSuppNum: dataItem.OrigSuppNum },
                beforeSend: function() {
                    notification.show("Refreshing part details...", "info");
                },
                success: function(response) {
                    if (response.Message) {
                        // Handle cost validation error
                        notification.show(response.Message, "error");

                        // Optional: Update other fields even if cost is invalid
                        if (response.Data) {
                            dataItem.set("OrigSupplierName", response.Data.OrigSupplierName);
                            dataItem.set("KeyWord", response.Data.KeyWord);
                            dataItem.set("Description", response.Data.Description);
                            grid.refresh();
                        }
                    } else {
                        // Update all fields
                        dataItem.set("OrigSupplierName", response.OrigSupplierName);
                        dataItem.set("KeyWord", response.KeyWord);
                        dataItem.set("Description", response.Description);
                        dataItem.set("OemPartCost", response.OemPartCost);
                        grid.refresh();
                        notification.show("Details updated successfully", "success");
                    }
                },
                error: function(xhr) {
                    var errorMessage = xhr.status === 404
                        ? "Supplier not found"
                        : "Error refreshing details";
                    notification.show(errorMessage, "error");
                }
            });
        }
    </script>

    <script>
        function onCellClose(e) {
            // Get grid instance and cell element
            const grid = e.sender;
            const cell = e.container || e.cell; // Handle different event argument structures

            // Method 1: Get field name from column index
            const columnIndex = $(cell).index();
            const column = grid.columns[columnIndex];
            let fieldName = column.field;

            // Method 2: Fallback to data-field attribute
            if (!fieldName) {
                fieldName = $(cell).attr("data-field");
            }

            // Debugging: Uncomment to see values in console
            console.log("Column Index:", columnIndex);
            console.log("Column Object:", column);
            console.log("Field Name:", fieldName);

            // Fields that require recalculation
            const criticalFields = ["Percentage", "Qty", "OemPartCost"];

            if (criticalFields.includes(fieldName)) {
                const dataItem = e.model;
                dataItem.set("needsRecalculation", true);
                showNotification("info", "Please recalculate Total Cost for this row.");
            }
        }

        

        function onSaveChanges(e) {
            const grid = $("#NscPartsMaterialDetailsRebuiltPartsGrid").data("kendoGrid");
            const needsRecalc = grid.dataSource.data().some(item => item.needsRecalculation);
            showNotification("error", "inside onSaveChates :.needsRecalc = " + needsRecalc);

            if (needsRecalc) {
                e.preventDefault();
                showNotification("error", "Recalculate Total Cost for modified rows before saving.");
            }
        }

        function recalculateTotalCost(e) {
            e.preventDefault();
            const grid = $("#NscPartsMaterialDetailsRebuiltPartsGrid").data("kendoGrid");
            const row = $(e.currentTarget).closest("tr");
            const dataItem = grid.dataItem(row);

            // Handle number formatting
            const parseNumber = (value) => {
                const num = typeof value === 'string'
                    ? parseFloat(value.replace(/,/g, ''))
                    : value;
                return isNaN(num) ? 0 : num;
            };

            const percentage = parseNumber(dataItem.Percentage);
            const qty = parseNumber(dataItem.Qty);
            const oemPartCost = parseNumber(dataItem.OemPartCost);
            console.log("Sending values:", {
                percentage: percentage,
                qty: qty,
                oemPartCost: oemPartCost
            });
            $.ajax({
                url: '@Url.Action("RecalculateTotalCost", "NscPartsUsedInRbParts")',
                type: 'POST',
                contentType: 'application/x-www-form-urlencoded',
                data: {
                    percentage: percentage,
                    qty: qty,
                    oemPartCost: oemPartCost
                },
                success: function (response) {
                    if (response.success) {
                        console.log("Received response:", response);

                        // Update data item and refresh grid
                        dataItem.set("TotalCost", response.totalCost);
                        dataItem.set("needsRecalculation", false);

                        // Force grid refresh
                       
                        grid.refresh();
                      //  grid.dataSource.sync();

                        showNotification("success", "Total Cost updated: $" + response.totalCost.toFixed(2));
                    } else {
                        showNotification("error", response.message || "Recalculation failed");
                    }
                },
                error: function (xhr) {
                    showNotification("error", "Server error: " + xhr.statusText);
                }
            });
        }

        function showNotification(type, message) {
            var notification = $("#notification").data("kendoNotification");
            if (!notification) {
                notification = $("#notification").kendoNotification({
                    position: { pinned: true, top: 50, right: 50 },
                    autoHideAfter: 5000
                }).data("kendoNotification");
            }
            notification.show(message, type);
        }
    </script>

    <script>
        function refreshRbPartDetails(e) {
            var grid = $("#RbPartsMaterialDetailsRebuiltPartsGrid").data("kendoGrid");
            var dataItem = grid.dataItem($(e.currentTarget).closest("tr"));
            var notification = $("#notification").data("kendoNotification");
            notification.show(dataItem.RebuiltStockNum, "error");

            if (!dataItem.RebuiltStockNum) {
                notification.show(dataItem.RebuiltStockNum, "error");
                notification.show("Rebuilt Part Number is required to refresh details", "error");
                return;
            }

            $.ajax({
                url: '@Url.Action("RefreshRbPartDetails", "RbPartsUsedInRbParts")',
                data: { origSuppNum: dataItem.OrigSuppNum },
                beforeSend: function() {
                    notification.show("Refreshing part details...", "info");
                },
                success: function(response) {
                    if (response.Message) {
                        // Handle cost validation error
                        notification.show(response.Message, "error");

                        // Optional: Update other fields even if cost is invalid
                        if (response.Data) {
                            dataItem.set("OrigSupplierName", response.Data.OrigSupplierName);
                            dataItem.set("KeyWord", response.Data.KeyWord);
                            dataItem.set("Description", response.Data.Description);
                            grid.refresh();
                        }
                    } else {
                        // Update all fields
                        dataItem.set("OrigSupplierName", response.OrigSupplierName);
                        dataItem.set("KeyWord", response.KeyWord);
                        dataItem.set("Description", response.Description);
                        dataItem.set("OemPartCost", response.OemPartCost);
                        grid.refresh();
                        notification.show("Details updated successfully", "success");
                    }
                },
                error: function(xhr) {
                    var errorMessage = xhr.status === 404
                        ? "Supplier not found"
                        : "Error refreshing details";
                    notification.show(errorMessage, "error");
                }
            });
        }
    </script>
}
Shared view :
_LabourDetailsRebuiltParts.cshtml :
@model IEnumerable<BCES.Models.Parts.LabourDetailsRebuiltPartsViewModel>

@{
    ViewData["Title"] = "Labour Details";
}

<h6>Labour Details New</h6>

@(Html.Kendo().Grid<BCES.Models.Parts.LabourDetailsRebuiltPartsViewModel>()
    //.Name((string)ViewBag.PartNum)
    .Name("LabourDetailsGrid")
    .Columns(columns =>
    {
        columns.Bound(c => c.Id).Title("Id").Hidden(true);
        columns.Bound(c => c.LabourDefn).Title("Labour Type").EditorTemplateName("CommonDropDownEditor").Width(10);
        columns.Bound(c => c.CostCentre).Title("Cost Centre").EditorTemplateName("CommonDropDownEditor").Width(10);
        columns.Bound(c => c.Task).Title("Labour Task").EditorTemplateName("CommonDropDownEditor").Width(10);
        columns.Bound(c => c.Usage).Title("Percent Usage").Width(10);
      //  columns.Bound(c => c.TimeAddition).Title("Time").Format("{0:N2}");
       // columns.Bound(c => c.RatePerHour).Title("Rate Per Hour").Format("{0:N2}");
        //columns.Bound(c => c.HrsReqd).Title("Hrs Reqd").Format("{0:N2}");
        columns.Bound(c => c.LabourHrs).Title("Labour Hrs").Width(10);
        columns.Bound(c => c.LabourMins).Title("Labour Mins").Width(10);

       // columns.Bound(c => c.DateRevised).Title("Date Revised");
       // columns.Command(command => command.Edit()).Title("Actions");
    })
    .ToolBar(toolbar =>
    {
        if (@ViewBag.RoleId == 1)
        {
            toolbar.Create();
            toolbar.Save();
        }
    })
    .Editable(editable => editable.Mode(GridEditMode.InCell))
    .Pageable()
    .Sortable()
    .Resizable(r => r.Columns(true))
    .Scrollable(s => s.Height("auto"))
  
    .Scrollable()
    .DataSource(dataSource => dataSource
        .Ajax()
        .Batch(true)
        .ServerOperation(false)
        .Model(model =>
        {
            model.Id(c => c.Id); 
            model.Field(c => c.LabourType);
        })
        .Events(events =>
        {
            events.RequestEnd("onRequestEnd"); 
            events.Error("onDataSourceError");
        })

        .Read(read => read.Url(Url.Action("GetLabourDetails", "LabourDetails") + "?rebuiltPartNum=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Get))
        .Create(create => create.Url(Url.Action("CreateLabourDetail", "LabourDetails") + "?rebuiltPartNum=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Post))
        
            .Update(update => update.Url(Url.Action("UpdateLabourDetail", "LabourDetails") + "?rebuiltPartNum=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType)
            .Type(HttpVerbs.Post))
            
            
        .Destroy(delete => delete.Url(Url.Action("DeleteLabourDetail", "LabourDetails") + "?rebuiltPartNum=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Post))
    )
)
@section Scripts {
    
}


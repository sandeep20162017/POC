You are Telerik Kendoo and ASP.NET core expert. I want to implement dynamic css style (theme) based on the drop down selected by the user. It  should be persistant all the pages.
Remove old telerik css today is 2025 July 18. Drop down should be after Name.
Use these for CSS
 "default": "https://kendo.cdn.telerik.com/themes/11.0.2/default/default-main.css",
                "main-dark": "https://kendo.cdn.telerik.com/themes/11.0.2/default/main-dark.css",
                "nordic": "https://kendo.cdn.telerik.com/themes/11.0.2/default/nordic.css",
                "bootstrap": "https://kendo.cdn.telerik.com/themes/11.0.2/bootstrap/bootstrap-main.css"

Pls make the changes and give me the full file
<!DOCTYPE html>
@{
    string version = "";
    string filePath = "_Version.cshtml";
    Console.WriteLine(filePath);
    if (File.Exists(filePath))
    {
        string readText = File.ReadAllText(filePath);
        version = readText.Substring(47, 16);
        if (version.Contains("0.0.0.0"))
        {
            version = "By Label";
        }
    } else
    {
        version = "0.0.0.1";
    }
}
<html>
   
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] Cost Estimation System</title>
    @using System.IO
    @using Microsoft.AspNetCore.Hosting
    @inject IWebHostEnvironment HostEnvironment

   
    <environment names="Development">
        <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.css" />
       @*  <link rel="stylesheet" href="~/css/site.css" /> *@
    </environment>

    <environment names="Staging,Production">
        <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css"
              asp-fallback-href="~/lib/bootstrap/dist/css/bootstrap.min.css"
              asp-fallback-test-class="sr-only" asp-fallback-test-property="position" asp-fallback-test-value="absolute" crossorigin="anonymous" />
    @*     <link rel="stylesheet" href="~/css/site.min.css" asp-append-version="true" /> *@
    </environment>
    <link href="https://kendo.cdn.telerik.com/2021.2.511/styles/kendo.bootstrap-v4.min.css" rel="stylesheet" type="text/css" crossorigin="anonymous" />
    <script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
    <script src="https://kendo.cdn.telerik.com/2021.2.511/js/jszip.min.js"></script>
    <script src="https://kendo.cdn.telerik.com/2021.2.511/js/kendo.all.min.js"></script>
    <script src="https://kendo.cdn.telerik.com/2021.2.511/js/kendo.aspnetmvc.min.js"></script>
    <!-- Kendo UI CSS -->
    <link href="https://kendo.cdn.telerik.com/2021.2.511/styles/kendo.common.min.css" rel="stylesheet" crossorigin="anonymous" />
    <link href="https://kendo.cdn.telerik.com/2021.2.511/styles/kendo.default-v2.min.css" rel="stylesheet" crossorigin="anonymous" />
    <link href="https://kendo.cdn.telerik.com/2021.2.511/styles/kendo.bootstrap-v4.min.css" rel="stylesheet" crossorigin="anonymous" />
    <script src="~/lib/bootstrap/dist/js/bootstrap.js"></script>
   @*  <script src="https://kendo.cdn.telerik.com/2024.4.1112/mjs/kendo.all.js" type="module"></script> *@
    <script src="@Url.Content("~/js/site.js")"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.5/jquery.validate.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/3.2.12/jquery.validate.unobtrusive.min.js"></script>
    
    
    <link rel="stylesheet" href="~/css/header-footer.css" />
    <link rel="stylesheet" href="~/css/telerik-min.css" />
    <link rel="stylesheet" href="~/css/site.min.css" />
   @* <link rel="stylesheet" href="~/css/globalsite.css" /> *@
        

</head>
<body>
    @* <nav class="navbar navbar-dark bg-dark">
    <div class="container-fluid d-flex justify-content-between p-0">
    <a class="navbar-brand d-flex align-items-center" asp-controller="Home" asp-action="Index">Your .NET Core Application</a>
    <button id="configure" class="k-rpanel-toggle k-button k-primary btn-toggle">
    <span class="k-icon k-i-menu"></span>
    </button>
    </div>
    </nav> *@
    <header>
        <div class="header_container-new">
            <div class="logo">
                <img src="~/images/ttc-main-logo.png" alt="Logo" />
            </div>
            <div class="app-name">
                <h4>Cost Estimate System</h4>
            </div>
            <div class="user-info-new">
                <img src="~/images/user.jpg" alt="User" class="user-image" />
                <span class="user-name"> | User : </span>
                <span class="user-name">@ViewBag.UserName | </span>
                <span class="user-name">Role: </span>
                <span class="user-name">@ViewBag.RoleName</span>
               
            </div>
        </div>
        
    </header>
    <div id="responsive-panel" class="navbar navbar-dark bg-light mb-4">
        <kendo-responsivepanel name="responsive-panel" auto-close="false" breakpoint="768" orientation="top">
            @* <div>
            UserName : @ViewBag.UserName;
            RoleId : @ViewBag.RoleId;
            RoleName : @ViewBag.RoleName;
            </div> *@
            @(
                Html.Kendo().Menu()
                        .Name("Menu")
                        .Items(items =>
                        {
                            items.Add().Text("Home").Action("Index", "Home", new { area = "" }).ImageUrl(Url.Content("~/images/home.png"));
                            items.Add().Text("Material Parts")                         
                           .ImageUrl(Url.Content("~/images/part.png"))
               

                            .Items(children =>
                            {
                                children.Add().Text("Stock Coded Parts")
                            .Action("Index", "StockCodedParts", new { area = "" })
                                .ImageUrl(Url.Content("~/images/part.png"));


                            children.Add().Text(" Non Stock Coded Parts")
                              .Action("NscPartsUsedIndex", "NscPartsUsed")
                            .ImageUrl(Url.Content("~/images/part.png"));

                            children.Add().Text(" Rebuilt Parts")
                .Action("Index", "Common", new { area = "" }).ImageUrl(Url.Content("~/images/part.png"));
                @* .Action("RebuiltPartsIndex", "RebuiltParts", new { area = "" }).ImageUrl(Url.Content("~/images/part.png"));  *@
                                });

                                items.Add().Text("Vehicle Estimate").Action("VehiclesIndex", "Vehicles", new { area = "" }).ImageUrl(Url.Content("~/images/vehicle.png"));
                       @*  .Items(children =>
                        {
                            children.Add().Text("Vehicles")
                            .Action("VehiclesIndex", "Vehicles", new { area = "" }).ImageUrl(Url.Content("~/images/part.png"));
                           
                         }); *@
                    items.Add().Text("Buy Or Make")
                   @*   .Action("Index", "Common", new { area = "" }).ImageUrl(Url.Content("~/images/part.png")); *@
                .Action("Index", "Common", new { area = "" }).ImageUrl(Url.Content("~/images/buy.png"));
                    @* .Action("MakeVsBuyIndex", "MakeVsBuy", new { area = "" }).ImageUrl(Url.Content("~/images/buy.png")); *@
                    items.Add().Text("Reports").Action("Index", "Common", new { area = "" }).ImageUrl(Url.Content("~/images/home.png"));
                   @*  if(@ViewBag.RoleId == 1) *@ 
                    {
                       @*  items.Add().Text("Administration").Action("Index", "UserManagementGrid", new { area = "" }).ImageUrl(Url.Content("~/images/admin.png")) *@
                        items.Add().Text("Administration").ImageUrl(Url.Content("~/images/part.png"))
                       .Items(children =>
                        {
                            children.Add().Text("User Management")
                    .Action("Index", "UserManagementGrid", new { area = "" }).ImageUrl(Url.Content("~/images/part.png"));

                        @*     children.Add().Text("Role Management")
                    .Action("Index", "Role", new { area = "" }).ImageUrl(Url.Content("~/images/part.png")); *@
@* 
                            children.Add().Text("Site Management")
                    .Action("Index", "Site", new { area = "" }).ImageUrl(Url.Content("~/images/part.png")); *@

                     children.Add().Text("Labour Task Management")
                    @* .Action("Index", "Common", new { area = "" }).ImageUrl(Url.Content("~/images/part.png")); *@
                    .Action("Index", "Task", new { area = "" }).ImageUrl(Url.Content("~/images/part.png"));

                            children.Add().Text("Differential Management")
                            @* .Action("Index", "Common", new { area = "" }).ImageUrl(Url.Content("~/images/part.png")); *@
                    .Action("DifferentialIndex", "Differential", new { area = "" }).ImageUrl(Url.Content("~/images/part.png"));

                            children.Add().Text("Engine Management")
                           @*  .Action("Index", "Common", new { area = "" }).ImageUrl(Url.Content("~/images/part.png")); *@
                    .Action("EngineIndex", "Engine", new { area = "" }).ImageUrl(Url.Content("~/images/part.png"));

                            children.Add().Text("Make Model Year Management")
                            @* .Action("Index", "Common", new { area = "" }).ImageUrl(Url.Content("~/images/part.png")); *@
                    .Action("MakeModelYearIndex", "MakeModelYear", new { area = "" }).ImageUrl(Url.Content("~/images/part.png"));

                            children.Add().Text("Transmission Management")
                           @*  .Action("Index", "Common", new { area = "" }).ImageUrl(Url.Content("~/images/part.png")); *@
                    .Action("TransmissionIndex", "Transmission", new { area = "" }).ImageUrl(Url.Content("~/images/part.png"));

                            children.Add().Text("Employee Salary Management")
                           @*  .Action("Index", "Common", new { area = "" }).ImageUrl(Url.Content("~/images/part.png")); *@
                    .Action("EmpSalaryIndex", "EmpSalary", new { area = "" }).ImageUrl(Url.Content("~/images/part.png"));

                            children.Add().Text("Labour Type Management")
                            @* .Action("Index", "Common", new { area = "" }).ImageUrl(Url.Content("~/images/part.png")); *@
                    .Action("LabourTypeIndex", "LabourType", new { area = "" }).ImageUrl(Url.Content("~/images/part.png"));

                            children.Add().Text(" List Of Vehicles")
                           @*  .Action("Index", "Common", new { area = "" }).ImageUrl(Url.Content("~/images/part.png")); *@
                    .Action("Index", "Bus").ImageUrl(Url.Content("~/images/part.png"));

                            children.Add().Text("Change Settings")
                    @* .Action("Index", "Common", new { area = "" }).ImageUrl(Url.Content("~/images/part.png")); *@
                    .Action("SettingIndex", "Setting", new { area = "" }).ImageUrl(Url.Content("~/images/part.png"));

                            children.Add().Text("Announcement Settings")
                    @* .Action("Index", "Common", new { area = "" }).ImageUrl(Url.Content("~/images/part.png")); *@
                    .Action("Index", "Content", new { area = "" }).ImageUrl(Url.Content("~/images/part.png"));
                        });
                    }

                    items.Add().Text("Help").Action("Index", "Common", new { area = "" }).ImageUrl(Url.Content("~/images/part.png"));
                })
                .HighlightPath(true)
                .Orientation(MenuOrientation.Horizontal)

                .HtmlAttributes(new { @class = "rounded-menu" })
                )
        </kendo-responsivepanel>
    </div>

    <main>
        <div class="container-fluid">
            @RenderBody()
        </div>



    </main>

    <footer class="border-top footer text-muted">
        <div class="footer-container">
            <div class="footer-left">
                &copy; TTC 2025 - Cost Estimate System | System No.: 0105
            </div>
            <div class="footer-right">              
                Build Version:@version | Build Date: June 25, 2025
            </div>
        </div>
    </footer>

    <environment names="Development">
        <script src="~/lib/bootstrap/dist/js/bootstrap.js"></script>
       
    </environment>
    <environment names="Staging,Production">
        <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js"
                asp-fallback-src="~/lib/bootstrap/dist/js/bootstrap.min.js"
                asp-fallback-test="window.jQuery && window.jQuery.fn && window.jQuery.fn.modal"></script>
    </environment>

    @RenderSection("scripts", required: false)
    <script>
        $(document).ready(function () {
            console.log("layout.cshtml docready called");
            //Remove double arrow in the menu
            setTimeout(function () {
                    // Find and remove the extra expand arrow
                    $(".k-menu .k-menu-expand-arrow.k-icon.k-i-arrow-60-down").remove();

                }, 100);
            //session
            startSessionTimer();

            // Reset timer on Telerik Grid interactions
            $(document).on("click", ".k-grid", resetSession);
            $(document).on("keydown", ".k-grid", resetSession);

      });
    </script>
    <div id="timeoutDialog" style="display: none;">
        <div style="padding: 20px;">
            <h4>Session Expiration Warning</h4>
            <p>Your session will expire in <span id="countdown">2:00</span>.</p>
            <p>Any unsaved changes will be lost.</p>
            <button class="k-button" id="continueSession">Continue Working</button>
        </div>
    </div>

    <script>
        let idleTimer;
        let countdownTimer;
        const timeoutMinutes = @ViewBag.SessionTimeoutMinutes;
        const warningMinutes = @ViewBag.SessionTimeoutWarningMinutes;
        let warningActive = false;

        function startSessionTimer() {
            clearTimeout(idleTimer);
            idleTimer = setTimeout(showTimeoutWarning, (timeoutMinutes - warningMinutes) * 60 * 1000);
        }

        function showTimeoutWarning() {
            warningActive = true;
            const dialog = $("#timeoutDialog").data("kendoDialog") ||
                $("#timeoutDialog").kendoDialog({
                    width: "400px",
                    title: "This session will be closed due to inactivity. All the unsaved changes will be lost.",
                    closable: false,
                    modal: true,
                    actions: []
                }).data("kendoDialog");

            let seconds = warningMinutes * 60;

            function updateCountdown() {
                const minutes = Math.floor(seconds / 60);
                const remainingSeconds = seconds % 60;
                $("#countdown").text(`${minutes}:${remainingSeconds.toString().padStart(2, '0')}`);

                if (seconds <= 0) {
                    clearInterval(countdownTimer);
                    dialog.close();
                    window.location.href = '/Home/SessionExpired';
                }
                seconds--;
            }

            countdownTimer = setInterval(updateCountdown, 1000);
            updateCountdown();
            dialog.open();

            // Handle continue button
            $("#continueSession").off("click").on("click", function () {
                resetSession();
                dialog.close();
            });

            // Reset on any user activity
            $(document).one("mousemove keydown click", function () {
                resetSession();
                dialog.close();
            });
        }

        function resetSession() {
            warningActive = false;
            clearTimeout(idleTimer);
            clearInterval(countdownTimer);

            // Add proper POST headers
            fetch('/Account/KeepAlive', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                },
                credentials: 'same-origin'
            })
                .then(response => {
                    if (!response.ok) throw new Error('Keep-alive failed');
                    startSessionTimer();
                })
                .catch(() => window.location.reload());
        }

       
    </script>
</body>
</html>

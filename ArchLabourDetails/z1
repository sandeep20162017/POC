You are ASP.NET core (v 8.0) and Telerik ASP.NET core expert. In the following exampe, Grid (LabourDetailsGrid) is not rendered.
Controller returns correcly. (gridType == "ArchivedVehicleGrid". No JS errors

@model IEnumerable<BCES.Models.Parts.LabourDetailsRebuiltPartsViewModel>

@{
    ViewData["Title"] = "Labour Details";
}

<h6>Labour Details</h6>

@(
Html.Kendo().Grid<BCES.Models.Parts.LabourDetailsRebuiltPartsViewModel>()
                //.Name((string)ViewBag.PartNum)
                .Name($"LabourDetailsGrid")
                //visual save changes
                .Events(events => events
                    .DataBound("onLabourGridDataBound")
                   // .SaveChanges("onLabourGridSave")
                    .Edit("onGridEdit")                    
                    .Save("onGridCellSave") //validation ssk23
                    
                )
                .Columns(columns =>
                {
                    columns.Bound(c => c.Id).Title("Id").Hidden(true);

                    columns.Bound(c => c.LabourDefn).Title("Labour Type").EditorTemplateName("ComboBoxEditor").Width(150)
                    .HtmlAttributes(new
                    {
                        //data_field = "LabourDefn",
                        data_partnum = ViewBag.PartNum
                    })
                    .HeaderHtmlAttributes(new { @class = "required-header" })
                    .HtmlAttributes(new { @class = "required-cell", required = "required" });

                    columns.Bound(c => c.CostCentre).Title("Cost Centre").EditorTemplateName("ComboBoxEditor").Width(150)
                     .HeaderHtmlAttributes(new { @class = "required-header" })
                    .HtmlAttributes(new { @class = "required-cell", required = "required" });

                    columns.Bound(c => c.Task).Title("Labour Task").EditorTemplateName("ComboBoxEditor").Width(100)
                     .HeaderHtmlAttributes(new { @class = "required-header" })
                    .HtmlAttributes(new { @class = "required-cell", required = "required" });

                    columns.Bound(c => c.Usage).Title("%").Width(150)
                     .HeaderHtmlAttributes(new { @class = "required-header" })
                    .HtmlAttributes(new { @class = "required-cell", required = "required" })
                    .HtmlAttributes(new { data_br = "MustBeNumeric,NoSpecialCharacters,MustBePositive, MustBePercentage" }); 

                    //  columns.Bound(c => c.TimeAddition).Title("Time").Format("{0:N2}");
                    // columns.Bound(c => c.RatePerHour).Title("Rate Per Hour").Format("{0:N2}");
                    //columns.Bound(c => c.HrsReqd).Title("Hrs Reqd").Format("{0:N2}");

                    columns.Bound(c => c.LabourHrs).Title("Labour Hrs").Width(50)
                    .HtmlAttributes(new { data_br = "MustBeNumeric,NoSpecialCharacters,MustBePositive" }); ;

                    columns.Bound(c => c.LabourMins).Title("Labour Mins").Width(50)
                    .HtmlAttributes(new { data_br = "MustBeNumeric,NoSpecialCharacters,MustBePositive, MustBeMin" });

                    columns.Bound(c => c.LastModifiedBy).Title("Modified By").Width(170)
                     .ClientTemplate("#= LastModifiedBy && LastModifiedBy !== 0 ? LastModifiedBy : '(System Generated)' #"); 

                    columns.Bound(c => c.DateRevised).Title("Modified Date").Width(170)
                    .ClientTemplate("#=  DateRevised !== 0 ? formatToEST(DateRevised) : '(System Generated)' #"); ; //  format dateTime;;
                    // columns.Command(command => command.Edit()).Title("Actions");
                    columns.Command(command =>
                    {
                        if (@ViewBag.RoleId == 1)
                        {
                            // command.Edit().Text(" ").IconClass("k-icon k-i-edit").HtmlAttributes(new { title = "Edit" }); // Edit button with tooltip
                        }
                        if (@ViewBag.RoleId == 1)
                        {

                            command.Custom("Delete")
                             .Click("showDeleteConfirmation")
                             .Text(" ")
                             .IconClass("k-icon k-i-delete")
                             .HtmlAttributes(new
                             {
                                 @class = "text-danger",
                                 title = "Delete",
                                 data_grid = $"LabourDetailsGrid",
                                 data_url = Url.Action("DeleteLabourDetail", "LabourDetails"),
                                 data_id_field = "Id",
                                 data_grid_type = "VehicleGrid"
                             });
                        }
                    }).Width(100);
                })
                .ToolBar(toolbar =>
                {
                    if (@ViewBag.RoleId == 1)
                    {
                        toolbar.Create();
                        toolbar.Save();
                    }
                })
                .Editable(editable => editable.Mode(GridEditMode.InCell))
                .Pageable()
                .Sortable()
                .Resizable(r => r.Columns(true))
                .Scrollable(s => s.Height("auto"))
                .Resizable(r => r.Columns(true))
                .Scrollable()
                .DataSource(dataSource => dataSource
                    .Ajax()
                    .Batch(false)
                    .ServerOperation(false)
                    .Model(model =>
                    {
                        model.Id(c => c.Id);
                        model.Field(c => c.Id);
                        model.Field(c => c.LastModifiedBy).Editable(false);
                        model.Field(c => c.DateRevised).Editable(false);
                    })
                    .Events(events =>
                    {
                        events.RequestEnd("onLabourRequestEnd");
                        events.Error("onDataSourceError");
                      

                    })

                    
        .Read(read => read.Url(Url.Action("GetLabourDetails", "LabourDetails") + "?id=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Get))
        .Create(create => create.Url(Url.Action("CreateLabourDetail", "LabourDetails") + "?id=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Post))
        
            .Update(update => update.Url(Url.Action("UpdateLabourDetail", "LabourDetails") + "?id=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType)
            .Type(HttpVerbs.Post))
            
            
        .Destroy(delete => delete.Url(Url.Action("DeleteLabourDetail", "LabourDetails") + "?id=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Post))
    )
)
@section Scripts {
    
}
[HttpGet]
[AllowAnonymous]
public async Task<IActionResult> GetLabourDetails([DataSourceRequest] DataSourceRequest request, [FromQuery] string id, [FromQuery] string gridType)
{
    if (string.IsNullOrEmpty(id))
    {
        BadRequest("id is required for gridType :" + gridType);
    }
    ViewBag.PartNum = id;
    try
    {
        if (gridType == "RbGrid")
        {
            var rbNscModel = await GetLabourDetailsInRBEstimates(id, gridType);
            return Json(rbNscModel.ToDataSourceResult(request));
        }
        if (gridType == "VehicleGrid")
        {
            var vehNscmodel = await GetLabourDetailsInVehicleEstimates(id, gridType);

            return Json(vehNscmodel.ToDataSourceResult(request));
        }
        if (gridType == "ArchivedVehicleGrid")
        {
            var vehNscmodel = await GetArchivedLabourDetailsInEstimates(id, gridType);

            return Json(vehNscmodel.ToDataSourceResult(request));
        }

        return StatusCode(500, "An error occurred while fetching data, in GetLabourDetailsInRBEstimates.");
    }
    catch (Exception ex)
    {
        // Log the error
        Console.WriteLine($"Error in GetLabourDetails: {ex.Message}");
        return StatusCode(500, "An error occurred while fetching data.");
    }
}

private async Task<IEnumerable<LabourDetailsRebuiltPartsViewModel>> GetArchivedLabourDetailsInEstimates(string partNum, string gridType)
{
    try
    {
        var query = @"
                    SELECT [LabourDefn]
                  ,[DateEntered]
                  ,[LinkNumber]
                  ,[TypeId]
                  ,[Costcentre]
                  ,[Task]
                  ,[LabourType]
                  ,[Usage]
                  ,[HrsReqd]
                  ,[AdjHrs]
                  ,[TimeAddition]
                  ,[ArchVehicleListId]
              FROM [CES].[SBCES].[ArchVehEmployeeLabour]
                where ArchVehicleListId = @id" ;
                    

        var parameters = new { id = partNum };

        var result = await _dbConnection.QueryAsync<LabourDetailsRebuiltPartsViewModel>(query, parameters);

        // Split HrsReqd into LabourHrs and LabourMins
        foreach (var item in result)
        {
            if (!string.IsNullOrEmpty(item.HrsReqd))
            {
                var parts = item.HrsReqd.Split(':');
                item.LabourHrs = int.Parse(parts[0]);
                item.LabourMins = int.Parse(parts[1]);
            }
        }

        return result;
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error in GetLabourDetailsData: {ex.Message}");
        throw; // Rethrow the exception for centralized handling
    }
}

@using BCES.Models.Vehicle
@using BCES.Models.Common
@model IEnumerable<BCES.Models.Vehicle.VehicleViewModel>
@* @Html.Partial("_CESGridEditLockHelper") *@

@{
    ViewData["Title"] = "Vehicle Estimate";
    var parentGridId = $"{ViewBag.PartNum}";/* save gridname in hidden field for JS */
    //var vehGridName = $"VehicleGrid_{ViewBag.PartNum}";

    var vehGridName = $"VehicleGrid";
}

<style>
    /* logic for required col changes - CSS for required columns */
    .required-header::after {
        content: " *";
        color: #e32;
        font-weight: bold;
    }

    .required-cell {
        background-color: rgba(255, 0, 0, 0.05);
    }

    .k-edit-cell.required-cell input {
        border-left: 3px solid #e32;
        padding-left: 5px;
    }
</style>

<h6>Vehicle Estimate</h6>

@(Html.Kendo().TabStrip()
    .Name("vehicleTabStrip")
    .Animation(animation => animation.Open(effect => effect.Fade(FadeDirection.In)))
    .Items(tabstrip =>
    {
        tabstrip.Add().Text("Vehicles")
            .Selected(true)
            .Content(@<text>
    @try
    {

    @(Html.Kendo().Grid<VehicleViewModel>()
    .Name($"VehicleGrid")
    .Columns(columns =>
    {
    columns.Bound(c => c.VehicleListId).Title("Estimate #")

    .ClientTemplate("#= VehicleListId && VehicleListId !== 0 ? VehicleListId : '(System Generated)' #")
    .Filterable(ftb => ftb.Cell(cell => {
    cell.Operator("eq"); // Equal to
    cell.ShowOperators(true); // Hide the operator dropdown
    }))
    .IncludeInMenu(false)
    .Width(190).Lockable(true);

    columns.Bound(c => c.VehSeriesCode).Title("Vehicle Series Code")
    .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)))
    .EditorTemplateName("ComboBoxEditor")
    .HeaderHtmlAttributes(new { @class = "required-header" })
    .HtmlAttributes(new { @class = "required-cell" , required="required"})
    .Width(160);

    columns.Bound(c => c.NumOfVehicles).Title("Number Of Vehicles")
    .HeaderHtmlAttributes(new { @class = "required-header" })
    .HtmlAttributes(new { @class = "required-cell", required="required" })
    // .ClientTemplate("#: truncateText(data.KeyWord) #")
    .Filterable(ftb => ftb.Cell(cell => cell.Operator("eq").SuggestionOperator(FilterType.Contains)))
    
    .Width(160).Hidden(false).MinScreenWidth(768);

    columns.Bound(c => c.ProjDesc).Title("Project Description")
    .HeaderHtmlAttributes(new { @class = "required-header" })
    .HtmlAttributes(new { @class = "required-cell", required="required" })    
    .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)))
    .EditorTemplateName("VehDescriptionComboBox")
    .Width(250).Hidden(false).MinScreenWidth(768)
     ;

    columns.Bound(c => c.Make).Title("Make")
    // .ClientTemplate("#: truncateText(data.JobNumber) #")
    .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)))
    .EditorTemplateName("ComboBoxEditor")
    .Width(160).Hidden(false).MinScreenWidth(768);

    columns.Bound(c => c.VehModel).Title("Model")
    // .ClientTemplate("#: truncateText(data.JobNumber) #")
    .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)))
    .EditorTemplateName("ComboBoxEditor")
    .Width(160).Hidden(false).MinScreenWidth(768);


    columns.Bound(c => c.Year).Title("Year")
    .Filterable(ftb => ftb.Cell(cell => cell.Operator("gte")))
    .EditorTemplateName("ComboBoxEditor")
    .Width(150).Hidden(false).MinScreenWidth(768);

    columns.Bound(c => c.Engine).Title("Engine")
    .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)))
    .EditorTemplateName("ComboBoxEditor")
    .Width(150).Hidden(false).MinScreenWidth(768);

    columns.Bound(c => c.Transmission).Title("Transmission")
    .EditorTemplateName("ComboBoxEditor")
    .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)))
    .Width(150).Hidden(false).MinScreenWidth(768);

    columns.Bound(c => c.Sopnumber).Title("Sop Number")
    .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)))
    .Width(150).Hidden(false).MinScreenWidth(768);

    columns.Bound(c => c.ModifiedLastBy).Title("Modified By")
   
     .ClientTemplate("#= ModifiedLastBy && ModifiedLastBy !== 0 ? ModifiedLastBy : '(System Generated)' #")
    .Width(150).Hidden(false).MinScreenWidth(768)
    .IncludeInMenu(true)
    .Lockable(false);

    columns.Bound(c => c.ModifiedLastDate).Title("Modified Date")
   
    .ClientTemplate("#=  ModifiedLastDate !== 0 ? formatToEST(ModifiedLastDate) : '(System Generated)' #")
    
    .Width(150).Hidden(false).MinScreenWidth(768)
    .IncludeInMenu(true)
    .Lockable(false);

    columns.Command(command =>
    {
    // command.Edit().Text(" ").IconClass("k-icon k-i-edit").HtmlAttributes(new { title = "Edit" }); // Edit button with tooltip
    command.Custom("Archive").Text(" ").IconClass("k-icon k-i-folder").Click("onArchiveClick").HtmlAttributes(new { title = "Archive" }); // Archive button with tooltip
    command.Custom("Copy").Text(" ").IconClass("k-icon k-i-copy").Click("onCopyEstimateClick").HtmlAttributes(new { title = "Copy Estimate" });//san17 copy estimate
    command.Custom("Delete")
    .Click("showDeleteConfirmation")
    .Text(" ")
    .IconClass("k-icon k-i-delete")
    .HtmlAttributes(new {
    @class = "text-danger",
    data_grid = "VehicleGrid",
    data_url = Url.Action("DeleteVehicle", "Vehicles"),
    data_id_field = "VehicleListId", //pk
    data_grid_type = "VehicleGrid" // static value
    });
    // command.Custom("Save to Excel").Text(" ").IconClass("k-icon k-i-file-excel").Click("onSaveToExcelClick").HtmlAttributes(new { title = "Save to Excel" }); // Save to Excel button with tooltip
    // command.Custom("Email Estimate").Text(" ").IconClass("k-icon k-i-email").Click("onEmailEstimateClick").HtmlAttributes(new { title = "Email Estimate" }); // Email Estimate button with tooltip
    }).Title("Actions").IncludeInMenu(false).Width(300); // Set a fixed width for the Actions column
    })

    .ToolBar(toolbar => {
    toolbar.Create().Text("Add new record").IconClass("k-icon k-i-plus").HtmlAttributes(new {
    title = "Add new record",
    @class = "k-primary"
    });
    toolbar.Save().SaveText("Save changes").CancelText("Cancel changes")
    .HtmlAttributes(new {
    title_save = "Save all changes",
    title_cancel = "Discard changes"
    });
    //toolbar.Excel().Text("Variance Report");
    })
    @*  .Excel(excel =>
    {
    excel.FileName("VarianceReport.xlsx")
    .Filterable(true)
    .AllPages(true);

    }) *@
    .Editable(editable => editable.Mode(GridEditMode.InCell))
    .Events(events => events
    .ExcelExport("onExcelExport")
    .DetailExpand("onDetailExpand")
    .DetailCollapse("onDetailCollapse")
    .DataBound("onVehGridDataBound")
    .Save("onVehGridSave")
    // .Edit("onVehEdit")
    )
    //.Pageable()
    .Pageable(p => p
    .PageSizes(new int[] {1, 10, 20, 50 }) // Dropdown options
    .Position(GridPagerPosition.Top)

    )
    .Sortable()
    .ClientDetailTemplateId("template")
    .Resizable(r => r.Columns(true))
    .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
    .ColumnMenu(menu => menu.Enabled(true))
    .Scrollable(s => s.Height("auto"))
    .Reorderable(reorder => reorder.Columns(true))
    .DataSource(dataSource => dataSource
    .Ajax()
    .PageSize(1)
    .Model(model =>
    {

    model.Id(c => c.VehicleListId); //.Validation(vehGridName=>vehGridName.Required(true))
    
    model.Field(c => c.VehicleListId).Editable(false);
    
    model.Field(c => c.ModifiedLastDate).Editable(false);
    model.Field(c => c.ModifiedLastBy).Editable(false);

    })
    .Events(events =>
    {
    events.RequestEnd("onVehRequestEnd");
    events.Error("onDataSourceError");

    })
    .Read(read => read.Url(Url.Action("GetVehiclesView", "Vehicles") + "?id=" + ViewBag.PartNum + "&gridType=VehicleGrid").Type(HttpVerbs.Get))
    .Create(create => create.Url(Url.Action("AddVehiclesView", "Vehicles") + "?id=" + ViewBag.PartNum + "&gridType=VehicleGrid").Type(HttpVerbs.Post))
    .Update(update => update.Url(Url.Action("UpdateVehiclesView", "Vehicles") + "?id=" + ViewBag.PartNum + "&gridType=VehicleGrid").Type(HttpVerbs.Post))
    .Destroy(delete => delete.Url(Url.Action("DeleteVehiclesView", "Vehicles") + "?id=" + ViewBag.PartNum + "&gridType=VehicleGrid").Type(HttpVerbs.Post))
    )
    )

    }
    catch (Exception ex)
    {
    <div class="alert alert-danger">Error loading Vehicle Estimate: @ex.Message</div>
    }
</text>);

        tabstrip.Add().Text("Archived Vehicles")
            .Content(@<text>
    @try
    {
    @Html.Partial("_ArchivedVehicleIndex")
    }
    catch (Exception ex)
    {
    <div class="alert alert-danger">Error loading archived vehicles: @ex.Message</div>
    }
</text>);
    })
)

<style>
    .k-grid td {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .k-grid-header .k-header {
        white-space: normal;
        vertical-align: top;
    }

    .k-grid .k-hierarchy-col {
        width: 10px; /* Fix detail template arrow column width */
    }
</style>
<!-- Custom Delete Confirmation Dialog -->
<div id="deleteConfirmationDialog" style="display: none;">
    <div class="confirmation-message">
        <span class="k-icon k-i-warning confirmation-icon"></span>
        <span>Are you sure you want to delete this item?</span>
    </div>
    <div class="confirmation-buttons">
        @* <button type="button" class="k-button cancel-btn">Cancel</button> *@
        <button type="button" class="k-button confirm-btn">Delete</button>
    </div>
</div>

<div id="notification"></div>
<!--Copy estimate san17-->
<div id="copyEstimateDialog" style="display:none;">
    <div class="k-form">
        <div class="k-form-field">
            <label>Estimate #</label>
            <input id="vehicleListId" name="vehicleListId" class="k-textbox" readonly />
        </div>
        <div class="k-form-field">
            <label>Vehicle Series</label>
            <input id="oldVehSeriesCode" name="oldVehSeriesCode" class="k-textbox" readonly />
        </div>
        <div class="k-form-field">
            <label>Description</label>
            <input id="oldprojDesc" name="oldprojDesc" class="k-textbox" readonly />
        </div>
        <div class="k-form-field">
            <label>New Vehicle Series<span style="color:red">*</span></label>
            <input id="newVehSeriesCode" name="newVehSeriesCode" class="k-textbox" required />
        </div>
        <div class="k-form-field">
            <label>New Description<span style="color:red">*</span></label>
            <input id="newprojDesc" name="newprojDesc" class="k-textbox" required />
        </div>
        <div class="k-form-buttons">
            <button type="button" class="k-button k-primary" id="copyEstimateBtn">Copy</button>
            <button type="button" class="k-button" id="cancelCopyBtn">Cancel</button>
        </div>
    </div>
</div>
<!-- Placeholder for dynamically loaded email estimate popup and notification -->
<div id="email-estimate-container" style="display: none;">
    @Html.Partial("_EmailEstimatePopup")
    <div id="estimates-container"></div>

</div>
@* <input type="hidden" name="SelectedBuses" id="SelectedBusesHidden" value="" /> *@
<!-- Rest of HTML remains unchanged -->
@section Scripts {
    <script>
        // Truncation functions
        function truncateText(text, max = 25) {
            return text?.length > max ? text.substr(0, max) + '...' : text;
            // return text;
        }

        function truncateWords(text, wordCount = 10) {
            if (!text) return '';
            const words = text.split(/\s+/);
            return words.length > wordCount ?
                words.slice(0, wordCount).join(' ') + '...' :
                text;
        }

        // Vehicle Series display handler
        function formatVehicleSeries(buses) {
            if (!buses || !buses.length) return 'Select Vehicle';
            return buses.map(b =>
                `<span title="${b.BusName}">${truncateWords(b.BusName, 10)}</span>`
            ).join(', ');
        }

        // Update client template for Vehicle Series
        function refreshVehicleSeriesTemplate() {
            const gridName = $("#vehGridNameField").val();
            const grid = $("#" + gridName).data("kendoGrid");
            //const grid = $("#VehicleGrid").data("kendoGrid");
            grid.refresh();
        }


    </script>

    <script>
        var tabIndex = -1; //-1 when  Main grid is acive, if below tabs are active get the resp. tabIndex ssk
        var tabStripName = "";
        $(document).ready(function () {


            /////////
            $("#email-estimate-container").hide();
            $("#archived-email-estimate-container").hide();

            //// start visual save changes
            // Initialize main TabStrip with proper error handling
            const mainTabStrip = $("#vehicleTabStrip").data("kendoTabStrip");
            if (mainTabStrip) {
                mainTabStrip.select(0); // Select/expand the first tab (index 0) //ssk16
                // Correct tab item access using native array methods
                const tabs = mainTabStrip.items();
                if (tabs && tabs.length > 0) {
                    // Access first tab using array index
                    const firstTab = tabs[0];

                    $(firstTab.element).find(".k-link").addClass("has-unsaved");
                }

                // Add tabstrip styling
                mainTabStrip.wrapper.find(".k-tabstrip-items").append(`
                                                        <style>
                                                            .k-tabstrip-items .has-unsaved {
                                                                position: relative;
                                                                color: #d9534f !important;
                                                            }
                                                            .has-unsaved::after {
                                                                content: "•";
                                                                color: #d9534f;
                                                                position: absolute;
                                                                right: 8px;
                                                                top: 6px;
                                                                font-size: 1.5em;
                                                            }
                                                        </style>
                                                    `);
            } else {
                console.warn("Main TabStrip not found");
            }

            ////end visual save changes
            var grid = $("#VehicleGrid").data("kendoGrid");
            //const gridName = $("#VehicleGrid").val();
            // const grid = $("#" + gridName).data("kendoGrid");

            // Initialize Kendo Notification for displaying messages
            var notificationElement = $("#notification");
            if (notificationElement.length === 0) {
                console.error("Notification element not found in the DOM.");
            } else {
                var notification = notificationElement.kendoNotification({
                    position: {
                        pinned: true,
                        top: 50,
                        right: 50
                    },
                    autoHideAfter: 5000, // Hide after 5 seconds
                    stacking: "down"
                }).data("kendoNotification");

                console.log("user clicks the Cancel button logic ");
                console.log('grid :', grid);
                // Bind the Cancel event for the grid
                grid.bind("cancel", function (e) {
                    // This event is triggered when the user clicks the Cancel button
                    $.post('@Url.Action("CancelDetails", "Vehicles")', { vehicleListId: e.model.VehicleListId })
                        .done(function (data) {
                            if (notification) {
                                notification.show("Changes discarded!", "info");
                            } else {
                                console.error("Notification is not initialized.");
                            }
                        })
                        .fail(function (xhr, status, error) {
                            console.error("Error discarding changes: ", error);
                            if (notification) {
                                notification.show("An error occurred while discarding changes. Please try again.", "error");
                            } else {
                                console.error("Notification is not initialized.");
                            }
                        });
                });

                console.log("calling detailInit");
                grid.bind("detailInit", function (e) {
                    console.error("Inside detailInit");
                    const vehicleListId = e.data.VehicleListId;
                    parentGridId = vehicleListId;
                    console.error("vehicleListId : ", vehicleListId);

                    console.log("Detail initialization started for VehicleListId: " + e.data.VehicleListId);
                    var tabUrlLabourDetail = '@Url.Action("LabourDetailsPartial", "Vehicles")' + '?id=' + e.data.VehicleListId;
                    var tabUrlLabourHourSummary = '@Url.Action("LabourHourSummaryPartial", "Vehicles")' + '?id=' + e.data.VehicleListId;
                    var tabUrlMaterialCostSummary = '@Url.Action("MaterialCostSummaryPartial", "Vehicles")' + '?id=' + e.data.VehicleListId;
                    var tabScPartDetail = '@Url.Action("ScPartsUsedInEstimates", "Vehicles")' + '?id=' + e.data.VehicleListId;
                    var tabUrlNscDetail = '@Url.Action("NscDetailsPartial", "Vehicles")' + '?id=' + e.data.VehicleListId;
                    var tabUrlRbPartDetail = '@Url.Action("RbDetailsPartial", "Vehicles")' + '?id=' + e.data.VehicleListId;
                    var tabUrlTotalCost = '@Url.Action("TotalCostPartial", "Vehicles")' + '?id=' + e.data.VehicleListId;

                    // Get the container for the detail template
                    var container = e.detailCell.find("#detail-template-" + e.data.VehicleListId);

                    // Load the TabStrip structure
                    container.html(`
                                                                    <div id="tabstrip-container-${e.data.VehicleListId}">
                                                                <ul>
                                                                     <li>Labour Details</li>
                                                                    <li>Labour Hour</li>
                                                                    <li>Material Cost</li>
                                                                    <li>Stock Coded Parts</li>
                                                                    <li>Non Stock Coded Parts</li>
                                                                    <li>Rebuilt Parts</li>

                                                                    <li>Total Cost</li>
                                                                </ul>

                                                                        <div id="labour-details-content-${vehicleListId}"></div>
                                                                        <div id="labour-hour-summary-content-${vehicleListId}"></div>
                                                                        <div id="material-cost-summary-content-${vehicleListId}"></div>
                                                                        <div id="material-details-content-${vehicleListId}"></div>
                                                                        <div id="nsc-details-content-${vehicleListId}"></div>
                                                                        <div id="rb-part-details-content-${vehicleListId}"></div>

                                                                        <div id="total-cost-content-${vehicleListId}">"></div>
                                                            </div>
                                                        `);

                    // Initialize the Kendo TabStrip
                    console.log("Initialize tabScript ");

                    var tabStrip = $("#tabstrip-container-" + e.data.VehicleListId).kendoTabStrip({
                        animation: { open: { effects: "fadeIn" } },
                        select: function (e) {
                            tabIndex = $(e.item).index(); // Get the index of the selected tab
                            tabStripName = e.sender.element.attr("id"); //ssk tabStripName

                            // Check for unsaved changes in the current tab
                            var currentTabContent = tabStrip.contentElement(tabStrip.select().index());
                            var currentGrid = $(currentTabContent).find(".k-grid").data("kendoGrid");
                            console.log("*******currentGrid :", currentGrid);

                            console.log("*******currentTabContent :", currentTabContent);
                            //    var gridName = currentGrid.element.attr("id");
                            //  console.log("*******currentGridName :", gridName);
                            //  notification.show("currentGridName :" + gridName, "warning");



                            tabIndex = $(e.item).index(); // Get the index of the selected tab

                            if (currentGrid && (currentGrid.dataSource.hasChanges())) { //kendoNotification show waring for reaonly
                                console.log("hasChanges :", currentGrid.dataSource.hasChanges());

                                // Show a warning notification
                                if (notification) {
                                    notification.show("You have unsaved changes. Click on Update or Cancel changes before selecting other tab.", "warning");
                                    // notification.show(currentGrid);
                                    //  notification.show(currentGrid.dataSource.hasChanges());
                                } else {
                                    console.error("****** Notification is not initialized.");
                                }
                                e.preventDefault(); // Prevent the tab switch
                                return;
                            }
                            console.log("Load the partial view content for the selected tab");
                            // Load the partial view content for the selected tab
                            var tabUrl = tabIndex == 0 ? tabUrlLabourDetail :
                                tabIndex == 1 ? tabUrlLabourHourSummary :
                                    tabIndex == 2 ? tabUrlMaterialCostSummary :
                                        tabIndex == 3 ? tabScPartDetail :
                                            tabIndex == 4 ? tabUrlNscDetail :
                                                tabIndex == 5 ? tabUrlRbPartDetail :
                                                    tabUrlTotalCost;

                            $.get(tabUrl)
                                .done(function (data) {

                                    $(e.contentElement).html(data);
                                    kendo.init($(e.contentElement)); // Reinitialize Kendo widgets
                                    if (tabIndex == 0) {
                                        var gridName = 'LabourDetailsGrid'; //ssk2
                                        console.log('########  :gridName ', gridName);
                                    }

                                    console.log('########  :tabIndex ', tabIndex);
                                    // Reset the hasChanges() state for read-only tabs
                                    if (tabIndex == '6' || tabIndex == '1' || tabIndex == '2') { //read-only tab
                                        var grid = $(e.contentElement).find(".k-grid").data("kendoGrid");
                                        // console.log("*******currentGrid2 :", currentGrid);
                                        var gridName = grid.element.attr("id");
                                        console.log("*******currentGridName2 :", gridName);
                                        // console.log("*******currentTabContent :", currentTabContent);
                                        grid.dataSource.read(); // Refresh the data source
                                    }
                                })
                                .fail(function (xhr, status, error) {
                                    console.error("Error loading tab content: ", error);
                                    if (notification) {
                                        notification.show("An error occurred while loading the tab content. Please try again.", "error");
                                    } else {
                                        console.error("Notification is not initialized.");
                                    }
                                });
                        }
                    }).data("kendoTabStrip");

                    // Load the first tab's content
                    $.get(tabUrlLabourDetail)
                        .done(function (data) {
                            $("#labour-details-content-" + vehicleListId).html(data);
                            kendo.init($("#labour-details-content")); // Reinitialize Kendo widgets
                        })
                        .fail(function (xhr, status, error) {
                            console.error("Error loading initial tab content: ", error);
                            if (notification) {
                                notification.show("An error occurred while loading the initial tab content. Please try again.", "error");
                            } else {
                                console.error("Notification is not initialized.");
                            }
                        });
                    $.get(tabUrlTotalCost)
                        .done(function (data) {
                            $("#total-cost-content-" + vehicleListId).html(data);
                            kendo.init($("#total-cost-content-" + vehicleListId)); // init TotalCostGrid early
                            console.log("Total Cost tab preloaded for VehicleListId:", vehicleListId);
                        })
                        .fail(function (xhr, status, error) {
                            console.error("Error preloading Total Cost tab:", error);
                        });
                });
            }
            //archived --------------------------------------------
            var grid = $("#ArchivedVehicleGrid").data("kendoGrid");

            // Initialize Kendo Notification for displaying messages
            var notificationElement = $("#archived-notification");
            if (notificationElement.length === 0) {
                console.error("Notification element not found in the DOM.");
            } else {
                var notification = notificationElement.kendoNotification({
                    position: {
                        pinned: true,
                        top: 50,
                        right: 50
                    },
                    autoHideAfter: 5000, // Hide after 5 seconds
                    stacking: "down"
                }).data("kendoNotification");
                //TODO : Revisit when View Archived Logic gets re-written. Need new controller
                //VB Code CES_INQUIRY.RETRIVE_RBP_USED
                //CES_ARCHICE.ARCHIVE_RB
                //Uncomment ClientDetailTemplateId("archived-template") in ArchivedVehicleIndex.cshtml

                // Bind the detailInit event for the grid
                grid.bind("detailInit", function (e) {
                    console.log("Detail initialization started for ArchVehicleList: " + e.data.ArchVehicleListId);
                    var tabUrlLabourDetail = '@Url.Action("LabourDetailsPartial", "Vehicles")' + '?id=' + e.data.ArchVehicleListId + "&gridType=ArchivedVehicleGrid";
                    var tabUrlLabourHourSummary = '@Url.Action("LabourHourSummaryPartial", "Vehicles")' + '?id=' + e.data.ArchVehicleListId + "&gridType=ArchivedVehicleGrid";
                    var tabUrlMaterialCostSummary = '@Url.Action("MaterialCostSummaryPartial", "Vehicles")' + '?id=' + e.data.ArchVehicleListId + "&gridType=ArchivedVehicleGrid";
                    var tabScPartDetail = '@Url.Action("ScPartsUsedInEstimates", "Vehicles")' + '?id=' + e.data.ArchVehicleListId + "&gridType=ArchivedVehicleGrid";
                    var tabUrlNscDetail = '@Url.Action("NscDetailsPartial", "Vehicles")' + '?id=' + e.data.ArchVehicleListId + "&gridType=ArchivedVehicleGrid";
                    var tabUrlRbPartDetail = '@Url.Action("RbDetailsPartial", "Vehicles")' + '?id=' + e.data.ArchVehicleListId + "&gridType=ArchivedVehicleGrid";
                    var tabUrlTotalCost = '@Url.Action("TotalCostPartial", "Vehicles")' + '?id=' + e.data.ArchVehicleListId + "&gridType=ArchivedVehicleGrid";

                    // Get the container for the detail template
                    var container = e.detailCell.find("#archived-detail-template-" + e.data.VehicleListId);

                    // Load the TabStrip structure
                    container.html(`
                                                <div id="archived-tabstrip-container-${e.data.VehicleListId}">
                                            <ul>
                                                <li class="k-state-active">Labour Details</li>
                                                <li>Labour Hour</li>
                                                <li>Material: Cost</li>
                                                <li>Stock Coded Parts</li>
                                                <li>Non Stock Coded Parts</li>
                                                <li>Rebuilt Built Parts</li>
                                                <li>Total Cost</li>
                                            </ul>
                                            <div id="archived-labour-details-content"></div>
                                            <div id="archived-labour-hour-summary-content"></div>
                                            <div id="archived-material-cost-summary-content"></div>
                                            <div id="archived-material-details-content"></div>
                                            <div id="archived-nsc-details-content"></div>
                                            <div id="archived-rb-part-details-content"></div>
                                            <div id="archived-total-cost-content"></div>
                                        </div>
                                    `);

                    // Initialize the Kendo TabStrip
                    var tabStrip = $("#archived-tabstrip-container-" + e.data.VehicleListId).kendoTabStrip({
                        animation: { open: { effects: "fadeIn" } },
                        select: function (e) {
                            tabIndex = $(e.item).index(); // Get the index of the selected tab
                            tabStripName = e.sender.element.attr("id"); //ssk tabStripName

                            // Load the partial view content for the selected tab
                            tabUrl = tabIndex == 0 ? tabUrlLabourDetail :
                                tabIndex == 1 ? tabUrlLabourHourSummary :
                                    tabIndex == 2 ? tabUrlMaterialCostSummary :
                                        tabIndex == 3 ? tabScPartDetail :
                                            tabIndex == 4 ? tabUrlNscDetail :
                                                tabIndex == 5 ? tabUrlRbPartDetail :
                                                    tabUrlTotalCost;

                            $.get(tabUrl)
                                .done(function (data) {
                                    $(e.contentElement).html(data);
                                    kendo.init($(e.contentElement)); // Reinitialize Kendo widgets
                                })
                                .fail(function (xhr, status, error) {
                                    console.error("Error loading tab content: ", error);
                                    if (notification) {
                                        notification.show("An error occurred while loading the tab content. Please try again.", "error");
                                    } else {
                                        console.error("Notification is not initialized.");
                                    }
                                });
                        }
                    }).data("kendoTabStrip");

                    // Load the first tab's content
                    $.get(tabUrlLabourDetail)
                        .done(function (data) {
                            $("#archived-labour-details-content").html(data);
                            kendo.init($("#archived-labour-details-content")); // Reinitialize Kendo widgets
                        })
                        .fail(function (xhr, status, error) {
                            console.error("Error loading initial tab content: ", error);
                            if (notification) {
                                notification.show("An error occurred while loading the initial tab content. Please try again.", "error");
                            } else {
                                console.error("Notification is not initialized.");
                            }
                        });
                });
            }
            //archived end  ----------------------------------------

            //copy estimte start san17
            var copyWindow = $("#copyEstimateDialog").kendoWindow({
                title: "Copy Estimate",
                modal: true,
                visible: false,
                resizable: false,
                width: 400
            }).data("kendoWindow");

            $("#cancelCopyBtn").click(function () {
                copyWindow.close();
            });

            $("#copyEstimateBtn").click(function () {
                var vehicleListId = $("#vehicleListId").val();
                var oldCode = $("#oldVehSeriesCode").val();
                var newCode = $("#newVehSeriesCode").val().trim();
                var oldprojDesc = $("#oldprojDesc").val();
                var newprojDesc = $("#newprojDesc").val().trim();


                if (!newCode) {
                    kendo.alert("New Vehicle Series is required.");
                    return;
                }
                if (!newprojDesc) {
                    kendo.alert("New Description is required.");
                    return;
                }

                $.post('@Url.Action("CopyEstimate", "Vehicles")', {
                    vehicleListId: vehicleListId,
                    oldVehSeriesCode: oldCode,
                    newVehSeriesCode: newCode,
                    oldprojDesc: oldprojDesc,
                    newprojDesc: newprojDesc
                })
                    .done(function (response) {
                        if (response.success) {
                            copyWindow.close();
                            $("#VehicleGrid").data("kendoGrid").dataSource.read();

                            var estimateId = response.newVehicleListId;
                            $("#VehicleGrid").data("kendoGrid").dataSource.read();
                            kendo.alert('<div style="color: green; font-weight: bold;">Estimates are copied. Estimate Number ID: ' + estimateId + '</div>');

                        } else {
                            kendo.alert("Copy failed. Please contact support.");
                        }

                    })
                    .fail(function () {
                        kendo.alert("Copy failed. Please try again.");
                    });
            });
            //copy estimate end san17
        });

        function onArchiveClick(e) {
            e.preventDefault();

            // Retrieve the data item from the clicked row in VehicleGrid
            var grid = $("#VehicleGrid").data("kendoGrid");
            var row = $(e.currentTarget).closest("tr");
            var vehicleItem = grid.dataItem(row);

            if (!vehicleItem) {
                console.error("Vehicle data not found.");
                return;
            }

            // Extract PartNum from the vehicleItem
            var partNum = vehicleItem.VehicleListId;
            if (!partNum) {
                console.error("PartNum is missing in the vehicle data.");
                return;
            }

            // Construct the ID of the TotalCost grid using PartNum
            var totalCostGridId = `#TotalCostInRbModelGrid`;
            //var totalCostGridId = '#TotalCostInRbModelGrid';
            
            var totalCostGrid = $(totalCostGridId).data("kendoGrid");

            if (!totalCostGrid) {
                console.error(`TotalCost grid with ID ${totalCostGridId} not found.`);
                return;
            }

            // Retrieve the first (and only) data item from the TotalCost grid
            var totalCostDataItem = totalCostGrid.dataSource.view()[0];

            if (!totalCostDataItem) {
                console.error("TotalCost data not found.");
                return;
            }

            // Prepare the payload to send to the server
            var payload = {
                VehicleListId: vehicleItem.VehicleListId,
                VehSeriesCode: vehicleItem.VehSeriesCode,
                TypeId: "BUS", // Default value as per stored procedure
                Username: '@ViewBag.UserName?.ToString().ToUpper()"',
                LabourCost: totalCostDataItem.TotalLabourCost || 0,
                LabourOverheadAmount: totalCostDataItem.TotalLabourOverheadCost || 0,
                LabourTotal: totalCostDataItem.TotalLabourCost || 0,
                MaterialsTotal: totalCostDataItem.TotalMaterialCost || 0,
                TotalBusEstimateCost:( totalCostDataItem.TotalLabourCost + totalCostDataItem.TotalLabourOverheadCost + totalCostDataItem.TotalMaterialCost )|| 0,
                TaxTotal: totalCostDataItem.TaxTotal || 0,
                TotalCostTax: totalCostDataItem.TotalRebuiltPartCostWithTax || 0,
                OemKitsTotal: totalCostDataItem.OemKitsTotal || 0
            };

            console.log("Payload to be sent:", payload);

            // Send the data to the server via AJAX
            $.ajax({
                url: '@Url.Action("ArchiveVehicleDetails", "Vehicles")',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(payload),
                success: function (response) {
                    var notification = $("#notification").kendoNotification({
                        position: {
                            pinned: true,
                            top: 50,
                            right: 50
                        },
                        autoHideAfter: 5000,
                        stacking: "down"
                    }).data("kendoNotification");

                    notification.show(response.message || "Archived successfully.", "info");
                },
                error: function (xhr, status, error) {
                    console.error("Error archiving:", error);
                }
            });
        }

        function onEmailEstimateClick(e) {
            e.preventDefault();
            var grid = $("#VehiclesGrid").data("kendoGrid");
            var dataItem = grid.dataItem($(e.currentTarget).closest("tr"));
            var vehicleListId = dataItem.VehicleListId;

            // Show the email estimate container
            $("#email-estimate-container").show();

            // Generate the Excel file by calling SaveToExcel via AJAX
            $.ajax({
                url: '@Url.Action("SaveToExcel", "Export")',
                type: 'GET',
                data: { vehicleListId: vehicleListId },
                xhrFields: {
                    responseType: 'blob' // Ensure the response is treated as a binary file
                },
                success: function (data) {
                    // Create a link element to trigger the file download
                    var link = document.createElement('a');
                    link.href = window.URL.createObjectURL(data);
                    link.download = `${vehicleListId}_Vehicles_Estimate.xlsx`;
                    link.click();

                    // Set the subject with the rebuilt number and today's date
                    var today = new Date();
                    var subject = `Vehicle Estimates for ${vehicleListId} - Date ${today.toLocaleDateString()} ${today.toLocaleTimeString()}`;

                    // Set the form values
                    $("#to").val("");
                    $("#subject").val(subject);
                    $("#body").val(`Dear Sir/Madam,\nPlease find attached here with Vehicle Estimate for ${vehicleListId}.\n\nThank you`);

                    // Open the Kendo Window
                    var kendoWindow = $("#emailEstimateWindow").data("kendoWindow");
                    if (kendoWindow) {
                        kendoWindow.center().open();
                    } else {
                        console.error("Kendo Window not found.");
                    }
                },
                error: function (xhr, status, error) {
                    console.error("Error downloading Excel file:", error);
                }
            });
        }

        function onSaveToExcelClick(e) {
            e.preventDefault();
            var grid = $("#VehiclesGrid").data("kendoGrid");
            var dataItem = grid.dataItem($(e.currentTarget).closest("tr"));
            var vehicleListId = dataItem.VehicleListId;

            // Directly trigger the file download
            window.location.href = '@Url.Action("SaveToExcel", "Export")' + '?vehicleListId=' + vehicleListId;
        }

        function onCancelEmailClick() {
            // Close the Kendo Window
            var window = $("#emailEstimateWindow").data("kendoWindow");
            window.close();

            // Show a notification
            var notification = $("#notification").data("kendoNotification");
            notification.show("Email Request Cancelled", "info");
        }

        //     function getDropDownListParams() {
        //        // debugger;
        //        console.log("********** inside getDropDownListParams");
        //         var gridName = "RebuiltPartsGrid";
        //         console.log("tabStripName :", tabStripName); //ssk
        //         console.log("tabIndex :", tabIndex);
        //          //if columnName == "Keyword" and  we are in the main grid
        //         if (tabIndex == -1)
        //          {
        //              gridName = "RebuiltPartsGrid";
        //          }
        //         else if (tabIndex == 0)
        //         {
        //              gridName = "LabourDetailsGrid";
        //         }
        //         else if (tabIndex == 3)
        //         {
        //              gridName = "ScPartsMaterialDetailsRebuiltPartsGrid";
        //         }
        //         else if (tabIndex == 4)
        //         {
        //              gridName = "NscPartsMaterialDetailsRebuiltPartsGrid";
        //         }
        //         else if (tabIndex == 5)
        //         {
        //              gridName = "RbPartsMaterialDetailsRebuiltPartsGrid";
        //         }
        //         console.log("gridName :", gridName);

        //         var passedGridName = "#" +  gridName + "";
        //         console.log("passedGridName :", passedGridName);
        //         // 1. Get grid reference
        //         var grid = $(passedGridName).data("kendoGrid");
        //          console.log("*******currentGrid3 :", grid);
        //         //  var gridName = grid.element.attr("id");
        //           console.log("*******currentGridName3 :", gridName);
        //                        //  console.log("*******currentTabContent :", currentTabContent);
        //         if (!grid) {
        //             console.warn("%%%%%%% Grid not found");
        //             return {};
        //         }

        //         // 2. Find currently edited cell
        //         var editCell = grid.element.find(".k-edit-cell");
        //         if (editCell.length === 0) {
        //             console.warn("No active edit cell");
        //             return {};
        //         }

        //         // 3. Find dropdown input in edit cell
        //         var dropdownInput = editCell.find("input[data-role='dropdownlist']");
        //         if (!dropdownInput.length) {
        //             console.warn("Dropdown input not found");
        //             return {};
        //         }

        //         // 4. Get column name from data attribute
        //         var columnName = dropdownInput.attr("data-column") || "";

        //         // 5. Get dropdown instance and current filter value
        //         var dropdown = dropdownInput.data("kendoDropDownList");
        //         if (!dropdown) {
        //             console.warn("Dropdown instance not found");
        //             return {};
        //         }

        //         // 6. Get the ACTUAL FILTER TEXT from the DataSource
        //         var searchText = "";
        //         var currentFilter = dropdown.dataSource.filter();
        //         if (currentFilter && currentFilter.filters && currentFilter.filters.length > 0) {
        //             searchText = currentFilter.filters[0].value; // Get the filter value
        //         }

        //         console.log("Params:", {
        //             columnName: columnName,
        //             searchText: searchText
        //         });

        //         return {
        //             columnName: columnName,
        //             searchText: searchText
        //         };
        // }

        // function getDropDownListParams() {
        //     const activeCell = $(".k-edit-cell:visible");
        //     const dropdownWrapper = activeCell.find(".k-dropdown");
        //     console.log('columnName :', dropdownWrapper.data("column"));
        //         console.log('partNum :', dropdownWrapper.data("column"));


        //     return {
        //         columnName: dropdownWrapper.data("column"),
        //         partNum: dropdownWrapper.data("partnum"),
        //         searchText: dropdownWrapper.find(".k-input").val() || ""
        //     };
        // }

        //     function onDropDownChange(e) {
        //         console.log("********* onDropDownChange");
        //         var column = e.sender.element.attr("data-column");
        //         console.log("column :", column);
        //         //if columnName == "Keyword" and  we are in the main grid, reset tabIndex
        //         if (column == "KeywWord") {
        //             tabIndex = -1;
        //         }
        //     }
    </script>

    <script id="template" type="text/x-kendo-template">
        <div id="detail-template-#=VehicleListId#"></div>
    </script>
    <script>


        /////////////////
        function onArchivedEmailEstimateClick(e) {
            e.preventDefault();
            var grid = $("#ArchivedVehicleGrid").data("kendoGrid");
            var dataItem = grid.dataItem($(e.currentTarget).closest("tr"));
            var vehicleListId = dataItem.VehicleListId;

            // Show the email estimate container
            $("#archived-email-estimate-container").show();

            // Generate the Excel file by calling SaveToExcel via AJAX
            $.ajax({
                url: '@Url.Action("SaveToExcel", "Export")',
                type: 'GET',
                data: { vehicleListId: vehicleListId },
                xhrFields: {
                    responseType: 'blob' // Ensure the response is treated as a binary file
                },
                success: function (data) {
                    // Create a link element to trigger the file download
                    var link = document.createElement('a');
                    link.href = window.URL.createObjectURL(data);
                    link.download = `${vehicleListId}_Vehicles_Estimate.xlsx`;
                    link.click();

                    // Set the subject with the rebuilt number and today's date
                    var today = new Date();
                    var subject = `Vehiles  Estimates for ${vehicleListId} - Date ${today.toLocaleDateString()} ${today.toLocaleTimeString()}`;

                    // Set the form values
                    $("#to").val("");
                    $("#subject").val(subject);
                    $("#body").val(`Dear Sir/Madam,\nPlease find attached here with Vehicles Estimate for ${vehicleListId}.\n\nThank you`);

                    // Open the Kendo Window
                    var kendoWindow = $("#emailEstimateWindow").data("kendoWindow");
                    if (kendoWindow) {
                        kendoWindow.center().open();
                    } else {
                        console.error("Kendo Window not found.");
                    }
                },
                error: function (xhr, status, error) {
                    console.error("Error downloading Excel file:", error);
                }
            });
        }

        function onArchivedSaveToExcelClick(e) {
            e.preventDefault();
            var grid = $("#ArchivedVehicleGrid").data("kendoGrid");
            var dataItem = grid.dataItem($(e.currentTarget).closest("tr"));
            var vehicleListId = dataItem.VehicleListId;

            // Directly trigger the file download
            window.location.href = '@Url.Action("SaveToExcel", "Export")' + '?vehicleListId=' + vehicleListId;
        }
    </script>
    <script id="archived-template" type="text/x-kendo-template">
        <div id="archived-detail-template-#=VehicleListId#"></div>
    </script>
    @* <script>
        // Event triggered before any CRUD operation (Read, Update, Destroy)
        function onRequestStart(e) {
            // Check if the request type is Update or Destroy
            if (e.type === "update" || e.type === "destroy") {
                var grid = $("#RebuiltPartsGrid").data("kendoGrid");
                var selectedRow = grid.select(); // Get the selected row
                var dataItem = grid.dataItem(selectedRow); // Get the data for the selected row

                if (dataItem && dataItem.RebuiltStockNum) {
                    // Append RebuiltStockNum to the request
                    e.sender.transport.options.update.data = { RebuiltStockNum: dataItem.RebuiltStockNum };
                    e.sender.transport.options.destroy.data = { RebuiltStockNum: dataItem.RebuiltStockNum };
                }
            }
        }
    </script> *@
    <script>
        function onBusChange(e) {
            console.log("event: buschange");
            var selectedBuses = this.value();
            console.log("selected buses :");
            console.log(selectedBuses);

            $.ajax({
                url: '@Url.Action("GetSelectedBuses", "Vehicles")',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ buses: selectedBuses }),
                beforeSend: function (xhr) {

                    console.log("Sending data :", JSON.stringify({ buses: selectedBuses }));
                },
                success: function (data) {

                    console.log('Success:', data);

                },

                error: function (error, data) {
                    console.log('datasent : ', data);
                    console.error('Error:', error);
                }
            });
        }

        function onBusDataBound() {
            console.log("event: busdataBound");

        }

        function errorHandler(e) {
            if (e.errors) {
                var message = "Errors:\n";
                $.each(e.errors, function (key, value) {
                    if ('errors' in value) {
                        $.each(value.errors, function () {
                            message += this + "\n";
                        });
                    }
                });
                alert(message);
            }
        }

    </script>
    <script>
        // Error handler
        // function onDataSourceError(e) {
        //     // debugger;
        //     var grid = e.sender;
        //     let errorMessage = "Operation failed: ";
        //     console.warn('onDataSourceError-grid :', grid);
        //     if (e.errors) {
        //         // Display validation errors
        //         $.each(e.errors, function (key, value) {
        //             if (value.errors) {
        //                 console.warn('onDataSourceError-if (value.errors) :', value.errors);
        //                 errorMessage = value.errors;
        //                // errorMessage = "Operation failed. Check missing required fields." ; //value.errors.join(", ");
        //             }
        //         });
                
        //     }
        //     else if (e.errorThrown) {
        //         errorMessage += e.errorThrown;
        //          console.warn('onDataSourceError-e.errorThrown :', e.errorThrown);

        //     } else if (e.xhr && e.xhr.responseText) {
        //         console.warn('onDataSourceError-e.xhr.responseText :', e.xhr.responseText);
        //         errorMessage += e.xhr.responseText;
        //     }

        //     var notification = $("#notification").data("kendoNotification");
        //     notification.error(errorMessage);
        //     console.log("refreshing grid ater errors");
            
        // }

        function onDataSourceError(e) {
            var notification = $("#notification").data("kendoNotification");
            let errorMessage = "Operation failed:";

            // If there's an XHR response, try parsing it
            if (e.xhr && e.xhr.responseText) {
                console.warn('onDataSourceError-e.xhr.responseText :', e.xhr.responseText);
                try {
                    var response = JSON.parse(e.xhr.responseText);
                    if (response.Errors && Array.isArray(response.Errors)) {
                        response.Errors.forEach(function (msg) {
                            notification.error(msg);
                        });
                        return; // We already displayed individual errors
                    } else {
                        errorMessage += e.xhr.responseText;
                    }
                } catch (err) {
                    console.error('Error parsing response JSON:', err);
                    errorMessage += e.xhr.responseText;
                }
            }
            else if (e.errors) {
                errorMessage += " Server validation failed.";
            }
            else if (e.errorThrown) {
                errorMessage += e.errorThrown;
            }

            notification.error(errorMessage);
        }

        function onVehRequestEnd(e) {
            var notification = $("#notification").data("kendoNotification");

            if (e.type === "create" && e.response && Array.isArray(e.response.Data) && e.response.Data.length > 0) {
                var newId = e.response.Data[0].VehicleListId;
                kendo.alert("Record created with Estimate # <strong style='color:red'>" + newId + "</strong > ")
                // notification.success("<strong style='color:red;'>Record created with Vehicle ID: " + newId + "</strong>");
            } else if (e.type === "create") {
                notification.success("Record created successfully.");
            } else if (e.type === "update") {
                notification.success("Record updated.");
            } else if (e.type === "destroy") {
                notification.success("Record deleted.");
            }
        }

        // function onRequestEnd(e) {
        //     const grid = e.sender;
        //     console.warn('grid :', grid);
        //     var notification = $("#notification").data("kendoNotification");

        //      if (e.type === "create") {
        //         console.warn('onRequestEnd -create');
        //         grid.dataSource.read();
        //         notification.success("Record created successfully.");

        //     } else if (e.type === "update") {
        //         console.warn('onRequestEnd -update');
        //         grid.dataSource.read();
        //         notification.success("Record updated.");
        //     } else if (e.type === "destroy") {
        //         grid.dataSource.read();
        //         notification.success("Record deleted.");
        //     }
        // }
        function onRequestEnd(e) {
            var grid = e.sender;
            var notification = $("#notification").data("kendoNotification");
           // notification.success("onRequestEnd called - check grid name");

           // console.warn('Grid name from hidden field:', gridName);
            console.warn('onScRequestEnd : grid:', grid);
            //console.warn('Resolved grid:', grid);
            //|| !grid.dataSource

            if (!grid ) {
                console.error('Grid or its dataSource is undefined. Skipping data reload.');
                return;
            }

            
                const reloadGrid = () => grid.dataSource.read();
            

            if (e.type === "create" && !e.response.Errors)
             {
                console.warn('onScRequestEnd - create');
                setTimeout(reloadGrid, 50);
                notification.success("Record created successfully.");
            } else if (e.type === "update") {
                console.warn('onScRequestEnd - update');
                setTimeout(reloadGrid, 50);
                notification.success("Record updated.");
            } else if (e.type === "destroy") {
                console.warn('onScRequestEnd - destroy');
                setTimeout(reloadGrid, 50);
                notification.success("Record deleted.");
            }
        

        }

        function onLabourRequestEnd(e) {

           // const gridName = $("#ScPartsMaterialDetailsRebuiltPartsGrid").val();
            const grid = $("#LabourDetailsGrid").data("kendoGrid");
            //var grid = e.sender;
            var notification = $("#notification").data("kendoNotification");
           // notification.success("onRequestEnd called - check grid name");

           // console.warn('Grid name from hidden field:', gridName);
            console.warn('onScRequestEnd : grid:', grid);
            //console.warn('Resolved grid:', grid);

            if (!grid || !grid.dataSource) {
                console.error('Grid or its dataSource is undefined. Skipping data reload.');
                return;
            }

            
                const reloadGrid = () => grid.dataSource.read();
            

            if (e.type === "create" && !e.response.Errors)
             {
                console.warn('onLabourRequestEnd - create');
                setTimeout(reloadGrid, 50);
                notification.success("Record created successfully.");
            } else if (e.type === "update") {
                console.warn('onLabourRequestEnd - update');
                setTimeout(reloadGrid, 50);
                notification.success("Record updated.");
            } else if (e.type === "destroy") {
                console.warn('onLabourRequestEnd - destroy');
                setTimeout(reloadGrid, 50);
                notification.success("Record deleted.");
            }
        }

        function onNScRequestEnd(e) {

           
            const grid = $("#NscPartsMaterialDetailsRebuiltPartsGrid").data("kendoGrid");
            //var grid = e.sender;
            var notification = $("#notification").data("kendoNotification");
           // notification.success("onRequestEnd called - check grid name");

           // console.warn('Grid name from hidden field:', gridName);
            console.warn('onScRequestEnd : grid:', grid);
            //console.warn('Resolved grid:', grid);

            if (!grid || !grid.dataSource) {
                console.error('Grid or its dataSource is undefined. Skipping data reload.');
                return;
            }

            
                const reloadGrid = () => grid.dataSource.read();
            

            if (e.type === "create" && !e.response.Errors)
             {
                console.warn('onNScRequestEnd - create');
                setTimeout(reloadGrid, 50);
                notification.success("Record created successfully.");
            } else if (e.type === "update") {
                console.warn('onNScRequestEnd - update');
                setTimeout(reloadGrid, 50);
                notification.success("Record updated.");
            } else if (e.type === "destroy") {
                console.warn('onNScRequestEnd - destroy');
                setTimeout(reloadGrid, 50);
                notification.success("Record deleted.");
            }
        }

        //start original request end
        
        function onScRequestEnd(e) {

           // const gridName = $("#ScPartsMaterialDetailsRebuiltPartsGrid").val();
            const grid = $("#ScPartsMaterialDetailsRebuiltPartsGrid").data("kendoGrid");
            //var grid = e.sender;
            var notification = $("#notification").data("kendoNotification");
           // notification.success("onRequestEnd called - check grid name");

           // console.warn('Grid name from hidden field:', gridName);
            console.warn('onScRequestEnd : grid:', grid);
            //console.warn('Resolved grid:', grid);

            if (!grid || !grid.dataSource) {
                console.error('Grid or its dataSource is undefined. Skipping data reload.');
                return;
            }

            
                const reloadGrid = () => grid.dataSource.read();
            

            if (e.type === "create" && !e.response.Errors)
             {
                console.warn('onScRequestEnd - create');
                setTimeout(reloadGrid, 50);
                notification.success("Record created successfully.");
            } else if (e.type === "update") {
                console.warn('onScRequestEnd - update');
                setTimeout(reloadGrid, 50);
                notification.success("Record updated.");
            } else if (e.type === "destroy") {
                console.warn('onScRequestEnd - destroy');
                setTimeout(reloadGrid, 50);
                notification.success("Record deleted.");
            }
        }

        //end original request end

       
        // Success handler
        // function onRequestEnd(e) {
        //    var notification = $("#notification").data("kendoNotification");
        //    notification.success(e.type);
        //   // Initialize notification FIRST

        //         if (e.type === "create") {
        //             var notification = $("#notification").data("kendoNotification");
        //             console.log('e.response :', e.response);
        //             console.log('e.response[0] :', e.response[0]);
        //             console.log('.response[0].VehicleListId :', response[0].VehicleListId);
        //             var newId = e.response[0].VehicleListId;

        //         notification.success("<strong style='color:green;'>Record created with Vehicle ID: " + newId + "</strong>");
        //             location.reload();
        //             //notification.success("Record created successfully");
        //           //  $("#userGrid").data("kendoGrid").dataSource.read(); //force refresh grid
        //         } else if (e.type === "update") {
        //            var notification = $("#notification").data("kendoNotification");
        //         location.reload();
        //             notification.success("Record updated successfully");
        //           //   $("#userGrid").data("kendoGrid").dataSource.read(); //force refresh grid
        //         } else if (e.type === "destroy") {
        //             var notification = $("#notification").data("kendoNotification");
        //         location.reload();
        //              notification.success("Record deleted successfully");
        //           //  $("#userGrid").data("kendoGrid").dataSource.read(); //force refresh grid
        //         }
        //     }
    </script>

    @* <script>
        function onLabourRequestEnd(e) {
            var notification = $("#notification").data("kendoNotification");
            notification.success(e.type);
            // Initialize notification FIRST

            if (e.type === "create") {
                var notification = $("#notification").data("kendoNotification");
                notification.success("VEHICLE Record created successfully");
                //location.reload();
               // $("#LabourDetailsGrid_@ViewBag.PartNum").data("kendoGrid").dataSource.read(); //force refresh grid
            } else if (e.type === "update") {
                var notification = $("#notification").data("kendoNotification");
                notification.success("VEHICLE Record updated successfully");
                //location.reload();
               // $("#LabourDetailsGrid_@ViewBag.PartNum").data("kendoGrid").dataSource.read();//force refresh grid
            } else if (e.type === "destroy") {
                var notification = $("#notification").data("kendoNotification");
                notification.success("VEHICLE Record deleted successfully");
                //location.reload();
              //  $("#LabourDetailsGrid_@ViewBag.PartNum").data("kendoGrid").dataSource.read();
            }
        }
    </script> *@

    <script>
        function getAutoCompleteParams() {
            var input = $("input[data-role='autocomplete']:focus");
            return {
                columnName: input.attr("name"),
                searchText: input.val() || "" // Handle empty search text
            };
        }

        function getComboBoxParams() {
            var input = $(".k-combobox input.k-input:focus");
            return {
                columnName: input.attr("name")?.replace("_input", "").split('.').pop(),
                searchText: input.val() || ""
            };
        }

    </script>


    @* Start : Add following for validation *@
    <script>
        // Validation for AutoComplete
        function validateAutoCompleteSelection(e) {
            const column = e.sender.element.attr("data-column");
            const value = e.sender.value();
            let regex, error;

            if (column === "LabourDefn") {
                regex = /^[a-zA-Z0-9-()\s]*$/;
                error = "Invalid Labour Definition, check for special characters";
            }
            else if (column === "CostCentre") {
                regex = /^[a-zA-Z0-9-&()\s]*$/;
                error = "Invalid Cost Centre, check for special characters";
            }
            else if (column === "Task") {
                regex = /^[a-zA-Z0-9-&()\s]*$/;
                error = "Invalid Task, check for special characters";
            }

            if (regex && !regex.test(value)) {
                notification.error(error);
                e.sender.value("");
            }
        }

        // // Inline Edit Validation
        // function onEdit(e) {
        //     showNotification("info", "onEdit : " + e.field + ".");
        //     //Recalculate Totalcost
        //     if (["Percentage", "Qty", "OemPartCost"].includes(e.field)) {
        //         e.model.set("needsRecalculation", true);
        //         showNotification("info", "Please recalculate Total Cost after modifying " + e.field + ".");
        //     }
        //     const validationRules = {
        //         "LabourDefn": {
        //             regex: /^[a-zA-Z0-9()\s]*$/,
        //             error: "Invalid Supplier Name, check for special characters"
        //         },
        //         "CostCentre": {
        //             regex: /^[a-zA-Z0-9&-()\s]*$/,
        //             error: "Invalid Supplier Name, check for special characters"
        //         },
        //         "Task": {
        //             regex: /^[a-zA-Z0-9&-()\s]*$/,
        //             error: "Invalid Task, check for special characters"
        //         }
        //     };

        //     Object.entries(validationRules).forEach(([field, rule]) => {
        //         const input = e.container.find(`input[name='${field}']`);
        //         input.on("input", function () {
        //             if (!rule.regex.test(this.value)) {
        //                 notification.error(rule.error);
        //                 $(this).addClass("k-invalid");
        //             } else {
        //                 $(this).removeClass("k-invalid");
        //             }
        //         });
        //     });


        // }

        // Keep existing notification and error handlers
    </script>
    @* End : Add  validation *@
    @* <script>
        function refreshScPartDetails(e) {

               var gridName = $("#scGridNameField").val(); // Get grid name from hidden field
               if (!gridName) {
                    console.warn("SC Grid name not found.");
                    return;
                }

                var grid = $("#" + gridName).data("kendoGrid"); // Select the grid dynamically

                if (grid) {
                    grid.dataSource.read(); // Refresh grid data
                } else {
                    console.warn("Grid not found: " + gridName);
                }
            var dataItem = grid.dataItem($(e.currentTarget).closest("tr"));
            var notification = $("#notification").data("kendoNotification");

            if (!dataItem.MMSStockCode) {
                notification.show("Please enter a valid Stock Code before refreshing", "error");
                return;
            }

            $.ajax({
                url: '@Url.Action("GetScPartDetails", "ScPartsUsedInEstimates")',
                data: { mmsStockCode: dataItem.MMSStockCode },
                beforeSend: function () {
                    notification.show("Fetching part details...", "info");
                },
                success: function (response) {
                    if (response && response.PartType && response.DetailedDesc) {
                        var dialog = $("#partDetailsDialog").data("kendoDialog");
                        dialog.content(`
                            <div style="padding: 10px;">
                                <p><strong>Part Type:</strong> ${response.PartType}</p>
                                <p><strong>Part Description:</strong> ${response.DetailedDesc}</p>
                                <p><strong>Part Unit CostCentre ($/unit):</strong> ${response.UnitCost}</p>
                            </div>
                        `);
                        dialog.open();
                    } else {
                        notification.show("No matching parts found for this Stock Code", "warning");
                    }
                },
                error: function (xhr) {
                    var errorMessage = xhr.status === 404
                        ? "Stock Code not found in system"
                        : "Error retrieving part details";
                    notification.show(errorMessage, "error");
                }
            });
        }

    </script> *@
    <script>
        function parseCurrency(value) {
            try {
                if (!value) return 0;
                // Remove non-numeric characters except digits, dots, and minus signs
                var numString = value.toString().replace(/[^0-9.-]/g, '');
                var num = parseFloat(numString);
                return isNaN(num) ? 0 : num;
            } catch (e) {
                showError("Error parsing currency: " + e.message);
                return 0;
            }
        }

        function formatNegative(value) {
            try {

                // Format to 2 decimal places and wrap negatives in parentheses
                return value < 0 ? `(${Math.abs(value).toFixed(2)})` : value.toFixed(2);
            } catch (e) {
                showError("Error formatting number: " + e.message);
                return '0.00';
            }
        }

        function calculateCostSaving(BuyNewCost, RemanCost) {

            //  console.log('inside calculateCostSaving ');

            try {
                //  console.log('BuyNewCost :', BuyNewCost);
                //    console.log('RemanCost :', RemanCost);
                var buyNew = parseCurrency(BuyNewCost);
                var reman = parseCurrency(RemanCost);
                var costSaving = buyNew - reman;
                //console.log("returning costSaving:", costSaving);
                // console.log("returning formatNegative :", formatNegative(costSaving));
                return formatNegative(costSaving);
            } catch (e) {
                showError("Error calculating cost saving: " + e.message);
                return '0.00';
            }
        }

        function calculatePercentageSaving(BuyNewCost, RemanCost) {

            try {
                var buyNew = parseCurrency(BuyNewCost);
                var reman = parseCurrency(RemanCost);
                var costSaving = buyNew - reman;

                if (buyNew === 0) return '0.00%'; // Avoid division by zero

                var percentage = (costSaving / buyNew) * 100;
                return formatNegative(percentage) + '%';
            } catch (e) {
                console.log("Error calculating percentage saving: " + e.message);
                return '0.00%';
            }
        }

        function showError(message) {
            var notification = $("#notification").data("kendoNotification");
            if (notification) {
                notification.error(message);
            } else {
                console.error("Notification widget not initialized. Error: " + message);
            }
        }
    </script>

    <script>
        function refreshNscPartDetails(e) {
            // var grid = $("#NscPartsMaterialDetailsRebuiltPartsGrid").data("kendoGrid");
            var nscGridName = $("#nscGridNameField").val(); // Get grid name from hidden field
            console.log('nscGridName :', nscGridName);
            if (!nscGridName) {
                console.warn("NSC Grid name not found. returning");
                return;
            }

            // var grid = $("#" + nscGridName).data("kendoGrid"); // Select the grid dynamically
            var grid = $("#NscPartsMaterialDetailsRebuiltPartsGrid").data("kendoGrid");

            if (grid) {
                //  grid.dataSource.read(); // Refresh grid data
            } else {
                console.warn("Grid not found: " + nscGridName);
            }
            var dataItem = grid.dataItem($(e.currentTarget).closest("tr"));
            var notification = $("#notification").data("kendoNotification");

            if (!dataItem.OrigSuppNum) {
                notification.show("Supplier Number is required to refresh details", "error");
                return;
            }

            $.ajax({
                url: '@Url.Action("RefreshNscPartDetails", "NscPartsUsedInEstimates")',
                data: { origSuppNum: dataItem.OrigSuppNum },
                beforeSend: function () {
                    notification.show("Refreshing part details...", "info");
                },
                success: function (response) {
                    if (response.Message) {
                        // Handle cost validation error
                        notification.show(response.Message, "error");

                        // Optional: Update other fields even if cost is invalid
                        if (response.Data) {
                            dataItem.set("OrigSupplierName", response.Data.OrigSupplierName);
                            dataItem.set("KeyWord", response.Data.KeyWord);
                            dataItem.set("Description", response.Data.Description);

                            // grid.refresh();
                        }
                    } else {
                        // Update all fields
                        dataItem.set("OrigSupplierName", response.OrigSupplierName);
                        dataItem.set("KeyWord", response.KeyWord);
                        dataItem.set("Description", response.Description);
                        dataItem.set("OemPartCost", response.OemPartCost);

                        //  grid.refresh();
                        notification.show("Details updated successfully", "success");
                    }
                },
                error: function (xhr) {
                    var errorMessage = xhr.status === 404
                        ? "Supplier not found"
                        : "Error refreshing details";
                    notification.show(errorMessage, "error");
                }
            });
        }
    </script>

    <script>
        // function onCellClose(e) {
        //     // Get grid instance and cell element
        //     const grid = e.sender;
        //     const cell = e.container || e.cell; // Handle different event argument structures

        //     // Method 1: Get field name from column index
        //     const columnIndex = $(cell).index();
        //     const column = grid.columns[columnIndex];
        //     let fieldName = column.field;

        //     // Method 2: Fallback to data-field attribute
        //     if (!fieldName) {
        //         fieldName = $(cell).attr("data-field");
        //     }

        //     // Debugging: Uncomment to see values in console
        //     console.log("Column Index:", columnIndex);
        //     console.log("Column Object:", column);
        //     console.log("Field Name:", fieldName);

        //     // Fields that require recalculation
        //     const criticalFields = ["Percentage", "Qty", "OemPartCost"];

        //     if (criticalFields.includes(fieldName)) {
        //         const dataItem = e.model;
        //         dataItem.set("needsRecalculation", true);
        //         showNotification("info", "Please recalculate Total Cost for this row.");
        //     }
        // }



        function onSaveChanges(e) {
            var notification = $("#notification").data("kendoNotification");
           // notification.success("onSaveChanges called");
            const grid = $("#NscPartsMaterialDetailsRebuiltPartsGrid").data("kendoGrid");
            const row = $(e.currentTarget).closest("tr");
            const dataItem = grid.dataItem(row);
            // const needsRecalc = dataItem.get("needsRecalculation"); //ssk4
            const needsRecalc = grid.dataSource.data().some(item => item.needsRecalculation);
            //  const needsRecalc = grid.dataSource.data().some(item => item.needsRecalculation);
            // showNotification("error", needsRecalc);

            //const needsRecalc = dataItem.some(item => item.needsRecalculation);
            // showNotification("error", needsRecalc);
            //  showNotification("error", "inside onSaveChanges :.needsRecalc = " + needsRecalc);

            // if (needsRecalc) {
            //     e.preventDefault();
            //     showNotification("error", "Recalculate Total Cost for modified rows before saving.");
            // }
        }

        function recalculateTotalCost(e) {
            e.preventDefault();
            const grid = $("#NscPartsMaterialDetailsRebuiltPartsGrid").data("kendoGrid");
            const row = $(e.currentTarget).closest("tr");
            const dataItem = grid.dataItem(row);

            // Handle number formatting
            const parseNumber = (value) => {
                const num = typeof value === 'string'
                    ? parseFloat(value.replace(/,/g, ''))
                    : value;
                return isNaN(num) ? 0 : num;
            };

            const percentage = parseNumber(dataItem.Percentage);
            const qty = parseNumber(dataItem.Qty);
            const oemPartCost = parseNumber(dataItem.OemPartCost);
            console.log("Sending values:", {
                percentage: percentage,
                qty: qty,
                oemPartCost: oemPartCost
            });
            $.ajax({
                url: '@Url.Action("RecalculateTotalCost", "NscPartsUsedInEstimates")',
                type: 'POST',
                contentType: 'application/x-www-form-urlencoded',
                data: {
                    percentage: percentage,
                    qty: qty,
                    oemPartCost: oemPartCost
                },
                success: function (response) {
                    if (response.success) {
                        console.log("Now time to reset Recalculation. Received response:", response);

                        // Update data item and refresh grid
                        dataItem.set("TotalCost", response.totalCost);
                        dataItem.set("needsRecalculation", false);

                        // Force grid refresh

                        //  grid.refresh(); //ssk2
                        // grid.dataSource.sync(); //ssk2

                        showNotification("success", "Total Cost updated: $" + response.totalCost.toFixed(2));
                    } else {

                        showNotification("error", response.message || "Recalculation failed");
                    }
                },
                error: function (xhr) {
                    showNotification("error", "Server error: " + xhr.statusText);
                }
            });
        }

        function showNotification(type, message) {
            var notification = $("#notification").data("kendoNotification");
            if (!notification) {
                notification = $("#notification").kendoNotification({
                    position: { pinned: true, top: 50, right: 50 },
                    autoHideAfter: 5000
                }).data("kendoNotification");
            }
            notification.show(message, type);
        }
    </script>

    <script>
        function refreshRbPartDetails(e) {
            var grid = $("#RbPartsMaterialDetailsRebuiltPartsGrid").data("kendoGrid");
            var dataItem = grid.dataItem($(e.currentTarget).closest("tr"));
            var notification = $("#notification").data("kendoNotification");
            notification.show(dataItem.RebuiltStockNum, "error");

            if (!dataItem.RebuiltStockNum) {
                notification.show(dataItem.RebuiltStockNum, "error");
                notification.show("Rebuilt Part Number is required to refresh details", "error");
                return;
            }

            $.ajax({
                url: '@Url.Action("RefreshRbPartDetails", "RbPartsUsedInEstimates")',
                data: { rebuiltStockNum: dataItem.RebuiltStockNum },
                beforeSend: function () {
                    notification.show("Refreshing part details...", "info");
                },
                success: function (response) {
                    if (response.Message) {
                        // Handle cost validation error
                        notification.show(response.Message, "error");

                        // Optional: Update other fields even if cost is invalid
                        if (response.Data) {
                            // dataItem.set("RebuiltStockNum", response.Data.RebuiltStockNum);
                            dataItem.set("KeyWord", response.Data.KeyWord);
                            dataItem.set("Description", response.Data.Description);
                            grid.dataSource.read(); //ssk5
                        }
                    } else {
                        // Update all fields
                        //  dataItem.set("RebuiltStockNum", response.RebuiltStockNum);
                        dataItem.set("KeyWord", response.KeyWord);
                        dataItem.set("Description", response.Description);

                        //   grid.refresh();
                        grid.dataSource.read(); //ssk5
                        notification.show("Details updated successfully", "success");
                    }
                },
                error: function (xhr) {
                    var errorMessage = xhr.status === 404
                        ? "Rebuilt Part  not found"
                        : "Error refreshing details";
                    notification.show(errorMessage, "error");
                }
            });
        }
    </script>

    <script>
        function onExcelExport(e) {
            console.log("onExcelExport called");

            var grid = $("#VehiclesGrid").data("kendoGrid");
            var dataSource = grid.dataSource;

            //  Prevent automatic export until all data is ready
            e.preventDefault();

            dataSource.read().then(function () {
                var data = dataSource.data(); //  Now holds ALL records across all pages
                var sheet = e.workbook.sheets[0];

                //  Allowed fields for the final report
                var allowedFields = [
                    "RebuiltStockNum", "MmsStockCode", "KeyWord",
                    "DetailedDesc", "JobNumber", "BuyNewCost", "RemanCost"
                ];

                //  Filter out unwanted columns
                sheet.columns = sheet.columns.filter(function (column, index) {
                    var field = grid.columns[index] ? grid.columns[index].field : null;
                    return allowedFields.includes(field);
                });

                //  Create header row
                sheet.rows[0].cells = sheet.rows[0].cells.filter(function (cell, index) {
                    var field = grid.columns[index] ? grid.columns[index].field : null;
                    return allowedFields.includes(field);
                });

                //  Add calculated column headers
                sheet.columns.push({ width: 150 });
                sheet.rows[0].cells.push({
                    value: "Cost Savings Per Unit",
                    background: "#f3f3f3",
                    color: "#000000",
                    bold: true
                });

                sheet.columns.push({ width: 150 });
                sheet.rows[0].cells.push({
                    value: "Percentage Savings Per Unit",
                    background: "#f3f3f3",
                    color: "#000000",
                    bold: true
                });

                //  Ensure rows exist for ALL data rows
                while (sheet.rows.length <= data.length) {
                    sheet.rows.push({ cells: [] });
                }

                //  Inject calculated values for ALL records
                data.forEach(function (item, index) {
                    var row = sheet.rows[index + 1]; // Create if missing

                    // Ensure other allowed fields are populated
                    row.cells = row.cells.filter(function (cell, index) {
                        var field = grid.columns[index] ? grid.columns[index].field : null;
                        return allowedFields.includes(field);
                    });

                    var buyNewCost = item.BuyNewCost || 0;
                    var remanCost = item.RemanCost || 0;

                    //  Inject calculated values
                    row.cells.push({
                        value: calculateCostSaving(buyNewCost, remanCost),
                        background: "#f9f9f9",
                        color: "#333"
                    });

                    row.cells.push({
                        value: calculatePercentageSaving(buyNewCost, remanCost),
                        background: "#f9f9f9",
                        color: "#333"
                    });
                });

                // Trigger export after processing
                kendo.saveAs({
                    dataURI: new kendo.ooxml.Workbook(e.workbook).toDataURL(),
                    fileName: "Vehicle.xlsx"
                });
            });
        }

    </script>
    <script>
        var currentDropDown;

        function onDropDownOpen(e) {
            currentDropDown = e.sender; // Capture the currently opened dropdown instance
        }

        function getDropDownListParams() {
            var $cell = $("td.k-edit-cell"); // Find the currently edited cell
            var $dropdown = $cell.find("input[name]"); // Target the DropDownList's hidden input field (which stores the value)

            if ($dropdown.length === 0) {
                console.warn("No input field found in the edited cell.");
                return {};
            }

            var dropdownWidget = $dropdown.data("kendoDropDownList"); // Get the DropDownList widget

            if (!dropdownWidget) {
                console.warn("DropDownList widget is not initialized yet.");
                return {};
            }
            var fullColumnName = $dropdown.attr("name");
            var colName = fullColumnName.split('.').pop();
            return {
                columnName: colName,
                searchText: dropdownWidget.text() || "" // Get selected text
            };
        }
    </script>
    <script>
        // Initialize custom confirmation dialog
        var deleteDialog = $("#deleteConfirmationDialog").kendoWindow({
            width: "400px",
            title: "Confirm Delete",
            modal: true,
            visible: false,
            actions: ["Close"]
        }).data("kendoWindow");

        function showDeleteConfirmation(e) {
            console.log("inside showDeleteConfirmation");
            e.preventDefault();

            var $btn = $(e.currentTarget);
            var gridId = $btn.data("grid");
            
            var deleteUrl = $btn.data("url");
            var idField = $btn.data("id-field");
            var gridType = $btn.data("grid-type");
            var parentPartId = $btn.data("parentPartId_field");

            // var mmsstockcodeField = $btn.data("mmsstockcode-field");
            // console.log("$$$$$ mmsstockcodeField :", mmsstockcodeField);
            // console.log("%%%%% parentGridId :", parentGridId);

            var grid = $("#" + gridId).data("kendoGrid");
            //var grid = e.sender;

            var dataItem = grid.dataItem($btn.closest("tr"));

            var $dialog = $("#deleteConfirmationDialog");
            console.log("inside showDeleteConfirmation -2");
            $dialog.data("grid", grid);
            $dialog.data("dataItem", dataItem);
            $dialog.data("url", deleteUrl);
            $dialog.data("idField", idField);
             $dialog.data("parentPartId", parentPartId);
            $dialog.data("gridType", gridType); // add gridType
            var rebuiltStockNumField = $btn.data("rebuiltstocknum-field"); //ssk4
            $dialog.data("rebuiltStockNumField", rebuiltStockNumField); //ssk4
            console.log("inside showDeleteConfirmation gridType = ", gridType);
            deleteDialog.center().open();
        }


        $(document).on("click", "#deleteConfirmationDialog .confirm-btn", function () {
            console.log("inside deleteConfirmationDialog - 1");
            var $dialog = $("#deleteConfirmationDialog");
            var grid = $dialog.data("grid");
            var dataItem = $dialog.data("dataItem");
            console.warn('dataItem :', dataItem);
            var deleteUrl = $dialog.data("url");
            console.log("deleteUrl=", deleteUrl);
            var idField = $dialog.data("idField");
            //  var parentPartId = $dialog.data("parentGridId");
            // var mmsstockcodeField = $dialog.data("mmsstockcodeField");
            var gridType = $dialog.data("gridType");
            var notification = $("#notification").data("kendoNotification");
            console.log("******* inside deleteConfirmationDialog - 2");
            console.log("idField : ", idField);
            console.log("idField : ", idField);
            //   console.log("***mmsstockcodeField : ", mmsstockcodeField);
            console.log("gridType :", gridType);
            // console.log("DEBUG >>>", {
            //     mmsstockcodeField,
            //     value: dataItem[mmsstockcodeField],
            //     dataItem
            // });
            var dataToSend = {};
            //  var mmsValue = dataItem[mmsstockcodeField] || "";
            dataToSend[idField] = dataItem[idField];
           // console.log("***** parentGridId :", parentGridId);
            //  dataToSend[parentPartId] = dataItem[parentGridId];
            dataToSend["parentPartId"] = parentGridId; //dataItem["VehicleListId"];;// dataItem[mmsValue];
            dataToSend["gridType"] = gridType; // static param
            var rebuiltStockNumField = $dialog.data("rebuiltStockNumField"); // ssk4
            dataToSend["rebuiltStockNum"] = dataItem[rebuiltStockNumField]; // ssk4

            $.ajax({
                url: deleteUrl,
                type: 'POST',
                data: dataToSend,
                success: function () {
                    // grid.dataSource.remove(dataItem);
                    grid.dataSource.read(); //force refresh grid
                    notification.success("Record deleted successfully");
                    deleteDialog.close();
                },
                error: function (xhr) {
                    notification.error("Delete failed: " + xhr.responseText);
                    deleteDialog.close();
                }
            });
        });
        // $(document).on("click", "#deleteConfirmationDialog .cancel-btn", function () {
        //     deleteDialog.close();
        // });
    </script>

    <script>
        // Track unsaved changes state
        let unsavedChangesExist = false;

        function onLabourGridDataBound(e) {
            const grid = e.sender;
            const ds = grid.dataSource;
            unsavedChangesExist = false;

            // Clear previous styling
            $(".unsaved-row, .unsaved-cell, .unsaved-badge").remove();

            // Apply new styling
            ds.view().forEach(item => {
                const row = grid.tbody.find(`tr[data-uid='${item.uid}']`);

                if (item.dirty || item.isNew()) {
                    // Add row class
                    row.addClass("unsaved-row");

                    // Add badge to first cell
                    const firstCell = row.find("td:first");
                    if (!firstCell.find(".unsaved-badge").length) {
                        firstCell.append(`<span class="unsaved-badge">UNSAVED</span>`);
                    }

                    // Highlight modified cells
                    Object.keys(item.modified || {}).forEach(field => {
                        row.find(`td[data-field='${field}']`)
                            .addClass("unsaved-cell");
                    });

                    unsavedChangesExist = true;
                }
            });

            // Update tab indicator
            const tabStrip = $("#vehicleTabStrip").data("kendoTabStrip");
            if (tabStrip?.items().length) {
                $(tabStrip.items()[0].element)
                    .find(".k-link")
                    .toggleClass("has-unsaved", unsavedChangesExist);
            }

            //ssk12 start - Disable Save/Add
           var gridName = grid.element.attr('id'); //  like "LabourDetailsGrid_123"
            var originalAddCommand = null;


            // Initialize only once
            if (!originalAddCommand) {
                originalAddCommand = grid.addRow;
            }

            // Modify add command behavior
            grid.addRow = function () {
                if (!grid.dataSource.hasChanges()) {
                    originalAddCommand.call(grid);
                }
            };

            grid.dataSource.bind("change", function () {
                updateToolbarButtons(gridName);

            });

            updateToolbarButtons(gridName);


            //ssk12 end - Disable Save/Add

        }


        function onLabourGridSave(e) {
            console.warn('onLabourGridSave');

            const grid = e.sender;
            const notification = $("#notification").data("kendoNotification");

            grid.one("dataBound", () => grid.refresh());

            notification.success("Changes saved successfully");

            // Retry refresh safely
            let attempts = 0;
            const maxAttempts = 5;

            function tryReload() {
                if (grid && grid.dataSource) {
                    if (!grid.dataSource.hasChanges()) {
                        grid.dataSource.read().then(() => {
                            unsavedChangesExist = false;
                            console.log("Grid refreshed successfully after save.");
                        });
                    } else {
                        console.warn("Changes pending, skipping dataSource.read() to avoid conflict.");
                    }
                } else if (attempts < maxAttempts) {
                    attempts++;
                    setTimeout(tryReload, 200);
                } else {
                    console.error("Failed to refresh grid — dataSource not ready.");
                }
            }

            tryReload();
        }

        function onGridEdit(e) {
            // Re-apply styles after edit
            const grid = e.sender;
            grid.one("dataBound", () => grid.refresh());
        }
    </script>
    <script>
        function onDetailExpand(e) {
            // Add class to highlight row
            console.log("onDetailExpand");
            const grid = e.sender;
            const ds = grid.dataSource;
            console.log(e.masterRow);
            //$(e.masterRow).addClass("selected-row");
            $(e.masterRow).addClass("selected-row");

        }

        function onDetailCollapse(e) {
            // Remove highlight when detail is collapsed
            console.log("onDetailCollapse");
            const grid = e.sender;
            const ds = grid.dataSource;

            $(e.masterRow).removeClass("selected-row");

        }
    </script>
    <script>
        function onVehGridSave(e) {
            if (e.model.isNew()) {
                const row = e.sender.tbody.find(`[data-uid='${e.model.uid}']`);
                row.addClass("newly-added-row");
            } 
            //required field
            var cell = e.container;
            var validator = cell.kendoValidator().data("kendoValidator");

            // remove existing custom validation message div (if any)
            cell.find(".cell-validation-error").remove();

            if (!validator.validate()) {
                e.preventDefault(); // cancel cell save

                // get validation message from the first failed rule
                var errors = validator.errors();
                for (var field in errors) {
                    var message = errors[field];

                    // inject inline error message under the cell
                    cell.append('<div class="cell-validation-error" style="color:red; font-size:12px;">' + message + '</div>');
                    break;
                }
            }
        }

        function onVehGridDataBound(e) {
            // Maintain new row styling after paging/sorting
            e.sender.items().each(function () {
                const dataItem = e.sender.dataItem(this);
                if (dataItem.isNew()) {
                    $(this).addClass("newly-added-row");
                }
            });
            //ssk12 - Add/Save buttons
            const grid = e.sender;
            const ds = grid.dataSource;
            unsavedChangesExist = false;

            // Clear previous styling
            $(".unsaved-row, .unsaved-cell, .unsaved-badge").remove();

            // Apply new styling
            ds.view().forEach(item => {
                const row = grid.tbody.find(`tr[data-uid='${item.uid}']`);

                if (item.dirty || item.isNew()) {
                    // Add row class
                    row.addClass("unsaved-row");

                    // Add badge to first cell
                    const firstCell = row.find("td:first");
                    if (!firstCell.find(".unsaved-badge").length) {
                        firstCell.append(`<span class="unsaved-badge">UNSAVED</span>`);
                    }

                    // Highlight modified cells
                    Object.keys(item.modified || {}).forEach(field => {
                        row.find(`td[data-field='${field}']`)
                            .addClass("unsaved-cell");
                    });

                    unsavedChangesExist = true;
                }
            });

            // Update tab indicator
            const tabStrip = $("#vehicleTabStrip").data("kendoTabStrip");
            if (tabStrip?.items().length) {
                $(tabStrip.items()[0].element)
                    .find(".k-link")
                    .toggleClass("has-unsaved", unsavedChangesExist);
            }

            //ssk12 start - Disable Save/Add
           var gridName = grid.element.attr('id'); //  like "LabourDetailsGrid_123"
            var originalAddCommand = null;


            // Initialize only once
            if (!originalAddCommand) {
                originalAddCommand = grid.addRow;
            }

            // Modify add command behavior
            grid.addRow = function () {
                if (!grid.dataSource.hasChanges()) {
                    originalAddCommand.call(grid);
                }
            };

            grid.dataSource.bind("change", function () {
                updateToolbarButtons(gridName);
            });

            updateToolbarButtons(gridName);

            //ssk12 end - Disable Save/Add
        }
    </script>
    <script>
        var hoverTimer;

        $(document).on("mouseenter", ".stock-code-cell", function () {
            var $cell = $(this);
            var grid = $cell.closest(".k-grid").data("kendoGrid");
            var dataItem = grid.dataItem($cell.closest("tr"));

            if (!dataItem || !dataItem.MMSStockCode) return;

            // Start timer so we don't instantly show the dialog
            hoverTimer = setTimeout(function () {
                fetchPartDetails(dataItem.MMSStockCode);
            }, 500); // half-second delay before showing
        });

        $(document).on("mouseleave", ".stock-code-cell", function () {
            clearTimeout(hoverTimer);
        });

        function fetchPartDetails(mmsStockCode) {
            var notification = $("#notification").data("kendoNotification");

            $.ajax({
                url: '@Url.Action("GetScPartDetails", "ScPartsUsedInEstimates")',
                data: { mmsStockCode: mmsStockCode },
                beforeSend: function () {
                    notification.show("Fetching part details...", "info");
                },
                success: function (response) {
                    if (response && response.PartType && response.DetailedDesc) {
                        var dialog = $("#partDetailsDialog").data("kendoDialog");
                        dialog.content(`
                                                        <div style="padding: 10px;">
                                                            <p><strong>Part Type:</strong> ${response.PartType}</p>
                                                            <p><strong>Part Description:</strong> ${response.DetailedDesc}</p>
                                                            <p><strong>Part Unit CostCentre ($/unit):</strong> ${response.UnitCost}</p>
                                                        </div>
                                                    `);
                        dialog.open();
                    } else {
                        notification.show("No matching parts found for this Stock Code", "warning");
                    }
                },
                error: function (xhr) {
                    var errorMessage = xhr.status === 404
                        ? "Stock Code not found in system"
                        : "Error retrieving part details";
                    notification.show(errorMessage, "error");
                }
            });
        }
    </script>
    @*  <script>
       function getSupplierNumber() {
            var grid = $("#NscPartsMaterialDetailsRebuiltPartsGrid").data("kendoGrid");

            var currentRow = grid.editable ? grid.editable.element.closest("tr") : null;
            if (!currentRow || currentRow.length === 0) return { supplierNumber: "" };

            var data = grid.dataItem(currentRow);
            return {
                supplierNumber: data ? data.OrigSuppNum : ""
            };
        }


        function onNscPartsComboBoxSelect(e) {
            var dataItem = this.dataItem(e.item.index());
            var supplierNumber = dataItem.Text;

            var grid = $("#NscPartsMaterialDetailsRebuiltPartsGrid").data("kendoGrid");
            var row = this.element.closest("tr");
            var data = grid.dataItem(row);

            data.set("OrigSuppNum", supplierNumber);

            $.ajax({
                url: '/AutoComplete/GetSupplierDetails',
                type: 'GET',
                data: { supplierNumber: supplierNumber },
                success: function (result) {
                    if (result) {
                        data.set("OrigSupplierName", result.SupplierName);
                        // data.set("KeyWord", result.KeyWord);
                        // data.set("Description", result.Description);
                        // data.set("OemPartCost", result.PartCost);
                    }
                },
                error: function (xhr, status, error) {
                    console.error("Error fetching supplier details:", error);
                }
            });
        }
    </script> *@
    <script>
        function getSupplierNameParams() {
            var grid = $("#NscPartsMaterialDetailsRebuiltPartsGrid").data("kendoGrid");
            var row = grid.editable ? grid.editable.element.closest("tr") : null;
            var data = row ? grid.dataItem(row) : null;
            console.log("**** data.OrigSuppNum :", data.OrigSuppNum);

            return {
                supplierNumber: data ? data.OrigSuppNum : ""
            };
        }


        function onNscPartsComboBoxSelect(e) {
            var supplierName = this.dataItem(e.item.index()).Text;

            var grid = $("#NscPartsMaterialDetailsRebuiltPartsGrid").data("kendoGrid");
            var row = this.element.closest("tr");
            var data = grid.dataItem(row);

            var supplierNumber = data ? data.OrigSuppNum : "";
            console.log("**** onNscPartsComboBoxSelect -  supplierNumber :", supplierNumber);

            data.set("OrigSupplierName", supplierName);

            if (supplierNumber && supplierName) {
                $.ajax({
                    url: '/AutoComplete/GetSupplierDetailsByName',
                    type: 'GET',
                    data: {
                        supplierNumber: supplierNumber,
                        supplierName: supplierName
                    },
                    success: function (result) {
                        if (result) {
                            data.set("OemPartCost", result.PartCost);
                            data.set("Description", result.Description);
                            data.set("KeyWord", result.KeyWord);
                        }
                    },
                    error: function () {
                        console.error("Failed to fetch supplier details.");
                    }
                });
            }
        }
    </script>
    <script>
        function onRebuiltStockNumSelect(e) {
            console.log("%%%%%% Inside onRebuiltStockNumSelect");
            var dataItem = this.dataItem(e.item.index());
            var rebuiltStockNum = dataItem.Text;


            var grid = $("#RbPartsMaterialDetailsRebuiltPartsGrid").data("kendoGrid");
            var row = this.element.closest("tr");
            var data = grid.dataItem(row);
            console.log("%%%%%% Inside onRebuiltStockNumSelect : rebuiltStockNum :", rebuiltStockNum);


            // Reset values first
            data.set("MmsStockCode", "");
            data.set("CoreCharge", "");
            data.set("Description", "");
            data.set("KeyWord", "");
            data.set("UnitCost", 0.0);

            if (rebuiltStockNum) {
                $.ajax({
                    url: "/AutoComplete/GetRbPartDetails",
                    type: "GET",
                    data: { rebuiltStockNum: rebuiltStockNum },
                    success: function (result) {
                        if (result) {
                            data.set("RebuiltStockNum", result.RebuiltStockNum || "");
                            data.set("MmsStockCode", result.MmsStockCode || "");
                            data.set("CoreCharge", result.CoreCharge || "");
                            data.set("Description", result.Description || "");
                            data.set("KeyWord", result.KeyWord || "");
                            data.set("UnitCost", result.UnitCost || 0.0);
                        }
                    },
                    error: function (xhr) {
                        console.error("Error loading part details:", xhr.responseText);
                    }
                });
            }
        }
    </script>
    
    <script>
        function onScPartNumSelect(e) {

            onScPartChange(e);

            console.warn('inside onScPartNumSelect');
            const selectedValue = e.sender.value();

            const $input = $(e.sender.input);
            const $row = $input.closest("tr");
            const grid = $row.closest("[data-role='grid']").data("kendoGrid");
           // var grid = $("#ScPartsMaterialDetailsRebuiltPartsGrid").data("kendoGrid");

            if (!grid) {
                console.error(" Could not resolve grid.");
                return;
            }

            const model = grid.dataItem($row);
            if (!model || !selectedValue) {
                console.warn(" No selected value or model.");
                return;
            }

            // Clear existing values if needed
            model.set("MmsStockCode", "");
            model.set("Description", "");
            model.set("KeyWord", "");
            model.set("CoreCharge", "");
            model.set("UnitCost", "");

            // ✅ Pass selected value to AJAX call
            $.ajax({
                url: "/AutoComplete/GetScPartDetails",
                type: "GET",
                data: { mmsStockCode: selectedValue },
                success: function (result) {
                    if (result) {
                        model.set("MmsStockCode", result.MmsStockCode || "");
                        model.set("DetailedDesc", result.DetailedDesc || "");
                        model.set("PartType", result.PartType || "");
                        model.set("OrigSupplierNum", result.OrigSupplierNum || "");
                        model.set("OrigSupplierName", result.OrigSupplierName || "");
                        model.set("CoreCost", result.PartCost || "");
                        model.set("UnitCost", result.UnitCost || "");
                    }


                    console.warn("✅ AJAX result:", result);
                },
                error: function (xhr) {
                    console.error("❌ Failed to fetch part details:", xhr.responseText);
                }
            });
        }

    </script>
    <script>
        //ssk 6 - disable save
        function onRbDataSourceChange(e) {
            var grid = $("#RbPartsMaterialDetailsRebuiltPartsGrid").data("kendoGrid");
            var saveButton = grid.wrapper.find(".k-grid-save-changes");

            if (grid.dataSource.hasChanges()) {
                saveButton.prop("disabled", false).removeClass("k-button-disabled"); // Enable Save
            } else {
                saveButton.prop("disabled", true).addClass("k-button-disabled"); // Disable Save + Add CSS class
            }
        }

        function onRbRequestEnd(e) {
            var notification = $("#notification").data("kendoNotification");
            var grid = $("#RbPartsMaterialDetailsRebuiltPartsGrid").data("kendoGrid");

            if (e.type === "create" && !e.response.Errors) {
                // Only refresh if create was successful (no errors)
                grid.dataSource.read();
                notification.success("Changes saved successfully");
            }

            if (e.type === "update" && !e.response.Errors) {
                // Optional: if you also want to clear after update
                grid.dataSource.read();
                notification.success("Changes updated successfully");
            }

            if (e.type === "destroy" && !e.response.Errors) {
                // Optional: reset after delete too
                grid.dataSource.read();
                notification.success("Changes deleted successfully");
            }
        }
    </script>
    
    <script>
        // function onEditRbParts(e) {
        //     //ssk7 Disable columns on edit
        //     var grid = $("#RbPartsMaterialDetailsRebuiltPartsGrid").data("kendoGrid");

        //     if (!e.model.isNew()) {
        //         //readonly RebuiltStockNum
        //         setTimeout(function () {
        //             // ----- RebuiltStockNum -----
        //             var rebuiltField = e.container.find("[name='RebuiltStockNum']");
        //             var rebuiltCombo = rebuiltField.data("kendoComboBox");

        //             if (rebuiltCombo) {
        //                 rebuiltCombo.enable(false);
        //                 rebuiltCombo.wrapper.addClass("field-disabled");

        //                 // ALSO disable the input itself
        //                 rebuiltCombo.input.prop("readonly", true); //IMPORTANT!
        //             }

        //             // ----- MmsStockCode -----
        //             var mmsField = e.container.find("[name='MmsStockCode']");
        //             var mmsCombo = mmsField.data("kendoComboBox");

        //             if (mmsCombo) {
        //                 mmsCombo.enable(false);
        //                 mmsCombo.wrapper.addClass("field-disabled");
        //                 mmsCombo.input.prop("readonly", true); //Optional for extra safety
        //             }

        //         }, 20); //ssk7 Disable columns on edit

        //         //readonly RebuiltStockNum
        //         setTimeout(function () {
        //             // ----- RebuiltStockNum -----
        //             var rebuiltField = e.container.find("[name='KeyWord']");
        //             var rebuiltCombo = rebuiltField.data("kendoComboBox");

        //             if (rebuiltCombo) {
        //                 rebuiltCombo.enable(false);
        //                 rebuiltCombo.wrapper.addClass("field-disabled");

        //                 // ALSO disable the input itself
        //                 rebuiltCombo.input.prop("readonly", true); //IMPORTANT!
        //             }

        //             // ----- Description -----
        //             var mmsField = e.container.find("[name='Description']");
        //             var mmsCombo = mmsField.data("kendoComboBox");

        //             if (mmsCombo) {
        //                 mmsCombo.enable(false);
        //                 mmsCombo.wrapper.addClass("field-disabled");
        //                 mmsCombo.input.prop("readonly", true); //Optional for extra safety
        //             }

        //         }, 20); //ssk7 Disable columns on edit
        //     }
        // }

    </script>
    <script>
        function onEditParts(e) {
            var model = e.model;

            //if (model.isNew()) return;

            setTimeout(function () {
                // Find the row being edited
                var editRow = e.container.closest("tr");

                // For each cell tagged to be locked
                editRow.find("td.auto-lock-column").each(function () {
                    var $td = $(this);

                    // Find the hidden input that Kendo wires up the ComboBox on
                    var $input = $td.find("input[data-role='combobox']");
                    console.warn('$input :', $input);
                    if ($input.length) {
                        var combo = $input.data("kendoComboBox");
                        console.warn('combo :', combo);
                        if (combo) {
                            combo.enable(false);
                            combo.wrapper.addClass("field-disabled");
                            combo.input.prop("readonly", true);
                        }
                    }
                });
            }, 30);
        }
    </script>
    <script>
        function onNsPartChange(e) {
            // ssk9 duplicate rebuilt part
            var selectedValue = e.sender.value() ? e.sender.value().trim() : "";

            console.log("Entered value:", selectedValue);

            if (selectedValue) {
                console.warn("parentGridId : ", parentGridId);
                console.warn("@(ViewBag.PartNum) : ", @(ViewBag.PartNum));
                var grid = $("#NscPartsMaterialDetailsRebuiltPartsGrid").data("kendoGrid");
                const $cell = $(this);
                console.warn('$cell :', $cell);
                //const grid = $("#RbPartsMaterialDetailsRebuiltPartsGrid").data("kendoGrid");
               // const grid = $cell.closest(".k-grid").data("kendoGrid"); //dynamically get  gridname

                // Get current row and model
                var cell = $(e.sender.wrapper).closest("td");
                var row = cell.closest("tr");
                var editingModel = grid.dataItem(row);

                console.log("Editing model ID:", editingModel && editingModel.Id, "UID:", editingModel && editingModel.uid);

                var isDuplicate = false;

                grid.dataSource.data().forEach(function (item, index) {
                    console.log("Checking row", index, "value:", item.RebuiltStockNum, "UID:", item.uid);

                    if (item && item.OrigSuppNum && item !== editingModel) {
                        var existingValue = item.OrigSuppNum.trim().toLowerCase();
                        var newValue = selectedValue.toLowerCase();

                        console.log("Comparing existing:", existingValue, "with new:", newValue);

                        if (existingValue === newValue) {
                            console.log("DUPLICATE FOUND at row", index);
                            isDuplicate = true;
                        }
                    }
                });

                if (isDuplicate) {
                    kendo.confirm("Non-Stock Coded Part already exists!").then(function () {
                        setTimeout(function () {
                            grid.closeCell(cell);
                            grid.cancelChanges();
                        }, 100);
                    }, function () {
                        setTimeout(function () {
                            grid.closeCell(cell);
                            grid.cancelChanges();
                        }, 100);
                    });
                }
            }
        }
    </script>
    <script>
        function onScPartChange(e) {
            // ssk9 duplicate rebuilt part
            var selectedValue = e.sender.value() ? e.sender.value().trim() : "";

            console.log("Entered value:", selectedValue);

            if (selectedValue) {
                console.warn("parentGridId : ", parentGridId);
                console.warn("@(ViewBag.PartNum) : ", @(ViewBag.PartNum));
                var grid = $("#ScPartsMaterialDetailsRebuiltPartsGrid").data("kendoGrid");
                const $cell = $(this);
                console.warn('$cell :', $cell);
                //const grid = $("#RbPartsMaterialDetailsRebuiltPartsGrid").data("kendoGrid");
               // const grid = $cell.closest(".k-grid").data("kendoGrid"); //dynamically get  gridname

                // Get current row and model
                var cell = $(e.sender.wrapper).closest("td");
                var row = cell.closest("tr");
                var editingModel = grid.dataItem(row);

                console.log("Editing model ID:", editingModel && editingModel.Id, "UID:", editingModel && editingModel.uid);

                var isDuplicate = false;

                grid.dataSource.data().forEach(function (item, index) {
                    console.log("Checking row", index, "value:", item.RebuiltStockNum, "UID:", item.uid);

                    if (item && item.MMSStockCode && item !== editingModel) {
                        var existingValue = item.MMSStockCode.trim().toLowerCase();
                        var newValue = selectedValue.toLowerCase();

                        console.log("Comparing existing:", existingValue, "with new:", newValue);

                        if (existingValue === newValue) {
                            console.log("DUPLICATE FOUND at row", index);
                            isDuplicate = true;
                        }
                    }
                });

                if (isDuplicate) {
                    kendo.confirm("Stock Coded Part already exists!").then(function () {
                        setTimeout(function () {
                            grid.closeCell(cell);
                            grid.cancelChanges();
                        }, 100);
                    }, function () {
                        setTimeout(function () {
                            grid.closeCell(cell);
                            grid.cancelChanges();
                        }, 100);
                    });
                }
            }
        }
    </script>
    <script>
        function onRebuiltStockNumChange(e) {
            // ssk9 duplicate rebuilt part
            var selectedValue = e.sender.value() ? e.sender.value().trim() : "";

            console.log("Entered value:", selectedValue);

            if (selectedValue) {
                var grid = $("#RbPartsMaterialDetailsRebuiltPartsGrid").data("kendoGrid");

                // Get current row and model
                var cell = $(e.sender.wrapper).closest("td");
                var row = cell.closest("tr");
                var editingModel = grid.dataItem(row);
                

                console.log("Editing model ID:", editingModel && editingModel.Id, "UID:", editingModel && editingModel.uid);

                var isDuplicate = false;

                grid.dataSource.data().forEach(function (item, index) {
                    console.log("Checking row", index, "value:", item.RebuiltStockNum, "UID:", item.uid);

                    if (item && item.RebuiltStockNum && item !== editingModel) {
                        var existingValue = item.RebuiltStockNum.trim().toLowerCase();
                        var newValue = selectedValue.toLowerCase();

                        console.log("Comparing existing:", existingValue, "with new:", newValue);

                        if (existingValue === newValue) {
                            console.log("DUPLICATE FOUND at row", index);
                            isDuplicate = true;
                        }
                    }
                });

                if (isDuplicate) {
                    kendo.confirm("Rebuilt Part already exists!").then(function () {
                        setTimeout(function () {
                            grid.closeCell(cell);
                            grid.cancelChanges();
                        }, 100);
                    }, function () {
                        setTimeout(function () {
                            grid.closeCell(cell);
                            grid.cancelChanges();
                        }, 100);
                    });
                    setTimeout(function () {
                        grid.dataSource.read(); //force refresh
                     }, 300);
                }
            }
        }
    </script>
    <script>
        //ssk12 Save/Add button
        function updateToolbarButtons(gridName) {
            var grid = $("#" + gridName).data("kendoGrid");
            var hasChanges = grid.dataSource.hasChanges();

            $("#" + gridName).find(".k-grid-save-changes")
                .prop("disabled", !hasChanges)
                .toggleClass("k-state-disabled", !hasChanges);

            $("#" + gridName).find(".k-grid-cancel-changes")
                .prop("disabled", !hasChanges)
                .toggleClass("k-state-disabled", !hasChanges);

            $("#" + gridName).find(".k-grid-add")
                .prop("disabled", hasChanges)
                .toggleClass("k-state-disabled", hasChanges)
                .off("click").on("click", function (e) {
                    if (hasChanges) {
                        e.preventDefault();
                        e.stopImmediatePropagation();
                    }
                });
        }
    </script>
    <script>
        function onNscGridDataBound(e) {
            const grid = e.sender;
            const ds = grid.dataSource;
            unsavedChangesExist = false;

            // Clear previous styling
            $(".unsaved-row, .unsaved-cell, .unsaved-badge").remove();

            // Apply new styling
            ds.view().forEach(item => {
                const row = grid.tbody.find(`tr[data-uid='${item.uid}']`);

                if (item.dirty || item.isNew()) {
                    // Add row class
                    row.addClass("unsaved-row");

                    // Add badge to first cell
                    const firstCell = row.find("td:first");
                    if (!firstCell.find(".unsaved-badge").length) {
                        firstCell.append(`<span class="unsaved-badge">UNSAVED</span>`);
                    }

                    // Highlight modified cells
                    Object.keys(item.modified || {}).forEach(field => {
                        row.find(`td[data-field='${field}']`)
                            .addClass("unsaved-cell");
                    });

                    unsavedChangesExist = true;
                }
            });

            // Update tab indicator
            const tabStrip = $("#vehicleTabStrip").data("kendoTabStrip");
            if (tabStrip?.items().length) {
                $(tabStrip.items()[0].element)
                    .find(".k-link")
                    .toggleClass("has-unsaved", unsavedChangesExist);
            }

            //ssk12 start - Disable Save/Add
           var gridName = grid.element.attr('id'); //  like "LabourDetailsGrid_123"
            var originalAddCommand = null;


            // Initialize only once
            if (!originalAddCommand) {
                originalAddCommand = grid.addRow;
            }

            // Modify add command behavior
            grid.addRow = function () {
                if (!grid.dataSource.hasChanges()) {
                    originalAddCommand.call(grid);
                }
            };

            grid.dataSource.bind("change", function () {
                updateToolbarButtons(gridName);
            });

            updateToolbarButtons(gridName);

            //ssk12 end - Disable Save/Add

        }

    </script>
    <script>
        function onScGridDataBound(e) {
            const grid = e.sender;
            const ds = grid.dataSource;
            unsavedChangesExist = false;

            // Clear previous styling
            $(".unsaved-row, .unsaved-cell, .unsaved-badge").remove();

            // Apply new styling
            ds.view().forEach(item => {
                const row = grid.tbody.find(`tr[data-uid='${item.uid}']`);

                if (item.dirty || item.isNew()) {
                    // Add row class
                    row.addClass("unsaved-row");

                    // Add badge to first cell
                    const firstCell = row.find("td:first");
                    if (!firstCell.find(".unsaved-badge").length) {
                        firstCell.append(`<span class="unsaved-badge">UNSAVED</span>`);
                    }

                    // Highlight modified cells
                    Object.keys(item.modified || {}).forEach(field => {
                        row.find(`td[data-field='${field}']`)
                            .addClass("unsaved-cell");
                    });

                    unsavedChangesExist = true;
                }
            });

            // Update tab indicator
            const tabStrip = $("#vehicleTabStrip").data("kendoTabStrip");
            if (tabStrip?.items().length) {
                $(tabStrip.items()[0].element)
                    .find(".k-link")
                    .toggleClass("has-unsaved", unsavedChangesExist);
            }

            //ssk12 start - Disable Save/Add
            var gridName = grid.element.attr('id'); //  like "LabourDetailsGrid_123"
            var originalAddCommand = null;


            // Initialize only once
            if (!originalAddCommand) {
                originalAddCommand = grid.addRow;
            }

            // Modify add command behavior
            grid.addRow = function () {
                if (!grid.dataSource.hasChanges()) {
                    originalAddCommand.call(grid);
                }
            };

            grid.dataSource.bind("change", function () {
                updateToolbarButtons(gridName);
            });

            updateToolbarButtons(gridName);

            //ssk12 end - Disable Save/Add

        }

    </script>
    <script>
        function onGridDataBound(e) {
            var notification = $("#notification").data("kendoNotification");
           // notification.success("onGridDataBound called");
            console.warn('onGridDataBound called');

            const grid = e.sender;
            const ds = grid.dataSource;
            const gridType = grid.wrapper.attr("data-grid-type");
            const dataItems = ds.view();

            console.warn("📋 Grid Type:", gridType);
            console.warn("📋 Data Items:", dataItems);

            // --- Unsaved row styling ---
            unsavedChangesExist = false;
            $(".unsaved-row, .unsaved-cell, .unsaved-badge").remove();

            dataItems.forEach(item => {
                const row = grid.tbody.find(`tr[data-uid='${item.uid}']`);
               // console.warn("🧱 Processing row for:", item, row);

                if (item.dirty || item.isNew()) {
                    row.addClass("unsaved-row");

                    const firstCell = row.find("td:first");
                    if (!firstCell.find(".unsaved-badge").length) {
                        firstCell.append(`<span class="unsaved-badge">UNSAVED</span>`);
                    }

                    Object.keys(item.modified || {}).forEach(field => {
                        row.find(`td[data-field='${field}']`).addClass("unsaved-cell");
                    });

                    unsavedChangesExist = true;
                }
            });

            const tabStrip = $("#vehicleTabStrip").data("kendoTabStrip");
            if (tabStrip?.items().length) {
                $(tabStrip.items()[0].element)
                    .find(".k-link")
                    .toggleClass("has-unsaved", unsavedChangesExist);
            }

            const gridName = grid.element.attr('id');
            let originalAddCommand = grid.addRow;

            grid.addRow = function () {
                if (!grid.dataSource.hasChanges()) {
                    originalAddCommand.call(grid);
                }
            };

            grid.dataSource.bind("change", function () {
                updateToolbarButtons(gridName);
            });

            updateToolbarButtons(gridName);

            // 🚨 New: Bind click handler to detect when user clicks into editable ComboBox field
            grid.tbody.off("click.combo-lock").on("click.combo-lock", "td", function () {
                setTimeout(() => {
                    const $cell = $(this);
                    const $input = $cell.find("input[data-role='combobox'][data-lock-map].auto-lock-column");
                    if (!$input.length) return;

                    const gridType = grid.wrapper.attr("data-grid-type");
                    const combo = $input.data("kendoComboBox");
                    const fieldName = $input.attr("name");
                    const lockMap = $input.attr("data-lock-map");
                    const row = $input.closest("tr");
                    const model = grid.dataItem(row);

                    console.warn(`🧩 Clicked ComboBox Cell → Field: ${fieldName}`);
                    console.warn(`🔍 LockMap: ${lockMap}`);
                    console.warn(`🔍 GridType: ${gridType}`);
                    console.warn(`🔍 Model:`, model);

                    if (!combo || !lockMap || !gridType || !model) return;

                    const rules = lockMap.split(";").reduce((acc, pair) => {
                        const [key, val] = pair.split(":");
                        if (key && val) acc[key.trim()] = val.trim();
                        return acc;
                    }, {});

                    const lockRule = rules[gridType] || "none";
                    let shouldLock = false;

                    if (lockRule === "always") shouldLock = true;
                    else if (lockRule === "notNew" && !model.isNew?.()) shouldLock = true;
                    else if (lockRule === "newOnly" && model.isNew?.()) shouldLock = true;

                    console.warn(`🔐 Field '${fieldName}' in '${gridType}': ${lockRule} → ${shouldLock ? "LOCKED" : "EDITABLE"}`);

                    if (shouldLock) {
                        combo.enable(false);
                        combo.wrapper.addClass("field-disabled");
                        combo.input.prop("readonly", true);
                    }
                }, 50); // short delay ensures combo is rendered
            });
        }
    </script>
    <script>
        //ssk12 Save/Add button
        function updateToolbarButtons(gridName) {
            var grid = $("#" + gridName).data("kendoGrid");
            var hasChanges = grid.dataSource.hasChanges();

            $("#" + gridName).find(".k-grid-save-changes")
                .prop("disabled", !hasChanges)
                .toggleClass("k-state-disabled", !hasChanges);

            $("#" + gridName).find(".k-grid-cancel-changes")
                .prop("disabled", !hasChanges)
                .toggleClass("k-state-disabled", !hasChanges);

            $("#" + gridName).find(".k-grid-add")
                .prop("disabled", hasChanges)
                .toggleClass("k-state-disabled", hasChanges)
                .off("click").on("click", function (e) {
                    if (hasChanges) {
                        e.preventDefault();
                        e.stopImmediatePropagation();
                    }
                });
        }
    </script>
    <script>
        //san17 - onCopyEstimateClick
        function onCopyEstimateClick(e) {
            e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            $("#vehicleListId ").val(dataItem.VehicleListId);
            $("#oldprojDesc  ").val(dataItem.ProjDesc);
            $("#oldVehSeriesCode").val(dataItem.VehSeriesCode);
            $("#newVehSeriesCode").val("");
            $("#newprojDesc").val("");
            $("#copyEstimateDialog").data("kendoWindow").center().open();
        }
    </script>
    <script>
        var dropDownSearchParams = {
            columnName: "",
            searchText: ""
        };
        function onDropDownFiltering(e) {
            var ddl = e.sender;
            console.warn('***** onDropDownFiltering ddl : ', ddl);
            var element = ddl.element; // the original    <input> field (hidden)
            console.warn('***** onDropDownFiltering element : ', element);
            dropDownSearchParams.columnName = element.data("column") || element.attr("name")?.split('.').pop();
            dropDownSearchParams.searchText = e.filter.value || "";
        }
        function getDropDownParams() {
            console.warn('***** getDropDownParams length : ', dropDownSearchParams.columnName);
            console.warn('***** dropDownSearchParams.searchText : ', dropDownSearchParams.searchText);
            return {
                columnName: dropDownSearchParams.columnName,
                searchText: dropDownSearchParams.searchText
            };
        }
        function onDropDownChange(e) {
            var grid = $("#NscPartsMaterialDetailsRebuiltPartsGrid").data("kendoGrid");
            grid.closeCell(); // commits the selected value to the model
        }
        @*  <script> //san18 dropdown
        function getDropDownParams() {
        var container = $(".k-grid .k-edit-cell"); // get active cell
        console.warn('***** container : ', container);
        console.warn('***** container.length : ', container.length);

        if (!container.length) return { columnName: "", searchText: "" };

        // Get the hidden input that defines the DropDownList
        var input = container.find("input[data-role='dropdownlist']");
        console.warn('***** input : ', input);
        console.warn('***** input.length : ', input.length);

        if (!input.length) return { columnName: "", searchText: "" };

        var ddl = input.data("kendoDropDownList");
        console.warn('***** ddl : ', ddl);
        if (!ddl) return { columnName: "", searchText: "" };

        var columnName = input.data("column") || input.attr("name")?.split('.').pop();
        console.warn('***** columnName : ', columnName);
        console.warn('***** ddl.input : ', ddl.input);
        // var searchText = ddl.input.val() || "";

        return {
        columnName: columnName,
        searchText: searchText
        };
        }*@
    </script>
    <script>
        function makeComboBoxReadOnly(e) {
            console.warn('makeComboBoxReadOnly');
            e.sender.input.attr("readonly", true);
        }
    </script>
    <script>
        function onComboBoxDataBound(e) {
            // Check if no data is available after filtering
            var notification = $("#notification").data("kendoNotification");

            if (e.sender.dataSource.total() === 0) {
                e.sender.value(null); // Clear the input
                e.sender.input.val(""); // Clear the text
                setTimeout(function () {
                    notification.show("Invalid Selection! Please choose from the list.", "error");
                    //alert("Invalid Selection! Please choose from the list.");
                }, 100);
            }
        }
        function onComboBoxChange(e) {
            var combo = e.sender;
            if (combo.selectedIndex === -1) {
                combo.value(null);
                combo.input.val("");
                combo.trigger("change");
                // Optional: Show error message
                $("#validationMessage").text("Invalid selection!").css("color", "red");
            } else {
                $("#validationMessage").text("");
            }
        }
        function onNscPartNumSelect(e) {
             // ssk9 duplicate rebuilt part
            var selectedValue = e.sender.value() ? e.sender.value().trim() : "";

            console.log("Entered value:", selectedValue);

            if (selectedValue) {
                console.warn("parentGridId : ", parentGridId);
                console.warn("@(ViewBag.PartNum) : ", @(ViewBag.PartNum));
                var grid = $("#NscPartsMaterialDetailsRebuiltPartsGrid").data("kendoGrid");
                const $cell = $(this);
                console.warn('$cell :', $cell);
                //const grid = $("#RbPartsMaterialDetailsRebuiltPartsGrid").data("kendoGrid");
               // const grid = $cell.closest(".k-grid").data("kendoGrid"); //dynamically get  gridname

                // Get current row and model
                var cell = $(e.sender.wrapper).closest("td");
                var row = cell.closest("tr");
                var editingModel = grid.dataItem(row);

                console.log("Editing model ID:", editingModel && editingModel.Id, "UID:", editingModel && editingModel.uid);

                var isDuplicate = false;

                grid.dataSource.data().forEach(function (item, index) {
                    console.log("Checking row", index, "value:", item.RebuiltStockNum, "UID:", item.uid);

                    if (item && item.OrigSuppNum && item !== editingModel) {
                        var existingValue = item.OrigSuppNum.trim().toLowerCase();
                        var newValue = selectedValue.toLowerCase();

                        console.log("Comparing existing:", existingValue, "with new:", newValue);

                        if (existingValue === newValue) {
                            console.log("DUPLICATE FOUND at row", index);
                            isDuplicate = true;
                        }
                    }
                });

                if (isDuplicate) {
                    kendo.confirm("Supplier Number already exists!").then(function () {
                        setTimeout(function () {
                            grid.closeCell(cell);
                            grid.cancelChanges();
                        }, 100);
                    }, function () {
                        setTimeout(function () {
                            grid.closeCell(cell);
                            grid.cancelChanges();
                        }, 100);
                    });
                }
                else {
                    var notification = $("#notification").data("kendoNotification");
                    notification.info("Select Supplier Name");

                }
            }

        }

        function onVehEdit(e) {
            console.warn('onVehEdit');
            // Maintain new row styling after paging/sorting
            e.sender.items().each(function () {
                const dataItem = e.sender.dataItem(this);
                if (dataItem.isNew()) {
                    $(this).addClass("newly-added-row");
                }
            });
            //ssk12 - Add/Save buttons
            const grid = e.sender;
            const ds = grid.dataSource;
            unsavedChangesExist = false;

            // Clear previous styling
            $(".unsaved-row, .unsaved-cell, .unsaved-badge").remove();

            // Apply new styling
            ds.view().forEach(item => {
                const row = grid.tbody.find(`tr[data-uid='${item.uid}']`);
                console.warn('item.dirty :', item.dirty);
                console.warn('item.isNew() :', item.isNew());
                if (item.dirty || item.isNew()) {
                    // Add row class
                    console.warn('onEdit - item.dirty || item.isNew()');
                    row.addClass("unsaved-row");

                    // Add badge to first cell
                    const firstCell = row.find("td:first");
                    if (!firstCell.find(".unsaved-badge").length) {
                        firstCell.append(`<span class="unsaved-badge">UNSAVED</span>`);
                    }

                    // Highlight modified cells
                    Object.keys(item.modified || {}).forEach(field => {
                        row.find(`td[data-field='${field}']`)
                            .addClass("unsaved-cell");
                    });

                    unsavedChangesExist = true;
                }
            });

            // Update tab indicator
            const tabStrip = $("#vehicleTabStrip").data("kendoTabStrip");
            if (tabStrip?.items().length) {
                $(tabStrip.items()[0].element)
                    .find(".k-link")
                    .toggleClass("has-unsaved", unsavedChangesExist);
            }

            //ssk12 start - Disable Save/Add
            var gridName = grid.element.attr('id'); //  like "LabourDetailsGrid_123"
            var originalAddCommand = null;


            // Initialize only once
            if (!originalAddCommand) {
                originalAddCommand = grid.addRow;
            }

            // Modify add command behavior
            grid.addRow = function () {
                if (!grid.dataSource.hasChanges()) {
                    originalAddCommand.call(grid);
                }
            };

            grid.dataSource.bind("change", function () {
                updateToolbarButtons(gridName);
            });

            updateToolbarButtons(gridName);

            //ssk12 end - Disable Save/Add
        }
    </script>
    <script>
                function validateCellInput(value, rules) {
            for (let rule of rules) {
                switch (rule.trim()) {
                    case 'MustBeNumeric':
                        if (!/^\d+(\.\d+)?$/.test(value)) {
                            return "Value must be numeric.";
                        }
                        break;
                    case 'MustBeAlphaCharacters':
                        if (!/^[A-Za-z]+$/.test(value)) {
                            return "Only alphabetic characters are allowed.";
                        }
                        break;
                    case 'NoSpecialCharacters':
                        if (/[^a-zA-Z0-9\s]/.test(value)) {
                            return "Special characters are not allowed.";
                        }
                        break;
                    case 'MustBePositive':
                        if (parseFloat(value) <= 0) {
                            return "Value must be positive.";
                        }
                        break;
                    case 'MustBeMin':
                        let minVal = parseInt(value, 10);
                        if (isNaN(minVal) || minVal < 0 || minVal > 59) {
                            return "Minutes must be between 0 and 59.";
                        }
                        break;
                    case 'MustBePercentage':
                    let minPer = parseInt(value, 10);
                    if (isNaN(minPer) || minPer < 0 || minPer > 100) {
                        return "Percentage must be between 0 and 100.";
                    }
                    break;
                    case 'MustBeHrs':
                        let hrsVal = parseInt(value, 10);
                        if (isNaN(hrsVal) || hrsVal < 0 || hrsVal > 24) {
                            return "Hours must be between 0 and 24.";
                        }
                        break;
                    default:
                        break;
                }
            }
            return null;
        }
    </script>
    <script>
        //ssk23 - validation
        let isUpdating = false;

        /**
         * Handles cell save event for any Telerik Kendo Grid using InCell editing.
         * Automatically recalculates CoreCharge and TotalCost based on Qty, CoreCost, and Percentage.
         * Also performs validation for specific fields and updates the display in the grid.
         */
        function onGridCellSave(e) {
           // notifyValidationError("onGridCellSave");
            var column = e.column;
            var field = e.container.find("input").attr("name");
            var cell = e.container;
            var value = e.values[field];
            
             /* start validation logic */
            // Skip if this is a command column or field is not present
            if (!field || !cell) return;

            // Find the cell element inside the grid (it's wrapped in a <td>)
            var cellElement = cell.closest("td");
            if (!cellElement || !cellElement.length) return;

            // Get the business rule attribute from the cell
            var brData = cellElement.attr("data-br");
            if (!brData) return; // no validation rules defined for this cell

            var value = e.values[field];
            if (value == null || value === "") return; // optional: allow empty

            var rules = brData.split(',');
            var errorMessage = validateCellInput(value, rules);

            if (errorMessage) {
                notifyValidationError(errorMessage);
                // var notification = $("#gridNotification").data("kendoNotification");
                // if (notification) {
                //     notification.show(errorMessage, "error");
                // } else {
                //     alert(errorMessage); // fallback
                // }

                e.preventDefault(); // stop the save
            }

            //required validation
            console.warn("validation");
             var validator = cell.kendoValidator().data("kendoValidator");

            // remove existing custom validation message div (if any)
            cell.find(".cell-validation-error").remove();

            if (!validator.validate()) {
                e.preventDefault(); // cancel cell save

                // get validation message from the first failed rule
                var errors = validator.errors();
                for (var field in errors) {
                    var message = errors[field];

                    // inject inline error message under the cell
                    cell.append('<div class="cell-validation-error" style="color:red; font-size:12px;">' + message + '</div>');
                    break;
                }
            }
            /* end validation logic */
                        
        }

        function notifyValidationError(message) {
            const notification = $("#notification").data("kendoNotification");
            if (notification) {
                notification.error(message);
            } else {
                alert(message); // fallback
            }
        }

        function clearCell(container) {
            const input = container.find("input");
            input.val("");
            input.focus();
        }
    </script>
    <script>
        function onGridCellClose(e) {
            console.log("onGridCellClose");
            var field = e.container.find("input").attr("name");
            const model = e.model;

            if (!["Qty", "UnitCost", "CoreCost", "Percentage"].includes(field)) {
                return;
            }

            setTimeout(() => {
                const qty = parseFloat(model.Qty) || 0;
                const unitCost = parseFloat(model.UnitCost) || 0;
                const coreCost = parseFloat(model.CoreCost) || 0;
                const percentage = parseFloat(model.Percentage) || 0;

                const coreCharge = qty * coreCost * (percentage / 100);
                const totalUnitCost = qty * unitCost * (percentage / 100);
                const totalCost = totalUnitCost + coreCharge;

                model.set("CoreCharge", coreCharge);
                model.set("TotalCost", totalCost);

                const grid = e.sender;
                const row = grid.items().filter(`[data-uid='${model.uid}']`);
                const totalCostIndex = grid.columns.findIndex(c => c.field === "TotalCost");

                if (totalCostIndex !== -1 && row.length) {
                    const cell = row.children().eq(totalCostIndex);
                    const formatted = kendo.toString(totalCost, "c2");
                    cell.html(kendo.htmlEncode(formatted));
                }

                console.log("TotalCost recalculated and cell updated:", totalCost);
            }, 0);
        }
    </script>
    <script>
        function formatToEST(dateStr) {
            if (!dateStr || dateStr === 0) {
                return "(System Generated)";
            }

            const date = new Date(dateStr);

            if (isNaN(date.getTime())) {
                return "(System Generated)";
            }

            const datePart = date.toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'short',
                day: '2-digit'
            });

            const timePart = date.toLocaleTimeString('en-US', {
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit',
                hour12: true
            });

            return `${datePart} ${timePart}`;
        }
    </script>
    
}

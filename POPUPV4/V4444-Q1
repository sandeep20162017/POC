
DefaultPopUp works fine, Following PopUp template throws Null Ref exception when ScPartsUsed gets loaded
For default and following template following gets called
public IActionResult ScDetailsPartial(string id, string gridType)
{ 
    var model = new List<BCES.Models.Parts.StockCodedPartsViewModel> { };

    return PartialView("_ScPartsUsed", model);

}
For default PopUp template following is cvalled :
[HttpGet]
[AllowAnonymous]
public async Task<ActionResult> GetScPartsUsedInEstimates([DataSourceRequest] DataSourceRequest request, [FromQuery] string id, [FromQuery] string gridType)
{
    var vehNscmodel = await GetScPartsUsedInVehicleEstimates(id, gridType);
return Json(vehNscmodel.ToDataSourceResult(request));
}
GetScPartsUsedInEstimates was not called when follwing template was used forPopUp
@model BCES.Models.Parts.StockCodedPartsViewModel
<div id="notification"></div>
<div class="popup-container">
    <div class="popup-header">
        <div class="popup-title">@(Model.MMSStockCode == null ? "Add New Stock Coded Part" : $"Edit Part - {Model.MMSStockCode}")</div>
        <div class="tab-actions">
            <button id="btnSavePart" class="k-button k-primary" type="button" onclick="saveScPartPopup()">
                <span class="k-icon k-i-save"></span> Save
            </button>
            <button id="btnCancelPart" class="k-button" type="button" onclick="cancelScPartPopup()">
                <span class="k-icon k-i-cancel"></span> Cancel
            </button>
        </div>
    </div>

    <div class="form-container">
        <form id="scPartsForm">
            @Html.HiddenFor(m => m.LinkCode)

            <!-- Row 1 -->
            <div class="form-row">
                <div class="form-group">
                    @Html.LabelFor(m => m.MMSStockCode, "Stock Code", new { @class = "form-label required-label" })
                    @Html.EditorFor(m => m.MMSStockCode, "ScComboBox", new
                        {
                            htmlAttributes = new { required = "required", style = "width:100%; height:28px;" }
                        })
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.PartType, "Part Type", new { @class = "form-label" })
                    @Html.EditorFor(m => m.PartType, "ComboBoxEditor", new
                        {
                            htmlAttributes = new { style = "width:100%; height:28px;" }
                        })
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.CC, "Cost Centre", new { @class = "form-label required-label" })
                    @Html.EditorFor(m => m.CC, "ComboBoxEditor", new
                        {
                            htmlAttributes = new { required = "required", style = "width:100%; height:28px;" }
                        })
                </div>
            </div>

            <!-- Row 2 -->
            <div class="form-row">
                <div class="form-group">
                    @Html.LabelFor(m => m.OrigSupplierNum, "Supplier Num", new { @class = "form-label" })
                    @Html.EditorFor(m => m.OrigSupplierNum, "ComboBoxEditor", new
                        {
                            htmlAttributes = new { style = "width:100%; height:28px;" }
                        })
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.OrigSupplierName, "Supplier Name", new { @class = "form-label" })
                    @Html.EditorFor(m => m.OrigSupplierName, "ComboBoxEditor", new
                        {
                            htmlAttributes = new { style = "width:100%; height:28px;" }
                        })
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.DetailedDesc, "Part Description", new { @class = "form-label" })
                    @Html.EditorFor(m => m.DetailedDesc, "ComboBoxEditor", new
                        {
                            htmlAttributes = new { style = "width:100%; height:28px;" }
                        })
                </div>
            </div>

            <!-- Row 3 -->
            <div class="form-row">
                <div class="form-group">
                    @Html.LabelFor(m => m.UnitCost, "Unit Cost", new { @class = "form-label" })
                    @(Html.Kendo().NumericTextBoxFor(m => m.UnitCost)
                        .Format("c2")
                        .HtmlAttributes(new { style = "width:100%; height:28px;" }))
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.CoreCost, "Core Cost", new { @class = "form-label" })
                    @(Html.Kendo().NumericTextBoxFor(m => m.CoreCost)
                        .Format("c2")
                        .HtmlAttributes(new { style = "width:100%; height:28px;" }))
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.TotalCost, "Total Cost", new { @class = "form-label" })
                    @(Html.Kendo().NumericTextBoxFor(m => m.TotalCost)
                        .Format("c2")
                        .HtmlAttributes(new { style = "width:100%; height:28px;", @readonly = "readonly" }))
                </div>
            </div>

            <!-- Row 4 -->
            <div class="form-row">
                <div class="form-group">
                    @Html.LabelFor(m => m.Qty, "Quantity", new { @class = "form-label required-label" })
                    @(Html.Kendo().NumericTextBoxFor(m => m.Qty)
                        .Format("n0")
                        .HtmlAttributes(new { style = "width:100%; height:28px;", required = "required" }))
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.Percentage, "%", new { @class = "form-label required-label" })
                    @(Html.Kendo().NumericTextBoxFor(m => m.Percentage)
                        .Format("n0")
                        .Min(0).Max(100)
                        .HtmlAttributes(new { style = "width:100%; height:28px;", required = "required" }))
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.LastModifiedBy, "Modified By", new { @class = "form-label" })
                    @(Html.Kendo().TextBoxFor(m => m.LastModifiedBy)
                        .HtmlAttributes(new { @readonly = "readonly", style = "width:100%; height:28px;" }))
                </div>
            </div>

            <!-- Row 5 -->
            <div class="form-row">
                <div class="form-group">
                    @Html.LabelFor(m => m.LastModifiedDate, "Modified Date", new { @class = "form-label" })
                    @(Html.Kendo().TextBoxFor(m => m.LastModifiedDate)
                        .HtmlAttributes(new { @readonly = "readonly", style = "width:100%; height:28px;" }))
                </div>
            </div>
        </form>
    </div>
</div>

<style>
    
    .popup-container { width: 900px; background: white; border-radius: 4px; box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1); overflow: hidden; }
    .popup-header { display: flex; justify-content: space-between; align-items: center; padding: 6px 12px; background: linear-gradient(to right, #2c3e50, #4a6491); color: white; height: 32px; }
    .popup-title { font-size: 14px; font-weight: 600; }
    .tab-actions { display: flex; gap: 6px; }
    .form-container { padding: 8px 15px; }
    .form-row { display: flex; gap: 8px; margin-bottom: 6px; }
    .form-group { display: flex; flex-direction: column; flex: 1; }
    .form-label { font-weight: 600; font-size: 11px; margin-bottom: 3px; }
    .required-label::after { content: " *"; color: red; }
    .k-textbox, .k-combobox, .k-numerictextbox { width: 100%; }
</style>

<script>
    function saveScPartPopup() {
        // Call your existing save logic
        onGridCellSave({});
        $("#ScPartsPopupWindow").data("kendoWindow").close();
    }

    function cancelScPartPopup() {
        $("#ScPartsPopupWindow").data("kendoWindow").close();
    }
    function onScPartsEdit(e) {
    var wnd = e.container.data("kendoWindow");
    wnd.setOptions({
        width: "950px",
        title: e.model.isNew() ? "Add New Stock Coded Part" : "Edit Stock Coded Part",
        modal: true,
        resizable: false,
        appendTo: "#vehiclePopupContainer"
        });

    // Apply your custom class for styling
    e.container.closest(".k-window").addClass("scparts-popup-style");
}
</script>

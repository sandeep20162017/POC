Complete Vehicle Estimate Popup Implementation
I'll provide a complete implementation with the CSS file and updated JavaScript for your vehicle estimate popup. This will ensure a professional look with proper dimensions and integrate with your existing global functions.

1. CSS File (vehicle-estimate.css)
Create this file in your wwwroot/css folder:

css
/* vehicle-estimate.css - Professional styling for vehicle estimate management */

/* ===== BASE STYLES ===== */
.vehicle-estimate-container {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    color: #2c3e50;
    line-height: 1.5;
    padding: 20px;
}

.vehicle-estimate-header {
    font-size: 24px;
    font-weight: 600;
    margin-bottom: 20px;
    color: #2c3e50;
    padding-bottom: 10px;
    border-bottom: 2px solid #3498db;
}

/* ===== POPUP OVERLAY ===== */
.vehicle-popup-overlay {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.7);
    z-index: 10000;
    align-items: center;
    justify-content: center;
}

/* ===== POPUP CONTAINER ===== */
.vehicle-popup-container {
    width: 900px;
    max-height: 90vh;
    overflow-y: auto;
    background-color: #f8f9fa;
    border-radius: 8px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.25);
}

/* ===== POPUP HEADER ===== */
.vehicle-popup-header {
    background: linear-gradient(to right, #2c3e50, #4a6580);
    padding: 15px 20px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    color: white;
    border-top-left-radius: 8px;
    border-top-right-radius: 8px;
}

.vehicle-popup-title {
    font-size: 18px;
    font-weight: 600;
}

.vehicle-tab-actions {
    display: flex;
    gap: 10px;
}

/* ===== FORM CONTAINER ===== */
.vehicle-form-container {
    padding: 25px;
    background-color: #ffffff;
}

/* ===== SECTION TITLES ===== */
.vehicle-section-title {
    color: #2c3e50;
    font-size: 16px;
    font-weight: 600;
    margin: 25px 0 15px;
    padding-bottom: 8px;
    border-bottom: 1px solid #eaeaea;
}

.vehicle-section-title:first-child {
    margin-top: 0;
}

/* ===== FORM ROWS AND GROUPS ===== */
.vehicle-form-row {
    display: flex;
    flex-wrap: wrap;
    gap: 20px;
    margin-bottom: 20px;
}

.vehicle-form-group {
    flex: 1;
    min-width: 200px;
}

.vehicle-double-width {
    flex: 2;
}

/* ===== LABELS ===== */
.vehicle-form-label {
    display: block;
    color: #2c3e50;
    margin-bottom: 6px;
    font-size: 14px;
    font-weight: 500;
}

.vehicle-required-label::after {
    content: " *";
    color: #e74c3c;
}

/* ===== FORM CONTROLS ===== */
.vehicle-form-control {
    width: 100%;
    height: 38px;
    padding: 8px 12px;
    background-color: #ffffff;
    border: 1px solid #dce4ec;
    border-radius: 4px;
    color: #2c3e50;
    font-size: 14px;
    outline: none;
    transition: border-color 0.2s;
}

.vehicle-form-control:focus {
    border-color: #3498db;
    box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
}

.vehicle-form-control[readonly] {
    background-color: #f8f9fa;
    color: #7f8c8d;
}

/* Select dropdown styling */
.vehicle-form-control.select {
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' fill='%23555' viewBox='0 0 16 16'%3E%3Cpath d='M8 11L3 6h10z'/%3E%3C/svg%3E");
    background-repeat: no-repeat;
    background-position: right 10px center;
    background-size: 12px;
    padding-right: 35px;
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
}

/* ===== BUTTONS ===== */
.vehicle-popup-btn {
    padding: 8px 16px;
    height: 36px;
    border-radius: 4px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s;
    border: none;
    display: inline-flex;
    align-items: center;
    font-size: 14px;
}

.vehicle-popup-btn-primary {
    background-color: #3498db;
    color: white;
}

.vehicle-popup-btn-primary:hover {
    background-color: #2980b9;
}

.vehicle-popup-btn-secondary {
    background-color: #ecf0f1;
    color: #7f8c8d;
}

.vehicle-popup-btn-secondary:hover {
    background-color: #dfe6e9;
    color: #2c3e50;
}

/* ===== ICONS ===== */
.vehicle-btn-icon {
    margin-right: 5px;
}

/* ===== KENDO UI OVERRIDES ===== */
.vehicle-estimate-container .k-window {
    border-radius: 8px;
    overflow: hidden;
    width: 900px !important;
    max-width: 90vw;
}

.vehicle-estimate-container .k-window-titlebar {
    background: linear-gradient(to right, #2c3e50, #4a6580);
    color: white;
    padding: 15px 20px;
    border: none;
    height: auto;
}

.vehicle-estimate-container .k-window-title {
    font-size: 18px;
    font-weight: 600;
}

.vehicle-estimate-container .k-tabstrip-items .k-item {
    background-color: #f8f9fa;
    border-color: #dce4ec;
    color: #2c3e50;
    padding: 10px 15px;
}

.vehicle-estimate-container .k-tabstrip-items .k-state-active {
    background-color: white;
    color: #2c3e50;
    border-bottom-color: white;
}

.vehicle-estimate-container .k-tabstrip-content {
    padding: 20px;
    background-color: white;
    border: 1px solid #dce4ec;
    border-top: none;
}

.vehicle-estimate-container .k-grid {
    border-radius: 4px;
    overflow: hidden;
}

.vehicle-estimate-container .k-grid-header {
    background-color: #f8f9fa;
}

.vehicle-estimate-container .k-grid td {
    padding: 10px 12px;
}

.vehicle-estimate-container .k-button {
    padding: 8px 16px;
    height: 36px;
    border-radius: 4px;
    font-weight: 600;
    transition: all 0.2s;
    border: none;
    display: inline-flex;
    align-items: center;
    font-size: 14px;
}

.vehicle-estimate-container .k-button.k-primary {
    background-color: #3498db;
    color: white;
}

.vehicle-estimate-container .k-button.k-primary:hover {
    background-color: #2980b9;
}

.vehicle-estimate-container .k-textbox,
.vehicle-estimate-container .k-numerictextbox .k-numeric-wrap,
.vehicle-estimate-container .k-combobox .k-dropdown-wrap {
    height: 38px;
    border-radius: 4px;
    border: 1px solid #dce4ec;
    background-color: #ffffff;
}

.vehicle-estimate-container .k-textbox:focus,
.vehicle-estimate-container .k-numerictextbox .k-numeric-wrap.k-state-focused,
.vehicle-estimate-container .k-combobox .k-dropdown-wrap.k-state-focused {
    border-color: #3498db;
    box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
}

/* ===== RESPONSIVE ADJUSTMENTS ===== */
@media (max-width: 968px) {
    .vehicle-popup-container {
        width: 95%;
    }
    
    .vehicle-estimate-container .k-window {
        width: 95% !important;
    }
}

@media (max-width: 768px) {
    .vehicle-form-row {
        flex-direction: column;
        gap: 15px;
    }
    
    .vehicle-form-group {
        min-width: 100%;
    }
    
    .vehicle-popup-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 15px;
    }
    
    .vehicle-tab-actions {
        width: 100%;
        justify-content: flex-end;
    }
    
    .vehicle-estimate-container .k-tabstrip-items .k-item {
        padding: 8px 12px;
        font-size: 14px;
    }
}

/* ===== NOTIFICATION STYLES ===== */
.vehicle-notification {
    padding: 12px 16px;
    margin-bottom: 20px;
    border-radius: 4px;
    background-color: #f8f9fa;
    border-left: 4px solid #3498db;
    font-size: 14px;
}

.vehicle-notification.error {
    border-left-color: #e74c3c;
    background-color: #fdeded;
}

.vehicle-notification.success {
    border-left-color: #2ecc71;
    background-color: #f0fdf4;
}

.vehicle-notification.warning {
    border-left-color: #f39c12;
    background-color: #fef9e7;
}

/* ===== DIALOG STYLES ===== */
.vehicle-dialog {
    padding: 20px;
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.25);
}

.vehicle-dialog-title {
    font-size: 18px;
    font-weight: 600;
    margin-bottom: 15px;
    color: #2c3e50;
}

.vehicle-dialog-message {
    margin-bottom: 20px;
    color: #2c3e50;
}

.vehicle-dialog-buttons {
    display: flex;
    justify-content: flex-end;
    gap: 10px;
}

/* ===== GRID STYLES ===== */
.vehicle-grid-container {
    background: white;
    border-radius: 6px;
    overflow: hidden;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    margin-bottom: 20px;
}

.vehicle-grid-header {
    padding: 15px 20px;
    background: linear-gradient(to right, #2c3e50, #4a6580);
    color: white;
    font-size: 16px;
    font-weight: 600;
}

.vehicle-grid-content {
    padding: 20px;
}

.vehicle-grid-actions {
    display: flex;
    justify-content: flex-end;
    margin-top: 15px;
    gap: 10px;
}
2. JavaScript Implementation
Add this JavaScript to your Index.cshtml file, either in a script section or in a separate JS file:

javascript
// ===== VEHICLE POPUP MANAGEMENT =====

// Global variables
window.vehiclePopupState = {
    isOpen: false,
    hasChanges: false,
    currentVehicleId: 0,
    originalData: {}
};

// Initialize vehicle popup
window.initVehiclePopup = function() {
    // Add event listener for closing the popup when clicking outside
    document.addEventListener('click', function(e) {
        const popupOverlay = document.getElementById('vehiclePopupOverlay');
        if (popupOverlay && e.target === popupOverlay) {
            window.hideVehiclePopup();
        }
    });
    
    // Add event listeners to form elements to track changes
    document.addEventListener('DOMContentLoaded', function() {
        const form = document.getElementById('vehicleForm');
        if (form) {
            const inputs = form.querySelectorAll('input, select, textarea');
            inputs.forEach(input => {
                input.addEventListener('change', function() {
                    window.vehiclePopupState.hasChanges = true;
                });
            });
        }
    });
};

// Show vehicle popup
window.showVehiclePopup = function(vehicleId) {
    window.vehiclePopupState.isOpen = true;
    window.vehiclePopupState.currentVehicleId = vehicleId;
    window.vehiclePopupState.hasChanges = false;
    
    const popupOverlay = document.getElementById('vehiclePopupOverlay');
    if (popupOverlay) {
        popupOverlay.style.display = 'flex';
    }
    
    // Load vehicle data
    window.loadVehicleData(vehicleId);
};

// Hide vehicle popup
window.hideVehiclePopup = function() {
    if (window.vehiclePopupState.hasChanges) {
        if (confirm('You have unsaved changes. Are you sure you want to close?')) {
            window.closeVehiclePopup();
        }
    } else {
        window.closeVehiclePopup();
    }
};

// Close vehicle popup (without confirmation)
window.closeVehiclePopup = function() {
    window.vehiclePopupState.isOpen = false;
    window.vehiclePopupState.hasChanges = false;
    
    const popupOverlay = document.getElementById('vehiclePopupOverlay');
    if (popupOverlay) {
        popupOverlay.style.display = 'none';
    }
};

// Load vehicle data
window.loadVehicleData = function(vehicleId) {
    // Show loading state
    const formContainer = document.getElementById('vehicleFormContainer');
    if (formContainer) {
        formContainer.innerHTML = '<div class="vehicle-loading">Loading vehicle data...</div>';
    }
    
    // Fetch vehicle data
    $.get('@Url.Action("GetVehicleById", "Vehicles")', { id: vehicleId })
        .done(function(data) {
            if (formContainer) {
                formContainer.innerHTML = data;
            }
            window.initVehiclePopupForm();
            window.wireVehicleForm();
            window.vehiclePopupState.originalData = window.getFormData();
        })
        .fail(function() {
            if (formContainer) {
                formContainer.innerHTML = '<div class="vehicle-notification error">Failed to load vehicle data. Please try again.</div>';
            }
        });
};

// Get form data
window.getFormData = function() {
    const form = document.getElementById('vehicleForm');
    if (!form) return {};
    
    const formData = {};
    const inputs = form.querySelectorAll('input, select, textarea');
    
    inputs.forEach(input => {
        formData[input.name] = input.value;
    });
    
    return formData;
};

// Save vehicle data
window.saveVehicleData = function() {
    const form = document.getElementById('vehicleForm');
    if (!form) return;
    
    // Validate form
    if (!window.validateVehicleForm()) {
        return;
    }
    
    // Show saving state
    const saveButton = document.getElementById('btnSave');
    if (saveButton) {
        saveButton.disabled = true;
        saveButton.innerHTML = '<span class="vehicle-btn-icon">⏳</span> Saving...';
    }
    
    // Prepare data
    const formData = new FormData(form);
    const vehicleData = {};
    formData.forEach((value, key) => {
        vehicleData[key] = value;
    });
    
    // Determine URL based on mode (add or edit)
    const url = window.vehiclePopupState.currentVehicleId === 0
        ? '@Url.Action("AddVehiclesView", "Vehicles")'
        : '@Url.Action("UpdateVehiclesView", "Vehicles")';
    
    // Send request
    $.ajax({
        url: url,
        type: 'POST',
        contentType: 'application/json',
        data: JSON.stringify(vehicleData),
        success: function(response) {
            if (response && response.VehicleListId) {
                // Success
                window.showNotification('success', 'Vehicle data saved successfully!');
                window.vehiclePopupState.hasChanges = false;
                window.vehiclePopupState.currentVehicleId = response.VehicleListId;
                
                // Update grid
                $("#VehicleGrid").data("kendoGrid").dataSource.read();
                
                // Close popup or update title
                const popupTitle = document.getElementById('vehiclePopupTitle');
                if (popupTitle) {
                    popupTitle.textContent = 'Vehicle Estimate #' + response.VehicleListId;
                }
            } else {
                window.showNotification('error', 'Failed to save vehicle data.');
            }
            
            // Reset save button
            if (saveButton) {
                saveButton.disabled = false;
                saveButton.innerHTML = '<span class="vehicle-btn-icon">✓</span> Save';
            }
        },
        error: function() {
            window.showNotification('error', 'Error saving vehicle data.');
            
            // Reset save button
            if (saveButton) {
                saveButton.disabled = false;
                saveButton.innerHTML = '<span class="vehicle-btn-icon">✓</span> Save';
            }
        }
    });
};

// Validate vehicle form
window.validateVehicleForm = function() {
    const form = document.getElementById('vehicleForm');
    if (!form) return false;
    
    let isValid = true;
    const requiredFields = form.querySelectorAll('[required]');
    
    requiredFields.forEach(field => {
        if (!field.value.trim()) {
            isValid = false;
            field.style.borderColor = '#e74c3c';
        } else {
            field.style.borderColor = '';
        }
    });
    
    if (!isValid) {
        window.showNotification('error', 'Please fill in all required fields.');
    }
    
    return isValid;
};

// Show notification
window.showNotification = function(type, message) {
    // Remove any existing notifications
    const existingNotifications = document.querySelectorAll('.vehicle-notification-temporary');
    existingNotifications.forEach(notification => {
        notification.remove();
    });
    
    // Create new notification
    const notification = document.createElement('div');
    notification.className = `vehicle-notification vehicle-notification-temporary ${type}`;
    notification.textContent = message;
    
    // Add to page
    const container = document.querySelector('.vehicle-estimate-container');
    if (container) {
        container.insertBefore(notification, container.firstChild);
        
        // Auto-remove after 5 seconds
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 5000);
    }
};

// Initialize when document is ready
$(document).ready(function() {
    window.initVehiclePopup();
});
3. Updated _VehPopUp.cshtml
Replace your _VehPopUp.cshtml with this version:

html
@model BCES.Models.Vehicle.VehicleViewModel

<div class="vehicle-popup-overlay" id="vehiclePopupOverlay">
    <div class="vehicle-popup-container">
        <div class="vehicle-popup-header">
            <div class="vehicle-popup-title" id="vehiclePopupTitle">
                @(Model.VehicleListId == 0 ? "Add New Vehicle Estimate" : $"Estimate #{Model.VehicleListId}")
            </div>
            <div class="vehicle-tab-actions">
                <button id="btnSave" class="vehicle-popup-btn vehicle-popup-btn-primary" type="button" onclick="window.saveVehicleData()">
                    <span class="vehicle-btn-icon">✓</span> Save
                </button>
                <button id="btnCancelVehicle" class="vehicle-popup-btn vehicle-popup-btn-secondary" type="button" onclick="window.hideVehiclePopup()">
                    <span class="vehicle-btn-icon">✕</span> Cancel
                </button>
            </div>
        </div>
        
        <div class="vehicle-form-container" id="vehicleFormContainer">
            <form id="vehicleForm">
                @Html.HiddenFor(m => m.VehicleListId)
                @Html.Hidden("formMode", Model.VehicleListId == 0 ? "Add" : "Edit", new { id = "formMode" })
                
                <!-- Vehicle Information Section -->
                <div class="vehicle-section-title">Vehicle Information</div>

                <!-- Row 1: Estimate #, Vehicle Series, Quantity -->
                <div class="vehicle-form-row">
                    <div class="vehicle-form-group">
                        @Html.LabelFor(m => m.VehicleListId, "Estimate #", new { @class = "vehicle-form-label" })
                        @Html.TextBoxFor(m => m.VehicleListId, new { @class = "vehicle-form-control", @readonly = "readonly" })
                    </div>

                    <div class="vehicle-form-group">
                        @Html.LabelFor(m => m.VehSeriesCode, "Vehicle Series", new { @class = "vehicle-form-label vehicle-required-label" })
                        @Html.TextBoxFor(m => m.VehSeriesCode, new { @class = "vehicle-form-control", required = "required" })
                    </div>
                    
                    <div class="vehicle-form-group">
                        @Html.LabelFor(m => m.NumOfVehicles, "# Of Vehicles", new { @class = "vehicle-form-label vehicle-required-label" })
                        @Html.TextBoxFor(m => m.NumOfVehicles, new { @class = "vehicle-form-control", type = "number", min = "1", required = "required" })
                    </div>
                </div>

                <!-- Row 2: Description, SOP Number -->
                <div class="vehicle-form-row">
                    <div class="vehicle-form-group vehicle-double-width">
                        @Html.LabelFor(m => m.ProjDesc, "Description", new { @class = "vehicle-form-label vehicle-required-label" })
                        @Html.TextBoxFor(m => m.ProjDesc, new { @class = "vehicle-form-control", required = "required" })
                    </div>

                    <div class="vehicle-form-group">
                        @Html.LabelFor(m => m.Sopnumber, "SOP Number", new { @class = "vehicle-form-label" })
                        @Html.TextBoxFor(m => m.Sopnumber, new { @class = "vehicle-form-control" })
                    </div>
                </div>

                <!-- Specifications Section -->
                <div class="vehicle-section-title">Specifications</div>

                <!-- Row 3: Make, Model, Year -->
                <div class="vehicle-form-row">
                    <div class="vehicle-form-group">
                        @Html.LabelFor(m => m.Make, "Make", new { @class = "vehicle-form-label" })
                        @Html.TextBoxFor(m => m.Make, new { @class = "vehicle-form-control" })
                    </div>

                    <div class="vehicle-form-group">
                        @Html.LabelFor(m => m.VehModel, "Model", new { @class = "vehicle-form-label" })
                        @Html.TextBoxFor(m => m.VehModel, new { @class = "vehicle-form-control" })
                    </div>

                    <div class="vehicle-form-group">
                        @Html.LabelFor(m => m.Year, "Year", new { @class = "vehicle-form-label" })
                        @Html.TextBoxFor(m => m.Year, new { @class = "vehicle-form-control" })
                    </div>
                </div>

                <!-- Row 4: Engine, Transmission, Differential -->
                <div class="vehicle-form-row">
                    <div class="vehicle-form-group">
                        @Html.LabelFor(m => m.Engine, "Engine", new { @class = "vehicle-form-label" })
                        @Html.TextBoxFor(m => m.Engine, new { @class = "vehicle-form-control" })
                    </div>

                    <div class="vehicle-form-group">
                        @Html.LabelFor(m => m.Transmission, "Transmission", new { @class = "vehicle-form-label" })
                        @Html.TextBoxFor(m => m.Transmission, new { @class = "vehicle-form-control" })
                    </div>

                    <div class="vehicle-form-group">
                        @Html.LabelFor(m => m.Differential, "Differential", new { @class = "vehicle-form-label" })
                        @Html.TextBoxFor(m => m.Differential, new { @class = "vehicle-form-control" })
                    </div>
                </div>

                <!-- Audit Section -->
                <div class="vehicle-section-title">Audit Information</div>

                <!-- Row 5: Last Modified By, Last Modified Date -->
                <div class="vehicle-form-row">
                    <div class="vehicle-form-group">
                        @Html.LabelFor(m => m.ModifiedLastBy, "Last Modified By", new { @class = "vehicle-form-label" })
                        @Html.TextBoxFor(m => m.ModifiedLastBy, new { @class = "vehicle-form-control", @readonly = "readonly" })
                    </div>

                    <div class="vehicle-form-group">
                        @Html.LabelFor(m => m.ModifiedLastDate, "Last Modified Date", new { @class = "vehicle-form-label" })
                        @Html.TextBoxFor(m => m.ModifiedLastDate, new { @class = "vehicle-form-control", @readonly = "readonly" })
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>
4. Integration with Existing Code
To integrate this with your existing code:

Add the CSS file to your Layout.cshtml:

html
<link rel="stylesheet" href="~/css/vehicle-estimate.css" asp-append-version="true" />
Update your Index.cshtml to use the new functions:

Replace calls to openEstimatePopup with showVehiclePopup

Add the JavaScript code to your Index.cshtml file

Update your grid to use the new popup:

html
@(Html.Kendo().Grid<VehicleViewModel>()
    .Name("VehicleGrid")
    .Columns(c =>
    {
        c.Bound(v => v.VehicleListId).Title("Estimate #")
            .ClientTemplate("<a class='estimate-link' onclick='showVehiclePopup(#=VehicleListId#)'>#=VehicleListId#</a>").Width(120);
        // ... other columns
    })
    .ToolBar(tb => tb.ClientTemplate("<button class='k-button k-button-icontext' onclick='showVehiclePopup(0)'><span class='k-icon k-i-plus'></span>Add New Vehicle Estimate</button>"))
    // ... other configuration
)
5. Additional Styling for Loading State
Add this to your CSS file for the loading state:

css
.vehicle-loading {
    padding: 40px;
    text-align: center;
    color: #7f8c8d;
    font-size: 16px;
}

.vehicle-loading:before {
    content: "⏳";
    display: block;
    font-size: 24px;
    margin-bottom: 10px;
}
This implementation provides a complete, professional-looking vehicle estimate popup with proper dimensions, validation, and integration with your existing global functions. The CSS ensures a consistent look and feel, and the JavaScript handles all the functionality including saving, validation, and change tracking.

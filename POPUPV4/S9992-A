Complete Implementation for Vehicle Estimate Popup
I'll provide you with the separated CSS file and the modified Index.cshtml and _VehPopUp.cshtml files to implement the professional light blue/grey design.

1. CSS File (vehicle-estimate.css)
Create a new file called vehicle-estimate.css and include it in your layout:

css
/* vehicle-estimate.css - Professional styling for vehicle estimate popup */

/* Base styles */
.vehicle-estimate-popup * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

.vehicle-estimate-popup {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

/* Popup overlay */
.vehicle-popup-overlay {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.7);
    z-index: 10000;
    align-items: center;
    justify-content: center;
}

/* Popup container */
.vehicle-popup-container {
    width: 90%;
    max-width: 900px;
    max-height: 90vh;
    overflow-y: auto;
    background-color: #f8f9fa;
    border-radius: 8px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.25);
}

/* Popup header */
.vehicle-popup-header {
    background: linear-gradient(to right, #2c3e50, #4a6580);
    padding: 15px 20px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    color: white;
    border-top-left-radius: 8px;
    border-top-right-radius: 8px;
}

.vehicle-popup-title {
    font-size: 18px;
    font-weight: 600;
}

.vehicle-tab-actions {
    display: flex;
    gap: 10px;
}

/* Form container */
.vehicle-form-container {
    padding: 25px;
    background-color: #ffffff;
}

/* Section titles */
.vehicle-section-title {
    color: #2c3e50;
    font-size: 16px;
    font-weight: 600;
    margin: 25px 0 15px;
    padding-bottom: 8px;
    border-bottom: 1px solid #eaeaea;
}

.vehicle-section-title:first-child {
    margin-top: 0;
}

/* Form rows and groups */
.vehicle-form-row {
    display: flex;
    flex-wrap: wrap;
    gap: 20px;
    margin-bottom: 20px;
}

.vehicle-form-group {
    flex: 1;
    min-width: 200px;
}

.vehicle-double-width {
    flex: 2;
}

/* Labels */
.vehicle-form-label {
    display: block;
    color: #2c3e50;
    margin-bottom: 6px;
    font-size: 14px;
    font-weight: 500;
}

.vehicle-required-label::after {
    content: " *";
    color: #e74c3c;
}

/* Form controls */
.vehicle-form-control {
    width: 100%;
    padding: 10px 12px;
    background-color: #ffffff;
    border: 1px solid #dce4ec;
    border-radius: 4px;
    color: #2c3e50;
    font-size: 14px;
    outline: none;
    transition: border-color 0.2s;
}

.vehicle-form-control:focus {
    border-color: #3498db;
    box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
}

.vehicle-form-control[readonly] {
    background-color: #f8f9fa;
    color: #7f8c8d;
}

/* Buttons */
.vehicle-popup-btn {
    padding: 8px 16px;
    border-radius: 4px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s;
    border: none;
    display: inline-flex;
    align-items: center;
}

.vehicle-popup-btn-primary {
    background-color: #3498db;
    color: white;
}

.vehicle-popup-btn-primary:hover {
    background-color: #2980b9;
}

.vehicle-popup-btn-secondary {
    background-color: #ecf0f1;
    color: #7f8c8d;
}

.vehicle-popup-btn-secondary:hover {
    background-color: #dfe6e9;
    color: #2c3e50;
}

/* Icons */
.vehicle-btn-icon {
    margin-right: 5px;
}

/* Responsive adjustments */
@media (max-width: 768px) {
    .vehicle-form-row {
        flex-direction: column;
        gap: 15px;
    }
    
    .vehicle-form-group {
        min-width: 100%;
    }
    
    .vehicle-popup-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 15px;
    }
    
    .vehicle-tab-actions {
        width: 100%;
        justify-content: flex-end;
    }
    
    .vehicle-popup-container {
        width: 95%;
    }
}

/* Kendo overrides for consistency */
.vehicle-estimate-popup .k-window {
    border-radius: 8px;
    overflow: hidden;
}

.vehicle-estimate-popup .k-window-titlebar {
    background: linear-gradient(to right, #2c3e50, #4a6580);
    color: white;
    padding: 15px 20px;
    border: none;
}

.vehicle-estimate-popup .k-tabstrip-items .k-item {
    background-color: #f8f9fa;
    border-color: #dce4ec;
    color: #2c3e50;
}

.vehicle-estimate-popup .k-tabstrip-items .k-state-active {
    background-color: white;
    color: #2c3e50;
    border-bottom-color: white;
}

.vehicle-estimate-popup .k-tabstrip-content {
    padding: 20px;
    background-color: white;
    border: 1px solid #dce4ec;
    border-top: none;
}
2. Modified Index.cshtml
Update your Index.cshtml to include the CSS and adjust the popup structure:

html
@using BCES.Models.Vehicle
@using BCES.Models.Parts
@model IEnumerable<VehicleViewModel>

@{
    ViewData["Title"] = "Vehicle Estimate";
    string scGridName = $"ScPartsMaterialDetailsRebuiltPartsGrid_";
}

<!-- Include the CSS file in your view -->
<link rel="stylesheet" href="~/css/vehicle-estimate.css" />

<h6 class="vehicle-estimate-header">Vehicle Estimate</h6>
<div id="notification"></div>

<style>
    .k-tabstrip-items {
        display: flex;
        border-bottom: 2px solid #ccc;
    }

        .k-tabstrip-items .k-item {
            padding: 6px 12px;
            cursor: pointer;
            border: 1px solid #ccc;
            border-bottom: none;
            background: #eee;
        }

        .k-tabstrip-items .k-state-active {
            background: white;
            font-weight: bold;
        }

    .k-content {
        border: 1px solid #ccc;
        padding: 10px;
    }
</style>

<script>
    let popupHasChanges = false; /* closing x */
    let originalData = {}; /* closing x */
    
    // ====== GLOBAL STATE DECLARATIONS ======
    window.pendingChanges = false;
    window.currentVehicleId = 0;
    window.tabContentLoaded = [false, false, false, false, false, false, false, false]; // For 8 tabs
    window.currentlyLoadingTab = null;

    // ====== CORE FUNCTION DEFINITIONS ======
    window.setPopupReadonly = function (ids) {
        console.warn('setPopupReadonly');
        ids.forEach(function (id) {
            var $el = $("#" + id);
            var widget = $el.data("kendoComboBox") || $el.data("kendoNumericTextBox");
            if (widget) {
                widget.enable(false);
            } else {
                $el.prop("readonly", true).addClass("k-state-disabled");
            }
        });
    };
    
    window.initVehiclePopupForm = function () {
        console.warn('inside window.initVehiclePopupForm');
        var mode = $("#formMode").val();
        console.warn('mode', mode);
        if (!mode) return;

        if (mode === "Add") {
            console.warn('Add');
            setPopupEditable([
                 "NumOfVehicles", "ProjDesc",
                "Make", "VehModel", "Year",
                "Engine", "Transmission", "Differential", "Sopnumber"
            ]);
            setPopupReadonly(["VehSeriesCode", "ModifiedLastBy", "ModifiedLastDate"]);
        } else {
            console.warn('Edit');
            setPopupReadonly([
                "VehSeriesCode", "ProjDesc", "Make", "VehModel", "Year",
                "Engine", "Transmission", "Differential", "Sopnumber",
                "ModifiedLastBy", "ModifiedLastDate"
            ]);
            setPopupEditable(["NumOfVehicles"]);
        }
    };

    window.setPopupEditable = function (ids) {
        ids.forEach(function (id) {
            var $el = $("#" + id);
            var widget = $el.data("kendoComboBox") || $el.data("kendoNumericTextBox");
            if (widget) {
                widget.enable(true);
            } else {
                $el.prop("readonly", false).removeClass("k-state-disabled");
            }
        });
    };

    // ── Load the form into the first tab
    window.loadVehicleForm = function (vehicleId) {
        $.get('@Url.Action("GetVehicleById", "Vehicles")', { id: vehicleId }, function (html) {
            $("#vehicleTabContent").html(html);
            window.tabContentLoaded[0] = true;
            window.wireVehicleForm(); // rebind save/cancel/edit/etc

            var tabStrip = $("#estimateTabs").data("kendoTabStrip");

            // If it's an existing record, enable other tabs
            if (vehicleId !== 0 && tabStrip) {
                for (var i = 1; i <= 7; i++) {
                    tabStrip.enable(tabStrip.tabGroup.children().eq(i), true);
                }
            } else if (vehicleId === 0 && tabStrip) {
                // New record: disable all other tabs
                for (var i = 1; i <= 7; i++) {
                    tabStrip.enable(tabStrip.tabGroup.children().eq(i), false);
                }
            }
        });
    };

    // ── Wire up form submit and cancel actions
    window.wireVehicleForm = function() {
        $("#btnCancelVehicle").off("click").on("click", function(){
            if (!pendingChanges || confirm("Discard changes?")) {
                $("#estimatePopup").data("kendoWindow").close();
            }
        });
        
        $("#btnSave").off("click").on("click", function(e){
            e.preventDefault();
            $("#vehicleForm").submit();
        });
        
        $("#vehicleForm").off("submit").on("submit", function(e) {
            e.preventDefault();
            if (!pendingChanges) return;
            
            function getComboValue(selector) {
                const combo = $(selector).data("kendoComboBox");
                return combo ? combo.value() : $(selector).val();
            }

            var vm = {
                VehicleListId: $("#VehicleListId").val(),
                VehSeriesCode: getComboValue("#VehSeriesCode"),
                NumOfVehicles: $("#NumOfVehicles").val(),
                ProjDesc: getComboValue("#ProjDesc"),
                Make: getComboValue("#Make"),
                VehModel: getComboValue("#VehModel"),
                Year: $("#Year").val(),
                Engine: getComboValue("#Engine"),
                Transmission: getComboValue("#Transmission"),
                Differential: getComboValue("#Differential"),
                Sopnumber: $("#Sopnumber").val()
            };
        
            var url = window.currentVehicleId === 0
                ? '@Url.Action("AddVehiclesView","Vehicles")'
                : '@Url.Action("UpdateVehiclesView","Vehicles")';
                
            $.ajax({
                url: url,
                type: 'POST',
                contentType: "application/json",
                data: JSON.stringify(vm),
                success: function(response) {
                    if (response && response.VehicleListId) {
                        
                        window.currentVehicleId = response.VehicleListId;
                        $("#VehicleGrid").data("kendoGrid").dataSource.read();
                        window.loadVehicleForm(response.VehicleListId);

                        var tabStrip = $("#estimateTabs").data("kendoTabStrip");
                        for (var i = 1; i <= 7; i++) {
                            tabStrip.enable(tabStrip.tabGroup.children().eq(i), true);
                        
                        }

                        var win = $("#estimatePopup").data("kendoWindow");
                        if (win) {
                            win.title("Vehicle Estimate #" + response.VehicleListId);

                        }

                        kendo.alert("Saved successfully! Estimate #: " + response.VehicleListId);
                    } else {
                        kendo.alert("Save succeeded but no Estimate ID was returned.");
                    }

                    pendingChanges = false;
                },
                error: function() {
                    kendo.alert("Error saving data.");
                }
            });
        });
        
        $("#vehicleForm input, #vehicleForm select").off("change input").on("input change", function(){
            pendingChanges = true;
        });
    }

    // ── Open vehicle popup and load form partial
    window.openEstimatePopup = function (vehicleId) {
        var win = $("#estimatePopup").data("kendoWindow");
        currentVehicleId = vehicleId;

        win.title(vehicleId === 0 ? "Add New Estimate" : "Vehicle Estimate #" + vehicleId);
        win.center().open();

        // Load vehicle tab first
        loadTabContent(
            "vehicleTabContent",
            '@Url.Action("GetVehicleById", "Vehicles")',
            { id: vehicleId },
            function () {
                //  Partial (_VehPopup.cshtml) is now loaded
                initVehiclePopupForm();      // apply Add/Edit rules
                wireVehicleForm();     // rebind save/cancel handlers

                if (vehicleId !== 0) {
                    enableAllTabs();
                }
            }
        );
    };

    // ── Delete handler
    window.showDeleteConfirmation = function(e) {
        e.preventDefault();
        var grid = $("#VehicleGrid").data("kendoGrid");
        var item = grid.dataItem($(e.currentTarget).closest("tr"));
        var dlg = $("#deleteConfirmationDialog").kendoWindow({
            title: "Confirm Delete",
            modal: true,
            width: 400,
            visible: false,
            resizable: false
        }).data("kendoWindow");

        dlg.center().open();

        $("#confirmDeleteBtn").off("click").on("click", function () {
            $.post('@Url.Action("DeleteVehicle", "Vehicles")', { VehicleListId: item.VehicleListId }, function () {
                grid.dataSource.read();
                dlg.close();
            });
        });

        $("#cancelDeleteBtn").off("click").on("click", function () {
            dlg.close();
        });
    };

    // ── Copy estimate handler
    window.onCopyEstimate = function(e)  {
        e.preventDefault();
        var grid = $("#VehicleGrid").data("kendoGrid");
        var item = grid.dataItem($(e.currentTarget).closest("tr"));
        var win = $("#copyEstimateDialog").kendoWindow({
            title: "Copy Estimate",
            modal: true,
            width: 400,
            visible: false
        }).data("kendoWindow");

        $("#vehicleListId").val(item.VehicleListId);
        $("#oldVehSeriesCode").val(item.VehSeriesCode);
        $("#oldprojDesc").val(item.ProjDesc);
        $("#newVehSeriesCode, #newprojDesc").val("");

        win.center().open();

        // Wire up copy button
        $("#copyEstimateBtn").off("click").on("click", function () {
            var payload = {
                vehicleListId: $("#vehicleListId").val(),
                oldVehSeriesCode: $("#oldVehSeriesCode").val(),
                newVehSeriesCode: $("#newVehSeriesCode").val(),
                oldprojDesc: $("#oldprojDesc").val(),
                newprojDesc: $("#newprojDesc").val()
            };

            if (!payload.newVehSeriesCode || !payload.newprojDesc) {
                return kendo.alert("Please fill required fields.");
            }

            $.ajax({
                url: '@Url.Action("CopyEstimate", "Vehicles")',
                type: 'POST',
                contentType: "application/json",
                data: JSON.stringify(payload),
                success: function (response) {
                    if (response.success) {
                        kendo.alert("Estimate copied successfully! New ID: " + response.newVehicleListId);
                        $("#VehicleGrid").data("kendoGrid").dataSource.read();
                        win.close();
                    } else {
                        kendo.alert("Copy failed: " + response.message);
                    }
                }
            });
        });

        $("#cancelCopyBtn").off("click").on("click", function () {
            win.close();
        });
    };

    // ── Archive handler
    window.onArchiveClick= function(e) {
        e.preventDefault();
        var grid = $("#VehicleGrid").data("kendoGrid");
        var item = grid.dataItem($(e.currentTarget).closest("tr"));

        kendo.confirm("Archive estimate #" + item.VehicleListId + "?").then(function () {
            $.ajax({
                url: '@Url.Action("ArchiveVehicleDetails", "Vehicles")',
                type: 'POST',
                contentType: "application/json",
                data: JSON.stringify({
                    VehicleListId: item.VehicleListId,
                    VehSeriesCode: item.VehSeriesCode,
                    TypeId: "BUS",
                    Username: "@ViewBag.UserName".toUpperCase()
                }),
                success: function (r) {
                    if (r.success) {
                        grid.dataSource.read();
                        kendo.alert(r.message);
                    } else {
                        kendo.alert("Archive failed: " + r.message);
                    }
                }
            });
        });
    };

    // ── Load partial tabs
    window.loadTabContent = function (elementId, url, data, callback) {
        $("#" + elementId).load(url, data, function () {
            if (typeof callback === "function") callback();
        });
    };

    // ── Tab selection handler
    window.onTabSelect = function (e) {
        var index = $(e.item).index();

        // Match your actual actions here
        var tabsConfig = [
            { id: "vehicleTabContent", url: '@Url.Action("GetVehicleById", "Vehicles")' }, 
            { id: "partsTabContent", url: "/Vehicles/MaterialCostSummaryPartial" },   // Parts
            { id: "labourTabContent", url: "/Vehicles/LabourHourSummaryPartial" },        // Labour
            { id: "stockCodedPartsTabContent", url: "/Vehicles/ScDetailsPartial" },   // Stock coded
            { id: "nonStockCodedPartsTabContent", url: "/Vehicles/NonStockPartsPartial" }, // Non stock coded
            { id: "rebuiltPartsTabContent", url: "/Vehicles/RebuiltPartsPartial" },   // Rebuilt
            { id: "finalEstimateTabContent", url: "/Vehicles/TotalCostPartial" }        // Final estimate
        ];

        var tab = tabsConfig[index];

        // Safety check — skip if no mapping
        if (!tab) return;

        // Load only if empty
        if ($("#" + tab.id).is(":empty")) {
            loadTabContent(
                tab.id,
                tab.url,
                { id: currentVehicleId, gridType: "VehicleGrid" }
            );
        }
    };

    window.setFormReadOnly = function(readOnly) {
        $("#vehicleForm :input").each(function() {
            var input = $(this);
            var widget = kendo.widgetInstance(input, kendo.ui);
            
            if (widget) {
                if (typeof widget.readonly === 'function') {
                    widget.readonly(readOnly);
                } else if (widget.element && widget.element.is("input")) {
                    input.prop("readonly", readOnly);
                }
            } else {
                input.prop("readonly", readOnly);
            }
        });

        $("[data-role='combobox']").each(function() {
            var combo = $(this).data("kendoComboBox");
            if (combo) {
                combo.readonly(readOnly);
            }
        });
    };

    window.onComboBoxChange = function(e) {
        var combo = e.sender;
        if (combo.selectedIndex === -1) {
            combo.value(null);
            combo.input.val("");
            combo.trigger("change");
            $("#validationMessage").text("Invalid selection!").css("color", "red");
        } else {
            $("#validationMessage").text("");
        }
    }

    window.getComboBoxParams = function() {
        var input = $(".k-combobox input.k-input:focus");
        return {
            columnName: input.attr("name")?.replace("_input", "").split('.').pop(),
            searchText: input.val() || ""
        };
    }

    window.onComboBoxDataBound = function(e) {
        var notification = $("#notification").data("kendoNotification");
        if (e.sender.dataSource.total() === 0) {
            e.sender.value(null);
            e.sender.input.val("");
            setTimeout(function () {
                notification.show("Invalid Selection! Please choose from the list.", "error");
            }, 100);
        }
    }
</script>

<!-- Kendo main grid -->
@(Html.Kendo().TabStrip()
    .Name("vehicleTabStrip")
    .Items(ts =>
    {
        ts.Add().Text("Vehicles").Selected(true)
            .Content(@<text>
    @(Html.Kendo().Grid<VehicleViewModel>()
    .Name("VehicleGrid")
    .Columns(c =>
    {
    c.Bound(v => v.VehicleListId).Title("Estimate #")
    .ClientTemplate("<a class='estimate-link' onclick='window.openEstimatePopup(#=VehicleListId#)'>#=VehicleListId#</a>").Width(120);
    c.Bound(v => v.VehSeriesCode).Title("Vehicle Series").HeaderHtmlAttributes(new { @class = "required-header" }).EditorTemplateName("ComboBoxEditor").Width(150);
    c.Bound(v => v.NumOfVehicles).Title("Qty").HeaderHtmlAttributes(new { @class = "required-header" }).Width(80);
    c.Bound(v => v.ProjDesc).Title("Description").HeaderHtmlAttributes(new { @class = "required-header" }).Width(250);
    c.Command(cmd =>
    {
    cmd.Custom("Copy").IconClass("k-icon k-i-copy").Click("window.onCopyEstimate");
    cmd.Custom("Archive").IconClass("k-icon k-i-folder").Click("window.onArchiveClick");
    cmd.Custom("Delete").IconClass("k-icon k-i-delete").Click("window.showDeleteConfirmation");
    }).Width(180);
    })
    .ToolBar(tb => tb.ClientTemplate("<button class='k-button k-button-icontext' onclick='window.openEstimatePopup(0)'><span class='k-icon k-i-plus'></span>Add New Vehicle Estimate</button>"))
    .Pageable(p => p.PageSizes(new[] { 10, 20, 50 }))
    .Sortable()
    .Filterable()
    
    .HtmlAttributes(new { style = "height:540px;" })
    .DataSource(ds => ds.Ajax()
    .PageSize(10)
    .Model(m => m.Id(v => v.VehicleListId))
    .Read(r => r.Action("GetVehiclesView", "Vehicles").Type(HttpVerbs.Get))
    .Create(c => c.Action("AddVehiclesView", "Vehicles").Type(HttpVerbs.Post))
    .Update(u => u.Action("UpdateVehiclesView", "Vehicles").Type(HttpVerbs.Post))
    .Destroy(d => d.Action("DeleteVehicle", "Vehicles").Type(HttpVerbs.Post))
    )
    
    )
</text>);
    })

)

<!-- Popup tabs for vehicle details -->
<div id="estimatePopup" style="display:none;">
    <div id="estimateTabs">
        <ul>
            <li class="k-state-active">Vehicle</li>
            <li>Parts Details</li>
            <li>Labour Details</li>
            <li>Stock Coded Parts</li>
            <li>Non Stock Coded Parts</li>
            <li>Rebuilt Parts</li>
            <li>Final Estimate</li>
        </ul>

        <div id="vehicleTabContent"></div>
        <div id="partsTabContent"></div>
        <div id="labourTabContent"></div>
        <div id="stockCodedPartsTabContent"></div>
        <div id="nonStockCodedPartsTabContent"></div>
        <div id="rebuiltPartsTabContent"></div>
        <div id="finalEstimateTabContent"></div>
    </div>
</div>

<!-- Delete confirmation dialog -->
<div id="deleteConfirmationDialog" style="display:none;">
  <div class="confirmation-message"><span class="k-icon k-i-warning" style="font-size:24px;color:#f0ad4e;"></span><span style="margin-left:10px;">Are you sure you'd like to delete?</span></div>
  <div class="confirmation-buttons"><button class="k-button" id="cancelDeleteBtn">Cancel</button><button class="k-button k-primary" id="confirmDeleteBtn" style="margin-left:10px;">Delete</button></div>
</div>

<!-- Copy estimate dialog -->
<div id="copyEstimateDialog" style="display:none;">
  <div class="k-form">
    <div class="k-form-field"><label>Estimate #</label><input id="vehicleListId" class="k-textbox" readonly /></div>
    <div class="k-form-field"><label>Old Series</label><input id="oldVehSeriesCode" class="k-textbox" readonly /></div>
    <div class="k-form-field"><label>Old Description</label><input id="oldprojDesc" class="k-textbox" readonly /></div>
    <div class="k-form-field"><label>New Vehicle Series<span style="color:red">*</span></label><input id="newVehSeriesCode" class="k-textbox" required /></div>
    <div class="k-form-field"><label>New Description<span style="color:red">*</span></label><input id="newprojDesc" class="k-textbox" required /></div>
    <div class="k-form-buttons">
        <button type="button" class="k-button k-primary" id="copyEstimateBtn">Copy</button>
        <button type="button" class="k-button" id="cancelCopyBtn">Cancel</button>
    </div>
  </div>
</div>

@section Scripts {
<script>
    var currentVehicleId = 0;

    $(document).ready(function () {
        $("#notification").kendoNotification();
        // Initialize popup
        $("#estimatePopup").kendoWindow({
            modal: true,
            width: 1150,
            height: "auto",
            resizable : false,
            scrolllable : false,
            title: "Estimate",
            visible: false,
            actions: ["Close"]
        });

        // Initialize TabStrip
        $("#estimateTabs").kendoTabStrip({
            animation: { open: { effects: "fadeIn" } },
            select: onTabSelect,
            activate: function (e) {
                // Load first tab immediately
                if ($(e.item).index() === 0 && $("#vehicleTabContent").is(":empty")) {
                    loadTabContent(
                        "vehicleTabContent",
                        '@Url.Action("GetVehicleById", "Vehicles")',
                        { id: currentVehicleId }
                    );
                }
            }
        });

        // Disable all tabs except Vehicle initially
        disableOtherTabs();
    });
           

    function disableOtherTabs() {
        var ts = $("#estimateTabs").data("kendoTabStrip");
        for (var i = 1; i <= 6; i++) {
            ts.enable(ts.tabGroup.children().eq(i), false);
        }
    }

    function enableAllTabs() {
        var ts = $("#estimateTabs").data("kendoTabStrip");
        for (var i = 1; i <= 6; i++) {
            ts.enable(ts.tabGroup.children().eq(i), true);
        }
    }
</script>
3. Modified _VehPopUp.cshtml
Update your _VehPopUp.cshtml to use the new CSS classes:

html
@model BCES.Models.Vehicle.VehicleViewModel

<div class="vehicle-estimate-popup">
    <div class="vehicle-popup-container">
        <div class="vehicle-popup-header">
            <div class="vehicle-popup-title">@(Model.VehicleListId == 0 ? "Add New Vehicle Estimate" : $"Estimate #{Model.VehicleListId}")</div>
            <div class="vehicle-tab-actions">
                <button id="btnSave" class="vehicle-popup-btn vehicle-popup-btn-primary" type="button">
                    <span class="vehicle-btn-icon">✓</span> Save
                </button>
                <button id="btnCancelVehicle" class="vehicle-popup-btn vehicle-popup-btn-secondary" type="button">
                    <span class="vehicle-btn-icon">✕</span> Cancel
                </button>
            </div>
        </div>
        
        <div class="vehicle-form-container">
            <form id="vehicleForm">
                @Html.HiddenFor(m => m.VehicleListId)
                @Html.Hidden("formMode", Model.VehicleListId == 0 ? "Add" : "Edit", new { id = "formMode" })
                
                <!-- Vehicle Information Section -->
                <div class="vehicle-section-title">Vehicle Information</div>

                <!-- Row 1: Estimate #, Vehicle Series, Quantity -->
                <div class="vehicle-form-row">
                    <div class="vehicle-form-group">
                        @Html.LabelFor(m => m.VehicleListId, "Estimate #", new { @class = "vehicle-form-label" })
                        @Html.TextBoxFor(m => m.VehicleListId, new { @class = "vehicle-form-control", @readonly = "readonly" })
                    </div>

                    <div class="vehicle-form-group">
                        @Html.LabelFor(m => m.VehSeriesCode, "Vehicle Series", new { @class = "vehicle-form-label vehicle-required-label" })
                        @(Html.Kendo().ComboBoxFor(m => m.VehSeriesCode)
                            .HtmlAttributes(new { @class = "vehicle-form-control" })
                            .Placeholder("Select Vehicle Series")
                        )
                    </div>
                    
                    <div class="vehicle-form-group">
                        @Html.LabelFor(m => m.NumOfVehicles, "# Of Vehicles", new { @class = "vehicle-form-label vehicle-required-label" })
                        @(Html.Kendo().NumericTextBoxFor(m => m.NumOfVehicles)
                            .HtmlAttributes(new { @class = "vehicle-form-control" })
                            .Decimals(0)
                            .Min(1)
                        )
                    </div>
                </div>

                <!-- Row 2: Description, SOP Number -->
                <div class="vehicle-form-row">
                    <div class="vehicle-form-group vehicle-double-width">
                        @Html.LabelFor(m => m.ProjDesc, "Description", new { @class = "vehicle-form-label vehicle-required-label" })
                        @(Html.Kendo().ComboBoxFor(m => m.ProjDesc)
                            .HtmlAttributes(new { @class = "vehicle-form-control" })
                            .Placeholder("Select Project")
                        )
                    </div>

                    <div class="vehicle-form-group">
                        @Html.LabelFor(m => m.Sopnumber, "SOP Number", new { @class = "vehicle-form-label" })
                        @(Html.Kendo().ComboBoxFor(m => m.Sopnumber)
                            .HtmlAttributes(new { @class = "vehicle-form-control" })
                            .Placeholder("Select SOP")
                        )
                    </div>
                </div>

                <!-- Specifications Section -->
                <div class="vehicle-section-title">Specifications</div>

                <!-- Row 3: Make, Model, Year -->
                <div class="vehicle-form-row">
                    <div class="vehicle-form-group">
                        @Html.LabelFor(m => m.Make, "Make", new { @class = "vehicle-form-label" })
                        @(Html.Kendo().ComboBoxFor(m => m.Make)
                            .HtmlAttributes(new { @class = "vehicle-form-control" })
                            .Placeholder("Select Make")
                        )
                    </div>

                    <div class="vehicle-form-group">
                        @Html.LabelFor(m => m.VehModel, "Model", new { @class = "vehicle-form-label" })
                        @(Html.Kendo().ComboBoxFor(m => m.VehModel)
                            .HtmlAttributes(new { @class = "vehicle-form-control" })
                            .Placeholder("Select Model")
                        )
                    </div>

                    <div class="vehicle-form-group">
                        @Html.LabelFor(m => m.Year, "Year", new { @class = "vehicle-form-label" })
                        @(Html.Kendo().ComboBoxFor(m => m.Year)
                            .HtmlAttributes(new { @class = "vehicle-form-control" })
                            .Placeholder("Select Year")
                        )
                    </div>
                </div>

                <!-- Row 4: Engine, Transmission, Differential -->
                <div class="vehicle-form-row">
                    <div class="vehicle-form-group">
                        @Html.LabelFor(m => m.Engine, "Engine", new { @class = "vehicle-form-label" })
                        @(Html.Kendo().ComboBoxFor(m => m.Engine)
                            .HtmlAttributes(new { @class = "vehicle-form-control" })
                            .Placeholder("Select Engine")
                        )
                    </div>

                    <div class="vehicle-form-group">
                        @Html.LabelFor(m => m.Transmission, "Transmission", new { @class = "vehicle-form-label" })
                        @(Html.Kendo().ComboBoxFor(m => m.Transmission)
                            .HtmlAttributes(new { @class = "vehicle-form-control" })
                            .Placeholder("Select Transmission")
                        )
                    </div>

                    <div class="vehicle-form-group">
                        @Html.LabelFor(m => m.Differential, "Differential", new { @class = "vehicle-form-label" })
                        @(Html.Kendo().ComboBoxFor(m => m.Differential)
                            .HtmlAttributes(new { @class = "vehicle-form-control" })
                            .Placeholder("Select Differential")
                        )
                    </div>
                </div>

                <!-- Audit Section -->
                <div class="vehicle-section-title">Audit Information</div>

                <!-- Row 5: Last Modified By, Last Modified Date -->
                <div class="vehicle-form-row">
                    <div class="vehicle-form-group">
                        @Html.LabelFor(m => m.ModifiedLastBy, "Last Modified By", new { @class = "vehicle-form-label" })
                        @Html.TextBoxFor(m => m.ModifiedLastBy, new { @class = "vehicle-form-control", @readonly = "readonly" })
                    </div>

                    <div class="vehicle-form-group">
                        @Html.LabelFor(m => m.ModifiedLastDate, "Last Modified Date", new { @class = "vehicle-form-label" })
                        @Html.TextBoxFor(m => m.ModifiedLastDate, new { @class = "vehicle-form-control", @readonly = "readonly" })
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>
4. Layout.cshtml Update
Make sure to include the CSS file in your Layout.cshtml:

html
<head>
    <!-- Other head elements -->
    <link rel="stylesheet" href="~/css/vehicle-estimate.css" asp-append-version="true" />
</head>
Implementation Notes:

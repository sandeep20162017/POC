üîπ _VehPopUp.cshtml
@model BCES.Models.Vehicle.VehicleViewModel

<div id="vehPopupForm">
    <!-- Row 1: Estimate #, Vehicle Series, Quantity -->
    <div class="form-row">
        <div class="form-group">
            @Html.LabelFor(m => m.VehicleListId, "Estimate #", new { @class = "form-label" })
            @(Html.Kendo().TextBoxFor(m => m.VehicleListId)
                .HtmlAttributes(new { @class = "form-control" }))
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.VehicleSeries, "Vehicle Series", new { @class = "form-label" })
            @(Html.Kendo().TextBoxFor(m => m.VehicleSeries)
                .HtmlAttributes(new { @class = "form-control" }))
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.Quantity, "Quantity", new { @class = "form-label" })
            @(Html.Kendo().NumericTextBoxFor(m => m.Quantity)
                .HtmlAttributes(new { @class = "form-control" })
                .Decimals(0)
                .Min(0))
        </div>
    </div>

    <!-- Row 2: Make, Model Year -->
    <div class="form-row">
        <div class="form-group">
            @Html.LabelFor(m => m.Make, "Make", new { @class = "form-label" })
            @(Html.Kendo().ComboBoxFor(m => m.Make)
                .HtmlAttributes(new { @class = "form-control" })
                .Placeholder("Select Make"))
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.ModelYear, "Model Year", new { @class = "form-label" })
            @(Html.Kendo().ComboBoxFor(m => m.ModelYear)
                .HtmlAttributes(new { @class = "form-control" })
                .Placeholder("Select Year"))
        </div>
    </div>

    <!-- Row 3: Project Description -->
    <div class="form-row">
        <div class="form-group w-100">
            @Html.LabelFor(m => m.ProjectDescription, "Project Description", new { @class = "form-label" })
            @(Html.Kendo().ComboBoxFor(m => m.ProjectDescription)
                .HtmlAttributes(new { @class = "form-control" })
                .Placeholder("Select Project"))
        </div>
    </div>

    <!-- Row 4: Engine, Transmission, Vehicle Code -->
    <div class="form-row">
        <div class="form-group">
            @Html.LabelFor(m => m.Engine, "Engine", new { @class = "form-label" })
            @(Html.Kendo().ComboBoxFor(m => m.Engine)
                .HtmlAttributes(new { @class = "form-control" })
                .Placeholder("Select Engine"))
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.Transmission, "Transmission", new { @class = "form-label" })
            @(Html.Kendo().ComboBoxFor(m => m.Transmission)
                .HtmlAttributes(new { @class = "form-control" })
                .Placeholder("Select Transmission"))
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.VehicleCode, "Vehicle Code", new { @class = "form-label" })
            @(Html.Kendo().ComboBoxFor(m => m.VehicleCode)
                .HtmlAttributes(new { @class = "form-control" })
                .Placeholder("Select Vehicle Code"))
        </div>
    </div>

    <!-- Actions -->
    <div class="mt-3 text-end">
        <button id="btnSaveScPart" class="btn">Save</button>
        <button id="btnCancelScPart" class="btn">Cancel</button>
    </div>
</div>

üîπ TotalCost.cshtml
@model BCES.Models.Vehicle.TotalCostViewModel

<div id="totalCostForm">
    <!-- Row 1: Base Cost, Labor Cost -->
    <div class="form-row">
        <div class="form-group">
            @Html.LabelFor(m => m.BaseCost, "Base Cost", new { @class = "form-label" })
            @(Html.Kendo().NumericTextBoxFor(m => m.BaseCost)
                .HtmlAttributes(new { @class = "form-control" })
                .Decimals(2)
                .Min(0))
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.LaborCost, "Labor Cost", new { @class = "form-label" })
            @(Html.Kendo().NumericTextBoxFor(m => m.LaborCost)
                .HtmlAttributes(new { @class = "form-control" })
                .Decimals(2)
                .Min(0))
        </div>
    </div>

    <!-- Row 2: Parts Cost, Other Cost -->
    <div class="form-row">
        <div class="form-group">
            @Html.LabelFor(m => m.PartsCost, "Parts Cost", new { @class = "form-label" })
            @(Html.Kendo().NumericTextBoxFor(m => m.PartsCost)
                .HtmlAttributes(new { @class = "form-control" })
                .Decimals(2)
                .Min(0))
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.OtherCost, "Other Cost", new { @class = "form-label" })
            @(Html.Kendo().NumericTextBoxFor(m => m.OtherCost)
                .HtmlAttributes(new { @class = "form-control" })
                .Decimals(2)
                .Min(0))
        </div>
    </div>

    <!-- Row 3: Total -->
    <div class="form-row">
        <div class="form-group w-100">
            @Html.LabelFor(m => m.TotalEstimate, "Total Estimate", new { @class = "form-label" })
            @(Html.Kendo().NumericTextBoxFor(m => m.TotalEstimate)
                .HtmlAttributes(new { @class = "form-control", @readonly = "readonly" })
                .Decimals(2)
                .Min(0))
        </div>
    </div>

    <!-- Actions -->
    <div class="mt-3 text-end">
        <button id="btnSaveTotalCost" class="btn">Save</button>
        <button id="btnCancelTotalCost" class="btn">Cancel</button>
    </div>
</div>


‚úÖ Both files now:

Use consistent styling hooks (form-row, form-group, form-label, form-control, btn).

Work with the CSS we wrote earlier.

Popup will always be centered with black background.

Do you also want me to update Index.cshtml fully with these same cleaned-up classes applied (so you can paste once and be done), or just keep the changes you already have?

You said:
update Index.cshtml fully with these same cleaned-up classes applied (so i can paste once and be done),
ChatGPT said:

Perfect üëç ‚Äî I‚Äôll rewrite your Index.cshtml fully so it matches the same cleaned-up class system (form-row, form-group, form-label, form-control, btn) and will work with the CSS we defined.

This will:

Remove inline styles.

Apply the new UI/UX rules (reduced gaps, smaller menu, black tab font, centered popup).

Keep all your existing functionality (grids, popup hooks, tabs, JS placeholders).

Add stubs for openEstimatePopup logic (disable tabs until save) and addNewVehicleStub().

üîπ Index.cshtml
@using BCES.Models.Vehicle
@using BCES.Models.Parts
@model IEnumerable<VehicleViewModel>

@{
    ViewData["Title"] = "Vehicle Estimate";
}

<h6 class="page-title">Vehicle Estimate</h6>

<!-- Tabs -->
@(Html.Kendo().TabStrip()
    .Name("vehicleTabs")
    .HtmlAttributes(new { @class = "custom-tabs" })
    .Items(tab =>
    {
        tab.Add().Text("Vehicle").Content(@<text>
            <div id="vehicleTabContent">
                @Html.Partial("_VehPopUp", Model.FirstOrDefault())
            </div>
        </text>).Selected(true);

        tab.Add().Text("Total Cost").Content(@<text>
            <div id="totalCostTabContent">
                @Html.Partial("TotalCost", new BCES.Models.Vehicle.TotalCostViewModel())
            </div>
        </text>);
    })
)

<!-- Toolbar -->
<div class="toolbar">
    <button class="btn" onclick="openEstimatePopup()">Add New Vehicle</button>
    <button class="btn" onclick="addNewVehicleStub()">Stub Add Record</button>
</div>

<!-- Vehicle Grid -->
@(Html.Kendo().Grid<VehicleViewModel>()
    .Name("VehiclesGrid")
    .HtmlAttributes(new { @class = "custom-grid" })
    .Columns(columns =>
    {
        columns.Bound(v => v.VehicleListId).Title("Estimate #");
        columns.Bound(v => v.VehicleSeries).Title("Vehicle Series");
        columns.Bound(v => v.Make).Title("Make");
        columns.Bound(v => v.ModelYear).Title("Model Year");
        columns.Bound(v => v.Quantity).Title("Quantity");
    })
    .Pageable()
    .Sortable()
    .Scrollable()
)

@section Scripts {
    <script>
        // Centered popup logic
        function openEstimatePopup() {
            var popup = $("#vehPopupForm").closest(".k-window-content").data("kendoWindow");
            if (popup) {
                popup.center().open();

                // Disable all tabs except Vehicle
                var tabStrip = $("#vehicleTabs").data("kendoTabStrip");
                if (tabStrip) {
                    var items = tabStrip.items();
                    for (var i = 0; i < items.length; i++) {
                        if (i !== 0) {
                            tabStrip.disable($(items[i]));
                        }
                    }
                }
            }
        }

        // Activate all tabs after save
        function onVehicleSaveSuccess() {
            var tabStrip = $("#vehicleTabs").data("kendoTabStrip");
            if (tabStrip) {
                var items = tabStrip.items();
                for (var i = 0; i < items.length; i++) {
                    tabStrip.enable($(items[i]));
                }
            }
        }

        // Stub: Add new record
        function addNewVehicleStub() {
            alert("Stub function to add a new vehicle. Implement later.");
        }
    </script>
}


‚úÖ Now you have:

A clean Index.cshtml matching _VehPopUp.cshtml and TotalCost.cshtml.

Consistent classes for CSS theming.

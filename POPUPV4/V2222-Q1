InCell works fine. Still getting Null Reference Exception when _ScPartsUsed.cshtml is getting rendered. 
 NRE stack :	CES.dll!AspNetCoreGeneratedDocument.Views_Shared_EditorTemplates_StockCodedPartsViewModel.ExecuteAsync()	Unknown
Need yu assistance in fixing _ScPartsUsed.cshtml
additional details :
shared/_VehPopUp.cshtml 
@model BCES.Models.Vehicle.VehicleViewModel

<div class="popup-container">
    <div class="popup-header">
        <div class="popup-title">@(Model.VehicleListId == 0 ? "Add New Vehicle Estimate" : $"Estimate #{Model.VehicleListId}")</div>
        <div class="tab-actions">
            <button id="btnEdit" class="k-button" style="@(Model.VehicleListId == 0 ? "display:none;" : "")">
                <span class="k-icon k-i-edit"></span> Edit
            </button>
            <button id="btnSave" class="k-button k-primary">
                <span class="k-icon k-i-save"></span> Save
            </button>
        </div>
    </div>

    <div class="form-container">
        <form id="vehicleForm">
            @Html.HiddenFor(m => m.VehicleListId)

            <!-- Vehicle Information Section -->
            <div class="section-title">Vehicle Information</div>

            <!-- Row 1: Estimate #, Vehicle Series, Quantity -->
            <div class="form-row">
                <div class="form-group">
                    @Html.LabelFor(m => m.VehicleListId, "Estimate #", new { @class = "form-label" })
                    @(Html.Kendo().TextBoxFor(m => m.VehicleListId)
                        .Value(Model.VehicleListId == 0 ? "0" : Model.VehicleListId.ToString())
                        .HtmlAttributes(new
                        {
                            @readonly = "readonly",
                            @class = "k-textbox read-only",
                            style = "width:100%; padding: 4px 6px; height: 28px;"
                        }))
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.VehSeriesCode, "Vehicle Series", new { @class = "form-label required-label" })
                    @Html.EditorFor(m => m.VehSeriesCode, "ComboBoxEditor", new
                        {
                            htmlAttributes = new
                            {
                                required = "required",
                                @class = "vehicle-field",
                                style = "width:100%; height: 28px;"
                            }
                        })
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.NumOfVehicles, "Quantity", new { @class = "form-label required-label" })
                    @(Html.Kendo().NumericTextBoxFor(m => m.NumOfVehicles)
                        .Format("0")
                        .Min(1)
                        .HtmlAttributes(new
                        {
                            required = "required",
                            @class = "vehicle-field",
                            style = "width:100%; height: 28px;"
                        }))
                </div>
            </div>

            <!-- Row 2: Description, SOP Number -->
            <div class="form-row">
                <div class="form-group double-width">
                    @Html.LabelFor(m => m.ProjDesc, "Description", new { @class = "form-label required-label" })
                    @Html.EditorFor(m => m.ProjDesc, "ComboBoxEditor", new
                        {
                            htmlAttributes = new
                            {
                                required = "required",
                                @class = "vehicle-field",
                                style = "width:100%; height: 28px;"
                            }
                        })
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.Sopnumber, "SOP Number", new { @class = "form-label" })
                    @(Html.Kendo().TextBoxFor(m => m.Sopnumber)
                        .HtmlAttributes(new
                        {
                            @class = "vehicle-field",
                            style = "width:100%; padding: 4px 6px; height: 28px;"
                        }))
                </div>
            </div>

            <!-- Specifications Section -->
            <div class="section-title">Specifications</div>

            <!-- Row 3: Make, Model, Year -->
            <div class="form-row">
                <div class="form-group">
                    @Html.LabelFor(m => m.Make, "Make", new { @class = "form-label" })
                    @Html.EditorFor(m => m.Make, "ComboBoxEditor", new
                        {
                            htmlAttributes = new
                            {
                                @class = "vehicle-field",
                                style = "width:100%; height: 28px;"
                            }
                        })
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.VehModel, "Model", new { @class = "form-label" })
                    @Html.EditorFor(m => m.VehModel, "ComboBoxEditor", new
                        {
                            htmlAttributes = new
                            {
                                @class = "vehicle-field",
                                style = "width:100%; height: 28px;"
                            }
                        })
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.Year, "Year", new { @class = "form-label" })
                    @(Html.Kendo().NumericTextBoxFor(m => m.Year)
                        .Format("0")
                        .Min(1900)
                        .Max(DateTime.Now.Year + 1)
                        .HtmlAttributes(new
                        {
                            @class = "vehicle-field",
                            style = "width:100%; height: 28px;"
                        }))
                </div>
            </div>

            <!-- Row 4: Engine, Transmission, Differential -->
            <div class="form-row">
                <div class="form-group">
                    @Html.LabelFor(m => m.Engine, "Engine", new { @class = "form-label" })
                    @Html.EditorFor(m => m.Engine, "ComboBoxEditor", new
                        {
                            htmlAttributes = new
                            {
                                @class = "vehicle-field",
                                style = "width:100%; height: 28px;"
                            }
                        })
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.Transmission, "Transmission", new { @class = "form-label" })
                    @Html.EditorFor(m => m.Transmission, "ComboBoxEditor", new
                        {
                            htmlAttributes = new
                            {
                                @class = "vehicle-field",
                                style = "width:100%; height: 28px;"
                            }
                        })
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.Differential, "Differential", new { @class = "form-label" })
                    @Html.EditorFor(m => m.Differential, "ComboBoxEditor", new
                        {
                            htmlAttributes = new
                            {
                                @class = "vehicle-field",
                                style = "width:100%; height: 28px;"
                            }
                        })
                </div>
            </div>

            <!-- Audit Section -->
            <div class="section-title">Audit Information</div>

            <!-- Row 5: Last Modified By, Last Modified Date -->
            <div class="form-row">
                <div class="form-group">
                    @Html.LabelFor(m => m.ModifiedLastBy, "Last Modified By", new { @class = "form-label" })
                    @(Html.Kendo().TextBoxFor(m => m.ModifiedLastBy)
                        .HtmlAttributes(new
                        {
                            @readonly = "readonly",
                            @class = "k-textbox read-only",
                            style = "width:100%; padding: 4px 6px; height: 28px;"
                        }))
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.ModifiedLastDate, "Last Modified Date", new { @class = "form-label" })
                    @(Html.Kendo().TextBoxFor(m => m.ModifiedLastDate)
                        .HtmlAttributes(new
                        {
                            @readonly = "readonly",
                            @class = "k-textbox read-only",
                            style = "width:100%; padding: 4px 6px; height: 28px;"
                        }))
                </div>
            </div>
        </form>
    </div>
</div>

<script>
    // Initialize form state based on mode (add vs edit)
    $(document).ready(function () {
        const isAddMode = @Model.VehicleListId === 0;

        // For existing records, make all non-audit fields readonly
        if (!isAddMode) {
            $(".vehicle-field").each(function () {
                $(this).prop("readonly", true);
            });
        }

        // Handle Edit button click
        $("#btnEdit").click(function () {
            $(".vehicle-field").prop("readonly", false);
            $(this).hide();
        });
    });

    // Set form readonly state
    function setFormReadOnly(readOnly) {
        $(".vehicle-field").each(function () {
            const input = $(this);
            const widget = kendo.widgetInstance(input, kendo.ui);

            if (widget) {
                if (typeof widget.readonly === 'function') {
                    widget.readonly(readOnly);
                } else if (widget.element && widget.element.is("input")) {
                    input.prop("readonly", readOnly);
                }
            } else {
                input.prop("readonly", readOnly);
            }

            // Toggle readonly class for styling
            input.toggleClass("read-only", readOnly);
        });

        // Special handling for comboboxes
        $("[data-role='combobox']").each(function () {
            const combo = $(this).data("kendoComboBox");
            if (combo) {
                combo.readonly(readOnly);
                combo.enable(!readOnly);
                $(combo.element).toggleClass("read-only", readOnly);
            }
        });
    }
</script>
Shared/_ScPartsUsed.cshtml
@model IEnumerable<BCES.Models.Parts.StockCodedPartsViewModel>
@{
    var partsList = Model ?? Enumerable.Empty<BCES.Models.Parts.StockCodedPartsViewModel>();
}

@{
    ViewData["Title"] = "Stock Coded Parts Details";
    var scGridName = $"ScPartsMaterialDetailsRebuiltPartsGrid";
    bool isArchived = ViewBag.GridType == "ArchivedVehicleGrid";
    bool isAdmin = ViewBag.RoleId == 1;
    ViewBag.scGridName = scGridName;
    string gridName = $"ScPartsMaterialDetailsRebuiltPartsGrid_{ViewBag.PartNum}";
}
<script>
    // Store grid name for JavaScript access
    var scInEstimateGridName = '@gridName';
</script>
<input type="hidden" id="scGridNameField" value="@scGridName" />
<h6>Stock Coded Parts Used</h6>

@(Html.Kendo().Grid<BCES.Models.Parts.StockCodedPartsViewModel>()
     .Name(gridName)
     .HtmlAttributes(new { data_grid_type = ViewBag.GridType?.ToString() ?? "RbGrid" })
      .Events(events => events
                    .DataBound("onGridDataBound")
                    .Save("onGridCellSave")
                    .CellClose("onGridCellClose")
                )
    .Columns(columns =>
    {
        columns.Bound(c => c.MMSStockCode)
                        .Title("Stock Code")
                        .HtmlAttributes(new { @class = "stock-code-cell", data_field = "MMSStockCode" })
                        .IncludeInMenu(false)
                        .HeaderHtmlAttributes(new { @class = "required-header" })
                        .HtmlAttributes(new { @class = "required-cell", required = "required" })
                        .EditorTemplateName("ScComboBox")
                        .Width(180);

        columns.Bound(c => c.PartType)
            .Title("Part Type")
            .Width(150)
            .EditorTemplateName("ComboBoxEditor")
            .EditorViewData(new Dictionary<string, object> {
                    { "LockMap", "RbGrid:always;MakevsBuy:notNew;VehicleGrid:always" }
            });

        columns.Bound(c => c.OrigSupplierNum)
            .Title("Supplier Num")
            .Width(150)
            .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)))
            .EditorTemplateName("ComboBoxEditor")
            .EditorViewData(new Dictionary<string, object> {
                    { "LockMap", "RbGrid:always;MakevsBuy:notNew;VehicleGrid:always" }
            });

        columns.Bound(c => c.OrigSupplierName)
            .Title("Supplier Name")
            .Width(150)
            .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)))
            .EditorTemplateName("ComboBoxEditor")
            .EditorViewData(new Dictionary<string, object> {
                    { "LockMap", "RbGrid:always;MakevsBuy:notNew;VehicleGrid:always" }
            });

        columns.Bound(c => c.DetailedDesc)
            .Title("Part Description")
            .Width(150)
            .EditorTemplateName("ComboBoxEditor")
            .EditorViewData(new Dictionary<string, object> {
                    { "LockMap", "RbGrid:always;MakevsBuy:notNew;VehicleGrid:always" }
            });

        columns.Bound(c => c.UnitCost)
            .Title("Part Unit Cost")
            .Width(90)
            .Format("{0:C2}")
            .EditorTemplateName("ComboBoxEditor")
            .EditorViewData(new Dictionary<string, object> {
                    { "LockMap", "RbGrid:always;MakevsBuy:notNew;VehicleGrid:always" }
            })
            .HtmlAttributes(new { data_br = "MustBeNumeric,NoSpecialCharacters,MustBePositive" });

        columns.Bound(c => c.CoreCost)
            .Title("Core Cost")
            .Width(90)
            .Format("{0:C2}")
            .EditorViewData(new Dictionary<string, object> {
                    { "LockMap", "RbGrid:always;MakevsBuy:notNew;VehicleGrid:notNew" }
            })
            .HtmlAttributes(new { data_br = "MustBeNumeric,NoSpecialCharacters,MustBePositive" });

        columns.Bound(c => c.CC)
            .Title("Cost Centre")
            .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)))
            .EditorTemplateName("ComboBoxEditor")
            .HeaderHtmlAttributes(new { @class = "required-header" })
            .HtmlAttributes(new { @class = "required-cell", required = "required" })
            .Width(120);

        @* columns.Bound(c => c.Qty)
            .Title("Qty")
            .Width(70)
            .HeaderHtmlAttributes(new { @class = "required-header" })
            .HtmlAttributes(new { @class = "required-cell", required = "required" })
            .HtmlAttributes(new { data_br = "MustBeNumeric,NoSpecialCharacters,MustBePositive" });

        columns.Bound(c => c.Percentage)
            .Title("%")
            .Width(70)
            .HeaderHtmlAttributes(new { @class = "required-header" })
            .HtmlAttributes(new { @class = "required-cell", required = "required" })
            .HtmlAttributes(new { data_br = "MustBeNumeric,NoSpecialCharacters,MustBePositive, MustBePercentage" });
 *@
        columns.Bound(c => c.TotalCost)
            .Title("Total Cost")
            .Width(90)
            .Format("{0:C2}")
            
            .EditorViewData(new Dictionary<string, object> {
                    { "LockMap", "RbGrid:always;MakevsBuy:notNew;VehicleGrid:always" }
            });

        columns.Bound(c => c.LinkCode).Hidden(true);

        columns.Bound(c => c.LastModifiedBy)
            .Title("Modified By")
            .ClientTemplate("#= LastModifiedBy && LastModifiedBy !== 0 ? LastModifiedBy : '(System Generated)' #")
            .EditorViewData(new Dictionary<string, object> {
                    { "LockMap", "RbGrid:always;MakevsBuy:notNew;VehicleGrid:always" }
            })
            .Width(160);

        columns.Bound(c => c.LastModifiedDate)
            .Title("Modified Date")
            .Width(160)
            .ClientTemplate("#=  LastModifiedDate !== 0 ? formatToEST(LastModifiedDate) : '(System Generated)' #")
            .EditorViewData(new Dictionary<string, object> {
                    { "LockMap", "RbGrid:always;MakevsBuy:notNew;VehicleGrid:always" }
            });

        columns.Command(command =>
        {
            if (!isArchived && isAdmin)
            {
                command.Edit()
                    .Text(" ")
                    .UpdateText("Save")  // Text for save button
                    .CancelText(" ")    // Hide cancel text
                    .IconClass("k-icon k-i-edit")
                    .HtmlAttributes(new { title = "Edit", @class = "k-grid-edit" });

                command.Custom("SaveChanges")
                    .Text(" ")
                    .IconClass("k-icon k-i-save")
                    .Click("saveCurrentRow")
                    .HtmlAttributes(new
                    {
                        title = "Save Changes",
                        @class = "k-grid-save-changes",
                        style = "display:none;"
                    });

                command.Custom("Delete")
                    .Click("showDeleteConfirmation")
                    .Text(" ")
                    .IconClass("k-icon k-i-delete")
                    .HtmlAttributes(new
                    {
                        @class = "text-danger",
                        title = "Delete",
                        data_grid = $"ScPartsMaterialDetailsRebuiltPartsGrid",
                        data_url = Url.Action("DeleteScPartsUsedInEstimates", "ScPartsUsedInEstimates"),
                        data_id_field = "id",
                        data_grid_type = "SCPartGrid"
                    });
            }
        }).Width(150);
    })
    .ToolBar(toolbar =>
    {
        if (!isArchived && isAdmin)
        {
            toolbar.Create();
            toolbar.Save();
        }
    })
    
    .Editable(editable => editable
        .Mode(GridEditMode.PopUp)
        @* .TemplateName("StockCodedPartsViewModel") *@
    )
    .Pageable(p => p
        .PageSizes(new int[] { 1, 10, 20, 50 })
        .Position(GridPagerPosition.Bottom)
    )
    .Events(e => e.Edit("onScPartsEdit"))
    .Sortable()
    .Resizable(r => r.Columns(true))
    .DataSource(dataSource => dataSource
        .Ajax()
        .Batch(false)
        .ServerOperation(false)
        .Model(model =>
        {
            model.Id(c => c.MMSStockCode);
            model.Field(c => c.MMSStockCode);
            model.Field(c => c.UnitCost);
            model.Field(c => c.LastModifiedBy).Editable(false);
            model.Field(c => c.LastModifiedDate).Editable(false);
        })
        .Events(events =>
        {
            events.RequestEnd("onScRequestEnd");
            events.Error("onDataSourceError");
           
        })
        .Read(read => read.Url(Url.Action("GetScPartsUsedInEstimates", "ScPartsUsedInEstimates") + "?id=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Get).Data("getVehicleId"))
        .Create(create => create.Url(Url.Action("CreateScPartsUsedInEstimates", "ScPartsUsedInEstimates") + "?id=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Post))
        .Update(update => update.Url(Url.Action("UpdateScPartsUsedInEstimates", "ScPartsUsedInEstimates") + "?id=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Post))
        .Destroy(destroy => destroy.Url(Url.Action("DeleteScPartsUsedInEstimates", "ScPartsUsedInEstimates") + "?id=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Post))
    )
)

@(Html.Kendo().Dialog()
    .Name("partDetailsDialog")
    .Title("Part Details")
    .Width(400)
    .Modal(true)
    .Visible(false)
    .Actions(actions =>
    {
        actions.Add().Text("Close").Primary(true);
    })
)
<div id="notification"></div>
<script>
    // New JavaScript functions for row editing
    function saveCurrentRow(e) {
        e.preventDefault();
        var grid = $("#@gridName").data("kendoGrid");
        var row = $(e.target).closest("tr");
        grid.saveRow(row);
    }

    function onGridDataBound(e) {
        var grid = e.sender;
        grid.tbody.find("tr").each(function() {
            var row = $(this);
            var isInEditMode = row.hasClass("k-grid-edit-row");
            var editButton = row.find(".k-grid-edit");
            var saveButton = row.find(".k-grid-save-changes");

            if (isInEditMode) {
                editButton.hide();
                saveButton.show();
            } else {
                editButton.show();
                saveButton.hide();
            }
        });
    }

    function onGridCellSave(e) {
        // Trigger refresh of row after save
        setTimeout(function() {
            var grid = $("#@gridName").data("kendoGrid");
            var row = e.container.closest("tr");
            grid.cancelRow(row); // Exit edit mode
        }, 100);
    }

    function onScRequestEnd(e) {
        if (e.type === "update") {
            // Refresh the grid after successful update
            var grid = $("#@gridName").data("kendoGrid");
            grid.dataSource.read();
        }
    }

    // Existing functions
    function onGridCellClose(e) {
        // Existing cell close logic
    }

    function showDeleteConfirmation(e) {
        // Existing delete confirmation logic
    }

    function formatToEST(date) {
        // Existing date formatting logic
    }

    function getVehicleId() {
        return { vehicleId: $("#VehicleId").val() };
    }
</script>
VehiclesController.cs :
public IActionResult ScDetailsPartial(string id, string gridType)
{..return PartialView("_ScPartsUsed", model);}


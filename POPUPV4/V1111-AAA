The fixes
1️⃣ Make _ScPartsUsed.cshtml null-safe
At the top:

csharp
Copy
Edit
@model IEnumerable<BCES.Models.Parts.StockCodedPartsViewModel>
@{
    var partsList = Model ?? Enumerable.Empty<BCES.Models.Parts.StockCodedPartsViewModel>();
}
Then, if you reference Model anywhere, replace with partsList.

2️⃣ Don’t pass data on initial load
In _VehPopUp.cshtml, when you render _ScPartsUsed:

csharp
Copy
Edit
@Html.Partial("_ScPartsUsed", null)
That tells the partial “don’t expect a model yet — the grid will load it via AJAX”.

3️⃣ Ensure grid loads via AJAX
In _ScPartsUsed.cshtml:

csharp
Copy
Edit
@(Html.Kendo().Grid<BCES.Models.Parts.StockCodedPartsViewModel>()
    .Name("ScPartsGrid")
    .Columns(columns => {
        columns.Bound(p => p.MMSStockCode);
        columns.Bound(p => p.Description);
        columns.Command(c => { c.Edit(); c.Destroy(); }).Width(200);
    })
    .ToolBar(toolbar => toolbar.Create())
    .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("ScPartsPopUp"))
    .DataSource(dataSource => dataSource
        .Ajax()
        .Read(read => read.Action("ReadStockCodedParts", "Parts")
            .Data("getVehicleId")) // pass vehicle ID dynamically
        .Update(update => update.Action("UpdateStockCodedParts", "Parts"))
        .Create(create => create.Action("CreateStockCodedParts", "Parts"))
        .Destroy(destroy => destroy.Action("DeleteStockCodedParts", "Parts"))
        .Model(model => {
            model.Id(p => p.MMSStockCode);
        })
    )
)
And JS to pass the vehicle ID:

javascript
Copy
Edit
function getVehicleId() {
    return { vehicleId: $("#VehicleId").val() };
}

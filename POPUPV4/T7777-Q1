You are UI/UX expert. Pls do the following changes
Reduce gap between top - Vehicle estimate and below tabs by 60%
Reduce Menu hight by 50%
Change tab font color to black (adjust  hover and selection accourdingly)
Currently User has to scroll verically. adJUST LABLES, controls, font and white spaces, so horizontal and verical scroll is not required.
Have consistant height for all th controls
Keep exiting finctionaity, column names and other html tags
When POP up is rendered background should black, nothig shold be seen in the background
UI/UX styles for _VehPopUup and TotalCost.cshtml must match. Same look and feel and styles.
Suggest and implement any other ui/ux changes
JS changes:
1. When user clicks on Add new Vehicle, _VehPOPUp is displayed. Show the Vehile tab first. 
All the other tabs should not be clickable (displayed angreyed out). When user clicks on Save, after sucessful save activate all the other tabs. Perhaps  changes in openEstimatePopup function?
2. Implement stub JS function to add a new record. We will implement it later

Logic is like 
Index.cshtml has kendoo  grid (uses popup). On edit and Add new vehicle, _VehPopUp is displayed. _VehopUp,cshtml also uses Telerik grid
Pls give me full file with new styles, including existing functionality
_VehPopup.cshtml :
function saveScPartPopup() {
    console.warn('Inside saveScPartPopup');
    var grid = $("#" + scInEstimateGridName).data("kendoGrid");
    var form = $("#scPartsForm");

    if (!form.valid()) {
        alert("Please fill all required fields.");
        return;
    }

    // Serialize form into object
    var formArray = form.serializeArray();
    var formDataObject = {};
    $.each(formArray, function (_, field) {
        if (!field.name.endsWith("_input")) {
            formDataObject[field.name] = field.value;
        }
    });

    // Convert numeric fields
    ["UnitCost", "CoreCost", "Qty", "Percentage", "TotalCost"].forEach(function (key) {
        if (formDataObject[key] !== undefined && formDataObject[key] !== "") {
            formDataObject[key] = parseFloat(formDataObject[key]);
        }
    });

    // Convert date
    if (formDataObject.LastModifiedDate) {
        formDataObject.LastModifiedDate = new Date(formDataObject.LastModifiedDate).toISOString();
    }

    console.warn('Cleaned formDataObject:', formDataObject);

    // ✅ Detect Add vs Edit based on MMSStockCode PK
    var existingItem = grid.dataSource.get(formDataObject.MMSStockCode);
    var isEdit = !!existingItem;

    // ✅ Prevent duplicate MMSStockCode on Add
    if (!isEdit && existingItem) {
        kendo.alert("Stock code " + formDataObject.MMSStockCode + " already exists in the list.");
        return;
    }

    // ✅ For Edit, update model with form values
    if (isEdit) {
        for (var key in formDataObject) {
            if (formDataObject.hasOwnProperty(key)) {
                existingItem.set(key, formDataObject[key]);
            }
        }
    }

    $.ajax({
        url: isEdit
            ? '@Url.Action("UpdateScPartsUsedInEstimates", "ScPartsUsedInEstimates")?id=' + '@ViewBag.PartNum' + "&gridType=" + '@ViewBag.GridType'
            : '@Url.Action("CreateScPartsUsedInEstimates", "ScPartsUsedInEstimates")?id=' + '@ViewBag.PartNum' + "&gridType=" + '@ViewBag.GridType',
        type: "POST",
        contentType: "application/json; charset=UTF-8",
        data: JSON.stringify(formDataObject),
        success: function () {
            var partNo = formDataObject.MMSStockCode;
            var message = isEdit
                ? `${partNo} updated successfully`
                : `${partNo} added successfully`;

            if ($("#notification").length && $("#notification").data("kendoNotification")) {
                $("#notification").data("kendoNotification").show(message, "success");
            } else {
                alert(message);
            }

            // ✅ Reset and close popup in ALL cases
            popupHasChanges = false;
            originalData = null;

            var popupWindow = $("#scPartsForm").closest(".k-window-content").data("kendoWindow");
            if (popupWindow) {
                grid.dataSource.read();   // refresh grid from server
                popupWindow.close();      // ✅ always close popup
            }
        },
        error: function (xhr) {
            alert("Save failed: " + xhr.status + " " + xhr.responseText);
        }
    });
}
TotalCost.cshtml
@{
    ViewData["Title"] = "Total Cost Summary";
    string gridName = $"LabourDetailsGrid_{ViewBag.PartNum}";
}

<script>
    // Store parameters from ViewBag
    var partNum = '@ViewBag.PartNum';
        var gridType = '@ViewBag.GridType';

        // Build URL with proper parameter encoding
        var totalCostDataUrl = '@Url.Action("GetTotalCostInEstimates", "TotalCost")' +
                               '?id=' + encodeURIComponent(partNum) +
                               '&gridType=' + encodeURIComponent(gridType);
</script>

<h6>Total Cost Summary</h6>

<div class="total-cost-container">
    <!-- Loading indicator -->
    <div id="loadingIndicator" class="loading-section">
        <div class="loading-spinner">
            <div class="spinner"></div>
        </div>
        <p>Loading cost data...</p>
    </div>

    <!-- Cost summary content -->
    <div id="costSummaryContent" style="display: none;">
        <!-- Material Costs Section -->
        <div class="section-title">Material Costs</div>
        <div class="form-row">
            <div class="form-group">
                <label class="form-label">Materials Cost (Without Tax)</label>
                <input id="materialCostWithoutTax" class="read-only" readonly />
            </div>
            <div class="form-group">
                <label class="form-label">Tax</label>
                <input id="materialTax" class="read-only" readonly />
            </div>
            <div class="form-group">
                <label class="form-label">Material Cost (With Tax)</label>
                <input id="materialCostWithTax" class="read-only" readonly />
            </div>
        </div>

        <!-- Labour Costs Section -->
        <div class="section-title">Labour Costs</div>
        <div class="form-row">
            <div class="form-group">
                <label class="form-label">Fringe</label>
                <input id="labourFringe" class="read-only" readonly />
            </div>
            <div class="form-group">
                <label class="form-label">Blended Fringe & Benefit Percent</label>
                <input id="blendedFringePercent" class="read-only" readonly />
            </div>
            <div class="form-group">
                <label class="form-label">Blended Fringe & Benefit Cost</label>
                <input id="blendedFringeCost" class="read-only" readonly />
            </div>
            <div class="form-group">
                <label class="form-label">Overhead</label>
                <input id="labourOverhead" class="read-only" readonly />
            </div>
        </div>

        <!-- Blank row for spacing -->
        <div class="form-row">
            <div class="form-group" style="height: 28px;"></div>
        </div>

        <!-- Material and Labour Totals Section -->
        <div class="section-title">Totals (Material and Labour)</div>
        <div class="form-row">
            <div class="form-group">
                <label class="form-label">Total Material Cost (With Tax)</label>
                <input id="totalMaterialCost" class="read-only" readonly />
            </div>
            <div class="form-group">
                <label class="form-label">Total Labour Costs</label>
                <input id="totalLabourCost" class="read-only" readonly />
            </div>
        </div>

        <!-- Overall Totals Section -->
        <div class="section-title">Total Costs</div>
        <div class="form-row">
            <div class="form-group">
                <label class="form-label">Total Without Tax</label>
                <input id="totalWithoutTax" class="read-only" readonly />
            </div>
            <div class="form-group">
                <label class="form-label">Total With Tax</label>
                <input id="totalWithTax" class="read-only" readonly />
            </div>
        </div>
    </div>

    <!-- No data message -->
    <div id="noDataMessage" class="no-data-message" style="display: none;">
        <div class="warning-icon">⚠️</div>
        <p>No cost data available for this estimate</p>
        <button id="retryButton" class="k-button k-primary">Retry Loading</button>
    </div>
</div>

<style>
    /* Match _ScPartsUsed.cshtml styling */
    .total-cost-container {
        background: white;
        padding: 16px;
        border-radius: 4px;
        box-shadow: 0 2px 6px rgba(0,0,0,0.08);
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        border: 1px solid #e0e0e0;
        max-width: 1200px;
        margin: 0 auto;
    }

    h6 {
        font-size: 15px;
        color: #2c3e50;
        margin-bottom: 12px;
        padding-bottom: 8px;
        border-bottom: 1px solid #3498db;
        font-weight: 600;
        padding-left: 6px;
    }

    .section-title {
        font-size: 13px;
        color: #2c3e50;
        margin: 16px 0 8px;
        padding-bottom: 6px;
        border-bottom: 1px solid #3498db;
        display: flex;
        align-items: center;
        gap: 5px;
        font-weight: 600;
        padding-left: 4px;
    }

    .form-row {
        display: flex;
        gap: 12px;
        margin-bottom: 12px;
        align-items: flex-start;
    }

    .form-group {
        display: flex;
        flex-direction: column;
        flex: 1;
        min-width: 0; /* Allow shrinking */
    }

    .form-label {
        font-size: 12px;
        color: #2c3e50;
        font-weight: 600;
        margin-bottom: 5px;
        padding-left: 2px;
    }

    .read-only {
        border: 1px solid #d1d5db;
        border-radius: 4px;
        padding: 6px 10px;
        height: 34px;
        font-size: 13px;
        background: #f8fafc;
        color: #4b5563;
        cursor: not-allowed;
        width: 100%;
        box-sizing: border-box;
        font-weight: 500;
    }

    /* Loading styles */
    .loading-section {
        text-align: center;
        padding: 30px 0;
    }

    .loading-spinner {
        display: inline-block;
        margin-bottom: 15px;
    }

    .spinner {
        width: 40px;
        height: 40px;
        border: 4px solid rgba(59, 89, 152, 0.2);
        border-top: 4px solid #3b5998;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin: 0 auto;
    }

    .loading-section p {
        color: #3f51b5;
        font-size: 14px;
        margin-top: 10px;
    }

    /* No data message */
    .no-data-message {
        text-align: center;
        padding: 30px 0;
        color: #e74c3c;
    }

    .warning-icon {
        font-size: 40px;
        margin-bottom: 15px;
    }

    .no-data-message p {
        font-size: 14px;
        margin-bottom: 20px;
    }

    /* Button styles */
    .k-button {
        padding: 6px 12px;
        font-size: 13px;
        height: 34px;
        border-radius: 4px;
        font-weight: 600;
        cursor: pointer;
        border: 1px solid transparent;
        transition: all 0.2s;
    }

        .k-button.k-primary {
            background: #3f51b5;
            color: white;
            border-color: #3f51b5;
        }

            .k-button.k-primary:hover {
                background: #303f9f;
                border-color: #283593;
            }

    /* Animation */
    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }
</style>

<script>
    $(document).ready(function() {
        // Fetch data on page load
        fetchTotalCostData();

        // Retry button handler
        $("#retryButton").click(function() {
            $("#noDataMessage").hide();
            $("#loadingIndicator").show();
            $("#costSummaryContent").hide();
            fetchTotalCostData();
        });
    });

    function fetchTotalCostData() {
        console.log("Fetching data from:", totalCostDataUrl);

        $.ajax({
            url: totalCostDataUrl,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                console.log("Full response received:", response);

                // Check if response has data array with at least one item
                if (response && response.Data && response.Data.length > 0) {
                    var costData = response.Data[0];
                    console.log("Cost data to populate:", costData);

                    populateCostSummary(costData);
                    $("#loadingIndicator").hide();
                    $("#costSummaryContent").show();
                    $("#noDataMessage").hide();
                } else {
                    console.log("No data found in response");
                    showNoDataMessage();
                }
            },
            error: function(xhr, status, error) {
                console.error("Error fetching cost data:", {
                    status: status,
                    error: error,
                    responseText: xhr.responseText
                });
                showNoDataMessage();
            }
        });
    }

    function populateCostSummary(costData) {
        // Material Costs
        setCurrencyValue("#materialCostWithoutTax", costData.MaterialTotalCostNoTax);
        setCurrencyValue("#materialTax", costData.MaterialTotalTaxAmount);
        setCurrencyValue("#materialCostWithTax", costData.MaterialTotalWithTax);

        // Labour Costs
        setCurrencyValue("#labourFringe", costData.LabourFringe);
        setPercentValue("#blendedFringePercent", costData.BlendedFringeBenefitPercent);
        setCurrencyValue("#blendedFringeCost", costData.BlendedFringeBenefitCost);
        setCurrencyValue("#labourOverhead", costData.LabourOverhead);

        // Totals
        setCurrencyValue("#totalMaterialCost", costData.MaterialTotalWithTax);
        setCurrencyValue("#totalLabourCost", costData.FinalLabourCost);
        setCurrencyValue("#totalWithoutTax", costData.TotalWithoutTax);
        setCurrencyValue("#totalWithTax", costData.TotalWithTax);
    }

    function setCurrencyValue(selector, value) {
        if (value === null || value === undefined) {
            $(selector).val("N/A");
            return;
        }

        // Format as currency with commas and two decimal places
        var formatted = '$' + parseFloat(value).toLocaleString(undefined, {
            minimumFractionDigits: 2,
            maximumFractionDigits: 2
        });
        $(selector).val(formatted);
    }

    function setPercentValue(selector, value) {
        if (value === null || value === undefined) {
            $(selector).val("N/A");
            return;
        }

        var formatted = parseFloat(value).toFixed(2) + '%';
        $(selector).val(formatted);
    }

    function showNoDataMessage() {
        $("#loadingIndicator").hide();
        $("#costSummaryContent").hide();
        $("#noDataMessage").show();
    }
    
   
</script>
Index.cshtml :
@(Html.Kendo().TabStrip()
    .Name("mainTabStrip")
    .Items(ts =>
    {
        ts.Add().Text("Vehicles").Selected(true)
            .Content(@<text>
    @(Html.Kendo().Grid<VehicleViewModel>()
    .Name("VehicleGrid")
    .Columns(c =>
    {
    c.Bound(v => v.VehicleListId).Title("Estimate #")
    .ClientTemplate("<a class='estimate-link' onclick='window.openEstimatePopup(#=VehicleListId#)'>#=VehicleListId#</a>").Width(120);
    c.Bound(v => v.VehSeriesCode).Title("Vehicle Series").HeaderHtmlAttributes(new { @class = "required-header" }).EditorTemplateName("ComboBoxEditor").Width(150);
    c.Bound(v => v.NumOfVehicles).Title("Qty").HeaderHtmlAttributes(new { @class = "required-header" }).Width(80);
    c.Bound(v => v.ProjDesc).Title("Description").HeaderHtmlAttributes(new { @class = "required-header" }).Width(250);
    c.Command(cmd =>
    {
    cmd.Custom("Copy").IconClass("k-icon k-i-copy").Click("window.onCopyEstimate");
    cmd.Custom("Archive").IconClass("k-icon k-i-folder").Click("window.onArchiveClick");
    cmd.Custom("Delete").IconClass("k-icon k-i-delete").Click("window.showDeleteConfirmation");
    }).Width(180);
    })
    .ToolBar(tb => tb.ClientTemplate("<button class='k-button k-button-icontext' onclick='window.openEstimatePopup(0)'><span class='k-icon k-i-plus'></span>Add New Record</button>"))
    .Pageable(p => p.PageSizes(new[] { 10, 20, 50 }))
    .Sortable()
    .Filterable()
    .Scrollable()
    .HtmlAttributes(new { style = "height:550px;" })
    .DataSource(ds => ds.Ajax()
    .PageSize(10)
    .Model(m => m.Id(v => v.VehicleListId))
    .Read(r => r.Action("GetVehiclesView", "Vehicles").Type(HttpVerbs.Get))
    .Create(c => c.Action("AddVehiclesView", "Vehicles").Type(HttpVerbs.Post))
    .Update(u => u.Action("UpdateVehiclesView", "Vehicles").Type(HttpVerbs.Post))
    .Destroy(d => d.Action("DeleteVehicle", "Vehicles").Type(HttpVerbs.Post))
    )
    
    )
</text>);
    })

)

<!-- Popup tabs for vehicle details -->
<div id="estimatePopup" style="display:none;">
    <div id="estimateTabs">
        <ul>
            <li class="k-state-active">Vehicle</li>
            <li>Parts Details</li>
            <li>Labour Details</li>
            <li>Stock Coded Parts</li>
            <li>Non Stock Coded Parts</li>
            <li>Rebuilt Parts</li>
            <li>Final Estimate</li>
        </ul>

        <div id="vehicleTabContent"></div>
        <div id="partsTabContent"></div>
        <div id="labourTabContent"></div>
        <div id="stockCodedPartsTabContent"></div>
        <div id="nonStockCodedPartsTabContent"></div>
        <div id="rebuiltPartsTabContent"></div>
        <div id="finalEstimateTabContent"></div>
    </div>
</div>
...
    // ====== GLOBAL STATE DECLARATIONS ======
window.pendingChanges = false;
window.currentVehicleId = 0;
window.tabContentLoaded = [false, false, false, false, false, false, false, false]; // For 8 tabs
window.currentlyLoadingTab = null;

// ====== CORE FUNCTION DEFINITIONS ======
    // ── Load the form into the first tab
    window.loadVehicleForm = function (vehicleId) {
        $.get('@Url.Action("GetVehicleById", "Vehicles")', { id: vehicleId }, function (html) {
            $("#vehicleTabContent").html(html);
            window.tabContentLoaded[0] = true;
            window.wireVehicleForm(); // rebind save/cancel/edit/etc

            var tabStrip = $("#estimateTabs").data("kendoTabStrip");

            // If it's an existing record, enable other tabs
            if (vehicleId !== 0 && tabStrip) {
                for (var i = 1; i <= 7; i++) {
                    tabStrip.enable(tabStrip.tabGroup.children().eq(i), true);
                }
            } else if (vehicleId === 0 && tabStrip) {
                // New record: disable all other tabs
                for (var i = 1; i <= 7; i++) {
                    tabStrip.enable(tabStrip.tabGroup.children().eq(i), false);
                }
            }
        });
    };

// ── Wire up form submit and cancel actions
window.wireVehicleForm = function() {
    $("#btnCancelVehicle").off("click").on("click", function(){
        if (!pendingChanges || confirm("Discard changes?")) {
            $("#estimatePopup").data("kendoWindow").close();
        }
    });
    
    $("#btnSave").off("click").on("click", function(e){
        e.preventDefault();
        $("#vehicleForm").submit();
    });
    
    $("#vehicleForm").off("submit").on("submit", function(e) {
        e.preventDefault();
        if (!pendingChanges) return;
        
        function getComboValue(selector) {
            const combo = $(selector).data("kendoComboBox");
            return combo ? combo.value() : $(selector).val();
        }

        var vm = {
            VehicleListId: $("#VehicleListId").val(),
            VehSeriesCode: getComboValue("#VehSeriesCode"),
            NumOfVehicles: $("#NumOfVehicles").val(),
            ProjDesc: getComboValue("#ProjDesc"),
            Make: getComboValue("#Make"),
            VehModel: getComboValue("#VehModel"),
            Year: $("#Year").val(),
            Engine: getComboValue("#Engine"),
            Transmission: getComboValue("#Transmission"),
            Differential: getComboValue("#Differential"),
            Sopnumber: $("#Sopnumber").val()
        };
    
        var url = window.currentVehicleId === 0
            ? '@Url.Action("AddVehiclesView","Vehicles")'
            : '@Url.Action("UpdateVehiclesView","Vehicles")';
            
        $.ajax({
            url: url,
            type: 'POST',
            contentType: "application/json",
            data: JSON.stringify(vm),
            success: function(response) {
                if (response && response.VehicleListId) {
                    window.currentVehicleId = response.VehicleListId;
                    $("#VehicleGrid").data("kendoGrid").dataSource.read();
                    window.loadVehicleForm(response.VehicleListId);

                    var tabStrip = $("#estimateTabs").data("kendoTabStrip");
                    for (var i = 1; i <= 7; i++) {
                        tabStrip.enable(tabStrip.tabGroup.children().eq(i), true);
                    }

                    var win = $("#estimatePopup").data("kendoWindow");
                    if (win) {
                        win.title("Vehicle Estimate #" + response.VehicleListId);
                    }

                    kendo.alert("Saved successfully! Estimate #: " + response.VehicleListId);
                } else {
                    kendo.alert("Save succeeded but no Estimate ID was returned.");
                }

                pendingChanges = false;
            },
            error: function() {
                kendo.alert("Error saving data.");
            }
        });
    });
    
    $("#vehicleForm input, #vehicleForm select").off("change input").on("input change", function(){
        pendingChanges = true;
    });
}

    // ── Open vehicle popup and load form partial
    window.openEstimatePopup = function (vehicleId) {
        var win = $("#estimatePopup").data("kendoWindow");
        currentVehicleId = vehicleId;

        win.title(vehicleId === 0 ? "Add New Estimate" : "Vehicle Estimate #" + vehicleId);
        win.center().open();

        // Load vehicle tab first
        loadTabContent(
            "vehicleTabContent",
            '@Url.Action("GetVehicleById", "Vehicles")',
            { id: vehicleId },
            function () {
                if (vehicleId !== 0) {
                    enableAllTabs();
                }
            }
        );

        
    };


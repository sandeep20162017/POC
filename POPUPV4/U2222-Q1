model is populated correctly. But the below view is not rendered correcly. 
Getting 
PartType, SupplerNumber, Suppliername, Part Description  are not rendered
surprisngly, Unit cost is rendered. Pls help fix along with below changes.
Also make  below changes
For Add New Stock Coded Part (New)
Following columns should be readonly and should be populated from model
Part Type,Supplier Num,Supplier Name,Part Description, Total Cost,Modified By,Modified Date
For Edit
Following columns should be readonly and should be populated from model
Part Type,Supplier Num,Supplier Name,Part Description, Total Cost,Modified By,Modified Date
For Add (New) and edit - Following shold be editable
Part Unit Cost,Core Cost,Cost Centre,Qty,%
Logs (Model) :
{
    "MmsStockCode": "070008",
    "CorePartNumber": null,
    "PartType": "BULB",
    "JobNumber": null,
    "DetailedDesc": "SYLVANIA 20886 COMPACT FLOURESCENT4 PIN TRIPLE TUBE 4100K, 32 - WATT",
    "DateEntered": null,
    "ItemRefNumber": null,
    "OverheadType": null,
    "CoreCharge": null,
    "PartCost": null,
    "LastModifiedDate": null,
    "LastModifiedBy": null,
    "AddedBy": null,
    "UnitCost": 4.78000,
    "OemPartCost": null,
    "MmsSyncDate": "2021-03-29T03:13:02",
    "OrigSupplierNum": "DULUX T/E IN 32W",
    "OrigSupplierName": "SYLVANIA"
}
StockCodedPartsViewModel.cshtml
@model BCES.Models.Parts.StockCodedPartsViewModel
@{
    var mdl = Model ?? new BCES.Models.Parts.StockCodedPartsViewModel();
}
<div id="notification"></div>
<div class="popup-container">
    <div class="popup-header">
        <div class="popup-title">@(mdl.MMSStockCode == null ? "Add New Stock Coded Part" : $"Edit Part - {mdl.MMSStockCode}")</div>
        <div class="tab-actions">
            <button id="btnSavePart" class="k-button k-primary" type="button" onclick="saveScPartPopup()">
                <span class="k-icon k-i-save"></span> Save
            </button>
            <button id="btnCancelPart" class="k-button" type="button" onclick="cancelScPartPopup()">
                <span class="k-icon k-i-cancel"></span> Cancel
            </button>
        </div>
    </div>

    <div class="form-container">
        <form id="scPartsForm">
            @Html.HiddenFor(m => m.LinkCode)

            <!-- Row 1 -->
            <div class="form-row">
                <div class="form-group">
                    @Html.LabelFor(m => m.MMSStockCode, "Stock Code", new { @class = "form-label required-label" })
                    @Html.EditorFor(m => m.MMSStockCode, "ScComboBox", new
                        {
                            htmlAttributes = new { required = "required", style = "width:100%; height:28px;" }
                        })
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.PartType, "Part Type", new { @class = "form-label" })
                    @Html.EditorFor(m => m.PartType, "ComboBoxEditor", new
                        {
                            htmlAttributes = new { style = "width:100%; height:28px;" }
                        })
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.CC, "Cost Centre", new { @class = "form-label required-label" })
                    @Html.EditorFor(m => m.CC, "ComboBoxEditor", new
                        {
                            htmlAttributes = new { required = "required", style = "width:100%; height:28px;" }
                        })
                </div>
            </div>

            <!-- Row 2 -->
            <div class="form-row">
                <div class="form-group">
                    @Html.LabelFor(m => m.OrigSupplierNum, "Supplier Num", new { @class = "form-label" })
                    @Html.EditorFor(m => m.OrigSupplierNum, "ComboBoxEditor", new
                        {
                            htmlAttributes = new { style = "width:100%; height:28px;" }
                        })
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.OrigSupplierName, "Supplier Name", new { @class = "form-label" })
                    @Html.EditorFor(m => m.OrigSupplierName, "ComboBoxEditor", new
                        {
                            htmlAttributes = new { style = "width:100%; height:28px;" }
                        })
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.DetailedDesc, "Part Description", new { @class = "form-label" })
                    @Html.EditorFor(m => m.DetailedDesc, "ComboBoxEditor", new
                        {
                            htmlAttributes = new { style = "width:100%; height:28px;" }
                        })
                </div>
            </div>

            <!-- Row 3 -->
            <div class="form-row">
                <div class="form-group">
                    @Html.LabelFor(m => m.UnitCost, "Unit Cost", new { @class = "form-label" })
                    @(Html.Kendo().NumericTextBoxFor(m => m.UnitCost)
                        .Format("c2")
                        .HtmlAttributes(new { style = "width:100%; height:28px;" }))
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.CoreCost, "Core Cost", new { @class = "form-label" })
                    @(Html.Kendo().NumericTextBoxFor(m => m.CoreCost)
                        .Format("c2")
                        .HtmlAttributes(new { style = "width:100%; height:28px;" }))
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.TotalCost, "Total Cost", new { @class = "form-label" })
                    @(Html.Kendo().NumericTextBoxFor(m => m.TotalCost)
                        .Format("c2")
                        .HtmlAttributes(new { style = "width:100%; height:28px;", @readonly = "readonly" }))
                </div>
            </div>

            <!-- Row 4 -->
            <div class="form-row">
                <div class="form-group">
                    @Html.LabelFor(m => m.Qty, "Quantity", new { @class = "form-label required-label" })
                    @(Html.Kendo().NumericTextBoxFor(m => m.Qty)
                        .Format("n0")
                        .HtmlAttributes(new { style = "width:100%; height:28px;", required = "required" }))
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.Percentage, "%", new { @class = "form-label required-label" })
                    @(Html.Kendo().NumericTextBoxFor(m => m.Percentage)
                        .Format("n0")
                        .Min(0).Max(100)
                        .HtmlAttributes(new { style = "width:100%; height:28px;", required = "required" }))
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.LastModifiedBy, "Modified By", new { @class = "form-label" })
                    @(Html.Kendo().TextBoxFor(m => m.LastModifiedBy)
                        .HtmlAttributes(new { @readonly = "readonly", style = "width:100%; height:28px;" }))
                </div>
            </div>

            <!-- Row 5 -->
            <div class="form-row">
                <div class="form-group">
                    @Html.LabelFor(m => m.LastModifiedDate, "Modified Date", new { @class = "form-label" })
                    @(Html.Kendo().TextBoxFor(m => m.LastModifiedDate)
                        .HtmlAttributes(new { @readonly = "readonly", style = "width:100%; height:28px;" }))
                </div>
            </div>
        </form>
    </div>
</div>
Controller :
@model IEnumerable<BCES.Models.Parts.StockCodedPartsViewModel>

@{
    var partsList = Model ?? Enumerable.Empty<BCES.Models.Parts.StockCodedPartsViewModel>();
..
@(Html.Kendo().Grid<BCES.Models.Parts.StockCodedPartsViewModel>()
    .Name("ScPartsMaterialDetailsRebuiltPartsGrid_")
    .BindTo(partsList)
..
.DataSource(dataSource => dataSource
    .Ajax()
    .Batch(false)
    .ServerOperation(false)
    .Model(model =>
    {
        model.Id(c => c.MMSStockCode);
        model.Field(c => c.MMSStockCode);
        model.Field(c => c.UnitCost);
        model.Field(c => c.PartType).Editable(false);
         model.Field(c => c.OrigSupplierName).Editable(false);
        model.Field(c => c.OrigSupplierNum).Editable(false);
        model.Field(c => c.DetailedDesc).Editable(false);
        model.Field(c => c.LastModifiedDate).Editable(false);
        model.Field(c => c.PartCost).Editable(false);
        model.Field(c => c.LastModifiedBy).Editable(false);
    })
//obsevation : When I take off .Editable(false), getting message filed is required message. 

You are asp.net core and telerik asp.net core expert. In the below cshtml view pls check opening ( and closing ). Use proper controller actiions along with http verbs
Pls give me full fileincluding exting code
_ScPartsUsed.cshtml :
@model IEnumerable<BCES.Models.Parts.StockCodedPartsViewModel>
@{
    ViewData["Title"] = "Stock Coded Parts Details";
    var scGrid = $"ScPartsGrid_{ViewBag.PartNum}";
    var partNum = ViewBag.PartNum;
}

<div id="scPartsContainer">
    <h6>Stock Coded Parts Used</h6>

    <!-- Grid Container -->
    <div id="scGridContainer">
        @(Html.Kendo().Grid<BCES.Models.Parts.StockCodedPartsViewModel>()
            .Name(scGrid)
            .Columns(columns =>
            {
                columns.Bound(p => p.MMSStockCode)
                    .Title("Stock Code")
                    .ClientTemplate("<a class='sc-link' data-sc-code='#= MMSStockCode #' href='javascript:void(0)'>#= MMSStockCode #</a>")
                    .Width(120);
                columns.Bound(p => p.PartType).Title("Part Type").Width(120);
                columns.Bound(p => p.OrigSupplierNum).Title("Supplier #").Width(120);
                columns.Bound(p => p.OrigSupplierName).Title("Supplier Name").Width(150);
                columns.Bound(p => p.UnitCost).Title("Unit Cost").Format("{0:c}").Width(100);
                columns.Bound(p => p.Qty).Title("Qty").Width(80);
                columns.Bound(p => p.TotalCost).Title("Total Cost").Format("{0:c}").Width(120);
                columns.Command(command =>
                {
                    command.Custom("Delete").Text("Delete").HtmlAttributes(new { @class = "sc-delete-btn" });
                }).Width(120).Title("Actions");
            })
            .DataSource(dataSource => dataSource
                .Ajax()
                .Read(read => read.Action("GetScPartsUsedInEstimates", "ScPartsUsedInEstimates", new { id = partNum, gridType = "VehicleGrid" }))
            .Pageable(p => p.PageSizes(new[] { 5, 10, 20 }))
            .Scrollable()
        )
    </div>

    <button id="scAddNew" class="k-button k-primary" style="margin-bottom:12px; margin-top:12px;">
        <span class="k-icon k-i-plus"></span> Add New Stock Coded Part
    </button>

    <form id="scDetailForm" style="display:none; background-color:#f8f9fa; padding:15px; border-radius:5px; margin-top:15px;">
        <div class="section-title">Part Details</div>
        
        <!-- Row 1 -->
        <div class="form-row">
            <div class="form-group">
                <label class="form-label">Stock Code</label>
                <input id="scStockCode" class="stock-field" readonly style="width:100%; height:32px;" />
            </div>
            <div class="form-group">
                <label class="form-label">Part Type</label>
                <input id="scPartType" readonly class="read-only" style="width:100%; height:32px;" />
            </div>
            <div class="form-group">
                <label class="form-label">Supplier #</label>
                <input id="scSupplierNum" readonly class="read-only" style="width:100%; height:32px;" />
            </div>
        </div>
        
        <!-- Row 2 -->
        <div class="form-row">
            <div class="form-group">
                <label class="form-label">Supplier Name</label>
                <input id="scSupplierName" readonly class="read-only" style="width:100%; height:32px;" />
            </div>
            <div class="form-group">
                <label class="form-label">Description</label>
                <input id="scPartDesc" readonly class="read-only" style="width:100%; height:32px;" />
            </div>
            <div class="form-group">
                <label class="form-label">Unit Cost</label>
                <input id="scUnitCost" readonly class="read-only" style="width:100%; height:32px;" />
            </div>
        </div>
        
        <!-- Row 3 -->
        <div class="form-row">
            <div class="form-group">
                <label class="form-label">Core Cost</label>
                <input id="scCoreCost" readonly class="read-only" style="width:100%; height:32px;" />
            </div>
            <div class="form-group">
                <label class="form-label">Cost Centre</label>
                <input id="scCostCentre" class="stock-field" style="width:100%; height:32px;" />
            </div>
            <div class="form-group">
                <label class="form-label">Qty</label>
                <input id="scQty" class="stock-field" style="width:100%; height:32px;" />
            </div>
        </div>
        
        <!-- Row 4 -->
        <div class="form-row">
            <div class="form-group">
                <label class="form-label">Percentage</label>
                <input id="scPerc" class="stock-field" style="width:100%; height:32px;" />
            </div>
            <div class="form-group">
                <label class="form-label">Total Cost</label>
                <input id="scTotCost" readonly class="read-only" style="width:100%; height:32px;" />
            </div>
        </div>
        
        <!-- Row 5 -->
        <div class="form-row">
            <div class="form-group">
                <label class="form-label">Modified By</label>
                <input id="scModBy" readonly class="read-only" style="width:100%; height:32px;" />
            </div>
            <div class="form-group">
                <label class="form-label">Modified Date</label>
                <input id="scModDate" readonly class="read-only" style="width:100%; height:32px;" />
            </div>
        </div>
        
        <div style="margin-top:12px; display:flex; gap:8px;">
            <button id="scUpdateBtn" type="button" class="k-button k-primary">Update</button>
            <button id="scCancelBtn" type="button" class="k-button">Cancel</button>
        </div>
    </form>
</div>

<style>
    /* Improved spacing and styling */
    .form-container { 
        background:white; 
        padding:15px; 
        border-radius:4px; 
        box-shadow:0 2px 6px rgba(0,0,0,0.08); 
    }
    
    .section-title { 
        font-size:14px; 
        color:#2c3e50; 
        margin-bottom:10px; 
        padding-bottom:6px; 
        border-bottom:2px solid #3498db; 
        display:flex; 
        align-items:center; 
        gap:8px;
        font-weight:600;
    }
    
    .form-row { 
        display:flex; 
        gap:12px; 
        margin-bottom:12px; 
        align-items:flex-start;
    }
    
    .form-group { 
        display:flex; 
        flex-direction:column; 
        flex:1;
    }
    
    .form-label { 
        font-size:12px; 
        color:#2c3e50; 
        font-weight:600; 
        margin-bottom:6px;
    }
    
    .stock-field, .read-only { 
        border:1px solid #d1d5db; 
        border-radius:4px; 
        padding:6px 10px; 
        min-height:32px; 
        font-size:13px; 
    }
    
    .read-only { 
        background:#f8fafc !important; 
        color:#4b5563 !important; 
        cursor:not-allowed !important; 
    }
    
    h6 { 
        font-size:15px; 
        color:#2c3e50; 
        margin-bottom:12px; 
        border-bottom:1px solid #3498db; 
        padding-bottom:6px;
        font-weight:600;
    }
    
    .k-button { 
        padding:6px 12px; 
        font-size:13px; 
        height:34px; 
        border-radius:4px;
    }
    
    .k-button.k-primary { 
        background:#3f51b5; 
        color:white; 
        border-color:#3f51b5;
    }
    
    #scPartsContainer {
        padding: 20px;
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 3px 10px rgba(0,0,0,0.1);
    }
    
    #scGridContainer {
        margin-bottom: 20px;
    }
    
    /* Grid styling for better spacing */
    .k-grid td {
        padding: 8px 10px !important;
    }
    
    .k-grid th {
        padding: 10px 10px !important;
        font-weight: 600;
        background-color: #f0f4f8;
    }
</style>

<script>
    // Self-executing function to encapsulate all stock-coded parts functionality
    (function() {
        // Private variables for this instance
        const partNum = "@Html.Raw(partNum)";
        const gridName = "@Html.Raw(scGrid)";
        const container = $("#scPartsContainer");
        
        // Initialize stock-coded parts functionality
        function initStockCodedParts() {
            bindStockCodedEvents();
            initializeStockCodedGrid();
        }
        
        // Initialize grid with proper parameters
        function initializeStockCodedGrid() {
            const grid = container.find("#" + gridName).data("kendoGrid");
            if (grid) {
                grid.dataSource.read({
                    id: partNum,
                    gridType: "VehicleGrid"
                });
            }
        }
        
        // Bind all event handlers for stock-coded parts
        function bindStockCodedEvents() {
            // Delegated event for grid links
            container.on('click', '.sc-link', function(e) {
                e.preventDefault();
                const stockCode = $(this).data('sc-code');
                loadStockCodedPartDetails(stockCode);
            });
            
            // Delegated event for delete buttons
            container.on('click', '.sc-delete-btn', function(e) {
                e.preventDefault();
                const grid = container.find("#" + gridName).data("kendoGrid");
                const row = $(this).closest("tr");
                const dataItem = grid.dataItem(row);
                onStockCodedDeleteClick(dataItem);
            });
            
            // Add new button
            container.find("#scAddNew").click(showStockCodedAddForm);
            
            // Cancel button
            container.find("#scCancelBtn").click(hideStockCodedDetailForm);
            
            // Update/Save button
            container.find("#scUpdateBtn").click(saveStockCodedPart);
            
            // Auto-calculate total cost
            container.find("#scQty, #scPerc").on("change input", calculateStockCodedTotalCost);
        }
        
        // Delete handler for stock-coded parts
        function onStockCodedDeleteClick(dataItem) {
            kendo.confirm("Delete this stock-coded part?").then(function() {
                $.ajax({
                    url: '@Url.Action("DeleteScPartsUsedInEstimates", "ScPartsUsedInEstimates")',
                    type: 'POST',
                    data: {
                        id: dataItem.MMSStockCode,
                        parentPartId: partNum,
                        gridType: "VehicleGrid"
                    },
                    success: function() {
                        const grid = container.find("#" + gridName).data("kendoGrid");
                        grid.dataSource.read({
                            id: partNum,
                            gridType: "VehicleGrid"
                        });
                        kendo.alert("Stock-coded part deleted successfully");
                    },
                    error: function(xhr) {
                        kendo.alert("Delete failed: " + xhr.responseText);
                    }
                });
            });
        }
        
        // Load stock-coded part details via AJAX
        function loadStockCodedPartDetails(stockCode) {
            container.find(".sc-link").prop("disabled", true);

            $.ajax({
                url: '@Url.Action("GetScPartUsedDetail", "ScPartsUsedInEstimates")',
                type: 'GET',
                data: {
                    mmsStockCode: stockCode,
                    vehicleListId: partNum
                },
                success: function(data) {
                    if (data) {
                        container.find("#scStockCode").val(data.MMSStockCode);
                        container.find("#scPartType").val(data.PartType);
                        container.find("#scSupplierNum").val(data.OrigSupplierNum);
                        container.find("#scSupplierName").val(data.OrigSupplierName);
                        container.find("#scUnitCost").val(data.UnitCost);
                        container.find("#scQty").val(data.Qty);
                        container.find("#scTotCost").val(data.TotalCost);
                        container.find("#scCoreCost").val(data.CoreCost);
                        container.find("#scCostCentre").val(data.CostCentre);
                        container.find("#scPerc").val(data.Percentage);
                        container.find("#scPartDesc").val(data.PartDescription);
                        container.find("#scModBy").val(data.ModBy);
                        container.find("#scModDate").val(data.ModDate ? new Date(data.ModDate).toLocaleString() : "");

                        container.find("#scDetailForm").data("mode", "edit");
                        showStockCodedDetailForm();
                    }
                },
                error: function(xhr) {
                    kendo.alert("Error loading part details: " + xhr.responseText);
                },
                complete: function() {
                    container.find(".sc-link").prop("disabled", false);
                }
            });
        }
        
        // Show form for adding new stock-coded part
        function showStockCodedAddForm() {
            clearStockCodedDetailForm();
            container.find("#scDetailForm").data("mode", "add");
            showStockCodedDetailForm();
        }
        
        // Save stock-coded part via AJAX
        function saveStockCodedPart() {
            const mode = container.find("#scDetailForm").data("mode");
            const isAdd = mode === "add";

            const partData = {
                MMSStockCode: isAdd ? prompt("Enter Stock Code:") : container.find("#scStockCode").val(),
                CC: container.find("#scCostCentre").val(),
                Qty: container.find("#scQty").val(),
                Percentage: container.find("#scPerc").val(),
                UnitCost: container.find("#scUnitCost").val(),
                CoreCost: container.find("#scCoreCost").val(),
                LinkCode: partNum
            };

            if (isAdd && !partData.MMSStockCode) {
                kendo.alert("Stock Code is required for stock-coded parts!");
                return;
            }

            const action = isAdd 
                ? '@Url.Action("CreateScPartsUsedInEstimates", "ScPartsUsedInEstimates")'
                : '@Url.Action("UpdateScPartsUsedInEstimates", "ScPartsUsedInEstimates")';

            $.ajax({
                url: action,
                type: 'POST',
                data: {
                    id: partNum,
                    gridType: "VehicleGrid",
                    model: partData
                },
                success: function() {
                    const grid = container.find("#" + gridName).data("kendoGrid");
                    grid.dataSource.read({
                        id: partNum,
                        gridType: "VehicleGrid"
                    });
                    hideStockCodedDetailForm();
                    kendo.alert("Stock-coded part saved successfully");
                },
                error: function(xhr) {
                    kendo.alert("Save failed: " + xhr.responseText);
                }
            });
        }
        
        // Calculate total cost for stock-coded part
        function calculateStockCodedTotalCost() {
            const qty = parseInt(container.find("#scQty").val()) || 0;
            const unitCost = parseFloat(container.find("#scUnitCost").val()) || 0;
            const perc = parseInt(container.find("#scPerc").val()) || 0;
            const total = qty * unitCost * (1 + perc/100);
            container.find("#scTotCost").val(total.toFixed(2));
        }
        
        // Clear stock-coded part form
        function clearStockCodedDetailForm() {
            container.find("#scDetailForm input").val("");
        }
        
        // Show stock-coded part form
        function showStockCodedDetailForm() {
            container.find("#scDetailForm").show();
        }
        
        // Hide stock-coded part form
        function hideStockCodedDetailForm() {
            container.find("#scDetailForm").hide();
        }
        
        // Initialize when document is ready
        $(document).ready(function() {
            initStockCodedParts();
        });
    })();
</script>
SCPartsUsedInController.cs :
using Kendo.Mvc.Extensions;
using Kendo.Mvc.UI;
using BCES.Models.Parts;
using BCES.Controllers.Base;
using BCES.Data;
using System.Data;
using Dapper;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using Microsoft.Data.SqlClient;
using BCES.Controllers.Common;


namespace BCES.Controllers.Parts
{
    public class ScPartsUsedInEstimatesController : BaseController
    {
        private readonly DapperContext _db;
        private readonly IDbConnection _dbConnection;
        private readonly IHttpContextAccessor _httpContextAccessor;


        public ScPartsUsedInEstimatesController(DapperContext dapper, IHttpContextAccessor httpContextAccessor) : base(dapper, httpContextAccessor)
        {
            _db = dapper;
            _dbConnection = _db.CreateConnection();

            _httpContextAccessor = httpContextAccessor;
        }

        [HttpGet]
        [AllowAnonymous]
        public async Task<ActionResult> GetScPartsUsedInEstimates([DataSourceRequest] DataSourceRequest request, [FromQuery] string id, [FromQuery] string gridType)
        {
            // Fetch data for the grid

            if (string.IsNullOrEmpty(id))
            {
                return BadRequest("id is required for :" + gridType);
            }

            if (gridType == "RbGrid")
            {
                var rbNscModel = await GetScPartsUsedInRBEstimates(id, gridType);
                return Json(rbNscModel.ToDataSourceResult(request));
            }
            if (gridType == "VehicleGrid")
            {
                var vehNscmodel = await GetScPartsUsedInVehicleEstimates(id, gridType);
                return Json(vehNscmodel.ToDataSourceResult(request));
            }
            if (gridType == "ArchivedVehicleGrid")
            {
                var vehNscmodel = await GetArchivedScPartsUsedInVehicleEstimates(id, gridType);
                return Json(vehNscmodel.ToDataSourceResult(request));
            }

            return null; //Add exception


        }

        private async Task<IEnumerable<StockCodedPartsViewModel>> GetArchivedScPartsUsedInVehicleEstimates(string partNum, string gridType)
        {
            try
            {
                var query = @"
                            SELECT 
                                ascp.MmsStockCode,
                                ascp.DateEntered AS LastModifiedDate,
                                ascp.RebPartCost,
                                ascp.UserEntered AS LastModifiedBy,
                                ascp.MmsCost AS UnitCost,
                                ascp.OemCost,
                                ascp.MmsRebuiltCode,
                                ascp.CostCentre,
                                ascp.QtyReqd AS Qty,
                                ascp.PercentUsage AS Percentage,
                                ascp.LinkCode,
                                ascp.RebuiltPart,
                                ascp.LinkType,
                                ascp.Corecost,
                                ascp.ArchVehicleListId,
                                ascp.TotalCost,
                                ascp.ScKeyword,
                                ascp.ScDescription,
                                scp.PartType,
                                scp.OrigSupplierName ,
                                scp.OrigSupplierNum ,
                                scp.DetailedDesc 
                            FROM 
                                CES.SBCES.ArchVehScPartsUsed AS ascp
                            JOIN 
                                SBCES.StockCodedParts AS scp ON ascp.MmsStockCode = scp.MmsStockCode
                            WHERE 
                                ascp.LinkType = 'BUS'
                                AND ascp.ArchVehicleListId = @id;";


                var parameters = new { id = partNum };

                var result = await _dbConnection.QueryAsync<StockCodedPartsViewModel>(query, parameters);


                return result;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in GetLabourDetailsData: {ex.Message}");
                throw; // Rethrow the exception for centralized handling
            }
        }
        private async Task<IEnumerable<StockCodedPartsViewModel>> GetScPartsUsedInVehicleEstimates(string id, string gridType)
        {

            try
            {

                var query = @"
                             DECLARE @Id VARCHAR(30) = '" + id + "'" +
                             @"
                               
                                 SELECT 
                                UPPER(SCP.MMSSTOCKCODE) AS MMSStockCode,
                                ISNULL(SCP.MMSCOST, 0) AS UnitCost,
                                ISNULL(SCP.CoreCost, 0) AS CoreCost,
                                UPPER(SCP.QTYREQD) AS Qty,
                                
                                REPLACE(SCP.PERCENTUSAGE, ',', '.') AS [Percentage],
                                REPLACE(
                                    CAST(SBCES.FINALCOST(
                                        CAST(SCP.PERCENTUSAGE AS NUMERIC(18,2)), 
                                        CAST(SCP.QTYREQD AS NUMERIC(18,2)), 
                                        SCP.CORECOST, 
                                        
                                        0
                                    ) AS DECIMAL(18,2)), ',', '.'
                                ) AS CoreCharge,
                                REPLACE(
                                    CAST(SBCES.FINALCOST(
                                        CAST(SCP.PERCENTUSAGE AS NUMERIC(18,2)), 
                                        CAST(SCP.QTYREQD AS NUMERIC(18,2)), 
                                        SCP.MMSCOST, 
                                        0
                                    ) AS DECIMAL(18,2)), ',', '.'
                                ) AS TotalCost,
                                UPPER(SCP.COSTCENTRE) AS CC,
                                ISNULL(UPPER(SCPARTS.DETAILEDDESC), '') AS DetailedDesc,
                                ISNULL(UPPER(SCPARTS.PARTTYPE), '') AS PartType,
                                SCP.OEMCOST AS [OEM COST],
                                SCP.MMSREBUILTCODE AS MMSREBUILTCODE,
                                SCP.REBPARTCOST AS [RebuiltPartCost],
                                UPPER(SCP.REBUILTPART) AS REBUILTPART,
                                SCP.LinkCode,
                                 UPPER(SCP.LastModifiedBy) AS LastModifiedBy,
                                SCP.LastModifiedDate AS LastModifiedDate,
                                SCPARTS.OrigSupplierNum,
                                SCPARTS.OrigSupplierName
                            FROM 
                                SBCES.SCPARTSUSED SCP
                            LEFT JOIN 
                                SBCES.STOCKCODEDPARTS SCPARTS 
                                ON SCPARTS.MMSSTOCKCODE = SCP.MMSSTOCKCODE
                            WHERE 
                                SCP.LINKCODE = @Id 
                                AND SCP.LINKTYPE = 'BUS'
                                AND SCP.MMSSTOCKCODE is NOT NULL
                                AND SCP.RebuiltPart ='N'
                            ORDER BY 
                                SCP.MMSSTOCKCODE;

                                ";

                return await _dbConnection.QueryAsync<StockCodedPartsViewModel>(query);

            }
            catch (Exception ex)
            {
                return null;
            }
        }

        private async Task<IEnumerable<StockCodedPartsViewModel>> GetScPartsUsedInRBEstimates(string id, string gridType)
        {


            try
            {

                var query = @"
                             DECLARE @Id VARCHAR(30) = '" + id + "'" +
                             @"
                               
                                 SELECT 
                                UPPER(SCP.MMSSTOCKCODE) AS MMSSTOCKCODE,
                                ISNULL(SCP.MMSCOST, 0) AS UnitCost,
                                UPPER(SCP.QTYREQD) AS QTY,
                                REPLACE(SCP.PERCENTUSAGE, ',', '.') AS [Percentage],
                                REPLACE(
                                    CAST(SBCES.FINALCOST(
                                        CAST(SCP.PERCENTUSAGE AS NUMERIC(18,2)), 
                                        CAST(SCP.QTYREQD AS NUMERIC(18,2)), 
                                        SCP.CORECOST, 
                                        0
                                    ) AS DECIMAL(18,2)), ',', '.'
                                ) AS CORECOST,
                                REPLACE(
                                    CAST(SBCES.FINALCOST(
                                        CAST(SCP.PERCENTUSAGE AS NUMERIC(18,2)), 
                                        CAST(SCP.QTYREQD AS NUMERIC(18,2)), 
                                        SCP.MMSCOST, 
                                        0
                                    ) AS DECIMAL(18,2)), ',', '.'
                                ) AS TOTALCOST,
                                UPPER(SCP.COSTCENTRE) AS CC,
                                ISNULL(UPPER(SCPARTS.DETAILEDDESC), '') AS DESCRIPTION,
                                ISNULL(UPPER(SCPARTS.PARTTYPE), '') AS KEYWORD,
                                SCP.OEMCOST AS [OEM COST],
                                SCP.MMSREBUILTCODE AS MMSREBUILTCODE,
                                SCP.REBPARTCOST AS [RebuiltPartCost],
                                UPPER(SCP.REBUILTPART) AS REBUILTPART,
                                SCP.LinkCode
    
                            FROM 
                                SBCES.SCPARTSUSED SCP
                            LEFT JOIN 
                                SBCES.STOCKCODEDPARTS SCPARTS 
                                ON SCPARTS.MMSSTOCKCODE = SCP.MMSSTOCKCODE
                            WHERE 
                                SCP.LINKCODE = @Id 
                                AND SCP.LINKTYPE = 'RB'
                            ORDER BY 
                                SCP.MMSSTOCKCODE;

                                ";

                return await _dbConnection.QueryAsync<StockCodedPartsViewModel>(query);

            }
            catch (Exception ex)
            {
                return null;
            }
        }

        [HttpPost]
        [AllowAnonymous]
        public async Task<IActionResult> CreateScPartsUsedInEstimates(
    [DataSourceRequest] DataSourceRequest request,
    //[Bind(Prefix = "models")] IEnumerable<StockCodedPartsViewModel> models,
     StockCodedPartsViewModel model,
    [FromQuery] string id,
    [FromQuery] string gridType)
        {
            _dbConnection.Open();
            using var transaction = _dbConnection.BeginTransaction();

            try
            {
                var enteredBy = ViewBag.UserName?.ToString().ToUpper() ?? "SYSTEM";
                var dateEntered = DateTime.Now;
                var linkCode = id;
                string linkType = gridType == "RbGrid" ? "RB" : "BUS";
                var isRebuiltPart = 'N';

              //  var model = models.FirstOrDefault(); // only one model expected when Batch(false)
                if (model == null)
                {
                    ModelState.AddModelError("", "No data submitted.");
                    return Json(new[] { model }.ToDataSourceResult(request, ModelState));
                }

                var mmsStockCode = model.MMSStockCode?.ToUpperInvariant();

                //  Duplicate check
                var duplicateCheckSql = @"
                                SELECT COUNT(*) 
                                FROM SBCES.SCPartsUsed 
                                WHERE UPPER(MMSStockCode) = @MMSStockCode
                                  AND UPPER(LinkCode) = @LinkCode
                                  AND UPPER(LinkType) = @LinkType";

                var duplicateCount = await _dbConnection.ExecuteScalarAsync<int>(
                    duplicateCheckSql,
                    new { MMSStockCode = mmsStockCode, LinkCode = linkCode.ToUpper(), LinkType = linkType },
                    transaction
                );

                if (duplicateCount > 0)
                {
                    ModelState.AddModelError("MMSStockCode", $"MMSStockCode '{mmsStockCode}' already exists for this estimate.");
                    return Json(new[] { model }.ToDataSourceResult(request, ModelState));
                }

                var parameters = new DynamicParameters();
                parameters.Add("MMSStockCode", mmsStockCode);
                parameters.Add("CC", model.CC?.ToUpperInvariant() ?? " ");
                parameters.Add("CorePartNumber", model.CorePartNumber?.ToUpperInvariant() ?? " ");
                parameters.Add("EnteredBy", enteredBy);
                parameters.Add("DateEntered", dateEntered);
                parameters.Add("LinkCode", linkCode.ToUpper());
                parameters.Add("LinkType", linkType);
                parameters.Add("RebuiltPartNum", id);
                parameters.Add("IsRebuiltPart", isRebuiltPart);
                parameters.Add("UnitCost", model.UnitCost ?? 0m);
                parameters.Add("MmsNewCost", model.MmsNewCost ?? 0m);
                parameters.Add("CoreCost", model.CoreCost ?? 0m);
                parameters.Add("RebPartCost", model.PartCost ?? 0m);
                parameters.Add("LastModifiedBy", enteredBy);
                parameters.Add("LastModifiedDate", dateEntered);
                parameters.Add("Qty", (model.Qty ?? "0").ToUpperInvariant());
                parameters.Add("Percentage", (model.Percentage ?? "0").ToUpperInvariant());
                parameters.Add("OrigSupplierNum", (model.OrigSupplierNum ?? "0").ToUpperInvariant());
                parameters.Add("OrigSupplierName", (model.OrigSupplierName ?? "").ToUpperInvariant());
                parameters.Add("DetailedDesc", (model.DetailedDesc ?? "").ToUpperInvariant());
                parameters.Add("PartType", (model.PartType ?? "").ToUpperInvariant());

                var sql = @"
            INSERT INTO SBCES.SCPartsUsed (
                MMSStockCode, DateEntered, EnteredBy, MMSCost, OEMCost,
                LastModifiedBy, LastModifiedDate, CostCentre, QtyReqd,
                PercentUsage, LinkCode, RebuiltPart, LinkType, MMSRebuiltCode,
                CoreCost, RebPartCost, OrigSupplierName, OrigSupNum
            ) VALUES (
                UPPER(@MMSStockCode), 
                @LastModifiedDate, 
                UPPER(@EnteredBy),
                @UnitCost, 
                @MmsNewCost,
                UPPER(@LastModifiedBy), 
                @LastModifiedDate, 
                UPPER(@CC),
                UPPER(@Qty), 
                UPPER(@Percentage),
                UPPER(@LinkCode), 
                UPPER(@IsRebuiltPart), 
                UPPER(@LinkType),
                UPPER(@RebuiltPartNum), 
                @CoreCost,
                @RebPartCost,
                UPPER(@OrigSupplierName),
                UPPER(@OrigSupplierNum)                               
            )";

                await _dbConnection.ExecuteAsync(sql, parameters, transaction);
                transaction.Commit();

                if (gridType == "VehicleGrid")
                {
                    await VehicleListEstimatesUpdater.UpdateVehicleCostsAsync(_dbConnection, id);
                }

                return Json(new[] { model }.ToDataSourceResult(request));
            }
            catch (SqlException sqlEx)
            {
                transaction.Rollback();
                ModelState.AddModelError("", $"Database error: {sqlEx.Message}");
               // return Json(models.ToDataSourceResult(request, ModelState));
                return Json(new[] { model }.ToDataSourceResult(request, ModelState));
            }
            catch (Exception ex)
            {
                transaction.Rollback();
                ModelState.AddModelError("", $"Unexpected error: {ex.Message}");
                //return Json(models.ToDataSourceResult(request, ModelState));
                return Json(new[] { model }.ToDataSourceResult(request, ModelState));
            }
        }

        [AcceptVerbs("Post")]
        [AllowAnonymous]
        public async Task<IActionResult> UpdateScPartsUsedInEstimates(
                                                    [DataSourceRequest] DataSourceRequest request,
                                                    StockCodedPartsViewModel model,
                                                    [FromQuery] string id,
                                                    [FromQuery] string gridType)
        {
            string linkType = string.Empty;
            if (gridType == "RbGrid")
            {
                linkType = "RB";
            }
            if (gridType == "VehicleGrid")
            {
                linkType = "BUS";
            }
            if (!ModelState.IsValid)
            {
                return Json(new[] { model }.ToDataSourceResult(request, ModelState));
               // return Json(models.ToDataSourceResult(request, ModelState));
            }
            _dbConnection.Open();
            using var transaction = _dbConnection.BeginTransaction();
            try
            {
                var enteredBy = ViewBag.UserADId?.ToString().ToUpper() ?? "SYSTEM";
                var dateModified = DateTime.Now;

                //foreach (var model in models)
                {
                    var parameters = new DynamicParameters();
                    parameters.Add("MMSStockCode", model.MMSStockCode?.ToUpperInvariant());
                    parameters.Add("CC", model.CC?.ToUpperInvariant() ?? " ");
                    parameters.Add("UnitCost", model.UnitCost ?? 0m);
                    parameters.Add("Qty", (model.Qty ?? "0").ToUpperInvariant());
                    parameters.Add("Percentage", (model.Percentage ?? "0").ToUpperInvariant());
                    parameters.Add("CoreCost", model.CoreCost ?? 0m);
                    parameters.Add("RebuiltPartNum", id?.ToUpperInvariant());
                    parameters.Add("LastModifiedBy", ViewBag.UserName);
                    parameters.Add("LastModifiedDate", DateTime.Now);
                    parameters.Add("LinkType", linkType);
                    parameters.Add("LinkCode", model.LinkCode);

                    var sql = @"
                                UPDATE SBCES.SCPartsUsed 
                                SET 
                                    CostCentre = UPPER(@CC),
                                    MMSCost = @UnitCost,
                                    QtyReqd = UPPER(@Qty),
                                    PercentUsage = UPPER(@Percentage),
                                    CoreCost = @CoreCost,
                                    LastModifiedBy = @LastModifiedBy,
                                    LastModifiedDate = @LastModifiedDate
                                WHERE 
                                    MMSStockCode = @MMSStockCode
                                    AND LinkCode = @LinkCode
                                    AND LinkType = @LinkType
                                    
                                    ";

                    await _dbConnection.ExecuteAsync(sql, parameters, transaction);
                }


                transaction.Commit();

                if (gridType == "VehicleGrid")
                {
                    //update estimates
                    await VehicleListEstimatesUpdater.UpdateVehicleCostsAsync(_dbConnection, id);
                }
                return Json(new[] { model }.ToDataSourceResult(request));
               // return Json(models.ToDataSourceResult(request));
            }
            catch (Exception ex)
            {
                transaction.Rollback();
                ModelState.AddModelError("", $"Error updating record: {ex.Message}");
                //return Json(models.ToDataSourceResult(request, ModelState));
                return Json(new[] { model }.ToDataSourceResult(request, ModelState));
            }
        }


        [HttpPost]
        [AllowAnonymous]
        public async Task<IActionResult> DeleteScPartsUsedInEstimates(
                                                         [DataSourceRequest] DataSourceRequest request,
                                                         StockCodedPartsViewModel model,
                                                         string id,
                                                         string parentPartId,
                                                          string gridType)
        {
            var parentIs = ViewBag.PartNum;
            _dbConnection.Open();
            using (var transaction = _dbConnection.BeginTransaction())
            {
                try
                {

                    var sql = @"
                              DELETE FROM SBCES.SCPartsUsed 
                              WHERE 
                                  MMSStockCode = @id
                                  AND LinkCode = @parentPartId";

                    var parameters = new { id, parentPartId };

                    int affectedRows = await _dbConnection.ExecuteAsync(sql, parameters, transaction);

                    if (affectedRows == 0)
                    {
                        ModelState.AddModelError("", $"Record with ID {id} not found.");
                    }


                    transaction.Commit();


                    if (gridType == "VehicleGrid")
                    {
                        //update estimates
                        await VehicleListEstimatesUpdater.UpdateVehicleCostsAsync(_dbConnection, id);
                    }

                    return Json(new[] { model }.ToDataSourceResult(request));
                  //  return Json(models.ToDataSourceResult(request));
                }
                catch (Exception ex)
                {
                    transaction.Rollback();

                    // Log the error (you can use ILogger if available)
                    Console.WriteLine($"Error in deleting SC part: {ex.Message}");

                    ModelState.AddModelError("", "An error occurred while deleting data.");
                    return Json(new[] { model }.ToDataSourceResult(request, ModelState));
                   // return Json(models.ToDataSourceResult(request, ModelState));
                }


            }
        }

        [AllowAnonymous]
        public async Task<IActionResult> GetScPartUsedDetail(string mmsStockCode, string vehicleListId)
        {
            try
            {
                var query = @"
            SELECT 
                scp.MMSStockCode,
                scp.PartType,
                scp.OrigSupplierNum,
                scp.OrigSupplierName,
                scp.DetailedDesc AS PartDescription,
                scp.MmsNewCost AS UnitCost,
                scp.CoreCost,
                scused.CostCentre,
                scused.QtyReqd AS Qty,
                scused.PercentUsage AS Percentage,
                scused.LastModifiedBy AS ModBy,
                scused.LastModifiedDate AS ModDate,
                dbo.FINALCOST(CAST(scused.PercentUsage AS NUMERIC(18,2)), 
                    CAST(scused.QtyReqd AS NUMERIC(18,2)), 
                    scp.MmsNewCost, 0) AS TotalCost
            FROM SBCES.SCPartsUsed scused
            INNER JOIN SBCES.StockCodedParts scp 
                ON scused.MMSStockCode = scp.MMSStockCode
            WHERE scused.MMSStockCode = @mmsStockCode 
                AND scused.LinkCode = @vehicleListId
                AND scused.LinkType = 'BUS'
                AND scused.RebuiltPart = 'N'";

                var part = await _dbConnection.QueryFirstOrDefaultAsync<StockCodedPartsViewModel>(
                    query,
                    new { mmsStockCode, vehicleListId });

                return part != null
                    ? Json(part)
                    : NotFound();
            }
            catch (Exception ex)
            {
                return StatusCode(500, ex.Message);
            }
        }

        [HttpGet]
        public async Task<IActionResult> GetScPartDetails(string mmsStockCode, string gridType)
        {
            if (string.IsNullOrEmpty(mmsStockCode))
            {
                return NotFound("Stock Code is required");
            }

            try
            {
                var query = @"
                            SELECT TOP 1 
                                PartType, DetailedDesc, MmsNewCost as UnitCost

                            FROM SBCES.StockCodedParts F
                            WHERE MMSStockCode ='" + mmsStockCode + "'";

                using (var connection = _db.CreateConnection())
                {
                    var result = await connection.QueryFirstOrDefaultAsync(query, new { mmsStockCode });

                    if (result == null)
                    {
                        return NotFound(new { Message = "Stock Code not found" });
                    }

                    return Ok(new
                    {
                        PartType = result.PartType,
                        DetailedDesc = result.DetailedDesc,
                        UnitCost = result.UnitCost
                    });
                }
            }
            catch (Exception ex)
            {
                // Log error here
                return StatusCode(500, new { Message = "Error retrieving part details" });
            }
        }
    }
}

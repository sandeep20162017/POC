EditorTemplate/NonStockCodedPartsViewModel.cshtml:

razor
@model BCES.Models.Parts.NonStockCodedPartsViewModel

<div class="scparts-popup-style">

    <!-- Top-left actions (same style as SC) -->
    <div class="popup-actions">
        <button type="button" class="k-button k-primary sc-save-btn">Save</button>
        <button type="button" class="k-button sc-cancel-btn">Cancel</button>
    </div>

    <div class="form-row">
        <!-- Supplier Number -->
        <div class="form-group double-width">
            <label class="form-label required-label">Supplier Number</label>
            @(Html.Kendo().ComboBoxFor(m => m.OrigSuppNum)
                .DataTextField("Text")
                .DataValueField("Value")
                .Filter("contains")
                .Suggest(true)
                .HtmlAttributes(new { @class = "required-cell", required = "required" })
                .BindTo((System.Collections.IEnumerable)ViewData["SupplierNumList"])
            )
        </div>

        <!-- Supplier Name -->
        <div class="form-group double-width">
            <label class="form-label required-label">Supplier Name</label>
            @(Html.Kendo().ComboBoxFor(m => m.OrigSupplierName)
                .DataTextField("Text")
                .DataValueField("Value")
                .Filter("contains")
                .Suggest(true)
                .HtmlAttributes(new { @class = "required-cell", required = "required" })
                .BindTo((System.Collections.IEnumerable)ViewData["SupplierNameList"])
            )
        </div>

        <!-- Unit Cost -->
        <div class="form-group">
            <label class="form-label">Unit Cost</label>
            @(Html.Kendo().NumericTextBoxFor(m => m.UnitCost)
                .Format("{0:C2}")
                .HtmlAttributes(new { data_br = "MustBeNumeric,NoSpecialCharacters,MustBePositive" })
            )
        </div>

        <!-- Qty -->
        <div class="form-group">
            <label class="form-label required-label">Qty</label>
            @(Html.Kendo().NumericTextBoxFor(m => m.Qty)
                .HtmlAttributes(new { @class = "required-cell", required = "required", data_br = "MustBeNumeric,NoSpecialCharacters,MustBePositive" })
            )
        </div>

        <!-- Percentage -->
        <div class="form-group">
            <label class="form-label required-label">%</label>
            @(Html.Kendo().NumericTextBoxFor(m => m.Percentage)
                .HtmlAttributes(new { @class = "required-cell", required = "required", data_br = "MustBeNumeric,NoSpecialCharacters,MustBePositive,MustBePercentage" })
            )
        </div>

        <!-- Cost Centre -->
        <div class="form-group double-width">
            <label class="form-label required-label">Cost Centre</label>
            @(Html.Kendo().ComboBoxFor(m => m.CC)
                .DataTextField("Text")
                .DataValueField("Value")
                .Filter("contains")
                .Suggest(true)
                .HtmlAttributes(new { @class = "required-cell", required = "required" })
                .BindTo((System.Collections.IEnumerable)ViewData["CostCentreList"])
            )
        </div>

        <!-- Description -->
        <div class="form-group full-width">
            <label class="form-label">Description</label>
            @(Html.Kendo().TextBoxFor(m => m.Description)
                .HtmlAttributes(new { @class = "k-textbox" })
            )
        </div>

        <!-- Keyword -->
        <div class="form-group full-width">
            <label class="form-label">Keyword</label>
            @(Html.Kendo().TextBoxFor(m => m.KeyWord)
                .HtmlAttributes(new { @class = "k-textbox" })
            )
        </div>

        @* ====== COMMENTED OUT FIELDS FROM _NScPartsUsed.cshtml ====== *@

        @* Core Cost
        <div class="form-group">
            <label class="form-label">Core Cost</label>
            @(Html.Kendo().NumericTextBoxFor(m => m.CoreCost)
                .Format("{0:C2}")
                .HtmlAttributes(new { data_br = "MustBeNumeric,NoSpecialCharacters,MustBePositive" })
            )
        </div>
        *@

        @* Total Cost
        <div class="form-group">
            <label class="form-label">Total Cost</label>
            @(Html.Kendo().NumericTextBoxFor(m => m.TotalCost)
                .Format("{0:C2}")
                .HtmlAttributes(new { @readonly = "readonly" })
            )
        </div>
        *@

        @* Last Modified By
        <div class="form-group">
            <label class="form-label">Modified By</label>
            @(Html.Kendo().TextBoxFor(m => m.LastModifiedBy)
                .HtmlAttributes(new { @readonly = "readonly", @class = "k-textbox" })
            )
        </div>
        *@

        @* Last Modified Date
        <div class="form-group">
            <label class="form-label">Modified Date</label>
            @(Html.Kendo().DatePickerFor(m => m.LastModifiedDate)
                .HtmlAttributes(new { @readonly = "readonly" })
            )
        </div>
        *@
    </div>
</div>

@section scripts{
<script>
    (function () {
        // Within this popup, forward our top-left buttons to Kendo’s hidden popup actions
        var $popup = $('.k-window-content:visible');

        $popup.on('click', '.sc-save-btn', function () {
            $popup.find('.k-grid-update').trigger('click');
        });

        $popup.on('click', '.sc-cancel-btn', function () {
            $popup.find('.k-grid-cancel').trigger('click');
        });
    })();
</script>
}
Notes:

Reuses the existing SC classes: scparts-popup-style and popup-actions. No new CSS classes introduced.

Your CSS already hides the default bottom buttons: .scparts-popup-style .k-edit-buttons { display: none !important; }, so this puts the action UI at the top-left like SC.

Grid toolbar alignment
The grid toolbar Create button is left-aligned by default (same as SC). Keep the same toolbar in _NScPartsUsed.cshtml:

csharp
.ToolBar(t => { if (!isArchived && isAdmin) { t.Create(); } })
If any theme override ever shifts it, your existing toolbar styling in Vehicle-Estimate.css ensures a consistent look, and Kendo’s default places it top-left. No extra CSS needed.
------------------------------------------------------------------------------------------------------------------------------------------------------
@(Html.Kendo().Grid<BCES.Models.Parts.NonStockCodedPartsViewModel>()
    .Name($"NscPartsMaterialDetailsRebuiltPartsGrid_{ViewBag.PartNum}")
    .Columns(columns =>
    {
        columns.Bound(c => c.OrigSuppNum).Title("Supplier Num").Width(150);
        columns.Bound(c => c.OrigSupplierName).Title("Supplier Name").Width(150);
        columns.Bound(c => c.UnitCost).Title("Unit Cost").Format("{0:C2}").Width(90);
        columns.Bound(c => c.CC).Title("Cost Centre").Width(120);
        columns.Bound(c => c.Qty).Title("Qty").Width(70);
        columns.Bound(c => c.Percentage).Title("%").Width(70);
        columns.Bound(c => c.Description).Title("Description").Width(200);
        columns.Bound(c => c.KeyWord).Title("Keyword").Width(150);
        columns.Command(command =>
        {
            command.Edit();
            command.Destroy();
        }).Width(150);
    })
    .ToolBar(toolbar => { toolbar.Create(); })
    .Editable(editable => editable.Mode(GridEditMode.PopUp)
        .Window(w => w.Width("600px").Title("Edit Non Stock Coded Part")))
    .DataSource(ds => ds
        .Ajax()
        .Model(m => m.Id(c => c.NscPartsUsedId))
        .Read(r => r.Url(Url.Action("GetNscPartsUsedView", "NscPartsUsed")))
        .Create(c => c.Url(Url.Action("CreateNscPartsUsed", "NscPartsUsed")))
        .Update(u => u.Url(Url.Action("UpdateNscPartsUsed", "NscPartsUsed")))
        .Destroy(d => d.Url(Url.Action("DeleteNscPartsUsed", "NscPartsUsed")))
    )
)

1. Tabs active after saving Vehicle
$(document).ready(function () {
    var vehicleGrid = $("#VehicleGrid").data("kendoGrid");

    if (vehicleGrid) {
        vehicleGrid.dataSource.bind("requestEnd", function (e) {
            if (e.type === "create" && e.response && !e.response.Errors) {
                enableAllTabs();
            }
        });
    }
});

Attach this to your vehicle save Ajax success handler.

2. Edit Stock Coded Parts on stock code click

$(document).ready(function () {
    // make stock code column clickable for edit
    $(document).on("click", ".stock-code-cell", function () {
        var grid = $("#" + scInEstimateGridName).data("kendoGrid");
        if (grid) {
            var row = $(this).closest("tr");
            grid.editRow(row); // open popup editor
        }
    });
});

but you must add HtmlAttributes(new { @class = "stock-code-cell" }) to your MMSStockCode column in _ScPartsUsed.cshtml.

5. Unify Look & Feel (Stock Coded popup & Final Estimate tab)

Both already share section-title, form-row, form-group, and form-label.
✅ Ensure scparts-popup-style uses same font, spacing, section-title as _TotalCost.cshtml.
✅ Add common class in vehicle-estimate.css so both reference it:

.section-title {
    font-size: 13px;
    color: #2c3e50;
    border-bottom: 1px solid var(--blue-primary);
    padding-bottom: 4px;
    font-weight: 600;
}

Here’s a clean refactored StockCodedPartsViewModel.cshtml popup layout matching exactly your request:

@model BCES.Models.Parts.StockCodedPartsViewModel

@{
    var mdl = Model ?? new BCES.Models.Parts.StockCodedPartsViewModel();
    bool isNew = string.IsNullOrEmpty(mdl.MMSStockCode);
}

<div id="notification"></div>
<div class="popup-container scparts-popup-style">
    <div class="popup-actions">
        <button class="k-button k-primary" type="button" onclick="saveScPartPopup()">Update</button>
        <button class="k-button" type="button" onclick="cancelScPartPopup()">Cancel</button>
    </div>

    <div class="form-container">
        <form id="scPartsForm">
            @Html.HiddenFor(m => m.LinkCode)

            <!-- Part Information -->
            <div class="section-title">Part Information</div>
            <div class="form-row">
                <div class="form-group double-width">
                    @Html.LabelFor(m => m.MMSStockCode, "Stock Code", new { @class = "form-label required-label" })
                    @Html.EditorFor(m => m.MMSStockCode, "ScComboBox", new { htmlAttributes = new { required = "required" } })
                </div>
                <div class="form-group double-width">
                    @Html.LabelFor(m => m.PartType, "Part Type", new { @class = "form-label" })
                    @(Html.Kendo().TextBoxFor(m => m.PartType).HtmlAttributes(new { @readonly = "readonly" }))
                </div>
                <div class="form-group double-width">
                    @Html.LabelFor(m => m.UnitCost, "Unit Cost", new { @class = "form-label" })
                    @(Html.Kendo().NumericTextBoxFor(m => m.UnitCost).Format("c2"))
                </div>
            </div>
            <div class="form-row">
                <div class="form-group full-width">
                    @Html.LabelFor(m => m.DetailedDesc, "Part Description", new { @class = "form-label" })
                    @(Html.Kendo().TextBoxFor(m => m.DetailedDesc).HtmlAttributes(new { @readonly = "readonly" }))
                </div>
            </div>

            <!-- Supplier Information -->
            <div class="section-title">Supplier Information</div>
            <div class="form-row">
                <div class="form-group double-width">
                    @Html.LabelFor(m => m.CC, "Cost Centre", new { @class = "form-label required-label" })
                    @Html.EditorFor(m => m.CC, "ComboBoxEditor", new { htmlAttributes = new { required = "required" } })
                </div>
                <div class="form-group double-width">
                    @Html.LabelFor(m => m.OrigSupplierNum, "Supplier Num", new { @class = "form-label" })
                    @(Html.Kendo().TextBoxFor(m => m.OrigSupplierNum).HtmlAttributes(new { @readonly = "readonly" }))
                </div>
                <div class="form-group double-width">
                    @Html.LabelFor(m => m.OrigSupplierName, "Supplier Name", new { @class = "form-label" })
                    @(Html.Kendo().TextBoxFor(m => m.OrigSupplierName).HtmlAttributes(new { @readonly = "readonly" }))
                </div>
            </div>

            <!-- Cost Information -->
            <div class="section-title">Cost Information</div>
            <div class="form-row">
                <div class="form-group double-width">
                    @Html.LabelFor(m => m.CoreCost, "Core Cost", new { @class = "form-label" })
                    @(Html.Kendo().NumericTextBoxFor(m => m.CoreCost).Format("c2"))
                </div>
                <div class="form-group double-width">
                    @Html.LabelFor(m => m.Qty, "Quantity", new { @class = "form-label required-label" })
                    @(Html.Kendo().NumericTextBoxFor(m => m.Qty).Format("n0").HtmlAttributes(new { required = "required" }))
                </div>
                <div class="form-group double-width">
                    @Html.LabelFor(m => m.Percentage, "%", new { @class = "form-label required-label" })
                    @(Html.Kendo().NumericTextBoxFor(m => m.Percentage).Format("n0").Min(0).Max(100).HtmlAttributes(new { required = "required" }))
                </div>
                <div class="form-group double-width">
                    @Html.LabelFor(m => m.TotalCost, "Total Cost", new { @class = "form-label" })
                    @(Html.Kendo().NumericTextBoxFor(m => m.TotalCost).Format("c2").HtmlAttributes(new { @readonly = "readonly" }))
                </div>
            </div>

            <!-- History -->
            <div class="section-title">History</div>
            <div class="form-row">
                <div class="form-group double-width">
                    @Html.LabelFor(m => m.LastModifiedBy, "Modified By", new { @class = "form-label" })
                    @(Html.Kendo().TextBoxFor(m => m.LastModifiedBy).HtmlAttributes(new { @readonly = "readonly" }))
                </div>
                <div class="form-group double-width">
                    @Html.LabelFor(m => m.LastModifiedDate, "Modified Date", new { @class = "form-label" })
                    @(Html.Kendo().TextBoxFor(m => m.LastModifiedDate).HtmlAttributes(new { @readonly = "readonly" }))
                </div>
            </div>
        </form>
    </div>
</div>

Supporting CSS (put in vehicle-estimate.css)
.scparts-popup-style .form-row {
    display: grid;
    grid-template-columns: repeat(6, 1fr); /* 6 equal slots */
    gap: 12px;
    margin-bottom: 12px;
}

.scparts-popup-style .form-group.double-width {
    grid-column: span 2; /* each control = 2 slots */
}

.scparts-popup-style .form-group.full-width {
    grid-column: span 6; /* description full row */
}

.scparts-popup-style .section-title {
    grid-column: span 6;
    font-size: 14px;
    font-weight: bold;
    margin: 16px 0 8px;
    border-bottom: 1px solid var(--blue-primary);
}

.popup-actions {
    display: flex;
    gap: 8px;
    margin-bottom: 12px;
}

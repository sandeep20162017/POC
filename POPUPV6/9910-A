Controller
Instead of returning null, return a BadRequest with the message:

csharp
if (duplicateCount > 0)
{
    return BadRequest($"MMSStockCode '{mmsStockCode}' already exists for this estimate.");
}
This sends a 400 status with the text message in the response body.

JavaScript (jQuery + Kendo Dialog example)
javascript
$.ajax({
    url: "/ScPartsUsedInEstimates/CreateScPartsUsedInEstimates",
    type: "POST",
    data: formData, // your form data
    success: function (result) {
        // Refresh grid or show success message
        $("#ScPartsGrid").data("kendoGrid").dataSource.read();
    },
    error: function (xhr) {
        if (xhr.status === 400 && xhr.responseText) {
            showErrorPopup(xhr.responseText);
        } else {
            showErrorPopup("An unexpected error occurred.");
        }
    }
});

function showErrorPopup(message) {
    $("<div></div>").kendoDialog({
        width: "400px",
        title: "Duplicate Stock Code",
        closable: true,
        modal: true,
        content: `<p style="color:red;">${message}</p>`,
        actions: [
            { text: "OK", primary: true }
        ]
    }).data("kendoDialog").open();
}
If you want a simpler approach
Replace showErrorPopup(...) with:

javascript
alert(message);
…but the Kendo Dialog gives you a consistent UI with the rest of your app.

Why this works
The controller sends a 400 Bad Request with a plain text message.

The AJAX error handler reads xhr.responseText and passes it to a popup.

The user sees exactly why the action failed, without guessing.

If you’d like, I can integrate this popup logic directly into your existing “Add Stock Coded Part” JS so it’s seamless with your current Kendo Grid workflow — meaning the grid won’t refresh, and the dialog will appear right where the user clicked.

Do you want me to prepare that drop‑in update for your current grid script?


ScPartsUsed.cshtml Uses Ajax to load default PopUpView - EditorTemplate/StockCodedPartsViewModel.cshtml
I have a similar grid for Non Stock Coded Parts below.
1. I need your assistance to generate comprehensive EditorTemplate/NonStockCodedPartsViewModel.cshtml, based of _NScPartsUsed.cshtml
2. pls make all the necessary changes like _ScPartsUsed.cshtml in _NScPartsUsed.cshtml (popUp, AJax Calls etc)
3. NonStockCodedPartsViewModel.cshtml should use multiple columns on each row like StockCodedPartsViewModel.cshtml
4. css must be same for StockCodedPartsViewModel.cshtml and NonStockCodedPartsViewModel.cshtml. For testing do not changes css names (example use if css has Sc, use it for NSc.


_ScPartsUsed.cshtml:
    @model IEnumerable<BCES.Models.Parts.StockCodedPartsViewModel>

@{
    ViewData["Title"] = "Stock Coded Parts Details";
    var scGridName = $"ScPartsMaterialDetailsRebuiltPartsGrid";
    bool isArchived = ViewBag.GridType == "ArchivedVehicleGrid"; //ArchiveDisable
    bool isAdmin = ViewBag.RoleId == 1; //ArchiveDisable
    ViewBag.scGridName = scGridName;
    string gridName = $"ScPartsMaterialDetailsRebuiltPartsGrid_{ViewBag.PartNum}"; //for JS
}
<script>
    // Store grid name for JavaScript access
    var scInEstimateGridName = '@gridName';
</script>
<input type="hidden" id="scGridNameField" value="@scGridName" /> @* save gridname in hidden field for JS *@
<h6>Stock Coded Parts Used</h6>

@(
Html.Kendo().Grid<BCES.Models.Parts.StockCodedPartsViewModel>()    
     .Name($"ScPartsMaterialDetailsRebuiltPartsGrid_{ViewBag.PartNum}") 
     .HtmlAttributes(new { data_grid_type = ViewBag.GridType?.ToString() ?? "RbGrid" }) //lockcols
      
    .Columns(columns =>
    {
       // columns.Bound(c => c.MMSStockCode).Title("Stock Code").IncludeInMenu(false).EditorTemplateName("ComboBoxEditor").Width(70);
        columns.Bound(c => c.MMSStockCode)
                        .Title("Stock Code")
                        .HtmlAttributes(new { @class = "stock-code-cell", data_field = "MMSStockCode" })
                        .IncludeInMenu(false)
                        .ClientTemplate("<a href='javascript:void(0)' class='stock-code-cell'>#= MMSStockCode #</a>")
                        .HeaderHtmlAttributes(new { @class = "required-header" })
                        .HtmlAttributes(new { @class = "required-cell", required = "required" })
                        .EditorTemplateName("ScComboBox")
                        .Width(180);
      @*  columns.Command(command =>
        {
            command.Custom("Populate Details").Click("refreshScPartDetails").IconClass("k-i-reload").HtmlAttributes(new { @class = "k-button k-button-icontext" });

        }).Width(60); *@
        columns.Bound(c => c.PartType)
    .Title("Part Type")
    .Width(150)
    .EditorTemplateName("ComboBoxEditor")
    .EditorViewData(new Dictionary<string, object> {
            { "LockMap", "RbGrid:always;MakevsBuy:notNew;VehicleGrid:always" } //lockcols
        })
    ;

        @* columns.Bound(c => c.OrigSupplierNum)
        .Title("Supplier Num")
        .Width(150)
        .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains")
        .SuggestionOperator(FilterType.Contains)))
        .EditorTemplateName("ComboBoxEditor")
        .EditorViewData(new Dictionary<string, object> {
            { "LockMap", "RbGrid:always;MakevsBuy:notNew;VehicleGrid:always" } //lockcols
        })
        ; *@
        @* columns.Bound(c => c.OrigSupplierName)
        .Title("Supplier Name")
        .Width(150)
        .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains")
        .SuggestionOperator(FilterType.Contains)))
        .EditorTemplateName("ComboBoxEditor")
        .EditorViewData(new Dictionary<string, object> {
            { "LockMap", "RbGrid:always;MakevsBuy:notNew;VehicleGrid:always" } //lockcols
        })
        ; *@
        @* columns.Bound(c => c.DetailedDesc)
        .Title("Part Description")
        .Width(150)
        .EditorTemplateName("ComboBoxEditor")
        .EditorViewData(new Dictionary<string, object> {
            { "LockMap", "RbGrid:always;MakevsBuy:notNew;VehicleGrid:always" } //lockcols
        })
        ; *@

        columns.Bound(c => c.UnitCost)
        .Title("Part Unit Cost")
        .Width(90)
        .Format("{0:C2}")
        .EditorTemplateName("ComboBoxEditor")
        .EditorViewData(new Dictionary<string, object> {
            { "LockMap", "RbGrid:always;MakevsBuy:notNew;VehicleGrid:always" } //lockcols
        })
        .HtmlAttributes(new { data_br = "MustBeNumeric,NoSpecialCharacters,MustBePositive" });
        ;

        @* columns.Bound(c => c.CoreCost)
        .Title("Core Cost")
        .Width(90)
        .Format("{0:C2}")
        // .EditorTemplateName("ComboBoxEditor")
        .EditorViewData(new Dictionary<string, object> {
            { "LockMap", "RbGrid:always;MakevsBuy:notNew;VehicleGrid:notNew" } //lockcols 
        })
        .HtmlAttributes(new { data_br = "MustBeNumeric,NoSpecialCharacters,MustBePositive" });
        ;
 *@
        columns.Bound(c => c.CC).Title("Cost Centre")
        .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains")
        .SuggestionOperator(FilterType.Contains)))
        .EditorTemplateName("ComboBoxEditor")
        .HeaderHtmlAttributes(new { @class = "required-header" })
        .HtmlAttributes(new { @class = "required-cell", required = "required" })
        .Width(120); ;

        columns.Bound(c => c.Qty).Title("Qty").Width(70)
        .HeaderHtmlAttributes(new { @class = "required-header" })
        .HtmlAttributes(new { @class = "required-cell", required = "required" })
        .HtmlAttributes(new { data_br = "MustBeNumeric,NoSpecialCharacters,MustBePositive" });

        columns.Bound(c => c.Percentage).Title("%").Width(70)
        .HeaderHtmlAttributes(new { @class = "required-header" })
        .HtmlAttributes(new { @class = "required-cell", required = "required" })
        .HtmlAttributes(new { data_br = "MustBeNumeric,NoSpecialCharacters,MustBePositive, MustBePercentage" });

       @*  columns.Bound(c => c.CoreCharge)
       .Title("Total Core Cost")
       .Width(90)
       .EditorTemplateName("ComboBoxEditor")
       .EditorViewData(new Dictionary<string, object> {
            { "LockMap", "RbGrid:always;MakevsBuy:notNew;VehicleGrid:always" } //lockcols
       })
       ; *@
        @* columns.Bound(c => c.TotalCost)
        .Title("Total Cost")
        .Width(90)
        .Format("{0:C2}")
        .Editable("false")
        .EditorTemplateName("ComboBoxEditor")
        .EditorViewData(new Dictionary<string, object> {
            { "LockMap", "RbGrid:always;MakevsBuy:notNew;VehicleGrid:always" } //lockcols
        })
        ; *@
        
        columns.Bound(c => c.LinkCode).Hidden(true);

        
             
        @* columns.Bound(c => c.CoreCost)
        .Title("Core Cost")
        .Format("{0:N2}")
        .Width(140);  *@

        @* columns.Bound(c => c.LastModifiedBy)
        .Title("Modified By")
        .EditorTemplateName("ComboBoxEditor")
        .ClientTemplate("#= LastModifiedBy && LastModifiedBy !== 0 ? LastModifiedBy : '(System Generated)' #")
        .EditorViewData(new Dictionary<string, object> {
            { "LockMap", "RbGrid:always;MakevsBuy:notNew;VehicleGrid:always" } //lockcols
        })
        .Width(160);
        columns.Bound(c => c.LastModifiedDate)
        .Title("Modified Date")
        .Width(160)
        .EditorTemplateName("ComboBoxEditor")
        .ClientTemplate("#=  LastModifiedDate !== 0 ? formatToEST(LastModifiedDate) : '(System Generated)' #")
        .EditorViewData(new Dictionary<string, object> {
            { "LockMap", "RbGrid:always;MakevsBuy:notNew;VehicleGrid:always" } //lockcols
        }); *@
       // .Format("{0:MMMM dd, yyyy HH:mm:ss}"); //  format dateTime;;
     //   columns.Bound(c => c.TotalCost).Title("Total Cost").Format("{0:N2}").Width(100); ;
      
       
        // columns.Bound(c => c.DateRevised).Title("Date Revised");
       @*  columns.Command(command =>
        {
            if (@ViewBag.RoleId == 1)
            {
               // command.Edit().Text(" ").IconClass("k-icon k-i-edit").HtmlAttributes(new { title = "Edit" }); // Edit button with tooltip
            }
            if (@ViewBag.RoleId == 1)
            {

                command.Destroy().Text(" ").IconClass("k-icon k-i-delete").HtmlAttributes(new { title = "Delete" }); // Delete button with tooltip
            }
        }).Width(100); *@
        columns.Command(command =>
        {
            
            if (!isArchived && isAdmin) //ArchiveDisable
            {

                command.Custom("Delete")
                 .Click("onScDelete")
                 
                 .Text(" ")
                 .IconClass("k-icon k-i-delete")
                 .HtmlAttributes(new
                 {
                     @class = "text-danger",
                     title = "Delete",
                     data_grid = $"ScPartsMaterialDetailsRebuiltPartsGrid",
                     data_url = Url.Action("DeleteScPartsUsedInEstimates", "ScPartsUsedInEstimates"),
                     data_id_field = "id",
                     //  data_mmsstockcode_field = "parentPartId",
                     data_grid_type = "SCPartGrid"
                 });
            }
        }).Width(100);
    })
  
     .ToolBar(toolbar =>
    {
        if (!isArchived && isAdmin) //ArchiveDisable
        {
            toolbar.Create();
          //  toolbar.Save();
        }
    })
    .Editable(editable => editable.Mode(GridEditMode.PopUp)
                   .Window(w => w.Width("600px").Title("Edit Vehicle")))
    @* .Editable(editable => editable
                    .Mode(isArchived ? GridEditMode.PopUp : GridEditMode.PopUp).Window(w => w.Width("600px")
                    .Enabled(!isArchived)
                    
                ) *@

    .Pageable(p => p
    .PageSizes(new int[] { 1, 10, 20, 50 }) // Dropdown options
    .Position(GridPagerPosition.Bottom)

    )
    .Sortable()
    .Events(e => e.Edit("onScPartsEdit"))
    .Resizable(r => r.Columns(true))
    //.Scrollable()
    .DataSource(dataSource => dataSource
        .Ajax()
        .Batch(false)
        .ServerOperation(false)
        .Model(model =>
        {
            model.Id(c => c.MMSStockCode); 
            model.Field(c => c.MMSStockCode);
            model.Field(c => c.UnitCost);
            model.Field(c => c.LastModifiedBy).Editable(false);
            model.Field(c => c.LastModifiedDate).Editable(false);
         //   model.Field(c => c.PartType).Editable(false);
         //   model.Field(c => c.DetailedDesc).Editable(false);
        })

       

        .Read(read => read.Url(Url.Action("GetScPartsUsedInEstimates", "ScPartsUsedInEstimates") + "?id=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Get))
        .Create(create => create.Url(Url.Action("CreateScPartsUsedInEstimates", "ScPartsUsedInEstimates") + "?id=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Post))
        .Update(update => update.Url(Url.Action("UpdateScPartsUsedInEstimates", "ScPartsUsedInEstimates") + "?id=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Post))
        .Destroy(delete => delete.Url(Url.Action("DeleteScPartsUsedInEstimates", "ScPartsUsedInEstimates") + "?id=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Post))
    )
)

@(Html.Kendo().Dialog()
    .Name("partDetailsDialog")
    .Title("Part Details")
    .Width(400)
    .Modal(true)
    .Visible(false)
    .Actions(actions =>
    {
        actions.Add().Text("Close").Primary(true);
    })
)
Vehicle-Estimate.css :
/* ==========================================
   THEME VARIABLES (use these for consistency)
========================================== */
:root {
    --blue-primary: #1e88e5;
    --blue-secondary: #64b5f6;
    --blue-light: #e3f2fd;
    --blue-dark: #0d47a1;
    --grey-light: #f8fafc;
    --grey-border: #d1d5db;
    --popup-z-index: 10000;
    --overlay-z-index: 9999;
    --font-small: 11px;
    --font-normal: 12px;
    --font-section: 14px;
}

/* ==========================================
   POPUP WINDOWS
========================================== */
.k-window {
    background-color: #e6f2ff !important; /* no transparency */
    border: 1px solid var(--blue-secondary) !important;
}

/* Ensure popup content stays contained */
#estimatePopup,
.popup-container {
    width: 950px !important;
    max-width: 95%;
    max-height: 80vh;
    overflow: hidden;
    background: #fff;
    border-radius: 4px;
}

/* Fix Stock Coded popup not centered */
.k-window-wrapper {
    left: 50% !important;
    transform: translateX(-50%) !important;
}

/* ==========================================
   SECTION TITLES (Vehicle Info, Specifications, etc.)
========================================== */
.vehicle-section-title,
.section-title,
.confirmation-title {
    font-size: var(--font-section);
    font-weight: 600;
    margin: 15px 0 8px 0;
    display: flex;
    align-items: center;
    gap: 6px;
    color: #2c3e50;
}

    /* Add the vertical blue bar */
    .vehicle-section-title::before,
    .section-title::before,
    .confirmation-title::before {
        content: "";
        display: block;
        width: 4px;
        height: 14px;
        background: var(--blue-primary);
        border-radius: 2px;
    }

/* ==========================================
   FORM LAYOUT (3 columns for Vehicle tab)
========================================== */
.vehicle-form-row,
.form-row {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 8px;
    margin-bottom: 8px;
}

.vehicle-form-group,
.form-group {
    display: flex;
    flex-direction: column;
}

    .vehicle-form-group.vehicle-double-width,
    .form-group.double-width {
        grid-column: span 2;
    }

/* ==========================================
   LABELS
========================================== */
.vehicle-form-label,
.form-label {
    font-size: var(--font-small);
    font-weight: 600;
    margin-bottom: 2px;
    color: #2c3e50;
}

.vehicle-form-row.audit-info .vehicle-form-label {
    font-size: var(--font-small);
    color: #555;
}

.required-label::after,
.required-header::after {
    content: " *";
    color: #e74c3c;
}

/* ==========================================
   INPUT CONTROLS (Compact like Stock Coded Parts)
========================================== */
.vehicle-form-control,
.k-input-inner,
.k-combobox .k-input-inner,
.k-numerictextbox input.k-input-inner,
.k-datepicker .k-input-inner,
.k-textbox {
    height: 20px !important; /* 50% less height */
    line-height: 18px !important;
    font-size: var(--font-normal) !important;
    padding: 2px 4px !important;
}

.k-combobox,
.k-numerictextbox,
.k-datepicker,
.k-textbox {
    height: 24px !important;
    font-size: var(--font-normal);
}

/* Readonly fields */
.read-only,
.k-state-disabled {
    background-color: var(--grey-light) !important;
    color: #4b5563 !important;
}

/* Combobox dropdown */
.k-list-container {
    background: #fff !important;
    border: 1px solid var(--blue-secondary) !important;
}

    .k-list-container .k-list-item {
        font-size: var(--font-normal);
        padding: 4px 8px;
    }

        .k-list-container .k-list-item:hover,
        .k-list-container .k-list-item.k-state-selected {
            background: var(--blue-light) !important;
        }

/* ==========================================
   TABS
========================================== */
#estimateTabs {
    height: 50% !important; /* reduce height */
}

    #estimateTabs .k-tabstrip-items .k-link {
        font-weight: 600 !important;
        font-size: var(--font-normal);
        color: #000 !important;
    }

    #estimateTabs .k-tabstrip-items .k-state-active .k-link {
        background-color: var(--blue-light) !important;
        color: #000 !important;
    }

    #estimateTabs .k-tabstrip-items .k-link:hover {
        background: var(--blue-secondary) !important;
        color: #000;
    }

/* ==========================================
   GRIDS
========================================== */
.k-grid {
    font-size: var(--font-normal);
}

.k-grid-toolbar {
    background: var(--blue-light) !important;
    padding: 4px 8px;
}

    .k-grid-toolbar .k-button {
        background: var(--blue-primary);
        border: 1px solid var(--blue-dark);
        color: #fff !important;
        font-size: var(--font-normal);
        height: 28px;
        padding: 2px 10px;
    }

.k-grid-content .k-button {
    font-size: var(--font-small);
    padding: 2px 6px;
    height: 24px;
    background: #f0f6ff;
    border: 1px solid var(--blue-secondary);
}

    .k-grid-content .k-button:hover {
        background: var(--blue-light);
    }

/* ==========================================
   CONFIRMATION / COPY DIALOGS
========================================== */
.k-window[aria-label="Confirm Delete"],
.k-window[aria-label="Copy Estimate"] {
    background: #f9fbff !important;
    border: 1px solid var(--blue-secondary);
}

.confirmation-title {
    font-size: var(--font-normal);
    font-weight: 600;
    margin-bottom: 10px;
}

.k-window .k-button.k-primary {
    background: var(--blue-primary);
    border-color: var(--blue-dark);
    color: #fff;
}

    .k-window .k-button.k-primary:hover {
        background: var(--blue-dark);
    }

.k-window .k-button:not(.k-primary) {
    background: #f0f0f0;
    color: #000;
}
/* ==========================================
   POPUP WINDOWS (all modals unified)
========================================== */
.k-window {
    background-color: #ffffff !important; /* white background */
    border: 1px solid #b3d1ff !important;
    box-shadow: 0 4px 20px rgba(0,0,0,0.15);
}

/* Ensure popup content is white, no transparency */
#estimatePopup,
.popup-container,
.k-window-content {
    background-color: #ffffff !important;
}

/* ==========================================
   TAB HEADERS (reduce height to 50%)
========================================== */
#estimateTabs .k-tabstrip-items .k-link {
    min-height: 20px !important; /* reduce default ~40px */
    line-height: 18px !important;
    padding: 2px 8px !important;
    font-size: 12px !important;
    font-weight: 600 !important;
    color: #000 !important;
}

/* Active tab */
#estimateTabs .k-tabstrip-items .k-state-active .k-link {
    background-color: #e6f2ff !important; /* light blue */
    border-radius: 3px 3px 0 0;
}

/* Hover effect */
#estimateTabs .k-tabstrip-items .k-link:hover {
    background-color: #cce0ff !important;
}

/* ==========================================
   TAB CONTENT AREA
========================================== */
#estimateTabs .k-content {
    background-color: #ffffff !important; /* white body */
    padding: 10px;
    border: 1px solid #b3d1ff;
    border-top: none;
}
/* ==========================================
   TABS → Sleek Ribbon Style
========================================== */
#estimateTabs .k-tabstrip-items {
    display: flex;
    background: #f5faff; /* very light blue ribbon */
    border-bottom: 1px solid #b3d1ff;
    padding: 0;
    margin: 0;
}

    #estimateTabs .k-tabstrip-items .k-item {
        margin: 0;
        padding: 0;
        border: none;
    }

    #estimateTabs .k-tabstrip-items .k-link {
        font-size: 12px;
        font-weight: 600;
        color: #000;
        padding: 4px 12px !important; /* sleek padding */
        min-height: 18px !important; /* slim height */
        line-height: 16px !important;
        border-radius: 0;
        transition: background 0.2s ease-in-out;
    }

        /* Hover */
        #estimateTabs .k-tabstrip-items .k-link:hover {
            background: #e6f2ff !important;
            color: #000;
        }

    /* Active tab */
    #estimateTabs .k-tabstrip-items .k-state-active .k-link {
        background: #cce0ff !important;
        border-bottom: 2px solid #1e88e5;
        font-weight: 700;
    }
/* Stock Coded Parts popup */
.scparts-popup-style .k-window-content {
    padding: 15px !important;
    max-height: 75vh;
    overflow-y: auto;
}

/* Stock Coded Parts popup */
.scparts-popup-style .k-window-content {
    padding: 15px !important;
    max-height: 75vh;
    overflow-y: auto;
}

/* Stock Coded Parts popup → 3 columns per row */
.scparts-popup-style .form-row {
    display: grid;
    grid-template-columns: repeat(4, 1fr); /* ✅ 3 columns */
    gap: 12px;
    margin-bottom: 10px;
}

.scparts-popup-style .form-group {
    display: flex;
    flex-direction: column;
}
/* Popup form section layout */
.scparts-popup-style .form-row {
    display: grid;
    grid-template-columns: repeat(4, 4fr); /* 3 columns */
    gap: 12px;
    margin-bottom: 12px;
}

/* All inputs same width */


/* For big fields like Description or Supplier Name */
.scparts-popup-style .double-width {
    grid-column: span 2;
}

.scparts-popup-style .triple-width {
    grid-column: span 2;
}

.scparts-popup-style .full-width {
    grid-column: span 4;
}
.scparts-popup-style .section-title {
    grid-column: span 8; /* ✅ force to take full width */
    font-size: 14px;
    font-weight: bold;
    margin: 16px 0 8px;
}
.section-title {
    font-size: 13px;
    color: #2c3e50;
    border-bottom: 1px solid var(--blue-primary);
    padding-bottom: 4px;
    font-weight: 600;
}
.scparts-popup-style .form-row {
    display: grid;
    grid-template-columns: repeat(6, 1fr); /* 6 equal slots */
    gap: 12px;
    margin-bottom: 12px;
}

.scparts-popup-style .form-group.double-width {
    grid-column: span 2; /* each control = 2 slots */
}

.scparts-popup-style .form-group.full-width {
    grid-column: span 6; /* description full row */
}

.scparts-popup-style .section-title {
    grid-column: span 6;
    font-size: 12px;
    font-weight: bold;
    margin: 16px 0 8px;
    border-bottom: 1px solid var(--blue-primary);
}

.popup-actions {
    display: flex;
    gap: 8px;
    margin-bottom: 12px;
}
.scparts-popup-style .k-edit-buttons {
    display: none !important;
}
/* Stop forcing 7500px width on every popup container */
#estimatePopup {
    width: 650px !important;
    max-width: 95%;
    max-height: 80vh;
    overflow: hidden;
    background: #fff;
    border-radius: 4px;
}

/* Let Stock Coded Parts popup be sized by JS */
.scparts-popup-style.popup-container {
    width: auto !important;
    max-width: 90vw;
    max-height: 80vh;
}
#VehicleGrid .k-grid-content {
    max-height: calc(100vh - 280px); /* adjust header/toolbar footprint */
    overflow-y: auto;
}
NscPArtsUsedController.cs :
namespace BCES.Controllers.Parts
{

    //[Route("NscPartsUsed")]
    public class NscPartsUsedController : BaseController
    {
        private readonly DapperContext _db;
        private readonly IDbConnection _dbConnection;
        private readonly IHttpContextAccessor _httpContextAccessor;


        public NscPartsUsedController(DapperContext dapper, IHttpContextAccessor httpContextAccessor) : base(dapper, httpContextAccessor)
        {
            _db = dapper;
            _dbConnection = _db.CreateConnection();

            _httpContextAccessor = httpContextAccessor;
        }
        // GET: NscPartsUsed/Index
        [HttpGet("NscPartsUsedIndex")]
        [AllowAnonymous]
        public IActionResult NscPartsUsedIndex()
        {
          // return View();
           return View("~/Views/Parts/NonStockCodedParts/Index.cshtml");
        }

        // POST: NscPartsUsed/GetNscPartsUsedView
        [HttpGet]
        [AllowAnonymous]
        public async Task<ActionResult> GetNscPartsUsedView([DataSourceRequest] DataSourceRequest request)
        {
            // Fetch data for the grid
            var model = await GetNscPartsUsedData();
           
            return Json(model.ToDataSourceResult(request));
        }

        // POST: NscPartsUsed/CreateNscPartsUsed
       [HttpPost]
        [AllowAnonymous]
        public async Task<IActionResult> CreateNscPartsUsed([DataSourceRequest] DataSourceRequest request, [FromForm] NscPartsUsedViewModel nscPartsUsed)
        {
            if (!ModelState.IsValid)
            {
                var errors = ModelState.Values
                    .SelectMany(v => v.Errors)
                    .Select(e => e.ErrorMessage);
                return BadRequest(new { Errors = errors });
            }


            try
            {
                var insertQuery = String.Format(@"
                INSERT INTO SBCES.NonStockCodedParts (OrigSupplierNum, OrigSupplierName,OemPartCost, DetailedDesc, Keyword, LastModifiedDate)
                VALUES ('{0}', '{1}', {2}, '{3}', '{4}', '{5}')",
                    nscPartsUsed.OrigSuppNum,
                                  nscPartsUsed.OrigSupplierName,
                                  nscPartsUsed.UnitCost,
                                  nscPartsUsed.Description,
                                   nscPartsUsed.KeyWord,
                                   DateTime.Now  
                     );

                
                await _dbConnection.ExecuteAsync(insertQuery, nscPartsUsed);
                return Json(new { success = true });
            }
            catch (Exception ex)
            {
                return StatusCode(500, "An error occurred while updating the Non Stock Coded Part.");
            }
            
        }

        
        [HttpPost]
        [AllowAnonymous]
        public async Task<IActionResult> UpdateNscPartsUsed([DataSourceRequest] DataSourceRequest request, [FromForm] NscPartsUsedViewModel nscPartsUsed)
        {
            try
            {
                ////
                ///// Validate if OrigSupplierName exists in the database
                //bool isValid = _dbConnection.NonStockCodedParts
                //    .Any(p => p.OrigSupplierName == nscPartsUsed.OrigSupplierName);

                //if (!isValid)
                //{
                //    ModelState.AddModelError("OrigSupplierName", "Invalid selection.");
                //    return Json(ModelState.ToDataSourceResult());
                //}
                ///

                if (!ModelState.IsValid)
                {
                    var errors = ModelState.Values
                        .SelectMany(v => v.Errors)
                        .Select(e => e.ErrorMessage);
                    return BadRequest(new { Errors = errors });
                }

                string updateQuery = string.Format(@" UPDATE SBCES.NonStockCodedParts 
                   SET   
                    OrigSupplierNum = '{0}', 
                    OrigSupplierName = '{1}',
                    OemPartCost= {2},
                    DetailedDesc =  '{3}',
                    Keyword = '{4}'
                    LastModifiedBy = '{5}'
                     LastModifiedDate = '{6}'
                    
                WHERE 
                    Id = {7}",
                              nscPartsUsed.OrigSuppNum, 
                              nscPartsUsed.OrigSupplierName, 
                              nscPartsUsed.UnitCost,  
                              nscPartsUsed.Description, 
                              nscPartsUsed.KeyWord, 
                              ViewBag.UserName,
                              DateTime.Now,
                              nscPartsUsed.NscPartsUsedId
                              );
                
               

                await _dbConnection.ExecuteAsync(updateQuery, nscPartsUsed);
                return Json(new { success = true });
            }
            catch (Exception ex)
            {
                return StatusCode(500, "An error occurred while updating the Non Stock Coded Part.");
            }
            
        }

        // DELETE: NscPartsUsed/DeleteNscPartsUsed/{id}
      //  [HttpDelete("{id}")]
        [HttpPost]
        [AllowAnonymous]
        public async Task<IActionResult> DeleteNscPartsUsed([DataSourceRequest] DataSourceRequest request, NscPartsUsedViewModel nscPartsUsed)
        {
            try
            {
                var deleteQuery = String.Format(@"
                DELETE FROM SBCES.NscPartsUsed
                WHERE NscPartsUsedId  = {0}", nscPartsUsed.NscPartsUsedId);


                await _dbConnection.ExecuteAsync(deleteQuery, nscPartsUsed);
                return Json(new { success = true });
            }
            catch (Exception ex)
            {
                return StatusCode(500, "An error occurred while deleting the Non Stock Coded Part.");
            }
           
        }

        private async Task<IEnumerable<NscPartsUsedViewModel>> GetNscPartsUsedData()
        {
            try
            {
                var query = @"
               
                SELECT
                                 OId AS[OId],
                                    UPPER(NSCP.origSupplierNum) AS[OrigSuppNum],
                                    UPPER(NSCP.origSupplierName) AS[OrigSupplierName],
                                    NSCP.oemPartCost AS[OemPartCost],
                                    UPPER(NSCU.qtyReqd) AS[Qty],
                                    REPLACE(NSCU.percentUsage, ',', '.') AS[Percentage],   
	                                TRY_CAST(SBCES.FINALCOST(
                                        CAST(ISNULL(NSCU.PercentUsage, '0') AS VARCHAR(20)),
                                        CAST(ISNULL(NSCU.QtyReqd, '0') AS VARCHAR(20)),
                                        ISNULL(NSCU.coreCost, 0), 0) AS DECIMAL(18, 2)) as CoreCost,
	                                TRY_CAST(SBCES.FINALCOST(
                                        CAST(ISNULL(NSCU.PercentUsage, '0') AS VARCHAR(20)),
                                        CAST(ISNULL(NSCU.QtyReqd, '0') AS VARCHAR(20)),
                                        ISNULL(NSCP.oemPartCost, 0), 0) AS DECIMAL(18, 2)) as TotalCost,   
                                    UPPER(NSCU.costCentre) AS[CC],
                                    ISNULL(UPPER(NSCP.detailedDesc), '') AS[Description],
                                    ISNULL(UPPER(NSCP.keyword), '') AS[KeyWord],
                                    UPPER(NSCU.id) AS[Id],
                                   NSCU.lastModifiedDate AS[LastModifiedDate],
                                    UPPER(NSCU.LastModifiedBy) as LastModifiedBy

                                   --NSCU.ROW
                                FROM
                                    SBCES.NSCPARTSUSED NSCU
                                 JOIN
                                    SBCES.NONSTOCKCODEDPARTS NSCP ON NSCP.Id = NSCU.Id

                                    and NSCP.Id is NOT NULL
                                    and NSCU.Id is NOT NULL
                                Order by LastModifiedDate desc
                                                    ";

                return await _dbConnection.QueryAsync<NscPartsUsedViewModel>(query);
            }
            catch (Exception ex)
            {
                return null;
            }
            
        }

    }
}
ScPartsUsedInEstimatesController.cs :
using Kendo.Mvc.Extensions;
using Kendo.Mvc.UI;
using BCES.Models.Parts;
using BCES.Controllers.Base;
using BCES.Data;
using System.Data;
using Dapper;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using Microsoft.Data.SqlClient;
using BCES.Controllers.Common;
using static Org.BouncyCastle.Pqc.Crypto.Utilities.PqcOtherInfoGenerator;


namespace BCES.Controllers.Parts
{
    public class ScPartsUsedInEstimatesController : BaseController
    {
        private readonly DapperContext _db;
        private readonly IDbConnection _dbConnection;
        private readonly IHttpContextAccessor _httpContextAccessor;


        public ScPartsUsedInEstimatesController(DapperContext dapper, IHttpContextAccessor httpContextAccessor) : base(dapper, httpContextAccessor)
        {
            _db = dapper;
            _dbConnection = _db.CreateConnection();

            _httpContextAccessor = httpContextAccessor;
        }

        [HttpGet]
        [AllowAnonymous]
        public async Task<ActionResult> GetScPartsUsedInEstimates([DataSourceRequest] DataSourceRequest request, [FromQuery] string id, [FromQuery] string gridType)
        {
            // Fetch data for the grid
            ViewBag.ParentId = id;

            if (string.IsNullOrEmpty(id))
            {
                return BadRequest("id is required for :" + gridType);
            }
            ViewBag.ParentId = id;
            if (gridType == "RbGrid")
            {
                var rbNscModel = await GetScPartsUsedInRBEstimates(id, gridType);
                return Json(rbNscModel.ToDataSourceResult(request));
            }
            if (gridType == "VehicleGrid")
            {
                var vehNscmodel = await GetScPartsUsedInVehicleEstimates(id, gridType);
                return Json(vehNscmodel.ToDataSourceResult(request));
            }
            if (gridType == "ArchivedVehicleGrid")
            {
                var vehNscmodel = await GetArchivedScPartsUsedInVehicleEstimates(id, gridType);
                return Json(vehNscmodel.ToDataSourceResult(request));
            }

            return null; //Add exception


        }

        private async Task<IEnumerable<StockCodedPartsViewModel>> GetArchivedScPartsUsedInVehicleEstimates(string partNum, string gridType)
        {
            try
            {
                var query = @"
                            SELECT 
                                ascp.MmsStockCode,
                                ascp.DateEntered AS LastModifiedDate,
                                ascp.RebPartCost,
                                ascp.UserEntered AS LastModifiedBy,
                                ascp.MmsCost AS UnitCost,
                                ascp.OemCost,
                                ascp.MmsRebuiltCode,
                                ascp.CostCentre,
                                ascp.QtyReqd AS Qty,
                                ascp.PercentUsage AS Percentage,
                                ascp.LinkCode,
                                ascp.RebuiltPart,
                                ascp.LinkType,
                                ascp.Corecost,
                                ascp.ArchVehicleListId,
                                ascp.TotalCost,
                                ascp.ScKeyword,
                                ascp.ScDescription,
                                scp.PartType,
                                scp.OrigSupplierName ,
                                scp.OrigSupplierNum ,
                                scp.DetailedDesc 
                            FROM 
                                CES.SBCES.ArchVehScPartsUsed AS ascp
                            JOIN 
                                SBCES.StockCodedParts AS scp ON ascp.MmsStockCode = scp.MmsStockCode
                            WHERE 
                                ascp.LinkType = 'BUS'
                                AND ascp.ArchVehicleListId = @id;";


                var parameters = new { id = partNum };

                var result = await _dbConnection.QueryAsync<StockCodedPartsViewModel>(query, parameters);


                return result;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in GetLabourDetailsData: {ex.Message}");
                throw; // Rethrow the exception for centralized handling
            }
        }
        private async Task<IEnumerable<StockCodedPartsViewModel>> GetScPartsUsedInVehicleEstimates(string id, string gridType)
        {

            try
            {
                ViewBag.ParentId = id;
                var query = @"
                             DECLARE @Id VARCHAR(30) = '" + id + "'" +
                             @"
                               
                                 SELECT 
                                UPPER(SCP.MMSSTOCKCODE) AS MMSStockCode,
                                ISNULL(SCP.MMSCOST, 0) AS UnitCost,
                                ISNULL(SCP.CoreCost, 0) AS CoreCost,
                                UPPER(SCP.QTYREQD) AS Qty,
                                
                                REPLACE(SCP.PERCENTUSAGE, ',', '.') AS [Percentage],
                                REPLACE(
                                    CAST(SBCES.FINALCOST(
                                        CAST(SCP.PERCENTUSAGE AS NUMERIC(18,2)), 
                                        CAST(SCP.QTYREQD AS NUMERIC(18,2)), 
                                        SCP.CORECOST, 
                                        
                                        0
                                    ) AS DECIMAL(18,2)), ',', '.'
                                ) AS CoreCharge,
                                REPLACE(
                                    CAST(SBCES.FINALCOST(
                                        CAST(SCP.PERCENTUSAGE AS NUMERIC(18,2)), 
                                        CAST(SCP.QTYREQD AS NUMERIC(18,2)), 
                                        SCP.MMSCOST, 
                                        0
                                    ) AS DECIMAL(18,2)), ',', '.'
                                ) AS TotalCost,
                                UPPER(SCP.COSTCENTRE) AS CC,
                                ISNULL(UPPER(SCPARTS.DETAILEDDESC), '') AS DetailedDesc,
                                ISNULL(UPPER(SCPARTS.PARTTYPE), '') AS PartType,
                                SCP.OEMCOST AS [OEM COST],
                                SCP.MMSREBUILTCODE AS MMSREBUILTCODE,
                                SCP.REBPARTCOST AS [RebuiltPartCost],
                                UPPER(SCP.REBUILTPART) AS REBUILTPART,
                                SCP.LinkCode,
                                 UPPER(SCP.LastModifiedBy) AS LastModifiedBy,
                                SCP.LastModifiedDate AS LastModifiedDate,
                                SCPARTS.OrigSupplierNum,
                                SCPARTS.OrigSupplierName
                            FROM 
                                SBCES.SCPARTSUSED SCP
                            LEFT JOIN 
                                SBCES.STOCKCODEDPARTS SCPARTS 
                                ON SCPARTS.MMSSTOCKCODE = SCP.MMSSTOCKCODE
                            WHERE 
                                SCP.LINKCODE = @Id 
                                AND SCP.LINKTYPE = 'BUS'
                                AND SCP.MMSSTOCKCODE is NOT NULL
                                AND SCP.RebuiltPart ='N'
                            ORDER BY 
                                SCP.MMSSTOCKCODE;

                                ";

                return await _dbConnection.QueryAsync<StockCodedPartsViewModel>(query);

            }
            catch (Exception ex)
            {
                return null;
            }
        }

        private async Task<IEnumerable<StockCodedPartsViewModel>> GetScPartsUsedInRBEstimates(string id, string gridType)
        {


            try
            {

                var query = @"
                             DECLARE @Id VARCHAR(30) = '" + id + "'" +
                             @"
                               
                                 SELECT 
                                UPPER(SCP.MMSSTOCKCODE) AS MMSSTOCKCODE,
                                ISNULL(SCP.MMSCOST, 0) AS UnitCost,
                                UPPER(SCP.QTYREQD) AS QTY,
                                REPLACE(SCP.PERCENTUSAGE, ',', '.') AS [Percentage],
                                REPLACE(
                                    CAST(SBCES.FINALCOST(
                                        CAST(SCP.PERCENTUSAGE AS NUMERIC(18,2)), 
                                        CAST(SCP.QTYREQD AS NUMERIC(18,2)), 
                                        SCP.CORECOST, 
                                        0
                                    ) AS DECIMAL(18,2)), ',', '.'
                                ) AS CORECOST,
                                REPLACE(
                                    CAST(SBCES.FINALCOST(
                                        CAST(SCP.PERCENTUSAGE AS NUMERIC(18,2)), 
                                        CAST(SCP.QTYREQD AS NUMERIC(18,2)), 
                                        SCP.MMSCOST, 
                                        0
                                    ) AS DECIMAL(18,2)), ',', '.'
                                ) AS TOTALCOST,
                                UPPER(SCP.COSTCENTRE) AS CC,
                                ISNULL(UPPER(SCPARTS.DETAILEDDESC), '') AS DESCRIPTION,
                                ISNULL(UPPER(SCPARTS.PARTTYPE), '') AS KEYWORD,
                                SCP.OEMCOST AS [OEM COST],
                                SCP.MMSREBUILTCODE AS MMSREBUILTCODE,
                                SCP.REBPARTCOST AS [RebuiltPartCost],
                                UPPER(SCP.REBUILTPART) AS REBUILTPART,
                                SCP.LinkCode
    
                            FROM 
                                SBCES.SCPARTSUSED SCP
                            LEFT JOIN 
                                SBCES.STOCKCODEDPARTS SCPARTS 
                                ON SCPARTS.MMSSTOCKCODE = SCP.MMSSTOCKCODE
                            WHERE 
                                SCP.LINKCODE = @Id 
                                AND SCP.LINKTYPE = 'RB'
                            ORDER BY 
                                SCP.MMSSTOCKCODE;

                                ";

                return await _dbConnection.QueryAsync<StockCodedPartsViewModel>(query);

            }
            catch (Exception ex)
            {
                return null;
            }
        }

        [HttpPost]
        [AllowAnonymous]

        public async Task<IActionResult> CreateScPartsUsedInEstimates(
            [FromForm] StockCodedPartsViewModel model,
              [FromQuery] string id,
              [FromQuery] string gridType)
        {
            _dbConnection.Open();
            using var transaction = _dbConnection.BeginTransaction();

            try
            {
                var enteredBy = ViewBag.UserName?.ToString().ToUpper() ?? "SYSTEM";
                var dateEntered = DateTime.Now;
                var linkCode = id;
                string linkType = gridType == "RbGrid" ? "RB" : "BUS";
                var isRebuiltPart = 'N';
                // Change in AJAX call parameters:
                var partData = new
                {
                    id,
                    gridType,
                    model = new
                    {
                        MMSStockCode = model.MMSStockCode,
                        CC = model.CC,
                        Qty = model.Qty,
                        Percentage = model.Percentage,
                        UnitCost = model.UnitCost,
                        CoreCost = model.CoreCost,
                        LinkType = linkType,
                        LinkCode = id
                    }
                };

                //  var model = models.FirstOrDefault(); // only one model expected when Batch(false)
                if (model == null)
                {
                    ModelState.AddModelError("", "No data submitted.");
                    return null; ;
                }

                var mmsStockCode = model.MMSStockCode?.ToUpperInvariant();

                //  Duplicate check
                var duplicateCheckSql = @"
                                SELECT COUNT(*) 
                                FROM SBCES.SCPartsUsed 
                                WHERE UPPER(MMSStockCode) = @MMSStockCode
                                  AND UPPER(LinkCode) = @LinkCode
                                  AND UPPER(LinkType) = @LinkType";

                var duplicateCount = await _dbConnection.ExecuteScalarAsync<int>(
                    duplicateCheckSql,
                    new { MMSStockCode = mmsStockCode, LinkCode = linkCode.ToUpper(), LinkType = linkType },
                    transaction
                );

                if (duplicateCount > 0)
                {
                    ModelState.AddModelError("MMSStockCode", $"MMSStockCode '{mmsStockCode}' already exists for this estimate.");
                    return BadRequest($"MMSStockCode '{mmsStockCode}' already exists for this estimate.");
                }

                var parameters = new DynamicParameters();
                parameters.Add("MMSStockCode", mmsStockCode);
                parameters.Add("CC", model.CC?.ToUpperInvariant() ?? " ");
                parameters.Add("CorePartNumber", model.CorePartNumber?.ToUpperInvariant() ?? " ");
                parameters.Add("EnteredBy", enteredBy);
                parameters.Add("DateEntered", dateEntered);
                parameters.Add("LinkCode", linkCode.ToUpper());
                parameters.Add("LinkType", linkType);
                parameters.Add("RebuiltPartNum", id);
                parameters.Add("IsRebuiltPart", isRebuiltPart);
                parameters.Add("UnitCost", model.UnitCost ?? 0m);
                parameters.Add("MmsNewCost", model.MmsNewCost ?? 0m);
                parameters.Add("CoreCost", model.CoreCost ?? 0m);
                parameters.Add("RebPartCost", model.PartCost ?? 0m);
                parameters.Add("LastModifiedBy", enteredBy);
                parameters.Add("LastModifiedDate", dateEntered);
                parameters.Add("Qty", (model.Qty));
                parameters.Add("Percentage", (model.Percentage));
                parameters.Add("OrigSupplierNum", (model.OrigSupplierNum ?? "0").ToUpperInvariant());
                parameters.Add("OrigSupplierName", (model.OrigSupplierName ?? "").ToUpperInvariant());
                parameters.Add("DetailedDesc", (model.DetailedDesc ?? "").ToUpperInvariant());
                parameters.Add("PartType", (model.PartType ?? "").ToUpperInvariant());

                var sql = @"
            INSERT INTO SBCES.SCPartsUsed (
                MMSStockCode, DateEntered, EnteredBy, MMSCost, OEMCost,
                LastModifiedBy, LastModifiedDate, CostCentre, QtyReqd,
                PercentUsage, LinkCode, RebuiltPart, LinkType, MMSRebuiltCode,
                CoreCost, RebPartCost, OrigSupplierName, OrigSupNum
            ) VALUES (
                UPPER(@MMSStockCode), 
                @LastModifiedDate, 
                UPPER(@EnteredBy),
                @UnitCost, 
                @MmsNewCost,
                UPPER(@LastModifiedBy), 
                @LastModifiedDate, 
                UPPER(@CC),
                UPPER(@Qty), 
                UPPER(@Percentage),
                UPPER(@LinkCode), 
                UPPER(@IsRebuiltPart), 
                UPPER(@LinkType),
                UPPER(@RebuiltPartNum), 
                @CoreCost,
                @RebPartCost,
                UPPER(@OrigSupplierName),
                UPPER(@OrigSupplierNum)                               
            )";

                await _dbConnection.ExecuteAsync(sql, parameters, transaction);
                transaction.Commit();

                if (gridType == "VehicleGrid")
                {
                    await VehicleListEstimatesUpdater.UpdateVehicleCostsAsync(_dbConnection, id);
                }

                return StatusCode(200, $"success");
            }
            catch (SqlException sqlEx)
            {
                transaction.Rollback();
                ModelState.AddModelError("", $"Database error: {sqlEx.Message}");
                // return Json(models.ToDataSourceResult(request, ModelState));
                return StatusCode(500, $"failed");
            }
            catch (Exception ex)
            {
                transaction.Rollback();
                ModelState.AddModelError("", $"Unexpected error: {ex.Message}");
                //return Json(models.ToDataSourceResult(request, ModelState));
                return StatusCode(500, $"Delete failed: {ex.Message}");
            }
        }

        [AcceptVerbs("Post")]
        [AllowAnonymous]
        public async Task<IActionResult> UpdateScPartsUsedInEstimates(
            [FromBody] StockCodedPartsViewModel model,
            [FromQuery] string id,
            [FromQuery] string gridType)
        {

            string linkType = string.Empty;
            if (gridType == "RbGrid")
            {
                linkType = "RB";
            }
            if (gridType == "VehicleGrid")
            {
                linkType = "BUS";
            }
            if (!ModelState.IsValid)
            {
                return StatusCode(500, $"failed");
                // return Json(models.ToDataSourceResult(request, ModelState));
            }
            _dbConnection.Open();
            using var transaction = _dbConnection.BeginTransaction();
            try
            {
                var enteredBy = ViewBag.UserADId?.ToString().ToUpper() ?? "SYSTEM";
                var dateModified = DateTime.Now;

                //foreach (var model in models)
                {
                    var parameters = new DynamicParameters();
                    parameters.Add("MMSStockCode", model.MMSStockCode?.ToUpperInvariant());
                    parameters.Add("CC", model.CC?.ToUpperInvariant() ?? " ");
                    parameters.Add("UnitCost", model.UnitCost ?? 0m);
                    parameters.Add("Qty", (model.Qty));
                    parameters.Add("Percentage", (model.Percentage));
                    parameters.Add("CoreCost", model.CoreCost ?? 0m);
                    parameters.Add("RebuiltPartNum", id?.ToUpperInvariant());
                    parameters.Add("LastModifiedBy", ViewBag.UserName);
                    parameters.Add("LastModifiedDate", DateTime.Now);
                    parameters.Add("LinkType", linkType);
                    parameters.Add("LinkCode", model.LinkCode);

                    var sql = @"
                                UPDATE SBCES.SCPartsUsed 
                                SET 
                                    CostCentre = UPPER(@CC),
                                    MMSCost = @UnitCost,
                                    QtyReqd = UPPER(@Qty),
                                    PercentUsage = UPPER(@Percentage),
                                    CoreCost = @CoreCost,
                                    LastModifiedBy = @LastModifiedBy,
                                    LastModifiedDate = @LastModifiedDate
                                WHERE 
                                    MMSStockCode = @MMSStockCode
                                    AND LinkCode = @LinkCode
                                    AND LinkType = @LinkType
                                    
                                    ";

                    await _dbConnection.ExecuteAsync(sql, parameters, transaction);
                }


                transaction.Commit();

                if (gridType == "VehicleGrid")
                {
                    //update estimates
                    await VehicleListEstimatesUpdater.UpdateVehicleCostsAsync(_dbConnection, id);
                }
                return StatusCode(200, $"success");
                // return Json(models.ToDataSourceResult(request));
            }
            catch (Exception ex)
            {
                transaction.Rollback();
                ModelState.AddModelError("", $"Error updating record: {ex.Message}");
                //return Json(models.ToDataSourceResult(request, ModelState));
                return StatusCode(500, $"failed");
            }
        }


        [HttpPost]
        [AllowAnonymous]
        public async Task<IActionResult> DeleteScPartsUsedInEstimates(
             string id,
             string partNum,
             string gridType)
        {
            try
            {
                string pid = ViewBag.PartNum;
                string pid2 = ViewBag.ParentId;
                _dbConnection.Open();
                using var transaction = _dbConnection.BeginTransaction();

                string sql = @"DELETE FROM SBCES.SCPartsUsed 
                         WHERE MMSStockCode ='" + partNum + "'" +
                            " AND LinkCode = '" + id + "'"  +
                            " AND LinkType = 'BUS'";

                var parameters = new 
                {
                    id,
                    partNum,
                    gridType = gridType == "VehicleGrid" ? "BUS" : "RB"
                };

                int affectedRows = await _dbConnection.ExecuteAsync(sql, parameters, transaction);
                transaction.Commit();

                if (gridType == "VehicleGrid")
                {
                    await VehicleListEstimatesUpdater.UpdateVehicleCostsAsync(_dbConnection, partNum);
                }

                return Json(new { success = affectedRows > 0 });
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Delete failed: {ex.Message}");
            }
        }


        [AllowAnonymous]
        public async Task<IActionResult> GetScPartUsedDetail(string mmsStockCode, string vehicleListId)
        {
            try
            {
                var query = @"
            SELECT 
                scp.MMSStockCode,
                scp.PartType,
                scp.OrigSupplierNum,
                scp.OrigSupplierName,
                scp.DetailedDesc AS PartDescription,
                scp.MmsNewCost AS UnitCost,
                scp.CoreCost,
                scused.CostCentre,
                scused.QtyReqd AS Qty,
                scused.PercentUsage AS Percentage,
                scused.LastModifiedBy AS ModBy,
                scused.LastModifiedDate AS ModDate,
                dbo.FINALCOST(CAST(scused.PercentUsage AS NUMERIC(18,2)), 
                    CAST(scused.QtyReqd AS NUMERIC(18,2)), 
                    scp.MmsNewCost, 0) AS TotalCost
            FROM SBCES.SCPartsUsed scused
            INNER JOIN SBCES.StockCodedParts scp 
                ON scused.MMSStockCode = scp.MMSStockCode
            WHERE scused.MMSStockCode = @mmsStockCode 
                AND scused.LinkCode = @vehicleListId
                AND scused.LinkType = 'BUS'
                AND scused.RebuiltPart = 'N'";

                var part = await _dbConnection.QueryFirstOrDefaultAsync<StockCodedPartsViewModel>(
                    query,
                    new { mmsStockCode, vehicleListId });

                return part != null
                    ? Json(part)
                    : NotFound();
            }
            catch (Exception ex)
            {
                return StatusCode(500, ex.Message);
            }
        }


        [AllowAnonymous]
        [HttpGet]
        public async Task<IActionResult> GetScPartUsedDetail(
    [FromQuery] string mmsStockCode,
    [FromQuery] string vehicleListId,
    [FromQuery] string gridType)
        {
            try
            {
                var query = @"
            SELECT 
                scp.MMSStockCode,
                scp.PartType,
                scp.OrigSupplierNum,
                scp.OrigSupplierName,
                scp.DetailedDesc AS PartDescription,
                scp.MmsNewCost AS UnitCost,
                scused.CoreCost,  -- Changed to scused (SCPartsUsed table)
                scused.CostCentre,
                scused.QtyReqd AS Qty,
                scused.PercentUsage AS Percentage,
                scused.LastModifiedBy AS ModBy,
                scused.LastModifiedDate AS ModDate,
                dbo.FINALCOST(
                    CAST(scused.PercentUsage AS NUMERIC(18,2)), 
                    CAST(scused.QtyReqd AS NUMERIC(18,2)), 
                    scp.MmsNewCost, 0
                ) AS TotalCost
            FROM SBCES.SCPartsUsed scused
            INNER JOIN SBCES.StockCodedParts scp 
                ON scused.MMSStockCode = scp.MMSStockCode
            WHERE scused.MMSStockCode = @mmsStockCode 
                AND scused.LinkCode = @vehicleListId
                AND scused.LinkType = @linkType
                AND scused.RebuiltPart = 'N'";

                // Map gridType to database link type
                var linkType = gridType == "VehicleGrid" ? "BUS" :
                              gridType == "RbGrid" ? "RB" :
                              gridType == "ArchivedVehicleGrid" ? "BUS" : "BUS";

                var part = await _dbConnection.QueryFirstOrDefaultAsync<StockCodedPartsViewModel>(
                    query,
                    new
                    {
                        mmsStockCode,
                        vehicleListId,
                        linkType
                    });

                return part != null
                    ? Json(part)
                    : NotFound();
            }
            catch (Exception ex)
            {
                return StatusCode(500, ex.Message);
            }
        }
    }
}


You are ASP.NET core, Telerik ASP.NET core, UI/UX, Javascript and css exert.
Pls assist me in the following 
1. Add  new vehicle
When Vehicle is saved sucesssfully, Parts Summary, LabourSummary, Labour  Details, Stock Coded Parts, Non Stock Coded PArts, rebuilt Parts, Final esitmate tabs should be active
2. Stock coded parts, when user clicks on stock code in Stock coded parts Used grid, Edit Stock coded parts should populate. Controler code is below
3. Add/Edit Stock coded parts popup :
Need Stock code, PartType, Unit Cost, in one row ( 2 columns each)
Part Description  in one row (4 columns)
Supplier Information section
Cost centre, supplier Num, Supplier Name should be in one row ( 2columns each)
History section :
Modified By, Modified Date shuld be in one row (2 columns each)
Pls adjust css accourdingly. 
4. Update/Cancel Button for Stock Coded Parts Popup should be at top left.
5. Look and feel of  Stock coded parts popup and Final Estimate tab must be same.
Vehicle-estimate.css :
/* ==========================================
   THEME VARIABLES (use these for consistency)
========================================== */
:root {
    --blue-primary: #1e88e5;
    --blue-secondary: #64b5f6;
    --blue-light: #e3f2fd;
    --blue-dark: #0d47a1;
    --grey-light: #f8fafc;
    --grey-border: #d1d5db;
    --popup-z-index: 10000;
    --overlay-z-index: 9999;
    --font-small: 11px;
    --font-normal: 12px;
    --font-section: 14px;
}

/* ==========================================
   POPUP WINDOWS
========================================== */
.k-window {
    background-color: #e6f2ff !important; /* no transparency */
    border: 1px solid var(--blue-secondary) !important;
}

/* Ensure popup content stays contained */
#estimatePopup,
.popup-container {
    width: 1100px !important;
    max-width: 95%;
    max-height: 80vh;
    overflow: hidden;
    background: #fff;
    border-radius: 4px;
}

/* Fix Stock Coded popup not centered */
.k-window-wrapper {
    left: 50% !important;
    transform: translateX(-50%) !important;
}

/* ==========================================
   SECTION TITLES (Vehicle Info, Specifications, etc.)
========================================== */
.vehicle-section-title,
.section-title,
.confirmation-title {
    font-size: var(--font-section);
    font-weight: 600;
    margin: 15px 0 8px 0;
    display: flex;
    align-items: center;
    gap: 6px;
    color: #2c3e50;
}

    /* Add the vertical blue bar */
    .vehicle-section-title::before,
    .section-title::before,
    .confirmation-title::before {
        content: "";
        display: block;
        width: 4px;
        height: 14px;
        background: var(--blue-primary);
        border-radius: 2px;
    }

/* ==========================================
   FORM LAYOUT (3 columns for Vehicle tab)
========================================== */
.vehicle-form-row,
.form-row {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 8px;
    margin-bottom: 8px;
}

.vehicle-form-group,
.form-group {
    display: flex;
    flex-direction: column;
}

    .vehicle-form-group.vehicle-double-width,
    .form-group.double-width {
        grid-column: span 2;
    }

/* ==========================================
   LABELS
========================================== */
.vehicle-form-label,
.form-label {
    font-size: var(--font-small);
    font-weight: 600;
    margin-bottom: 2px;
    color: #2c3e50;
}

.vehicle-form-row.audit-info .vehicle-form-label {
    font-size: var(--font-small);
    color: #555;
}

.required-label::after,
.required-header::after {
    content: " *";
    color: #e74c3c;
}

/* ==========================================
   INPUT CONTROLS (Compact like Stock Coded Parts)
========================================== */
.vehicle-form-control,
.k-input-inner,
.k-combobox .k-input-inner,
.k-numerictextbox input.k-input-inner,
.k-datepicker .k-input-inner,
.k-textbox {
    height: 20px !important; /* 50% less height */
    line-height: 18px !important;
    font-size: var(--font-normal) !important;
    padding: 2px 4px !important;
}

.k-combobox,
.k-numerictextbox,
.k-datepicker,
.k-textbox {
    height: 24px !important;
    font-size: var(--font-normal);
}

/* Readonly fields */
.read-only,
.k-state-disabled {
    background-color: var(--grey-light) !important;
    color: #4b5563 !important;
}

/* Combobox dropdown */
.k-list-container {
    background: #fff !important;
    border: 1px solid var(--blue-secondary) !important;
}

    .k-list-container .k-list-item {
        font-size: var(--font-normal);
        padding: 4px 8px;
    }

        .k-list-container .k-list-item:hover,
        .k-list-container .k-list-item.k-state-selected {
            background: var(--blue-light) !important;
        }

/* ==========================================
   TABS
========================================== */
#estimateTabs {
    height: 50% !important; /* reduce height */
}

    #estimateTabs .k-tabstrip-items .k-link {
        font-weight: 600 !important;
        font-size: var(--font-normal);
        color: #000 !important;
    }

    #estimateTabs .k-tabstrip-items .k-state-active .k-link {
        background-color: var(--blue-light) !important;
        color: #000 !important;
    }

    #estimateTabs .k-tabstrip-items .k-link:hover {
        background: var(--blue-secondary) !important;
        color: #000;
    }

/* ==========================================
   GRIDS
========================================== */
.k-grid {
    font-size: var(--font-normal);
}

.k-grid-toolbar {
    background: var(--blue-light) !important;
    padding: 4px 8px;
}

    .k-grid-toolbar .k-button {
        background: var(--blue-primary);
        border: 1px solid var(--blue-dark);
        color: #fff !important;
        font-size: var(--font-normal);
        height: 28px;
        padding: 2px 10px;
    }

.k-grid-content .k-button {
    font-size: var(--font-small);
    padding: 2px 6px;
    height: 24px;
    background: #f0f6ff;
    border: 1px solid var(--blue-secondary);
}

    .k-grid-content .k-button:hover {
        background: var(--blue-light);
    }

/* ==========================================
   CONFIRMATION / COPY DIALOGS
========================================== */
.k-window[aria-label="Confirm Delete"],
.k-window[aria-label="Copy Estimate"] {
    background: #f9fbff !important;
    border: 1px solid var(--blue-secondary);
}

.confirmation-title {
    font-size: var(--font-normal);
    font-weight: 600;
    margin-bottom: 10px;
}

.k-window .k-button.k-primary {
    background: var(--blue-primary);
    border-color: var(--blue-dark);
    color: #fff;
}

    .k-window .k-button.k-primary:hover {
        background: var(--blue-dark);
    }

.k-window .k-button:not(.k-primary) {
    background: #f0f0f0;
    color: #000;
}
/* ==========================================
   POPUP WINDOWS (all modals unified)
========================================== */
.k-window {
    background-color: #ffffff !important; /* white background */
    border: 1px solid #b3d1ff !important;
    box-shadow: 0 4px 20px rgba(0,0,0,0.15);
}

/* Ensure popup content is white, no transparency */
#estimatePopup,
.popup-container,
.k-window-content {
    background-color: #ffffff !important;
}

/* ==========================================
   TAB HEADERS (reduce height to 50%)
========================================== */
#estimateTabs .k-tabstrip-items .k-link {
    min-height: 20px !important; /* reduce default ~40px */
    line-height: 18px !important;
    padding: 2px 8px !important;
    font-size: 12px !important;
    font-weight: 600 !important;
    color: #000 !important;
}

/* Active tab */
#estimateTabs .k-tabstrip-items .k-state-active .k-link {
    background-color: #e6f2ff !important; /* light blue */
    border-radius: 3px 3px 0 0;
}

/* Hover effect */
#estimateTabs .k-tabstrip-items .k-link:hover {
    background-color: #cce0ff !important;
}

/* ==========================================
   TAB CONTENT AREA
========================================== */
#estimateTabs .k-content {
    background-color: #ffffff !important; /* white body */
    padding: 10px;
    border: 1px solid #b3d1ff;
    border-top: none;
}
/* ==========================================
   TABS → Sleek Ribbon Style
========================================== */
#estimateTabs .k-tabstrip-items {
    display: flex;
    background: #f5faff; /* very light blue ribbon */
    border-bottom: 1px solid #b3d1ff;
    padding: 0;
    margin: 0;
}

    #estimateTabs .k-tabstrip-items .k-item {
        margin: 0;
        padding: 0;
        border: none;
    }

    #estimateTabs .k-tabstrip-items .k-link {
        font-size: 12px;
        font-weight: 600;
        color: #000;
        padding: 4px 12px !important; /* sleek padding */
        min-height: 18px !important; /* slim height */
        line-height: 16px !important;
        border-radius: 0;
        transition: background 0.2s ease-in-out;
    }

        /* Hover */
        #estimateTabs .k-tabstrip-items .k-link:hover {
            background: #e6f2ff !important;
            color: #000;
        }

    /* Active tab */
    #estimateTabs .k-tabstrip-items .k-state-active .k-link {
        background: #cce0ff !important;
        border-bottom: 2px solid #1e88e5;
        font-weight: 700;
    }
/* Stock Coded Parts popup */
.scparts-popup-style .k-window-content {
    padding: 15px !important;
    max-height: 75vh;
    overflow-y: auto;
}

/* Stock Coded Parts popup */
.scparts-popup-style .k-window-content {
    padding: 15px !important;
    max-height: 75vh;
    overflow-y: auto;
}

/* Stock Coded Parts popup → 3 columns per row */
.scparts-popup-style .form-row {
    display: grid;
    grid-template-columns: repeat(4, 1fr); /* ✅ 3 columns */
    gap: 12px;
    margin-bottom: 10px;
}

.scparts-popup-style .form-group {
    display: flex;
    flex-direction: column;
}
/* Popup form section layout */
.scparts-popup-style .form-row {
    display: grid;
    grid-template-columns: repeat(4, 4fr); /* 3 columns */
    gap: 12px;
    margin-bottom: 12px;
}

/* All inputs same width */


/* For big fields like Description or Supplier Name */
.scparts-popup-style .double-width {
    grid-column: span 2;
}

.scparts-popup-style .triple-width {
    grid-column: span 2;
}

.scparts-popup-style .full-width {
    grid-column: span 4;
}
.scparts-popup-style .section-title {
    grid-column: span 8; /* ✅ force to take full width */
    font-size: 14px;
    font-weight: bold;
    margin: 16px 0 8px;
}

_ScPartsUsed.cshtml ;
    @model IEnumerable<BCES.Models.Parts.StockCodedPartsViewModel>

@{
    ViewData["Title"] = "Stock Coded Parts Details";
    var scGridName = $"ScPartsMaterialDetailsRebuiltPartsGrid";
    bool isArchived = ViewBag.GridType == "ArchivedVehicleGrid"; //ArchiveDisable
    bool isAdmin = ViewBag.RoleId == 1; //ArchiveDisable
    ViewBag.scGridName = scGridName;
    string gridName = $"ScPartsMaterialDetailsRebuiltPartsGrid_{ViewBag.PartNum}"; //for JS
}
<script>
    // Store grid name for JavaScript access
    var scInEstimateGridName = '@gridName';
</script>
<input type="hidden" id="scGridNameField" value="@scGridName" /> @* save gridname in hidden field for JS *@
<h6>Stock Coded Parts Used</h6>

@(
Html.Kendo().Grid<BCES.Models.Parts.StockCodedPartsViewModel>()    
     .Name($"ScPartsMaterialDetailsRebuiltPartsGrid_{ViewBag.PartNum}") 
     .HtmlAttributes(new { data_grid_type = ViewBag.GridType?.ToString() ?? "RbGrid" }) //lockcols
      
    .Columns(columns =>
    {
       // columns.Bound(c => c.MMSStockCode).Title("Stock Code").IncludeInMenu(false).EditorTemplateName("ComboBoxEditor").Width(70);
        columns.Bound(c => c.MMSStockCode)
                        .Title("Stock Code")
                        .HtmlAttributes(new { @class = "stock-code-cell", data_field = "MMSStockCode" })
                        .IncludeInMenu(false)
                        .HeaderHtmlAttributes(new { @class = "required-header" })
                        .HtmlAttributes(new { @class = "required-cell", required = "required" })
                        .EditorTemplateName("ScComboBox")
                        .Width(180);
      @*  columns.Command(command =>
        {
            command.Custom("Populate Details").Click("refreshScPartDetails").IconClass("k-i-reload").HtmlAttributes(new { @class = "k-button k-button-icontext" });

        }).Width(60); *@
        columns.Bound(c => c.PartType)
    .Title("Part Type")
    .Width(150)
    .EditorTemplateName("ComboBoxEditor")
    .EditorViewData(new Dictionary<string, object> {
            { "LockMap", "RbGrid:always;MakevsBuy:notNew;VehicleGrid:always" } //lockcols
        })
    ;

        columns.Bound(c => c.OrigSupplierNum)
        .Title("Supplier Num")
        .Width(150)
        .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains")
        .SuggestionOperator(FilterType.Contains)))
        .EditorTemplateName("ComboBoxEditor")
        .EditorViewData(new Dictionary<string, object> {
            { "LockMap", "RbGrid:always;MakevsBuy:notNew;VehicleGrid:always" } //lockcols
        })
        ;
        columns.Bound(c => c.OrigSupplierName)
        .Title("Supplier Name")
        .Width(150)
        .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains")
        .SuggestionOperator(FilterType.Contains)))
        .EditorTemplateName("ComboBoxEditor")
        .EditorViewData(new Dictionary<string, object> {
            { "LockMap", "RbGrid:always;MakevsBuy:notNew;VehicleGrid:always" } //lockcols
        })
        ;
        columns.Bound(c => c.DetailedDesc)
        .Title("Part Description")
        .Width(150)
        .EditorTemplateName("ComboBoxEditor")
        .EditorViewData(new Dictionary<string, object> {
            { "LockMap", "RbGrid:always;MakevsBuy:notNew;VehicleGrid:always" } //lockcols
        })
        ;

        columns.Bound(c => c.UnitCost)
        .Title("Part Unit Cost")
        .Width(90)
        .Format("{0:C2}")
        .EditorTemplateName("ComboBoxEditor")
        .EditorViewData(new Dictionary<string, object> {
            { "LockMap", "RbGrid:always;MakevsBuy:notNew;VehicleGrid:always" } //lockcols
        })
        .HtmlAttributes(new { data_br = "MustBeNumeric,NoSpecialCharacters,MustBePositive" });
        ;

        columns.Bound(c => c.CoreCost)
        .Title("Core Cost")
        .Width(90)
        .Format("{0:C2}")
        // .EditorTemplateName("ComboBoxEditor")
        .EditorViewData(new Dictionary<string, object> {
            { "LockMap", "RbGrid:always;MakevsBuy:notNew;VehicleGrid:notNew" } //lockcols 
        })
        .HtmlAttributes(new { data_br = "MustBeNumeric,NoSpecialCharacters,MustBePositive" });
        ;

        columns.Bound(c => c.CC).Title("Cost Centre")
        .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains")
        .SuggestionOperator(FilterType.Contains)))
        .EditorTemplateName("ComboBoxEditor")
        .HeaderHtmlAttributes(new { @class = "required-header" })
        .HtmlAttributes(new { @class = "required-cell", required = "required" })
        .Width(120); ;

        columns.Bound(c => c.Qty).Title("Qty").Width(70)
        .HeaderHtmlAttributes(new { @class = "required-header" })
        .HtmlAttributes(new { @class = "required-cell", required = "required" })
        .HtmlAttributes(new { data_br = "MustBeNumeric,NoSpecialCharacters,MustBePositive" });

        columns.Bound(c => c.Percentage).Title("%").Width(70)
        .HeaderHtmlAttributes(new { @class = "required-header" })
        .HtmlAttributes(new { @class = "required-cell", required = "required" })
        .HtmlAttributes(new { data_br = "MustBeNumeric,NoSpecialCharacters,MustBePositive, MustBePercentage" });

       @*  columns.Bound(c => c.CoreCharge)
       .Title("Total Core Cost")
       .Width(90)
       .EditorTemplateName("ComboBoxEditor")
       .EditorViewData(new Dictionary<string, object> {
            { "LockMap", "RbGrid:always;MakevsBuy:notNew;VehicleGrid:always" } //lockcols
       })
       ; *@
        columns.Bound(c => c.TotalCost)
        .Title("Total Cost")
        .Width(90)
        .Format("{0:C2}")
        .Editable("false")
        .EditorTemplateName("ComboBoxEditor")
        .EditorViewData(new Dictionary<string, object> {
            { "LockMap", "RbGrid:always;MakevsBuy:notNew;VehicleGrid:always" } //lockcols
        })
        ;
        
        columns.Bound(c => c.LinkCode).Hidden(true);

        
             
        @* columns.Bound(c => c.CoreCost)
        .Title("Core Cost")
        .Format("{0:N2}")
        .Width(140);  *@

        columns.Bound(c => c.LastModifiedBy)
        .Title("Modified By")
        .EditorTemplateName("ComboBoxEditor")
        .ClientTemplate("#= LastModifiedBy && LastModifiedBy !== 0 ? LastModifiedBy : '(System Generated)' #")
        .EditorViewData(new Dictionary<string, object> {
            { "LockMap", "RbGrid:always;MakevsBuy:notNew;VehicleGrid:always" } //lockcols
        })
        .Width(160);
        columns.Bound(c => c.LastModifiedDate)
        .Title("Modified Date")
        .Width(160)
        .EditorTemplateName("ComboBoxEditor")
        .ClientTemplate("#=  LastModifiedDate !== 0 ? formatToEST(LastModifiedDate) : '(System Generated)' #")
        .EditorViewData(new Dictionary<string, object> {
            { "LockMap", "RbGrid:always;MakevsBuy:notNew;VehicleGrid:always" } //lockcols
        });
       // .Format("{0:MMMM dd, yyyy HH:mm:ss}"); //  format dateTime;;
     //   columns.Bound(c => c.TotalCost).Title("Total Cost").Format("{0:N2}").Width(100); ;
      
       
        // columns.Bound(c => c.DateRevised).Title("Date Revised");
       @*  columns.Command(command =>
        {
            if (@ViewBag.RoleId == 1)
            {
               // command.Edit().Text(" ").IconClass("k-icon k-i-edit").HtmlAttributes(new { title = "Edit" }); // Edit button with tooltip
            }
            if (@ViewBag.RoleId == 1)
            {

                command.Destroy().Text(" ").IconClass("k-icon k-i-delete").HtmlAttributes(new { title = "Delete" }); // Delete button with tooltip
            }
        }).Width(100); *@
        columns.Command(command =>
        {
            
            if (!isArchived && isAdmin) //ArchiveDisable
            {

                command.Custom("Delete")
                 .Click("showDeleteConfirmation")
                 .Text(" ")
                 .IconClass("k-icon k-i-delete")
                 .HtmlAttributes(new
                 {
                     @class = "text-danger",
                     title = "Delete",
                     data_grid = $"ScPartsMaterialDetailsRebuiltPartsGrid",
                     data_url = Url.Action("DeleteScPartsUsedInEstimates", "ScPartsUsedInEstimates"),
                     data_id_field = "id",
                     //  data_mmsstockcode_field = "parentPartId",
                     data_grid_type = "SCPartGrid"
                 });
            }
        }).Width(100);
    })
  
     .ToolBar(toolbar =>
    {
        if (!isArchived && isAdmin) //ArchiveDisable
        {
            toolbar.Create();
          //  toolbar.Save();
        }
    })
    .Editable(editable => editable.Mode(GridEditMode.PopUp)
                   .Window(w => w.Width("600px").Title("Edit Vehicle")))
    @* .Editable(editable => editable
                    .Mode(isArchived ? GridEditMode.PopUp : GridEditMode.PopUp).Window(w => w.Width("600px")
                    .Enabled(!isArchived)
                    
                ) *@

    .Pageable(p => p
    .PageSizes(new int[] { 1, 10, 20, 50 }) // Dropdown options
    .Position(GridPagerPosition.Bottom)

    )
    .Sortable()
    .Events(e => e.Edit("onScPartsEdit"))
    .Resizable(r => r.Columns(true))
    //.Scrollable()
    .DataSource(dataSource => dataSource
        .Ajax()
        .Batch(false)
        .ServerOperation(false)
        .Model(model =>
        {
            model.Id(c => c.MMSStockCode); 
            model.Field(c => c.MMSStockCode);
            model.Field(c => c.UnitCost);
            model.Field(c => c.LastModifiedBy).Editable(false);
            model.Field(c => c.LastModifiedDate).Editable(false);
         //   model.Field(c => c.PartType).Editable(false);
         //   model.Field(c => c.DetailedDesc).Editable(false);
        })

       

        .Read(read => read.Url(Url.Action("GetScPartsUsedInEstimates", "ScPartsUsedInEstimates") + "?id=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Get))
        .Create(create => create.Url(Url.Action("CreateScPartsUsedInEstimates", "ScPartsUsedInEstimates") + "?id=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Post))
        .Update(update => update.Url(Url.Action("UpdateScPartsUsedInEstimates", "ScPartsUsedInEstimates") + "?id=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Post))
        .Destroy(delete => delete.Url(Url.Action("DeleteScPartsUsedInEstimates", "ScPartsUsedInEstimates") + "?id=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Post))
    )
)

@(Html.Kendo().Dialog()
    .Name("partDetailsDialog")
    .Title("Part Details")
    .Width(400)
    .Modal(true)
    .Visible(false)
    .Actions(actions =>
    {
        actions.Add().Text("Close").Primary(true);
    })
)

StockCodedPartsViewModel.cshtml (PopUp)
@model BCES.Models.Parts.StockCodedPartsViewModel

@{
    var mdl = Model ?? new BCES.Models.Parts.StockCodedPartsViewModel();
    bool isNew = string.IsNullOrEmpty(mdl.MMSStockCode);
}

<div id="notification"></div>
<div class="popup-container">
   @*  <div class="popup-header">
        <div class="popup-title">@(isNew ? "Add New Stock Coded Part" : $"Edit Part - {mdl.MMSStockCode}")</div>
        <div class="tab-actions">
            <button id="btnSavePart" class="k-button k-primary" type="button" onclick="saveScPartPopup()">
                <span class="k-icon k-i-save"></span> Save
            </button>
            <button id="btnCancelPart" class="k-button" type="button" onclick="cancelScPartPopup()">
                <span class="k-icon k-i-cancel"></span> Cancel
            </button>
        </div>
    </div> *@

    <div class="form-container">
        <form id="scPartsForm">
            @Html.HiddenFor(m => m.LinkCode)

            <!-- Row 1 -->
            <div class="section-title">Part Information</div>
            <div class="form-row">
                <div class="double-width form-group">
                        @Html.LabelFor(m => m.MMSStockCode, "Stock Code", new { @class = "form-label required-label" })
                        @Html.EditorFor(m => m.MMSStockCode, "ScComboBox", new
                        {
                            htmlAttributes = new { required = "required" }
                        })
                    </div>
                <div class="double-width form-group">
                    @Html.LabelFor(m => m.PartType, "Part Type", new { @class = "form-label" })
                    @(Html.Kendo().TextBoxFor(m => m.PartType)
                        .HtmlAttributes(new { @readonly = "readonly", data_val = "false"}))
                </div>
                <div class="double-width form-group">
                    @Html.LabelFor(m => m.UnitCost, "Unit Cost", new { @class = "form-label" })
                    @(Html.Kendo().NumericTextBoxFor(m => m.UnitCost)
                        .Format("c2"))
                       
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.DetailedDesc, "Part Description", new { @class = "form-label" })
                    @(Html.Kendo().TextBoxFor(m => m.DetailedDesc)
                        .HtmlAttributes(new { @readonly = "readonly", data_val = "false"}))
                </div>
                
               
             </div>
            <!-- Row 2 -->
            
              <div class="section-title">Supplier Information</div>
                <div class="form-row">
                    <div class="form-group">
                        @Html.LabelFor(m => m.CC, "Cost Centre", new { @class = "form-label required-label" })
                        @Html.EditorFor(m => m.CC, "ComboBoxEditor", new
                        {
                            htmlAttributes = new { required = "required" }
                        })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.OrigSupplierNum, "Supplier Num", new { @class = "form-label" })
                        @(Html.Kendo().TextBoxFor(m => m.OrigSupplierNum)
                            .HtmlAttributes(new { @readonly = "readonly", data_val = "false"}))
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.OrigSupplierName, "Supplier Name", new { @class = "form-label" })
                        @(Html.Kendo().TextBoxFor(m => m.OrigSupplierName)
                            .HtmlAttributes(new { @readonly = "readonly", data_val = "false" }))
                    </div>
                </div>
                         
                <!-- Row 3 -->
             <div class="section-title">Cost Information</div>

                <div class="form-row">                

                    <div class="form-group">
                        @Html.LabelFor(m => m.CoreCost, "Core Cost", new { @class = "form-label" })
                        @(Html.Kendo().NumericTextBoxFor(m => m.CoreCost)
                            .Format("c2"))
                            
                    </div>
                        <div class="form-group">
                            @Html.LabelFor(m => m.Qty, "Quantity", new { @class = "form-label required-label" })
                            @(Html.Kendo().NumericTextBoxFor(m => m.Qty)
                                .Format("n0")
                                .HtmlAttributes(new {  required = "required" }))
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(m => m.Percentage, "%", new { @class = "form-label required-label" })
                            @(Html.Kendo().NumericTextBoxFor(m => m.Percentage)
                                .Format("n0")
                                .Min(0).Max(100)
                                .HtmlAttributes(new {  required = "required" }))
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(m => m.TotalCost, "Total Cost", new { @class = "form-label" })
                            @(Html.Kendo().NumericTextBoxFor(m => m.TotalCost)
                                .Format("c2")
                                .HtmlAttributes(new { @readonly = "readonly", data_val = "false"}))
                        </div>
                
                </div>
                

                <!-- Row 4 -->                
                <div class="section-title">History</div>
                  <div class="form-row">
                        <div class="form-group">
                            @Html.LabelFor(m => m.LastModifiedBy, "Modified By", new { @class = "form-label" })
                            @(Html.Kendo().TextBoxFor(m => m.LastModifiedBy)
                                .HtmlAttributes(new { @readonly = "readonly", data_val = "false"}))
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(m => m.LastModifiedDate, "Modified Date", new { @class = "form-label" })
                            @(Html.Kendo().TextBoxFor(m => m.LastModifiedDate)
                                .HtmlAttributes(new { @readonly = "readonly", data_val = "false" }))
                        </div>
                  </div>
           
            
        </form>
    </div>
</div>
Controller :
[AcceptVerbs("Post")]
[AllowAnonymous]
public async Task<IActionResult> UpdateScPartsUsedInEstimates(
    [FromBody] StockCodedPartsViewModel model,
    [FromQuery] string id,
    [FromQuery] string gridType)
{

    string linkType = string.Empty;
    if (gridType == "RbGrid")
    {
        linkType = "RB";
    }
    if (gridType == "VehicleGrid")
    {
        linkType = "BUS";
    }
    if (!ModelState.IsValid)
    {
        return StatusCode(500, $"failed");
        // return Json(models.ToDataSourceResult(request, ModelState));
    }
    _dbConnection.Open();
    using var transaction = _dbConnection.BeginTransaction();
    try
    {
        var enteredBy = ViewBag.UserADId?.ToString().ToUpper() ?? "SYSTEM";
        var dateModified = DateTime.Now;

        //foreach (var model in models)
        {
            var parameters = new DynamicParameters();
            parameters.Add("MMSStockCode", model.MMSStockCode?.ToUpperInvariant());
            parameters.Add("CC", model.CC?.ToUpperInvariant() ?? " ");
            parameters.Add("UnitCost", model.UnitCost ?? 0m);
            parameters.Add("Qty", (model.Qty));
            parameters.Add("Percentage", (model.Percentage));
            parameters.Add("CoreCost", model.CoreCost ?? 0m);
            parameters.Add("RebuiltPartNum", id?.ToUpperInvariant());
            parameters.Add("LastModifiedBy", ViewBag.UserName);
            parameters.Add("LastModifiedDate", DateTime.Now);
            parameters.Add("LinkType", linkType);
            parameters.Add("LinkCode", model.LinkCode);

            var sql = @"
                        UPDATE SBCES.SCPartsUsed 
                        SET 
                            CostCentre = UPPER(@CC),
                            MMSCost = @UnitCost,
                            QtyReqd = UPPER(@Qty),
                            PercentUsage = UPPER(@Percentage),
                            CoreCost = @CoreCost,
                            LastModifiedBy = @LastModifiedBy,
                            LastModifiedDate = @LastModifiedDate
                        WHERE 
                            MMSStockCode = @MMSStockCode
                            AND LinkCode = @LinkCode
                            AND LinkType = @LinkType
                            
                            ";

            await _dbConnection.ExecuteAsync(sql, parameters, transaction);
        }


        transaction.Commit();

        if (gridType == "VehicleGrid")
        {
            //update estimates
            await VehicleListEstimatesUpdater.UpdateVehicleCostsAsync(_dbConnection, id);
        }
        return StatusCode(200, $"success");
        // return Json(models.ToDataSourceResult(request));
    }
    catch (Exception ex)
    {
        transaction.Rollback();
        ModelState.AddModelError("", $"Error updating record: {ex.Message}");
        //return Json(models.ToDataSourceResult(request, ModelState));
        return StatusCode(500, $"failed");
    }
}

[HttpGet]
[AllowAnonymous]
public async Task<ActionResult> GetScPartsUsedInEstimates([DataSourceRequest] DataSourceRequest request, [FromQuery] string id, [FromQuery] string gridType)
{
    // Fetch data for the grid
    ViewBag.ParentId = id;

    if (string.IsNullOrEmpty(id))
    {
        return BadRequest("id is required for :" + gridType);
    }
    ViewBag.ParentId = id;
    if (gridType == "RbGrid")
    {
        var rbNscModel = await GetScPartsUsedInRBEstimates(id, gridType);
        return Json(rbNscModel.ToDataSourceResult(request));
    }
    if (gridType == "VehicleGrid")
    {
        var vehNscmodel = await GetScPartsUsedInVehicleEstimates(id, gridType);
        return Json(vehNscmodel.ToDataSourceResult(request));
    }
    if (gridType == "ArchivedVehicleGrid")
    {
        var vehNscmodel = await GetArchivedScPartsUsedInVehicleEstimates(id, gridType);
        return Json(vehNscmodel.ToDataSourceResult(request));
    }

    return null; //Add exception


}
_TotalCost.cshtml :
@{
    ViewData["Title"] = "Total Cost Summary";
    string gridName = $"LabourDetailsGrid_{ViewBag.PartNum}";
}

<script>
    // Store parameters from ViewBag
    var partNum = '@ViewBag.PartNum';
        var gridType = '@ViewBag.GridType';

        // Build URL with proper parameter encoding
        var totalCostDataUrl = '@Url.Action("GetTotalCostInEstimates", "TotalCost")' +
                               '?id=' + encodeURIComponent(partNum) +
                               '&gridType=' + encodeURIComponent(gridType);
</script>

<h6>Total Cost Summary</h6>

<div class="total-cost-container">
    <!-- Loading indicator -->
    <div id="loadingIndicator" class="loading-section">
        <div class="loading-spinner">
            <div class="spinner"></div>
        </div>
        <p>Loading cost data...</p>
    </div>

    <!-- Cost summary content -->
    <div id="costSummaryContent" style="display: none;">
        <!-- Material Costs Section -->
        <div class="section-title">Material Costs</div>
        <div class="form-row">
            <div class="form-group">
                <label class="form-label">Materials Cost (Without Tax)</label>
                <input id="materialCostWithoutTax" class="read-only" readonly />
            </div>
            <div class="form-group">
                <label class="form-label">Tax</label>
                <input id="materialTax" class="read-only" readonly />
            </div>
            <div class="form-group">
                <label class="form-label">Material Cost (With Tax)</label>
                <input id="materialCostWithTax" class="read-only" readonly />
            </div>
        </div>

        <!-- Labour Costs Section -->
        <div class="section-title">Labour Costs</div>
        <div class="form-row">
            <div class="form-group">
                <label class="form-label">Fringe</label>
                <input id="labourFringe" class="read-only" readonly />
            </div>
            <div class="form-group">
                <label class="form-label">Blended Fringe & Benefit Percent</label>
                <input id="blendedFringePercent" class="read-only" readonly />
            </div>
            <div class="form-group">
                <label class="form-label">Blended Fringe & Benefit Cost</label>
                <input id="blendedFringeCost" class="read-only" readonly />
            </div>
            <div class="form-group">
                <label class="form-label">Overhead</label>
                <input id="labourOverhead" class="read-only" readonly />
            </div>
        </div>

        <!-- Blank row for spacing -->
        <div class="form-row">
            <div class="form-group" style="height: 28px;"></div>
        </div>

        <!-- Material and Labour Totals Section -->
        <div class="section-title">Totals (Material and Labour)</div>
        <div class="form-row">
            <div class="form-group">
                <label class="form-label">Total Material Cost (With Tax)</label>
                <input id="totalMaterialCost" class="read-only" readonly />
            </div>
            <div class="form-group">
                <label class="form-label">Total Labour Costs</label>
                <input id="totalLabourCost" class="read-only" readonly />
            </div>
        </div>

        <!-- Overall Totals Section -->
        <div class="section-title">Total Costs</div>
        <div class="form-row">
            <div class="form-group">
                <label class="form-label">Total Without Tax</label>
                <input id="totalWithoutTax" class="read-only" readonly />
            </div>
            <div class="form-group">
                <label class="form-label">Total With Tax</label>
                <input id="totalWithTax" class="read-only" readonly />
            </div>
        </div>
    </div>

    <!-- No data message -->
    <div id="noDataMessage" class="no-data-message" style="display: none;">
        <div class="warning-icon">⚠️</div>
        <p>No cost data available for this estimate</p>
        <button id="retryButton" class="k-button k-primary">Retry Loading</button>
    </div>
</div>
@* 
<style>
    /* Match _ScPartsUsed.cshtml styling */
    .total-cost-container {
        background: white;
        padding: 16px;
        border-radius: 4px;
        box-shadow: 0 2px 6px rgba(0,0,0,0.08);
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        border: 1px solid #e0e0e0;
        max-width: 1200px;
        margin: 0 auto;
    }

    h6 {
        font-size: 15px;
        color: #2c3e50;
        margin-bottom: 12px;
        padding-bottom: 8px;
        border-bottom: 1px solid #3498db;
        font-weight: 600;
        padding-left: 6px;
    }

    .section-title {
        font-size: 13px;
        color: #2c3e50;
        margin: 16px 0 8px;
        padding-bottom: 6px;
        border-bottom: 1px solid #3498db;
        display: flex;
        align-items: center;
        gap: 5px;
        font-weight: 600;
        padding-left: 4px;
    }

    .form-row {
        display: flex;
        gap: 12px;
        margin-bottom: 12px;
        align-items: flex-start;
    }

    .form-group {
        display: flex;
        flex-direction: column;
        flex: 1;
        min-width: 0; /* Allow shrinking */
    }

    .form-label {
        font-size: 12px;
        color: #2c3e50;
        font-weight: 600;
        margin-bottom: 5px;
        padding-left: 2px;
    }

    .read-only {
        border: 1px solid #d1d5db;
        border-radius: 4px;
        padding: 6px 10px;
        height: 34px;
        font-size: 13px;
        background: #f8fafc;
        color: #4b5563;
        cursor: not-allowed;
        width: 100%;
        box-sizing: border-box;
        font-weight: 500;
    }

    /* Loading styles */
    .loading-section {
        text-align: center;
        padding: 30px 0;
    }

    .loading-spinner {
        display: inline-block;
        margin-bottom: 15px;
    }

    .spinner {
        width: 40px;
        height: 40px;
        border: 4px solid rgba(59, 89, 152, 0.2);
        border-top: 4px solid #3b5998;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin: 0 auto;
    }

    .loading-section p {
        color: #3f51b5;
        font-size: 14px;
        margin-top: 10px;
    }

    /* No data message */
    .no-data-message {
        text-align: center;
        padding: 30px 0;
        color: #e74c3c;
    }

    .warning-icon {
        font-size: 40px;
        margin-bottom: 15px;
    }

    .no-data-message p {
        font-size: 14px;
        margin-bottom: 20px;
    }

    /* Button styles */
    .k-button {
        padding: 6px 12px;
        font-size: 13px;
        height: 34px;
        border-radius: 4px;
        font-weight: 600;
        cursor: pointer;
        border: 1px solid transparent;
        transition: all 0.2s;
    }

        .k-button.k-primary {
            background: #3f51b5;
            color: white;
            border-color: #3f51b5;
        }

            .k-button.k-primary:hover {
                background: #303f9f;
                border-color: #283593;
            }

    /* Animation */
    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }
</style> *@

<script>
    $(document).ready(function() {
        // Fetch data on page load
        fetchTotalCostData();

        // Retry button handler
        $("#retryButton").click(function() {
            $("#noDataMessage").hide();
            $("#loadingIndicator").show();
            $("#costSummaryContent").hide();
            fetchTotalCostData();
        });
    });

    function fetchTotalCostData() {
        console.log("Fetching data from:", totalCostDataUrl);

        $.ajax({
            url: totalCostDataUrl,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                console.log("Full response received:", response);

                // Check if response has data array with at least one item
                if (response && response.Data && response.Data.length > 0) {
                    var costData = response.Data[0];
                    console.log("Cost data to populate:", costData);

                    populateCostSummary(costData);
                    $("#loadingIndicator").hide();
                    $("#costSummaryContent").show();
                    $("#noDataMessage").hide();
                } else {
                    console.log("No data found in response");
                    showNoDataMessage();
                }
            },
            error: function(xhr, status, error) {
                console.error("Error fetching cost data:", {
                    status: status,
                    error: error,
                    responseText: xhr.responseText
                });
                showNoDataMessage();
            }
        });
    }

    function populateCostSummary(costData) {
        // Material Costs
        setCurrencyValue("#materialCostWithoutTax", costData.MaterialTotalCostNoTax);
        setCurrencyValue("#materialTax", costData.MaterialTotalTaxAmount);
        setCurrencyValue("#materialCostWithTax", costData.MaterialTotalWithTax);

        // Labour Costs
        setCurrencyValue("#labourFringe", costData.LabourFringe);
        setPercentValue("#blendedFringePercent", costData.BlendedFringeBenefitPercent);
        setCurrencyValue("#blendedFringeCost", costData.BlendedFringeBenefitCost);
        setCurrencyValue("#labourOverhead", costData.LabourOverhead);

        // Totals
        setCurrencyValue("#totalMaterialCost", costData.MaterialTotalWithTax);
        setCurrencyValue("#totalLabourCost", costData.FinalLabourCost);
        setCurrencyValue("#totalWithoutTax", costData.TotalWithoutTax);
        setCurrencyValue("#totalWithTax", costData.TotalWithTax);
    }

    function setCurrencyValue(selector, value) {
        if (value === null || value === undefined) {
            $(selector).val("N/A");
            return;
        }

        // Format as currency with commas and two decimal places
        var formatted = '$' + parseFloat(value).toLocaleString(undefined, {
            minimumFractionDigits: 2,
            maximumFractionDigits: 2
        });
        $(selector).val(formatted);
    }

    function setPercentValue(selector, value) {
        if (value === null || value === undefined) {
            $(selector).val("N/A");
            return;
        }

        var formatted = parseFloat(value).toFixed(2) + '%';
        $(selector).val(formatted);
    }

    function showNoDataMessage() {
        $("#loadingIndicator").hide();
        $("#costSummaryContent").hide();
        $("#noDataMessage").show();
    }
    
   
</script>



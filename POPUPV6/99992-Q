1. Kendo Window Width (Container)

The outer popup container width is defined when you create the Kendo Window.

In Index.cshtml you have:

$("#ScPartsPopupWindow").kendoWindow({
    title: "Stock Coded Part",
    modal: true,
    visible: false,
    resizable: false,
    width: "900px",   // ðŸ‘ˆ THIS defines the popup width
    height: "auto",
    actions: ["Close"]
});


ðŸ‘‰ So, for "Add New Stock Coded Part", the container width is 900px.
If you want it wider (say 1100px to fit 3 columns better), just update that width.

ðŸ”¹ 2. Section Layout (Part Info, Supplier Info, etc.)

In StockCodedPartsModel.cshtml, each section (Part Information, Supplier Information, Cost Information, History) is wrapped in .form-row.

Right now youâ€™re hardcoding widths inline, e.g.:

@Html.EditorFor(m => m.MMSStockCode, "ScComboBox", new
{
    htmlAttributes = new { required = "required", style = "width:25%; height:20px;" }
})


This is why your controls donâ€™t scale properly â€” each input has its own style="width:25%".

ðŸ”¹ 3. Centralize Widths with CSS

Instead of hardcoding widths inline, define them once in CSS.
For example, in vehicle-estimate.css add:

/* Popup form section layout */
.scparts-popup-style .form-row {
    display: grid;
    grid-template-columns: repeat(3, 1fr); /* 3 columns */
    gap: 12px;
    margin-bottom: 12px;
}

/* All inputs same width */
.scparts-popup-style .k-textbox,
.scparts-popup-style .k-combobox,
.scparts-popup-style .k-numerictextbox,
.scparts-popup-style .k-datepicker {
    width: 100% !important;   /* full width inside column */
    height: 26px !important;  /* consistent control height */
    font-size: 12px;
}

/* For big fields like Description or Supplier Name */
.scparts-popup-style .double-width {
    grid-column: span 2;
}

ðŸ”¹ 4. Cleanup Your Razor

Then in StockCodedPartsModel.cshtml, remove inline widths and just rely on CSS:

<div class="form-group double-width">
    @Html.LabelFor(m => m.DetailedDesc, "Part Description", new { @class = "form-label" })
    @(Html.Kendo().TextBoxFor(m => m.DetailedDesc)
        .HtmlAttributes(new { @readonly = "readonly" }))
</div>


ðŸ‘‰ The double-width class makes Part Description span 2 columns, while everything else fits neatly into 3 equal-width columns.

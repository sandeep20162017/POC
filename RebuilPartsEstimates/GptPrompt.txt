
you are ASP.NET core and Telerik UI ASP.NET Core expert.
Application uses ASP.NET core 8.0. MVC. Direct dapper SQL calls. 

I have Kendo MVC main grid (Name RebuiltPartsGrid).
This grid has columns, Rebuilt Number, MMS Stock Code, KeyWord, Description. This is already implemented.

I need your help to implement following :
When User clicks on any row,in RebuiltPartsGrid , application should open Telerik ASP.NET Core Tile Layout (call this as RebuiltPartEstimates. (Question to you - Is it possible to open this layout in the same page or has tobe popup?).
This Panel  has  buttons at the bottom "Archive", Save and Update. When User clicks on any botton, contorller action gets called. For the time beling just display mesage on the screen xx button i clicked. I prefere server side code, inted of javascript is possible.
 I have added design of This page below.
RebuiltPartEstimate design :
Row1, Col 1 : Job Number :  Telerik Textbox - Non editable
Row1 col 2 : Rebuilt Number : TelerikTextBox -  - Non editable
Row 1 col 3 : MMS Buy Code :  Telerik Text Box  - Non editable
Row 2 Col 1 : SOP Number : Telerik Text Box  - Non editable
Row 2 Col 2 : Keyword : Telerik Text Box  - Non editable
Row 2 Col 3 : Core Code : Telerik Text Box  - Non editable
Row 3 col 1 Col 2 Col 3 : Description : Telerik Text Box - Non editable

Row 4 Col 1 : Vehicle Series : Telerik drop down box - Editable
Row 4 Col 2 : Last Modified : Telerik drop down box - Editable

Row 6 Col 1 col 2 col 3 : Labour : Telerik Grid - Actions Add, Update, Delete (Inline edit)
Row 7 row 8, Row 9, Row 10, Row 11, Row 12, Row 13, Row 14, Row 15, Row 16 Col 1 : Labour Hour Summary  : Telerik Grid - Read only
Row 7 row 8, Row 9, Row 10, Row 11, Row 12, Row 13, Row 14, Row 15, Row 16  Col 2 : Material Cost Summary  : Telerik Grid - Read Only
Row 7 Col 3 : Core Cost - Telerik Text Box - Read Only

Row 8 Col 3 : Materials Cost - Telerik TExt Box - Read Only

Row 9 Col 3 : Labour Cost - Telerik Text box - Read Only

Row 10 col 3 : Labour Overhead Cost - Telerik TExt Box - Read Only

Row 11 col 3 : Labour Total- Telerik Text Box - Read Only

Row 12 col  3 : Total Rebuilt Part Cost - - Telerik Text Box - Read Only

Row 13 col 3 : Tax Total  - Telerik Text Box - Read Only

Row 14 col 3 : Total Rebuilt Part With Cost - Telerik Text Box - Read Only

Row 15, Row 16 col 3 - Telerik Label : - Read Only


Use following guidelines:
1. If You are using shared template use naming convention as RebuiltPartEstimates
2. Use flattened view model, use name space BCES.Models.Parts. For RebuiltPartEstimates, Use model name a RebuiltPartEstimates
3. For Controller, Use namespace as BCES.Controllers.Parts. 
4. Add comments in the code.
5. Add exception handling.
6. I am using dapper to direct SQL calls. Application is in MVC. Assume dbconection and dbconext is available.
7. For the first version mock up data and  comment SQL calls
8. For testing add mock up data.
9. Give me all the changes in one file instead of code snippets. Add comments

Sample Controller style (use below to implement RebuiltPartEstimates or any other controllers):
Class RebuiltPartsController : BaseController
{
private readonly DapperContext _db;
private readonly IDBConection _dbConnection;
private readonly IHttpContextAccesor  _httpcontext Accsssor;
public RebuiltPartsController (DpperContext dapper, IHttpContextAccsor httpContextAccessor) : base (dapper, httpContextAccessor)
{
  _db = dapper;
_dbConnection =_db.CreateConnecton();
_httpContextAccessor = httpContextAccessor;
}
[HttpGet ("RebuiltPartsIndex")]
public IActionResult RebuiltPartsIndex() {
return View ("/Views/Parts/RebuiltParts/Index.cshtml")
}
[HttpGet}
public async Task<ActionResult> GetRebuiltPartsView([DataSourceRequet] DataourceRequestrequest)
{
 var model = await GetRebuiltPartsData();
retun Json(model.ToDataSourceResult(request));
}
private async Task<IEnumerable<RebuiltPartsViewmodel>> GetRebuiltPartsBata()
{
  //SQL calls in try-catch
  return await _dbConnection.QueryAsync<RebuiltPartsiewModel>(query);
}
SAmpel Grid code :
@Html.Kendo().Grid<RebuiltPartsViewModel>()
 .Name ("RebuildPartsGrid")
....
.Read(read =>read.Url(Url.Action("GetRebuiltPartsViewer", "RebuiltParts")).Type(HttpVerbs.Get)
)
)


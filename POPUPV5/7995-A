Integrating ComboBoxEditor with AutoComplete Functionality
I'll help you integrate your existing ComboBoxEditor template with auto-complete functionality into the _VehPopup.cshtml file. This will maintain consistency with your grid implementation while providing the auto-complete features.

Updated _VehPopup.cshtml
html
@model BCES.Models.Vehicle.VehicleViewModel

<div class="vehicle-popup-header">
    <div class="vehicle-popup-title">@(Model.VehicleListId == 0 ? "Add New Vehicle Estimate" : $"Estimate #{Model.VehicleListId}")</div>
    <div class="vehicle-tab-actions">
        <button id="btnSave" class="vehicle-popup-btn vehicle-popup-btn-primary" type="button">
            <span class="vehicle-btn-icon">✓</span> Save
        </button>
        <button id="btnCancelVehicle" class="vehicle-popup-btn vehicle-popup-btn-secondary" type="button">
            <span class="vehicle-btn-icon">✕</span> Cancel
        </button>
    </div>
</div>

<div class="vehicle-form-container">
    <form id="vehicleForm">
        @Html.HiddenFor(m => m.VehicleListId)
        @Html.Hidden("formMode", Model.VehicleListId == 0 ? "Add" : "Edit", new { id = "formMode" })

        <!-- Vehicle Information Section -->
        <div class="vehicle-section-title">Vehicle Information</div>

        <!-- Row 1: Estimate #, Vehicle Series, Quantity -->
        <div class="vehicle-form-row">
            <div class="vehicle-form-group">
                @Html.LabelFor(m => m.VehicleListId, "Estimate #", new { @class = "vehicle-form-label" })
                @Html.TextBoxFor(m => m.VehicleListId, new { @class = "vehicle-form-control", @readonly = "readonly" })
            </div>

            <div class="vehicle-form-group">
                @Html.LabelFor(m => m.VehSeriesCode, "Vehicle Series", new { @class = "vehicle-form-label vehicle-required-label" })
                @Html.EditorFor(m => m.VehSeriesCode, "ComboBoxEditor", new { 
                    LockMap = "", 
                    AdditionalAttributes = new Dictionary<string, object> {
                        { "class", "vehicle-form-control required-cell" },
                        { "required", "required" }
                    }
                })
            </div>

            <div class="vehicle-form-group">
                @Html.LabelFor(m => m.NumOfVehicles, "# Of Vehicles", new { @class = "vehicle-form-label vehicle-required-label" })
                @(Html.Kendo().NumericTextBox()
                    .Name("NumOfVehicles")
                    .Format("0")
                    .Min(1)
                    .Value(Model.NumOfVehicles)
                    .HtmlAttributes(new { @class = "vehicle-form-control", required = "required" })
                )
            </div>
        </div>

        <!-- Row 2: Description, SOP Number -->
        <div class="vehicle-form-row">
            <div class="vehicle-form-group vehicle-double-width">
                @Html.LabelFor(m => m.ProjDesc, "Description", new { @class = "vehicle-form-label vehicle-required-label" })
                @Html.EditorFor(m => m.ProjDesc, "ComboBoxEditor", new { 
                    LockMap = "", 
                    AdditionalAttributes = new Dictionary<string, object> {
                        { "class", "vehicle-form-control required-cell" },
                        { "required", "required" }
                    }
                })
            </div>

            <div class="vehicle-form-group">
                @Html.LabelFor(m => m.Sopnumber, "SOP Number", new { @class = "vehicle-form-label" })
                @Html.TextBoxFor(m => m.Sopnumber, new { @class = "vehicle-form-control", Value = Model.Sopnumber })
            </div>
        </div>

        <!-- Specifications Section -->
        <div class="vehicle-section-title">Specifications</div>

        <!-- Row 3: Make, Model, Year -->
        <div class="vehicle-form-row">
            <div class="vehicle-form-group">
                @Html.LabelFor(m => m.Make, "Make", new { @class = "vehicle-form-label" })
                @Html.EditorFor(m => m.Make, "ComboBoxEditor", new { 
                    LockMap = "", 
                    AdditionalAttributes = new Dictionary<string, object> {
                        { "class", "vehicle-form-control" }
                    }
                })
            </div>

            <div class="vehicle-form-group">
                @Html.LabelFor(m => m.VehModel, "Model", new { @class = "vehicle-form-label" })
                @Html.EditorFor(m => m.VehModel, "ComboBoxEditor", new { 
                    LockMap = "", 
                    AdditionalAttributes = new Dictionary<string, object> {
                        { "class", "vehicle-form-control" }
                    }
                })
            </div>

            <div class="vehicle-form-group">
                @Html.LabelFor(m => m.Year, "Year", new { @class = "vehicle-form-label" })
                @(Html.Kendo().NumericTextBox()
                    .Name("Year")
                    .Format("0")
                    .Min(1900)
                    .Max(2100)
                    .Value(Model.Year)
                    .HtmlAttributes(new { @class = "vehicle-form-control" })
                )
            </div>
        </div>

        <!-- Row 4: Engine, Transmission, Differential -->
        <div class="vehicle-form-row">
            <div class="vehicle-form-group">
                @Html.LabelFor(m => m.Engine, "Engine", new { @class = "vehicle-form-label" })
                @Html.EditorFor(m => m.Engine, "ComboBoxEditor", new { 
                    LockMap = "", 
                    AdditionalAttributes = new Dictionary<string, object> {
                        { "class", "vehicle-form-control" }
                    }
                })
            </div>

            <div class="vehicle-form-group">
                @Html.LabelFor(m => m.Transmission, "Transmission", new { @class = "vehicle-form-label" })
                @Html.EditorFor(m => m.Transmission, "ComboBoxEditor", new { 
                    LockMap = "", 
                    AdditionalAttributes = new Dictionary<string, object> {
                        { "class", "vehicle-form-control" }
                    }
                })
            </div>

            <div class="vehicle-form-group">
                @Html.LabelFor(m => m.Differential, "Differential", new { @class = "vehicle-form-label" })
                @Html.EditorFor(m => m.Differential, "ComboBoxEditor", new { 
                    LockMap = "", 
                    AdditionalAttributes = new Dictionary<string, object> {
                        { "class", "vehicle-form-control" }
                    }
                })
            </div>
        </div>

        <!-- Audit Section -->
        <div class="vehicle-section-title">Audit Information</div>

        <!-- Row 5: Last Modified By, Last Modified Date -->
        <div class="vehicle-form-row">
            <div class="vehicle-form-group">
                @Html.LabelFor(m => m.ModifiedLastBy, "Last Modified By", new { @class = "vehicle-form-label" })
                @Html.TextBoxFor(m => m.ModifiedLastBy, new { @class = "vehicle-form-control", @readonly = "readonly", Value = Model.ModifiedLastBy })
            </div>

            <div class="vehicle-form-group">
                @Html.LabelFor(m => m.ModifiedLastDate, "Last Modified Date", new { @class = "vehicle-form-label" })
                @Html.TextBoxFor(m => m.ModifiedLastDate, new { @class = "vehicle-form-control", @readonly = "readonly", Value = Model.ModifiedLastDate })
            </div>
        </div>
    </form>
</div>
Enhanced JavaScript Initialization
Update your JavaScript to handle the ComboBoxEditor initialization:

javascript
// ── Open vehicle popup and load form partial
window.openEstimatePopup = function (vehicleId) {
    console.warn('inside window.openEstimatePopup');
    var win = $("#estimatePopup").data("kendoWindow");
    currentVehicleId = vehicleId;
    pendingChanges = false; // Reset changes flag

    win.title(vehicleId === 0 ? "Add New Estimate" : "Vehicle Estimate #" + vehicleId);
    win.center().open();

    // Load vehicle tab first
    $("#vehicleTabContent").load('@Url.Action("GetVehicleById", "Vehicles")', { id: vehicleId }, function () {
        // Initialize Kendo UI widgets in the loaded content
        kendo.init($("#vehicleTabContent"));
        
        // Set values for Kendo widgets after initialization
        setTimeout(function() {
            // Set values for ComboBoxEditor fields
            setComboBoxValues();
            initVehiclePopupForm();
            wireVehicleForm();
        }, 100);

        if (vehicleId !== 0) {
            enableAllTabs();
        }
    });
};

// Function to set values for ComboBoxEditor fields
function setComboBoxValues() {
    // Get the model data from hidden fields or data attributes
    var modelData = @Html.Raw(Json.Encode(Model));
    
    // Set values for each ComboBoxEditor field
    if (modelData) {
        if (modelData.VehSeriesCode) {
            setComboBoxValue("VehSeriesCode", modelData.VehSeriesCode);
        }
        if (modelData.ProjDesc) {
            setComboBoxValue("ProjDesc", modelData.ProjDesc);
        }
        if (modelData.Make) {
            setComboBoxValue("Make", modelData.Make);
        }
        if (modelData.VehModel) {
            setComboBoxValue("VehModel", modelData.VehModel);
        }
        if (modelData.Engine) {
            setComboBoxValue("Engine", modelData.Engine);
        }
        if (modelData.Transmission) {
            setComboBoxValue("Transmission", modelData.Transmission);
        }
        if (modelData.Differential) {
            setComboBoxValue("Differential", modelData.Differential);
        }
    }
}

// Helper function to set ComboBox value
function setComboBoxValue(fieldName, value) {
    var comboBox = $("#" + fieldName).data("kendoComboBox");
    if (comboBox) {
        comboBox.value(value);
        comboBox.text(value);
    }
}
Enhanced Helper Functions
Update your helper functions to handle ComboBoxEditor fields:

javascript
window.setPopupEditable = function (ids) {
    ids.forEach(function (id) {
        var widget = getKendoWidget(id);
        if (widget) {
            widget.enable(true);
        } else {
            $("#" + id).prop("readonly", false).removeClass("k-state-disabled");
        }
    });
};

window.setPopupReadonly = function (ids) {
    ids.forEach(function (id) {
        var widget = getKendoWidget(id);
        if (widget) {
            widget.enable(false);
        } else {
            $("#" + id).prop("readonly", true).addClass("k-state-disabled");
        }
    });
};

window.getKendoWidget = function (id) {
    var element = $("#" + id);
    return element.data("kendoComboBox") || 
           element.data("kendoNumericTextBox") || 
           element.data("kendoDatePicker");
};
Enhanced Form Submission
Update your form submission to handle ComboBoxEditor values:

javascript
$("#vehicleForm").off("submit").on("submit", function (e) {
    e.preventDefault();

    // Validate form here if needed

    var vm = {
        VehicleListId: $("#VehicleListId").val(),
        VehSeriesCode: $("#VehSeriesCode").data("kendoComboBox").value(),
        NumOfVehicles: $("#NumOfVehicles").val(),
        ProjDesc: $("#ProjDesc").data("kendoComboBox").value(),
        Make: $("#Make").data("kendoComboBox").value(),
        VehModel: $("#VehModel").data("kendoComboBox").value(),
        Year: $("#Year").val(),
        Engine: $("#Engine").data("kendoComboBox").value(),
        Transmission: $("#Transmission").data("kendoComboBox").value(),
        Differential: $("#Differential").data("kendoComboBox").value(),
        Sopnumber: $("#Sopnumber").val()
    };

    var url = currentVehicleId === 0
        ? '@Url.Action("AddVehiclesView", "Vehicles")'
        : '@Url.Action("UpdateVehiclesView", "Vehicles")';

    $.ajax({
        url: url,
        type: 'POST',
        contentType: "application/json",
        data: JSON.stringify(vm),
        success: function (response) {
            if (response && response.VehicleListId) {
                pendingChanges = false;
                currentVehicleId = response.VehicleListId;
                $("#VehicleGrid").data("kendoGrid").dataSource.read();

                // Update window title with new ID
                var win = $("#estimatePopup").data("kendoWindow");
                win.title("Vehicle Estimate #" + response.VehicleListId);

                kendo.alert("Saved successfully! Estimate #: " + response.VehicleListId);
            } else {
                kendo.alert("Save succeeded but no Estimate ID was returned.");
            }
        },
        error: function () {
            kendo.alert("Error saving data.");
        }
    });
});
Key Integration Points
Using ComboBoxEditor Template: The form now uses @Html.EditorFor(m => m.PropertyName, "ComboBoxEditor") for all fields that need auto-complete functionality.

Passing Additional Attributes: The ComboBoxEditor is configured with additional attributes to maintain the form styling and validation.

Value Initialization: The setComboBoxValues() function ensures that the ComboBox values are properly set after the form is loaded.

Form Submission: The form submission handler now correctly extracts values from the ComboBox widgets.

Readonly/Editable States: The helper functions properly handle the enabled/disabled states of ComboBox widgets.

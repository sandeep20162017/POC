Complete _VehPopup.cshtml
html
@model BCES.Models.Vehicle.VehicleViewModel

<div class="vehicle-popup-header">
    <div class="vehicle-popup-title">@(Model.VehicleListId == 0 ? "Add New Vehicle Estimate" : $"Estimate #{Model.VehicleListId}")</div>
    <div class="vehicle-tab-actions">
        <button id="btnSave" class="vehicle-popup-btn vehicle-popup-btn-primary" type="button">
            <span class="vehicle-btn-icon">✓</span> Save
        </button>
        <button id="btnCancelVehicle" class="vehicle-popup-btn vehicle-popup-btn-secondary" type="button">
            <span class="vehicle-btn-icon">✕</span> Cancel
        </button>
    </div>
</div>

<div class="vehicle-form-container">
    <form id="vehicleForm">
        @Html.HiddenFor(m => m.VehicleListId)
        @Html.Hidden("formMode", Model.VehicleListId == 0 ? "Add" : "Edit", new { id = "formMode" })

        <!-- Vehicle Information Section -->
        <div class="vehicle-section-title">Vehicle Information</div>

        <!-- Row 1: Estimate #, Vehicle Series, Quantity -->
        <div class="vehicle-form-row">
            <div class="vehicle-form-group">
                @Html.LabelFor(m => m.VehicleListId, "Estimate #", new { @class = "vehicle-form-label" })
                @Html.TextBoxFor(m => m.VehicleListId, new { @class = "vehicle-form-control", @readonly = "readonly" })
            </div>

            <div class="vehicle-form-group">
                @Html.LabelFor(m => m.VehSeriesCode, "Vehicle Series", new { @class = "vehicle-form-label vehicle-required-label" })
                @(Html.Kendo().ComboBox()
                    .Name("VehSeriesCode")
                    .Placeholder("Select Vehicle Series...")
                    .DataTextField("VehSeriesCode")
                    .DataValueField("VehSeriesCode")
                    .Filter(FilterType.Contains)
                    .HtmlAttributes(new { @class = "vehicle-form-control", required = "required" })
                    .Value(Model.VehSeriesCode)
                    .DataSource(source => source
                        .Read(read => read.Action("GetVehicleSeries", "Vehicles"))
                    )
                )
            </div>

            <div class="vehicle-form-group">
                @Html.LabelFor(m => m.NumOfVehicles, "# Of Vehicles", new { @class = "vehicle-form-label vehicle-required-label" })
                @(Html.Kendo().NumericTextBox()
                    .Name("NumOfVehicles")
                    .Format("0")
                    .Min(1)
                    .Value(Model.NumOfVehicles)
                    .HtmlAttributes(new { @class = "vehicle-form-control", required = "required" })
                )
            </div>
        </div>

        <!-- Row 2: Description, SOP Number -->
        <div class="vehicle-form-row">
            <div class="vehicle-form-group vehicle-double-width">
                @Html.LabelFor(m => m.ProjDesc, "Description", new { @class = "vehicle-form-label vehicle-required-label" })
                @(Html.Kendo().ComboBox()
                    .Name("ProjDesc")
                    .Placeholder("Select Description...")
                    .DataTextField("ProjDesc")
                    .DataValueField("ProjDesc")
                    .Filter(FilterType.Contains)
                    .Value(Model.ProjDesc)
                    .HtmlAttributes(new { @class = "vehicle-form-control", required = "required" })
                    .DataSource(source => source
                        .Read(read => read.Action("GetProjectDescriptions", "Vehicles"))
                    )
                )
            </div>

            <div class="vehicle-form-group">
                @Html.LabelFor(m => m.Sopnumber, "SOP Number", new { @class = "vehicle-form-label" })
                @Html.TextBoxFor(m => m.Sopnumber, new { @class = "vehicle-form-control", Value = Model.Sopnumber })
            </div>
        </div>

        <!-- Specifications Section -->
        <div class="vehicle-section-title">Specifications</div>

        <!-- Row 3: Make, Model, Year -->
        <div class="vehicle-form-row">
            <div class="vehicle-form-group">
                @Html.LabelFor(m => m.Make, "Make", new { @class = "vehicle-form-label" })
                @(Html.Kendo().ComboBox()
                    .Name("Make")
                    .Placeholder("Select Make...")
                    .DataTextField("Make")
                    .DataValueField("Make")
                    .Filter(FilterType.Contains)
                    .Value(Model.Make)
                    .HtmlAttributes(new { @class = "vehicle-form-control" })
                    .DataSource(source => source
                        .Read(read => read.Action("GetMakes", "Vehicles"))
                    )
                )
            </div>

            <div class="vehicle-form-group">
                @Html.LabelFor(m => m.VehModel, "Model", new { @class = "vehicle-form-label" })
                @(Html.Kendo().ComboBox()
                    .Name("VehModel")
                    .Placeholder("Select Model...")
                    .DataTextField("VehModel")
                    .DataValueField("VehModel")
                    .Filter(FilterType.Contains)
                    .Value(Model.VehModel)
                    .HtmlAttributes(new { @class = "vehicle-form-control" })
                    .DataSource(source => source
                        .Read(read => read.Action("GetModels", "Vehicles"))
                    )
                )
            </div>

            <div class="vehicle-form-group">
                @Html.LabelFor(m => m.Year, "Year", new { @class = "vehicle-form-label" })
                @(Html.Kendo().NumericTextBox()
                    .Name("Year")
                    .Format("0")
                    .Min(1900)
                    .Max(2100)
                    .Value(Model.Year)
                    .HtmlAttributes(new { @class = "vehicle-form-control" })
                )
            </div>
        </div>

        <!-- Row 4: Engine, Transmission, Differential -->
        <div class="vehicle-form-row">
            <div class="vehicle-form-group">
                @Html.LabelFor(m => m.Engine, "Engine", new { @class = "vehicle-form-label" })
                @(Html.Kendo().ComboBox()
                    .Name("Engine")
                    .Placeholder("Select Engine...")
                    .DataTextField("Engine")
                    .DataValueField("Engine")
                    .Filter(FilterType.Contains)
                    .Value(Model.Engine)
                    .HtmlAttributes(new { @class = "vehicle-form-control" })
                    .DataSource(source => source
                        .Read(read => read.Action("GetEngines", "Vehicles"))
                    )
                )
            </div>

            <div class="vehicle-form-group">
                @Html.LabelFor(m => m.Transmission, "Transmission", new { @class = "vehicle-form-label" })
                @(Html.Kendo().ComboBox()
                    .Name("Transmission")
                    .Placeholder("Select Transmission...")
                    .DataTextField("Transmission")
                    .DataValueField("Transmission")
                    .Filter(FilterType.Contains)
                    .Value(Model.Transmission)
                    .HtmlAttributes(new { @class = "vehicle-form-control" })
                    .DataSource(source => source
                        .Read(read => read.Action("GetTransmissions", "Vehicles"))
                    )
                )
            </div>

            <div class="vehicle-form-group">
                @Html.LabelFor(m => m.Differential, "Differential", new { @class = "vehicle-form-label" })
                @(Html.Kendo().ComboBox()
                    .Name("Differential")
                    .Placeholder("Select Differential...")
                    .DataTextField("Differential")
                    .DataValueField("Differential")
                    .Filter(FilterType.Contains)
                    .Value(Model.Differential)
                    .HtmlAttributes(new { @class = "vehicle-form-control" })
                    .DataSource(source => source
                        .Read(read => read.Action("GetDifferentials", "Vehicles"))
                    )
                )
            </div>
        </div>

        <!-- Audit Section -->
        <div class="vehicle-section-title">Audit Information</div>

        <!-- Row 5: Last Modified By, Last Modified Date -->
        <div class="vehicle-form-row">
            <div class="vehicle-form-group">
                @Html.LabelFor(m => m.ModifiedLastBy, "Last Modified By", new { @class = "vehicle-form-label" })
                @Html.TextBoxFor(m => m.ModifiedLastBy, new { @class = "vehicle-form-control", @readonly = "readonly", Value = Model.ModifiedLastBy })
            </div>

            <div class="vehicle-form-group">
                @Html.LabelFor(m => m.ModifiedLastDate, "Last Modified Date", new { @class = "vehicle-form-label" })
                @Html.TextBoxFor(m => m.ModifiedLastDate, new { @class = "vehicle-form-control", @readonly = "readonly", Value = Model.ModifiedLastDate })
            </div>
        </div>
    </form>
</div>
Updated JavaScript Initialization
javascript
// ── Open vehicle popup and load form partial
window.openEstimatePopup = function (vehicleId) {
    console.warn('inside window.openEstimatePopup');
    var win = $("#estimatePopup").data("kendoWindow");
    currentVehicleId = vehicleId;
    pendingChanges = false; // Reset changes flag

    win.title(vehicleId === 0 ? "Add New Estimate" : "Vehicle Estimate #" + vehicleId);
    win.center().open();

    // Load vehicle tab first
    $("#vehicleTabContent").load('@Url.Action("GetVehicleById", "Vehicles")', { id: vehicleId }, function () {
        // Initialize Kendo UI widgets in the loaded content
        kendo.init($("#vehicleTabContent"));
        
        // Set values for Kendo widgets after initialization
        setTimeout(function() {
            initVehiclePopupForm();
            wireVehicleForm();
        }, 100);

        if (vehicleId !== 0) {
            enableAllTabs();
        }
    });
};
Enhanced initVehiclePopupForm Function
Update your initVehiclePopupForm function to properly handle Kendo widgets:

javascript
window.initVehiclePopupForm = function () {
    console.warn('inside window.initVehiclePopupForm');
    var mode = $("#formMode").val();
    console.warn('mode', mode);
    if (!mode) return;

    if (mode === "Add") {
        console.warn('Add');
        setPopupEditable([
            "NumOfVehicles", "ProjDesc",
            "Make", "VehModel", "Year",
            "Engine", "Transmission", "Differential", "Sopnumber"
        ]);
        setPopupReadonly(["VehSeriesCode", "ModifiedLastBy", "ModifiedLastDate"]);
    } else {
        console.warn('Edit');
        setPopupReadonly([
            "VehSeriesCode", "ProjDesc", "Make", "VehModel", "Year",
            "Engine", "Transmission", "Differential", "Sopnumber",
            "ModifiedLastBy", "ModifiedLastDate"
        ]);
        setPopupEditable(["NumOfVehicles"]);
    }
};

window.setPopupEditable = function (ids) {
    ids.forEach(function (id) {
        var widget = getKendoWidget(id);
        if (widget) {
            widget.enable(true);
        } else {
            $("#" + id).prop("readonly", false).removeClass("k-state-disabled");
        }
    });
};

window.setPopupReadonly = function (ids) {
    ids.forEach(function (id) {
        var widget = getKendoWidget(id);
        if (widget) {
            widget.enable(false);
        } else {
            $("#" + id).prop("readonly", true).addClass("k-state-disabled");
        }
    });
};

window.getKendoWidget = function (id) {
    var element = $("#" + id);
    return element.data("kendoComboBox") || 
           element.data("kendoNumericTextBox") || 
           element.data("kendoDatePicker");
};
Controller Actions
Make sure you have these controller actions in your VehiclesController:

csharp
public ActionResult GetVehicleSeries()
{
    // Return list of vehicle series
    var series = _repository.GetVehicleSeries();
    return Json(series, JsonRequestBehavior.AllowGet);
}

public ActionResult GetProjectDescriptions()
{
    // Return list of project descriptions
    var descriptions = _repository.GetProjectDescriptions();
    return Json(descriptions, JsonRequestBehavior.AllowGet);
}

public ActionResult GetMakes()
{
    // Return list of makes
    var makes = _repository.GetMakes();
    return Json(makes, JsonRequestBehavior.AllowGet);
}

public ActionResult GetModels()
{
    // Return list of models
    var models = _repository.GetModels();
    return Json(models, JsonRequestBehavior.AllowGet);
}

public ActionResult GetEngines()
{
    // Return list of engines
    var engines = _repository.GetEngines();
    return Json(engines, JsonRequestBehavior.AllowGet);
}

public ActionResult GetTransmissions()
{
    // Return list of transmissions
    var transmissions = _repository.GetTransmissions();
    return Json(transmissions, JsonRequestBehavior.AllowGet);
}

public ActionResult GetDifferentials()
{
    // Return list of differentials
    var differentials = _repository.GetDifferentials();
    return Json(differentials, JsonRequestBehavior.AllowGet);
}
Key Improvements
Kendo UI Widget Integration: All dropdown fields are now implemented as Kendo UI ComboBoxes with proper data binding.

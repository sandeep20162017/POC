Updated _VehPopup.cshtml
html
@model BCES.Models.Vehicle.VehicleViewModel

<div class="vehicle-popup-header">
    <div class="vehicle-popup-title">@(Model.VehicleListId == 0 ? "Add New Vehicle Estimate" : $"Estimate #{Model.VehicleListId}")</div>
    <div class="vehicle-tab-actions">
        <button id="btnSave" class="vehicle-popup-btn vehicle-popup-btn-primary" type="button">
            <span class="vehicle-btn-icon">✓</span> Save
        </button>
        <button id="btnCancelVehicle" class="vehicle-popup-btn vehicle-popup-btn-secondary" type="button">
            <span class="vehicle-btn-icon">✕</span> Cancel
        </button>
    </div>
</div>

<div class="vehicle-form-container">
    <form id="vehicleForm">
        @Html.HiddenFor(m => m.VehicleListId)
        @Html.Hidden("formMode", Model.VehicleListId == 0 ? "Add" : "Edit", new { id = "formMode" })

        <!-- Vehicle Information Section -->
        <div class="vehicle-section-title">Vehicle Information</div>

        <!-- Row 1: Estimate #, Vehicle Series, Quantity -->
        <div class="vehicle-form-row">
            <div class="vehicle-form-group">
                @Html.LabelFor(m => m.VehicleListId, "Estimate #", new { @class = "vehicle-form-label" })
                @Html.TextBoxFor(m => m.VehicleListId, new { @class = "vehicle-form-control", @readonly = "readonly" })
            </div>

            <div class="vehicle-form-group">
                @Html.LabelFor(m => m.VehSeriesCode, "Vehicle Series", new { @class = "vehicle-form-label vehicle-required-label" })
                @(Html.Kendo().ComboBox()
                    .Name("VehSeriesCode")
                    .Placeholder("Select Vehicle Series...")
                    .DataTextField("VehSeriesCode")
                    .DataValueField("VehSeriesCode")
                    .Filter(FilterType.Contains)
                    .HtmlAttributes(new { @class = "vehicle-form-control", required = "required" })
                    .DataSource(source => source
                        .Read(read => read.Action("GetVehicleSeries", "Vehicles"))
                    )
                )
            </div>

            <div class="vehicle-form-group">
                @Html.LabelFor(m => m.NumOfVehicles, "# Of Vehicles", new { @class = "vehicle-form-label vehicle-required-label" })
                @(Html.Kendo().NumericTextBox()
                    .Name("NumOfVehicles")
                    .Format("0")
                    .Min(1)
                    .HtmlAttributes(new { @class = "vehicle-form-control", required = "required" })
                )
            </div>
        </div>

        <!-- Row 2: Description, SOP Number -->
        <div class="vehicle-form-row">
            <div class="vehicle-form-group vehicle-double-width">
                @Html.LabelFor(m => m.ProjDesc, "Description", new { @class = "vehicle-form-label vehicle-required-label" })
                @(Html.Kendo().ComboBox()
                    .Name("ProjDesc")
                    .Placeholder("Select Description...")
                    .DataTextField("ProjDesc")
                    .DataValueField("ProjDesc")
                    .Filter(FilterType.Contains)
                    .HtmlAttributes(new { @class = "vehicle-form-control", required = "required" })
                    .DataSource(source => source
                        .Read(read => read.Action("GetProjectDescriptions", "Vehicles"))
                    )
                )
            </div>

            <div class="vehicle-form-group">
                @Html.LabelFor(m => m.Sopnumber, "SOP Number", new { @class = "vehicle-form-label" })
                @Html.TextBoxFor(m => m.Sopnumber, new { @class = "vehicle-form-control" })
            </div>
        </div>

        <!-- Specifications Section -->
        <div class="vehicle-section-title">Specifications</div>

        <!-- Row 3: Make, Model, Year -->
        <div class="vehicle-form-row">
            <div class="vehicle-form-group">
                @Html.LabelFor(m => m.Make, "Make", new { @class = "vehicle-form-label" })
                @(Html.Kendo().ComboBox()
                    .Name("Make")
                    .Placeholder("Select Make...")
                    .DataTextField("Make")
                    .DataValueField("Make")
                    .Filter(FilterType.Contains)
                    .HtmlAttributes(new { @class = "vehicle-form-control" })
                    .DataSource(source => source
                        .Read(read => read.Action("GetMakes", "Vehicles"))
                    )
                )
            </div>

            <div class="vehicle-form-group">
                @Html.LabelFor(m => m.VehModel, "Model", new { @class = "vehicle-form-label" })
                @(Html.Kendo().ComboBox()
                    .Name("VehModel")
                    .Placeholder("Select Model...")
                    .DataTextField("VehModel")
                    .DataValueField("VehModel")
                    .Filter(FilterType.Contains)
                    .HtmlAttributes(new { @class = "vehicle-form-control" })
                    .DataSource(source => source
                        .Read(read => read.Action("GetModels", "Vehicles"))
                    )
                )
            </div>

            <div class="vehicle-form-group">
                @Html.LabelFor(m => m.Year, "Year", new { @class = "vehicle-form-label" })
                @(Html.Kendo().NumericTextBox()
                    .Name("Year")
                    .Format("0")
                    .Min(1900)
                    .Max(2100)
                    .HtmlAttributes(new { @class = "vehicle-form-control" })
                )
            </div>
        </div>

        <!-- Row 4: Engine, Transmission, Differential -->
        <div class="vehicle-form-row">
            <div class="vehicle-form-group">
                @Html.LabelFor(m => m.Engine, "Engine", new { @class = "vehicle-form-label" })
                @(Html.Kendo().ComboBox()
                    .Name("Engine")
                    .Placeholder("Select Engine...")
                    .DataTextField("Engine")
                    .DataValueField("Engine")
                    .Filter(FilterType.Contains)
                    .HtmlAttributes(new { @class = "vehicle-form-control" })
                    .DataSource(source => source
                        .Read(read => read.Action("GetEngines", "Vehicles"))
                    )
                )
            </div>

            <div class="vehicle-form-group">
                @Html.LabelFor(m => m.Transmission, "Transmission", new { @class = "vehicle-form-label" })
                @(Html.Kendo().ComboBox()
                    .Name("Transmission")
                    .Placeholder("Select Transmission...")
                    .DataTextField("Transmission")
                    .DataValueField("Transmission")
                    .Filter(FilterType.Contains)
                    .HtmlAttributes(new { @class = "vehicle-form-control" })
                    .DataSource(source => source
                        .Read(read => read.Action("GetTransmissions", "Vehicles"))
                    )
                )
            </div>

            <div class="vehicle-form-group">
                @Html.LabelFor(m => m.Differential, "Differential", new { @class = "vehicle-form-label" })
                @(Html.Kendo().ComboBox()
                    .Name("Differential")
                    .Placeholder("Select Differential...")
                    .DataTextField("Differential")
                    .DataValueField("Differential")
                    .Filter(FilterType.Contains)
                    .HtmlAttributes(new { @class = "vehicle-form-control" })
                    .DataSource(source => source
                        .Read(read => read.Action("GetDifferentials", "Vehicles"))
                    )
                )
            </div>
        </div>

        <!-- Audit Section -->
        <div class="vehicle-section-title">Audit Information</div>

        <!-- Row 5: Last Modified By, Last Modified Date -->
        <div class="vehicle-form-row">
            <div class="vehicle-form-group">
                @Html.LabelFor(m => m.ModifiedLastBy, "Last Modified By", new { @class = "vehicle-form-label" })
                @Html.TextBoxFor(m => m.ModifiedLastBy, new { @class = "vehicle-form-control", @readonly = "readonly" })
            </div>

            <div class="vehicle-form-group">
                @Html.LabelFor(m => m.ModifiedLastDate, "Last Modified Date", new { @class = "vehicle-form-label" })
                @Html.TextBoxFor(m => m.ModifiedLastDate, new { @class = "vehicle-form-control", @readonly = "readonly" })
            </div>
        </div>
    </form>
</div>
Updated JavaScript Initialization Code
Replace your current loadTabContent call in the openEstimatePopup function with this:

javascript
// ── Open vehicle popup and load form partial
window.openEstimatePopup = function (vehicleId) {
    console.warn('inside window.openEstimatePopup');
    var win = $("#estimatePopup").data("kendoWindow");
    currentVehicleId = vehicleId;
    pendingChanges = false; // Reset changes flag

    win.title(vehicleId === 0 ? "Add New Estimate" : "Vehicle Estimate #" + vehicleId);
    win.center().open();

    // Load vehicle tab first
    $("#vehicleTabContent").load('@Url.Action("GetVehicleById", "Vehicles")', { id: vehicleId }, function () {
        // Initialize Kendo UI widgets in the loaded content
        kendo.init($("#vehicleTabContent"));
        
        initVehiclePopupForm();
        wireVehicleForm();

        if (vehicleId !== 0) {
            enableAllTabs();
        }
    });
};
Additional CSS for Styling
Add this CSS to ensure proper styling of the form elements:

css
.vehicle-form-container {
    padding: 20px;
    overflow-y: auto;
    max-height: calc(100vh - 150px);
}

.vehicle-popup-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 15px 20px;
    background-color: #f8f9fa;
    border-bottom: 1px solid #dee2e6;
}

.vehicle-popup-title {
    font-size: 18px;
    font-weight: bold;
    color: #333;
}

.vehicle-tab-actions {
    display: flex;
    gap: 10px;
}

.vehicle-popup-btn {
    display: flex;
    align-items: center;
    padding: 8px 16px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-weight: 500;
}

.vehicle-popup-btn-primary {
    background-color: #007bff;
    color: white;
}

.vehicle-popup-btn-secondary {
    background-color: #6c757d;
    color: white;
}

.vehicle-btn-icon {
    margin-right: 5px;
}

.vehicle-section-title {
    font-size: 16px;
    font-weight: bold;
    margin: 20px 0 15px 0;
    padding-bottom: 5px;
    border-bottom: 2px solid #007bff;
    color: #007bff;
}

.vehicle-form-row {
    display: flex;
    gap: 15px;
    margin-bottom: 15px;
}

.vehicle-form-group {
    flex: 1;
    display: flex;
    flex-direction: column;
}

.vehicle-double-width {
    flex: 2;
}

.vehicle-form-label {
    margin-bottom: 5px;
    font-weight: 500;
}

.vehicle-required-label::after {
    content: "*";
    color: red;
    margin-left: 3px;
}

.vehicle-form-control {
    padding: 8px 12px;
    border: 1px solid #ced4da;
    border-radius: 4px;
    font-size: 14px;
}

.vehicle-form-control:focus {
    outline: none;
    border-color: #007bff;
    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
}

.k-combobox, .k-numerictextbox {
    width: 100%;
}
Key Changes Made

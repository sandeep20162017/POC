To address the requirement of dynamically retrieving `LinkType` from the database and ensuring that temporary tables are truncated after use, I will rewrite the scripts accordingly. Below are the full scripts for each requirement, including the logic to retrieve `LinkType` and truncate temporary tables after use.

---

### **1. Labour Details**
This script retrieves labour details including `LabourType`, `CC`, `Task`, `Usage`, `Time`, `WrenchTime`, and `DateRevised`.

```sql
USE [SBCES]
GO

-- Script to retrieve Labour Details
CREATE PROCEDURE [SBCES].[GetLabourDetails]
    @JobNumber VARCHAR(25),
    @RebuiltStockCode VARCHAR(30),
    @MMSBuyCode VARCHAR(30),
    @CoreCode VARCHAR(25)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        -- Retrieve LinkType from the database
        DECLARE @LinkType VARCHAR(5);
        SELECT TOP 1 @LinkType = TypeId
        FROM SBCES.EmployeeLabour
        WHERE LinkNumber = @JobNumber;

        -- Populate TempLabourList
        TRUNCATE TABLE dbo.TempLabourList;

        INSERT INTO dbo.TempLabourList (
            LabourType,
            CC,
            Task,
            Usage,
            Time,
            RatePerHour,
            TotalCost,
            ExtendedTime,
            EstimateType,
            EstimateNumber,
            WrenchTime
        )
        SELECT 
            EC.LabourDefn AS LabourType,
            EL.CostCentre AS CC,
            EL.Task,
            REPLACE(EL.Usage, ',', '.') AS Usage,
            EL.HrsReqd AS Time,
            ES.RatePerHour,
            ES.RatePerHour * CAST(EL.HrsReqd AS DECIMAL(10, 2)) * CAST(REPLACE(EL.Usage, ',', '.') AS DECIMAL(10, 2)) / 100 AS TotalCost,
            SBCES.DecimalMinutesToHhmm(EL.AdjHrs) AS ExtendedTime,
            EL.TypeId AS EstimateType,
            EL.LinkNumber AS EstimateNumber,
            EL.AdjHrs AS WrenchTime
        FROM 
            SBCES.EmployeeLabour EL
            JOIN SBCES.EmplClass EC ON EL.LabourType = EC.LabourType
            JOIN SBCES.EmployeeSalaries ES ON EC.WageGroup = ES.WageGroup
        WHERE 
            EL.LinkNumber = @JobNumber
            AND EL.TypeId = @LinkType;

        -- Retrieve Labour Details
        SELECT 
            LabourType,
            CC,
            Task,
            Usage,
            Time,
            WrenchTime,
            DateRevised
        FROM 
            dbo.TempLabourList;

        -- Truncate TempLabourList after use
        TRUNCATE TABLE dbo.TempLabourList;
    END TRY
    BEGIN CATCH
        -- Handle exceptions
        DECLARE @ErrorMessage NVARCHAR(4000);
        DECLARE @ErrorSeverity INT;
        DECLARE @ErrorState INT;

        SELECT 
            @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE();

        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
    END CATCH
END
GO
```

---

### **2. Labour Hour Summary**
This script summarizes the total labour hours (`LabourHours`) for each `CostCentre` (`CC`).

```sql
USE [SBCES]
GO

-- Script to retrieve Labour Hour Summary
CREATE PROCEDURE [SBCES].[GetLabourHourSummary]
    @JobNumber VARCHAR(25),
    @RebuiltStockCode VARCHAR(30),
    @MMSBuyCode VARCHAR(30),
    @CoreCode VARCHAR(25)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        -- Retrieve LinkType from the database
        DECLARE @LinkType VARCHAR(5);
        SELECT TOP 1 @LinkType = TypeId
        FROM SBCES.EmployeeLabour
        WHERE LinkNumber = @JobNumber;

        -- Populate TempLabourList
        TRUNCATE TABLE dbo.TempLabourList;

        INSERT INTO dbo.TempLabourList (
            LabourType,
            CC,
            Task,
            Usage,
            Time,
            RatePerHour,
            TotalCost,
            ExtendedTime,
            EstimateType,
            EstimateNumber,
            WrenchTime
        )
        SELECT 
            EC.LabourDefn AS LabourType,
            EL.CostCentre AS CC,
            EL.Task,
            REPLACE(EL.Usage, ',', '.') AS Usage,
            EL.HrsReqd AS Time,
            ES.RatePerHour,
            ES.RatePerHour * CAST(EL.HrsReqd AS DECIMAL(10, 2)) * CAST(REPLACE(EL.Usage, ',', '.') AS DECIMAL(10, 2)) / 100 AS TotalCost,
            SBCES.DecimalMinutesToHhmm(EL.AdjHrs) AS ExtendedTime,
            EL.TypeId AS EstimateType,
            EL.LinkNumber AS EstimateNumber,
            EL.AdjHrs AS WrenchTime
        FROM 
            SBCES.EmployeeLabour EL
            JOIN SBCES.EmplClass EC ON EL.LabourType = EC.LabourType
            JOIN SBCES.EmployeeSalaries ES ON EC.WageGroup = ES.WageGroup
        WHERE 
            EL.LinkNumber = @JobNumber
            AND EL.TypeId = @LinkType;

        -- Retrieve Labour Hour Summary
        SELECT 
            CC,
            SUM(CAST(Time AS DECIMAL(10, 2))) AS LabourHours
        FROM 
            dbo.TempLabourList
        GROUP BY 
            CC;

        -- Truncate TempLabourList after use
        TRUNCATE TABLE dbo.TempLabourList;
    END TRY
    BEGIN CATCH
        -- Handle exceptions
        DECLARE @ErrorMessage NVARCHAR(4000);
        DECLARE @ErrorSeverity INT;
        DECLARE @ErrorState INT;

        SELECT 
            @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE();

        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
    END CATCH
END
GO
```

---

### **3. Material Cost Summary**
This script summarizes the total material cost for each `CostCentre` (`CC`).

```sql
USE [SBCES]
GO

-- Script to retrieve Material Cost Summary
CREATE PROCEDURE [SBCES].[GetMaterialCostSummary]
    @JobNumber VARCHAR(25),
    @RebuiltStockCode VARCHAR(30),
    @MMSBuyCode VARCHAR(30),
    @CoreCode VARCHAR(25)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        -- Retrieve LinkType from the database
        DECLARE @LinkType VARCHAR(5);
        SELECT TOP 1 @LinkType = LinkType
        FROM SBCES.ScPartsUsed
        WHERE LinkCode = @JobNumber;

        -- Populate TempMaterialsList
        TRUNCATE TABLE SBCES.TempMaterialsList;

        INSERT INTO SBCES.TempMaterialsList (
            AssemblyArea,
            CostCentre,
            TotalCost,
            TaxableCost,
            RbReference
        )
        SELECT 
            ISNULL(C.Name, 'NONE') AS AssemblyArea,
            ISNULL(A.CostCentre, '0') AS CostCentre,
            SUM(CAST(A.Cost AS DECIMAL(18, 2))) AS TotalCost,
            SUM(CAST(A.TaxCost AS DECIMAL(18, 2))) AS TaxableCost,
            @JobNumber AS RbReference
        FROM (
            -- Stock-coded parts
            SELECT 
                CostCentre,
                CAST(SBCES.FinalCost(PercentUsage, QtyReqd, MmsCost, 0) - SBCES.FinalCost(PercentUsage, QtyReqd, CoreCost, 0) AS DECIMAL(18, 2)) AS Cost,
                CAST(SBCES.FinalCost(PercentUsage, QtyReqd, MmsCost, 0) AS DECIMAL(18, 2)) AS TaxCost
            FROM 
                SBCES.ScPartsUsed
            WHERE 
                LinkCode = @JobNumber
                AND RebuiltPart = 'N'
                AND LinkType = @LinkType

            UNION ALL

            -- Non-stock-coded parts
            SELECT 
                NSCPartsUsed.CostCentre,
                CAST(SBCES.FinalCost(NSCPartsUsed.PercentUsage, NSCPartsUsed.QtyReqd, NonStockCodedParts.OemPartCost, 0) - SBCES.FinalCost(NSCPartsUsed.PercentUsage, NSCPartsUsed.QtyReqd, NSCPartsUsed.CoreCost, 0) AS DECIMAL(18, 2)) AS Cost,
                CAST(SBCES.FinalCost(NSCPartsUsed.PercentUsage, NSCPartsUsed.QtyReqd, NonStockCodedParts.OemPartCost, 0) AS DECIMAL(18, 2)) AS TaxCost
            FROM 
                SBCES.NSCPartsUsed
                JOIN SBCES.NonStockCodedParts ON NSCPartsUsed.Id = NonStockCodedParts.Id
            WHERE 
                NSCPartsUsed.LinkCode = @JobNumber
                AND NSCPartsUsed.LinkType = @LinkType
        ) A
        JOIN SBCES.CostCentres C ON A.CostCentre = C.CostCentre
        GROUP BY 
            A.CostCentre, C.Name;

        -- Retrieve Material Cost Summary
        SELECT 
            CostCentre AS CC,
            SUM(TotalCost) AS TotalCost
        FROM 
            SBCES.TempMaterialsList
        GROUP BY 
            CostCentre;

        -- Truncate TempMaterialsList after use
        TRUNCATE TABLE SBCES.TempMaterialsList;
    END TRY
    BEGIN CATCH
        -- Handle exceptions
        DECLARE @ErrorMessage NVARCHAR(4000);
        DECLARE @ErrorSeverity INT;
        DECLARE @ErrorState INT;

        SELECT 
            @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE();

        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
    END CATCH
END
GO
```

---

### **4. Costs Summary**
This script calculates the total costs including `Core cost excl Tax`, `Material cost`, `Labour cost`, `Labour overhead total`, `Labour Total`, `Total rebuilt cost`, `Tax Total`, and `Total cost with tax`.

```sql
USE [SBCES]
GO

-- Script to retrieve Costs Summary
CREATE PROCEDURE [SBCES].[GetCostsSummary]
    @JobNumber VARCHAR(25),
    @RebuiltStockCode VARCHAR(30),
    @MMSBuyCode VARCHAR(30),
    @CoreCode VARCHAR(25)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        -- Retrieve LinkType from the database
        DECLARE @LinkType VARCHAR(5);
        SELECT TOP 1 @LinkType = LinkType
        FROM SBCES.ScPartsUsed
        WHERE LinkCode = @JobNumber;

        -- Populate TempLabourList and TempMaterialsList
        EXEC [SBCES].[PopulateTempLabourList] @JobNumber;
        EXEC [SBCES].[PopulateTempMaterialsList] @JobNumber;

        -- Core cost excl Tax
        DECLARE @CoreCostExclTax DECIMAL(18, 2);
        SELECT @CoreCostExclTax = SUM(CoreCost)
        FROM SBCES.ScPartsUsed
        WHERE LinkCode = @JobNumber AND LinkType = @LinkType;

        -- Material cost
        DECLARE @MaterialCost DECIMAL(18, 2);
        SELECT @MaterialCost = SUM(TotalCost)
        FROM SBCES.TempMaterialsList
        WHERE RbReference = @JobNumber;

        -- Labour cost
        DECLARE @LabourCost DECIMAL(18, 2);
        SELECT @LabourCost = SUM(TotalCost)
        FROM dbo.TempLabourList
        WHERE EstimateNumber = @JobNumber;

        -- Labour overhead total
        DECLARE @LabourOverheadTotal DECIMAL(18, 2);
        SELECT @LabourOverheadTotal = SUM(TotalCost * OverheadType)
        FROM dbo.TempLabourList
        WHERE EstimateNumber = @JobNumber;

        -- Labour Total
        DECLARE @LabourTotal DECIMAL(18, 2);
        SET @LabourTotal = @LabourCost + @LabourOverheadTotal;

        -- Total rebuilt cost
        DECLARE @TotalRebuiltCost DECIMAL(18, 2);
        SELECT @TotalRebuiltCost = SUM(EstimatedCost)
        FROM SBCES.RbMasterlist
        WHERE JobNumber = @JobNumber;

        -- Tax Total
        DECLARE @TaxTotal DECIMAL(18, 2);
        SELECT @TaxTotal = SUM(TaxableCost)
        FROM SBCES.TempMaterialsList
        WHERE RbReference = @JobNumber;

        -- Total cost with tax
        DECLARE @TotalCostWithTax DECIMAL(18, 2);
        SET @TotalCostWithTax = @MaterialCost + @LabourTotal + @TaxTotal;

        -- Output the results
        SELECT 
            @CoreCostExclTax AS [Core cost excl Tax],
            @MaterialCost AS [Material cost],
            @LabourCost AS [Labour cost],
            @LabourOverheadTotal AS [Labour overhead total],
            @LabourTotal AS [Labour Total],
            @TotalRebuiltCost AS [Total rebuilt cost],
            @TaxTotal AS [Tax Total],
            @TotalCostWithTax AS [Total cost with tax];

        -- Truncate TempLabourList and TempMaterialsList after use
        TRUNCATE TABLE dbo.TempLabourList;
        TRUNCATE TABLE SBCES.TempMaterialsList;
    END TRY
    BEGIN CATCH
        -- Handle exceptions
        DECLARE @ErrorMessage NVARCHAR(4000);
        DECLARE @ErrorSeverity INT;
        DECLARE @ErrorState INT;

        SELECT 
            @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE();

        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
    END CATCH
END
GO
```

---

### **Summary**
1. **Dynamic `LinkType` Retrieval**: The `LinkType` is dynamically retrieved from the database based on the `JobNumber`.
2. **Temporary Tables**: `TempLabourList` and `TempMaterialsList` are populated and truncated after use.
3. **Exception Handling**: All procedures include `TRY...CATCH` blocks for robust error handling.

These scripts ensure that the logic is modular, reusable, and adheres to best practices for database operations.

Below are the SQL scripts to fulfill the requested queries based on the provided `SBCES` schema. Each script is designed to handle the specific requirements with proper exception handling and comments.

---

### 1. **Labour Details**
This script retrieves the labour details including `LabourType`, `CC`, `Task`, `Usage`, `Time`, `WrenchTime`, and `DateRevised`.

```sql
USE [SBCES]
GO

-- Script to retrieve Labour Details
CREATE PROCEDURE [SBCES].[GetLabourDetails]
    @JobNumber VARCHAR(25),
    @RebuiltStockCode VARCHAR(30),
    @MMSBuyCode VARCHAR(30),
    @CoreCode VARCHAR(25)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SELECT 
            EC.LabourDefn AS LabourType,
            EL.CostCentre AS CC,
            EL.Task,
            REPLACE(EL.Usage, ',', '.') AS Usage,
            EL.HrsReqd AS Time,
            SBCES.DecimalMinutesToHhmm(EL.AdjHrs) AS WrenchTime,
            EL.DateRevised
        FROM 
            SBCES.EmployeeLabour EL
            JOIN SBCES.EmplClass EC ON EL.LabourType = EC.LabourType
        WHERE 
            EL.LinkNumber = @JobNumber
            AND EL.TypeId = 'RB'; -- Assuming TypeId is 'RB' for rebuild jobs
    END TRY
    BEGIN CATCH
        -- Handle exceptions
        DECLARE @ErrorMessage NVARCHAR(4000);
        DECLARE @ErrorSeverity INT;
        DECLARE @ErrorState INT;

        SELECT 
            @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE();

        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
    END CATCH
END
GO
```

---

### 2. **Labour Hour Summary**
This script summarizes the total labour hours (`LabourHours`) for each `CostCentre` (`CC`).

```sql
USE [SBCES]
GO

-- Script to retrieve Labour Hour Summary
CREATE PROCEDURE [SBCES].[GetLabourHourSummary]
    @JobNumber VARCHAR(25),
    @RebuiltStockCode VARCHAR(30),
    @MMSBuyCode VARCHAR(30),
    @CoreCode VARCHAR(25)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SELECT 
            EL.CostCentre AS CC,
            SUM(CAST(EL.HrsReqd AS DECIMAL(10, 2))) AS LabourHours
        FROM 
            SBCES.EmployeeLabour EL
        WHERE 
            EL.LinkNumber = @JobNumber
            AND EL.TypeId = 'RB'
        GROUP BY 
            EL.CostCentre;
    END TRY
    BEGIN CATCH
        -- Handle exceptions
        DECLARE @ErrorMessage NVARCHAR(4000);
        DECLARE @ErrorSeverity INT;
        DECLARE @ErrorState INT;

        SELECT 
            @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE();

        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
    END CATCH
END
GO
```

---

### 3. **Material Cost Summary**
This script summarizes the total material cost for each `CostCentre` (`CC`).

```sql
USE [SBCES]
GO

-- Script to retrieve Material Cost Summary
CREATE PROCEDURE [SBCES].[GetMaterialCostSummary]
    @JobNumber VARCHAR(25),
    @RebuiltStockCode VARCHAR(30),
    @MMSBuyCode VARCHAR(30),
    @CoreCode VARCHAR(25)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SELECT 
            CC,
            SUM(CAST(TotalCost AS DECIMAL(18, 2))) AS TotalCost
        FROM 
            SBCES.TempMaterialsList
        WHERE 
            RbReference = @JobNumber
        GROUP BY 
            CC;
    END TRY
    BEGIN CATCH
        -- Handle exceptions
        DECLARE @ErrorMessage NVARCHAR(4000);
        DECLARE @ErrorSeverity INT;
        DECLARE @ErrorState INT;

        SELECT 
            @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE();

        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
    END CATCH
END
GO
```

---

### 4. **Costs Summary**
This script calculates the total costs including `Core cost excl Tax`, `Material cost`, `Labour cost`, `Labour overhead total`, `Labour Total`, `Total rebuilt cost`, `Tax Total`, and `Total cost with tax`.

```sql
USE [SBCES]
GO

-- Script to retrieve Costs Summary
CREATE PROCEDURE [SBCES].[GetCostsSummary]
    @JobNumber VARCHAR(25),
    @RebuiltStockCode VARCHAR(30),
    @MMSBuyCode VARCHAR(30),
    @CoreCode VARCHAR(25)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        -- Core cost excl Tax
        DECLARE @CoreCostExclTax DECIMAL(18, 2);
        SELECT @CoreCostExclTax = SUM(CoreCost)
        FROM SBCES.ScPartsUsed
        WHERE LinkCode = @JobNumber AND LinkType = 'RB';

        -- Material cost
        DECLARE @MaterialCost DECIMAL(18, 2);
        SELECT @MaterialCost = SUM(TotalCost)
        FROM SBCES.TempMaterialsList
        WHERE RbReference = @JobNumber;

        -- Labour cost
        DECLARE @LabourCost DECIMAL(18, 2);
        SELECT @LabourCost = SUM(TotalCost)
        FROM dbo.TempLabourList
        WHERE EstimateNumber = @JobNumber;

        -- Labour overhead total
        DECLARE @LabourOverheadTotal DECIMAL(18, 2);
        SELECT @LabourOverheadTotal = SUM(TotalCost * OverheadType)
        FROM dbo.TempLabourList
        WHERE EstimateNumber = @JobNumber;

        -- Labour Total
        DECLARE @LabourTotal DECIMAL(18, 2);
        SET @LabourTotal = @LabourCost + @LabourOverheadTotal;

        -- Total rebuilt cost
        DECLARE @TotalRebuiltCost DECIMAL(18, 2);
        SELECT @TotalRebuiltCost = SUM(EstimatedCost)
        FROM SBCES.RbMasterlist
        WHERE JobNumber = @JobNumber;

        -- Tax Total
        DECLARE @TaxTotal DECIMAL(18, 2);
        SELECT @TaxTotal = SUM(TaxableCost)
        FROM SBCES.TempMaterialsList
        WHERE RbReference = @JobNumber;

        -- Total cost with tax
        DECLARE @TotalCostWithTax DECIMAL(18, 2);
        SET @TotalCostWithTax = @MaterialCost + @LabourTotal + @TaxTotal;

        -- Output the results
        SELECT 
            @CoreCostExclTax AS [Core cost excl Tax],
            @MaterialCost AS [Material cost],
            @LabourCost AS [Labour cost],
            @LabourOverheadTotal AS [Labour overhead total],
            @LabourTotal AS [Labour Total],
            @TotalRebuiltCost AS [Total rebuilt cost],
            @TaxTotal AS [Tax Total],
            @TotalCostWithTax AS [Total cost with tax];
    END TRY
    BEGIN CATCH
        -- Handle exceptions
        DECLARE @ErrorMessage NVARCHAR(4000);
        DECLARE @ErrorSeverity INT;
        DECLARE @ErrorState INT;

        SELECT 
            @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE();

        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
    END CATCH
END
GO
```

---

### Notes:
1. **Exception Handling**: Each script includes `TRY...CATCH` blocks to handle exceptions and provide meaningful error messages.
2. **Parameters**: The scripts accept `JobNumber`, `RebuiltStockCode`, `MMSBuyCode`, and `CoreCode` as input parameters.
3. **Assumptions**: The scripts assume that the `LinkNumber` corresponds to the `JobNumber` and that `TypeId` is `'RB'` for rebuild jobs. Adjust these assumptions as needed based on your specific requirements.

These scripts should meet your requirements for retrieving labour details, labour hour summaries, material cost summaries, and cost summaries.

To pass the rebuiltPartNum value from the RebuiltPartsController to the LabourDetailsController, you need to ensure that the rebuiltPartNum is correctly passed through the URL when making the AJAX request to fetch the data for the grid in the _LabourDetailsRebuiltParts.cshtml partial view.

Hereâ€™s how you can achieve this:

Step 1: Modify the _LabourDetailsRebuiltParts.cshtml Partial View
Update the Kendo Grid's .Read() method to include the rebuiltPartNum as a query parameter in the URL. You can achieve this by dynamically constructing the URL using Razor syntax.

html
Copy
@(Html.Kendo().Grid<LabourDetailsRebuiltPartsViewModel>()
    .Name("LabourDetailsGrid")
    .Columns(columns =>
    {
        // Define your columns here
    })
    .DataSource(dataSource => dataSource
        .Ajax()
        .Read(read => read.Url(Url.Action("GetLabourDetails", "LabourDetails") + "?rebuiltPartNum=" + ViewBag.RebuiltPartNum).Type(HttpVerbs.Get))
    )
)
Run HTML
In this example:

ViewBag.RebuiltPartNum is used to pass the rebuiltPartNum from the RebuiltPartsController to the partial view.

The URL for the .Read() method is dynamically constructed to include the rebuiltPartNum as a query parameter.

Step 2: Pass rebuiltPartNum from RebuiltPartsController to the Partial View
In the RebuiltPartsController, when you return the partial view, pass the rebuiltPartNum using the ViewBag or ViewData.

csharp
Copy
public IActionResult LabourDetailsPartial([FromQuery] string rebuiltPartNum)
{
    // Pass the rebuiltPartNum to the partial view
    ViewBag.RebuiltPartNum = rebuiltPartNum;

    var model = new List<LabourDetailsRebuiltPartsViewModel> { };
    return PartialView("_LabourDetailsRebuiltParts", model);
}
Step 3: Ensure LabourDetailsController Receives rebuiltPartNum
In the LabourDetailsController, the GetLabourDetails action method should correctly receive the rebuiltPartNum as a query parameter.

csharp
Copy
[HttpGet]
public async Task<ActionResult> GetLabourDetails([DataSourceRequest] DataSourceRequest request, [FromQuery] string rebuiltPartNum)
{
    if (string.IsNullOrEmpty(rebuiltPartNum))
    {
        return BadRequest("rebuiltPartNum is required.");
    }

    // Fetch data for the grid using the rebuiltPartNum
    var model = await GetLabourDetailsData(rebuiltPartNum);
    return Json(model.ToDataSourceResult(request));
}

private async Task<IEnumerable<LabourDetailsRebuiltPartsViewModel>> GetLabourDetailsData(string rebuiltPartNum)
{
    // Fetch data based on rebuiltPartNum
    // Example: Query your database or service
    var data = new List<LabourDetailsRebuiltPartsViewModel>
    {
        new LabourDetailsRebuiltPartsViewModel { /* Populate with data */ },
        new LabourDetailsRebuiltPartsViewModel { /* Populate with data */ }
    };

    return data;
}
Step 4: Ensure the Partial View is Loaded with the Correct rebuiltPartNum
When the partial view is loaded, the rebuiltPartNum should already be included in the URL for the .Read() method. This ensures that the LabourDetailsController receives the correct value.

Summary of Changes
In _LabourDetailsRebuiltParts.cshtml:

Dynamically construct the URL for the .Read() method using ViewBag.RebuiltPartNum.

In RebuiltPartsController:

Pass the rebuiltPartNum to the partial view using ViewBag.

In LabourDetailsController:

Ensure the GetLabourDetails action method receives the rebuiltPartNum as a query parameter and uses it to fetch the correct data.

Example of Full Implementation
RebuiltPartsController.cs
csharp
Copy
public IActionResult LabourDetailsPartial([FromQuery] string rebuiltPartNum)
{
    // Pass the rebuiltPartNum to the partial view
    ViewBag.RebuiltPartNum = rebuiltPartNum;

    var model = new List<LabourDetailsRebuiltPartsViewModel> { };
    return PartialView("_LabourDetailsRebuiltParts", model);
}
_LabourDetailsRebuiltParts.cshtml
html
Copy
@(Html.Kendo().Grid<LabourDetailsRebuiltPartsViewModel>()
    .Name("LabourDetailsGrid")
    .Columns(columns =>
    {
        columns.Bound(c => c.Property1).Title("Column 1");
        columns.Bound(c => c.Property2).Title("Column 2");
    })
    .DataSource(dataSource => dataSource
        .Ajax()
        .Read(read => read.Url(Url.Action("GetLabourDetails", "LabourDetails") + "?rebuiltPartNum=" + ViewBag.RebuiltPartNum).Type(HttpVerbs.Get))
    )
)
Run HTML
LabourDetailsController.cs
csharp
Copy
[HttpGet]
public async Task<ActionResult> GetLabourDetails([DataSourceRequest] DataSourceRequest request, [FromQuery] string rebuiltPartNum)
{
    if (string.IsNullOrEmpty(rebuiltPartNum))
    {
        return BadRequest("rebuiltPartNum is required.");
    }

    // Fetch data for the grid using the rebuiltPartNum
    var model = await GetLabourDetailsData(rebuiltPartNum);
    return Json(model.ToDataSourceResult(request));
}

private async Task<IEnumerable<LabourDetailsRebuiltPartsViewModel>> GetLabourDetailsData(string rebuiltPartNum)
{
    // Fetch data based on rebuiltPartNum
    // Example: Query your database or service
    var data = new List<LabourDetailsRebuiltPartsViewModel>
    {
        new LabourDetailsRebuiltPartsViewModel { /* Populate with data */ },
        new LabourDetailsRebuiltPartsViewModel { /* Populate with data */ }
    };

    return data;
}
Result
When the user clicks on a grid row, the rebuiltPartNum is passed to the LabourDetailsPartial action in the RebuiltPartsController.

The rebuiltPartNum is then passed to the _LabourDetailsRebuiltParts.cshtml partial view using ViewBag.

The Kendo Grid in the partial view makes an AJAX request to the GetLabourDetails action in the LabourDetailsController, including the rebuiltPartNum as a query parameter.

The LabourDetailsController uses the rebuiltPartNum to fetch the correct data and return it to the grid.

This ensures that the rebuiltPartNum is correctly passed from one controller to another.

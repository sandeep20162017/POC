Certainly! Below is a single SQL script that combines all the logic into one query. It uses the `RebuiltPartNumber` as the input and returns different result sets for each requirement. The script includes `PRINT` statements to indicate the start and end of each section.

---

### **Single SQL Script**

```sql
USE [SBCES]
GO

DECLARE @RebuiltPartNumber VARCHAR(30) = '035434'; -- Input RebuiltPartNumber

-- Declare variables for LinkCode and LinkType
DECLARE @LinkCode VARCHAR(30);
DECLARE @LinkType VARCHAR(5);

-- Retrieve LinkCode and LinkType
PRINT 'Retrieving LinkCode and LinkType...';
SELECT DISTINCT 
    @LinkCode = LinkCode,
    @LinkType = LinkType
FROM 
    [SBCES].[ScPartsUsed]
WHERE 
    LinkCode = @RebuiltPartNumber;

-- If not found in ScPartsUsed, check NScPartsUsed
IF @LinkCode IS NULL
BEGIN
    SELECT DISTINCT 
        @LinkCode = LinkCode,
        @LinkType = LinkType
    FROM 
        [SBCES].[NScPartsUsed]
    WHERE 
        LinkCode = @RebuiltPartNumber;
END

PRINT 'LinkCode: ' + ISNULL(@LinkCode, 'Not Found');
PRINT 'LinkType: ' + ISNULL(@LinkType, 'Not Found');

-- Check if LinkCode and LinkType were found
IF @LinkCode IS NULL OR @LinkType IS NULL
BEGIN
    PRINT 'Error: LinkCode or LinkType not found for RebuiltPartNumber: ' + @RebuiltPartNumber;
    RETURN;
END

-- Section 1: Labour Details
PRINT 'Fetching Labour Details...';
SELECT 
    EL.LabourDefn AS [LABOUR TYPE],
    EL.CostCentre AS [CC],
    EL.Task AS [TASK],
    REPLACE(EL.Usage, ',', '.') AS [USAGE],
    EL.HrsReqd AS [TIME],
    ES.RatePerHour AS [RATE PER HOUR],
    EL.TimeAddition AS [TIME ADDITION]
FROM 
    SBCES.EmployeeLabour EL
    JOIN SBCES.EmplClass EC ON EL.LabourDefn = UPPER(EC.LabourDefn)
    JOIN SBCES.EmployeeSalaries ES ON EC.WageGroup = ES.WageGroup
WHERE 
    EL.LinkNumber = @LinkCode
    AND EL.TypeId = @LinkType;

PRINT 'Labour Details fetched successfully.';

-- Section 2: Labour Hour Summary
PRINT 'Fetching Labour Hour Summary...';
SELECT 
    CC,
    SUM(CAST(HrsReqd AS DECIMAL(10, 2))) AS LabourHours
FROM 
    SBCES.EmployeeLabour
WHERE 
    LinkNumber = @LinkCode
    AND TypeId = @LinkType
GROUP BY 
    CostCentre;

PRINT 'Labour Hour Summary fetched successfully.';

-- Section 3: Material Cost Summary
PRINT 'Fetching Material Cost Summary...';
SELECT 
    ISNULL(C.Name, 'NONE') AS AssemblyArea,
    ISNULL(A.CostCentre, '0') AS CostCentre,
    SUM(CAST(A.Cost AS DECIMAL(18, 2))) AS TotalCost,
    SUM(CAST(A.TaxCost AS DECIMAL(18, 2))) AS TaxableCost
FROM (
    -- Stock-coded parts
    SELECT 
        CostCentre,
        CAST(SBCES.FinalCost(PercentUsage, QtyReqd, MmsCost, 0) - SBCES.FinalCost(PercentUsage, QtyReqd, CoreCost, 0) AS DECIMAL(18, 2)) AS Cost,
        CAST(SBCES.FinalCost(PercentUsage, QtyReqd, MmsCost, 0) AS DECIMAL(18, 2)) AS TaxCost
    FROM 
        SBCES.ScPartsUsed
    WHERE 
        LinkCode = @LinkCode
        AND RebuiltPart = 'N'
        AND LinkType = @LinkType

    UNION ALL

    -- Non-stock-coded parts
    SELECT 
        NSCPartsUsed.CostCentre,
        CAST(SBCES.FinalCost(NSCPartsUsed.PercentUsage, NSCPartsUsed.QtyReqd, NonStockCodedParts.OemPartCost, 0) - SBCES.FinalCost(NSCPartsUsed.PercentUsage, NSCPartsUsed.QtyReqd, NSCPartsUsed.CoreCost, 0) AS DECIMAL(18, 2)) AS Cost,
        CAST(SBCES.FinalCost(NSCPartsUsed.PercentUsage, NSCPartsUsed.QtyReqd, NonStockCodedParts.OemPartCost, 0) AS DECIMAL(18, 2)) AS TaxCost
    FROM 
        SBCES.NSCPartsUsed
        JOIN SBCES.NonStockCodedParts ON NSCPartsUsed.Id = NonStockCodedParts.Id
    WHERE 
        NSCPartsUsed.LinkCode = @LinkCode
        AND NSCPartsUsed.LinkType = @LinkType
) A
JOIN SBCES.CostCentres C ON A.CostCentre = C.CostCentre
GROUP BY 
    A.CostCentre, C.Name;

PRINT 'Material Cost Summary fetched successfully.';

-- Section 4: Total Costs Summary
PRINT 'Fetching Total Costs Summary...';

-- Core cost excl Tax
DECLARE @CoreCostExclTax DECIMAL(18, 2);
SELECT @CoreCostExclTax = SUM(CoreCost)
FROM SBCES.ScPartsUsed
WHERE LinkCode = @LinkCode AND LinkType = @LinkType;

-- Material cost
DECLARE @MaterialCost DECIMAL(18, 2);
SELECT @MaterialCost = SUM(TotalCost)
FROM SBCES.TempMaterialsList
WHERE RbReference = @LinkCode;

-- Labour cost
DECLARE @LabourCost DECIMAL(18, 2);
SELECT @LabourCost = SUM(TotalCost)
FROM dbo.TempLabourList
WHERE EstimateNumber = @LinkCode;

-- Labour overhead total
DECLARE @LabourOverheadTotal DECIMAL(18, 2);
SELECT @LabourOverheadTotal = SUM(TotalCost * OverheadType)
FROM dbo.TempLabourList
WHERE EstimateNumber = @LinkCode;

-- Labour Total
DECLARE @LabourTotal DECIMAL(18, 2);
SET @LabourTotal = @LabourCost + @LabourOverheadTotal;

-- Total rebuilt cost
DECLARE @TotalRebuiltCost DECIMAL(18, 2);
SELECT @TotalRebuiltCost = SUM(EstimatedCost)
FROM SBCES.RbMasterlist
WHERE RebuiltStockNum = @RebuiltPartNumber;

-- Tax Total
DECLARE @TaxTotal DECIMAL(18, 2);
SELECT @TaxTotal = SUM(TaxableCost)
FROM SBCES.TempMaterialsList
WHERE RbReference = @LinkCode;

-- Total cost with tax
DECLARE @TotalCostWithTax DECIMAL(18, 2);
SET @TotalCostWithTax = @MaterialCost + @LabourTotal + @TaxTotal;

-- Output the results
SELECT 
    @CoreCostExclTax AS [Core cost excl Tax],
    @MaterialCost AS [Material cost],
    @LabourCost AS [Labour cost],
    @LabourOverheadTotal AS [Labour overhead total],
    @LabourTotal AS [Labour Total],
    @TotalRebuiltCost AS [Total rebuilt cost],
    @TaxTotal AS [Tax Total],
    @TotalCostWithTax AS [Total cost with tax];

PRINT 'Total Costs Summary fetched successfully.';

-- Truncate temporary tables after use
PRINT 'Truncating temporary tables...';
TRUNCATE TABLE dbo.TempLabourList;
TRUNCATE TABLE SBCES.TempMaterialsList;

PRINT 'Temporary tables truncated successfully.';
```

---

### **Explanation of the Script**

1. **Input**: The script takes a single input, `@RebuiltPartNumber`, which is used to retrieve `LinkCode` and `LinkType`.
2. **LinkCode and LinkType Retrieval**:
   - The script first checks `ScPartsUsed` for `LinkCode` and `LinkType`.
   - If not found, it checks `NScPartsUsed`.
3. **Labour Details**:
   - Retrieves labour details using the retrieved `LinkCode` and `LinkType`.
4. **Labour Hour Summary**:
   - Calculates the total labour hours for each `CostCentre`.
5. **Material Cost Summary**:
   - Calculates the total material cost for each `CostCentre`.
6. **Total Costs Summary**:
   - Calculates the total costs, including core cost, material cost, labour cost, and tax.
7. **Temporary Tables**:
   - The script truncates `TempLabourList` and `TempMaterialsList` after use to ensure no leftover data.

---

### **How to Run**

1. Replace `'035434'` with the desired `RebuiltPartNumber`.
2. Execute the script in SQL Server Management Studio (SSMS) or any SQL client.
3. The script will print messages for each step and return separate result sets for each query.

---

### **Output**

- **Labour Details**: A table with labour details.
- **Labour Hour Summary**: A table with total labour hours per `CostCentre`.
- **Material Cost Summary**: A table with total material cost per `CostCentre`.
- **Total Costs Summary**: A single row with total costs.

This script is self-contained and does not require stored procedures, making it easy to test and debug.

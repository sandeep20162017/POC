You are ASp.NET core and Telerik ASP.NET core expert.
In the following code, I want to add and delete but donot allow to update. Can't use Editable(false) in model as it prevents keying in when I click on add.
Pls assist fixing this
cshtml :
@using BCES.Models.OEMKit
@using BCES.Models.Common
@model IEnumerable<BCES.Models.OEMKit.OEMKitModel>

@{
    ViewData["Title"] = "OEM Kit";
}
<style>
    /* logic for required col changes - CSS for required columns */
    .required-header::after {
        content: " *";
        color: #e32;
        font-weight: bold;
    }

    .required-cell {
        background-color: rgba(255, 0, 0, 0.05);
    }

    .k-edit-cell.required-cell input {
        border-left: 3px solid #e32;
        padding-left: 5px;
    }
</style>
<h6>OEM Kit</h6>

@(Html.Kendo().Grid<OEMKitModel>()
    .Name("OEMKitGrid")
    .Columns(columns =>
    {
        columns.Bound(u => u.PartNumber)
            .Title("Part Number")
            .HeaderHtmlAttributes(new { @class = "required-header" })
            .HtmlAttributes(new { @class = "required-cell" }) ;

        columns.Bound(u => u.Keyword)
             .Title("Keyword")
             .HeaderHtmlAttributes(new { @class = "required-header" })
             .HtmlAttributes(new { @class = "required-cell" });
        columns.Bound(u => u.DetailedDesc)
            .Title("Description")
            .HeaderHtmlAttributes(new { @class = "required-header" })
            .HtmlAttributes(new { @class = "required-cell" });
        columns.Bound(u => u.EstimatedCost)
            .Title("Estimated Cost")
            .HeaderHtmlAttributes(new { @class = "required-header" })
            .HtmlAttributes(new { @class = "required-cell" });

        columns.Command(command =>
        {
            if (@ViewBag.RoleId == 1)
            {
               // command.Edit().Text(" ").IconClass("k-icon k-i-edit").HtmlAttributes(new { title = "Edit" }); // Edit button with tooltip
            }
            if (@ViewBag.RoleId == 1)
            {
                command.Custom("Delete")
                                        .Click("showDeleteConfirmation")
                                        .Text(" ")
                                        .IconClass("k-icon k-i-delete")
                                        .HtmlAttributes(new { @class = "text-danger", title = "Delete" });
               // command.Destroy().Text(" ").IconClass("k-icon k-i-delete").HtmlAttributes(new { title = "Delete" }); // Edit button with tooltip
            }
        }).Width(200);
  
    })
    .Events(events => events.Edit("onEdit"))
    .ToolBar(toolbar =>
    {
        toolbar.Create();
        toolbar.Save();
    })
    .Editable(editable => editable.Mode(GridEditMode.InCell))
    .Pageable()
    .Sortable()
   // .ClientDetailTemplateId("template")
    .Resizable(r => r.Columns(true))
    //    .Groupable(g => g.ShowFooter(false))
    .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
    // .Scrollable()
    .DataSource(dataSource => dataSource
        .Ajax()
        .Events(events => events
            .Error("onDataSourceError")
            .RequestEnd("onRequestEnd")
        )
        .Model(model =>
        {
            model.Id(c => c.PartNumber);
            model.Field(c => c.PartNumber);
            model.Field(c => c.Keyword);
            model.Field(c => c.DetailedDesc);
            model.Field(c => c.EstimatedCost);
            
        })
        .Read(read => read.Url(Url.Action("GetOEMKitView", "OEMKit")).Type(HttpVerbs.Get))
        .Create(create => create.Url(Url.Action("CreateOEMKit", "OEMKit")).Type(HttpVerbs.Post))
        .Update(update => update.Url(Url.Action("UpdateOEMKit", "OEMKit")).Type(HttpVerbs.Post))
        .Destroy(delete => delete.Url(Url.Action("DeleteOEMKit", "OEMKit")).Type(HttpVerbs.Post))
    )
)

<!-- Custom Delete Confirmation Dialog -->
<div id="deleteConfirmationDialog" style="display: none;">
    <div class="confirmation-message">
        <span class="k-icon k-i-warning confirmation-icon"></span>
        <span>Are you sure you want to delete this item?</span>
    </div>
    <div class="confirmation-buttons">
        <button type="button" class="k-button cancel-btn">Cancel</button>
        <button type="button" class="k-button confirm-btn">Delete</button>
    </div>
</div>
<!-- Add a placeholder for the notification -->
<div id="notification"></div>
@section Scripts {
    <script>
        function getAutoCompleteParams() {
            var input = $("input[data-role='autocomplete']:focus");
            return {
                columnName: input.attr("name"),
                searchText: input.val() || ""
            };
        }
    </script>
    <script>
        // Initialize notification FIRST
        var notification = $("#notification").kendoNotification({
            position: {
                pinned: true,
                top: 50,
                right: 30
            },
            autoHideAfter: 4000,
            stacking: "down"
        }).data("kendoNotification");

        // Error handler
        function onDataSourceError(e) {
            let errorMessage = e.xhr.responseText;

            if (e.errorThrown) {
                errorMessage += e.errorThrown;
            } else if (e.xhr && e.xhr.responseText) {
                errorMessage += e.xhr.responseText;
            }

            notification.error(errorMessage);
        }

        // Success handler
        function onRequestEnd(e) {
            if (e.type === "create") {
                notification.success("Record created successfully");
            } else if (e.type === "update") {
                notification.success("Record updated successfully");
            } else if (e.type === "destroy") {
                notification.success("Record deleted successfully");
            }
        }
    </script>
    <script>
        // Initialize custom confirmation dialog
        var deleteDialog = $("#deleteConfirmationDialog").kendoWindow({
            width: "400px",
            title: "Confirm Delete",
            modal: true,
            visible: false,
            actions: ["Close"]
        }).data("kendoWindow");

        function showDeleteConfirmation(e) {
            e.preventDefault();
            var grid = $("#OEMKitGrid").data("kendoGrid");
            var dataItem = grid.dataItem($(e.currentTarget).closest("tr"));
            deleteDialog.dataItem = dataItem;
            deleteDialog.center().open();
        }

        $(document).on("click", "#deleteConfirmationDialog .confirm-btn", function () {
            var grid = $("#OEMKitGrid").data("kendoGrid");
            var dataItem = deleteDialog.dataItem;

            $.ajax({
                url: '@Url.Action("DeleteOEMKit", "OEMKit")',
                type: 'POST',
                data: { PartNumber: dataItem.PartNumber },
                success: function () {
                    grid.dataSource.remove(dataItem);
                    notification.success("Record deleted successfully");
                    deleteDialog.close();
                },
                error: function (xhr) {
                    notification.error("Delete failed: " + xhr.responseText);
                    deleteDialog.close();
                }
            });
        });

        $(document).on("click", "#deleteConfirmationDialog .cancel-btn", function () {
            deleteDialog.close();
        });
    </script>
    <script>
        function onEdit(e) {
            var grid = e.sender;
            var cell = e.container.closest("td");
            var columnIndex = cell.index();
            var column = grid.columns[columnIndex];
            var fieldName = column.field;

            console.log('fieldName:', fieldName);
            if (fieldName === "PartNumber") {
                var input = e.container.find("input");
                input.on("input", function () {
                    this.value = this.value.toUpperCase();
                });

                /* logic for required col changes - Highlight required field during edit */
                e.container.addClass("required-cell");
            }
        }
    </script>
    
}

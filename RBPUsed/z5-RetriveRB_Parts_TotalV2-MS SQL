CREATE OR ALTER PROCEDURE SBCES.RetrieveRBPTotalCost2
    @vi_idnum VARCHAR(30),
    @vi_type VARCHAR(30) = 'RB'  -- Default to 'RB' per original logic
AS
BEGIN
    SET NOCOUNT ON;
    
    -- Create temporary table for intermediate results
    CREATE TABLE #TempMaterials (
        AssemblyArea VARCHAR(100),
        CostCentre VARCHAR(30),
        AdjustedCost DECIMAL(20,10),
        TaxableCost DECIMAL(20,10)
    );
    
    -- Recursive CTE to calculate quantity multipliers
    WITH RebuiltHierarchy AS (
        SELECT 
            MmsRebuiltCode AS RebuiltPart,
            QtyReqd,
            PercentUsage,
            1 AS Level,
            CAST(1.0 AS DECIMAL(20,10)) AS CumulativeMultiplier
        FROM SBCES.ScPartsUsed
        WHERE RebuiltPart = 'Y'
          AND LinkType = 'RB'
          AND UPPER(LinkCode) = UPPER(@vi_idnum)
        
        UNION ALL
        
        SELECT 
            spu.MmsRebuiltCode,
            spu.QtyReqd,
            spu.PercentUsage,
            rh.Level + 1,
            rh.CumulativeMultiplier * (spu.QtyReqd * spu.PercentUsage / 100)
        FROM SBCES.ScPartsUsed spu
        INNER JOIN RebuiltHierarchy rh 
            ON UPPER(spu.LinkCode) = UPPER(rh.RebuiltPart)
        WHERE spu.RebuiltPart = 'Y'
          AND spu.LinkType = 'RB'
          AND rh.Level < 100  -- Safety against infinite recursion
    ),
    
    -- Aggregate multipliers for each rebuilt part
    PartMultipliers AS (
        SELECT 
            UPPER(RebuiltPart) AS PartCode,
            SUM(CumulativeMultiplier) AS TotalMultiplier
        FROM RebuiltHierarchy
        GROUP BY RebuiltPart
    )
    
    -- Calculate and insert costs for all relevant parts
    INSERT INTO #TempMaterials
    SELECT 
        ISNULL(cc.Name, 'NONE') AS AssemblyArea,
        ISNULL(pc.CostCentre, '0') AS CostCentre,
        pc.AdjustedCost,
        pc.TaxableCost
    FROM (
        -- Base stock parts
        SELECT
            spu.CostCentre,
            (SBCES.FinalCost(spu.PercentUsage, spu.QtyReqd, spu.MmsCost, 0) - 
             SBCES.FinalCost(spu.PercentUsage, spu.QtyReqd, spu.CoreCost, 0)
            ) * COALESCE(pm.TotalMultiplier, 1) AS AdjustedCost,
            SBCES.FinalCost(spu.PercentUsage, spu.QtyReqd, spu.MmsCost, 0) * COALESCE(pm.TotalMultiplier, 1) AS TaxableCost
        FROM SBCES.ScPartsUsed spu
        LEFT JOIN PartMultipliers pm 
            ON UPPER(spu.LinkCode) = pm.PartCode
        WHERE spu.RebuiltPart = 'N'
          AND spu.LinkType = 'RB'
          AND (
                UPPER(spu.LinkCode) = UPPER(@vi_idnum)
                OR pm.PartCode IS NOT NULL
          )
        
        UNION ALL
        
        -- Non-stock parts
        SELECT
            nsp.CostCentre,
            (SBCES.FinalCost(nsp.PercentUsage, nsp.QtyReqd, ncp.OemPartCost, 0) - 
             SBCES.FinalCost(nsp.PercentUsage, nsp.QtyReqd, nsp.CoreCost, 0)
            ) * COALESCE(pm.TotalMultiplier, 1) AS AdjustedCost,
            SBCES.FinalCost(nsp.PercentUsage, nsp.QtyReqd, ncp.OemPartCost, 0) * COALESCE(pm.TotalMultiplier, 1) AS TaxableCost
        FROM SBCES.NscPartsUsed nsp
        LEFT JOIN SBCES.NonStockCodedParts ncp 
            ON nsp.Id = ncp.Id
        LEFT JOIN PartMultipliers pm 
            ON UPPER(nsp.LinkCode) = pm.PartCode
        WHERE nsp.LinkType = 'RB'
          AND (
                UPPER(nsp.LinkCode) = UPPER(@vi_idnum)
                OR pm.PartCode IS NOT NULL
          )
    ) pc
    LEFT JOIN SBCES.CostCentres cc 
        ON pc.CostCentre = cc.CostCentre;

    -- Return aggregated results
    SELECT 
        CostCentre AS [CC],
        SUM(AdjustedCost) AS [TOTAL COST],
        SUM(TaxableCost) AS [TAXABLE COST]
    FROM #TempMaterials
    GROUP BY CostCentre
    ORDER BY CostCentre ASC;
    
    -- Temp table automatically drops when procedure exits
END;

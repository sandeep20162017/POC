You are ASP.NET core and Telerik ASP.NET core expert.
OrigSuppNum and OrigSuppNum already has  .HeaderHtmlAttributes(new { @class = "required-header" })
                    .HtmlAttributes(new { @class = "required-cell" })
I want to show telerik kendo notification when whthis cell is empty and prvent user for making any changes.
Using Telerik InCell edit and Batch (false).
Ideally would like resuse the client side code based on the HtmlAttributes. When the cell is blank and user clicks on 'Save' or update.
Suggest any other best practise for InCell edit. Is it possible to highlight all the required cells which are required but are empty instead of one cell at a time?
I want the best UI/UX experience


@(
Html.Kendo().Grid<BCES.Models.Parts.NscPartsUsedViewModel>()
                
                @* .Name($"NscPartsMaterialDetailsRebuiltPartsGrid") *@
                .Name($"NscPartsMaterialDetailsRebuiltPartsGrid")
                 .HtmlAttributes(new { data_grid_type = ViewBag.GridType?.ToString() ?? "NscGrid" }) //lockcols
                .Events(events => events
                    .DataBound("onGridDataBound")
                    .Save("onGridCellSave")
                    
                )
                .Columns(columns =>
                {
                    columns.Bound(c => c.Oid).Title("Oid").Hidden(true);
                    columns.Bound(c => c.OrigSuppNum).Title("Supplier Number").Filterable(ftb => ftb.Cell(cell => cell.Operator("Contains")))
                    .EditorTemplateName("NscComboBox")
                     .HeaderHtmlAttributes(new { @class = "required-header" })
                    .HtmlAttributes(new { @class = "required-cell" })
                    .Width(140);
                 
                    columns.Bound(c => c.OrigSupplierName)
                    .Title("Supplier Name")
                     .HeaderHtmlAttributes(new { @class = "required-header" })
                    .HtmlAttributes(new { @class = "required-cell" })
                    .Filterable(ftb => ftb.Cell(cell => cell.Operator("Contains")
                    .SuggestionOperator(FilterType.Contains)))
                    .EditorTemplateName("ComboBoxEditor")
                    .EditorViewData(new Dictionary<string, object> {
                        { "LockMap", "RbGrid:always;MakevsBuy:notNew;VehicleGrid:notNew" } //lockcols
                    })
                    .EditorTemplateName("NscSupplierComboBox").Width(120);
..
        }).Width(100);
                })

                .Events (events => 
                {
                    //events.Edit("onEdit") ;
                    //events.Save("onSave");
                 //   events.CellClose("onCellClose");
                    events.SaveChanges("onSaveChanges");
                    events.CellClose("onGridCellClose");

                })

     .ToolBar(toolbar =>
    {
        if (@ViewBag.RoleId == 1)
        {
            toolbar.Create();
            toolbar.Save();
        }
    })
    .Editable(editable => editable.Mode(GridEditMode.InCell))
    .Pageable()
    .Sortable()
    .Resizable(r => r.Columns(true))
   // .Scrollable()
    .DataSource(dataSource => dataSource
        .Ajax()
        .Batch(false)
        .ServerOperation(false)
        .Model(model =>
        {
            model.Id(c => c.OrigSuppNum);
            model.Field(c => c.OrigSupplierName);
            model.Field(c => c.OrigSuppNum);
           ..
        })
        .Events(events =>
        {
                      
            events.RequestEnd("onNScRequestEnd");
            events.Error("onDataSourceError");
        })

        .Read(read => read.Url(Url.Action("GetNscPartsUsedInEstimates", "NscPartsUsedInEstimates") + "?id=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Get))
       
        .Create(create => create.Url(Url.Action("CreateNscPartsUsedInEstimatess", "NscPartsUsedInEstimates") + "?id=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Post))
        .Update(update => update.Url(Url.Action("UpdateNscPartsUsedInEstimates", "NscPartsUsedInEstimates") + "?id=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Post))
        .Destroy(delete => delete.Url(Url.Action("DeleteNscPartsUsedInRbtParts", "NscPartsUsedInEstimates") + "?id=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Post))
    )

)



Here‚Äôs a clean and well‚Äëstructured T‚ÄëSQL that does exactly what you asked‚ÄØ‚Äì with proper use of schema names, ISNULLs, casting, and debug output via commented checkpoints so you can trace values if needed:

sql
Copy
Edit
DECLARE 
    @LinkCode VARCHAR(30) = -- your value here,
    @TaxRateRaw VARCHAR(20);

-- üìå Fetch TAX_RATE from settings
SELECT 
    @TaxRateRaw = TAX_RATE 
FROM SBCES.CES_SETTINGS;
-- Debug: SELECT 'TAX RATE RAW' = @TaxRateRaw;

-- Convert TAX_RATE varchar to decimal
DECLARE @TaxRate DECIMAL(18,6) = 
    CAST(REPLACE(ISNULL(@TaxRateRaw,'0'), ',', '.') AS DECIMAL(18,6));

-- CTE computing each cost bucket per COSTCENTRE
WITH CostBuckets AS (
    SELECT 
        SUS.CostCentre,
        -- 1. SCParts (Rebuilt = 'N')
        SUM(
            CAST(
                SBCES.FinalCost(
                    SUS.PercentUsage,
                    SUS.QtyReqd,
                    SUS.MmsCost,
                    0
                ) AS DECIMAL(18,2)
            )
        ) FILTER (WHERE SUS.RebuiltPart = 'N' AND SUS.LinkType = 'BUS' AND SUS.LinkCode = @LinkCode)
        AS SCPartsMaterialCost,

        -- 2. NSCParts (uses NscPartsUsed.Cost)
        SUM(
            CAST(
                SBCES.FinalCost(
                    NSUS.PercentUsage,
                    NSUS.QtyReqd,
                    NSUS.Cost,
                    0
                ) AS DECIMAL(18,2)
            )
        ) FILTER (WHERE NSUS.LinkType = 'BUS' AND NSUS.LinkCode = @LinkCode)
        AS NSCSCPartsMaterialCost,

        -- 3. RBParts (Rebuilt = 'Y')
        SUM(
            CAST(
                SBCES.FinalCost(
                    SUS.PercentUsage,
                    SUS.QtyReqd,
                    SUS.MmsCost,
                    0
                ) AS DECIMAL(18,2)
            )
        ) FILTER (WHERE SUS.RebuiltPart = 'Y' AND SUS.LinkType = 'BUS' AND SUS.LinkCode = @LinkCode)
        AS RBPartsMaterialCost
    FROM SBCES.ScPartsUsed AS SUS
    LEFT JOIN SBCES.NscPartsUsed AS NSUS
        ON NSUS.LinkCode = SUS.LinkCode
        AND NSUS.LinkType = SUS.LinkType
        AND NSUS.CostCentre = SUS.CostCentre
    WHERE 
        (SUS.LinkType = 'BUS' AND SUS.LinkCode = @LinkCode)
     OR (NSUS.LinkType = 'BUS' AND NSUS.LinkCode = @LinkCode)
    GROUP BY SUS.CostCentre
)
SELECT 
    ISNULL(COSTCENTRE, '0')        AS CostCentre,
    ISNULL(TotalCost, 0)           AS TotalCost,
    ISNULL(TaxAmount, 0)           AS Tax,
    ISNULL(TotalWithTax, 0)        AS TotalWithTax
FROM (
    SELECT
        CostCentre,
        ISNULL(SCPartsMaterialCost, 0)
      + ISNULL(NSCSCPartsMaterialCost, 0)
      + ISNULL(RBPartsMaterialCost, 0)
      AS TotalCost,
      -- compute TAX and total
      (ISNULL(SCPartsMaterialCost, 0)
      + ISNULL(NSCSCPartsMaterialCost, 0)
      + ISNULL(RBPartsMaterialCost, 0)) * @TaxRate AS TaxAmount,
      (ISNULL(SCPartsMaterialCost, 0)
      + ISNULL(NSCSCPartsMaterialCost, 0)
      + ISNULL(RBPartsMaterialCost, 0)) * (1 + @TaxRate) AS TotalWithTax
    FROM CostBuckets
) AS A
GROUP BY COSTCENTRE, TotalCost, TaxAmount, TotalWithTax
ORDER BY CostCentre;
üîç Explanation & Debug Tips
Tax Rate: We grab it from SBCES.CES_SETTINGS and sanitize the string using REPLACE, then cast it to decimal. This way ‚Äú0.075‚Äù or ‚Äú7,5‚Äù always works.

FinalCost(): We wrap inside CAST(... AS DECIMAL(18,2)) to ensure uniform precision.

Filters: I used SQL standard SUM(...) FILTER (WHERE ...), but if your SQL version doesn‚Äôt support it, you can replace each SUM with:

sql
Copy
Edit
SUM(CASE WHEN ‚Ä¶ THEN CAST(‚Ä¶AS DECIMAL(18,2)) ELSE 0 END)
Debug:

Uncomment SELECT 'TAX RATE RAW' = @TaxRateRaw; to verify what‚Äôs fetched.

Add interim SELECT from the CTE to check bucket values before final aggregation.

This query should give you, per CostCentre:

TotalCost = sum of all three buckets

Tax = TotalCost * TAX_RATE

TotalWithTax = TotalCost + Tax

Let me know if your environment doesn‚Äôt support FILTER, or if you need the debug stage expanded.

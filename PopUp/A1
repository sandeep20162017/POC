@using BCES.Models.Vehicle
@using BCES.Models.Common
@model IEnumerable<BCES.Models.Vehicle.VehicleViewModel>

@{
    ViewData["Title"] = "Vehicle Estimate";
    var parentGridId = $"{ViewBag.PartNum}";
    var vehGridName = $"VehicleGrid";
}

<style>
    /* Existing styles remain unchanged */
    .required-header::after {
        content: " *";
        color: #e32;
        font-weight: bold;
    }
    .required-cell {
        background-color: rgba(255, 0, 0, 0.05);
    }
    .k-edit-cell.required-cell input {
        border-left: 3px solid #e32;
        padding-left: 5px;
    }
    .k-grid td {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }
    .k-grid-header .k-header {
        white-space: normal;
        vertical-align: top;
    }
    .k-grid .k-hierarchy-col {
        width: 10px;
    }
</style>

<h6>Vehicle Estimate</h6>

@(Html.Kendo().TabStrip()
    .Name("vehicleTabStrip")
    .Animation(animation => animation.Open(effect => effect.Fade(FadeDirection.In)))
    .Items(tabstrip =>
    {
        tabstrip.Add().Text("Vehicles")
            .Selected(true)
            .Content(@<text>
    @try
    {
        @(Html.Kendo().Grid<VehicleViewModel>()
            .Name($"VehicleGrid")
            .Columns(columns =>
            {
                // Columns definition remains the same as before
                columns.Bound(c => c.VehicleListId).Title("Estimate #")
                    .ClientTemplate("#= VehicleListId && VehicleListId !== 0 ? VehicleListId : '(System Generated)' #")
                    .Filterable(ftb => ftb.Cell(cell => {
                        cell.Operator("eq");
                        cell.ShowOperators(true);
                    }))
                    .IncludeInMenu(false)
                    .Width(190).Lockable(true);

                columns.Bound(c => c.VehSeriesCode).Title("Vehicle Series Code")
                    .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)))
                    .EditorTemplateName("ComboBoxEditor")
                    .HeaderHtmlAttributes(new { @class = "required-header" })
                    .HtmlAttributes(new { @class = "required-cell", required="required"})
                    .Width(160);

                columns.Bound(c => c.NumOfVehicles).Title("Number Of Vehicles")
                    .HeaderHtmlAttributes(new { @class = "required-header" })
                    .HtmlAttributes(new { @class = "required-cell", required="required" })
                    .Filterable(ftb => ftb.Cell(cell => cell.Operator("eq").SuggestionOperator(FilterType.Contains)))
                    .Width(160).Hidden(false).MinScreenWidth(768);

                columns.Bound(c => c.ProjDesc).Title("Project Description")
                    .HeaderHtmlAttributes(new { @class = "required-header" })
                    .HtmlAttributes(new { @class = "required-cell", required="required" })    
                    .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)))
                    .EditorTemplateName("VehDescriptionComboBox")
                    .Width(250).Hidden(false).MinScreenWidth(768);

                columns.Bound(c => c.Make).Title("Make")
                    .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)))
                    .EditorTemplateName("ComboBoxEditor")
                    .Width(160).Hidden(false).MinScreenWidth(768);

                columns.Bound(c => c.VehModel).Title("Model")
                    .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)))
                    .EditorTemplateName("ComboBoxEditor")
                    .Width(160).Hidden(false).MinScreenWidth(768);

                columns.Bound(c => c.Year).Title("Year")
                    .Filterable(ftb => ftb.Cell(cell => cell.Operator("gte")))
                    .EditorTemplateName("ComboBoxEditor")
                    .Width(150).Hidden(false).MinScreenWidth(768);

                columns.Bound(c => c.Engine).Title("Engine")
                    .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)))
                    .EditorTemplateName("ComboBoxEditor")
                    .Width(150).Hidden(false).MinScreenWidth(768);

                columns.Bound(c => c.Transmission).Title("Transmission")
                    .EditorTemplateName("ComboBoxEditor")
                    .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)))
                    .Width(150).Hidden(false).MinScreenWidth(768);

                columns.Bound(c => c.Sopnumber).Title("Sop Number")
                    .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)))
                    .Width(150).Hidden(false).MinScreenWidth(768);

                columns.Bound(c => c.ModifiedLastBy).Title("Modified By")
                    .ClientTemplate("#= ModifiedLastBy && ModifiedLastBy !== 0 ? ModifiedLastBy : '(System Generated)' #")
                    .Width(150).Hidden(false).MinScreenWidth(768)
                    .IncludeInMenu(true)
                    .Lockable(false);

                columns.Bound(c => c.ModifiedLastDate).Title("Modified Date")
                    .ClientTemplate("#=  ModifiedLastDate !== 0 ? formatToEST(ModifiedLastDate) : '(System Generated)' #")
                    .Width(150).Hidden(false).MinScreenWidth(768)
                    .IncludeInMenu(true)
                    .Lockable(false);

                columns.Command(command =>
                {
                    command.Custom("Archive").Text(" ").IconClass("k-icon k-i-folder").Click("onArchiveClick").HtmlAttributes(new { title = "Archive" });
                    command.Custom("Copy").Text(" ").IconClass("k-icon k-i-copy").Click("onCopyEstimateClick").HtmlAttributes(new { title = "Copy Estimate" });
                    command.Custom("Delete")
                        .Click("showDeleteConfirmation")
                        .Text(" ")
                        .IconClass("k-icon k-i-delete")
                        .HtmlAttributes(new {
                            @class = "text-danger",
                            data_grid = "VehicleGrid",
                            data_url = Url.Action("DeleteVehicle", "Vehicles"),
                            data_id_field = "VehicleListId",
                            data_grid_type = "VehicleGrid"
                        });
                }).Title("Actions").IncludeInMenu(false).Width(300);
            })
            .ToolBar(toolbar => {
                toolbar.Create().Text("Add new record").IconClass("k-icon k-i-plus").HtmlAttributes(new {
                    title = "Add new record",
                    @class = "k-primary"
                });
                toolbar.Save().SaveText("Save changes").CancelText("Cancel changes")
                    .HtmlAttributes(new {
                        title_save = "Save all changes",
                        title_cancel = "Discard changes"
                    });
            })
            // CHANGE 1: Switch from InCell to PopUp edit mode
            .Editable(editable => editable.Mode(GridEditMode.PopUp)
                .TemplateName("CustomVehiclePopUpTemplate") // Custom template name
                .Window(w => w.Title("Vehicle Details").Width(600)) // Popup window configuration
            )
            .Events(events => events
                .ExcelExport("onExcelExport")
                .DetailExpand("onDetailExpand")
                .DetailCollapse("onDetailCollapse")
                .DataBound("onVehGridDataBound")
                .Save("onVehGridSave")
                .Edit("onVehEdit") // Added Edit event handler
            )
            .Pageable(p => p
                .PageSizes(new int[] {1, 10, 20, 50 })
                .Position(GridPagerPosition.Top)
            )
            .Sortable()
            .ClientDetailTemplateId("template")
            .Resizable(r => r.Columns(true))
            .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
            .ColumnMenu(menu => menu.Enabled(true))
            .Scrollable(s => s.Height("auto"))
            .Reorderable(reorder => reorder.Columns(true))
            .DataSource(dataSource => dataSource
                .Ajax()
                .PageSize(1)
                .Model(model =>
                {
                    model.Id(c => c.VehicleListId);
                    model.Field(c => c.VehicleListId).Editable(false);
                    model.Field(c => c.ModifiedLastDate).Editable(false);
                    model.Field(c => c.ModifiedLastBy).Editable(false);
                })
                .Events(events =>
                {
                    events.RequestEnd("onVehRequestEnd");
                    events.Error("onDataSourceError");
                })
                .Read(read => read.Url(Url.Action("GetVehiclesView", "Vehicles") + "?id=" + ViewBag.PartNum + "&gridType=VehicleGrid").Type(HttpVerbs.Get))
                .Create(create => create.Url(Url.Action("AddVehiclesView", "Vehicles") + "?id=" + ViewBag.PartNum + "&gridType=VehicleGrid").Type(HttpVerbs.Post))
                .Update(update => update.Url(Url.Action("UpdateVehiclesView", "Vehicles") + "?id=" + ViewBag.PartNum + "&gridType=VehicleGrid").Type(HttpVerbs.Post))
                .Destroy(delete => delete.Url(Url.Action("DeleteVehiclesView", "Vehicles") + "?id=" + ViewBag.PartNum + "&gridType=VehicleGrid").Type(HttpVerbs.Post))
            )
        )
    }
    catch (Exception ex)
    {
        <div class="alert alert-danger">Error loading Vehicle Estimate: @ex.Message</div>
    }
</text>);

        tabstrip.Add().Text("Archived Vehicles")
            .Content(@<text>
    @try
    {
        @Html.Partial("_ArchivedVehicleIndex")
    }
    catch (Exception ex)
    {
        <div class="alert alert-danger">Error loading archived vehicles: @ex.Message</div>
    }
</text>);
    })
)

<!-- CHANGE 2: Add the custom popup template -->
<script id="CustomVehiclePopUpTemplate" type="text/kendo-tmpl">
    <div class="k-edit-form-container">
        <div class="k-edit-label">
            <label for="VehSeriesCode">Vehicle Series Code</label>
        </div>
        <div class="k-edit-field">
            @(Html.Kendo().ComboBox()
                .Name("VehSeriesCode")
                .DataTextField("Text")
                .DataValueField("Value")
                .Filter(FilterType.Contains)
                .HtmlAttributes(new { @class = "required-field", required = "required", validationmessage = "Vehicle Series is required" })
                .TemplateId("seriesTemplate")
                .Height(400)
                .DataSource(source => {
                    source.Read(read => {
                        read.Action("GetVehicleSeries", "Vehicles");
                    });
                })
                .ToClientTemplate()
            )
            <span data-for="VehSeriesCode" class="k-invalid-msg"></span>
        </div>

        <div class="k-edit-label">
            <label for="NumOfVehicles">Number of Vehicles</label>
        </div>
        <div class="k-edit-field">
            @(Html.Kendo().NumericTextBoxFor(m => m.NumOfVehicles)
                .Name("NumOfVehicles")
                .Format("0")
                .Min(1)
                .HtmlAttributes(new { @class = "required-field", required = "required", validationmessage = "Number of vehicles is required" })
                .ToClientTemplate()
            )
            <span data-for="NumOfVehicles" class="k-invalid-msg"></span>
        </div>

        <div class="k-edit-label">
            <label for="ProjDesc">Project Description</label>
        </div>
        <div class="k-edit-field">
            @(Html.Kendo().ComboBox()
                .Name("ProjDesc")
                .DataTextField("Text")
                .DataValueField("Value")
                .Filter(FilterType.Contains)
                .HtmlAttributes(new { @class = "required-field", required = "required", validationmessage = "Description is required" })
                .Height(400)
                .DataSource(source => {
                    source.Read(read => {
                        read.Action("GetProjectDescriptions", "Vehicles");
                    });
                })
                .ToClientTemplate()
            )
            <span data-for="ProjDesc" class="k-invalid-msg"></span>
        </div>

        <div class="k-edit-label">
            <label for="Make">Make</label>
        </div>
        <div class="k-edit-field">
            @(Html.Kendo().ComboBox()
                .Name("Make")
                .DataTextField("Text")
                .DataValueField("Value")
                .Filter(FilterType.Contains)
                .Height(400)
                .DataSource(source => {
                    source.Read(read => {
                        read.Action("GetVehicleMakes", "Vehicles");
                    });
                })
                .ToClientTemplate()
            )
        </div>

        <div class="k-edit-label">
            <label for="VehModel">Model</label>
        </div>
        <div class="k-edit-field">
            @(Html.Kendo().ComboBox()
                .Name("VehModel")
                .DataTextField("Text")
                .DataValueField("Value")
                .Filter(FilterType.Contains)
                .Height(400)
                .DataSource(source => {
                    source.Read(read => {
                        read.Action("GetVehicleModels", "Vehicles");
                    });
                })
                .ToClientTemplate()
            )
        </div>

        <div class="k-edit-label">
            <label for="Year">Year</label>
        </div>
        <div class="k-edit-field">
            @(Html.Kendo().ComboBox()
                .Name("Year")
                .DataTextField("Text")
                .DataValueField("Value")
                .Filter(FilterType.Contains)
                .Height(400)
                .DataSource(source => {
                    source.Read(read => {
                        read.Action("GetVehicleYears", "Vehicles");
                    });
                })
                .ToClientTemplate()
            )
        </div>

        <div class="k-edit-label">
            <label for="Engine">Engine</label>
        </div>
        <div class="k-edit-field">
            @(Html.Kendo().ComboBox()
                .Name("Engine")
                .DataTextField("Text")
                .DataValueField("Value")
                .Filter(FilterType.Contains)
                .Height(400)
                .DataSource(source => {
                    source.Read(read => {
                        read.Action("GetVehicleEngines", "Vehicles");
                    });
                })
                .ToClientTemplate()
            )
        </div>

        <div class="k-edit-label">
            <label for="Transmission">Transmission</label>
        </div>
        <div class="k-edit-field">
            @(Html.Kendo().ComboBox()
                .Name("Transmission")
                .DataTextField("Text")
                .DataValueField("Value")
                .Filter(FilterType.Contains)
                .Height(400)
                .DataSource(source => {
                    source.Read(read => {
                        read.Action("GetVehicleTransmissions", "Vehicles");
                    });
                })
                .ToClientTemplate()
            )
        </div>

        <div class="k-edit-label">
            <label for="Sopnumber">Sop Number</label>
        </div>
        <div class="k-edit-field">
            @(Html.Kendo().TextBoxFor(m => m.Sopnumber)
                .Name("Sopnumber")
                .HtmlAttributes(new { style = "width:100%" })
                .ToClientTemplate()
        </div>

        <!-- Non-editable fields -->
        <div class="k-edit-label">
            <label>Estimate #</label>
        </div>
        <div class="k-edit-field">
            <input type="text" class="k-textbox" disabled="disabled" value="#= VehicleListId ? VehicleListId : '(System Generated)' #" />
        </div>

        <div class="k-edit-label">
            <label>Modified By</label>
        </div>
        <div class="k-edit-field">
            <input type="text" class="k-textbox" disabled="disabled" value="#= ModifiedLastBy ? ModifiedLastBy : '(System Generated)' #" />
        </div>

        <div class="k-edit-label">
            <label>Modified Date</label>
        </div>
        <div class="k-edit-field">
            <input type="text" class="k-textbox" disabled="disabled" value="#= ModifiedLastDate ? kendo.toString(kendo.parseDate(ModifiedLastDate), 'g') : '(System Generated)' #" />
        </div>

        <div class="k-edit-buttons">
            <button type="button" class="k-button k-button-icontext k-primary k-grid-update">
                <span class="k-icon k-i-check"></span>Save
            </button>
            <button type="button" class="k-button k-button-icontext k-grid-cancel">
                <span class="k-icon k-i-cancel"></span>Cancel
            </button>
        </div>
    </div>
</script>

<!-- Existing dialogs and notification elements remain unchanged -->
<div id="deleteConfirmationDialog" style="display: none;">
    <!-- ... existing delete dialog ... -->
</div>

<div id="notification"></div>

<div id="copyEstimateDialog" style="display:none;">
    <!-- ... existing copy dialog ... -->
</div>

<div id="email-estimate-container" style="display: none;">
    @Html.Partial("_EmailEstimatePopup")
    <div id="estimates-container"></div>
</div>

@section Scripts {
    <script>
        // Add new function for PopUp validation
        function onVehEdit(e) {
            if (e.model.isNew()) {
                e.model.set("VehicleListId", 0);
            }
            
            // Initialize validation for the popup
            var container = e.container;
            container.kendoValidator({
                messages: {
                    required: "This field is required"
                }
            });
        }

        // Existing JavaScript functions remain unchanged
        function truncateText(text, max = 25) {
            return text?.length > max ? text.substr(0, max) + '...' : text;
        }

        function truncateWords(text, wordCount = 10) {
            if (!text) return '';
            const words = text.split(/\s+/);
            return words.length > wordCount ?
                words.slice(0, wordCount).join(' ') + '...' :
                text;
        }

        function formatVehicleSeries(buses) {
            if (!buses || !buses.length) return 'Select Vehicle';
            return buses.map(b =>
                `<span title="${b.BusName}">${truncateWords(b.BusName, 10)}</span>`
            ).join(', ');
        }

        function refreshVehicleSeriesTemplate() {
            const grid = $("#VehicleGrid").data("kendoGrid");
            grid.refresh();
        }

        // ... ALL OTHER EXISTING JAVASCRIPT FUNCTIONS REMAIN UNCHANGED ...
        // (Including onArchiveClick, onEmailEstimateClick, onSaveToExcelClick, 
        //  onDataSourceError, onVehRequestEnd, formatToEST, etc.)
        
        // Add new function for PopUp field formatting
        function formatToEST(dateStr) {
            if (!dateStr || dateStr === 0) {
                return "(System Generated)";
            }

            const date = new Date(dateStr);

            if (isNaN(date.getTime())) {
                return "(System Generated)";
            }

            return kendo.toString(date, "g"); // General date/time format
        }
    </script>

    <!-- Existing templates remain unchanged -->
    <script id="template" type="text/x-kendo-template">
        <div id="detail-template-#=VehicleListId#"></div>
    </script>
    
    <script id="archived-template" type="text/x-kendo-template">
        <div id="archived-detail-template-#=VehicleListId#"></div>
    </script>
}

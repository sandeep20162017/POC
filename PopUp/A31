public ActionResult GetVehicleById(int id, bool readOnly = false)
{
    try
    {
        VehicleViewModel vehicle;

        if (id == 0)
        {
            // "Add New" scenario — return a blank view model
            vehicle = new VehicleViewModel();
            ViewBag.FormattedDate = "System Generated";
        }
        else
        {
            // Edit scenario — fetch from DB
            const string sql = @"
                SELECT [VehicleListId], [VehSeriesCode], [NumOfVehicles], [ProjDesc],
                       [DateEntered], [EnteredBy], [ModifiedLastBy], [ModifiedLastDate],
                       [Make], [Model], [Year], [Engine], [Transmission], [Differential], [Sopnumber]
                FROM [CES].[SBCES].[VehicleList]
                WHERE VehicleListId = @Id";

            vehicle = _dbConnection.QueryFirstOrDefault<VehicleViewModel>(sql, new { Id = id });

            if (vehicle == null)
            {
                return Content("Vehicle estimate not found.");
            }

            if (vehicle.ModifiedLastDate == null)
            {
                ViewBag.FormattedDate = "System Generated";
            }
            else
            {
                try
                {
                    DateTime localDate = vehicle.ModifiedLastDate.Value;
                    ViewBag.FormattedDate = localDate.ToString("MMM dd, yyyy hh:mm:ss tt");
                }
                catch
                {
                    ViewBag.FormattedDate = "Invalid Date";
                }
            }
        }

        ViewBag.ReadOnly = readOnly;

        return PartialView("_VehicleEstimateDetails", vehicle);
    }
    catch (Exception ex)
    {
        // Consider using proper logging here
        return Content($"Error loading vehicle estimate: {ex.Message}");
    }
}

html
@model BCES.Models.Vehicle.VehicleViewModel

@{
    // Set read-only mode
    bool isReadOnly = true;
}

<div class="custom-editor-container read-only-form">
    @Html.HiddenFor(model => model.VehicleListId)

    <!-- Row 1: Estimate #, Vehicle Series, # of Vehicles -->
    <div class="editor-row">
        <div class="editor-group required-field">
            <span class="editor-label">Vehicle Series</span>
            <div class="editor-field">
                @if (isReadOnly)
                {
                    @Html.TextBoxFor(model => model.VehSeriesCode, new { @class = "k-textbox", @readonly = "readonly" })
                }
                else
                {
                    @Html.EditorFor(model => model.VehSeriesCode, "ComboBoxEditor", new { required = "required" })
                }
            </div>
        </div>
        
        <div class="editor-group required-field">
            <span class="editor-label"># of Vehicles</span>
            <div class="editor-field">
                @if (isReadOnly)
                {
                    @Html.TextBoxFor(model => model.NumOfVehicles, new { @class = "k-textbox", @readonly = "readonly" })
                }
                else
                {
                    @(Html.Kendo().IntegerTextBoxFor(model => model.NumOfVehicles)
                        .Min(1)
                        .HtmlAttributes(new { required = "required", style = "width:100%" })
                    )
                }
            </div>
        </div>
    </div>

    <!-- Row 2: Make, Model, Year -->
    <div class="editor-row">
        <div class="editor-group">
            <span class="editor-label">Make</span>
            <div class="editor-field">
                @if (isReadOnly)
                {
                    @Html.TextBoxFor(model => model.Make, new { @class = "k-textbox", @readonly = "readonly" })
                }
                else
                {
                    @Html.EditorFor(model => model.Make, "ComboBoxEditor")
                }
            </div>
        </div>
        
        <div class="editor-group">
            <span class="editor-label">Model</span>
            <div class="editor-field">
                @if (isReadOnly)
                {
                    @Html.TextBoxFor(model => model.VehModel, new { @class = "k-textbox", @readonly = "readonly" })
                }
                else
                {
                    @Html.EditorFor(model => model.VehModel, "ComboBoxEditor")
                }
            </div>
        </div>
        
        <div class="editor-group">
            <span class="editor-label">Year</span>
            <div class="editor-field">
                @if (isReadOnly)
                {
                    @Html.TextBoxFor(model => model.Year, new { @class = "k-textbox", @readonly = "readonly" })
                }
                else
                {
                    @Html.EditorFor(model => model.Year, "ComboBoxEditor")
                }
            </div>
        </div>
    </div>

    <!-- Row 3: Engine, Transmission, SOP Number -->
    <div class="editor-row">
        <div class="editor-group">
            <span class="editor-label">Engine</span>
            <div class="editor-field">
                @if (isReadOnly)
                {
                    @Html.TextBoxFor(model => model.Engine, new { @class = "k-textbox", @readonly = "readonly" })
                }
                else
                {
                    @Html.EditorFor(model => model.Engine, "ComboBoxEditor")
                }
            </div>
        </div>
        
        <div class="editor-group">
            <span class="editor-label">Transmission</span>
            <div class="editor-field">
                @if (isReadOnly)
                {
                    @Html.TextBoxFor(model => model.Transmission, new { @class = "k-textbox", @readonly = "readonly" })
                }
                else
                {
                    @Html.EditorFor(model => model.Transmission, "ComboBoxEditor")
                }
            </div>
        </div>
        
        <div class="editor-group">
            <span class="editor-label">SOP Number</span>
            <div class="editor-field">
                @if (isReadOnly)
                {
                    @Html.TextBoxFor(model => model.Sopnumber, new { @class = "k-textbox", @readonly = "readonly" })
                }
                else
                {
                    @(Html.Kendo().TextBoxFor(model => model.Sopnumber)
                        .HtmlAttributes(new { style = "width:100%" })
                    )
                }
            </div>
        </div>
    </div>

    <!-- Full-width row for Project Description -->
    <div class="editor-row">
        <div class="editor-group required-field" style="flex: 0 0 100%">
            <span class="editor-label">Project Description</span>
            <div class="editor-field">
                @if (isReadOnly)
                {
                    @Html.TextAreaFor(model => model.ProjDesc, new { @class = "k-textbox", @readonly = "readonly", style = "width:100%; height:80px;" })
                }
                else
                {
                    @Html.EditorFor(model => model.ProjDesc, "VehDescriptionComboBox", new { required = "required" })
                }
            </div>
        </div>
    </div>

    <!-- Additional fields for read-only view -->
    <div class="editor-row">
        <div class="editor-group">
            <span class="editor-label">Modified By</span>
            <div class="editor-field">
                @Html.TextBoxFor(model => model.ModifiedLastBy, new { @class = "k-textbox", @readonly = "readonly" })
            </div>
        </div>
        
        <div class="editor-group">
            <span class="editor-label">Modified Date</span>
            <div class="editor-field">
                @{
                    // Handle date formatting server-side
                    string formattedDate = "System Generated";
                    if (Model.ModifiedLastDate != 0)
                    {
                        try
                        {
                            DateTime date = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc)
                                .AddMilliseconds(Model.ModifiedLastDate)
                                .ToLocalTime();
                            
                            formattedDate = date.ToString("MMM dd, yyyy hh:mm:ss tt");
                        }
                        catch
                        {
                            formattedDate = "Invalid Date";
                        }
                    }
                }
                @Html.TextBox("ModifiedLastDateDisplay", formattedDate, new { @class = "k-textbox", @readonly = "readonly" })
            </div>
        </div>
    </div>
</div>
Key Changes:
Removed Client-Side Formatting Dependency:

Instead of relying on the formatToEST JavaScript function, we're now formatting the date server-side in Razor

This eliminates the compile-time error since everything is handled within the Razor context

Server-Side Date Formatting:

csharp
string formattedDate = "System Generated";
if (Model.ModifiedLastDate != 0)
{
    try
    {
        DateTime date = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc)
            .AddMilliseconds(Model.ModifiedLastDate)
            .ToLocalTime();
        
        formattedDate = date.ToString("MMM dd, yyyy hh:mm:ss tt");
    }
    catch
    {
        formattedDate = "Invalid Date";
    }
}
Safe Date Handling:

Added try-catch block to handle any potential date conversion errors

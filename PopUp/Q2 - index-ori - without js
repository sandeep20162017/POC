You are AP.NET and telerik ASP.NET core expert. I want to use PopUpEditor, instead in InCell edit. I need custom editor file (call it CustomVehicleEditorTemplate.cshtml). I have made the changes in index.cshtml.
I need to display multiple lables and columns on a sngle row. 
Example row 1 should have Estimate#, Vechile Series, #of vehicle
row 2 should have Make, Model Year
row 3 should have Engine, Transmission and SOP Num.
these must be same gapin the columns and in the rows.
Add css to adjust the span.
Must use the same controllers (like Combobox) used in Incell mode.
Pls gibe me full version of  CustomVehicleEditorTemplate.cshtml
@using BCES.Models.Vehicle
@using BCES.Models.Common
@model IEnumerable<BCES.Models.Vehicle.VehicleViewModel>
@* @Html.Partial("_CESGridEditLockHelper") *@

@{
    ViewData["Title"] = "Vehicle Estimate";
    var parentGridId = $"{ViewBag.PartNum}";/* save gridname in hidden field for JS */
    //var vehGridName = $"VehicleGrid_{ViewBag.PartNum}";

    var vehGridName = $"VehicleGrid";
}

<style>
    /* logic for required col changes - CSS for required columns */
    .required-header::after {
        content: " *";
        color: #e32;
        font-weight: bold;
    }

    .required-cell {
        background-color: rgba(255, 0, 0, 0.05);
    }

    .k-edit-cell.required-cell input {
        border-left: 3px solid #e32;
        padding-left: 5px;
    }
</style>

<h6>Vehicle Estimate</h6>

@(Html.Kendo().TabStrip()
    .Name("vehicleTabStrip")
    .Animation(animation => animation.Open(effect => effect.Fade(FadeDirection.In)))
    .Items(tabstrip =>
    {
        tabstrip.Add().Text("Vehicles")
            .Selected(true)
            .Content(@<text>
    @try
    {

    @(Html.Kendo().Grid<VehicleViewModel>()
    .Name($"VehicleGrid")
    .Columns(columns =>
    {
    columns.Bound(c => c.VehicleListId).Title("Estimate #")

    .ClientTemplate("#= VehicleListId && VehicleListId !== 0 ? VehicleListId : '(System Generated)' #")
    .Filterable(ftb => ftb.Cell(cell => {
    cell.Operator("eq"); // Equal to
    cell.ShowOperators(true); // Hide the operator dropdown
    }))
    .IncludeInMenu(false)
    .Width(190).Lockable(true);

    columns.Bound(c => c.VehSeriesCode).Title("Vehicle Series Code")
    .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)))
    .EditorTemplateName("ComboBoxEditor")
    .HeaderHtmlAttributes(new { @class = "required-header" })
    .HtmlAttributes(new { @class = "required-cell" , required="required"})
    .Width(160);

    columns.Bound(c => c.NumOfVehicles).Title("Number Of Vehicles")
    .HeaderHtmlAttributes(new { @class = "required-header" })
    .HtmlAttributes(new { @class = "required-cell", required="required" })
    // .ClientTemplate("#: truncateText(data.KeyWord) #")
    .Filterable(ftb => ftb.Cell(cell => cell.Operator("eq").SuggestionOperator(FilterType.Contains)))
    
    .Width(160).Hidden(false).MinScreenWidth(768);

    columns.Bound(c => c.ProjDesc).Title("Project Description")
    .HeaderHtmlAttributes(new { @class = "required-header" })
    .HtmlAttributes(new { @class = "required-cell", required="required" })    
    .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)))
    .EditorTemplateName("VehDescriptionComboBox")
    .Width(250).Hidden(false).MinScreenWidth(768)
     ;

    columns.Bound(c => c.Make).Title("Make")
    // .ClientTemplate("#: truncateText(data.JobNumber) #")
    .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)))
    .EditorTemplateName("ComboBoxEditor")
    .Width(160).Hidden(false).MinScreenWidth(768);

    columns.Bound(c => c.VehModel).Title("Model")
    // .ClientTemplate("#: truncateText(data.JobNumber) #")
    .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)))
    .EditorTemplateName("ComboBoxEditor")
    .Width(160).Hidden(false).MinScreenWidth(768);


    columns.Bound(c => c.Year).Title("Year")
    .Filterable(ftb => ftb.Cell(cell => cell.Operator("gte")))
    .EditorTemplateName("ComboBoxEditor")
    .Width(150).Hidden(false).MinScreenWidth(768);

    columns.Bound(c => c.Engine).Title("Engine")
    .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)))
    .EditorTemplateName("ComboBoxEditor")
    .Width(150).Hidden(false).MinScreenWidth(768);

    columns.Bound(c => c.Transmission).Title("Transmission")
    .EditorTemplateName("ComboBoxEditor")
    .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)))
    .Width(150).Hidden(false).MinScreenWidth(768);

    columns.Bound(c => c.Sopnumber).Title("Sop Number")
    .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)))
    .Width(150).Hidden(false).MinScreenWidth(768);

    columns.Bound(c => c.ModifiedLastBy).Title("Modified By")
   
     .ClientTemplate("#= ModifiedLastBy && ModifiedLastBy !== 0 ? ModifiedLastBy : '(System Generated)' #")
    .Width(150).Hidden(false).MinScreenWidth(768)
    .IncludeInMenu(true)
    .Lockable(false);

    columns.Bound(c => c.ModifiedLastDate).Title("Modified Date")
   
    .ClientTemplate("#=  ModifiedLastDate !== 0 ? formatToEST(ModifiedLastDate) : '(System Generated)' #")
    
    .Width(150).Hidden(false).MinScreenWidth(768)
    .IncludeInMenu(true)
    .Lockable(false);

    columns.Command(command =>
    {
    // command.Edit().Text(" ").IconClass("k-icon k-i-edit").HtmlAttributes(new { title = "Edit" }); // Edit button with tooltip
    command.Custom("Archive").Text(" ").IconClass("k-icon k-i-folder").Click("onArchiveClick").HtmlAttributes(new { title = "Archive" }); // Archive button with tooltip
    command.Custom("Copy").Text(" ").IconClass("k-icon k-i-copy").Click("onCopyEstimateClick").HtmlAttributes(new { title = "Copy Estimate" });//san17 copy estimate
    command.Custom("Delete")
    .Click("showDeleteConfirmation")
    .Text(" ")
    .IconClass("k-icon k-i-delete")
    .HtmlAttributes(new {
    @class = "text-danger",
    data_grid = "VehicleGrid",
    data_url = Url.Action("DeleteVehicle", "Vehicles"),
    data_id_field = "VehicleListId", //pk
    data_grid_type = "VehicleGrid" // static value
    });
    // command.Custom("Save to Excel").Text(" ").IconClass("k-icon k-i-file-excel").Click("onSaveToExcelClick").HtmlAttributes(new { title = "Save to Excel" }); // Save to Excel button with tooltip
    // command.Custom("Email Estimate").Text(" ").IconClass("k-icon k-i-email").Click("onEmailEstimateClick").HtmlAttributes(new { title = "Email Estimate" }); // Email Estimate button with tooltip
    }).Title("Actions").IncludeInMenu(false).Width(300); // Set a fixed width for the Actions column
    })

    .ToolBar(toolbar => {
    toolbar.Create().Text("Add new record").IconClass("k-icon k-i-plus").HtmlAttributes(new {
    title = "Add new record",
    @class = "k-primary"
    });
    toolbar.Save().SaveText("Save changes").CancelText("Cancel changes")
    .HtmlAttributes(new {
    title_save = "Save all changes",
    title_cancel = "Discard changes"
    });
    //toolbar.Excel().Text("Variance Report");
    })
    @*  .Excel(excel =>
    {
    excel.FileName("VarianceReport.xlsx")
    .Filterable(true)
    .AllPages(true);

    }) *@
    .Editable(editable => editable.Mode(GridEditMode.InCell))
    .Events(events => events
    .ExcelExport("onExcelExport")
    .DetailExpand("onDetailExpand")
    .DetailCollapse("onDetailCollapse")
    .DataBound("onVehGridDataBound")
    .Save("onVehGridSave")
    // .Edit("onVehEdit")
    )
    //.Pageable()
    .Pageable(p => p
    .PageSizes(new int[] {1, 10, 20, 50 }) // Dropdown options
    .Position(GridPagerPosition.Top)

    )
    .Sortable()
    .ClientDetailTemplateId("template")
    .Resizable(r => r.Columns(true))
    .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
    .ColumnMenu(menu => menu.Enabled(true))
    .Scrollable(s => s.Height("auto"))
    .Reorderable(reorder => reorder.Columns(true))
    .DataSource(dataSource => dataSource
    .Ajax()
    .PageSize(1)
    .Model(model =>
    {

    model.Id(c => c.VehicleListId); //.Validation(vehGridName=>vehGridName.Required(true))
    
    model.Field(c => c.VehicleListId).Editable(false);
    
    model.Field(c => c.ModifiedLastDate).Editable(false);
    model.Field(c => c.ModifiedLastBy).Editable(false);

    })
    .Events(events =>
    {
    events.RequestEnd("onVehRequestEnd");
    events.Error("onDataSourceError");

    })
    .Read(read => read.Url(Url.Action("GetVehiclesView", "Vehicles") + "?id=" + ViewBag.PartNum + "&gridType=VehicleGrid").Type(HttpVerbs.Get))
    .Create(create => create.Url(Url.Action("AddVehiclesView", "Vehicles") + "?id=" + ViewBag.PartNum + "&gridType=VehicleGrid").Type(HttpVerbs.Post))
    .Update(update => update.Url(Url.Action("UpdateVehiclesView", "Vehicles") + "?id=" + ViewBag.PartNum + "&gridType=VehicleGrid").Type(HttpVerbs.Post))
    .Destroy(delete => delete.Url(Url.Action("DeleteVehiclesView", "Vehicles") + "?id=" + ViewBag.PartNum + "&gridType=VehicleGrid").Type(HttpVerbs.Post))
    )
    )

    }
    catch (Exception ex)
    {
    <div class="alert alert-danger">Error loading Vehicle Estimate: @ex.Message</div>
    }
</text>);

        tabstrip.Add().Text("Archived Vehicles")
            .Content(@<text>
    @try
    {
    @Html.Partial("_ArchivedVehicleIndex")
    }
    catch (Exception ex)
    {
    <div class="alert alert-danger">Error loading archived vehicles: @ex.Message</div>
    }
</text>);
    })
)

<style>
    .k-grid td {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .k-grid-header .k-header {
        white-space: normal;
        vertical-align: top;
    }

    .k-grid .k-hierarchy-col {
        width: 10px; /* Fix detail template arrow column width */
    }
</style>
<!-- Custom Delete Confirmation Dialog -->
<div id="deleteConfirmationDialog" style="display: none;">
    <div class="confirmation-message">
        <span class="k-icon k-i-warning confirmation-icon"></span>
        <span>Are you sure you want to delete this item?</span>
    </div>
    <div class="confirmation-buttons">
        @* <button type="button" class="k-button cancel-btn">Cancel</button> *@
        <button type="button" class="k-button confirm-btn">Delete</button>
    </div>
</div>

<div id="notification"></div>
<!--Copy estimate san17-->
<div id="copyEstimateDialog" style="display:none;">
    <div class="k-form">
        <div class="k-form-field">
            <label>Estimate #</label>
            <input id="vehicleListId" name="vehicleListId" class="k-textbox" readonly />
        </div>
        <div class="k-form-field">
            <label>Vehicle Series</label>
            <input id="oldVehSeriesCode" name="oldVehSeriesCode" class="k-textbox" readonly />
        </div>
        <div class="k-form-field">
            <label>Description</label>
            <input id="oldprojDesc" name="oldprojDesc" class="k-textbox" readonly />
        </div>
        <div class="k-form-field">
            <label>New Vehicle Series<span style="color:red">*</span></label>
            <input id="newVehSeriesCode" name="newVehSeriesCode" class="k-textbox" required />
        </div>
        <div class="k-form-field">
            <label>New Description<span style="color:red">*</span></label>
            <input id="newprojDesc" name="newprojDesc" class="k-textbox" required />
        </div>
        <div class="k-form-buttons">
            <button type="button" class="k-button k-primary" id="copyEstimateBtn">Copy</button>
            <button type="button" class="k-button" id="cancelCopyBtn">Cancel</button>
        </div>
    </div>
</div>
<!-- Placeholder for dynamically loaded email estimate popup and notification -->
<div id="email-estimate-container" style="display: none;">
    @Html.Partial("_EmailEstimatePopup")
    <div id="estimates-container"></div>

</div>

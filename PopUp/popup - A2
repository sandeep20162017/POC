
üìÑ 1. Views/Vehicles/Index.cshtml
This is your main view.

cshtml
Copy
Edit
@using BCES.Models.Vehicle
@model IEnumerable<BCES.Models.Vehicle.VehicleViewModel>

@{
    ViewData["Title"] = "Vehicle Estimate";
}

<h6>Vehicle Estimate</h6>

@(Html.Kendo().TabStrip()
    .Name("vehicleTabStrip")
    .Animation(animation => animation.Open(effect => effect.Fade(FadeDirection.In)))
    .Items(tabstrip =>
    {
        tabstrip.Add().Text("Vehicles")
            .Selected(true)
            .Content(@<text>
                @Html.Partial("_VehicleGrid", Model)
            </text>);

        tabstrip.Add().Text("Archived Vehicles")
            .Content(@<text>
                @Html.Partial("_ArchivedVehicleIndex")
            </text>);
    })
)

<!-- Other dialogs (delete, copy, email) -->
<div id="deleteConfirmationDialog" style="display:none;">‚Ä¶</div>
<div id="notification"></div>
<div id="copyEstimateDialog" style="display:none;">‚Ä¶</div>
<div id="email-estimate-container" style="display:none;">
    @Html.Partial("_EmailEstimatePopup")
</div>

<!-- Popup Template -->
@Html.Partial("~/Views/Shared/_VehiclePopUps.cshtml")
üìÑ 2. Views/Vehicles/_VehicleGrid.cshtml
This defines the Kendo Grid. All column logic is here.

cshtml
Copy
Edit
@using BCES.Models.Vehicle
@model IEnumerable<VehicleViewModel>

@{
    var gridName = "VehicleGrid";
}

@(Html.Kendo().Grid<VehicleViewModel>()
    .Name(gridName)
    .Columns(columns =>
    {
        columns.Bound(c => c.VehicleListId).Title("Estimate #")
            .ClientTemplate("#= VehicleListId && VehicleListId !== 0 ? VehicleListId : '(System Generated)' #")
            .Filterable(ftb => ftb.Cell(cell => cell.Operator("eq").ShowOperators(true)))
            .IncludeInMenu(false).Width(190).Lockable(true);

        columns.Bound(c => c.VehSeriesCode).Title("Vehicle Series Code")
            .EditorTemplateName("ComboBoxEditor")
            .HeaderHtmlAttributes(new { @class = "required-header" })
            .HtmlAttributes(new { @class = "required-cell", required = "required" })
            .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains")))
            .Width(160);

        columns.Bound(c => c.NumOfVehicles).Title("Number Of Vehicles")
            .HeaderHtmlAttributes(new { @class = "required-header" })
            .HtmlAttributes(new { @class = "required-cell", required = "required" })
            .Filterable(ftb => ftb.Cell(cell => cell.Operator("eq")))
            .Width(160);

        columns.Bound(c => c.ProjDesc).Title("Project Description")
            .EditorTemplateName("VehDescriptionComboBox")
            .HeaderHtmlAttributes(new { @class = "required-header" })
            .HtmlAttributes(new { @class = "required-cell", required = "required" })
            .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains")))
            .Width(250);

        columns.Bound(c => c.Make).Title("Make")
            .EditorTemplateName("ComboBoxEditor")
            .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains")))
            .Width(160);

        columns.Bound(c => c.VehModel).Title("Model")
            .EditorTemplateName("ComboBoxEditor")
            .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains")))
            .Width(160);

        columns.Bound(c => c.Year).Title("Year")
            .EditorTemplateName("ComboBoxEditor")
            .Filterable(ftb => ftb.Cell(cell => cell.Operator("gte")))
            .Width(150);

        columns.Bound(c => c.Engine).Title("Engine")
            .EditorTemplateName("ComboBoxEditor")
            .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains")))
            .Width(150);

        columns.Bound(c => c.Transmission).Title("Transmission")
            .EditorTemplateName("ComboBoxEditor")
            .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains")))
            .Width(150);

        columns.Bound(c => c.Sopnumber).Title("Sop Number")
            .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains")))
            .Width(150);

        columns.Bound(c => c.ModifiedLastBy).Title("Modified By")
            .ClientTemplate("#= ModifiedLastBy && ModifiedLastBy !== 0 ? ModifiedLastBy : '(System Generated)' #")
            .Width(150);

        columns.Bound(c => c.ModifiedLastDate).Title("Modified Date")
            .ClientTemplate("#= ModifiedLastDate ? formatToEST(ModifiedLastDate) : '(System Generated)' #")
            .Width(150);

        columns.Command(command =>
        {
            command.Custom("Archive").Click("onArchiveClick");
            command.Custom("Copy").Click("onCopyEstimateClick");
            command.Custom("Delete")
                .Click("showDeleteConfirmation")
                .HtmlAttributes(new {
                    @class = "text-danger",
                    data_grid = gridName,
                    data_url = Url.Action("DeleteVehicle", "Vehicles"),
                    data_id_field = "VehicleListId",
                    data_grid_type = gridName
                });
        }).Title("Actions").Width(300);
    })
    .ToolBar(toolbar =>
    {
        toolbar.Create().Text("Add new record").IconClass("k-icon k-i-plus");
        toolbar.Save().SaveText("Save").CancelText("Cancel");
    })
    .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("CustomVehiclePopUpTemplate"))
    .Events(events => events
        .Save("onVehGridSave")
        .DataBound("onVehGridDataBound")
        .DetailExpand("onDetailExpand")
        .DetailCollapse("onDetailCollapse")
    )
    .Pageable(p => p.PageSizes(new[] { 1, 10, 20 }))
    .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
    .Sortable()
    .Scrollable()
    .Reorderable(r => r.Columns(true))
    .Resizable(r => r.Columns(true))
    .ColumnMenu(menu => menu.Enabled(true))
    .ClientDetailTemplateId("template")
    .DataSource(ds => ds
        .Ajax()
        .PageSize(1)
        .Model(model =>
        {
            model.Id(m => m.VehicleListId);
            model.Field(m => m.VehicleListId).Editable(false);
            model.Field(m => m.ModifiedLastBy).Editable(false);
            model.Field(m => m.ModifiedLastDate).Editable(false);
        })
        .Read(r => r.Url(Url.Action("GetVehiclesView", "Vehicles")).Type(HttpVerbs.Get))
        .Create(c => c.Url(Url.Action("AddVehiclesView", "Vehicles")).Type(HttpVerbs.Post))
        .Update(u => u.Url(Url.Action("UpdateVehiclesView", "Vehicles")).Type(HttpVerbs.Post))
        .Destroy(d => d.Url(Url.Action("DeleteVehiclesView", "Vehicles")).Type(HttpVerbs.Post))
    )
)
üìÑ 3. Views/Shared/_VehiclePopUps.cshtml
This defines your popup editor template using the same combo boxes as InCell.

cshtml
Copy
Edit
@model BCES.Models.Vehicle.VehicleViewModel

<script id="CustomVehiclePopUpTemplate" type="text/x-kendo-template">
    <div class="k-edit-form-container">
        <form data-role="validator">
            <fieldset>
                <legend>#: VehicleListId ? "Edit Vehicle" : "New Vehicle" #</legend>

                <div class="k-edit-label"><label>Vehicle Series Code</label></div>
                <div class="k-edit-field">
                    @(Html.EditorFor(m => m.VehSeriesCode, "ComboBoxEditor"))
                </div>

                <div class="k-edit-label"><label>Number Of Vehicles</label></div>
                <div class="k-edit-field">
                    @Html.TextBoxFor(m => m.NumOfVehicles, new { @class = "k-textbox", type = "number", required = "required" })
                </div>

                <div class="k-edit-label"><label>Project Description</label></div>
                <div class="k-edit-field">
                    @(Html.EditorFor(m => m.ProjDesc, "VehDescriptionComboBox"))
                </div>

                <div class="k-edit-label"><label>Make</label></div>
                <div class="k-edit-field">
                    @(Html.EditorFor(m => m.Make, "ComboBoxEditor"))
                </div>

                <div class="k-edit-label"><label>Model</label></div>
                <div class="k-edit-field">
                    @(Html.EditorFor(m => m.VehModel, "ComboBoxEditor"))
                </div>

                <div class="k-edit-label"><label>Year</label></div>
                <div class="k-edit-field">
                    @(Html.EditorFor(m => m.Year, "ComboBoxEditor"))
                </div>

                <div class="k-edit-label"><label>Engine</label></div>
                <div class="k-edit-field">
                    @(Html.EditorFor(m => m.Engine, "ComboBoxEditor"))
                </div>

                <div class="k-edit-label"><label>Transmission</label></div>
                <div class="k-edit-field">
                    @(Html.EditorFor(m => m.Transmission, "ComboBoxEditor"))
                </div>

                <div class="k-edit-label"><label>Sop Number</label></div>
                <div class="k-edit-field">
                    @Html.TextBoxFor(m => m.Sopnumber, new { @class = "k-textbox" })
                </div>

                <div class="k-edit-buttons k-state-default">
                    <button type="submit" class="k-button k-primary">Save</button>
                    <button type="button" class="k-button k-grid-cancel-command">Cancel</button>
                </div>
            </fieldset>
        </form>
    </div>
</script>
üìÅ Final Directory Structure
markdown
Copy
Edit
/Views
  ‚îî‚îÄ‚îÄ Vehicles
      ‚îú‚îÄ‚îÄ Index.cshtml
      ‚îú‚îÄ‚îÄ _VehicleGrid.cshtml
      ‚îî‚îÄ‚îÄ _ArchivedVehicleIndex.cshtml
/Views/Shared
  ‚îú‚îÄ‚îÄ _VehiclePopUps.cshtml
  ‚îú‚îÄ‚îÄ ComboBoxEditor.cshtml
  ‚îî‚îÄ‚îÄ VehDescriptionComboBox.cshtml
‚úÖ You're Ready!
No duplication

Popup uses the same editors

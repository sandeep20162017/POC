üß© Complete JavaScript Implementation
javascript
Copy
Edit
function onVehGridDataBound(e) {
    const grid = e.sender;

    // Prevent multiple bindings
    if (!grid._unsavedHandlerAttached) {
        grid.dataSource.bind("change", function () {
            grid.dataSource.view().forEach(item => {
                const row = grid.tbody.find(`tr[data-uid='${item.uid}']`);
                const nextRow = row.next();

                // Check if the next row is already an UNSAVED label
                const isUnsavedRow = nextRow.hasClass("unsaved-label-row");

                if ((item.dirty || item.isNew()) && !isUnsavedRow) {
                    // Insert a new row after the current row to display the UNSAVED label
                    const colspan = row.find("td").length;
                    const unsavedRow = `<tr class="unsaved-label-row"><td colspan="${colspan}" class="unsaved-label-cell"><span class="unsaved-badge">UNSAVED</span></td></tr>`;
                    row.after(unsavedRow);
                } else if (!item.dirty && !item.isNew() && isUnsavedRow) {
                    // Remove the UNSAVED label row if changes are saved or canceled
                    nextRow.remove();
                }
            });
        });

        grid._unsavedHandlerAttached = true; // Flag to prevent re-binding
    }
}
üñåÔ∏è CSS Styling
Add the following CSS to style the "UNSAVED" label appropriately:

css
Copy
Edit
.unsaved-label-row {
    background-color: #fff3cd;
}

.unsaved-label-cell {
    text-align: center;
    font-weight: bold;
    color: #856404;
}

.unsaved-badge {
    display: inline-block;
    padding: 4px 8px;
    background-color: #ffeeba;
    border: 1px solid #ffeeba;
    border-radius: 4px;
}
üìã Grid Configuration
Ensure your Kendo UI Grid is configured to use the onVehGridDataBound function:

csharp
Copy
Edit
@(Html.Kendo().Grid<YourModel>()
    .Name("VehicleGrid")
    .Editable(editable => editable.Mode(GridEditMode.InCell))
    .Events(events => events
        .DataBound("onVehGridDataBound")
    )
    // ... other configurations ...
)
üîÑ Handling Save and Cancel Operations
To remove the "UNSAVED" label when changes are saved or canceled, you can utilize the requestEnd and cancel events:

javascript
Copy
Edit
function onVehGridRequestEnd(e) {
    if (e.type === "update" || e.type === "create") {
        const grid = e.sender;
        grid.dataSource.view().forEach(item => {
            const row = grid.tbody.find(`tr[data-uid='${item.uid}']`);
            const nextRow = row.next();
            if (nextRow.hasClass("unsaved-label-row")) {
                nextRow.remove();
            }
        });
    }
}

function onVehGridCancel(e) {
    const grid = e.sender;
    const row = grid.tbody.find(`tr[data-uid='${e.model.uid}']`);
    const nextRow = row.next();
    if (nextRow.hasClass("unsaved-label-row")) {
        nextRow.remove();
    }
}
Update your grid configuration to include these event handlers:

csharp
Copy
Edit
.Events(events => events
    .DataBound("onVehGridDataBound")
    .RequestEnd("onVehGridRequestEnd")
    .Cancel("onVehGridCancel")
)

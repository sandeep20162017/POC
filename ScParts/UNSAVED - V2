✅ Desired Enhancements
Row Highlighting:

New Rows: Highlight with a distinct color (e.g., light green).

Edited Rows: Highlight with another color (e.g., light yellow).

Hover Effect: Slightly darken the row on hover for better visibility.

"UNSAVED" Label:

Display a floating "UNSAVED" badge aligned with the row's first cell.

Ensure the badge remains visible and correctly positioned during horizontal scrolling.

🖌️ CSS Styling
Add the following CSS to your stylesheet to style the highlighted rows and the "UNSAVED" badge:

css
Copy
Edit
/* Row Highlighting */
.k-grid tr.unsaved-new {
    background-color: #d4edda; /* Light green */
}

.k-grid tr.unsaved-edited {
    background-color: #fff3cd; /* Light yellow */
}

.k-grid tr.unsaved-new:hover,
.k-grid tr.unsaved-edited:hover {
    filter: brightness(0.95);
}

/* UNSAVED Badge */
.unsaved-badge {
    position: absolute;
    background-color: #ffc107;
    color: #212529;
    padding: 4px 8px;
    border-radius: 4px;
    font-weight: bold;
    z-index: 1000;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);
    white-space: nowrap;
}
🧩 JavaScript Implementation
Implement the following JavaScript functions to handle row highlighting and badge positioning:

javascript
Copy
Edit
function onVehGridDataBound(e) {
    const grid = e.sender;
    const dataItems = grid.dataSource.view();

    // Remove existing highlights and badges
    grid.tbody.find('tr').removeClass('unsaved-new unsaved-edited');
    $('.unsaved-badge').remove();

    dataItems.forEach(item => {
        const row = grid.tbody.find(`tr[data-uid='${item.uid}']`);

        if (item.isNew()) {
            row.addClass('unsaved-new');
            addUnsavedBadge(grid, row);
        } else if (item.dirty) {
            row.addClass('unsaved-edited');
            addUnsavedBadge(grid, row);
        }
    });

    // Reposition badges on horizontal scroll
    grid.wrapper.find('.k-grid-content').off('scroll.unsavedBadge').on('scroll.unsavedBadge', function () {
        repositionUnsavedBadges(grid);
    });
}

function addUnsavedBadge(grid, row) {
    const firstCell = row.find('td:first');
    const badge = $('<div class="unsaved-badge">UNSAVED</div>');
    grid.wrapper.append(badge);
    positionBadge(badge, firstCell, grid);
}

function positionBadge(badge, cell, grid) {
    const gridOffset = grid.wrapper.offset();
    const cellOffset = cell.offset();
    const scrollLeft = grid.wrapper.find('.k-grid-content').scrollLeft();

    badge.css({
        top: cellOffset.top - gridOffset.top + cell.outerHeight() + 5,
        left: cellOffset.left - gridOffset.left - scrollLeft + 5
    });
}

function repositionUnsavedBadges(grid) {
    grid.tbody.find('tr').each(function () {
        const row = $(this);
        if (row.hasClass('unsaved-new') || row.hasClass('unsaved-edited')) {
            const firstCell = row.find('td:first');
            const badge = $('.unsaved-badge').filter(function () {
                return $(this).data('uid') === row.data('uid');
            });
            positionBadge(badge, firstCell, grid);
        }
    });
}
📋 Grid Configuration
Ensure your Kendo UI Grid is configured to use the onVehGridDataBound function:

csharp
Copy
Edit
@(Html.Kendo().Grid<YourModel>()
    .Name("VehicleGrid")
    .Editable(editable => editable.Mode(GridEditMode.InCell))
    .Events(events => events
        .DataBound("onVehGridDataBound")
    )
    // ... other configurations ...
)

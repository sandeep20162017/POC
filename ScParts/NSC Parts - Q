Another question,
The whole grid columns have background color of golden or Dark Yellow. Based on the css which css rue is applied? I need nromal white color for the grid when it is read.
Index.cstml :

@model IEnumerable<BCES.Models.Parts.NscPartsUsedViewModel>

@{
    ViewData["Title"] = "Non Stock Coded Parts";
}
<style>
    /* logic for required col changes - CSS for required columns */
    .required-header::after {
        content: " *";
        color: #e32;
        font-weight: bold;
    }

    .required-cell {
        background-color: rgba(255, 0, 0, 0.05);
    }

    .k-edit-cell.required-cell input {
        border-left: 3px solid #e32;
        padding-left: 5px;
    }
</style>
 <h6>Non Stock Coded Parts</h6>

@(
Html.Kendo().Grid<BCES.Models.Parts.NscPartsUsedViewModel>()
                                .Name("NscPartsUsedGrid")
                                 .Events(events => events
                                    .DataBound("onNscGridDataBound")
                                    .SaveChanges("onNscGridSave")
                                    .Edit("onNscGridEdit")
                                )
                                .Columns(columns =>
                                {
                                    columns.Bound(p => p.NscPartsUsedId).Title("Part Id").Hidden(true); 
                                    columns.Bound(p => p.OrigSuppNum).Title("Supplier Number").Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).EditorTemplateName("ComboBoxEditor");
                                    columns.Bound(p => p.OrigSupplierName).Title("Supplier Name").Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).EditorTemplateName("ComboBoxEditor");
                                    columns.Bound(p => p.KeyWord).Title("Keyword").Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).EditorTemplateName("ComboBoxEditor");
                                    columns.Bound(p => p.Description).Title("Description").Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).EditorTemplateName("ComboBoxEditor");
                                    columns.Bound(p => p.OemPartCost).Title("OEM Part Cost").Filterable(ftb => ftb.Cell(cell => cell.Operator("gte"))).Format("{0:C2}").EditorTemplateName("Currency");
                                    columns.Command(command =>
                                    {
                                      //  command.Edit().Text(" ").IconClass("k-icon k-i-edit").HtmlAttributes(new { title = "Edit" });
                                        command.Custom("Delete")
                                            .Click("showDeleteConfirmation")
                                            .Text(" ")
                                            .IconClass("k-icon k-i-delete")
                                            .HtmlAttributes(new { @class = "text-danger", title = "Delete" });
                                    }).Title("Actions");
                                })
                        .ToolBar(toolbar =>
                        {
                            if (@ViewBag.RoleId == 1)
                            {
                                toolbar.Create();
                                toolbar.Save();
                            }
                        })
                    .Editable(editable => editable.Mode(GridEditMode.InCell).TemplateName("NscPartsAddUpdate"))
                
                    .Pageable(p => p
                            .PageSizes(new int[] { 1, 2, 5, 10, 20, 50 }) // Dropdown options

                            )
                    .Sortable()
                    .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
                    .DataSource(dataSource => dataSource
                    .Ajax()
                    .Events(events => events
                    .Error("onDataSourceError")
                    .RequestEnd("onRequestEnd")
                     )
                    .Model(model =>
                    {
                        model.Id(u => u.NscPartsUsedId);
                        model.Field(c => c.NscPartsUsedId).Editable(false);
                         @* model.Field(c => c.OrigSupplierName);
                          model.Field(c => c.OrigSuppNum); *@
                                                                       
                    })
                   
                    .Read(read => read.Url(Url.Action("GetNscPartsUsedView", "NscPartsUsed")).Type(HttpVerbs.Get))
                    .Create(create => create.Url(Url.Action("CreateNscPartsUsed", "NscPartsUsed")).Type(HttpVerbs.Post))
                    .Update(update => update.Url(Url.Action("UpdateNscPartsUsed", "NscPartsUsed")).Type(HttpVerbs.Post))
                    .Destroy(delete => delete.Url(Url.Action("DeleteNscPartsUsed", "NscPartsUsed")).Type(HttpVerbs.Post))
                        
                   )
                
            )
  <!-- Custom Delete Confirmation Dialog -->
    <div id="deleteConfirmationDialog" style="display: none;">
        <div class="confirmation-message">
            <span class="k-icon k-i-warning confirmation-icon"></span>
            <!-- Edit this span text  -->
            <span>Are you sure you want to delete this item?</span>
        </div>
        <div class="confirmation-buttons">
            <button type="button" class="k-button cancel-btn">Cancel</button>
            <button type="button" class="k-button confirm-btn">Delete</button>
        </div>
    </div>
<div id="notification"></div>
  @section Scripts {
     
    <script>
        function getAutoCompleteParams() {
            var input = $("input[data-role='autocomplete']:focus");
            return {
                columnName: input.attr("name"),
                searchText: input.val() || "" // Handle empty search text
            };
        }
   
    </script>
    <script>
       function getComboBoxParams() {
        var input = $(".k-combobox input.k-input:focus");
        return {
                 columnName: input.attr("name")?.replace("_input", "").split('.').pop(),
            searchText: input.val() || ""
        };
    }
     </script>
   
 
        @* notification - add following JS, add div, add in grid .Error("onDataSourceError"),  .RequestEnd("onRequestEnd"), change contoller action to return json *@
     <script>
            // Initialize notification FIRST
            var notification = $("#notification").kendoNotification({
                position: {
                pinned: true,
            top: 50,
            right: 30
                    },
            autoHideAfter: 4000,
            stacking: "down"
                }).data("kendoNotification");

            // Error handler
            function onDataSourceError(e) {
            let errorMessage = e.xhr.responseText = " - Missing required fields. ";

            if (e.errorThrown) {
                errorMessage += e.errorThrown;
                    } else if (e.xhr && e.xhr.responseText) {
                errorMessage += e.xhr.responseText;
                    }

            notification.error(errorMessage);
                }

            // Success handler
            function onRequestEnd(e) {
                    if (e.type === "create") {
                notification.success("Record created successfully");
                    } else if (e.type === "update") {
                notification.success("Record updated successfully");
                    } else if (e.type === "destroy") {
                notification.success("Record deleted successfully");
                    }
                }
    </script>

    @* Start : Add following for validation *@
    <script>
        // Validation for AutoComplete
        function validateAutoCompleteSelection(e) {
            const column = e.sender.element.attr("data-column");
            const value = e.sender.value();
            let regex, error;

            if (column === "OrigSuppNum") {
                regex = /^[a-zA-Z0-9-()\s]*$/;
                error = "Invalid Supplier Number, check for special characters";
            }
            else if (column === "OrigSupplierName") {
                regex = /^[a-zA-Z0-9-&()\s]*$/;
                error = "Invalid Supplier Name, check for special characters";
            }

            if (regex && !regex.test(value)) {
                notification.error(error);
                e.sender.value("");
            }
        }

        // Inline Edit Validation
        function onEdit(e) {
            const validationRules = {
                "OrigSuppNum": {
                    regex: /^[a-zA-Z0-9()\s]*$/,
                    error: "Invalid Supplier Name, check for special characters"
                },
                "OrigSupplierName": {
                    regex: /^[a-zA-Z0-9&-()\s]*$/,
                    error: "Invalid Supplier Name, check for special characters"
                }
            };

            Object.entries(validationRules).forEach(([field, rule]) => {
                const input = e.container.find(`input[name='${field}']`);
                input.on("input", function() {
                    if (!rule.regex.test(this.value)) {
                        notification.error(rule.error);
                        $(this).addClass("k-invalid");
                    } else {
                        $(this).removeClass("k-invalid");
                    }
                });
            });
        }

        // Keep existing notification and error handlers
    </script>
    @* End : Add  validation *@
    
     <script>
          
            // Initialize custom confirmation dialog
            var deleteDialog = $("#deleteConfirmationDialog").kendoWindow({
                width: "400px",
                title: "Confirm Delete",
                modal: true,
                visible: false,
                actions: ["Close"]
            }).data("kendoWindow");

            function showDeleteConfirmation(e) {
                e.preventDefault();
                var grid = $("#NscPartsUsedGrid").data("kendoGrid");
                var dataItem = grid.dataItem($(e.currentTarget).closest("tr"));

                // Store reference to the dataItem
                deleteDialog.dataItem = dataItem;

                deleteDialog.center().open();
            }

            // Handle dialog buttons
            $(document).on("click", "#deleteConfirmationDialog .confirm-btn", function() {
                var grid = $("#NscPartsUsedGrid").data("kendoGrid");
                var dataItem = deleteDialog.dataItem;

                $.ajax({
                    url: '@Url.Action("DeleteNscPartsUsed", "NscPartsUsed")',
                    type: 'POST',
                    data: { NscPartsUsedId: dataItem.NscPartsUsedId },
                    success: function() {
                        grid.dataSource.remove(dataItem);
                        notification.success("Record deleted successfully");
                        deleteDialog.close();
                    },
                    error: function(xhr) {
                        notification.error("Delete failed: " + xhr.responseText);
                        deleteDialog.close();
                    }
                });
            });

            $(document).on("click", "#deleteConfirmationDialog .cancel-btn", function() {
                deleteDialog.close();
            });

    </script>
  
    <script>
        function getCommonDropDownParams() {
            var dropdown = $(".k-dropdown[data-column]").filter(function() {
                return $(this).find(".k-input").is(":focus");
            });
            return {
                columnName: dropdown.attr("data-column"),
                searchText: dropdown.find(".k-input").val() || ""
            };
        }

    </script>
<script>
    function getDropDownListParams() {
        // 1. Get grid reference
        var grid = $("#NscPartsUsedGrid").data("kendoGrid");
        if (!grid) {
            console.warn("Grid not found");
            return {};
        }

        // 2. Find currently edited cell
        var editCell = grid.element.find(".k-edit-cell");
        if (editCell.length === 0) {
            console.warn("No active edit cell");
            return {};
        }

        // 3. Find dropdown input in edit cell
        var dropdownInput = editCell.find("input[data-role='dropdownlist']");
        if (!dropdownInput.length) {
            console.warn("Dropdown input not found");
            return {};
        }

        // 4. Get column name from data attribute
        var columnName = dropdownInput.attr("data-column") || "";
        
        // 5. Get dropdown instance and current filter value
        var dropdown = dropdownInput.data("kendoDropDownList");
        if (!dropdown) {
            console.warn("Dropdown instance not found");
            return {};
        }

        // 6. Get the ACTUAL FILTER TEXT from the DataSource
        var searchText = "";
        var currentFilter = dropdown.dataSource.filter();
        if (currentFilter && currentFilter.filters && currentFilter.filters.length > 0) {
            searchText = currentFilter.filters[0].value; // Get the filter value
        }

        console.log("Params:", { 
            columnName: columnName, 
            searchText: searchText 
        });

        return {
            columnName: columnName,
            searchText: searchText
        };
    }

    $(document).ready(function () {
        var grid = $("#NscPartsUsedGrid").data("kendoGrid");
        if (grid) {
            // Optional: Verify edit mode
            grid.bind("edit", function (e) {
                console.log("Editing field:", e.field);
            });
        }
    });
</script>
<script>
        function onDropDownChange(e) {
            console.log("********* onDropDownChange");
            
        }
                function onDropDownOpen(e) {
                currentDropDown = e.sender; // Capture the currently opened dropdown instance
            }
</script>
<script>
        // Track unsaved changes state
        let unsavedChangesExist = false;

        function onNscGridDataBound(e) {
            const grid = e.sender;
            const ds = grid.dataSource;
    
            // Clear previous styling efficiently
            grid.tbody.find(".unsaved-row, .unsaved-cell").removeClass("unsaved-row unsaved-cell");
            grid.tbody.find(".unsaved-badge").remove();

            // Track changes without full refresh
            unsavedChangesExist = ds.hasChanges();

            // Get current view once
            const currentView = ds.view();
    
            // Batch DOM updates
            const fragment = document.createDocumentFragment();
    
            currentView.forEach(item => {
                const row = grid.tbody.find(`tr[data-uid='${item.uid}']`);
                const rowNode = row[0];
        
                if (item.isNew()) {
                    // New row highlighting
                    row.addClass("unsaved-row");
                    const firstCell = row.find("td:first")[0];
                    const badge = createBadge("NEW");
                    fragment.appendChild(badge);
                    firstCell.appendChild(badge);
                }
                else if (item.dirty) {
                    // Modified cells highlighting
                    Object.keys(item.modified || {}).forEach(field => {
                        const cell = row.find(`td[data-field='${field}']`)[0];
                        if (cell) {
                            cell.classList.add("unsaved-cell");
                            const badge = createBadge("CHANGED");
                            fragment.appendChild(badge);
                            cell.appendChild(badge);
                        }
                    });
                }
            });

            // Apply all badges at once
            grid.tbody[0].appendChild(fragment);
    
            // Lightweight visual refresh
            grid.thead.hide().show();
        }

        // Helper function to create badges
        function createBadge(text) {
            const badge = document.createElement("span");
            badge.className = "unsaved-badge";
            badge.textContent = text;
            return badge;
        }
            function onNscGridSave(e) {
                const notification = $("#notification").data("kendoNotification");
    
                // Show save confirmation
                notification.success("Changes saved successfully");
    
                // Force full refresh to clear styling
                e.sender.dataSource.read().then(() => {
                    unsavedChangesExist = false;
                });
            }
            function onNscGridEdit(e) {
                // Re-apply styles after edit
                const grid = e.sender;
                grid.one("dataBound", () => grid.refresh());
            }
    </script>
    <script>
        function makeComboBoxReadOnly(e) {
            console.warn('makeComboBoxReadOnly');
            e.sender.input.attr("readonly", true);
        }
    </script>
    <script>
           function onComboBoxDataBound(e) {
               // Check if no data is available after filtering
               var notification = $("#notification").data("kendoNotification");

               if (e.sender.dataSource.total() === 0) {
                   e.sender.value(null); // Clear the input
                   e.sender.input.val(""); // Clear the text
                   setTimeout(function () {
                       notification.show("Invalid Selection! Please choose from the list.", "error");
                       //alert("Invalid Selection! Please choose from the list.");
                   }, 100);
               }
           }

           function onComboBoxChange(e) {
               var combo = e.sender;
               if (combo.selectedIndex === -1) {
                   combo.value(null);
                   combo.input.val("");
                   combo.trigger("change");
                   // Optional: Show error message
                   $("#validationMessage").text("Invalid selection!").css("color", "red");
               } else {
                   $("#validationMessage").text("");
               }
           }
    </script>

       
 }

css :
.k-invalid {
    border-color: #ff0000 !important;
    background-color: #ffeeee !important;
    transition: all 0.3s ease;
}
.k-dialog {
    border-radius: 8px !important;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15) !important;
}

.k-dialog-titlebar {
    background-color: #dc3545 !important; 
    color: white !important;
    font-weight: bold;
    padding: 12px !important;
}

.k-dialog-content {
    font-size: 16px !important;
    padding: 20px !important;
}

.k-dialog-buttongroup {
    padding: 10px 20px !important;
    gap: 10px !important;
}

    .k-dialog-buttongroup .k-button {
        border-radius: 5px !important;
        padding: 8px 20px !important;
    }

/* Style "Yes" button */
.k-dialog-buttongroup .k-button:first-child {
    background-color: #28a745 !important;
    border-color: #28a745 !important;
}

/* Style "No" button */
.k-dialog-buttongroup .k-button:last-child {
    background-color: #6c757d !important;
    border-color: #6c757d !important;
}
.k-edit-cell .non-editable {
    background-color: #f5f5f5;
    pointer-events: none;
}
/* pop up confirmation*/
#deleteConfirmationDialog {
    padding: 20px;
    background: #fff;
    border-radius: 5px;
}

.confirmation-message {
    font-size: 16px;
    color: #333;
    margin-bottom: 20px;
    display: flex;
    align-items: center;
    gap: 15px;
}

.confirmation-icon {
    color: #dc3545;
    font-size: 24px;
}

.confirmation-buttons {
    display: flex;
    justify-content: flex-end;
    gap: 10px;
}

.k-button.confirm-btn {
    background-color: #d9534f;
    border-color: #d43f3a;
    color: white;
    padding: 8px 20px;
}

    .k-button.confirm-btn:hover {
        background-color: #c9302c;
        border-color: #ac2925;
    }

.k-button.cancel-btn {
    background-color: #5bc0de;
    border-color: #46b8da;
    color: white;
    padding: 8px 20px;
}

    .k-button.cancel-btn:hover {
        background-color: #31b0d5;
        border-color: #269abc;
    }

/* Grid delete button styling */
.k-grid .k-invalid {
    border: 1px solid #ff0000 !important;
    background: #ffe0e0 !important;
}

.invalid-cell {
    background-color: #ffe0e0 !important;
    box-shadow: inset 0 0 0 2px #ff0000;
}


.k-grid .invalid-cell input {
    background-color: #ffe0e0;
}
..invalid-cell {
    background-color: #ffe0e0 !important;
    position: relative;
    box-shadow: inset 0 0 0 2px red;
}

.invalid-cell::after {
    content: "!";
    color: red;
    position: absolute;
    right: 5px;
    top: 50%;
    transform: translateY(-50%);
    font-weight: bold;
}
/* Highlight the row being edited */
.k-grid-edit-row {
    background-color: #f9f9f9;
}

/* Highlight invalid fields */
.k-invalid {
    border-color: red !important;
    background-color: #ffe6e6 !important;
}

.k-invalid-msg {
    color: red;
    font-size: 12px;
    display: block;
    margin-top: 2px;
}
.k-readonly .k-input {
    background-color: #f5f5f5;
    cursor: not-allowed;
}
/* Ensure the extra expand arrow is hidden */
.k-menu .k-menu-expand-arrow.k-icon.k-i-arrow-60-down {
    display: none !important;
    visibility: hidden !important;
    width: 0 !important;
    height: 0 !important;
    overflow: hidden !important;
}
/* Style for rows with unsaved changes */
.k-grid table > tbody > tr.unsaved-row,
.k-grid table > tbody > tr.unsaved-row.k-alt {
    background-color: gold !important; /* Red background with transparency */
    border-left: 3px solid #ff0000 !important; /* Solid red border */
}

    /* Modified cells */
    .k-grid table > tbody > tr.unsaved-row td.unsaved-cell {
        background-color: goldenrod !important; /* Lighter red for cells */
        box-shadow: inset 0 0 0 1px #ff000040 !important; /* Red inner glow */
    }

    /* Badge styling */
    .k-grid table > tbody > tr.unsaved-row .unsaved-badge {
        background: #ff0000 !important; /* Pure red badge */
        color: white !important;
        font-size: 0.7em;
        padding: 1px 4px;
        border-radius: 2px;
        position: absolute;
        right: 2px;
        top: 50%;
        transform: translateY(-50%);
        z-index: 1000;
    }
/* TabStrip Selected Tab Styling */
/* ============================== */
.k-tabstrip-items .k-item.k-state-active {
    background-color: lightcyan !important; /* Light background */
    border-color: #dc3545 #dee2e6 #fff #dee2e6 !important; /* Red top border */
}

    .k-tabstrip-items .k-item.k-state-active .k-link {
        color: black !important; /* Red text */
        font-weight: bold;
    }

/* Hover effects */
.k-tabstrip-items .k-item:not(.k-state-active):hover {
    background-color: lightskyblue !important; /* Very light red */
}

.k-tabstrip-items .k-item:not(.k-state-active) .k-link:hover {
    color: #a71d2a !important; /* Darker red on hover */
}

/* Focus state */
.k-tabstrip-items .k-item.k-state-focused {
    box-shadow: inset 0 0 0 2px #dc354540 !important; /* Subtle red glow */
}
/*parent row highlight*/
/* Target both row and cells with !important */
.k-grid tr.k-master-row.selected-row,
.k-grid tr.k-master-row.selected-row > td {
    background-color: gold !important;
    background-image: none !important; /* Disable gradients */
    color: #000 !important; /* Text color */
}

    /* Maintain highlight on hover */
    .k-grid tr.k-master-row.selected-row:hover,
    .k-grid tr.k-master-row.selected-row:hover > td {
        background-color: blanchedalmond !important;
    }

/* Force highlight precedence */
.k-grid .k-grid-content tr.k-master-row.selected-row {
    z-index: 2;
    position: relative;
}
/* New row in master grid*/
/* For new rows being added */
.k-grid tr.k-grid-edit-row,
.k-grid tr.k-grid-edit-row > td {
    background-color: palegoldenrod !important;
    background-image: none !important;
}

/* For persisted new rows (after saving) */
.k-grid tr.newly-added-row,
.k-grid tr.newly-added-row > td {
    background-color: lightgreen !important; /* Light green background */
    border-bottom: 2px solid #43a047 !important; /* Dark green border */
}

/* start new menu*/
/* --- Menu Styling Enhancements --- */

/* Base styling for menu items */
.k-menu .k-link {
    padding: 10px 14px;
    font-size: 11px;
    color: #212529;
    font-weight: 500;
    transition: background-color 0.3s ease, color 0.3s ease;
}

/* Selected (active) menu item */
.k-menu .k-item.k-state-active > .k-link {
    background-color: #007bff !important; /* Bootstrap primary */
    color: #fff !important;
    font-weight: bold;
    border-radius: 4px;
}

/* Hover effects for unselected menu items */
.k-menu .k-item:not(.k-state-active):hover > .k-link {
    background-color: #e2e6ea !important;
    color: #0056b3 !important;
    font-weight: bold;
    border-radius: 4px;
}

/* Optional submenu hover effects */
.k-menu .k-item.k-menu-item:hover > .k-link {
    background-color: #f8f9fa !important;
    color: #343a40 !important;
}

/* Keep font bold for selected sub-items too */
.k-menu .k-item.k-state-selected > .k-link,
.k-menu .k-item.k-state-highlight > .k-link {
    font-weight: bold !important;
    color: #fff !important;
    background-color: #007bff !important;
    border-radius: 4px;
}

/* Rounded corners for horizontal menu */
.rounded-menu .k-menu-group {
    border-radius: 6px;
    overflow: hidden;
}

/* Optional: submenu styling */
.k-menu .k-menu-group .k-item .k-link {
    background-color: #ffffff;
    color: #333333;
}

.k-menu .k-menu-group .k-item.k-state-active > .k-link {
    background-color: hotpink !important; /*#007bff*/
    color: white !important;
    font-weight: bold;
}
/* Normal disabled Save button */
.k-button-disabled {
    background-color: #cccccc !important; /* Medium-light gray background */
    color: #666666 !important; /* Darker gray text */
    border-color: #bbbbbb !important; /* Softer border */
    cursor: not-allowed !important; /* Show 'no' cursor */
    pointer-events: none; /* Block clicks */
    opacity: 1; /* Full solid (no transparency) */
}

    /* Disable hover and active (click) styles for disabled button */
    .k-button-disabled:hover,
    .k-button-disabled:focus,
    .k-button-disabled:active {
        background-color: #cccccc !important; /* Keep the same color on hover */
        color: #666666 !important; /* Keep the same text color */
        border-color: #bbbbbb !important; /* Keep border soft */
        cursor: not-allowed !important;
        box-shadow: none !important; /* Remove any focus ring or shadow */
        text-decoration: none !important; /* No underline, no hover tricks */
    }
/* Disabled Kendo ComboBox */
.field-disabled {
    background-color: #eeeeee !important; /* Light gray background */
    color: #555555 !important; /* Slightly faded text */
    border: 1px solid #cccccc !important; /* Soft border */
    pointer-events: none; /* Block mouse interactions */
    opacity: 0.7; /* Make it look dimmer */
}

    /* Also remove hover, focus, click styles */
    .field-disabled:hover,
    .field-disabled:focus,
    .field-disabled:active {
        background-color: #eeeeee !important;
        border-color: #cccccc !important;
        box-shadow: none !important;
    }
    /*Reb border for duplicate*/
.invalid-combobox {
    border: 2px solid #f44336 !important; /* Red border */
    background-color: #ffe6e6 !important; /* Light pink background */
}

.k-grid-save-changes.k-state-disabled {
    background: #cccccc !important;
    color: #666666 !important;
    cursor: not-allowed !important;
    pointer-events: none !important;
}
/*start -  Global changes*/
/* Row highlight for Editing (existing row) */
.k-grid .editing-row {
    border: 2px solid #388e3c !important; /* Nice dark green */
    background-color: #e8f5e9 !important; /* Light green background */
}

/* Row highlight for Adding (new row) */
.k-grid .adding-row {
    border: 2px solid #1976d2 !important; /* Dark blue */
    background-color: #e3f2fd !important; /* Light blue background */
}

/* Required field indicator */
.k-grid td.required-cell {
    background-color: #fff0f0 !important; /* Light pink background */
    position: relative;
}

    .k-grid td.required-cell::after {
        content: "*";
        color: lightpink;
        font-size: 16px;
        font-weight: bold;
        position: absolute;
        top: 4px;
        right: 8px;
    }

/* Save button when enabled */
.k-grid-save-changes {
    background-color: #2196f3 !important; /* Light blue */
    color: white !important;
    border: 1px solid #1976d2 !important;
}

    /* Save button when disabled */
    .k-grid-save-changes.k-state-disabled {
        background: #e0e0e0 !important; /* Light grey */
        color: #757575 !important;
        border: 1px solid #bdbdbd !important;
        cursor: not-allowed !important;
        pointer-events: none !important;
    }

/* Cancel button when enabled */
.k-grid-cancel-changes {
    background-color: #f44336 !important; /* Red for cancel */
    color: white !important;
    border: 1px solid #d32f2f !important;
}

    /* Cancel button when disabled */
    .k-grid-cancel-changes.k-state-disabled {
        background: #e0e0e0 !important;
        color: #757575 !important;
        border: 1px solid #bdbdbd !important;
        cursor: not-allowed !important;
        pointer-events: none !important;
    }

/* Soft transitions for button color changes */
.k-grid-save-changes, .k-grid-cancel-changes {
    transition: background 0.3s, color 0.3s;
}

    /* (Optional) Save button glow when enabled */
    .k-grid-save-changes:not(.k-state-disabled) {
        box-shadow: 0 0 8px #2196f3;
    }
/*End Global changes*/
/* Disabled state for grid toolbar buttons */
/* Grid Toolbar and Button States */
. /* Grid Visibility Fixes */
.k-grid,
.k-tabstrip-content .k-grid {
    visibility: visible !important;
    opacity: 1 !important;
    height: auto !important;
}

/* Tabstrip Content Fix */
.k-tabstrip-content {
    display: block !important;
    overflow: visible !important;
    height: auto !important;
    padding: 10px;
}

/* Grid Header Fix */
.k-grid-header {
    visibility: visible !important;
}

/* Add Button Fix */
.k-grid .k-grid-add {
    visibility: visible !important;
    display: inline-block !important;
    /* Ensure grid visibility */
    .k-tabstrip-content .k-grid {
    visibility: visible !important;
}

/* Add button spacing */
.k-grid-toolbar .k-grid-add {
    margin-right: 5px;
}
/* Disabled Save button styling */
.k-grid-toolbar .k-grid-save-changes:disabled,
.k-grid-toolbar .k-grid-save-changes.k-state-disabled {
    opacity: 0.6 !important;
    cursor: not-allowed !important;
    background-color: #f0f0f0 !important;
    border-color: #d0d0d0 !important;
    color: #a0a0a0 !important;
    background-image: none !important;
    box-shadow: none !important;
}

/* Disabled Add button styling */
.k-grid-toolbar .k-grid-add:disabled,
.k-grid-toolbar .k-grid-add.k-state-disabled {
    opacity: 0.6 !important;
    cursor: not-allowed !important;
    background-color: #f0f0f0 !important;
    border-color: #d0d0d0 !important;
    color: #a0a0a0 !important;
    background-image: none !important;
    box-shadow: none !important;
}

/* Pointer events fix for anchor-based buttons */
.k-grid-toolbar a.k-grid-save-changes:disabled,
.k-grid-toolbar a.k-grid-add:disabled {
    pointer-events: none !important;
}
/* UNSAVED*/
.unsaved-badge {
    position: absolute;
    background-color: #dc3545 !important;
    color: white !important;
    padding: 3px 8px !important;
    font-size: 0.75rem !important;
    font-weight: 700 !important;
    border-radius: 4px !important;
    z-index: 1000;
    transition: left 0.1s ease-in-out;
    pointer-events: none;
    white-space: nowrap;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

/* Row highlighting with subtle animations */
.k-grid tr.unsaved-new {
    background-color: #f3faf7 !important;
    border-left: 3px solid #28a745 !important;
    transition: background-color 0.3s ease;
}

.k-grid tr.unsaved-edited {
    background-color: #fffcf5 !important;
    border-left: 3px solid #ffc107 !important;
    transition: background-color 0.3s ease;
}

/* Hover states */
.k-grid tr.unsaved-new:hover {
    background-color: #e0f3ec !important;
}

.k-grid tr.unsaved-edited:hover {
    background-color: #fff9e6 !important;
}

/* Badge hover enhancement */
.unsaved-badge:hover {
    transform: translateY(-1px);
    box-shadow: 0 3px 6px rgba(0,0,0,0.15);
}
/* Grid UNSAVED */
/*.k-grid {
    --unsaved-accent-new: #28a745;
    --unsaved-accent-edited: #ffc107;
    --unsaved-bg-new: #f3faf7;
    --unsaved-bg-edited: #fffcf5;
    transition: background-color 0.3s ease;
}*/

        

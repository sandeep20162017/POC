1. Attach events to your grid for monitoring changes
In your .DataSource() config, hook into change and requestEnd events:

csharp
Copy
Edit
.DataSource(dataSource => dataSource
    .Ajax()
    .Events(events => events
        .Change("onDataSourceChange")      // <- Watch when data changes
        .RequestEnd("onRequestEnd")         // <- Handle reset after save (you already have this)
    )
    // (Your model and CRUD actions here)
)
2. Write the JavaScript functions
javascript
Copy
Edit
function onDataSourceChange(e) {
    var grid = $("#RbPartsMaterialDetailsRebuiltPartsGrid").data("kendoGrid");
    var saveButton = grid.wrapper.find(".k-grid-save-changes"); // Find the Save button

    if (grid.dataSource.hasChanges()) {
        saveButton.prop("disabled", false); // Enable Save if there are changes
    } else {
        saveButton.prop("disabled", true);  // Disable Save if no changes
    }
}

function onRequestEnd(e) {
    var grid = $("#RbPartsMaterialDetailsRebuiltPartsGrid").data("kendoGrid");

    if ((e.type === "create" || e.type === "update" || e.type === "destroy") && !e.response.Errors) {
        grid.dataSource.read(); // Reload fresh data after successful save
    }
}
3. Bonus: Disable Save initially (before any changes)
Add a little $(document).ready() snippet to disable Save when the page first loads:

javascript
Copy
Edit
$(document).ready(function () {
    var grid = $("#RbPartsMaterialDetailsRebuiltPartsGrid").data("kendoGrid");
    var saveButton = grid.wrapper.find(".k-grid-save-changes");
    saveButton.prop("disabled", true); // Initially disabled
});

Fix following error in the following GetMaterialCost code. How will I know the line number of the SQL where error occured?
Error :
CREATE PROCEDURE [SBCES].[GetMaterialCost]
    @IdNum VARCHAR(50),
    @Type VARCHAR(50),
    @Result DECIMAL(18,2) OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;

    DECLARE @FinalPrice DECIMAL(18,2),
            @KitTotal DECIMAL(18,2),
            @Count INT,
            @ErrorMessage NVARCHAR(4000),
            @SqlCommand NVARCHAR(MAX);

    BEGIN TRY
        BEGIN TRANSACTION;

        PRINT '[' + CONVERT(VARCHAR, GETDATE(), 121) + '] Starting GetMaterialCost procedure';
        TRUNCATE TABLE SBCES.TempMaterialsList;

        -- Process main materials with enhanced casting
        INSERT INTO SBCES.TempMaterialsList 
            (AssemblyArea, CostCentre, TotalCost, TaxableCost, RbReference, TotalUnitCost)
        SELECT
            ISNULL(C.Name, 'NONE'),
            ISNULL(A.CostCentre, '0'),
            ISNULL(SUM(A.Cost), 0),
            ISNULL(SUM(A.TaxCost), 0),
            @IdNum,
            ISNULL(SUM(A.Cost), 0)
        FROM (
            SELECT 
                CostCentre,
                TRY_CAST(SBCES.FinalCost(
                    ISNULL(REPLACE(PercentUsage, ',', '.'), '0'),
                    ISNULL(TRY_CAST(QtyReqd AS VARCHAR(20)), '0'),
                    MmsCost, 
                    0
                ) AS DECIMAL(18,2)) 
                - TRY_CAST(SBCES.FinalCost(
                    ISNULL(REPLACE(PercentUsage, ',', '.'), '0'),
                    ISNULL(TRY_CAST(QtyReqd AS VARCHAR(20)), '0'),
                    CoreCost, 
                    0
                ) AS DECIMAL(18,2)) AS Cost,
                TRY_CAST(SBCES.FinalCost(
                    ISNULL(REPLACE(PercentUsage, ',', '.'), '0'),
                    ISNULL(TRY_CAST(QtyReqd AS VARCHAR(20)), '0'),
                    MmsCost, 
                    0
                ) AS DECIMAL(18,2)) AS TaxCost
            FROM SBCES.ScPartsUsed
            WHERE LinkCode = UPPER(@IdNum)
                AND RebuiltPart = 'N'
                AND LinkType = UPPER(@Type)
            
            UNION ALL
            
            SELECT 
                NP.CostCentre,
                TRY_CAST(SBCES.FinalCost(
                    ISNULL(REPLACE(NP.PercentUsage, ',', '.'), '0'),
                    ISNULL(TRY_CAST(NP.QtyReqd AS VARCHAR(20)), '0'),
                    NSC.OemPartCost, 
                    0
                ) AS DECIMAL(18,2))
                - TRY_CAST(SBCES.FinalCost(
                    ISNULL(REPLACE(NP.PercentUsage, ',', '.'), '0'),
                    ISNULL(TRY_CAST(NP.QtyReqd AS VARCHAR(20)), '0'),
                    NP.CoreCost, 
                    0
                ) AS DECIMAL(18,2)),
                TRY_CAST(SBCES.FinalCost(
                    ISNULL(REPLACE(NP.PercentUsage, ',', '.'), '0'),
                    ISNULL(TRY_CAST(NP.QtyReqd AS VARCHAR(20)), '0'),
                    NSC.OemPartCost, 
                    0
                ) AS DECIMAL(18,2))
            FROM SBCES.NscPartsUsed NP
            LEFT JOIN SBCES.NonStockCodedParts NSC ON NSC.Id = NP.Id
            WHERE NP.LinkCode = UPPER(@IdNum)
                AND NP.LinkType = UPPER(@Type)
        ) A
        LEFT JOIN SBCES.CostCentres C ON C.CostCentre = A.CostCentre
        GROUP BY A.CostCentre, C.Name;

        -- Process rebuilt parts with safe numeric conversion
        SET @SqlCommand = N'';
        
        SELECT @SqlCommand += 
            N'EXEC SBCES.WriteMaterials ' +
            N'@ViIdnum = ''' + MmsRebuiltCode + ''', ' +
            N'@Quantity = ' + CONVERT(NVARCHAR(50), +
             N'@ViAdjustment ='  + ISNULL(TRY_CAST(
                    TRY_CAST(QtyReqd AS DECIMAL(18,2)) 
                    * TRY_CAST(REPLACE(ISNULL(PercentUsage, '0'), ',', '.') AS DECIMAL(5,2)) 
                    / 100 AS DECIMAL(18,2)), 0)
                ) + ', ' +
            N'@RBReference = ''' + MmsRebuiltCode + ''', ' +
            N'@ViAdjustment2 = 1.0; '
        FROM SBCES.ScPartsUsed
        WHERE RebuiltPart = 'Y'
            AND LinkType = UPPER(@Type)
            AND UPPER(LinkCode) = UPPER(@IdNum)
        GROUP BY MmsRebuiltCode, QtyReqd, PercentUsage;

        IF @SqlCommand <> N''
        BEGIN
            EXEC sp_executesql @SqlCommand;
        END

        -- Process kits with null handling
        IF UPPER(@Type) = 'BUS'
        BEGIN
            SELECT @KitTotal = ISNULL(TRY_CAST(TotalKitCost AS DECIMAL(18,2)), 0)
            FROM SBCES.OemKitsTotal2 
            WHERE Link = @IdNum;

            IF @KitTotal > 0
            BEGIN
                INSERT INTO SBCES.TempMaterialsList 
                    (AssemblyArea, CostCentre, TotalCost, TaxableCost, RbReference, TotalUnitCost)
                VALUES ('KITS', '05H7', @KitTotal, @KitTotal, @IdNum, @KitTotal);
            END
        END

        -- Final calculation with null protection
        SELECT @FinalPrice = ROUND(ISNULL(SUM(TRY_CAST(TotalUnitCost AS DECIMAL(18,2))), 0), 2)
        FROM SBCES.TempMaterialsList;

        SET @Result = @FinalPrice;
        COMMIT TRANSACTION;
        PRINT '[' + CONVERT(VARCHAR, GETDATE(), 121) + '] Procedure completed successfully';
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
        SET @ErrorMessage = ERROR_MESSAGE();
        PRINT '[' + CONVERT(VARCHAR, GETDATE(), 121) + '] Error: ' + @ErrorMessage;
        SET @Result = -1;
        THROW;
    END CATCH
END;
GO
For y0ur reference (No not modify below) :
CREATE PROCEDURE [SBCES].[WriteMaterials]
    (@ViIdnum VARCHAR(4000),
     @ViAdjustment FLOAT,
     @ViRBReference VARCHAR(4000),
     @ViAdjustment2 FLOAT)
AS
BEGIN
    DECLARE @VLinkCode VARCHAR(30);
    DECLARE @VPrice DECIMAL(20,10);
    DECLARE @VRetVal VARCHAR(25);
    DECLARE @Adjustment DECIMAL(20,10);
    DECLARE @Adjustment_ DECIMAL(20,10);
    DECLARE @CrbListToPropViIdnum VARCHAR;
    DECLARE CrbListToProp CURSOR LOCAL
    FOR
    SELECT DISTINCT UPPER(ScPartsUsed.LinkCode) AS [LinkCode],
                    UPPER(ScPartsUsed.QtyReqd) AS [Qty],
                    ScPartsUsed.PercentUsage AS [%],
                    UPPER(ScPartsUsed.MmsRebuiltCode) AS [RebuiltCode]
    FROM
        SBCES.ScPartsUsed
    WHERE
        ScPartsUsed.RebuiltPart = 'Y' AND
        ScPartsUsed.LinkType = 'RB' AND
        UPPER(ScPartsUsed.LinkCode) = UPPER(@ViIdnum);

    DECLARE @CurRBRecRebuiltCode VARCHAR(50);
    DECLARE @CurRBRecQty VARCHAR(50);
    DECLARE @CurRBRecUsage VARCHAR(50);
    DECLARE @CurMaterialViIdnum VARCHAR;

    DECLARE CurMaterial CURSOR LOCAL
    FOR
    SELECT
        ISNULL(C.Name, 'NONE') AS [AssemblyArea],
        ISNULL(A.CostCentre, '0') AS [CC],
        ISNULL(SUM(A.Cost), '0') AS [TotalCost],
        ISNULL(SUM(A.TaxCost), '0') AS [TaxableCost]
    FROM
        (SELECT
            CostCentre,
            CONVERT(DECIMAL(10,2), SBCES.FinalCost(PercentUsage, QtyReqd, MmsCost, 0) - CONVERT(DECIMAL(10,2), SBCES.FinalCost(PercentUsage, QtyReqd, CoreCost, 0))) AS Cost,
            CONVERT(DECIMAL(10,2), SBCES.FinalCost(PercentUsage, QtyReqd, MmsCost, 0)) AS TaxCost
         FROM
            SBCES.ScPartsUsed
         WHERE
            LinkCode = UPPER(@ViIdnum) AND
            RebuiltPart = 'N' AND
            LinkType = 'RB'
         UNION ALL
         SELECT
            NScPartsUsed.CostCentre,
            CONVERT(DECIMAL(10,2), SBCES.FinalCost(NScPartsUsed.PercentUsage, NScPartsUsed.QtyReqd, NonStockCodedParts.OemPartCost, 0) - CONVERT(DECIMAL(10,2), SBCES.FinalCost(NScPartsUsed.PercentUsage, NScPartsUsed.QtyReqd, NScPartsUsed.CoreCost, 0))) AS Cost,
            CONVERT(DECIMAL(10,2), SBCES.FinalCost(NScPartsUsed.PercentUsage, NScPartsUsed.QtyReqd, NonStockCodedParts.OemPartCost, 0)) AS TaxCost
         FROM
            SBCES.NScPartsUsed NScPartsUsed RIGHT OUTER JOIN SBCES.NonStockCodedParts ON NonStockCodedParts.Id = NScPartsUsed.Id
         WHERE
            NScPartsUsed.LinkCode = UPPER(@ViIdnum) AND
            NScPartsUsed.LinkType = 'RB'
        ) A,
        SBCES.CostCentres C
    WHERE
        C.CostCentre = A.CostCentre
    GROUP BY
        A.CostCentre,
        C.Name;

    DECLARE @CurMaterialRecAssemblyArea VARCHAR(50);
    DECLARE @CurMaterialRecCC VARCHAR(50);
    DECLARE @CurMaterialRecTotalCost VARCHAR(50);
    DECLARE @CurMaterialRecTaxableCost VARCHAR(50);

    SET NOCOUNT ON;

    OPEN CurMaterial;
    WHILE 1=1
    BEGIN
        FETCH CurMaterial INTO @CurMaterialRecAssemblyArea, @CurMaterialRecCC, @CurMaterialRecTotalCost, @CurMaterialRecTaxableCost;
        IF @@FETCH_STATUS <> 0 BREAK;
        INSERT INTO SBCES.TempMaterialsList VALUES (@CurMaterialRecAssemblyArea, @CurMaterialRecCC, ROUND(@CurMaterialRecTotalCost * @ViAdjustment, 2), @CurMaterialRecTaxableCost * @ViAdjustment, @ViRBReference, @ViAdjustment2 * @CurMaterialRecTotalCost);
    END;
    CLOSE CurMaterial;
    DEALLOCATE CurMaterial;

    SELECT @VPrice = COUNT(*) FROM SBCES.ScPartsUsed WHERE
        ScPartsUsed.RebuiltPart = 'Y' AND
        ScPartsUsed.LinkType = 'RB' AND
        UPPER(ScPartsUsed.LinkCode) = UPPER(@ViIdnum);

    IF @VPrice > 0
    BEGIN
        OPEN CrbListToProp;
        WHILE 1=1
        BEGIN
            FETCH CrbListToProp INTO @CurRBRecRebuiltCode, @CurRBRecQty, @CurRBRecUsage;
            IF @@FETCH_STATUS <> 0 BREAK;
            SET @Adjustment = (CONVERT(INT, @CurRBRecQty) * @CurRBRecUsage / 100.0) * @ViAdjustment;
            SET @Adjustment_ = @ViAdjustment2 * (CONVERT(INT, @CurRBRecQty) * @CurRBRecUsage / 100.0);
            EXEC [SBCES].WriteMaterials @CurRBRecRebuiltCode, @Adjustment, @ViRBReference, @Adjustment_;
        END;
        CLOSE CrbListToProp;
        DEALLOCATE CrbListToProp;
    END;
END;
GO

CREATE FUNCTION [SBCES].[FinalCost]
    (@ViPercent VARCHAR(20),
     @ViQuantity VARCHAR(20),
     @ViCost DECIMAL(10,2),
     @ViCoreCost DECIMAL(10,2))
RETURNS VARCHAR(4000) AS
BEGIN
    DECLARE @Total DECIMAL(38,4);
 
    SET @Total = (CAST(REPLACE(ISNULL(@ViPercent,'0'),',','.') AS DECIMAL(10,4))/ 100) * CAST(@ViQuantity AS DECIMAL(10,4)) * @ViCost;
    RETURN ROUND(@Total - @ViCoreCost, 2);
END;
GO

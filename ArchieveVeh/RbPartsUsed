In the following code, I want to make columns RebuiltStockNum and MmsStockCode editable only when user is creating new. During edit mode these should not be editable.
makrk them with proper css so they look disabled on the screen. Using InCell edit
@model IEnumerable<BCES.Models.Parts.RebuiltPartsViewModel>

@{
    ViewData["Title"] = "Rebuilt Parts Used";
}

<h6>Rebuilt Parts Used</h6>

@(Html.Kendo().Grid<BCES.Models.Parts.RebuiltPartsViewModel>()
   
    .Name($"RbPartsMaterialDetailsRebuiltPartsGrid")
    .Columns(columns =>
    {
        //columns.Bound(c => c.RebuiltStockNum).Title("Rebuilt Number").Width(60);
        columns.Bound(c => c.Id).Title("Id").Hidden(true);
        columns.Bound(c => c.RebuiltStockNum).Title("Rebuilt Number").EditorTemplateName("RbComboBox").Filterable(ftb => ftb.Cell(cell => cell.Operator("gte"))).Width(100);
        columns.Bound(c => c.MmsStockCode).Title("MMS Stock Code").EditorTemplateName("ComboBoxEditor").Width(70);
       @*  columns.Command(command =>
       {)
            command.Custom(""Populate Details").Click("refreshRbPartDetails").IconClass("k-i-reload").HtmlAttributes(new { @class = "k-button k-button-icontext" });
           command.Custom("Populate Details").Click("refreshRbPartDetails").IconClass("k-i-reload").HtmlAttributes(new { @class = "k-button k-button-icontext" });

       }).Width(60); *@
        columns.Bound(c => c.CoreCharge).Title("Unit Cost").Width(60);
        columns.Bound(c => c.Qty).Title("Qty").Width(40);
       
        columns.Bound(c => c.Percentage).Title("Percentage").Width(50);
       @*  columns.Bound(c => c.TotalCost).Title("TotalCost").Width(60); *@
        columns.Bound(c => c.Description).Title("Description").Width(70);
        columns.Bound(c => c.KeyWord).Title("KeyWord").Width(50);
        
        // columns.Bound(c => c.DateRevised).Title("Date Revised");
        //columns.Command(command => command.Edit()).Title("Actions");
        columns.Command(command =>
      {
          if (@ViewBag.RoleId == 1)
          {
              // command.Edit().Text(" ").IconClass("k-icon k-i-edit").HtmlAttributes(new { title = "Edit" }); // Edit button with tooltip
          }
          if (@ViewBag.RoleId == 1)
          {

              command.Custom("Delete")
               .Click("showDeleteConfirmation")
               .Text(" ")
               .IconClass("k-icon k-i-delete")
               .HtmlAttributes(new
               {
                   @class = "text-danger",
                   title = "Delete",
                   data_grid = $"RbPartsMaterialDetailsRebuiltPartsGrid",
                   data_url = Url.Action("DeleteRbPartsUsedInRbtParts", "RbPartsUsedInEstimates"),
                   data_id_field = "Id",
                   data_rebuiltstocknum_field = "RebuiltStockNum", //ssk 4
                 //  data_mmsstockcode_field = "parentPartId",
                   data_grid_type = "RbPartGrid" 
               });
          }
      }).Width(100);
    })

    .ToolBar(toolbar =>
    {
        if (@ViewBag.RoleId == 1)
        {
            toolbar.Create();
            toolbar.Save();
        }
    })
    .Editable(editable => editable.Mode(GridEditMode.InCell))
    .Pageable()
    .Sortable()
    .Resizable(r => r.Columns(true))
    // .Scrollable()
    .DataSource(dataSource => dataSource
        .Ajax()
        .Events(events => events
            .Change("onRbDataSourceChange")      // ssk6 -disable save when no changes
            .RequestEnd("onRbRequestEnd")         //ssk6
        )
       
        .Model(model =>
        {
            model.Id(c => c.Id);
            model.Field(c => c.Id);
            model.Field(c => c.RebuiltStockNum);
        })

        .Read(read => read.Url(Url.Action("GetRbPartsUsedInEstimates", "RbPartsUsedInEstimates") + "?id=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Get))
        .Create(create => create.Url(Url.Action("CreateRbPartsUsedInEstimates", "RbPartsUsedInEstimates") + "?id=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Post))
        .Update(update => update.Url(Url.Action("UpdateRbPartsUsedInEstimates", "RbPartsUsedInEstimates") + "?id=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Post))
        .Destroy(delete => delete.Url(Url.Action("DeleteRbPartsUsedInRbtParts", "RbPartsUsedInEstimates") + "?rebuiltPartNum=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Post))
    )
)

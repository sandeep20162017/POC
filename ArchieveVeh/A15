Modify your RbComboBox.cshtml slightly to bind a change event:

csharp
Copy
Edit
@(Html.Kendo().ComboBox()
    .Name(fieldName)
    .DataTextField("Text")
    .DataValueField("Text")
    .Filter("contains")
    .MinLength(2)
    .Placeholder("Enter Rebuilt Number...")
    .AutoBind(false)
    .HtmlAttributes(new Dictionary<string, object>
    {
        { "name", fieldName },
        { "data-column", fieldName }
    })
    .Events(events => 
{
    events.Select("onRebuiltStockNumSelect"); // You already have this
    events.Change("onRebuiltStockNumChange"); // <<< Add this new line!
})

    .DataSource(source =>
    {
        source.Read(read =>
        {
            read.Url(Url.Action("GetAutoCompleteData", "AutoComplete"))
                .Type(HttpVerbs.Get)
                .Data("getComboBoxParams");
        })
        .ServerFiltering(true);
    })
)
âœ… This will call a JavaScript function when user selects or types a RebuiltStockNum.

Step 2: Write the JavaScript function to detect duplicates in Grid
javascript
Copy
Edit
function onRebuiltStockNumChange(e) {
    var selectedValue = e.sender.value().trim(); // Get the current value

    if (selectedValue) {
        var grid = $("#RbPartsMaterialDetailsRebuiltPartsGrid").data("kendoGrid");

        var isDuplicate = false;

        grid.dataSource.data().forEach(function (item) {
            if (item.RebuiltStockNum && item.RebuiltStockNum.trim() === selectedValue) {
                isDuplicate = true;
            }
        });

        if (isDuplicate) {
            // Show notification
            kendo.alert("Rebuilt Part already exists!");

            // Optionally clear the value
            e.sender.value("");
        }
    }
}

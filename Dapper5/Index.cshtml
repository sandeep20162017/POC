@model IEnumerable<BCES.Admin.UserViewModel>

@{
    ViewData["Title"] = "User Management";
}

<!-- Kendo UI Grid for displaying User and Role information -->
<div>
    @(Html.Kendo().Grid<BCES.Admin.UserViewModel>()
        .Name("UserGrid") // Name of the grid
        .Columns(columns =>
        {
            columns.Bound(u => u.UserId).Hidden(); // Hide the UserId column
            columns.Bound(u => u.UserName).Title("User Name").Width(150); // Display UserName column
            columns.Bound(u => u.RoleModel.RoleName).Title("Role Name").Width(150)
                .EditorTemplateName("RoleNameDropDown") // Use a custom template for RoleName dropdown
                .ClientTemplate("#= RoleModel.RoleName #"); // Client-side display template for RoleName

            columns.Command(command =>
            {
                command.Edit(); // Edit button
                command.Destroy(); // Delete button
            }).Width(200).Title("Actions"); // Add edit and delete buttons
        })
        .ToolBar(toolbar =>
        {
            toolbar.Create(); // Add button on the toolbar
            toolbar.Save();   // Save button for grid updates
        })
        .Editable(editable => editable.Mode(GridEditMode.InCell)) // Enable InCell editing
        .DataSource(dataSource => dataSource
            .Ajax() // Use Ajax binding
            .Model(model =>
            {
                model.Id(u => u.UserId); // Define UserId as the key
                model.Field(u => u.UserId).Editable(false); // UserId should not be editable
                model.Field(u => u.RoleModel.RoleName).DefaultValue("Select Role"); // Default value for RoleName
                model.Field(u => u.RoleModel.RoleId).DefaultValue(0); // Ensure RoleId is included
            })
            .Read(read => read.Action("UserViewRead", "UserManagementGrid")) // Bind read action
            .Create(create => create.Action("UserViewAdd", "UserManagementGrid")) // Bind add action
            .Update(update => update.Action("UserViewUpdate", "UserManagementGrid")) // Bind update action
            .Destroy(destroy => destroy.Action("UserViewDelete", "UserManagementGrid")) // Bind delete action
            .Events(events => events.Error("onError")) // Handle errors on the client side
        )
        .Editable(editable => editable.Mode(GridEditMode.InCell)) // Enable InCell editing
        .Navigatable(true)
    )
</div>

<!-- Client-side error handling for grid -->
<script>
    function onError(e) {
        alert("An error occurred while processing the request: " + e.xhr.responseText);
    }

    // Update Save button text to 'Update' or 'Save' based on action
    $("#UserGrid").on("edit", function(e) {
        var saveButton = $(".k-grid-save-changes");
        if (e.model.isNew()) {
            saveButton.text("Save"); // Change to Save for new rows
        } else {
            saveButton.text("Update"); // Change to Update for editing rows
        }
    });

    // Ensure data is correctly serialized before sending to server
    function serializeData(data) {
        return kendo.stringify(data);
    }

    // Override the default save handler to use the custom serialization
    $("#UserGrid").data("kendoGrid").dataSource.transport.options.update.data = function(data) {
        return serializeData(data);
    };

    $("#UserGrid").data("kendoGrid").dataSource.transport.options.create.data = function(data) {
        return serializeData(data);
    };
</script>
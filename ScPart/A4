
✅ 1. Client-Side (JS) Validation with InCell Editing
To hook into user edits, use the save event — this fires when a cell is updated.

Add this to your grid:

csharp
Copy
Edit
.Events(events => events
    .DataBound("onLabourGridDataBound")
    .SaveChanges("onLabourGridSave")
    .Edit("onGridEdit")
    .Save("onGridCellSave") // add this
)
Then in your JS:

js
Copy
Edit
function onGridCellSave(e) {
    const field = e.container.find("input").attr("name");
    const value = e.values[field];

    if (field === "Usage") {
        if (value < 0 || value > 100) {
            e.preventDefault(); // cancel save
            notifyValidationError("Usage % must be between 0 and 100.");
            clearCell(e.container);
        }
    }

    if (field === "LabourMins") {
        if (value < 0 || value > 59) {
            e.preventDefault(); // cancel save
            notifyValidationError("Minutes must be between 0 and 59.");
            clearCell(e.container);
        }
    }
}

function notifyValidationError(message) {
    const notification = $("#notification").data("kendoNotification");
    if (notification) {
        notification.error(message);
    } else {
        alert(message); // fallback
    }
}

function clearCell(container) {
    const input = container.find("input");
    input.val("");
    input.focus();
}
✅ 2. Model-Level Validation (for server + built-in client validation)
In your model (LabourDetailsRebuiltPartsViewModel), add [Range] attributes:

csharp
Copy
Edit
[Range(0, 100, ErrorMessage = "Usage % must be between 0 and 100.")]
public int Usage { get; set; }

[Range(0, 59, ErrorMessage = "Minutes must be between 0 and 59.")]
public int LabourMins { get; set; }
✅ These will automatically trigger validation on save and display messages if you're using Html.ValidationMessageFor and have unobtrusive validation enabled.

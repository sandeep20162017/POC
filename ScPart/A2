<script>
    let unsavedChangesExist = false;

    function onLabourGridDataBound(e) {
        const grid = e.sender;
        const ds = grid.dataSource;
        unsavedChangesExist = false;

        $(".unsaved-row, .unsaved-cell, .unsaved-badge").remove();

        ds.view().forEach(item => {
            const row = grid.tbody.find(`tr[data-uid='${item.uid}']`);
            if (item.dirty || item.isNew()) {
                row.addClass("unsaved-row");

                const firstCell = row.find("td:first");
                if (!firstCell.find(".unsaved-badge").length) {
                    firstCell.append(`<span class="unsaved-badge">UNSAVED</span>`);
                }

                Object.keys(item.modified || {}).forEach(field => {
                    row.find(`td[data-field='${field}']`).addClass("unsaved-cell");
                });

                unsavedChangesExist = true;
            }
        });

        const tabStrip = $("#vehicleTabStrip").data("kendoTabStrip");
        if (tabStrip?.items().length) {
            $(tabStrip.items()[0].element)
                .find(".k-link")
                .toggleClass("has-unsaved", unsavedChangesExist);
        }

        // Disable Save/Add logic
        const gridName = grid.element.attr('id');
        if (!grid._originalAddCommand) {
            grid._originalAddCommand = grid.addRow;
            grid.addRow = function () {
                if (!grid.dataSource.hasChanges()) {
                    grid._originalAddCommand.call(grid);
                }
            };
        }

        grid.dataSource.unbind("change");
        grid.dataSource.bind("change", function () {
            updateToolbarButtons(gridName);
        });

        updateToolbarButtons(gridName);
    }

    function onLabourGridSave(e) {
        console.warn('onLabourGridSave');

        const grid = e.sender;
        const notification = $("#notification").data("kendoNotification");

        grid.one("dataBound", () => grid.refresh());

        notification.success("Changes saved successfully");

        // Retry refresh safely
        let attempts = 0;
        const maxAttempts = 5;

        function tryReload() {
            if (grid && grid.dataSource) {
                if (!grid.dataSource.hasChanges()) {
                    grid.dataSource.read().then(() => {
                        unsavedChangesExist = false;
                        console.log("Grid refreshed successfully after save.");
                    });
                } else {
                    console.warn("Changes pending, skipping dataSource.read() to avoid conflict.");
                }
            } else if (attempts < maxAttempts) {
                attempts++;
                setTimeout(tryReload, 200);
            } else {
                console.error("Failed to refresh grid â€” dataSource not ready.");
            }
        }

        tryReload();
    }
</script>

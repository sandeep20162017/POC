New Index.cshtml - Completely rewritten with Telerik Grid and popup tabs structure:

html
@using BCES.Models.Vehicle
@model IEnumerable<BCES.Models.Vehicle.VehicleViewModel>

@{
    ViewData["Title"] = "Vehicle Estimate";
    var gridName = "VehicleGrid";
}

<style>
    .k-grid {
        border-radius: 4px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .k-grid-header th {
        background-color: #f8f9fa;
        font-weight: 600;
    }
    
    .k-grid-content {
        overflow-y: auto;
        max-height: 65vh;
    }
    
    .k-tabstrip-items .k-item {
        padding: 10px 20px;
    }
    
    .estimate-link {
        color: #3f51b5;
        cursor: pointer;
        font-weight: 500;
    }
    
    .k-window-titlebar {
        background-color: #3f51b5;
        color: white;
    }
    
    .required-header::after {
        content: " *";
        color: #e32;
    }
    
    .archived-row {
        background-color: #f8f8f8;
        color: #777;
    }
    
    .disabled-tab {
        opacity: 0.5;
        pointer-events: none;
    }
</style>

<h6>Vehicle Estimate</h6>

@(Html.Kendo().TabStrip()
    .Name("mainTabStrip")
    .Items(tabstrip =>
    {
        tabstrip.Add().Text("Vehicles")
            .Selected(true)
            .Content(@<text>
                @(Html.Kendo().Grid<VehicleViewModel>()
                    .Name(gridName)
                    .Columns(columns =>
                    {
                        columns.Bound(c => c.VehicleListId).Title("Estimate #")
                            .ClientTemplate("<a class='estimate-link' onclick='openEstimatePopup(#= VehicleListId #)'>#= VehicleListId #</a>")
                            .Width(120);
                            
                        columns.Bound(c => c.VehSeriesCode).Title("Vehicle Series")
                            .HeaderHtmlAttributes(new { @class = "required-header" })
                            .Width(150);
                            
                        columns.Bound(c => c.NumOfVehicles).Title("Qty")
                            .HeaderHtmlAttributes(new { @class = "required-header" })
                            .Width(80);
                            
                        columns.Bound(c => c.ProjDesc).Title("Description")
                            .HeaderHtmlAttributes(new { @class = "required-header" })
                            .Width(250);
                            
                        columns.Command(command =>
                        {
                            command.Custom("Copy").Text(" ").IconClass("k-icon k-i-copy").Click("onCopyEstimate");
                            command.Custom("Archive").Text(" ").IconClass("k-icon k-i-folder").Click("onArchiveClick");
                            command.Custom("Delete").Text(" ").IconClass("k-icon k-i-delete").Click("showDeleteConfirmation");
                        }).Width(200);
                    })
                    .ToolBar(toolbar => toolbar.ClientTemplate("<button class='k-button k-button-icontext' onclick='openEstimatePopup(0)'><span class='k-icon k-i-plus'></span>Add New Record</button>"))
                    .Pageable(p => p.PageSizes(new int[] { 10, 20, 50 }))
                    .Sortable()
                    .Filterable()
                    .Scrollable()
                    .HtmlAttributes(new { style = "height:550px;" })
                    .DataSource(dataSource => dataSource
                        .Ajax()
                        .PageSize(10)
                        .Model(model => model.Id(p => p.VehicleListId))
                        .Read(read => read.Action("GetVehiclesView", "Vehicles"))
                    )
                )
            </text>);
            
        tabstrip.Add().Text("Archived")
            .Content(@<text>
                @Html.Partial("_ArchivedVehicleIndex")
            </text>);
    })
)

<!-- Popup Window for Estimate Details -->
<div id="estimatePopup" style="display:none;">
    @(Html.Kendo().TabStrip()
        .Name("estimateTabs")
        .SelectedIndex(0)
        .Animation(animation => animation.Open(open => open.Fade(FadeDirection.In)))
        .Items(tabs =>
        {
            tabs.Add().Text("Vehicle").Content(@<text>
                @Html.Partial("_VehPopUp", new VehicleViewModel())
            </text>);
            
            tabs.Add().Text("Labour Details").Content("Loading...").Enabled(false);
            tabs.Add().Text("Labour Hours").Content("Loading...").Enabled(false);
            tabs.Add().Text("Material Parts").Content("Loading...").Enabled(false);
            tabs.Add().Text("StockCoded Parts").Content("Loading...").Enabled(false);
            tabs.Add().Text("NonStock Parts").Content("Loading...").Enabled(false);
            tabs.Add().Text("Total Estimate").Content("Loading...").Enabled(false);
        })
        .Events(events => events.Select("onTabSelect"))
    )
</div>

<!-- Delete Confirmation Dialog -->
<div id="deleteConfirmationDialog" style="display:none;">
    <div class="confirmation-message">
        <span class="k-icon k-i-warning"></span>
        <span>Are you sure you want to delete this estimate?</span>
    </div>
    <div class="confirmation-buttons">
        <button class="k-button" id="cancelDeleteBtn">Cancel</button>
        <button class="k-button k-primary" id="confirmDeleteBtn">Delete</button>
    </div>
</div>

@section Scripts {
<script>
    var popupWindow, isNewEstimate = false, pendingChanges = false;

    function openEstimatePopup(vehicleId) {
        isNewEstimate = vehicleId === 0;
        pendingChanges = false;
        
        // Initialize or refresh popup
        if (!popupWindow) {
            popupWindow = $("#estimatePopup").kendoWindow({
                title: isNewEstimate ? "Add New Estimate" : "Estimate #" + vehicleId,
                width: 900,
                modal: true,
                visible: false,
                actions: ["Close"]
            }).data("kendoWindow");
        }
        
        // Reset tabs
        var tabStrip = $("#estimateTabs").data("kendoTabStrip");
        tabStrip.enable(tabStrip.tabGroup.children().eq(0), true); // Enable Vehicle tab
        
        // Disable other tabs for new estimates
        if (isNewEstimate) {
            for (var i = 1; i < tabStrip.items().length; i++) {
                tabStrip.enable(tabStrip.items()[i], false);
            }
        }
        
        // Load Vehicle tab content
        loadVehicleTab(vehicleId);
        
        popupWindow.center().open();
    }

    function loadVehicleTab(vehicleId) {
        $.get('@Url.Action("GetVehiclePopup", "Vehicles")', { id: vehicleId }, function(data) {
            $("#estimateTabs-0").html(data);
        });
    }

    function onTabSelect(e) {
        if (pendingChanges) {
            e.preventDefault();
            kendo.alert("You have unsaved changes. Please save or cancel before switching tabs.");
            return;
        }
        
        var tabIndex = e.item.index();
        var vehicleId = $("#VehicleListId").val() || 0;
        
        if (tabIndex > 0) {
            loadTabContent(tabIndex, vehicleId);
        }
    }
    
    function loadTabContent(tabIndex, vehicleId) {
        var url = "";
        switch(tabIndex) {
            case 1: url = '@Url.Action("LabourDetails", "Vehicles")'; break;
            case 2: url = '@Url.Action("LabourHours", "Vehicles")'; break;
            case 3: url = '@Url.Action("MaterialParts", "Vehicles")'; break;
            case 4: url = '@Url.Action("StockCodedParts", "Vehicles")'; break;
            case 5: url = '@Url.Action("NonStockParts", "Vehicles")'; break;
            case 6: url = '@Url.Action("TotalEstimate", "Vehicles")'; break;
        }
        
        $.get(url, { id: vehicleId }, function(data) {
            $("#estimateTabs-" + tabIndex).html(data);
        });
    }
    
    function onVehicleSaved() {
        pendingChanges = false;
        isNewEstimate = false;
        
        // Enable all tabs
        var tabStrip = $("#estimateTabs").data("kendoTabStrip");
        for (var i = 1; i < tabStrip.items().length; i++) {
            tabStrip.enable(tabStrip.items()[i], true);
        }
        
        // Refresh main grid
        $("#VehicleGrid").data("kendoGrid").dataSource.read();
    }

    function onEditClick() {
        $(".k-edit-form-container :input").prop("readonly", false);
        pendingChanges = true;
    }

    function onSaveClick() {
        // Validation and save logic
        if ($("#vehicleDetailForm").valid()) {
            $.ajax({
                url: '@Url.Action("SaveVehicle", "Vehicles")',
                type: 'POST',
                data: $("#vehicleDetailForm").serialize(),
                success: function() {
                    onVehicleSaved();
                    kendo.alert("Vehicle saved successfully");
                }
            });
        }
    }
    
    function onCopyEstimate(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        // Copy logic here
    }
    
    function onArchiveClick(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        // Archive logic here
    }
</script>
}
New _VehPopUp.cshtml - Updated Vehicle popup tab:

html
@model BCES.Models.Vehicle.VehicleViewModel

<div class="k-edit-form-container" style="padding:20px;">
    <div style="display:flex; justify-content:space-between; align-items:center; margin-bottom:15px;">
        <h3>Vehicle Details</h3>
        <div>
            <button class="k-button" onclick="onEditClick()">
                <span class="k-icon k-i-edit"></span> Edit
            </button>
            <button class="k-button k-primary" onclick="onSaveClick()">
                <span class="k-icon k-i-save"></span> Save
            </button>
        </div>
    </div>

    @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "vehicleDetailForm" }))
    {
        @Html.HiddenFor(m => m.VehicleListId)
        
        <div class="form-row">
            <div class="form-group col-md-3">
                @Html.LabelFor(m => m.VehSeriesCode, "Vehicle Series*")
                @(Html.Kendo().ComboBoxFor(m => m.VehSeriesCode)
                    .DataTextField("Text")
                    .DataValueField("Value")
                    .Filter(FilterType.Contains)
                    .Placeholder("Select series...")
                    .HtmlAttributes(new { @class = "form-control", required = "required", @readonly = "true" })
                    .DataSource(source => source
                        .Read(read => read.Action("GetVehicleSeries", "Data"))
                    )
                )
            </div>
            
            <div class="form-group col-md-2">
                @Html.LabelFor(m => m.NumOfVehicles, "Quantity*")
                @(Html.Kendo().NumericTextBoxFor(m => m.NumOfVehicles)
                    .Format("0")
                    .Min(1)
                    .HtmlAttributes(new { required = "required", @readonly = "true" })
                )
            </div>
            
            <div class="form-group col-md-4">
                @Html.LabelFor(m => m.ProjDesc, "Description*")
                @Html.Kendo().TextBoxFor(m => m.ProjDesc)
                    .HtmlAttributes(new { required = "required", @readonly = "true" })
            </div>
        </div>
        
        <div class="form-row">
            <div class="form-group col-md-3">
                @Html.LabelFor(m => m.Make)
                @Html.Kendo().TextBoxFor(m => m.Make)
                    .HtmlAttributes(new { @readonly = "true" })
            </div>
            
            <div class="form-group col-md-3">
                @Html.LabelFor(m => m.VehModel, "Model")
                @Html.Kendo().TextBoxFor(m => m.VehModel)
                    .HtmlAttributes(new { @readonly = "true" })
            </div>
            
            <div class="form-group col-md-2">
                @Html.LabelFor(m => m.Year)
                @(Html.Kendo().NumericTextBoxFor(m => m.Year)
                    .Format("0")
                    .Min(1900)
                    .Max(DateTime.Now.Year + 1)
                    .HtmlAttributes(new { @readonly = "true" })
                )
            </div>
        </div>
        
        <div class="form-row">
            <div class="form-group col-md-3">
                @Html.LabelFor(m => m.Engine)
                @Html.Kendo().TextBoxFor(m => m.Engine)
                    .HtmlAttributes(new { @readonly = "true" })
            </div>
            
            <div class="form-group col-md-3">
                @Html.LabelFor(m => m.Transmission)
                @Html.Kendo().TextBoxFor(m => m.Transmission)
                    .HtmlAttributes(new { @readonly = "true" })
            </div>
        </div>
        
        <div class="form-row">
            <div class="form-group col-md-3">
                @Html.LabelFor(m => m.ModifiedLastBy, "Last Modified By")
                @Html.Kendo().TextBoxFor(m => m.ModifiedLastBy)
                    .HtmlAttributes(new { @readonly = "true" })
            </div>
            
            <div class="form-group col-md-3">
                @Html.LabelFor(m => m.ModifiedLastDate, "Last Modified Date")
                @Html.Kendo().TextBoxFor(m => m.ModifiedLastDate)
                    .HtmlAttributes(new { @readonly = "true" })
            </div>
        </div>
    }
</div>

<style>
    .k-edit-form-container .form-row {
        margin-bottom: 15px;
    }
    
    .k-edit-form-container .k-textbox,
    .k-edit-form-container .k-numerictextbox,
    .k-edit-form-container .k-combobox {
        width: 100%;
    }
    
    .k-edit-form-container label {
        font-weight: 500;
        margin-bottom: 5px;
        display: block;
    }
</style>
New Styles - Added to the <style> section in Index.cshtml:

css
/* Main Grid */
.k-grid {
    border-radius: 4px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

.k-grid-header th {
    background-color: #f8f9fa;
    font-weight: 600;
    color: #495057;
}

.k-grid-content {
    overflow-y: auto;
    max-height: 65vh;
}

/* Tabs */
.k-tabstrip-items .k-item {
    padding: 10px 20px;
    border-bottom: 3px solid transparent;
    transition: all 0.3s ease;
}

.k-tabstrip-items .k-item.k-state-active {
    border-bottom-color: #3f51b5;
    color: #3f51b5;
}

/* Links */
.estimate-link {
    color: #3f51b5;
    cursor: pointer;
    font-weight: 500;
    text-decoration: none;
}

.estimate-link:hover {
    text-decoration: underline;
}

/* Window */
.k-window-titlebar {
    background-color: #3f51b5;
    color: white;
    font-weight: 500;
}

.k-window-content {
    padding: 0;
}

/* Required Fields */
.required-header::after {
    content: " *";
    color: #e32;
}

/* Archived Rows */
.archived-row {
    background-color: #f8f8f8;
    color: #777;
}

/* Disabled Tabs */
.disabled-tab {
    opacity: 0.5;
    pointer-events: none;
}

/* Buttons */
.k-button {
    border-radius: 4px;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    font-size: 0.875rem;
}

.k-button.k-primary {
    background-color: #3f51b5;
    border-color: #3f51b5;
}

/* Form Elements */
.k-textbox, .k-numerictextbox, .k-combobox {
    border-radius: 4px;
    border: 1px solid #ddd;
    padding: 8px 12px;
}

.k-state-disabled {
    opacity: 0.7;
}

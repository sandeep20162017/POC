ðŸ”§ RECOMMENDED FIX
Update ComboBoxEditor.cshtml to allow .Value() injection from model binding using ViewData.ModelMetadata.

Modify the top of ComboBoxEditor.cshtml:

cshtml
Copy
Edit
@{
    var fieldName = ViewData.TemplateInfo.GetFullHtmlFieldName("");
    var value = ViewData.ModelMetadata.Model?.ToString() ?? "";
}
Now inject .Value(value) like this inside the ComboBox:

cshtml
Copy
Edit
@(Html.Kendo().ComboBox()
    .Name(fieldName)
    .Value(value)
    .DataTextField("Text")
    .DataValueField("Value")
    .Filter(FilterType.Contains)
    .Placeholder("Search...")
    .AutoBind(false)
    .EnforceMinLength(true)
    .NoDataTemplate("<div style='color: red; font-weight: bold;'>Invalid Selection</div>")
    .HtmlAttributes(new Dictionary<string, object>
    {
        { "name", fieldName },
        { "data-column", fieldName },
        { "data-role", "combobox" },
        { "class", "auto-lock-column required-cell" },
        {"required", "required"}
    })
    .Events(e =>
    {
        e.DataBound("onComboBoxDataBound");
        e.Change("onComboBoxChange");
    })
    .DataSource(source =>
    {
        source.Read(read =>
        {
            read.Url(Url.Action("GetAutoCompleteData", "AutoComplete"))
                .Type(HttpVerbs.Get)
                .Data("getComboBoxParams");
        })
        .ServerFiltering(true);
    })
    .Template("#= Text #")
)
ðŸ”„ This ensures any bound value (e.g., Make, Model, etc.) appears as selected even if it's not in the first page of the datasource.

âœ… ISSUE 3: Read-only behavior when clicking estimate number
Update your openEstimateDetailWindow() JS function to pass readOnly=true when user clicks the estimate number:

js
Copy
Edit
function openEstimateDetailWindow(vehicleListId) {
    const isReadOnly = true;
    const url = '@Url.Action("GetVehicleById", "Vehicles")' + '?id=' + vehicleListId + '&readOnly=' + isReadOnly;
    const title = "Estimate Details â€“ " + vehicleListId;

    var window = $("#estimateDetailWindow").data("kendoWindow");

    if (!window) {
        window = $("#estimateDetailWindow").kendoWindow({
            title: title,
            modal: true,
            visible: false,
            resizable: true,
            width: 840,
            actions: ["Close"],
            content: { url: url }
        }).data("kendoWindow");
    } else {
        window.title(title);
        window.refresh({ url: url });
    }

    window.center().open();
}
And your Edit button should invoke a different function like editEstimateDetailWindow(vehicleListId):

js
Copy
Edit
function onEditEstimate(e) {
    e.preventDefault();
    const dataItem = this.dataItem($(e.currentTarget).closest("tr"));
    const url = '@Url.Action("GetVehicleById", "Vehicles")' + '?id=' + dataItem.VehicleListId + '&readOnly=false';
    const title = "Edit Vehicle Estimate â€“ " + dataItem.VehicleListId;

    var window = $("#estimateDetailWindow").data("kendoWindow");

    if (!window) {
        window = $("#estimateDetailWindow").kendoWindow({
            title: title,
            modal: true,
            visible: false,
            resizable: true,
            width: 840,
            actions: ["Close"],
            content: { url: url }
        }).data("kendoWindow");
    } else {
        window.title(title);
        window.refresh({ url: url });
    }

    window.center().open();
}
ðŸ‘† This keeps behavior clean between read-only details and editable popup.

You are ASP.NET core, Telerik ASP,NET core, Jascriptand UI/UX expert
1. Populate scGrid below. Use the available controller actions or if missing create one. Make Ajax call.
Pls give me full loadPartDetails function
2. Wirwup Update, SAve, Cancel. Use availabe controller actions. Give me full scAddNew and update and save functions. Ajax calls pls.
For this pass just concentrate on ScParts. We will deal with other tabs later.
Make same look and feel use same style.

_ScpartsPartial.cshtml
@model IEnumerable<BCES.Models.Parts.StockCodedPartsViewModel>

@{
    ViewData["Title"] = "Stock Coded Parts Details";
    var scGrid = $"ScPartsGrid_{ViewBag.PartNum}";
}

<h6>Stock Coded Parts Used</h6>

<div class="form-container">
    <table id="@scGrid" class="k-grid k-widget" style="width:100%; margin-bottom:12px;">
        <thead class="k-grid-header">
            <tr>
                <th>Stock Code</th>
                <th>Part Type</th>
                <th>Supplier Num</th>
                <th>Supplier Name</th>
                <th>Unit Cost</th>
                <th>Qty</th>
                <th>Total Cost</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var part in Model)
            {
                <tr data-id="@part.MMSStockCode">
                    <td><a href="javascript:void(0)" class="scLink">@part.MMSStockCode</a></td>
                    <td>@part.PartType</td>
                    <td>@part.OrigSupplierNum</td>
                    <td>@part.OrigSupplierName</td>
                    <td>@part.UnitCost</td>
                    <td>@part.Qty</td>
                    <td>@part.TotalCost</td>
                    <td><button class="k-button scDeleteBtn">Delete</button></td>
                </tr>
            }
        </tbody>
    </table>

    <button id="scAddNew" class="k-button k-primary" style="margin-bottom:8px;">
        <span class="k-icon k-i-plus"></span> Add New Stock Coded Part
    </button>

    <form id="scDetailForm" style="display:none;">
        <div class="section-title">Part Details</div>
        <!-- Row 1 -->
        <div class="form-row">
            <div class="form-group">
                <label class="form-label">StockCode</label>
                <input id="scStockCode" class="stock-field" readonly style="width:100%; height:28px;" />
            </div>
            <div class="form-group">
                <label class="form-label">PartType</label>
                <input id="scPartType" readonly class="read-only" style="width:100%; height:28px;" />
            </div>
            <div class="form-group">
                <label class="form-label">Supplier Num</label>
                <input id="scSupplierNum" readonly class="read-only" style="width:100%; height:28px;" />
            </div>
        </div>
        <!-- Row 2 -->
        <div class="form-row">
            <div class="form-group">
                <label class="form-label">Supplier Name</label>
                <input id="scSupplierName" readonly class="read-only" style="width:100%; height:28px;" />
            </div>
            <div class="form-group">
                <label class="form-label">Part Description</label>
                <input id="scPartDesc" readonly class="read-only" style="width:100%; height:28px;" />
            </div>
            <div class="form-group">
                <label class="form-label">Part Unit Cost</label>
                <input id="scUnitCost" readonly class="read-only" style="width:100%; height:28px;" />
            </div>
        </div>
        <!-- Row 3 -->
        <div class="form-row">
            <div class="form-group">
                <label class="form-label">Core Cost</label>
                <input id="scCoreCost" readonly class="read-only" style="width:100%; height:28px;" />
            </div>
            <div class="form-group">
                <label class="form-label">Cost Centre</label>
                <input id="scCostCentre" class="stock-field" style="width:100%; height:28px;" />
            </div>
        </div>
        <!-- Row 4 -->
        <div class="form-row">
            <div class="form-group">
                <label class="form-label">Qty</label>
                <input id="scQty" class="stock-field" style="width:100%; height:28px;" />
            </div>
            <div class="form-group">
                <label class="form-label">Percentage</label>
                <input id="scPerc" class="stock-field" style="width:100%; height:28px;" />
            </div>
            <div class="form-group">
                <label class="form-label">Total Cost</label>
                <input id="scTotCost" readonly class="read-only" style="width:100%; height:28px;" />
            </div>
        </div>
        <!-- Row 5 -->
        <div class="form-row">
            <div class="form-group">
                <label class="form-label">Last Modified By</label>
                <input id="scModBy" readonly class="read-only" style="width:100%; height:28px;" />
            </div>
            <div class="form-group">
                <label class="form-label">Last Modified Date</label>
                <input id="scModDate" readonly class="read-only" style="width:100%; height:28px;" />
            </div>
        </div>
        <div style="margin-top:8px;">
            <button id="scUpdateBtn" type="button" class="k-button k-primary">Update</button>
            <button id="scCancelBtn" type="button" class="k-button">Cancel</button>
        </div>
    </form>
</div>

<style>
    /* Reuse VehPopUp styles */
    .form-container { background:white; padding:12px; border-radius:4px; box-shadow:0 1px 4px rgba(0,0,0,0.05); }
    .section-title { font-size:12px; color:#2c3e50; margin-bottom:6px; padding-bottom:4px; border-bottom:1px solid #3498db; display:flex; align-items:center; gap:5px;}
    .form-row { display:flex; gap:8px; margin-bottom:6px; align-items:flex-start;}
    .form-group { display:flex; flex-direction:column; flex:1;}
    .form-label { font-size:11px; color:#2c3e50; font-weight:600; margin-bottom:3px;}
    .stock-field, .read-only { border:1px solid #d1d5db; border-radius:3px; padding:4px 8px; min-height:28px; font-size:12px; }
    .read-only { background:#f8fafc !important; color:#4b5563 !important; cursor:not-allowed!important; }
    h6 { font-size:13px; color:#2c3e50; margin-bottom:8px; border-bottom:1px solid #3498db; padding-bottom:4px;}
    .k-button { padding:4px 6px; font-size:12px; height:28px; border-radius:3px;}
    .k-button.k-primary { background:#3f51b5; color:white; border-color:#3f51b5;}
</style>

<script>
    $(function(){
      // ensure only one detail expanded
      $("#@scGridName").on("click", "a.scLink", function(){
        var row = $(this).closest("tr");
        var id = row.data("id");
        $(".scLink").not(this).prop("disabled",true);
        loadPartDetails(id);
      });

      $("#scAddNew").click(function(){
        clearDetailForm();
        showDetailForm();
        alert("Add new clicked");
      });

      $("#scCancelBtn").click(function(){ $("#scDetailForm").hide(); $(".scLink").prop("disabled",false); });

      $("#scUpdateBtn").click(function(){
        alert("Update clicked");
        // hook into your controller UpdateScPartsUsedInEstimates
      });

      $("#scQty, #scPerc").on("change", function(){
        var qty = parseInt($("#scQty").val()) || 0;
        var unit = parseFloat($("#scUnitCost").val()) || 0;
        var perc = parseInt($("#scPerc").val()) || 0;
        var tot = qty * unit * (1 + perc/100);
        $("#scTotCost").val(Math.round(tot));
      });
    });

    function loadPartDetails(stockCode) {
      // stub load: you can roundtrip AJAX to get full details via your existing controller
      // For now just show form populated with the row's data
      var r = $("tr[data-id='"+stockCode+"']");
      $("#scStockCode").val(stockCode);
      $("#scPartType").val(r.find("td:nth-child(2)").text());
      $("#scSupplierNum").val(r.find("td:nth-child(3)").text());
      $("#scSupplierName").val(r.find("td:nth-child(4)").text());
      $("#scUnitCost").val(r.find("td:nth-child(5)").text());
      $("#scQty").val(r.find("td:nth-child(6)").text());
      $("#scTotCost").val(r.find("td:nth-child(7)").text());
      $("#scCoreCost").val("0");
      $("#scCostCentre").val("");
      $("#scPartDesc").val("");
      $("#scModBy").val("");
      $("#scModDate").val("");
      showDetailForm();
    }

    function clearDetailForm(){
      $("#scDetailForm input").val("");
    }

    function showDetailForm(){
      $("#scDetailForm").show();
    }
</script>
Index.cshtml:
@using BCES.Models.Vehicle
@using BCES.Models.Parts
@model IEnumerable<VehicleViewModel>

@{
    ViewData["Title"] = "Vehicle Estimate";
   // var selectedVehicle = Model.FirstOrDefault();
}

<h6>Vehicle Estimate</h6>

@section Scripts {
<script>
// ── Global state for tab and form tracking
window.pendingChanges = false;
window.currentVehicleId = 0;
window.tabContentLoaded = [false, false, false, false, false, false, false];

// ── Load partial tabs
        window.loadTabContent = function (index, id) {
            var urls = [
                "", // Vehicle (handled separately)
                '@Url.Action("ScDetailsPartial", "Vehicles")', // StockCoded Parts
                '@Url.Action("NscDetailsPartial", "Vehicles")', // NonStock Parts
                '@Url.Action("RbDetailsPartial", "Vehicles")', // Rebuilt Parts
                '@Url.Action("LabourDetailsPartial", "Vehicles")', // Labour Details
                '@Url.Action("LabourHourSummaryPartial", "Vehicles")', // Labour Estimate
                '@Url.Action("MaterialCostSummaryPartial", "Vehicles")', // Material Estimate
                '@Url.Action("TotalCostPartial", "Vehicles")' // Total Cost
            ];

            // Special handling for Vehicle tab
            if (index === 0) {
                loadVehicleForm(id);
                return;
            }

            var paneId = [
                "", // Vehicle
                "stockCodedPartsTabContent", // StockCoded Parts
                "nonStockPartsTabContent", // NonStock Parts
                "rebuiltPartsTabContent", // Rebuilt Parts
                "labourDetailsContent", // Labour Details
                "labourEstimateContent", // Labour Estimate
                "materialEstimateContent", // Material Estimate
                "totalCostContent" // Total Cost
            ][index];

            var pane = $("#" + paneId);
            pane.html("<div class='k-loading-mask'><span class='k-loading-text'>Loading…</span></div>");

            if (urls[index]) {
                $.get(urls[index], { id: id }, data => {
                    pane.html(data);
                    window.tabContentLoaded[index] = true;

                    // Enable the tab after loading
                    var tabStrip = $("#estimateTabs").data("kendoTabStrip");
                    tabStrip.enable(tabStrip.tabGroup.children().eq(index), true);
                });
            }
        };

window.onComboBoxChange = function(e) {
            var combo = e.sender;
            if (combo.selectedIndex === -1) {
                combo.value(null);
                combo.input.val("");
                combo.trigger("change");
                // Optional: Show error message
                $("#validationMessage").text("Invalid selection!").css("color", "red");
            } else {
                $("#validationMessage").text("");
            }
        }

    //-- getComboBoxParams
    window.getComboBoxParams = function() {
            var input = $(".k-combobox input.k-input:focus");
            return {
                columnName: input.attr("name")?.replace("_input", "").split('.').pop(),
                searchText: input.val() || ""
            };
        }

//-- onComboBoxDataBound
    window.onComboBoxDataBound = function(e) {
            // Check if no data is available after filtering
            var notification = $("#notification").data("kendoNotification");

            if (e.sender.dataSource.total() === 0) {
                e.sender.value(null); // Clear the input
                e.sender.input.val(""); // Clear the text
                setTimeout(function () {
                    notification.show("Invalid Selection! Please choose from the list.", "error");
                    //alert("Invalid Selection! Please choose from the list.");
                }, 100);
            }
        }

// ── Tab selection handler
window.onTabSelect = function (e) {
    // Get the tab index using jQuery
    var tabStrip = $("#estimateTabs").data("kendoTabStrip");
    var idx = $(e.item).index();

    // Prevent infinite recursion
    if (window.currentlyLoadingTab === idx) return;
    window.currentlyLoadingTab = idx;

    if (pendingChanges && idx > 0) {
        e.preventDefault();
        window.currentlyLoadingTab = null;
        return kendo.alert("Please save or cancel before switching tabs.");
    }

    if (!window.tabContentLoaded[idx] && window.currentVehicleId > 0) {
        loadTabContent(idx, window.currentVehicleId);
    }

    window.currentlyLoadingTab = null;
};
// ── Open vehicle popup and load form partial
window.openEstimatePopup = function(vehicleId) {
    // Initialize loading tracker
    window.currentlyLoadingTab = null;
    

    var win = $("#estimatePopup").data("kendoWindow") || 
        $("#estimatePopup").kendoWindow({
            modal: true,
            width: 1150,
            height: 600,
            title: vehicleId === 0 ? "Add New Estimate" : "Estimate #" + vehicleId,
            visible: false,
            actions: ["Close"],
            deactivate: function() {
                if (pendingChanges && !confirm("Unsaved changes. Close anyway?")) return false;
            }
        }).data("kendoWindow");

    win.title(vehicleId === 0 ? "Add New Estimate" : "Vehicle Estimate #" + vehicleId);
    win.center().open();
    loadVehicleForm(vehicleId);

    pendingChanges = false;
    currentVehicleId = vehicleId;
    window.tabContentLoaded = [false, false, false, false, false, false, false, false];
    
    // Disable all non-vehicle tabs initially
    if (vehicleId === 0) {
        var tabStrip = $("#estimateTabs").data("kendoTabStrip");
        for (var i = 1; i <= 6; i++) {
            tabStrip.enable(tabStrip.tabGroup.children().eq(i), false);
        }
    }

};

// ── Load the form into the first tab
window.loadVehicleForm = function (vehicleId) {
    $.get('@Url.Action("GetVehicleById", "Vehicles")', { id: vehicleId }, function (html) {
        $("#vehicleTabContent").html(html);
        window.tabContentLoaded[0] = true;
        window.wireVehicleForm(); // rebind save/cancel/edit/etc
    });

};

// ── Wire up form submit and cancel actions inside popup
window.wireVehicleForm = function() {
    $("#btnCancelVehicle").off("click").on("click", function(){
        if (!pendingChanges || confirm("Discard changes?")) {
            $("#estimatePopup").data("kendoWindow").close();
        }
    });
    
     $("#btnSave").off("click").on("click", function(e){
          console.log('click save called');
        e.preventDefault();
        $("#vehicleForm").submit();
    });
    $("#vehicleForm").off("submit").on("submit", function(e) {
        console.log('submit called');

        e.preventDefault();
        if (!pendingChanges) { console.log (' no pending changes...returning'); return;}
        
        // Helper function to safely get ComboBox values
        function getComboValue(selector) {
            const combo = $(selector).data("kendoComboBox");
            return combo ? combo.value() : $(selector).val();
        }

        var vm = {
            VehicleListId: $("#VehicleListId").val(),
            VehSeriesCode: getComboValue("#VehSeriesCode"),
            NumOfVehicles: $("#NumOfVehicles").val(),
            ProjDesc: getComboValue("#ProjDesc"),
            Make: getComboValue("#Make"),
            VehModel: getComboValue("#VehModel"),
            Year: $("#Year").val(),
            Engine: getComboValue("#Engine"),
            Transmission: getComboValue("#Transmission"),
            Differential: getComboValue("#Differential"),
            Sopnumber: $("#Sopnumber").val()
        };
    
        console.log('VehSeriesCode :', vm.VehSeriesCode);
        console.log('NumOfVehicles :', vm.NumOfVehicles);
        console.log('ProjDesc :', vm.ProjDesc);
        
         // Initialize readonly state (true for existing records)
        var isReadOnly = window.currentVehicleId !== 0;
        setFormReadOnly(isReadOnly);

        // Handle Edit button click
        $("#btnEdit").off("click").on("click", function() {
            setFormReadOnly(false);
            pendingChanges = true;
        });
        var url = window.currentVehicleId === 0
            ? '@Url.Action("AddVehiclesView","Vehicles")'
            : '@Url.Action("UpdateVehiclesView","Vehicles")';
            
        $.ajax({
            url: url,
            type: 'POST',
            contentType: "application/json",
            data: JSON.stringify(vm),
            success: function(response) {
                if (response && response.VehicleListId) {
                    // Store VehicleListId globally
                    window.currentVehicleId = response.VehicleListId;

                    // Refresh grid
                    $("#VehicleGrid").data("kendoGrid").dataSource.read();

                    //  Reload form with fresh data from DB
                    loadVehicleForm(response.VehicleListId);

                    // Enable all tabs
                    var tabStrip = $("#estimateTabs").data("kendoTabStrip");
                    for (var i = 1; i <= 6; i++) {
                        tabStrip.enable(tabStrip.tabGroup.children().eq(i), true);
                    }

                    // Update window title to reflect new ID
                    var win = $("#estimatePopup").data("kendoWindow");
                    if (win) {
                        win.title("Vehicle Estimate #" + response.VehicleListId);
                    }

                    // Notify
                    kendo.alert("Saved successfully! Estimate #: " + response.VehicleListId);
                } else {
                    kendo.alert("Save succeeded but no Estimate ID was returned.");
                }

                pendingChanges = false;
            },
            error: function() {
                kendo.alert("Error saving data.");
            }
        });
    });
    
    $("#vehicleForm input, #vehicleForm select").off("change input").on("input change", function(){
        pendingChanges = true;
    });

}

// ── Copy estimate handler
window.onCopyEstimate = function(e) {
    e.preventDefault();
    var grid = $("#VehicleGrid").data("kendoGrid");
    var item = grid.dataItem($(e.currentTarget).closest("tr"));
    var win = $("#copyEstimateDialog").kendoWindow({ 
        title: "Copy Estimate", 
        modal: true, 
        width: 400, 
        visible: false 
    }).data("kendoWindow");
    
    $("#vehicleListId").val(item.VehicleListId);
    $("#oldVehSeriesCode").val(item.VehSeriesCode);
    $("#oldprojDesc").val(item.ProjDesc);
    $("#newVehSeriesCode, #newprojDesc").val("");
    
    win.center().open();
    
    // Wire up copy button
    $("#copyEstimateBtn").off("click").on("click", function() {
        var payload = {
            vehicleListId: $("#vehicleListId").val(),
            oldVehSeriesCode: $("#oldVehSeriesCode").val(),
            newVehSeriesCode: $("#newVehSeriesCode").val(),
            oldprojDesc: $("#oldprojDesc").val(),
            newprojDesc: $("#newprojDesc").val()
        };
        
        if (!payload.newVehSeriesCode || !payload.newprojDesc) {
            return kendo.alert("Please fill required fields.");
        }
        
        $.ajax({
            url: '@Url.Action("CopyEstimate", "Vehicles")',
            type: 'POST',
            contentType: "application/json",
            data: JSON.stringify(payload),
            success: function(response) {
                if (response.success) {
                    kendo.alert("Estimate copied successfully! New ID: " + response.newVehicleListId);
                    $("#VehicleGrid").data("kendoGrid").dataSource.read();
                    win.close();
                } else {
                    kendo.alert("Copy failed: " + response.message);
                }
            }
        });
    });
    
    $("#cancelCopyBtn").off("click").on("click", function() {
        win.close();
    });
};

// ── Archive handler
window.onArchiveClick = function(e) {
    e.preventDefault();
    var grid = $("#VehicleGrid").data("kendoGrid");
    var item = grid.dataItem($(e.currentTarget).closest("tr"));
    
    kendo.confirm("Archive estimate #" + item.VehicleListId + "?").then(function(){
        $.ajax({
            url: '@Url.Action("ArchiveVehicleDetails","Vehicles")',
            type: 'POST',
            contentType: "application/json",
            data: JSON.stringify({ 
                VehicleListId: item.VehicleListId, 
                VehSeriesCode: item.VehSeriesCode, 
                TypeId: "BUS", 
                Username: "@ViewBag.UserName".toUpperCase() 
            }),
            success: function(r) {
                if (r.success) { 
                    grid.dataSource.read(); 
                    kendo.alert(r.message); 
                } else { 
                    kendo.alert("Archive failed: " + r.message); 
                }
            }
        });
    });
};

// ── Delete handler
window.showDeleteConfirmation = function(e) {
    e.preventDefault();
    var grid = $("#VehicleGrid").data("kendoGrid");
    var item = grid.dataItem($(e.currentTarget).closest("tr"));
    var dlg = $("#deleteConfirmationDialog").kendoWindow({ 
        title: "Confirm Delete", 
        modal: true, 
        width: 400, 
        visible: false, 
        resizable: false 
    }).data("kendoWindow");
    
    dlg.center().open();
    
    $("#confirmDeleteBtn").off("click").on("click", function(){
        $.post('@Url.Action("DeleteVehicle","Vehicles")', { VehicleListId: item.VehicleListId }, function(){
            grid.dataSource.read();
            dlg.close();
        });
    });
    
    $("#cancelDeleteBtn").off("click").on("click", function(){ 
        dlg.close(); 
    });
};

window.setFormReadOnly = function(readOnly) {
    $("#vehicleForm :input").each(function() {
        var input = $(this);
        var widget = kendo.widgetInstance(input, kendo.ui);
        
        if (widget) {
            if (typeof widget.readonly === 'function') {
                widget.readonly(readOnly);
            } else if (widget.element && widget.element.is("input")) {
                input.prop("readonly", readOnly);
            }
        } else {
            input.prop("readonly", readOnly);
        }
    });

    $("[data-role='combobox']").each(function() {
        var combo = $(this).data("kendoComboBox");
        if (combo) {
            combo.readonly(readOnly);
        }
    });
};
</script>
<script>
        function onLabourGridDataBound(e) {
        }
        function onGridEdit(e) {
            // Re-apply styles after edit
            const grid = e.sender;
            grid.one("dataBound", () => grid.refresh());
        }
        function onGridCellSave(e) {

        }
        function onLabourRequestEnd(e) {
        }
        function onDataSourceError(e) {
        }
</script>
}

<style>
/* Full CSS styles pasted exactly as in your previous file */
/* Main Grid Styles */
.k-grid { border-radius:4px; box-shadow:0 2px 4px rgba(0,0,0,0.1); font-family:'Segoe UI',Tahoma,Verdana,sans-serif; background:white; }
.k-grid-header th { background:#f8f9fa; font-weight:600; color:#495057; padding:10px 12px; }
.k-grid-content { overflow-y:auto; max-height:65vh; background:white; }
/* Tab Styles */
.k-tabstrip-items .k-item { padding:5px 15px; border-bottom:3px solid transparent; transition:all 0.3s ease; background:white; }
.k-tabstrip-items .k-item.k-state-active { border-bottom-color:#3f51b5; color:#3f51b5; background:white; }
/* Links and Buttons */
.estimate-link { color:#3f51b5; cursor:pointer; font-weight:500; text-decoration:none; }
.estimate-link:hover { text-decoration:underline; }
.k-button { border-radius:4px; font-weight:500; text-transform:uppercase; letter-spacing:0.5px; font-size:0.875rem; background:white; }
.k-button.k-primary { background:#3f51b5; border-color:#3f51b5; color:white; }
/* Window Styles */
.k-window-titlebar { background:#3f51b5; color:white; font-weight:500; }
.k-window-content { padding:0; background:white; }
/* Required Fields */
.required-header::after { content:" *"; color:#e32; }
/* Form Layout */
.form-row { display:flex; flex-wrap:wrap; margin:0 -10px; }
.form-group { padding:0 10px; margin-bottom:15px; }
.popup-header { display:flex; justify-content:space-between; align-items:center; margin-bottom:20px; padding-bottom:10px; border-bottom:1px solid #eee; background:white; }
.tab-actions { display:flex; gap:10px; }
/* Delete Confirmation */
.confirmation-message { padding:20px; display:flex; align-items:center; background:white; }
.confirmation-buttons { padding:10px; text-align:right; border-top:1px solid #ddd; background:white; }
/* Readonly Fields */
.k-textbox[readonly], .k-numerictextbox[readonly] .k-numeric-wrap, .k-combobox[readonly] .k-dropdown-wrap { background:#f8f9fa; cursor:not-allowed; }
</style>

<!-- Kendo main grid in Vehicles tab -->
@(Html.Kendo().TabStrip()
  .Name("mainTabStrip")
  .Items(ts => {
    ts.Add().Text("Vehicles").Selected(true)
      .Content(@<text>
        @(Html.Kendo().Grid<VehicleViewModel>()
          .Name("VehicleGrid")
          .Columns(c => {
              c.Bound(v => v.VehicleListId).Title("Estimate #")
               .ClientTemplate("<a class='estimate-link' onclick='window.openEstimatePopup(#=VehicleListId#)'>#=VehicleListId#</a>").Width(120);
              c.Bound(v => v.VehSeriesCode).Title("Vehicle Series").HeaderHtmlAttributes(new { @class="required-header" }).EditorTemplateName("ComboBoxEditor").Width(150);
              c.Bound(v => v.NumOfVehicles).Title("Qty").HeaderHtmlAttributes(new { @class="required-header"}).Width(80);
              c.Bound(v => v.ProjDesc).Title("Description").HeaderHtmlAttributes(new { @class="required-header"}).Width(250);
              c.Command(cmd => {
                  cmd.Custom("Copy").IconClass("k-icon k-i-copy").Click("onCopyEstimate");
                  cmd.Custom("Archive").IconClass("k-icon k-i-folder").Click("onArchiveClick");
                  cmd.Custom("Delete").IconClass("k-icon k-i-delete").Click("showDeleteConfirmation");
              }).Width(180);
          })
          .ToolBar(tb => tb.ClientTemplate("<button class='k-button k-button-icontext' onclick='window.openEstimatePopup(0)'><span class='k-icon k-i-plus'></span>Add New Record</button>"))
          .Pageable(p => p.PageSizes(new[] {10,20,50}))
          .Sortable().Filterable().Scrollable().HtmlAttributes(new { style="height:550px;" })
          .DataSource(ds => ds.Ajax()
              .PageSize(10)
              .Model(m => m.Id(v => v.VehicleListId))
              .Read(r => r.Action("GetVehiclesView","Vehicles").Type(HttpVerbs.Get))
              .Create(c => c.Action("AddVehiclesView","Vehicles").Type(HttpVerbs.Post))
              .Update(u => u.Action("UpdateVehiclesView","Vehicles").Type(HttpVerbs.Post))
              .Destroy(d => d.Action("DeleteVehicle","Vehicles").Type(HttpVerbs.Post))
          )
        )
      </text>);
  })
)

<!-- Popup tabs for vehicle details -->
<div id="estimatePopup" style="display:none;">
    @(Html.Kendo().TabStrip()
        .Name("estimateTabs")
        .SelectedIndex(0)
        .Events(e => e.Select("onTabSelect"))
        .Items(tb =>
        {
            tb.Add().Text("Vehicle").Content(@<text>
        <div id="vehicleTabContent">
            <!-- Vehicle content loaded dynamically -->
        </div>
    </text>);

            tb.Add().Text("StockCoded Parts").Content(@<text>
        <div id="stockCodedPartsTabContent">
            <!-- StockCoded Parts content loaded dynamically -->
        </div>
    </text>).Enabled(false);

            tb.Add().Text("NonStock Parts").Content(@<text>
        <div id="nonStockPartsTabContent">
            <!-- NonStock Parts content loaded dynamically -->
        </div>
    </text>).Enabled(false);

            tb.Add().Text("Rebuilt Parts").Content(@<text>
        <div id="rebuiltPartsTabContent">
            <!-- Rebuilt Parts content loaded dynamically -->
        </div>
    </text>).Enabled(false);

            tb.Add().Text("Labour Details").Content("<div id='labourDetailsContent'></div>").Enabled(false);
            tb.Add().Text("Labour Estimate").Content("<div id='labourEstimateContent'></div>").Enabled(false);
            tb.Add().Text("Material Estimate").Content("<div id='materialEstimateContent'></div>").Enabled(false);
            tb.Add().Text("Total Cost").Content("<div id='totalCostContent'></div>").Enabled(false);
        })
        )
</div>
<!-- Delete confirmation dialog -->
<div id="deleteConfirmationDialog" style="display:none;">
  <div class="confirmation-message"><span class="k-icon k-i-warning" style="font-size:24px;color:#f0ad4e;"></span><span style="margin-left:10px;">Are you sure you'd like to delete?</span></div>
  <div class="confirmation-buttons"><button class="k-button" id="cancelDeleteBtn">Cancel</button><button class="k-button k-primary" id="confirmDeleteBtn" style="margin-left:10px;">Delete</button></div>
</div>

<!-- Copy estimate dialog -->
<div id="copyEstimateDialog" style="display:none;">
  <div class="k-form">
    <div class="k-form-field"><label>Estimate #</label><input id="vehicleListId" class="k-textbox" readonly /></div>
    <div class="k-form-field"><label>Old Series</label><input id="oldVehSeriesCode" class="k-textbox" readonly /></div>
    <div class="k-form-field"><label>Old Description</label><input id="oldprojDesc" class="k-textbox" readonly /></div>
    <div class="k-form-field"><label>New Vehicle Series<span style="color:red">*</span></label><input id="newVehSeriesCode" class="k-textbox" required /></div>
    <div class="k-form-field"><label>New Description<span style="color:red">*</span></label><input id="newprojDesc" class="k-textbox" required /></div>
    <div class="k-form-buttons">
        <button type="button" class="k-button k-primary" id="copyEstimateBtn">Copy</button>
        <button type="button" class="k-button" id="cancelCopyBtn">Cancel</button>
    </div>
  </div>
</div>
VehicleController:
using Dapper;
using Microsoft.AspNetCore.Mvc;
using Dapper;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Threading.Tasks;
using Telerik.DataSource;
using Telerik.DataSource.Extensions;
using BCES.Models.Admin;
using Kendo.Mvc.UI;
using Kendo.Mvc.Extensions;
using DataSourceRequest = Kendo.Mvc.UI.DataSourceRequest;
using BCES.Data;
using Telerik.SvgIcons;
using Microsoft.AspNetCore.Http;
using Microsoft.EntityFrameworkCore.Metadata.Conventions;
using BCES.Controllers.Base;
using BCES.Models.Parts;
using  BCES.Models.Vehicle;
using BCES.Models.Common;
using BCES.Models.Parts;
using System.Data;
using OfficeOpenXml;
using System.IO;
using MailKit.Net.Smtp;
using MimeKit;
using MailKit.Security;



using Newtonsoft.Json.Linq;
using static System.Net.Mime.MediaTypeNames;
using Azure.Core;
using BCES.Controllers.Admin;
using System.Net.Mail;
using Multipart = MimeKit.Multipart;
using SmtpClient = MailKit.Net.Smtp.SmtpClient;
using System.Data.SqlClient;
using Microsoft.AspNetCore.Authorization;
using System.Text.Encodings.Web;
using static Microsoft.EntityFrameworkCore.DbLoggerCategory;
using System.Reflection;
using CommandType = System.Data.CommandType;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.VisualStudio.Web.CodeGenerators.Mvc.Templates.Blazor;

//using System.Net.Mime;
//using CES.Views.Shared;
namespace BCES.Controllers.Parts
{
    // [Route("api/[controller]")]
    public class VehiclesController : BaseController
    {
        private readonly DapperContext _db;
        private readonly IDbConnection _dbConnection;
        private readonly IHttpContextAccessor _httpContextAccessor;
        private readonly IServiceProvider _serviceProvider;
        private readonly BusesController _busesController;
        private readonly LabourDetailsController _labourDetailsController;
        private static List<string> _selectedBuses = new List<string>();


        public VehiclesController(DapperContext dapper, IHttpContextAccessor httpContextAccessor,
                                      IServiceProvider serviceProvider, BusesController busesController,
                                      LabourDetailsController labourDetailsController
                                    ) : base(dapper, httpContextAccessor)
        {
            _db = dapper;
            _dbConnection = _db.CreateConnection();
            _httpContextAccessor = httpContextAccessor;
            _serviceProvider = serviceProvider;
            _busesController = busesController;
            _labourDetailsController = labourDetailsController;
        }

        [HttpGet("VehiclesIndex")]
        [AllowAnonymous]
        public IActionResult VehiclesIndex()
        {
            // return View();
            //GetRebuiltPartsData();
            return View("~/Views/Vehicles/Index.cshtml");
        }

        [AllowAnonymous]
        public IActionResult ArchivedIndex()
        {
            // return View();
            return View("~/Views/Vehicles/ArchivedIndex.cshtml");
        }

        [HttpGet]
        [AllowAnonymous]
        public async Task<JsonResult> GetVehiclesView([DataSourceRequest] DataSourceRequest request)
        {
            try
            {
                var model = await GetVehiclesData();
                return Json(model.ToDataSourceResult(request));
            }
            catch (Exception ex)
            {
                return Json(new { error = ex.Message });
            }
        }

        [HttpGet]
        [AllowAnonymous]
        public async Task<JsonResult> GetArchivedVehiclesView([DataSourceRequest] DataSourceRequest request)
        {
            // Fetch data for the grid 
            try
            {
                var model = await GetArchivedVehiclesData();

                return Json(model.ToDataSourceResult(request));
            }
            catch (Exception ex)
            {
                return Json(ex);
            }
        }

        public ActionResult GetVehicleById(int id, bool readOnly = false)
        {
           
            var vehicle = id == 0
                ? new VehicleViewModel() // Add mode
                : _dbConnection.QueryFirstOrDefault<VehicleViewModel>(@"
            SELECT  [VehicleListId]
                                              ,[VehSeriesCode]
                                              ,[NumOfVehicles]
                                              ,[ProjDesc]
                                              ,[DateEntered]
                                              ,[EnteredBy]
                                              ,[ModifiedLastBy]
                                              ,[ModifiedLastDate]
                                              ,[Make]
                                              ,[Model]
                                              ,[Year]
                                              ,[Engine]
                                              ,[Transmission]
                                              ,[Differential]
                                              ,[Sopnumber]
                                          FROM [CES].[SBCES].[VehicleList] WHERE VehicleListId = @Id", new { Id = id });

            if (vehicle == null)
                return Content("Vehicle not found");

            ViewBag.ReadOnly = readOnly;
            ViewBag.FormattedDate = vehicle.ModifiedLastDate == default
                ? "System Generated"
                : vehicle.ModifiedLastDate.ToString("MMM dd, yyyy hh:mm:ss tt");

            return PartialView("_VehPopUp", vehicle);
        }
        [AllowAnonymous]
        private async Task<IEnumerable<VehicleViewModel>> GetVehiclesData()
        {
            try
            {
                var vehiclesQuery = @"
                                         SELECT  [VehicleListId]
                                              ,[VehSeriesCode]
                                              ,[NumOfVehicles]
                                              ,[ProjDesc]
                                              ,[DateEntered]
                                              ,[EnteredBy]
                                              ,[ModifiedLastBy]
                                              ,[ModifiedLastDate]
                                              ,[Make]
                                              ,[Model]
                                              ,[Year]
                                              ,[Engine]
                                              ,[Transmission]
                                              ,[Differential]
                                              ,[Sopnumber]
                                          FROM [CES].[SBCES].[VehicleList]
                                         
                                          ORDER BY VehicleListId DESC   
                                                                    ";


                var vehicles = _dbConnection.Query<VehicleViewModel>(vehiclesQuery).ToList();


                return vehicles.Distinct().ToList();

            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error fetching vehicles data: {ex.Message}");
                return Enumerable.Empty<VehicleViewModel>();
            }
        }



        [HttpPost]
        public async Task<IActionResult> UpdateVehiclesView([FromBody] VehicleViewModel vehicleViewModel)
        {
            if (vehicleViewModel == null)
                return BadRequest("Model binding failed.");

            try
            {
                await UpdateVehiclesAsync(vehicleViewModel);

                var updated = await GetVehicleJsonByIdAsync(vehicleViewModel.VehicleListId);

                return Ok(updated);
            }
            catch (Exception ex)
            {
                return StatusCode(500, "Update failed: " + ex.Message);
            }
        }

        [AllowAnonymous]
        private async Task UpdateVehiclesAsync(VehicleViewModel vehicleViewModel)
        {
            var userName = ViewBag.UserName;
            _dbConnection.Open();
            using (var transaction = _dbConnection.BeginTransaction())
            {
                try
                {
                    // Update the [VehicleListId] table
                    var updateVehiclelistQuery = @"
                                                    UPDATE SBCES.[VehicleList]
                                                    SET 
                                                        Sopnumber = @Sopnumber,
                                                        ProjDesc =@ProjDesc,
                                                        Differential = @Differential,
                                                        Engine = @Engine,
                                                        NumOfVehicles = @NumOfVehicles,
                                                        
                                                        Make = @Make,
                                                        Model = @VehModel,
                                                        Transmission = @Transmission,
                                                        VehSeriesCode = @VehSeriesCode,
                                                        Year = @Year,
                                                        

                                                        ModifiedLastBy = @LastModifiedBy,
                                                        ModifiedLastDate = @ModifiedLastDate
                    
                                                    WHERE VehicleListId = @VehicleListId;
                                                ";

                    await _dbConnection.ExecuteAsync(updateVehiclelistQuery, new
                    {
                        vehicleViewModel.Sopnumber,
                        vehicleViewModel.ProjDesc,
                        vehicleViewModel.Differential,
                        vehicleViewModel.Engine,
                        vehicleViewModel.NumOfVehicles,


                        vehicleViewModel.Make,
                        vehicleViewModel.VehModel,
                        vehicleViewModel.Transmission,
                        vehicleViewModel.VehSeriesCode,
                        vehicleViewModel.Year,

                        LastModifiedBy = userName,
                        ModifiedLastDate = DateTime.Now,
                        vehicleViewModel.VehicleListId

                    }, transaction);


                    // Commit the transaction
                    transaction.Commit();

                }
                catch (Exception ex)
                {
                    // Rollback the transaction in case of an error
                    transaction.Rollback();
                    Console.WriteLine($"Error updating vehicle estimate: {ex.Message}");
                    throw; // Re-throw the exception to propagate it
                }
            }
        }


        [HttpPost]
        [AllowAnonymous]
        public async Task<IActionResult> DeleteVehicle(string VehicleListId)
        {

            try
            {
                if (string.IsNullOrEmpty(VehicleListId))
                {
                    return BadRequest("Invalid data.");
                }

                var deletePartSql = "DELETE FROM SBCES.[VehicleList] WHERE VehicleListId = '" + VehicleListId + "'";

                await _dbConnection.ExecuteAsync(deletePartSql, new { VehicleListId });

                //Delete Labour
                string deleteLabourQuery = @"
                    DELETE FROM SBCES.EmployeeLabour 
                    WHERE LINKNUMBER = '" + VehicleListId + "' AND TypeId = 'BUS'";

                await _dbConnection.ExecuteAsync(deleteLabourQuery, new { VehicleListId });

                //Delete SC Parts
                string deleteScPartsQuery = @"DELETE FROM SBCES.SCPartsUsed
                                            WHERE
                                                LINKTYPE = 'BUS'
                                                AND RebuiltPart = 'N'
                                                AND LinkCode = '" + VehicleListId + "'";
                await _dbConnection.ExecuteAsync(deleteScPartsQuery, new { VehicleListId });

                //Delete NSC Parts
                string deleteNscPartsQuery = @"
                              DELETE FROM SBCES.NSCPartsUsed 
                              WHERE  LINKTYPE = 'BUS'                                                
                             AND LinkCode = '" + VehicleListId + "'";
                await _dbConnection.ExecuteAsync(deleteNscPartsQuery, new { VehicleListId });

                //Delete SC Parts
                string deleteRbPartsQuery = @"DELETE FROM SBCES.SCPartsUsed
                                            WHERE
                                                LINKTYPE = 'BUS'
                                                AND RebuiltPart = 'Y'
                                                AND LinkCode = '" + VehicleListId + "'";
                await _dbConnection.ExecuteAsync(deleteRbPartsQuery, new { VehicleListId });


                return Json(new { success = true });
                //return RedirectToAction("VehiclesIndex");
            }
            catch (Exception ex)
            {
                return Json(new { success = false, message = $"Internal server error: {ex.Message}" });
            }
        }


        [AllowAnonymous]
        private async Task<IEnumerable<VehicleViewModel>> GetArchivedVehiclesData()
        {
            try
            {
                // Base query for rebuilt parts data
                var vehQuery = @"            
                                        SELECT         
                                               [OldId] 
                                               ,[ArchVehicleListId] 
                                              
                                              ,[VehSeriesCode]
                                              ,[NumOfVehicles]
                                              ,[ProjDesc]
                                              ,[DateEntered]
                                              ,[EnteredBy]
                                              ,[Make]
                                              ,[Model]
                                              ,[Year]
                                              ,[Engine]
                                              ,[Transmission]
                                              ,[Differential]
                                              ,[LabourCost]
                                              ,[LabourOverheadAmount]
                                              ,[LabourTotal]
                                              ,[MaterialsTotal]
                                              ,[TotalBusEstimateCost]
                                              ,[TotalTax]
                                              ,[TotalCostTax]
                                              ,[OemKitsTotal]
                                              ,[Sopnumber]
                                              
                                          FROM [CES].[SBCES].[ArchVehicleList]
                                           order by OldId desc
                                            ";

                var vehArchived = (await _dbConnection.QueryAsync<VehicleViewModel>(vehQuery)).ToList();


                return vehArchived;
            }
            catch (Exception ex)
            {
                // Handle errors gracefully
                return null;
            }
        }

        [HttpPost]
        public async Task<IActionResult> AddVehiclesView([FromBody] VehicleViewModel vehicleViewModel)
        {
            if (vehicleViewModel == null)
                return BadRequest("Model binding failed.");

            try
            {
                var newId = await AddVehicleAsync(vehicleViewModel);

                // Re-fetch full model from DB
                var updated = await GetVehicleJsonByIdAsync(newId);

                return Ok(updated);
            }
            catch (Exception ex)
            {
                return StatusCode(500, "Add failed: " + ex.Message);
            }
        }


        private async Task<VehicleViewModel> GetVehicleJsonByIdAsync(int id)
        {
            var model = new List<BCES.Models.Parts.StockCodedPartsViewModel> { };
            return await _dbConnection.QueryFirstOrDefaultAsync<VehicleViewModel>(
           @"
            SELECT 
                VehicleListId,                
                VehSeriesCode,
                NumOfVehicles,
                ProjDesc,
                DateEntered,
                EnteredBy,
                ModifiedLastBy,
                ModifiedLastDate,
                Make,
                Model AS VehModel,
                Year,
                Engine,
                Transmission,
                Differential,
                Sopnumber                
            FROM SBCES.VehicleList
            WHERE VehicleListId = @id", new { id });
          }

        private async Task<int> AddVehicleAsync([FromBody] VehicleViewModel vehicleViewModel)
        {
            var userName = ViewBag.UserName;
            var maxVehicleListId =
                        _dbConnection.QueryFirstOrDefault<int>(@"SELECT MAX(VehicleListId) + 1  FROM SBCES.VehicleList");

            _dbConnection.Open();
            using (var transaction = _dbConnection.BeginTransaction())
            {
                try
                {
                    // Insert into the main RbMasterlist table
                    var insertVehlistQuery = @"
                                                        INSERT INTO SBCES.VehicleList ( VehicleListId,NumOfVehicles,
                                                            Sopnumber, ProjDesc, Differential, Engine, 
                                                             Make, Model, VehSeriesCode, Year, Transmission,  EnteredBy,
                                                            DateEntered, ModifiedLastBy, ModifiedLastDate
                                                        )
                                                        VALUES (
                                                            @VehicleListId,@NumOfVehicles, @Sopnumber, @ProjDesc, @Differential, @Engine, 
                                                             @Make, @VehModel, @VehSeriesCode, @Year, @Transmission, @EnteredBy,
                                                            @DateEntered, @ModifiedLastBy, @ModifiedLastDate
                                                        );
                                                        
                                                    ";

                    await _dbConnection.ExecuteAsync(insertVehlistQuery, new
                    {
                        VehicleListId = maxVehicleListId,
                        vehicleViewModel.NumOfVehicles,
                        vehicleViewModel.Sopnumber,
                        vehicleViewModel.ProjDesc,
                        vehicleViewModel.Differential,
                        vehicleViewModel.Engine,

                        vehicleViewModel.Make,
                        vehicleViewModel.VehModel,
                        vehicleViewModel.Transmission,
                        vehicleViewModel.VehSeriesCode,
                        vehicleViewModel.Year,


                        EnteredBy = userName,
                        DateEntered = DateTime.Now,
                        ModifiedLastBy = userName,
                        ModifiedLastDate = DateTime.Now

                    }, transaction);



                    // Commit the transaction
                    transaction.Commit();

                    return maxVehicleListId;

                }
                catch (Exception ex)
                {
                    // Rollback the transaction in case of an error
                    // transaction.Rollback();
                    Console.WriteLine($"Error creating Vehicle data: {ex.Message}");
                    throw; // Re-throw the exception to propagate it
                }
            }

        }


        [AllowAnonymous]
        public IActionResult LabourDetailsPartial([FromQuery] string id, [FromQuery] string gridType)
        {
            ViewBag.PartNum = id;
            ViewBag.GridType = gridType ?? "VehicleGrid";
            return PartialView("_LabourDetails", new List<LabourDetailsRebuiltPartsViewModel>());
        }

        [AllowAnonymous]
        public IActionResult ScDetailsPartial(string id, string gridType)
        {
            ViewBag.PartNum = id;
            if (gridType == null)
            {
                ViewBag.GridType = "VehicleGrid";
            }
            else
            {
                ViewBag.GridType = gridType;

            }

            var model = new List<BCES.Models.Parts.StockCodedPartsViewModel> { };

            return PartialView("_ScPartsUsed", model);

        }

        [AllowAnonymous]
        public IActionResult LabourHourSummaryPartial(string id, string gridType)
        {
            ViewBag.PartNum = id;
            ViewBag.GridType = gridType ?? "VehicleGrid";
            return PartialView("_LabourHourSummary", new List<LabourDetailsRebuiltPartsViewModel>());
        }


        [AllowAnonymous]
        public IActionResult MaterialCostSummaryPartial(string id, string gridType)
        {
            ViewBag.PartNum = id;
            ViewBag.GridType = gridType ?? "VehicleGrid";
            return PartialView("_MaterialCostSummary", new List<MaterialCostSummaryInRbViewModel>());
        }

        [AllowAnonymous]
        public IActionResult NonStockPartsPartial(string id, string gridType)
        {
            ViewBag.PartNum = id;
            ViewBag.GridType = gridType ?? "VehicleGrid";
            return PartialView("_NscPartsUsed", new List<NscPartsUsedViewModel>());

        }


        [AllowAnonymous]
        public IActionResult RebuiltPartsPartial(string id, string gridType)
        {
            ViewBag.PartNum = id;
            ViewBag.GridType = gridType ?? "VehicleGrid";
            return PartialView("_RbPartsUsed", new List<RebuiltPartsViewModel>());
        }

        [AllowAnonymous]
        public IActionResult TotalCostPartial(string id, string gridType)
        {
            ViewBag.PartNum = id;
            if (gridType == null)
            {
                ViewBag.GridType = "VehicleGrid";
            }
            else
            {
                ViewBag.GridType = gridType;

            }
            var model = new List<BCES.Models.Parts.TotalCostInEstimates> { };
            return PartialView("_TotalCost", model);
        }

        private async Task<IEnumerable<NscPartsUsedViewModel>> GetNonStockParts(string id)
        {
            try
            {
                return await _dbConnection.QueryAsync<NscPartsUsedViewModel>(@"
            SELECT * 
            FROM SBCES.NSCPartsUsed 
            WHERE LinkCode = @Id AND LinkType = 'BUS'",
                    new { Id = id });
            }
            catch
            {
                return new List<NscPartsUsedViewModel>();
            }
        }

        private async Task<IEnumerable<RebuiltPartsViewModel>> GetRebuiltParts(string id)
        {
            try
            {
                return await _dbConnection.QueryAsync<RebuiltPartsViewModel>(@"
            SELECT * 
            FROM SBCES.SCPartsUsed 
            WHERE LinkCode = @Id AND LinkType = 'BUS' AND RebuiltPart = 'Y'",
                    new { Id = id });
            }
            catch
            {
                return new List<RebuiltPartsViewModel>();
            }
        }

        [HttpPost]
        [AllowAnonymous]
        public IActionResult SaveDetails()
        {
            // Save logic here
            return Json(new { success = true, message = "Saved Details successfully." });
        }


        [HttpPost]
        [AllowAnonymous]
        public IActionResult CancelDetails(int vehicleListId)
        {
            try
            {
                // Return a success response
                return Json(new { success = true, message = "Changes discarded successfully." });
            }
            catch (Exception ex)
            {

                return Json(new { success = false, message = "An error occurred while discarding changes. Please try again." });
            }
        }


        [HttpPost]
        [AllowAnonymous]
        public async Task<IActionResult> ArchiveVehicleDetails([FromBody] ArchiveVehicleRequestModel payload)
        {
            try
            {
                var parameters = new DynamicParameters();
                parameters.Add("@VehicleListId", payload.VehicleListId);
                parameters.Add("@ReturnValue", dbType: DbType.Int32, direction: ParameterDirection.ReturnValue);

                await _dbConnection.ExecuteAsync(
                    "[SBCES].[ArchiveVehicleV1]",
                    parameters,
                    commandType: CommandType.StoredProcedure
                );

                var retVal = parameters.Get<int>("@ReturnValue");

                return Json(new
                {
                    success = retVal == 0,
                    message = retVal == 0
                        ? $"Archived Vehicle List Id: {payload.VehicleListId}"
                        : $"Archive failed with return value: {retVal}"
                });
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false,
                    message = $"Archive failed: {ex.Message}"
                });
            }
        }

        [HttpPost]
        [AllowAnonymous]
        public async Task<IActionResult> SendEmail(string to, string subject, string body, string rebuiltPartNum)
        {
            try
            {
                // Resolve the ExportController from the service provider
                var exportController = _serviceProvider.GetRequiredService<ExportController>();

                // Generate the Excel file in memory by calling SaveToExcel
                var memoryStream = await exportController.SaveToExcel(rebuiltPartNum);


                // Send the email with the attached Excel file
                var message = new MimeMessage();
                message.From.Add(new MailboxAddress("Sandeep Kanao", "sandeep.kanao@ttc.ca"));
                message.To.Add(new MailboxAddress("Sandeep.Kanao@ttc.ca", to));
                message.Subject = subject;
                message.Body = new TextPart("plain") { Text = body };

                var attachment = new MimePart("application", "vnd.openxmlformats-officedocument.spreadsheetml.sheet")
                {
                    Content = new MimeContent((Stream)memoryStream),
                    ContentDisposition = new ContentDisposition(ContentDisposition.Attachment),
                    ContentTransferEncoding = ContentEncoding.Base64,
                    FileName = $"{rebuiltPartNum}_Vehicle_Estimate.xlsx"
                };

                var multipart = new Multipart("mixed");
                multipart.Add(message.Body);
                multipart.Add(attachment);
                message.Body = multipart;

                using (var client = new SmtpClient())
                {
                    await client.ConnectAsync("smtp.freesmtpservers.com", 25, SecureSocketOptions.StartTls);
                    // await client.AuthenticateAsync("sandeep.kanao@gmail.com", "Perf4you@");
                    await client.SendAsync(message);
                    await client.DisconnectAsync(true);
                }

                return Json(new { success = true });
            }
            catch (Exception ex)
            {
                // Log the exception 
                Console.WriteLine($"Error sending email: {ex.Message}");

                return Json(new { success = false, message = ex.Message });
            }
        }

        [AllowAnonymous]
        public IActionResult DownloadExcel(string filePath)
        {
            var fileBytes = System.IO.File.ReadAllBytes(filePath);
            return File(fileBytes, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", Path.GetFileName(filePath));
        }


        [HttpPost]
        [AllowAnonymous]
        public IActionResult CopyEstimate(
        [FromBody] CopyEstimateRequest request) // Create this DTO class
        {
            try
            {
                var parameters = new DynamicParameters();
                parameters.Add("@VehicleListId", request.vehicleListId, DbType.Int32);
                parameters.Add("@BusSeriesCode", request.newVehSeriesCode, DbType.String);
                parameters.Add("@ProjDesc", request.newprojDesc, DbType.String);
                parameters.Add("@EnteredBy", ViewBag.UserName, DbType.String);
                parameters.Add("@EstimateType", "BUS", DbType.String);
                parameters.Add("@NewVehicleListId", dbType: DbType.Int32, direction: ParameterDirection.Output);

                _dbConnection.Execute("SBCES.CopyEstimate", parameters, commandType: CommandType.StoredProcedure);

                int newVehicleListId = parameters.Get<int>("@NewVehicleListId");
                return Json(new { success = true, newVehicleListId });
            }
            catch (Exception ex)
            {
                return Json(new { success = false, message = ex.Message });
            }
        }
        public class CopyEstimateRequest
        {
            public int vehicleListId { get; set; }
            public string oldVehSeriesCode { get; set; }
            public string newVehSeriesCode { get; set; }
            public string oldprojDesc { get; set; }
            public string newprojDesc { get; set; }
        }
    }

}

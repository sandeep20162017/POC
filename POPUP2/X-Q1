You are ASP.NET core, Telerik ASp.NET core and UI/UX expert.
1. When user clicks on Add New Record, _VehPopUp fields should be editable. Only Vehicle tab should be editable all  other tabs are
greyed out (noteditable). When Vehicle is saved successfully then all the other tabs should be active
2. 'Save' should call proper controller action
3. Cofirm Delete is calling proper controller action
4. Confirm Copy and archive are calling proper controller actions
Pls assist.

_VehPopup.cshtml :
@model BCES.Models.Vehicle.VehicleViewModel

<div class="popup-container">
    <div class="popup-header">
        <div class="popup-title">@(Model.VehicleListId == 0 ? "Add New Vehicle Estimate" : $"Estimate #{Model.VehicleListId}")</div>
        <div class="tab-actions">
            <button id="btnEdit" class="k-button" style="@(Model.VehicleListId == 0 ? "display:none;" : "")">
                <span class="k-icon k-i-edit"></span> Edit
            </button>
            <button id="btnSave" class="k-button k-primary">
                <span class="k-icon k-i-save"></span> Save
            </button>
        </div>
    </div>

    <div class="form-container">
        <form id="vehicleDetailForm">
            @Html.HiddenFor(m => m.VehicleListId)

            <!-- Vehicle Information Section -->
            <div class="section-title">Vehicle Information</div>

            <!-- Row 1: Estimate #, Vehicle Series, Quantity -->
            <div class="form-row">
                <div class="form-group">
                    @Html.LabelFor(m => m.VehicleListId, "Estimate #", new { @class = "form-label" })
                    @(Html.Kendo().TextBoxFor(m => m.VehicleListId)
                        .Value(Model.VehicleListId == 0 ? "(System Generated)" : Model.VehicleListId.ToString())
                        .HtmlAttributes(new
                        {
                            @readonly = "readonly",
                            @class = "k-textbox read-only",
                            style = "width:100%; padding: 4px 6px; height: 28px;"
                        }))
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.VehSeriesCode, "Vehicle Series", new { @class = "form-label required-label" })
                    @Html.EditorFor(m => m.VehSeriesCode, "ComboBoxEditor", new
                        {
                            htmlAttributes = new
                            {
                                required = "required",
                                @class = "vehicle-field",
                                style = "width:100%; height: 28px;"
                            }
                        })
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.NumOfVehicles, "Quantity", new { @class = "form-label required-label" })
                    @(Html.Kendo().NumericTextBoxFor(m => m.NumOfVehicles)
                        .Format("0")
                        .Min(1)
                        .HtmlAttributes(new
                        {
                            required = "required",
                            @class = "vehicle-field",
                            style = "width:100%; height: 28px;"
                        }))
                </div>
            </div>

            <!-- Row 2: Description, SOP Number -->
            <div class="form-row">
                <div class="form-group double-width">
                    @Html.LabelFor(m => m.ProjDesc, "Description", new { @class = "form-label required-label" })
                    @Html.EditorFor(m => m.ProjDesc, "ComboBoxEditor", new
                        {
                            htmlAttributes = new
                            {
                                required = "required",
                                @class = "vehicle-field",
                                style = "width:100%; height: 28px;"
                            }
                        })
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.Sopnumber, "SOP Number", new { @class = "form-label" })
                    @(Html.Kendo().TextBoxFor(m => m.Sopnumber)
                        .HtmlAttributes(new
                        {
                            @class = "vehicle-field",
                            style = "width:100%; padding: 4px 6px; height: 28px;"
                        }))
                </div>
            </div>

            <!-- Specifications Section -->
            <div class="section-title">Specifications</div>

            <!-- Row 3: Make, Model, Year -->
            <div class="form-row">
                <div class="form-group">
                    @Html.LabelFor(m => m.Make, "Make", new { @class = "form-label" })
                    @Html.EditorFor(m => m.Make, "ComboBoxEditor", new
                        {
                            htmlAttributes = new
                            {
                                @class = "vehicle-field",
                                style = "width:100%; height: 28px;"
                            }
                        })
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.VehModel, "Model", new { @class = "form-label" })
                    @Html.EditorFor(m => m.VehModel, "ComboBoxEditor", new
                        {
                            htmlAttributes = new
                            {
                                @class = "vehicle-field",
                                style = "width:100%; height: 28px;"
                            }
                        })
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.Year, "Year", new { @class = "form-label" })
                    @(Html.Kendo().NumericTextBoxFor(m => m.Year)
                        .Format("0")
                        .Min(1900)
                        .Max(DateTime.Now.Year + 1)
                        .HtmlAttributes(new
                        {
                            @class = "vehicle-field",
                            style = "width:100%; height: 28px;"
                        }))
                </div>
            </div>

            <!-- Row 4: Engine, Transmission, Differential -->
            <div class="form-row">
                <div class="form-group">
                    @Html.LabelFor(m => m.Engine, "Engine", new { @class = "form-label" })
                    @Html.EditorFor(m => m.Engine, "ComboBoxEditor", new
                        {
                            htmlAttributes = new
                            {
                                @class = "vehicle-field",
                                style = "width:100%; height: 28px;"
                            }
                        })
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.Transmission, "Transmission", new { @class = "form-label" })
                    @Html.EditorFor(m => m.Transmission, "ComboBoxEditor", new
                        {
                            htmlAttributes = new
                            {
                                @class = "vehicle-field",
                                style = "width:100%; height: 28px;"
                            }
                        })
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.Differential, "Differential", new { @class = "form-label" })
                    @Html.EditorFor(m => m.Differential, "ComboBoxEditor", new
                        {
                            htmlAttributes = new
                            {
                                @class = "vehicle-field",
                                style = "width:100%; height: 28px;"
                            }
                        })
                </div>
            </div>

            <!-- Audit Section -->
            <div class="section-title">Audit Information</div>

            <!-- Row 5: Last Modified By, Last Modified Date -->
            <div class="form-row">
                <div class="form-group">
                    @Html.LabelFor(m => m.ModifiedLastBy, "Last Modified By", new { @class = "form-label" })
                    @(Html.Kendo().TextBoxFor(m => m.ModifiedLastBy)
                        .HtmlAttributes(new
                        {
                            @readonly = "readonly",
                            @class = "k-textbox read-only",
                            style = "width:100%; padding: 4px 6px; height: 28px;"
                        }))
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.ModifiedLastDate, "Last Modified Date", new { @class = "form-label" })
                    @(Html.Kendo().TextBoxFor(m => m.ModifiedLastDate)
                        .HtmlAttributes(new
                        {
                            @readonly = "readonly",
                            @class = "k-textbox read-only",
                            style = "width:100%; padding: 4px 6px; height: 28px;"
                        }))
                </div>
            </div>
        </form>
    </div>
</div>

<style>
    /* BASE STYLES - OPTIMIZED FOR 1100x600 */
    .popup-container {
        width: 1100px;
        height: 500px;
        background: white;
        border-radius: 4px;
        box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        margin: 0 auto;
        display: flex;
        flex-direction: column;
    }

    /* HEADER - ULTRA COMPACT */
    .popup-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 6px 12px;
        background: linear-gradient(to right, #2c3e50, #4a6491);
        color: white;
        flex-shrink: 0;
        height: 32px;
    }

    .popup-title {
        font-size: 14px;
        font-weight: 600;
        letter-spacing: 0.1px;
    }

    .tab-actions {
        display: flex;
        gap: 6px;
    }

    .k-button {
        border-radius: 3px;
        font-weight: 500;
        padding: 4px 8px;
        display: flex;
        align-items: center;
        gap: 4px;
        background-color: #f0f0f0;
        border: 1px solid #ccc;
        color: #333;
        font-size: 12px;
        height: 26px;
    }

        .k-button:hover {
            transform: none;
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
        }

        .k-button.k-primary {
            background: #3f51b5;
            border-color: #3f51b5;
            color: white;
        }

    /* FORM CONTAINER - FILL SPACE WITHOUT SCROLL */
    .form-container {
        padding: 8px 15px;
        overflow: hidden;
        flex: 1;
        display: flex;
        flex-direction: column;
    }

    /* FORM ROWS - TIGHT SPACING */
    .form-row {
        display: flex;
        gap: 8px;
        margin-bottom: 6px;
        align-items: flex-start;
    }

    .form-group {
        display: flex;
        flex-direction: column;
        flex: 1;
    }

    .double-width {
        flex: 1.8;
    }

    /* FORM ELEMENTS - COMPACT & EFFICIENT */
    .form-label {
        display: block;
        margin-bottom: 3px;
        font-weight: 600;
        color: #2c3e50;
        font-size: 11px;
    }

    .required-label::after {
        content: " *";
        color: #e74c3c;
        font-size: 11px;
    }

    .k-textbox, .k-combobox, .k-numerictextbox {
        width: 100%;
    }

        /* INPUT CONTROLS - MINIMAL HEIGHT */
        .k-textbox, .k-numerictextbox .k-numeric-wrap,
        .k-combobox .k-dropdown-wrap {
            border: 1px solid #d1d5db;
            border-radius: 3px;
            padding: 4px 8px;
            background: #fff;
            min-height: 28px;
            font-size: 12px;
        }

            .k-textbox:focus,
            .k-numerictextbox .k-numeric-wrap:focus-within,
            .k-combobox .k-dropdown-wrap:focus-within {
                border-color: #3498db;
                box-shadow: 0 0 0 1px rgba(52, 152, 219, 0.2);
            }

    /* READONLY FIELDS */
    .read-only, .read-only .k-dropdown-wrap,
    .read-only .k-numeric-wrap,
    .read-only .k-input {
        background-color: #f8fafc !important;
        color: #4b5563 !important;
        cursor: not-allowed !important;
    }

        .read-only .k-combobox .k-select {
            display: none !important;
        }

    /* SECTION TITLES - MINIMAL SPACE */
    .section-title {
        font-size: 12px;
        color: #2c3e50;
        margin-bottom: 6px;
        padding-bottom: 4px;
        border-bottom: 1px solid #3498db;
        display: flex;
        align-items: center;
        gap: 5px;
    }

        .section-title::before {
            content: "";
            display: block;
            width: 4px;
            height: 12px;
            background: #3498db;
            border-radius: 2px;
        }
</style>

<script>
    // Initialize form state based on mode (add vs edit)
    $(document).ready(function () {
        const isAddMode = @Model.VehicleListId === 0;

        // Set initial readonly state
        setFormReadOnly(!isAddMode);

        // Handle Edit button click
        $("#btnEdit").click(function () {
            setFormReadOnly(false);
            $(this).hide();
        });

        // Handle Save button click
        $("#btnSave").click(function () {
            $("#vehicleDetailForm").submit();
        });
    });

    // Set form readonly state
    function setFormReadOnly(readOnly) {
        $(".vehicle-field").each(function () {
            const input = $(this);
            const widget = kendo.widgetInstance(input, kendo.ui);

            if (widget) {
                if (typeof widget.readonly === 'function') {
                    widget.readonly(readOnly);
                } else if (widget.element && widget.element.is("input")) {
                    input.prop("readonly", readOnly);
                }
            } else {
                input.prop("readonly", readOnly);
            }

            // Toggle readonly class for styling
            input.toggleClass("read-only", readOnly);
        });

        // Special handling for comboboxes
        $("[data-role='combobox']").each(function () {
            const combo = $(this).data("kendoComboBox");
            if (combo) {
                combo.readonly(readOnly);
                combo.enable(!readOnly);
                $(combo.element).toggleClass("read-only", readOnly);
            }
        });
    }
Index.cshtml :
@using BCES.Models.Vehicle
@model IEnumerable<VehicleViewModel>

@{
    ViewData["Title"] = "Vehicle Estimate";
}

<h6>Vehicle Estimate</h6>

@section Scripts {
<script>
// ── Global state for tab and form tracking
window.pendingChanges = false;
window.currentVehicleId = 0;
window.tabContentLoaded = [false, false, false, false, false, false, false];

// ── Load partial tabs
window.loadTabContent = function(index, id) {
    var urls = [
        "",
        '@Url.Action("LabourDetailsPartial","Vehicles")',
        '@Url.Action("LabourHourSummaryPartial","Vehicles")',
        '@Url.Action("MaterialCostSummaryPartial","Vehicles")',
        '@Url.Action("ScPartsUsedInEstimates","Vehicles")',
        '@Url.Action("NscDetailsPartial","Vehicles")',
        '@Url.Action("TotalCostPartial","Vehicles")'
    ];
    var pane = $("#estimateTabs-" + index);
    pane.html("<div class='k-loading-mask'><span class='k-loading-text'>Loading…</span></div>");
    if (urls[index]) {
        $.get(urls[index], { id: id }, data => {
            pane.html(data);
            window.tabContentLoaded[index] = true;
            
            // Enable the tab after loading
            var tabStrip = $("#estimateTabs").data("kendoTabStrip");
            tabStrip.enable(tabStrip.tabGroup.children().eq(index), true);
        });
    }
};
window.onComboBoxChange = function(e) {
            var combo = e.sender;
            if (combo.selectedIndex === -1) {
                combo.value(null);
                combo.input.val("");
                combo.trigger("change");
                // Optional: Show error message
                $("#validationMessage").text("Invalid selection!").css("color", "red");
            } else {
                $("#validationMessage").text("");
            }
        }

    //-- getComboBoxParams
    window.getComboBoxParams = function() {
            var input = $(".k-combobox input.k-input:focus");
            return {
                columnName: input.attr("name")?.replace("_input", "").split('.').pop(),
                searchText: input.val() || ""
            };
        }

//-- onComboBoxDataBound
    window.onComboBoxDataBound = function(e) {
            // Check if no data is available after filtering
            var notification = $("#notification").data("kendoNotification");

            if (e.sender.dataSource.total() === 0) {
                e.sender.value(null); // Clear the input
                e.sender.input.val(""); // Clear the text
                setTimeout(function () {
                    notification.show("Invalid Selection! Please choose from the list.", "error");
                    //alert("Invalid Selection! Please choose from the list.");
                }, 100);
            }
        }

// ── Tab selection handler
window.onTabSelect = function(e) {
    //var idx = e.item.index();
    var idx = $(e.item).index();
    if (pendingChanges && idx > 0) {
        e.preventDefault();
        return kendo.alert("Please save or cancel before switching tabs.");
    }
    if (!window.tabContentLoaded[idx] && window.currentVehicleId > 0) {
        loadTabContent(idx, window.currentVehicleId);
    }
};

// ── Open vehicle popup and load form partial
window.openEstimatePopup = function(vehicleId) {
    pendingChanges = false;
    currentVehicleId = vehicleId;
    window.tabContentLoaded = [false, false, false, false, false, false, false];

    var win = $("#estimatePopup").data("kendoWindow") ||
        $("#estimatePopup").kendoWindow({
            modal: true,
            width: 1150,
            height: 600,
            title: vehicleId === 0 ? "Add New Estimate" : "Estimate #" + vehicleId,
            visible: false,
            actions: ["Close"],
            deactivate: function() {
                if (pendingChanges && !confirm("Unsaved changes. Close anyway?")) return false;
            }
        }).data("kendoWindow");

    win.title(vehicleId === 0 ? "Add New Estimate" : "Vehicle Estimate #" + vehicleId);
    win.center().open();
    loadVehicleForm(vehicleId);
};

// ── Load the form into the first tab
window.loadVehicleForm = function(vehicleId) {
    var tabStrip = $("#estimateTabs").data("kendoTabStrip");
    tabStrip.select(0);
    $.get('@Url.Action("GetVehicleById","Vehicles")', { id: vehicleId }, function(html) {
        $("#vehicleTabContent").html(html);
        window.tabContentLoaded[0] = true;
        wireVehicleForm();
    });
};

// ── Wire up form submit and cancel actions inside popup
function wireVehicleForm() {
    $("#btnCancelVehicle").off("click").on("click", function(){
        if (!pendingChanges || confirm("Discard changes?")) {
            $("#estimatePopup").data("kendoWindow").close();
        }
    });
    
    $("#vehicleForm").off("submit").on("submit", function(e) {
        e.preventDefault();
        if (!pendingChanges) return;
        
        var vm = {
            VehicleListId: $("#VehicleListId").val(),
            VehSeriesCode: $("#VehSeriesCode").val(),
            NumOfVehicles: $("#NumOfVehicles").val(),
            ProjDesc: $("#ProjDesc").val(),
            Make: $("#Make").val(),
            VehModel: $("#VehModel").val(),
            Year: $("#Year").val(),
            Engine: $("#Engine").val(),
            Transmission: $("#Transmission").val(),
            Differential: $("#Differential").val(),
            Sopnumber: $("#Sopnumber").val()
        };
        
        if (!vm.VehSeriesCode || !vm.NumOfVehicles || !vm.ProjDesc) {
            return kendo.alert("Please fill required fields.");
        }
        
         // Initialize readonly state (true for existing records)
        var isReadOnly = window.currentVehicleId !== 0;
        setFormReadOnly(isReadOnly);

        // Handle Edit button click
        $("#btnEdit").off("click").on("click", function() {
            setFormReadOnly(false);
            pendingChanges = true;
        });
        var url = window.currentVehicleId === 0
            ? '@Url.Action("AddVehiclesView","Vehicles")'
            : '@Url.Action("UpdateVehiclesView","Vehicles")';
            
        $.ajax({
            url: url,
            type: 'POST',
            contentType: "application/json",
            data: JSON.stringify(vm),
            success: function(response) {
                pendingChanges = false;
                $("#VehicleGrid").data("kendoGrid").dataSource.read();
                kendo.alert("Saved successfully!");
            },
            error: function() {
                kendo.alert("Error saving data.");
            }
        });
    });
    
    $("#vehicleForm input, #vehicleForm select").off("change input").on("input change", function(){
        pendingChanges = true;
    });
}

// ── Copy estimate handler
window.onCopyEstimate = function(e) {
    e.preventDefault();
    var grid = $("#VehicleGrid").data("kendoGrid");
    var item = grid.dataItem($(e.currentTarget).closest("tr"));
    var win = $("#copyEstimateDialog").kendoWindow({ 
        title: "Copy Estimate", 
        modal: true, 
        width: 400, 
        visible: false 
    }).data("kendoWindow");
    
    $("#vehicleListId").val(item.VehicleListId);
    $("#oldVehSeriesCode").val(item.VehSeriesCode);
    $("#oldprojDesc").val(item.ProjDesc);
    $("#newVehSeriesCode, #newprojDesc").val("");
    
    win.center().open();
    
    // Wire up copy button
    $("#copyEstimateBtn").off("click").on("click", function() {
        var payload = {
            vehicleListId: $("#vehicleListId").val(),
            oldVehSeriesCode: $("#oldVehSeriesCode").val(),
            newVehSeriesCode: $("#newVehSeriesCode").val(),
            oldprojDesc: $("#oldprojDesc").val(),
            newprojDesc: $("#newprojDesc").val()
        };
        
        if (!payload.newVehSeriesCode || !payload.newprojDesc) {
            return kendo.alert("Please fill required fields.");
        }
        
        $.ajax({
            url: '@Url.Action("CopyEstimate", "Vehicles")',
            type: 'POST',
            contentType: "application/json",
            data: JSON.stringify(payload),
            success: function(response) {
                if (response.success) {
                    kendo.alert("Estimate copied successfully! New ID: " + response.newVehicleListId);
                    $("#VehicleGrid").data("kendoGrid").dataSource.read();
                    win.close();
                } else {
                    kendo.alert("Copy failed: " + response.message);
                }
            }
        });
    });
    
    $("#cancelCopyBtn").off("click").on("click", function() {
        win.close();
    });
};

// ── Archive handler
window.onArchiveClick = function(e) {
    e.preventDefault();
    var grid = $("#VehicleGrid").data("kendoGrid");
    var item = grid.dataItem($(e.currentTarget).closest("tr"));
    
    kendo.confirm("Archive estimate #" + item.VehicleListId + "?").then(function(){
        $.ajax({
            url: '@Url.Action("ArchiveVehicleDetails","Vehicles")',
            type: 'POST',
            contentType: "application/json",
            data: JSON.stringify({ 
                VehicleListId: item.VehicleListId, 
                VehSeriesCode: item.VehSeriesCode, 
                TypeId: "BUS", 
                Username: "@ViewBag.UserName".toUpperCase() 
            }),
            success: function(r) {
                if (r.success) { 
                    grid.dataSource.read(); 
                    kendo.alert(r.message); 
                } else { 
                    kendo.alert("Archive failed: " + r.message); 
                }
            }
        });
    });
};

// ── Delete handler
window.showDeleteConfirmation = function(e) {
    e.preventDefault();
    var grid = $("#VehicleGrid").data("kendoGrid");
    var item = grid.dataItem($(e.currentTarget).closest("tr"));
    var dlg = $("#deleteConfirmationDialog").kendoWindow({ 
        title: "Confirm Delete", 
        modal: true, 
        width: 400, 
        visible: false, 
        resizable: false 
    }).data("kendoWindow");
    
    dlg.center().open();
    
    $("#confirmDeleteBtn").off("click").on("click", function(){
        $.post('@Url.Action("DeleteVehicle","Vehicles")', { VehicleListId: item.VehicleListId }, function(){
            grid.dataSource.read();
            dlg.close();
        });
    });
    
    $("#cancelDeleteBtn").off("click").on("click", function(){ 
        dlg.close(); 
    });
};

window.setFormReadOnly = function(readOnly) {
    $("#vehicleDetailForm :input").each(function() {
        var input = $(this);
        var widget = kendo.widgetInstance(input, kendo.ui);
        
        if (widget) {
            if (typeof widget.readonly === 'function') {
                widget.readonly(readOnly);
            } else if (widget.element && widget.element.is("input")) {
                input.prop("readonly", readOnly);
            }
        } else {
            input.prop("readonly", readOnly);
        }
    });

    $("[data-role='combobox']").each(function() {
        var combo = $(this).data("kendoComboBox");
        if (combo) {
            combo.readonly(readOnly);
        }
    });
};
</script>
}

<style>
/* Full CSS styles pasted exactly as in your previous file */
/* Main Grid Styles */
.k-grid { border-radius:4px; box-shadow:0 2px 4px rgba(0,0,0,0.1); font-family:'Segoe UI',Tahoma,Verdana,sans-serif; background:white; }
.k-grid-header th { background:#f8f9fa; font-weight:600; color:#495057; padding:10px 12px; }
.k-grid-content { overflow-y:auto; max-height:65vh; background:white; }
/* Tab Styles */
.k-tabstrip-items .k-item { padding:5px 15px; border-bottom:3px solid transparent; transition:all 0.3s ease; background:white; }
.k-tabstrip-items .k-item.k-state-active { border-bottom-color:#3f51b5; color:#3f51b5; background:white; }
/* Links and Buttons */
.estimate-link { color:#3f51b5; cursor:pointer; font-weight:500; text-decoration:none; }
.estimate-link:hover { text-decoration:underline; }
.k-button { border-radius:4px; font-weight:500; text-transform:uppercase; letter-spacing:0.5px; font-size:0.875rem; background:white; }
.k-button.k-primary { background:#3f51b5; border-color:#3f51b5; color:white; }
/* Window Styles */
.k-window-titlebar { background:#3f51b5; color:white; font-weight:500; }
.k-window-content { padding:0; background:white; }
/* Required Fields */
.required-header::after { content:" *"; color:#e32; }
/* Form Layout */
.form-row { display:flex; flex-wrap:wrap; margin:0 -10px; }
.form-group { padding:0 10px; margin-bottom:15px; }
.popup-header { display:flex; justify-content:space-between; align-items:center; margin-bottom:20px; padding-bottom:10px; border-bottom:1px solid #eee; background:white; }
.tab-actions { display:flex; gap:10px; }
/* Delete Confirmation */
.confirmation-message { padding:20px; display:flex; align-items:center; background:white; }
.confirmation-buttons { padding:10px; text-align:right; border-top:1px solid #ddd; background:white; }
/* Readonly Fields */
.k-textbox[readonly], .k-numerictextbox[readonly] .k-numeric-wrap, .k-combobox[readonly] .k-dropdown-wrap { background:#f8f9fa; cursor:not-allowed; }
</style>

<!-- Kendo main grid in Vehicles tab -->
@(Html.Kendo().TabStrip()
  .Name("mainTabStrip")
  .Items(ts => {
    ts.Add().Text("Vehicles").Selected(true)
      .Content(@<text>
        @(Html.Kendo().Grid<VehicleViewModel>()
          .Name("VehicleGrid")
          .Columns(c => {
              c.Bound(v => v.VehicleListId).Title("Estimate #")
               .ClientTemplate("<a class='estimate-link' onclick='window.openEstimatePopup(#=VehicleListId#)'>#=VehicleListId#</a>").Width(120);
              c.Bound(v => v.VehSeriesCode).Title("Vehicle Series").HeaderHtmlAttributes(new { @class="required-header" }).EditorTemplateName("ComboBoxEditor").Width(150);
              c.Bound(v => v.NumOfVehicles).Title("Qty").HeaderHtmlAttributes(new { @class="required-header"}).Width(80);
              c.Bound(v => v.ProjDesc).Title("Description").HeaderHtmlAttributes(new { @class="required-header"}).Width(250);
              c.Command(cmd => {
                  cmd.Custom("Copy").IconClass("k-icon k-i-copy").Click("onCopyEstimate");
                  cmd.Custom("Archive").IconClass("k-icon k-i-folder").Click("onArchiveClick");
                  cmd.Custom("Delete").IconClass("k-icon k-i-delete").Click("showDeleteConfirmation");
              }).Width(180);
          })
          .ToolBar(tb => tb.ClientTemplate("<button class='k-button k-button-icontext' onclick='window.openEstimatePopup(0)'><span class='k-icon k-i-plus'></span>Add New Record</button>"))
          .Pageable(p => p.PageSizes(new[] {10,20,50}))
          .Sortable().Filterable().Scrollable().HtmlAttributes(new { style="height:550px;" })
          .DataSource(ds => ds.Ajax()
              .PageSize(10)
              .Model(m => m.Id(v => v.VehicleListId))
              .Read(r => r.Action("GetVehiclesView","Vehicles").Type(HttpVerbs.Get))
              .Create(c => c.Action("AddVehiclesView","Vehicles").Type(HttpVerbs.Post))
              .Update(u => u.Action("UpdateVehiclesView","Vehicles").Type(HttpVerbs.Post))
              .Destroy(d => d.Action("DeleteVehicle","Vehicles").Type(HttpVerbs.Post))
          )
        )
      </text>);
  })
)

<!-- Popup tabs for vehicle details -->
<div id="estimatePopup" style="display:none;">
  @(Html.Kendo().TabStrip()
      .Name("estimateTabs")
      .SelectedIndex(0)
      .Events(e => e.Select("onTabSelect"))
      .Items(tb => {
          tb.Add().Text("Vehicle").Content(@<text><div id="vehicleTabContent"></div></text>);
          tb.Add().Text("Labour Details").Content("<div id='estimateTabs-1'></div>").Enabled(false);
          tb.Add().Text("Labour Hours").Content("<div id='estimateTabs-2'></div>").Enabled(false);
          tb.Add().Text("Material Parts").Content("<div id='estimateTabs-3'></div>").Enabled(false);
          tb.Add().Text("StockCoded Parts").Content("<div id='estimateTabs-4'></div>").Enabled(false);
          tb.Add().Text("NonStock Parts").Content("<div id='estimateTabs-5'></div>").Enabled(false);
          tb.Add().Text("Total Estimate").Content("<div id='estimateTabs-6'></div>").Enabled(false);
      })
  )
</div>

<!-- Delete confirmation dialog -->
<div id="deleteConfirmationDialog" style="display:none;">
  <div class="confirmation-message"><span class="k-icon k-i-warning" style="font-size:24px;color:#f0ad4e;"></span><span style="margin-left:10px;">Are you sure you'd like to delete?</span></div>
  <div class="confirmation-buttons"><button class="k-button" id="cancelDeleteBtn">Cancel</button><button class="k-button k-primary" id="confirmDeleteBtn" style="margin-left:10px;">Delete</button></div>
</div>

<!-- Copy estimate dialog -->
<div id="copyEstimateDialog" style="display:none;">
  <div class="k-form">
    <div class="k-form-field"><label>Estimate #</label><input id="vehicleListId" class="k-textbox" readonly /></div>
    <div class="k-form-field"><label>Old Series</label><input id="oldVehSeriesCode" class="k-textbox" readonly /></div>
    <div class="k-form-field"><label>Old Description</label><input id="oldprojDesc" class="k-textbox" readonly /></div>
    <div class="k-form-field"><label>New Vehicle Series<span style="color:red">*</span></label><input id="newVehSeriesCode" class="k-textbox" required /></div>
    <div class="k-form-field"><label>New Description<span style="color:red">*</span></label><input id="newprojDesc" class="k-textbox" required /></div>
    <div class="k-form-buttons">
        <button type="button" class="k-button k-primary" id="copyEstimateBtn">Copy</button>
        <button type="button" class="k-button" id="cancelCopyBtn">Cancel</button>
    </div>
  </div>
</div>
</script>
ComboBoxEditor.cshtml :
@model object

@{
    var fieldName = ViewData.TemplateInfo.GetFullHtmlFieldName("");
    var columnLockMap = ViewData["LockMap"]?.ToString() ?? "";
    var comboValue = Model?.ToString() ?? ""; 
}

@(Html.Kendo().ComboBox()
    .Name(fieldName)
    .DataTextField("Value")
    .DataValueField("Value")
    .Value(comboValue)
    .Text(comboValue)
    
    .Filter(FilterType.Contains)
    .Placeholder("Search...")
    .AutoBind(false)
    @* .MinLength(2) *@
    .EnforceMinLength(true)
    .NoDataTemplate("<div style='color: red; font-weight: bold;'>Invalid Selection</div>")
    .HtmlAttributes(new Dictionary<string, object>
    {
        { "name", fieldName },
        { "data-column", fieldName },
        { "data-role", "combobox" },
        { "data-lock-map", columnLockMap },
        { "class", "auto-lock-column"  + " required-cell"},
        {"required", "required"}
    })
    .Events(e =>
    {
        e.DataBound("onComboBoxDataBound");
        e.Change("onComboBoxChange");
    })
    .DataSource(source =>
    {
        source.Read(read =>
        {
            read.Url(Url.Action("GetAutoCompleteData", "AutoComplete"))
                .Type(HttpVerbs.Get)
                .Data("getComboBoxParams");
        })
        .ServerFiltering(true);
    })
    .Template("#= Text #")
)
VehiclesController.cs :
@model object

@{
    var fieldName = ViewData.TemplateInfo.GetFullHtmlFieldName("");
    var columnLockMap = ViewData["LockMap"]?.ToString() ?? "";
    var comboValue = Model?.ToString() ?? ""; 
}

@(Html.Kendo().ComboBox()
    .Name(fieldName)
    .DataTextField("Value")
    .DataValueField("Value")
    .Value(comboValue)
    .Text(comboValue)
    
    .Filter(FilterType.Contains)
    .Placeholder("Search...")
    .AutoBind(false)
    @* .MinLength(2) *@
    .EnforceMinLength(true)
    .NoDataTemplate("<div style='color: red; font-weight: bold;'>Invalid Selection</div>")
    .HtmlAttributes(new Dictionary<string, object>
    {
        { "name", fieldName },
        { "data-column", fieldName },
        { "data-role", "combobox" },
        { "data-lock-map", columnLockMap },
        { "class", "auto-lock-column"  + " required-cell"},
        {"required", "required"}
    })
    .Events(e =>
    {
        e.DataBound("onComboBoxDataBound");
        e.Change("onComboBoxChange");
    })
    .DataSource(source =>
    {
        source.Read(read =>
        {
            read.Url(Url.Action("GetAutoCompleteData", "AutoComplete"))
                .Type(HttpVerbs.Get)
                .Data("getComboBoxParams");
        })
        .ServerFiltering(true);
    })
    .Template("#= Text #")
)

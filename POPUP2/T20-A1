@using BCES.Models.Vehicle
@using BCES.Models.Parts
@model IEnumerable<VehicleViewModel>

@{
    ViewData["Title"] = "Vehicle Estimate";
}

<h6>Vehicle Estimate</h6>

<!-- Kendo main grid in Vehicles tab -->
@(Html.Kendo().TabStrip()
  .Name("mainTabStrip")
  .Items(ts => {
    ts.Add().Text("Vehicles").Selected(true)
      .Content(@<text>
        @(Html.Kendo().Grid<VehicleViewModel>()
          .Name("VehicleGrid")
          .Columns(c => {
              c.Bound(v => v.VehicleListId).Title("Estimate #")
               .ClientTemplate("<a class='estimate-link' onclick='window.openEstimatePopup(#=VehicleListId#)'>#=VehicleListId#</a>").Width(120);
              c.Bound(v => v.VehSeriesCode).Title("Vehicle Series").HeaderHtmlAttributes(new { @class="required-header" }).EditorTemplateName("ComboBoxEditor").Width(150);
              c.Bound(v => v.NumOfVehicles).Title("Qty").HeaderHtmlAttributes(new { @class="required-header"}).Width(80);
              c.Bound(v => v.ProjDesc).Title("Description").HeaderHtmlAttributes(new { @class="required-header"}).Width(250);
              c.Command(cmd => {
                  cmd.Custom("Copy").IconClass("k-icon k-i-copy").Click("window.onCopyEstimate");
                  cmd.Custom("Archive").IconClass("k-icon k-i-folder").Click("window.onArchiveClick");
                  cmd.Custom("Delete").IconClass("k-icon k-i-delete").Click("window.showDeleteConfirmation");
              }).Width(180);
          })
          .ToolBar(tb => tb.ClientTemplate("<button class='k-button k-button-icontext' onclick='window.openEstimatePopup(0)'><span class='k-icon k-i-plus'></span>Add New Record</button>"))
          .Pageable(p => p.PageSizes(new[] {10,20,50}))
          .Sortable().Filterable().Scrollable().HtmlAttributes(new { style="height:550px;" })
          .DataSource(ds => ds.Ajax()
              .PageSize(10)
              .Model(m => m.Id(v => v.VehicleListId))
              .Read(r => r.Action("GetVehiclesView","Vehicles").Type(HttpVerbs.Get))
              .Create(c => c.Action("AddVehiclesView","Vehicles").Type(HttpVerbs.Post))
              .Update(u => u.Action("UpdateVehiclesView","Vehicles").Type(HttpVerbs.Post))
              .Destroy(d => d.Action("DeleteVehicle","Vehicles").Type(HttpVerbs.Post))
          )
      </text>);
  })
)

<!-- Popup tabs for vehicle details -->
<div id="estimatePopup" style="display:none;">
    @(Html.Kendo().TabStrip()
        .Name("estimateTabs")
        .SelectedIndex(0)
        .Events(e => e.Select("onTabSelect"))
        .Items(tb =>
        {
            tb.Add().Text("Vehicle").Content(@<text>
                <div id="vehicleTabContent">
                    <!-- Vehicle content loaded dynamically -->
                </div>
            </text>);

            tb.Add().Text("StockCoded Parts").Content(@<text>
                <div id="stockCodedPartsTabContent">
                    @await Html.PartialAsync("_ScPartsPartial",
                    new List<StockCodedPartsViewModel>(),
                    new ViewDataDictionary(ViewData) {
                    { "PartNum", ViewBag.PartNum }
                    })
                </div>
            </text>).Enabled(false);

            tb.Add().Text("NonStock Parts").Content(@<text>
                <div id="nonStockPartsTabContent">
                    <!-- NonStock Parts content loaded dynamically -->
                </div>
            </text>).Enabled(false);

            tb.Add().Text("Rebuilt Parts").Content(@<text>
                <div id="rebuiltPartsTabContent">
                    <!-- Rebuilt Parts content loaded dynamically -->
                </div>
            </text>).Enabled(false);

            tb.Add().Text("Labour Details").Content("<div id='labourDetailsContent'></div>").Enabled(false);
            tb.Add().Text("Labour Estimate").Content("<div id='labourEstimateContent'></div>").Enabled(false);
            tb.Add().Text("Material Estimate").Content("<div id='materialEstimateContent'></div>").Enabled(false);
            tb.Add().Text("Total Cost").Content("<div id='totalCostContent'></div>").Enabled(false);
        })
    )
</div>

<!-- Delete confirmation dialog -->
<div id="deleteConfirmationDialog" style="display:none;">
  <div class="confirmation-message"><span class="k-icon k-i-warning" style="font-size:24px;color:#f0ad4e;"></span><span style="margin-left:10px;">Are you sure you'd like to delete?</span></div>
  <div class="confirmation-buttons"><button class="k-button" id="cancelDeleteBtn">Cancel</button><button class="k-button k-primary" id="confirmDeleteBtn" style="margin-left:10px;">Delete</button></div>
</div>

<!-- Copy estimate dialog -->
<div id="copyEstimateDialog" style="display:none;">
  <div class="k-form">
    <div class="k-form-field"><label>Estimate #</label><input id="vehicleListId" class="k-textbox" readonly /></div>
    <div class="k-form-field"><label>Old Series</label><input id="oldVehSeriesCode" class="k-textbox" readonly /></div>
    <div class="k-form-field"><label>Old Description</label><input id="oldprojDesc" class="k-textbox" readonly /></div>
    <div class="k-form-field"><label>New Vehicle Series<span style="color:red">*</span></label><input id="newVehSeriesCode" class="k-textbox" required /></div>
    <div class="k-form-field"><label>New Description<span style="color:red">*</span></label><input id="newprojDesc" class="k-textbox" required /></div>
    <div class="k-form-buttons">
        <button type="button" class="k-button k-primary" id="copyEstimateBtn">Copy</button>
        <button type="button" class="k-button" id="cancelCopyBtn">Cancel</button>
    </div>
  </div>
</div>

<style>
/* Full CSS styles pasted exactly as in your previous file */
/* Main Grid Styles */
.k-grid { border-radius:4px; box-shadow:0 2px 4px rgba(0,0,0,0.1); font-family:'Segoe UI',Tahoma,Verdana,sans-serif; background:white; }
.k-grid-header th { background:#f8f9fa; font-weight:600; color:#495057; padding:10px 12px; }
.k-grid-content { overflow-y:auto; max-height:65vh; background:white; }
/* Tab Styles */
.k-tabstrip-items .k-item { padding:5px 15px; border-bottom:3px solid transparent; transition:all 0.3s ease; background:white; }
.k-tabstrip-items .k-item.k-state-active { border-bottom-color:#3f51b5; color:#3f51b5; background:white; }
/* Links and Buttons */
.estimate-link { color:#3f51b5; cursor:pointer; font-weight:500; text-decoration:none; }
.estimate-link:hover { text-decoration:underline; }
.k-button { border-radius:4px; font-weight:500; text-transform:uppercase; letter-spacing:0.5px; font-size:0.875rem; background:white; }
.k-button.k-primary { background:#3f51b5; border-color:#3f51b5; color:white; }
/* Window Styles */
.k-window-titlebar { background:#3f51b5; color:white; font-weight:500; }
.k-window-content { padding:0; background:white; }
/* Required Fields */
.required-header::after { content:" *"; color:#e32; }
/* Form Layout */
.form-row { display:flex; flex-wrap:wrap; margin:0 -10px; }
.form-group { padding:0 10px; margin-bottom:15px; }
.popup-header { display:flex; justify-content:space-between; align-items:center; margin-bottom:20px; padding-bottom:10px; border-bottom:1px solid #eee; background:white; }
.tab-actions { display:flex; gap:10px; }
/* Delete Confirmation */
.confirmation-message { padding:20px; display:flex; align-items:center; background:white; }
.confirmation-buttons { padding:10px; text-align:right; border-top:1px solid #ddd; background:white; }
/* Readonly Fields */
.k-textbox[readonly], .k-numerictextbox[readonly] .k-numeric-wrap, .k-combobox[readonly] .k-dropdown-wrap { background:#f8f9fa; cursor:not-allowed; }
</style>

@section Scripts {
<script>
// ── Global state for tab and form tracking
window.pendingChanges = false;
window.currentVehicleId = 0;
window.tabContentLoaded = [false, false, false, false, false, false, false];
window.currentlyLoadingTab = null;

// ── Copy estimate handler
window.onCopyEstimate = function(e) {
    e.preventDefault();
    var grid = $("#VehicleGrid").data("kendoGrid");
    var item = grid.dataItem($(e.currentTarget).closest("tr"));
    var win = $("#copyEstimateDialog").kendoWindow({
        title: "Copy Estimate",
        modal: true,
        width: 400,
        visible: false
    }).data("kendoWindow");

    $("#vehicleListId").val(item.VehicleListId);
    $("#oldVehSeriesCode").val(item.VehSeriesCode);
    $("#oldprojDesc").val(item.ProjDesc);
    $("#newVehSeriesCode, #newprojDesc").val("");

    win.center().open();

    // Wire up copy button
    $("#copyEstimateBtn").off("click").on("click", function () {
        var payload = {
            vehicleListId: $("#vehicleListId").val(),
            oldVehSeriesCode: $("#oldVehSeriesCode").val(),
            newVehSeriesCode: $("#newVehSeriesCode").val(),
            oldprojDesc: $("#oldprojDesc").val(),
            newprojDesc: $("#newprojDesc").val()
        };

        if (!payload.newVehSeriesCode || !payload.newprojDesc) {
            return kendo.alert("Please fill required fields.");
        }

        $.ajax({
            url: '@Url.Action("CopyEstimate", "Vehicles")',
            type: 'POST',
            contentType: "application/json",
            data: JSON.stringify(payload),
            success: function (response) {
                if (response.success) {
                    kendo.alert("Estimate copied successfully! New ID: " + response.newVehicleListId);
                    $("#VehicleGrid").data("kendoGrid").dataSource.read();
                    win.close();
                } else {
                    kendo.alert("Copy failed: " + response.message);
                }
            }
        });
    });

    $("#cancelCopyBtn").off("click").on("click", function () {
        win.close();
    });
};

// ── Archive handler
window.onArchiveClick = function(e) {
    e.preventDefault();
    var grid = $("#VehicleGrid").data("kendoGrid");
    var item = grid.dataItem($(e.currentTarget).closest("tr"));

    kendo.confirm("Archive estimate #" + item.VehicleListId + "?").then(function () {
        $.ajax({
            url: '@Url.Action("ArchiveVehicleDetails", "Vehicles")',
            type: 'POST',
            contentType: "application/json",
            data: JSON.stringify({
                VehicleListId: item.VehicleListId,
                VehSeriesCode: item.VehSeriesCode,
                TypeId: "BUS",
                Username: "@ViewBag.UserName".toUpperCase()
            }),
            success: function (r) {
                if (r.success) {
                    grid.dataSource.read();
                    kendo.alert(r.message);
                } else {
                    kendo.alert("Archive failed: " + r.message);
                }
            }
        });
    });
};

// ── Delete handler
window.showDeleteConfirmation = function(e) {
    e.preventDefault();
    var grid = $("#VehicleGrid").data("kendoGrid");
    var item = grid.dataItem($(e.currentTarget).closest("tr"));
    var dlg = $("#deleteConfirmationDialog").kendoWindow({
        title: "Confirm Delete",
        modal: true,
        width: 400,
        visible: false,
        resizable: false
    }).data("kendoWindow");

    dlg.center().open();

    $("#confirmDeleteBtn").off("click").on("click", function () {
        $.post('@Url.Action("DeleteVehicle", "Vehicles")', { VehicleListId: item.VehicleListId }, function () {
            grid.dataSource.read();
            dlg.close();
        });
    });

    $("#cancelDeleteBtn").off("click").on("click", function () {
        dlg.close();
    });
};
         
// ── Load partial tabs
window.loadTabContent = function (index, id) {
    var urls = [
        "", // Vehicle (handled separately)
        '@Url.Action("ScDetailsPartial", "Vehicles")', // StockCoded Parts
        '@Url.Action("NscDetailsPartial", "Vehicles")', // NonStock Parts
        '@Url.Action("RbDetailsPartial", "Vehicles")', // Rebuilt Parts
        '@Url.Action("LabourDetailsPartial", "Vehicles")', // Labour Details
        '@Url.Action("LabourHourSummaryPartial", "Vehicles")', // Labour Estimate
        '@Url.Action("MaterialCostSummaryPartial", "Vehicles")', // Material Estimate
        '@Url.Action("TotalCostPartial", "Vehicles")' // Total Cost
    ];

    // Special handling for Vehicle tab
    if (index === 0) {
        loadVehicleForm(id);
        return;
    }

    var paneId = [
        "", // Vehicle
        "stockCodedPartsTabContent", // StockCoded Parts
        "nonStockPartsTabContent", // NonStock Parts
        "rebuiltPartsTabContent", // Rebuilt Parts
        "labourDetailsContent", // Labour Details
        "labourEstimateContent", // Labour Estimate
        "materialEstimateContent", // Material Estimate
        "totalCostContent" // Total Cost
    ][index];

    var pane = $("#" + paneId);
    pane.html("<div class='k-loading-mask'><span class='k-loading-text'>Loading…</span></div>");

    if (urls[index]) {
        $.get(urls[index], { id: id }, function(data) {
            pane.html(data);
            window.tabContentLoaded[index] = true;

            // Enable the tab after loading
            var tabStrip = $("#estimateTabs").data("kendoTabStrip");
            tabStrip.enable(tabStrip.tabGroup.children().eq(index), true);
        });
    }
};

window.onComboBoxChange = function(e) {
    var combo = e.sender;
    if (combo.selectedIndex === -1) {
        combo.value(null);
        combo.input.val("");
        combo.trigger("change");
        // Optional: Show error message
        $("#validationMessage").text("Invalid selection!").css("color", "red");
    } else {
        $("#validationMessage").text("");
    }
};

//-- getComboBoxParams
window.getComboBoxParams = function() {
    var input = $(".k-combobox input.k-input:focus");
    return {
        columnName: input.attr("name")?.replace("_input", "").split('.').pop(),
        searchText: input.val() || ""
    };
};

//-- onComboBoxDataBound
window.onComboBoxDataBound = function(e) {
    // Check if no data is available after filtering
    var notification = $("#notification").data("kendoNotification");

    if (e.sender.dataSource.total() === 0) {
        e.sender.value(null); // Clear the input
        e.sender.input.val(""); // Clear the text
        setTimeout(function () {
            notification.show("Invalid Selection! Please choose from the list.", "error");
        }, 100);
    }
};

// ── Tab selection handler
window.onTabSelect = function (e) {
    // Get the tab index using jQuery
    var tabStrip = $("#estimateTabs").data("kendoTabStrip");
    var idx = $(e.item).index();

    // Prevent infinite recursion
    if (window.currentlyLoadingTab === idx) return;
    window.currentlyLoadingTab = idx;

    if (pendingChanges && idx > 0) {
        e.preventDefault();
        window.currentlyLoadingTab = null;
        return kendo.alert("Please save or cancel before switching tabs.");
    }

    if (!window.tabContentLoaded[idx] && window.currentVehicleId > 0) {
        loadTabContent(idx, window.currentVehicleId);
    }

    window.currentlyLoadingTab = null;
};

// ── Open vehicle popup and load form partial
window.openEstimatePopup = function(vehicleId) {
    // Initialize loading tracker
    window.currentlyLoadingTab = null;
    
    var win = $("#estimatePopup").data("kendoWindow") || 
        $("#estimatePopup").kendoWindow({
            modal: true,
            width: 1150,
            height: 600,
            title: vehicleId === 0 ? "Add New Estimate" : "Estimate #" + vehicleId,
            visible: false,
            actions: ["Close"],
            deactivate: function() {
                if (pendingChanges && !confirm("Unsaved changes. Close anyway?")) return false;
            }
        }).data("kendoWindow");

    win.title(vehicleId === 0 ? "Add New Estimate" : "Vehicle Estimate #" + vehicleId);
    win.center().open();
    loadVehicleForm(vehicleId);

    pendingChanges = false;
    currentVehicleId = vehicleId;
    window.tabContentLoaded = [false, false, false, false, false, false, false, false];
    
    // Disable all non-vehicle tabs initially
    if (vehicleId === 0) {
        var tabStrip = $("#estimateTabs").data("kendoTabStrip");
        for (var i = 1; i <= 7; i++) {
            tabStrip.enable(tabStrip.tabGroup.children().eq(i), false);
        }
    }
};

// ── Load the form into the first tab
window.loadVehicleForm = function (vehicleId) {
    $.get('@Url.Action("GetVehicleById", "Vehicles")', { id: vehicleId }, function (html) {
        $("#vehicleTabContent").html(html);
        window.tabContentLoaded[0] = true;
        window.wireVehicleForm(); // rebind save/cancel/edit/etc
    });
};

// ── Set form readonly state
window.setFormReadOnly = function(readOnly) {
    $("#vehicleForm :input").each(function() {
        var input = $(this);
        var widget = kendo.widgetInstance(input, kendo.ui);
        
        if (widget) {
            if (typeof widget.readonly === 'function') {
                widget.readonly(readOnly);
            } else if (widget.element && widget.element.is("input")) {
                input.prop("readonly", readOnly);
            }
        } else {
            input.prop("readonly", readOnly);
        }
    });

    $("[data-role='combobox']").each(function() {
        var combo = $(this).data("kendoComboBox");
        if (combo) {
            combo.readonly(readOnly);
        }
    });
};

// ── Wire up form submit and cancel actions inside popup
window.wireVehicleForm = function() {
    $("#btnCancelVehicle").off("click").on("click", function(){
        if (!pendingChanges || confirm("Discard changes?")) {
            $("#estimatePopup").data("kendoWindow").close();
        }
    });
    
    $("#btnSave").off("click").on("click", function(e){
        console.log('click save called');
        e.preventDefault();
        $("#vehicleForm").submit();
    });
    
    $("#vehicleForm").off("submit").on("submit", function(e) {
        console.log('submit called');
        e.preventDefault();
        
        // Helper function to safely get ComboBox values
        function getComboValue(selector) {
            const combo = $(selector).data("kendoComboBox");
            return combo ? combo.value() : $(selector).val();
        }

        var vm = {
            VehicleListId: $("#VehicleListId").val(),
            VehSeriesCode: getComboValue("#VehSeriesCode"),
            NumOfVehicles: $("#NumOfVehicles").val(),
            ProjDesc: getComboValue("#ProjDesc"),
            Make: getComboValue("#Make"),
            VehModel: getComboValue("#VehModel"),
            Year: $("#Year").val(),
            Engine: getComboValue("#Engine"),
            Transmission: getComboValue("#Transmission"),
            Differential: getComboValue("#Differential"),
            Sopnumber: $("#Sopnumber").val()
        };
    
        console.log('VehSeriesCode:', vm.VehSeriesCode);
        console.log('NumOfVehicles:', vm.NumOfVehicles);
        console.log('ProjDesc:', vm.ProjDesc);
        
        var url = window.currentVehicleId === 0
            ? '@Url.Action("AddVehiclesView","Vehicles")'
            : '@Url.Action("UpdateVehiclesView","Vehicles")';
            
        $.ajax({
            url: url,
            type: 'POST',
            contentType: "application/json",
            data: JSON.stringify(vm),
            success: function(response) {
                if (response && response.VehicleListId) {
                    // Store VehicleListId globally
                    window.currentVehicleId = response.VehicleListId;

                    // Refresh grid
                    $("#VehicleGrid").data("kendoGrid").dataSource.read();

                    // Reload form with fresh data from DB
                    loadVehicleForm(response.VehicleListId);

                    // Enable all tabs
                    var tabStrip = $("#estimateTabs").data("kendoTabStrip");
                    for (var i = 1; i <= 7; i++) {
                        tabStrip.enable(tabStrip.tabGroup.children().eq(i), true);
                    }

                    // Update window title to reflect new ID
                    var win = $("#estimatePopup").data("kendoWindow");
                    if (win) {
                        win.title("Vehicle Estimate #" + response.VehicleListId);
                    }

                    // Notify
                    kendo.alert("Saved successfully! Estimate #: " + response.VehicleListId);
                } else {
                    kendo.alert("Save succeeded but no Estimate ID was returned.");
                }

                pendingChanges = false;
            },
            error: function() {
                kendo.alert("Error saving data.");
            }
        });
    });
    
    // Initialize readonly state (true for existing records)
    var isReadOnly = window.currentVehicleId !== 0;
    setFormReadOnly(isReadOnly);

    // Handle Edit button click
    $("#btnEdit").off("click").on("click", function() {
        setFormReadOnly(false);
        pendingChanges = true;
    });
    
    // Track form changes
    $("#vehicleForm input, #vehicleForm select").off("change input").on("input change", function(){
        if (!$(this).is("[data-role=combobox] input")) {
            pendingChanges = true;
        }
    });
};
</script>

<script>
    function onLabourGridDataBound(e) {
    }
    
    function onGridEdit(e) {
        // Re-apply styles after edit
        const grid = e.sender;
        grid.one("dataBound", () => grid.refresh());
    }
    
    function onGridCellSave(e) {
    }
    
    function onLabourRequestEnd(e) {
    }
    
    function onDataSourceError(e) {
    }
</script>
}

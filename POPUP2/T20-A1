Example:

html
Copy
Edit
<script>
function onCopyEstimate(e) {   // No need for window. if declared globally
    e.preventDefault();
    var grid = $("#VehicleGrid").data("kendoGrid");
    var item = grid.dataItem($(e.currentTarget).closest("tr"));
    console.log("Copy clicked for", item);
    // ... rest of your code
}

function onArchiveClick(e) {
    e.preventDefault();
    var grid = $("#VehicleGrid").data("kendoGrid");
    var item = grid.dataItem($(e.currentTarget).closest("tr"));
    console.log("Archive clicked for", item);
    // ... rest of your code
}

function showDeleteConfirmation(e) {
    e.preventDefault();
    var grid = $("#VehicleGrid").data("kendoGrid");
    var item = grid.dataItem($(e.currentTarget).closest("tr"));
    console.log("Delete clicked for", item);
    // ... rest of your code
}
</script>
3️⃣ If grid is loaded via AJAX, rebind handlers on dataBound
If the VehicleGrid refreshes, custom click handlers can get lost. In that case:

csharp
Copy
Edit
.DataSource(ds => ds.Ajax()
    .Read(r => r.Action("GetVehiclesView","Vehicles"))
)
.Events(ev => ev.DataBound("attachGridHandlers"))
Then in JS:

javascript
Copy
Edit
function attachGridHandlers() {
    $("#VehicleGrid .k-grid-Copy").off("click").on("click", onCopyEstimate);
    $("#VehicleGrid .k-grid-Archive").off("click").on("click", onArchiveClick);
    $("#VehicleGrid .k-grid-Delete").off("click").on("click", showDeleteConfirmation);
}

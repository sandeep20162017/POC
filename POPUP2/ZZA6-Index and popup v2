implementations for all requirements:

html
@using BCES.Models.Vehicle
@model IEnumerable<VehicleViewModel>

@{
    ViewData["Title"] = "Vehicle Estimate";
    var gridName = "VehicleGrid";
}

<style>
    .k-grid {
        border-radius: 4px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
    
    .k-grid-header th {
        background-color: #f8f9fa;
        font-weight: 600;
        color: #495057;
    }
    
    .k-grid-content {
        overflow-y: auto;
        max-height: 65vh;
    }
    
    .k-tabstrip-items .k-item {
        padding: 10px 20px;
        border-bottom: 3px solid transparent;
        transition: all 0.3s ease;
    }
    
    .k-tabstrip-items .k-item.k-state-active {
        border-bottom-color: #3f51b5;
        color: #3f51b5;
    }
    
    .estimate-link {
        color: #3f51b5;
        cursor: pointer;
        font-weight: 500;
        text-decoration: none;
    }
    
    .estimate-link:hover {
        text-decoration: underline;
    }
    
    .k-window-titlebar {
        background-color: #3f51b5;
        color: white;
        font-weight: 500;
    }
    
    .k-window-content {
        padding: 0;
    }
    
    .required-header::after {
        content: " *";
        color: #e32;
    }
    
    .archived-row {
        background-color: #f8f8f8;
        color: #777;
    }
    
    .disabled-tab {
        opacity: 0.5;
        pointer-events: none;
    }
    
    .k-button {
        border-radius: 4px;
        font-weight: 500;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        font-size: 0.875rem;
    }
    
    .k-button.k-primary {
        background-color: #3f51b5;
        border-color: #3f51b5;
    }
    
    .form-row {
        display: flex;
        flex-wrap: wrap;
        margin-bottom: 15px;
    }
    
    .form-group {
        margin-bottom: 15px;
        padding: 0 10px;
    }
    
    .k-edit-form-container label {
        font-weight: 500;
        margin-bottom: 5px;
        display: block;
    }
    
    .popup-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
        padding-bottom: 10px;
        border-bottom: 1px solid #eee;
    }
    
    .tab-actions {
        display: flex;
        gap: 10px;
    }
</style>

<h6>Vehicle Estimate</h6>

@(Html.Kendo().TabStrip()
    .Name("mainTabStrip")
    .Items(tabstrip =>
    {
        tabstrip.Add().Text("Vehicles")
            .Selected(true)
            .Content(@<text>
                @(Html.Kendo().Grid<VehicleViewModel>()
                    .Name(gridName)
                    .Columns(columns =>
                    {
                        columns.Bound(c => c.VehicleListId).Title("Estimate #")
                            .ClientTemplate("<a class='estimate-link' onclick='openEstimatePopup(#= VehicleListId #)'>#= VehicleListId #</a>")
                            .Width(120);
                            
                        columns.Bound(c => c.VehSeriesCode).Title("Vehicle Series")
                            .HeaderHtmlAttributes(new { @class = "required-header" })
                            .EditorTemplateName("ComboBoxEditor")
                            .Width(150);
                            
                        columns.Bound(c => c.NumOfVehicles).Title("Qty")
                            .HeaderHtmlAttributes(new { @class = "required-header" })
                            .Width(80);
                            
                        columns.Bound(c => c.ProjDesc).Title("Description")
                            .HeaderHtmlAttributes(new { @class = "required-header" })
                            .Width(250);
                            
                        columns.Command(command =>
                        {
                            command.Custom("Copy").Text(" ").IconClass("k-icon k-i-copy").Click("onCopyEstimate");
                            command.Custom("Archive").Text(" ").IconClass("k-icon k-i-folder").Click("onArchiveClick");
                            command.Custom("Delete").Text(" ").IconClass("k-icon k-i-delete").Click("showDeleteConfirmation");
                        }).Width(180);
                    })
                    .ToolBar(toolbar => 
                        toolbar.ClientTemplate("<button class='k-button k-button-icontext' onclick='openEstimatePopup(0)'><span class='k-icon k-i-plus'></span>Add New Record</button>")
                    )
                    .Pageable(p => p.PageSizes(new int[] { 10, 20, 50 }))
                    .Sortable()
                    .Filterable()
                    .Scrollable()
                    .HtmlAttributes(new { style = "height:550px;" })
                    .DataSource(dataSource => dataSource
                        .Ajax()
                        .PageSize(10)
                        .Model(model => model.Id(p => p.VehicleListId))
                        .Read(read => read.Action("GetVehiclesView", "Vehicles"))
                    )
                )
            </text>);
            
        tabstrip.Add().Text("Archived")
            .Content(@<text>
                @Html.Partial("_ArchivedVehicleIndex")
            </text>);
    })
)

<!-- Popup Window for Estimate Details -->
<div id="estimatePopup" style="display:none;">
    @(Html.Kendo().TabStrip()
        .Name("estimateTabs")
        .SelectedIndex(0)
        .Animation(animation => animation.Open(open => open.Fade(FadeDirection.In)))
        .Items(tabs =>
        {
            tabs.Add().Text("Vehicle").Content(@<text>
                <div id="vehicleTabContent"></div>
            </text>);
            
            tabs.Add().Text("Labour Details").Content("Loading...").Enabled(false);
            tabs.Add().Text("Labour Hours").Content("Loading...").Enabled(false);
            tabs.Add().Text("Material Parts").Content("Loading...").Enabled(false);
            tabs.Add().Text("StockCoded Parts").Content("Loading...").Enabled(false);
            tabs.Add().Text("NonStock Parts").Content("Loading...").Enabled(false);
            tabs.Add().Text("Total Estimate").Content("Loading...").Enabled(false);
        })
        .Events(events => events.Select("onTabSelect"))
    )
</div>

<!-- Delete Confirmation Dialog -->
<div id="deleteConfirmationDialog" style="display:none;">
    <div class="confirmation-message" style="padding: 20px;">
        <span class="k-icon k-i-warning" style="color: #f0ad4e; font-size: 24px; vertical-align: middle;"></span>
        <span style="vertical-align: middle; margin-left: 10px;">Are you sure you want to delete this estimate?</span>
    </div>
    <div class="confirmation-buttons" style="padding: 10px; text-align: right; border-top: 1px solid #ddd;">
        <button class="k-button" id="cancelDeleteBtn">Cancel</button>
        <button class="k-button k-primary" id="confirmDeleteBtn" style="margin-left: 10px;">Delete</button>
    </div>
</div>

@section Scripts {
<script>
    // Global variables
    var popupWindow, isNewEstimate = false, pendingChanges = false;
    var currentVehicleId = 0;
    var tabContentLoaded = [false, false, false, false, false, false, false];

    // Open estimate popup
    function openEstimatePopup(vehicleId) {
        isNewEstimate = vehicleId === 0;
        currentVehicleId = vehicleId;
        pendingChanges = false;
        
        // Initialize popup window
        if (!popupWindow) {
            popupWindow = $("#estimatePopup").kendoWindow({
                title: isNewEstimate ? "Add New Estimate" : "Estimate #" + vehicleId,
                width: 1000,
                height: 650,
                modal: true,
                visible: false,
                actions: ["Close"],
                deactivate: function() {
                    if (pendingChanges) {
                        if (!confirm("You have unsaved changes. Close anyway?")) {
                            return false;
                        }
                    }
                    return true;
                }
            }).data("kendoWindow");
        } else {
            popupWindow.title(isNewEstimate ? "Add New Estimate" : "Estimate #" + vehicleId);
        }
        
        // Reset tabs and load states
        var tabStrip = $("#estimateTabs").data("kendoTabStrip");
        tabStrip.select(0);
        
        // Enable/disable tabs
        tabStrip.enable(tabStrip.items().eq(0), true); // Always enable Vehicle tab
        for (var i = 1; i < tabStrip.items().length; i++) {
            tabStrip.enable(tabStrip.items().eq(i), !isNewEstimate);
            tabContentLoaded[i] = false; // Reset loaded status
        }
        
        // Load Vehicle tab content
        loadVehicleTab(vehicleId);
        
        popupWindow.center().open();
    }

    // Load vehicle tab content
    function loadVehicleTab(vehicleId) {
        $.get('@Url.Action("_VehPopUp", "Vehicles")', { id: vehicleId }, function(data) {
            $("#vehicleTabContent").html(data);
            tabContentLoaded[0] = true;
        });
    }

    // Tab selection handler
    function onTabSelect(e) {
        var tabIndex = e.item.index();
        
        if (pendingChanges && tabIndex > 0) {
            e.preventDefault();
            kendo.alert("You have unsaved changes. Please save or cancel before switching tabs.");
            return;
        }
        
        // Load tab content if not already loaded
        if (!tabContentLoaded[tabIndex] && currentVehicleId > 0) {
            loadTabContent(tabIndex, currentVehicleId);
        }
    }
    
    // Load specific tab content
    function loadTabContent(tabIndex, vehicleId) {
        var url = "";
        var tabContentId = "#estimateTabs-" + tabIndex;
        
        switch(tabIndex) {
            case 1: url = '@Url.Action("LabourDetails", "Vehicles")'; break;
            case 2: url = '@Url.Action("LabourHours", "Vehicles")'; break;
            case 3: url = '@Url.Action("MaterialParts", "Vehicles")'; break;
            case 4: url = '@Url.Action("StockCodedParts", "Vehicles")'; break;
            case 5: url = '@Url.Action("NonStockParts", "Vehicles")'; break;
            case 6: url = '@Url.Action("TotalEstimate", "Vehicles")'; break;
        }
        
        if (url) {
            $(tabContentId).html("<div class='k-loading-mask'><span class='k-loading-text'>Loading...</span><div class='k-loading-image'></div></div>");
            
            $.get(url, { id: vehicleId }, function(data) {
                $(tabContentId).html(data);
                tabContentLoaded[tabIndex] = true;
            });
        }
    }
    
    // Vehicle saved handler
    function onVehicleSaved(response) {
        if (response.success) {
            pendingChanges = false;
            isNewEstimate = false;
            
            // Update vehicle ID if new
            if (response.newVehicleId) {
                currentVehicleId = response.newVehicleId;
                popupWindow.title("Estimate #" + currentVehicleId);
            }
            
            // Enable all tabs
            var tabStrip = $("#estimateTabs").data("kendoTabStrip");
            for (var i = 1; i < tabStrip.items().length; i++) {
                tabStrip.enable(tabStrip.items().eq(i), true);
            }
            
            // Refresh main grid
            $("#VehicleGrid").data("kendoGrid").dataSource.read();
            
            kendo.alert("Vehicle saved successfully!");
        } else {
            kendo.alert("Save failed: " + (response.message || "Unknown error"));
        }
    }

    // Edit button handler (called from within popup)
    function onEditClick() {
        // Enable form fields
        $(".k-edit-form-container :input").each(function() {
            if ($(this).hasClass("k-textbox")) {
                $(this).prop("readonly", false);
            } else if ($(this).hasClass("k-combobox")) {
                $(this).data("kendoComboBox").enable(true);
            } else if ($(this).hasClass("k-numerictextbox")) {
                $(this).data("kendoNumericTextBox").enable(true);
            }
        });
        
        pendingChanges = true;
    }

    // Save button handler (called from within popup)
    function onSaveClick() {
        // Collect form data
        var formData = {
            VehicleListId: $("#VehicleListId").val(),
            VehSeriesCode: $("#VehSeriesCode").val(),
            NumOfVehicles: $("#NumOfVehicles").val(),
            ProjDesc: $("#ProjDesc").val(),
            Make: $("#Make").val(),
            VehModel: $("#VehModel").val(),
            Year: $("#Year").val(),
            Engine: $("#Engine").val(),
            Transmission: $("#Transmission").val(),
            Differential: $("#Differential").val(),
            Sopnumber: $("#Sopnumber").val()
        };
        
        // Validate required fields
        if (!formData.VehSeriesCode || !formData.NumOfVehicles || !formData.ProjDesc) {
            kendo.alert("Please fill all required fields");
            return;
        }
        
        $.ajax({
            url: '@Url.Action("SaveVehicle", "Vehicles")',
            type: 'POST',
            contentType: "application/json",
            data: JSON.stringify(formData),
            success: function(response) {
                onVehicleSaved(response);
            },
            error: function(xhr) {
                kendo.alert("Error saving vehicle: " + xhr.statusText);
            }
        });
    }
    
    // Copy estimate
    function onCopyEstimate(e) {
        e.preventDefault();
        var grid = $("#VehicleGrid").data("kendoGrid");
        var dataItem = grid.dataItem($(e.currentTarget).closest("tr"));
        
        kendo.prompt("Enter new description:", dataItem.ProjDesc + " - Copy").then(function(description) {
            if (description) {
                $.post('@Url.Action("CopyEstimate", "Vehicles")', {
                    sourceId: dataItem.VehicleListId,
                    description: description
                }, function(response) {
                    if (response.success) {
                        grid.dataSource.read();
                        kendo.alert("Estimate copied successfully! New ID: " + response.newId);
                    } else {
                        kendo.alert("Copy failed: " + response.message);
                    }
                });
            }
        });
    }
    
    // Archive estimate
    function onArchiveClick(e) {
        e.preventDefault();
        var grid = $("#VehicleGrid").data("kendoGrid");
        var dataItem = grid.dataItem($(e.currentTarget).closest("tr"));
        
        kendo.confirm("Archive estimate #" + dataItem.VehicleListId + "?").then(function() {
            $.post('@Url.Action("ArchiveVehicle", "Vehicles")', {
                id: dataItem.VehicleListId
            }, function(response) {
                if (response.success) {
                    grid.dataSource.read();
                    kendo.alert("Estimate archived successfully!");
                } else {
                    kendo.alert("Archive failed: " + response.message);
                }
            });
        });
    }
    
    // Delete confirmation
    function showDeleteConfirmation(e) {
        e.preventDefault();
        var grid = $("#VehicleGrid").data("kendoGrid");
        var dataItem = grid.dataItem($(e.currentTarget).closest("tr"));
        var dialog = $("#deleteConfirmationDialog").data("kendoWindow");
        
        dialog.open();
        
        // Handle delete confirmation
        $("#confirmDeleteBtn").off("click").on("click", function() {
            $.post('@Url.Action("DeleteVehicle", "Vehicles")', {
                id: dataItem.VehicleListId
            }, function() {
                grid.dataSource.read();
                dialog.close();
            });
        });
        
        // Handle cancel
        $("#cancelDeleteBtn").off("click").on("click", function() {
            dialog.close();
        });
    }
    
    // Initialize on document ready
    $(function() {
        // Initialize delete dialog
        $("#deleteConfirmationDialog").kendoWindow({
            title: "Confirm Delete",
            modal: true,
            visible: false,
            width: 400,
            resizable: false
        }).data("kendoWindow");
    });
</script>
}
Key Features:
Modern Telerik Grid:

Clean, professional styling

Responsive design

Built-in filtering, sorting, and paging

Custom command buttons (Copy, Archive, Delete)

Tabbed Popup Interface:

Vehicle tab loaded via AJAX (_VehPopUp.cshtml)

Lazy loading for other tabs (only when accessed)

Tab enable/disable logic based on new/existing estimates

Vehicle Popup Form:

Uses Telerik ComboBox for dropdowns

Proper readonly/editable states

Edit/Save button functionality

Validation for required fields

Business Functionality:

Copy estimate with description prompt

Archive with confirmation

Delete with confirmation dialog

Pending changes detection

UI Enhancements:

Consistent styling with Kendo Theme

Visual feedback for disabled tabs

Loading indicators

Proper form layout and spacing

Required Partial Views:
_VehPopUp.cshtml (Updated with proper readonly attributes):

html
@model BCES.Models.Vehicle.VehicleViewModel

<div class="k-edit-form-container" style="padding:20px;">
    <div class="popup-header">
        <h3>Vehicle Details</h3>
        <div class="tab-actions">
            <button class="k-button" onclick="onEditClick()">
                <span class="k-icon k-i-edit"></span> Edit
            </button>
            <button class="k-button k-primary" onclick="onSaveClick()">
                <span class="k-icon k-i-save"></span> Save
            </button>
        </div>
    </div>

    <form id="vehicleDetailForm">
        @Html.HiddenFor(m => m.VehicleListId)
        
        <div class="form-row">
            <div class="form-group col-md-3">
                @Html.LabelFor(m => m.VehSeriesCode, "Vehicle Series*")
                @(Html.Kendo().ComboBoxFor(m => m.VehSeriesCode)
                    .DataTextField("Text")
                    .DataValueField("Value")
                    .Filter(FilterType.Contains)
                    .Placeholder("Select series...")
                    .HtmlAttributes(new { 
                        @class = "form-control", 
                        required = "required", 
                        @readonly = "readonly" 
                    })
                    .DataSource(source => source
                        .Read(read => read.Action("GetVehicleSeries", "Data"))
                    )
            </div>
            
            <div class="form-group col-md-2">
                @Html.LabelFor(m => m.NumOfVehicles, "Quantity*")
                @(Html.Kendo().NumericTextBoxFor(m => m.NumOfVehicles)
                    .Format("0")
                    .Min(1)
                    .HtmlAttributes(new { 
                        required = "required", 
                        @readonly = "readonly" 
                    })
                )
            </div>
            
            <div class="form-group col-md-4">
                @Html.LabelFor(m => m.ProjDesc, "Description*")
                @(Html.Kendo().TextBoxFor(m => m.ProjDesc)
                    .HtmlAttributes(new { 
                        required = "required", 
                        @readonly = "readonly" 
                    })
            </div>
        </div>
        
        <div class="form-row">
            <div class="form-group col-md-3">
                @Html.LabelFor(m => m.Make)
                @(Html.Kendo().TextBoxFor(m => m.Make)
                    .HtmlAttributes(new { @readonly = "readonly" })
            </div>
            
            <div class="form-group col-md-3">
                @Html.LabelFor(m => m.VehModel, "Model")
                @(Html.Kendo().TextBoxFor(m => m.VehModel)
                    .HtmlAttributes(new { @readonly = "readonly" })
            </div>
            
            <div class="form-group col-md-2">
                @Html.LabelFor(m => m.Year)
                @(Html.Kendo().NumericTextBoxFor(m => m.Year)
                    .Format("0")
                    .Min(1900)
                    .Max(DateTime.Now.Year + 1)
                    .HtmlAttributes(new { @readonly = "readonly" })
                )
            </div>
        </div>
        
        <div class="form-row">
            <div class="form-group col-md-3">
                @Html.LabelFor(m => m.Engine)
                @(Html.Kendo().TextBoxFor(m => m.Engine)
                    .HtmlAttributes(new { @readonly = "readonly" })
            </div>
            
            <div class="form-group col-md-3">
                @Html.LabelFor(m => m.Transmission)
                @(Html.Kendo().TextBoxFor(m => m.Transmission)
                    .HtmlAttributes(new { @readonly = "readonly" })
            </div>
            
            <div class="form-group col-md-3">
                @Html.LabelFor(m => m.Differential)
                @(Html.Kendo().TextBoxFor(m => m.Differential)
                    .HtmlAttributes(new { @readonly = "readonly" })
            </div>
        </div>
        
        <div class="form-row">
            <div class="form-group col-md-3">
                @Html.LabelFor(m => m.Sopnumber, "SOP Number")
                @(Html.Kendo().TextBoxFor(m => m.Sopnumber)
                    .HtmlAttributes(new { @readonly = "readonly" })
            </div>
            
            <div class="form-group col-md-3">
                @Html.LabelFor(m => m.ModifiedLastBy, "Last Modified By")
                @(Html.Kendo().TextBoxFor(m => m.ModifiedLastBy)
                    .HtmlAttributes(new { @readonly = "readonly" })
            </div>
            
            <div class="form-group col-md-3">
                @Html.LabelFor(m => m.ModifiedLastDate, "Last Modified Date")
                @(Html.Kendo().TextBoxFor(m => m.ModifiedLastDate)
                    .HtmlAttributes(new { @readonly = "readonly" })
            </div>
        </div>
    </form>
</div>
Controller Actions Needed:

csharp
public ActionResult _VehPopUp(int id)
{
    var model = id == 0 
        ? new VehicleViewModel() 
        : _vehicleService.GetVehicle(id);
        
    return PartialView(model);
}

public ActionResult LabourDetails(int id)
{
    // Return labour details partial view
}

// Similar actions for other tabs:
// LabourHours, MaterialParts, StockCodedParts, NonStockParts, TotalEstimate

[HttpPost]
public JsonResult SaveVehicle(VehicleViewModel model)
{
    try
    {
        var newId = _vehicleService.SaveVehicle(model);
        return Json(new { success = true, newVehicleId = newId });
    }
    catch (Exception ex)
    {
        return Json(new { success = false, message = ex.Message });
    }
}

[HttpPost]
public JsonResult CopyEstimate(int sourceId, string description)
{
    // Copy logic
}

[HttpPost]
public JsonResult ArchiveVehicle(int id)
{
    // Archive logic
}

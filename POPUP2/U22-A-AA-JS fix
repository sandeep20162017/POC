        $(document).on("click", ".copy-estimate", window.onCopyEstimate);
        $(document).on("click", ".archive-estimate", window.onArchiveClick);
        $(document).on("click", ".delete-estimate", window.showDeleteConfirmation);
   });
 This should solve the timing issue.
 Let me write the updated index.cshtml with these changes.
 Note: We are also changing the function for delete from `showDeleteConfirmation` to `window.showDeleteConfirmation` and we are using the same function.
 I'll update the code accordingly.
Based on the provided code, I've identified the main issues causing the JavaScript runtime errors and implemented the following fixes:

Event Delegation for Grid Actions:

The main issue was that grid action buttons weren't properly bound to event handlers

Implemented event delegation to handle dynamically generated buttons

DOM Ready Handler:

Added missing document ready handler to initialize event bindings

Ensures functions are properly bound after grid rendering

Scope Issues:

Fixed incorrect this context references in event handlers

Added proper grid data retrieval methods

Here are the specific fixes:

html
<script>
// ── ADDED: Document ready handler to initialize event bindings ──
$(document).ready(function() {
    // Event delegation for grid actions
    $(document).on("click", ".copy-estimate", window.onCopyEstimate);
    $(document).on("click", ".archive-estimate", window.onArchiveClick);
    $(document).on("click", ".delete-estimate", window.showDeleteConfirmation);
});

// ── MODIFIED: Updated copy estimate function ──
window.onCopyEstimate = function(e) {
    e.preventDefault();
    // Get grid and data item properly
    var grid = $("#VehicleGrid").data("kendoGrid");
    var row = $(e.currentTarget).closest("tr");
    var item = grid.dataItem(row);
    
    // Rest of existing code remains the same...
};

// ── MODIFIED: Updated archive function ──
window.onArchiveClick = function(e) {
    e.preventDefault();
    // Get grid and data item properly
    var grid = $("#VehicleGrid").data("kendoGrid");
    var row = $(e.currentTarget).closest("tr");
    var item = grid.dataItem(row);
    
    // Rest of existing code remains the same...
};

// ── MODIFIED: Updated delete confirmation function ──
window.showDeleteConfirmation = function(e) {
    e.preventDefault();
    // Get grid and data item properly
    var grid = $("#VehicleGrid").data("kendoGrid");
    var row = $(e.currentTarget).closest("tr");
    var item = grid.dataItem(row);
    
    // Rest of existing code remains the same...
};

// ── EXISTING CODE BELOW (no changes needed) ──
window.pendingChanges = false;
window.currentVehicleId = 0;
// ... rest of your existing JavaScript ...
</script>
Key changes in the Grid configuration (update your Razor grid code):

csharp
@(Html.Kendo().Grid<VehicleViewModel>()
  .Name("VehicleGrid")
  .Columns(c => {
      c.Bound(v => v.VehicleListId).Title("Estimate #")
        .ClientTemplate("<a class='estimate-link' onclick='window.openEstimatePopup(#=VehicleListId#)'>#=VehicleListId#</a>").Width(120);
      // ... other columns ...
      
      // MODIFIED: Added CSS classes to action buttons
      c.Command(cmd => {
          cmd.Custom("Copy")
             .IconClass("k-icon k-i-copy")
             .HtmlAttributes(new {@class = "copy-estimate"}); // Added class
          
          cmd.Custom("Archive")
             .IconClass("k-icon k-i-folder")
             .HtmlAttributes(new {@class = "archive-estimate"}); // Added class
          
          cmd.Custom("Delete")
             .IconClass("k-icon k-i-delete")
             .HtmlAttributes(new {@class = "delete-estimate"}); // Added class
      }).Width(180);
  })
  // ... rest of grid configuration ...
)
Explanation of fixes:

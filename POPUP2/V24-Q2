You are ASP.NET core, Telerik Kendoo ASP.NET core, UI/UX and Javascript expert.
1. Want to load _ScPartsUsed.cshtml in AJAX way like Vehicle.
2. Where to populate   List<StockCodedPartsViewModel>, do it like we are fetching vehicle data (Both vehicle and StockCodedParts controller action as below)

Model :

public class VehicleViewModel
 {
     public VehicleViewModel() {
         StockCodedParts = new List<StockCodedPartsViewModel>();
     }
<div id="stockCodedPartsTabContent">
 //TO DO like AJAX way like Vehicle tab
    </div>
</text>).Enabled(false);
Index.cshtml 
JS : 
<!-- Popup tabs for vehicle details -->
<div id="estimatePopup" style="display:none;">
    @(Html.Kendo().TabStrip()
        .Name("estimateTabs")
        .SelectedIndex(0)
        .Events(e => e.Select("onTabSelect"))
        .Items(tb =>
        {
            tb.Add().Text("Vehicle").Content(@<text>
        <div id="vehicleTabContent">
           <!-- load dynamically by AJAX-->
        </div>
    </text>);

            tb.Add().Text("Labour Details").Content("<div id='estimateTabs-1'></div>").Enabled(false);
            tb.Add().Text("Labour Hours").Content("<div id='estimateTabs-2'></div>").Enabled(false);
            tb.Add().Text("Material Parts").Content("<div id='estimateTabs-3'></div>").Enabled(false);

             tb.Add().Text("StockCoded Parts").Content(@<text>
             <div id="stockCodedPartsTabContent">
             @Html.Partial("_ScPartsUsed", <TODO Fillin>)
                 </div>
             </text>).Enabled(false);

            tb.Add().Text("NonStock Parts").Content("<div id='estimateTabs-5'></div>").Enabled(false);
            tb.Add().Text("Total Estimate").Content("<div id='estimateTabs-6'></div>").Enabled(false);
        })
        )
</div>
_ScPartsUsed.cshtml :
@model IEnumerable<BCES.Models.Parts.StockCodedPartsViewModel>

@{
    ViewData["Title"] = "Stock Coded Parts Details";
    var scGridName = $"ScPartsGrid_{ViewBag.PartNum}";
}

<h6>Stock Coded Parts Used</h6>

<div class="form-container">
    <table id="@scGridName" class="k-grid k-widget" style="width:100%; margin-bottom:12px;">
        <thead class="k-grid-header">
            <tr>
                <th>Stock Code</th>
                <th>Part Type</th>
                <th>Supplier Num</th>
                <th>Supplier Name</th>
                <th>Unit Cost</th>
                <th>Qty</th>
                <th>Total Cost</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var part in Model)
            {
                <tr data-id="@part.MMSStockCode">
                    <td><a href="javascript:void(0)" class="scLink">@part.MMSStockCode</a></td>
                    <td>@part.PartType</td>
                    <td>@part.OrigSupplierNum</td>
                    <td>@part.OrigSupplierName</td>
                    <td>@part.UnitCost</td>
                    <td>@part.Qty</td>
                    <td>@part.TotalCost</td>
                    <td><button class="k-button scDeleteBtn">Delete</button></td>
                </tr>
            }
        </tbody>
    </table>

    <button id="scAddNew" class="k-button k-primary" style="margin-bottom:8px;">
        <span class="k-icon k-i-plus"></span> Add New Stock Coded Part
    </button>

    <form id="scDetailForm" style="display:none;">
        <div class="section-title">Part Details</div>
        <!-- Row 1 -->
        <div class="form-row">
            <div class="form-group">
                <label class="form-label">StockCode</label>
                <input id="scStockCode" class="stock-field" readonly style="width:100%; height:28px;" />
            </div>
            <div class="form-group">
                <label class="form-label">PartType</label>
                <input id="scPartType" readonly class="read-only" style="width:100%; height:28px;" />
            </div>
            <div class="form-group">
                <label class="form-label">Supplier Num</label>
                <input id="scSupplierNum" readonly class="read-only" style="width:100%; height:28px;" />
            </div>
        </div>
        <!-- Row 2 -->
        <div class="form-row">
            <div class="form-group">
                <label class="form-label">Supplier Name</label>
                <input id="scSupplierName" readonly class="read-only" style="width:100%; height:28px;" />
            </div>
            <div class="form-group">
                <label class="form-label">Part Description</label>
                <input id="scPartDesc" readonly class="read-only" style="width:100%; height:28px;" />
            </div>
            <div class="form-group">
                <label class="form-label">Part Unit Cost</label>
                <input id="scUnitCost" readonly class="read-only" style="width:100%; height:28px;" />
            </div>
        </div>
        <!-- Row 3 -->
        <div class="form-row">
            <div class="form-group">
                <label class="form-label">Core Cost</label>
                <input id="scCoreCost" readonly class="read-only" style="width:100%; height:28px;" />
            </div>
            <div class="form-group">
                <label class="form-label">Cost Centre</label>
                <input id="scCostCentre" class="stock-field" style="width:100%; height:28px;" />
            </div>
        </div>
        <!-- Row 4 -->
        <div class="form-row">
            <div class="form-group">
                <label class="form-label">Qty</label>
                <input id="scQty" class="stock-field" style="width:100%; height:28px;" />
            </div>
            <div class="form-group">
                <label class="form-label">Percentage</label>
                <input id="scPerc" class="stock-field" style="width:100%; height:28px;" />
            </div>
            <div class="form-group">
                <label class="form-label">Total Cost</label>
                <input id="scTotCost" readonly class="read-only" style="width:100%; height:28px;" />
            </div>
        </div>
        <!-- Row 5 -->
        <div class="form-row">
            <div class="form-group">
                <label class="form-label">Last Modified By</label>
                <input id="scModBy" readonly class="read-only" style="width:100%; height:28px;" />
            </div>
            <div class="form-group">
                <label class="form-label">Last Modified Date</label>
                <input id="scModDate" readonly class="read-only" style="width:100%; height:28px;" />
            </div>
        </div>
        <div style="margin-top:8px;">
            <button id="scUpdateBtn" type="button" class="k-button k-primary">Update</button>
            <button id="scCancelBtn" type="button" class="k-button">Cancel</button>
        </div>
    </form>
</div>

<style>
    /* Reuse VehPopUp styles */
    .form-container { background:white; padding:12px; border-radius:4px; box-shadow:0 1px 4px rgba(0,0,0,0.05); }
    .section-title { font-size:12px; color:#2c3e50; margin-bottom:6px; padding-bottom:4px; border-bottom:1px solid #3498db; display:flex; align-items:center; gap:5px;}
    .form-row { display:flex; gap:8px; margin-bottom:6px; align-items:flex-start;}
    .form-group { display:flex; flex-direction:column; flex:1;}
    .form-label { font-size:11px; color:#2c3e50; font-weight:600; margin-bottom:3px;}
    .stock-field, .read-only { border:1px solid #d1d5db; border-radius:3px; padding:4px 8px; min-height:28px; font-size:12px; }
    .read-only { background:#f8fafc !important; color:#4b5563 !important; cursor:not-allowed!important; }
    h6 { font-size:13px; color:#2c3e50; margin-bottom:8px; border-bottom:1px solid #3498db; padding-bottom:4px;}
    .k-button { padding:4px 6px; font-size:12px; height:28px; border-radius:3px;}
    .k-button.k-primary { background:#3f51b5; color:white; border-color:#3f51b5;}
</style>

<script>
    $(function(){
      // ensure only one detail expanded
      $("#@scGridName").on("click", "a.scLink", function(){
        var row = $(this).closest("tr");
        var id = row.data("id");
        $(".scLink").not(this).prop("disabled",true);
        loadPartDetails(id);
      });

      $("#scAddNew").click(function(){
        clearDetailForm();
        showDetailForm();
        alert("Add new clicked");
      });

      $("#scCancelBtn").click(function(){ $("#scDetailForm").hide(); $(".scLink").prop("disabled",false); });

      $("#scUpdateBtn").click(function(){
        alert("Update clicked");
        // hook into your controller UpdateScPartsUsedInEstimates
      });

      $("#scQty, #scPerc").on("change", function(){
        var qty = parseInt($("#scQty").val()) || 0;
        var unit = parseFloat($("#scUnitCost").val()) || 0;
        var perc = parseInt($("#scPerc").val()) || 0;
        var tot = qty * unit * (1 + perc/100);
        $("#scTotCost").val(Math.round(tot));
      });
    });

    function loadPartDetails(stockCode) {
      // stub load: you can roundtrip AJAX to get full details via your existing controller
      // For now just show form populated with the row's data
      var r = $("tr[data-id='"+stockCode+"']");
      $("#scStockCode").val(stockCode);
      $("#scPartType").val(r.find("td:nth-child(2)").text());
      $("#scSupplierNum").val(r.find("td:nth-child(3)").text());
      $("#scSupplierName").val(r.find("td:nth-child(4)").text());
      $("#scUnitCost").val(r.find("td:nth-child(5)").text());
      $("#scQty").val(r.find("td:nth-child(6)").text());
      $("#scTotCost").val(r.find("td:nth-child(7)").text());
      $("#scCoreCost").val("0");
      $("#scCostCentre").val("");
      $("#scPartDesc").val("");
      $("#scModBy").val("");
      $("#scModDate").val("");
      showDetailForm();
    }

    function clearDetailForm(){
      $("#scDetailForm input").val("");
    }

    function showDetailForm(){
      $("#scDetailForm").show();
    }
</script>
Controller :
using Dapper;
using Microsoft.AspNetCore.Mvc;
using Dapper;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Threading.Tasks;
using Telerik.DataSource;
using Telerik.DataSource.Extensions;
using BCES.Models.Admin;
using Kendo.Mvc.UI;
using Kendo.Mvc.Extensions;
using DataSourceRequest = Kendo.Mvc.UI.DataSourceRequest;
using BCES.Data;
using Telerik.SvgIcons;
using Microsoft.AspNetCore.Http;
using Microsoft.EntityFrameworkCore.Metadata.Conventions;
using BCES.Controllers.Base;
using BCES.Models.Parts;
using  BCES.Models.Vehicle;
using BCES.Models.Common;
using BCES.Models.Parts;
using System.Data;
using OfficeOpenXml;
using System.IO;
using MailKit.Net.Smtp;
using MimeKit;
using MailKit.Security;



using Newtonsoft.Json.Linq;
using static System.Net.Mime.MediaTypeNames;
using Azure.Core;
using BCES.Controllers.Admin;
using System.Net.Mail;
using Multipart = MimeKit.Multipart;
using SmtpClient = MailKit.Net.Smtp.SmtpClient;
using System.Data.SqlClient;
using Microsoft.AspNetCore.Authorization;
using System.Text.Encodings.Web;
using static Microsoft.EntityFrameworkCore.DbLoggerCategory;
using System.Reflection;
using CommandType = System.Data.CommandType;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.VisualStudio.Web.CodeGenerators.Mvc.Templates.Blazor;

//using System.Net.Mime;
//using CES.Views.Shared;
namespace BCES.Controllers.Parts
{
    // [Route("api/[controller]")]
    public class VehiclesController : BaseController
    {
        private readonly DapperContext _db;
        private readonly IDbConnection _dbConnection;
        private readonly IHttpContextAccessor _httpContextAccessor;
        private readonly IServiceProvider _serviceProvider;
        private readonly BusesController _busesController;
        private readonly LabourDetailsController _labourDetailsController;
        private static List<string> _selectedBuses = new List<string>();


        public VehiclesController(DapperContext dapper, IHttpContextAccessor httpContextAccessor,
                                      IServiceProvider serviceProvider, BusesController busesController,
                                      LabourDetailsController labourDetailsController
                                    ) : base(dapper, httpContextAccessor)
        {
            _db = dapper;
            _dbConnection = _db.CreateConnection();
            _httpContextAccessor = httpContextAccessor;
            _serviceProvider = serviceProvider;
            _busesController = busesController;
            _labourDetailsController = labourDetailsController;
        }

        [HttpGet("VehiclesIndex")]
        [AllowAnonymous]
        public IActionResult VehiclesIndex()
        {
            // return View();
            //GetRebuiltPartsData();
            return View("~/Views/Vehicles/Index.cshtml");
        }

        [AllowAnonymous]
        public IActionResult ArchivedIndex()
        {
            // return View();
            return View("~/Views/Vehicles/ArchivedIndex.cshtml");
        }

        [HttpGet]
        [AllowAnonymous]
        public async Task<JsonResult> GetVehiclesView([DataSourceRequest] DataSourceRequest request)
        {
            try
            {
                var model = await GetVehiclesData();
                return Json(model.ToDataSourceResult(request));
            }
            catch (Exception ex)
            {
                return Json(new { error = ex.Message });
            }
        }

        [HttpGet]
        [AllowAnonymous]
        public async Task<JsonResult> GetArchivedVehiclesView([DataSourceRequest] DataSourceRequest request)
        {
            // Fetch data for the grid 
            try
            {
                var model = await GetArchivedVehiclesData();

                return Json(model.ToDataSourceResult(request));
            }
            catch (Exception ex)
            {
                return Json(ex);
            }
        }

        public ActionResult GetVehicleById(int id, bool readOnly = false)
        {
           
            var vehicle = id == 0
                ? new VehicleViewModel() // Add mode
                : _dbConnection.QueryFirstOrDefault<VehicleViewModel>(@"
            SELECT  [VehicleListId]
                                              ,[VehSeriesCode]
                                              ,[NumOfVehicles]
                                              ,[ProjDesc]
                                              ,[DateEntered]
                                              ,[EnteredBy]
                                              ,[ModifiedLastBy]
                                              ,[ModifiedLastDate]
                                              ,[Make]
                                              ,[Model]
                                              ,[Year]
                                              ,[Engine]
                                              ,[Transmission]
                                              ,[Differential]
                                              ,[Sopnumber]
                                          FROM [CES].[SBCES].[VehicleList] WHERE VehicleListId = @Id", new { Id = id });

            if (vehicle == null)
                return Content("Vehicle not found");

            ViewBag.ReadOnly = readOnly;
            ViewBag.FormattedDate = vehicle.ModifiedLastDate == default
                ? "System Generated"
                : vehicle.ModifiedLastDate.ToString("MMM dd, yyyy hh:mm:ss tt");

            return PartialView("_VehPopUp", vehicle);
        }
        [AllowAnonymous]
        private async Task<IEnumerable<VehicleViewModel>> GetVehiclesData()
        {
            try
            {
                var vehiclesQuery = @"
                                         SELECT  [VehicleListId]
                                              ,[VehSeriesCode]
                                              ,[NumOfVehicles]
                                              ,[ProjDesc]
                                              ,[DateEntered]
                                              ,[EnteredBy]
                                              ,[ModifiedLastBy]
                                              ,[ModifiedLastDate]
                                              ,[Make]
                                              ,[Model]
                                              ,[Year]
                                              ,[Engine]
                                              ,[Transmission]
                                              ,[Differential]
                                              ,[Sopnumber]
                                          FROM [CES].[SBCES].[VehicleList]
                                         
                                          ORDER BY VehicleListId DESC   
                                                                    ";


                var vehicles = _dbConnection.Query<VehicleViewModel>(vehiclesQuery).ToList();


                return vehicles.Distinct().ToList();

            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error fetching vehicles data: {ex.Message}");
                return Enumerable.Empty<VehicleViewModel>();
            }
        }



        [HttpPost]
        public async Task<IActionResult> UpdateVehiclesView([FromBody] VehicleViewModel vehicleViewModel)
        {
            if (vehicleViewModel == null)
                return BadRequest("Model binding failed.");

            try
            {
                await UpdateVehiclesAsync(vehicleViewModel);

                var updated = await GetVehicleJsonByIdAsync(vehicleViewModel.VehicleListId);

                return Ok(updated);
            }
            catch (Exception ex)
            {
                return StatusCode(500, "Update failed: " + ex.Message);
            }
        }

        [AllowAnonymous]
        private async Task UpdateVehiclesAsync(VehicleViewModel vehicleViewModel)
        {
            var userName = ViewBag.UserName;
            _dbConnection.Open();
            using (var transaction = _dbConnection.BeginTransaction())
            {
                try
                {
                    // Update the [VehicleListId] table
                    var updateVehiclelistQuery = @"
                                                    UPDATE SBCES.[VehicleList]
                                                    SET 
                                                        Sopnumber = @Sopnumber,
                                                        ProjDesc =@ProjDesc,
                                                        Differential = @Differential,
                                                        Engine = @Engine,
                                                        NumOfVehicles = @NumOfVehicles,
                                                        
                                                        Make = @Make,
                                                        Model = @VehModel,
                                                        Transmission = @Transmission,
                                                        VehSeriesCode = @VehSeriesCode,
                                                        Year = @Year,
                                                        

                                                        ModifiedLastBy = @LastModifiedBy,
                                                        ModifiedLastDate = @ModifiedLastDate
                    
                                                    WHERE VehicleListId = @VehicleListId;
                                                ";

                    await _dbConnection.ExecuteAsync(updateVehiclelistQuery, new
                    {
                        vehicleViewModel.Sopnumber,
                        vehicleViewModel.ProjDesc,
                        vehicleViewModel.Differential,
                        vehicleViewModel.Engine,
                        vehicleViewModel.NumOfVehicles,


                        vehicleViewModel.Make,
                        vehicleViewModel.VehModel,
                        vehicleViewModel.Transmission,
                        vehicleViewModel.VehSeriesCode,
                        vehicleViewModel.Year,

                        LastModifiedBy = userName,
                        ModifiedLastDate = DateTime.Now,
                        vehicleViewModel.VehicleListId

                    }, transaction);


                    // Commit the transaction
                    transaction.Commit();

                }
                catch (Exception ex)
                {
                    // Rollback the transaction in case of an error
                    transaction.Rollback();
                    Console.WriteLine($"Error updating vehicle estimate: {ex.Message}");
                    throw; // Re-throw the exception to propagate it
                }
            }
        }


        [HttpPost]
        [AllowAnonymous]
        public async Task<IActionResult> DeleteVehicle(string VehicleListId)
        {

            try
            {
                if (string.IsNullOrEmpty(VehicleListId))
                {
                    return BadRequest("Invalid data.");
                }

                var deletePartSql = "DELETE FROM SBCES.[VehicleList] WHERE VehicleListId = '" + VehicleListId + "'";

                await _dbConnection.ExecuteAsync(deletePartSql, new { VehicleListId });

                //Delete Labour
                string deleteLabourQuery = @"
                    DELETE FROM SBCES.EmployeeLabour 
                    WHERE LINKNUMBER = '" + VehicleListId + "' AND TypeId = 'BUS'";

                await _dbConnection.ExecuteAsync(deleteLabourQuery, new { VehicleListId });

                //Delete SC Parts
                string deleteScPartsQuery = @"DELETE FROM SBCES.SCPartsUsed
                                            WHERE
                                                LINKTYPE = 'BUS'
                                                AND RebuiltPart = 'N'
                                                AND LinkCode = '" + VehicleListId + "'";
                await _dbConnection.ExecuteAsync(deleteScPartsQuery, new { VehicleListId });

                //Delete NSC Parts
                string deleteNscPartsQuery = @"
                              DELETE FROM SBCES.NSCPartsUsed 
                              WHERE  LINKTYPE = 'BUS'                                                
                             AND LinkCode = '" + VehicleListId + "'";
                await _dbConnection.ExecuteAsync(deleteNscPartsQuery, new { VehicleListId });

                //Delete SC Parts
                string deleteRbPartsQuery = @"DELETE FROM SBCES.SCPartsUsed
                                            WHERE
                                                LINKTYPE = 'BUS'
                                                AND RebuiltPart = 'Y'
                                                AND LinkCode = '" + VehicleListId + "'";
                await _dbConnection.ExecuteAsync(deleteRbPartsQuery, new { VehicleListId });


                return Json(new { success = true });
                //return RedirectToAction("VehiclesIndex");
            }
            catch (Exception ex)
            {
                return Json(new { success = false, message = $"Internal server error: {ex.Message}" });
            }
        }


        [AllowAnonymous]
        private async Task<IEnumerable<VehicleViewModel>> GetArchivedVehiclesData()
        {
            try
            {
                // Base query for rebuilt parts data
                var vehQuery = @"            
                                        SELECT         
                                               [OldId] 
                                               ,[ArchVehicleListId] 
                                              
                                              ,[VehSeriesCode]
                                              ,[NumOfVehicles]
                                              ,[ProjDesc]
                                              ,[DateEntered]
                                              ,[EnteredBy]
                                              ,[Make]
                                              ,[Model]
                                              ,[Year]
                                              ,[Engine]
                                              ,[Transmission]
                                              ,[Differential]
                                              ,[LabourCost]
                                              ,[LabourOverheadAmount]
                                              ,[LabourTotal]
                                              ,[MaterialsTotal]
                                              ,[TotalBusEstimateCost]
                                              ,[TotalTax]
                                              ,[TotalCostTax]
                                              ,[OemKitsTotal]
                                              ,[Sopnumber]
                                              
                                          FROM [CES].[SBCES].[ArchVehicleList]
                                           order by OldId desc
                                            ";

                var vehArchived = (await _dbConnection.QueryAsync<VehicleViewModel>(vehQuery)).ToList();


                return vehArchived;
            }
            catch (Exception ex)
            {
                // Handle errors gracefully
                return null;
            }
        }

        [HttpPost]
        public async Task<IActionResult> AddVehiclesView([FromBody] VehicleViewModel vehicleViewModel)
        {
            if (vehicleViewModel == null)
                return BadRequest("Model binding failed.");

            try
            {
                var newId = await AddVehicleAsync(vehicleViewModel);

                // Re-fetch full model from DB
                var updated = await GetVehicleJsonByIdAsync(newId);

                return Ok(updated);
            }
            catch (Exception ex)
            {
                return StatusCode(500, "Add failed: " + ex.Message);
            }
        }


        private async Task<VehicleViewModel> GetVehicleJsonByIdAsync(int id)
        {
            var model = new List<BCES.Models.Parts.StockCodedPartsViewModel> { };
            return await _dbConnection.QueryFirstOrDefaultAsync<VehicleViewModel>(
           @"
            SELECT 
                VehicleListId,                
                VehSeriesCode,
                NumOfVehicles,
                ProjDesc,
                DateEntered,
                EnteredBy,
                ModifiedLastBy,
                ModifiedLastDate,
                Make,
                Model AS VehModel,
                Year,
                Engine,
                Transmission,
                Differential,
                Sopnumber                
            FROM SBCES.VehicleList
            WHERE VehicleListId = @id", new { id });
          }

        private async Task<int> AddVehicleAsync([FromBody] VehicleViewModel vehicleViewModel)
        {
            var userName = ViewBag.UserName;
            var maxVehicleListId =
                        _dbConnection.QueryFirstOrDefault<int>(@"SELECT MAX(VehicleListId) + 1  FROM SBCES.VehicleList");

            _dbConnection.Open();
            using (var transaction = _dbConnection.BeginTransaction())
            {
                try
                {
                    // Insert into the main RbMasterlist table
                    var insertVehlistQuery = @"
                                                        INSERT INTO SBCES.VehicleList ( VehicleListId,NumOfVehicles,
                                                            Sopnumber, ProjDesc, Differential, Engine, 
                                                             Make, Model, VehSeriesCode, Year, Transmission,  EnteredBy,
                                                            DateEntered, ModifiedLastBy, ModifiedLastDate
                                                        )
                                                        VALUES (
                                                            @VehicleListId,@NumOfVehicles, @Sopnumber, @ProjDesc, @Differential, @Engine, 
                                                             @Make, @VehModel, @VehSeriesCode, @Year, @Transmission, @EnteredBy,
                                                            @DateEntered, @ModifiedLastBy, @ModifiedLastDate
                                                        );
                                                        
                                                    ";

                    await _dbConnection.ExecuteAsync(insertVehlistQuery, new
                    {
                        VehicleListId = maxVehicleListId,
                        vehicleViewModel.NumOfVehicles,
                        vehicleViewModel.Sopnumber,
                        vehicleViewModel.ProjDesc,
                        vehicleViewModel.Differential,
                        vehicleViewModel.Engine,

                        vehicleViewModel.Make,
                        vehicleViewModel.VehModel,
                        vehicleViewModel.Transmission,
                        vehicleViewModel.VehSeriesCode,
                        vehicleViewModel.Year,


                        EnteredBy = userName,
                        DateEntered = DateTime.Now,
                        ModifiedLastBy = userName,
                        ModifiedLastDate = DateTime.Now

                    }, transaction);



                    // Commit the transaction
                    transaction.Commit();

                    return maxVehicleListId;

                }
                catch (Exception ex)
                {
                    // Rollback the transaction in case of an error
                    // transaction.Rollback();
                    Console.WriteLine($"Error creating Vehicle data: {ex.Message}");
                    throw; // Re-throw the exception to propagate it
                }
            }

        }


        [AllowAnonymous]
        public IActionResult LabourDetailsPartial([FromQuery] string id, [FromQuery] string gridType)
        {
            //set 
            ViewBag.PartNum = id;
            if (gridType == null)
            {
                ViewBag.GridType = "VehicleGrid";
            }
            else
            {
                ViewBag.GridType = gridType;

            }
            var model = new List<LabourDetailsRebuiltPartsViewModel> { };
            return PartialView("_LabourDetails", model);
        }
        [AllowAnonymous]
        public IActionResult ScPartsUsedInEstimates(string id, string gridType)
        {
            ViewBag.PartNum = id;
            if (gridType == null)
            {
                ViewBag.GridType = "VehicleGrid";
            }
            else
            {
                ViewBag.GridType = gridType;

            }

            var model = new List<BCES.Models.Parts.StockCodedPartsViewModel> { };

            return PartialView("_ScPartsUsed", model);

        }

        [AllowAnonymous]
        public IActionResult LabourHourSummaryPartial(string id, string gridType)
        {
            // Pass the PartNum to the partial view
            ViewBag.PartNum = id;
            if (gridType == null)
            {
                ViewBag.GridType = "VehicleGrid";
            }
            else
            {
                ViewBag.GridType = gridType;

            }
            var model = new List<BCES.Models.Parts.LabourDetailsRebuiltPartsViewModel> { };
            return PartialView("_LabourHourSummary", model);
        }

        [AllowAnonymous]
        public IActionResult MaterialCostSummaryPartial(string id, string gridType)
        {
            // Pass the PartNum to the partial view
            ViewBag.PartNum = id;
            if (gridType == null)
            {
                ViewBag.GridType = "VehicleGrid";
            }
            else
            {
                ViewBag.GridType = gridType;

            }
            var model = new List<BCES.Models.Parts.MaterialCostSummaryInRbViewModel> { };
            return PartialView("_MaterialCostSummary", model);
        }
        [AllowAnonymous]
        public IActionResult NscDetailsPartial(string id, string gridType)
        {
            // Pass the rebuiltPartNum to the partial view
            ViewBag.PartNum = id;
            if (gridType == null)
            {
                ViewBag.GridType = "VehicleGrid";
            }
            else
            {
                ViewBag.GridType = gridType;

            }
            var model = new List<BCES.Models.Parts.NscPartsUsedViewModel> { };

            return PartialView("_NscPartsUsed", model);

        }
        [AllowAnonymous]
        public IActionResult RbDetailsPartial(string id, string gridType)
        {
            // Pass the rebuiltPartNum to the partial view
            ViewBag.PartNum = id;
            if (gridType == null)
            {
                ViewBag.GridType = "VehicleGrid";
            }
            else
            {
                ViewBag.GridType = gridType;

            }
            var model = new List<BCES.Models.Parts.RebuiltPartsViewModel> { };
            return PartialView("_RbPartsUsed", model);
        }

        [AllowAnonymous]
        public IActionResult TotalCostPartial(string id, string gridType)
        {
            ViewBag.PartNum = id;
            if (gridType == null)
            {
                ViewBag.GridType = "VehicleGrid";
            }
            else
            {
                ViewBag.GridType = gridType;

            }
            var model = new List<BCES.Models.Parts.TotalCostInEstimates> { };
            return PartialView("_TotalCost", model);
        }

        [HttpPost]
        [AllowAnonymous]
        public IActionResult SaveDetails()
        {
            // Save logic here
            return Json(new { success = true, message = "Saved Details successfully." });
        }


        [HttpPost]
        [AllowAnonymous]
        public IActionResult CancelDetails(int vehicleListId)
        {
            try
            {
                // Return a success response
                return Json(new { success = true, message = "Changes discarded successfully." });
            }
            catch (Exception ex)
            {

                return Json(new { success = false, message = "An error occurred while discarding changes. Please try again." });
            }
        }


        [HttpPost]
        [AllowAnonymous]
        public async Task<IActionResult> ArchiveVehicleDetails([FromBody] ArchiveVehicleRequestModel payload)
        {
            try
            {
                var parameters = new DynamicParameters();
                parameters.Add("@VehicleListId", payload.VehicleListId);
                parameters.Add("@ReturnValue", dbType: DbType.Int32, direction: ParameterDirection.ReturnValue);

                await _dbConnection.ExecuteAsync(
                    "[SBCES].[ArchiveVehicleV1]",
                    parameters,
                    commandType: CommandType.StoredProcedure
                );

                var retVal = parameters.Get<int>("@ReturnValue");

                return Json(new
                {
                    success = retVal == 0,
                    message = retVal == 0
                        ? $"Archived Vehicle List Id: {payload.VehicleListId}"
                        : $"Archive failed with return value: {retVal}"
                });
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    success = false,
                    message = $"Archive failed: {ex.Message}"
                });
            }
        }

        [HttpPost]
        [AllowAnonymous]
        public async Task<IActionResult> SendEmail(string to, string subject, string body, string rebuiltPartNum)
        {
            try
            {
                // Resolve the ExportController from the service provider
                var exportController = _serviceProvider.GetRequiredService<ExportController>();

                // Generate the Excel file in memory by calling SaveToExcel
                var memoryStream = await exportController.SaveToExcel(rebuiltPartNum);


                // Send the email with the attached Excel file
                var message = new MimeMessage();
                message.From.Add(new MailboxAddress("Sandeep Kanao", "sandeep.kanao@ttc.ca"));
                message.To.Add(new MailboxAddress("Sandeep.Kanao@ttc.ca", to));
                message.Subject = subject;
                message.Body = new TextPart("plain") { Text = body };

                var attachment = new MimePart("application", "vnd.openxmlformats-officedocument.spreadsheetml.sheet")
                {
                    Content = new MimeContent((Stream)memoryStream),
                    ContentDisposition = new ContentDisposition(ContentDisposition.Attachment),
                    ContentTransferEncoding = ContentEncoding.Base64,
                    FileName = $"{rebuiltPartNum}_Vehicle_Estimate.xlsx"
                };

                var multipart = new Multipart("mixed");
                multipart.Add(message.Body);
                multipart.Add(attachment);
                message.Body = multipart;

                using (var client = new SmtpClient())
                {
                    await client.ConnectAsync("smtp.freesmtpservers.com", 25, SecureSocketOptions.StartTls);
                    // await client.AuthenticateAsync("sandeep.kanao@gmail.com", "Perf4you@");
                    await client.SendAsync(message);
                    await client.DisconnectAsync(true);
                }

                return Json(new { success = true });
            }
            catch (Exception ex)
            {
                // Log the exception 
                Console.WriteLine($"Error sending email: {ex.Message}");

                return Json(new { success = false, message = ex.Message });
            }
        }

        [AllowAnonymous]
        public IActionResult DownloadExcel(string filePath)
        {
            var fileBytes = System.IO.File.ReadAllBytes(filePath);
            return File(fileBytes, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", Path.GetFileName(filePath));
        }


        [HttpPost]
        [AllowAnonymous]
        public IActionResult CopyEstimate(
        [FromBody] CopyEstimateRequest request) // Create this DTO class
        {
            try
            {
                var parameters = new DynamicParameters();
                parameters.Add("@VehicleListId", request.vehicleListId, DbType.Int32);
                parameters.Add("@BusSeriesCode", request.newVehSeriesCode, DbType.String);
                parameters.Add("@ProjDesc", request.newprojDesc, DbType.String);
                parameters.Add("@EnteredBy", ViewBag.UserName, DbType.String);
                parameters.Add("@EstimateType", "BUS", DbType.String);
                parameters.Add("@NewVehicleListId", dbType: DbType.Int32, direction: ParameterDirection.Output);

                _dbConnection.Execute("SBCES.CopyEstimate", parameters, commandType: CommandType.StoredProcedure);

                int newVehicleListId = parameters.Get<int>("@NewVehicleListId");
                return Json(new { success = true, newVehicleListId });
            }
            catch (Exception ex)
            {
                return Json(new { success = false, message = ex.Message });
            }
        }
        public class CopyEstimateRequest
        {
            public int vehicleListId { get; set; }
            public string oldVehSeriesCode { get; set; }
            public string newVehSeriesCode { get; set; }
            public string oldprojDesc { get; set; }
            public string newprojDesc { get; set; }
        }
    }

}
ScPartsUsedInEstimateController.cs
private async Task<IEnumerable<StockCodedPartsViewModel>> GetScPartsUsedInVehicleEstimates(string id, string gridType)
{

    try
    {

        var query = @"
                     DECLARE @Id VARCHAR(30) = '" + id + "'" +
                     @"
                       
                         SELECT 
                        UPPER(SCP.MMSSTOCKCODE) AS MMSStockCode,
                        ISNULL(SCP.MMSCOST, 0) AS UnitCost,
                        ISNULL(SCP.CoreCost, 0) AS CoreCost,
                        UPPER(SCP.QTYREQD) AS Qty,
                        
                        REPLACE(SCP.PERCENTUSAGE, ',', '.') AS [Percentage],
                        REPLACE(
                            CAST(SBCES.FINALCOST(
                                CAST(SCP.PERCENTUSAGE AS NUMERIC(18,2)), 
                                CAST(SCP.QTYREQD AS NUMERIC(18,2)), 
                                SCP.CORECOST, 
                                
                                0
                            ) AS DECIMAL(18,2)), ',', '.'
                        ) AS CoreCharge,
                        REPLACE(
                            CAST(SBCES.FINALCOST(
                                CAST(SCP.PERCENTUSAGE AS NUMERIC(18,2)), 
                                CAST(SCP.QTYREQD AS NUMERIC(18,2)), 
                                SCP.MMSCOST, 
                                0
                            ) AS DECIMAL(18,2)), ',', '.'
                        ) AS TotalCost,
                        UPPER(SCP.COSTCENTRE) AS CC,
                        ISNULL(UPPER(SCPARTS.DETAILEDDESC), '') AS DetailedDesc,
                        ISNULL(UPPER(SCPARTS.PARTTYPE), '') AS PartType,
                        SCP.OEMCOST AS [OEM COST],
                        SCP.MMSREBUILTCODE AS MMSREBUILTCODE,
                        SCP.REBPARTCOST AS [RebuiltPartCost],
                        UPPER(SCP.REBUILTPART) AS REBUILTPART,
                        SCP.LinkCode,
                         UPPER(SCP.LastModifiedBy) AS LastModifiedBy,
                        SCP.LastModifiedDate AS LastModifiedDate,
                        SCPARTS.OrigSupplierNum,
                        SCPARTS.OrigSupplierName
                    FROM 
                        SBCES.SCPARTSUSED SCP
                    LEFT JOIN 
                        SBCES.STOCKCODEDPARTS SCPARTS 
                        ON SCPARTS.MMSSTOCKCODE = SCP.MMSSTOCKCODE
                    WHERE 
                        SCP.LINKCODE = @Id 
                        AND SCP.LINKTYPE = 'BUS'
                        AND SCP.MMSSTOCKCODE is NOT NULL
                        AND SCP.RebuiltPart ='N'
                    ORDER BY 
                        SCP.MMSSTOCKCODE;

                        ";

        return await _dbConnection.QueryAsync<StockCodedPartsViewModel>(query);

    }
    catch (Exception ex)
    {
        return null;
    }
}

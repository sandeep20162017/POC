You are ASP.NET core, Telerik ASP.NET core and UI/UX expert.
System.NullReferenceException: 'Object reference not set to an instance of an object.'
when clicked on Vehicle Estimate tab
I suspect Model is null. Question is why it is null.
    .Items(tb =>
    {
        tb.Add().Text("Vehicle").Content(@<text>
    <div id="vehicleTabContent">
        @Html.Partial("_VehPopUp", Model)
    </div>
</text>);

Index.cshtml
@using BCES.Models.Vehicle
@using BCES.Models.Parts
@model IEnumerable<VehicleViewModel>

@{
    ViewData["Title"] = "Vehicle Estimate";
   // var selectedVehicle = Model.FirstOrDefault();
}

<h6>Vehicle Estimate</h6>

@section Scripts {
<script>
// ── Global state for tab and form tracking
window.pendingChanges = false;
window.currentVehicleId = 0;
window.tabContentLoaded = [false, false, false, false, false, false, false];

// ── Load partial tabs
window.loadTabContent = function(index, id) {
    var urls = [
        "",
        '@Url.Action("LabourDetailsPartial","Vehicles")',
        '@Url.Action("LabourHourSummaryPartial","Vehicles")',
        '@Url.Action("MaterialCostSummaryPartial","Vehicles")',
        '@Url.Action("ScPartsUsedInEstimates","Vehicles")',
        '@Url.Action("NscDetailsPartial","Vehicles")',
        '@Url.Action("TotalCostPartial","Vehicles")'
    ];
    var pane = $("#estimateTabs-" + index);
    pane.html("<div class='k-loading-mask'><span class='k-loading-text'>Loading…</span></div>");
    if (urls[index]) {
        $.get(urls[index], { id: id }, data => {
            pane.html(data);
            window.tabContentLoaded[index] = true;
            
            // Enable the tab after loading
            var tabStrip = $("#estimateTabs").data("kendoTabStrip");
            tabStrip.enable(tabStrip.tabGroup.children().eq(index), true);
        });
    }
};
window.onComboBoxChange = function(e) {
            var combo = e.sender;
            if (combo.selectedIndex === -1) {
                combo.value(null);
                combo.input.val("");
                combo.trigger("change");
                // Optional: Show error message
                $("#validationMessage").text("Invalid selection!").css("color", "red");
            } else {
                $("#validationMessage").text("");
            }
        }

    //-- getComboBoxParams
    window.getComboBoxParams = function() {
            var input = $(".k-combobox input.k-input:focus");
            return {
                columnName: input.attr("name")?.replace("_input", "").split('.').pop(),
                searchText: input.val() || ""
            };
        }

//-- onComboBoxDataBound
    window.onComboBoxDataBound = function(e) {
            // Check if no data is available after filtering
            var notification = $("#notification").data("kendoNotification");

            if (e.sender.dataSource.total() === 0) {
                e.sender.value(null); // Clear the input
                e.sender.input.val(""); // Clear the text
                setTimeout(function () {
                    notification.show("Invalid Selection! Please choose from the list.", "error");
                    //alert("Invalid Selection! Please choose from the list.");
                }, 100);
            }
        }

// ── Tab selection handler
window.onTabSelect = function(e) {
    //var idx = e.item.index();
    var idx = $(e.item).index();
    if (pendingChanges && idx > 0) {
        e.preventDefault();
        return kendo.alert("Please save or cancel before switching tabs.");
    }
    if (!window.tabContentLoaded[idx] && window.currentVehicleId > 0) {
        loadTabContent(idx, window.currentVehicleId);
    }
};

// ── Open vehicle popup and load form partial
window.openEstimatePopup = function(vehicleId) {
    pendingChanges = false;
    currentVehicleId = vehicleId;
    window.tabContentLoaded = [false, false, false, false, false, false, false];

    var win = $("#estimatePopup").data("kendoWindow") || 
        $("#estimatePopup").kendoWindow({
            modal: true,
            width: 1150,
            height: 600,
            title: vehicleId === 0 ? "Add New Estimate" : "Estimate #" + vehicleId,
            visible: false,
            actions: ["Close"],
            deactivate: function() {
                if (pendingChanges && !confirm("Unsaved changes. Close anyway?")) return false;
            }
        }).data("kendoWindow");

    win.title(vehicleId === 0 ? "Add New Estimate" : "Vehicle Estimate #" + vehicleId);
    win.center().open();
    loadVehicleForm(vehicleId);
    
    // NEW: Disable all non-vehicle tabs initially
    if (vehicleId === 0) {
        var tabStrip = $("#estimateTabs").data("kendoTabStrip");
        for (var i = 1; i <= 6; i++) {
            tabStrip.enable(tabStrip.tabGroup.children().eq(i), false);
        }
    }
};

// ── Load the form into the first tab
window.loadVehicleForm = function(vehicleId) {
    var tabStrip = $("#estimateTabs").data("kendoTabStrip");
    tabStrip.select(0); // force focus back to Vehicle tab
    $.get('@Url.Action("GetVehicleById","Vehicles")', { id: vehicleId }, function(html) {
        $("#vehicleTabContent").html(html);
        window.tabContentLoaded[0] = true;
        window.wireVehicleForm(); // rebind save/cancel/edit/etc
    });
};

// ── Wire up form submit and cancel actions inside popup
window.wireVehicleForm = function() {
    $("#btnCancelVehicle").off("click").on("click", function(){
        if (!pendingChanges || confirm("Discard changes?")) {
            $("#estimatePopup").data("kendoWindow").close();
        }
    });
    
     $("#btnSave").off("click").on("click", function(e){
          console.log('click save called');
        e.preventDefault();
        $("#vehicleForm").submit();
    });
    $("#vehicleForm").off("submit").on("submit", function(e) {
        console.log('submit called');

        e.preventDefault();
        if (!pendingChanges) { console.log (' no pending changes...returning'); return;}
        
        // Helper function to safely get ComboBox values
        function getComboValue(selector) {
            const combo = $(selector).data("kendoComboBox");
            return combo ? combo.value() : $(selector).val();
        }

        var vm = {
            VehicleListId: $("#VehicleListId").val(),
            VehSeriesCode: getComboValue("#VehSeriesCode"),
            NumOfVehicles: $("#NumOfVehicles").val(),
            ProjDesc: getComboValue("#ProjDesc"),
            Make: getComboValue("#Make"),
            VehModel: getComboValue("#VehModel"),
            Year: $("#Year").val(),
            Engine: getComboValue("#Engine"),
            Transmission: getComboValue("#Transmission"),
            Differential: getComboValue("#Differential"),
            Sopnumber: $("#Sopnumber").val()
        };
    
        console.log('VehSeriesCode :', vm.VehSeriesCode);
        console.log('NumOfVehicles :', vm.NumOfVehicles);
        console.log('ProjDesc :', vm.ProjDesc);
        
         // Initialize readonly state (true for existing records)
        var isReadOnly = window.currentVehicleId !== 0;
        setFormReadOnly(isReadOnly);

        // Handle Edit button click
        $("#btnEdit").off("click").on("click", function() {
            setFormReadOnly(false);
            pendingChanges = true;
        });
        var url = window.currentVehicleId === 0
            ? '@Url.Action("AddVehiclesView","Vehicles")'
            : '@Url.Action("UpdateVehiclesView","Vehicles")';
            
        $.ajax({
            url: url,
            type: 'POST',
            contentType: "application/json",
            data: JSON.stringify(vm),
            success: function(response) {
                if (response && response.VehicleListId) {
                    // Store VehicleListId globally
                    window.currentVehicleId = response.VehicleListId;

                    // Refresh grid
                    $("#VehicleGrid").data("kendoGrid").dataSource.read();

                    //  Reload form with fresh data from DB
                    loadVehicleForm(response.VehicleListId);

                    // Enable all tabs
                    var tabStrip = $("#estimateTabs").data("kendoTabStrip");
                    for (var i = 1; i <= 6; i++) {
                        tabStrip.enable(tabStrip.tabGroup.children().eq(i), true);
                    }

                    // Update window title to reflect new ID
                    var win = $("#estimatePopup").data("kendoWindow");
                    if (win) {
                        win.title("Vehicle Estimate #" + response.VehicleListId);
                    }

                    // Notify
                    kendo.alert("Saved successfully! Estimate #: " + response.VehicleListId);
                } else {
                    kendo.alert("Save succeeded but no Estimate ID was returned.");
                }

                pendingChanges = false;
            },
            error: function() {
                kendo.alert("Error saving data.");
            }
        });
    });
    
    $("#vehicleForm input, #vehicleForm select").off("change input").on("input change", function(){
        pendingChanges = true;
    });

}

// ── Copy estimate handler
window.onCopyEstimate = function(e) {
    e.preventDefault();
    var grid = $("#VehicleGrid").data("kendoGrid");
    var item = grid.dataItem($(e.currentTarget).closest("tr"));
    var win = $("#copyEstimateDialog").kendoWindow({ 
        title: "Copy Estimate", 
        modal: true, 
        width: 400, 
        visible: false 
    }).data("kendoWindow");
    
    $("#vehicleListId").val(item.VehicleListId);
    $("#oldVehSeriesCode").val(item.VehSeriesCode);
    $("#oldprojDesc").val(item.ProjDesc);
    $("#newVehSeriesCode, #newprojDesc").val("");
    
    win.center().open();
    
    // Wire up copy button
    $("#copyEstimateBtn").off("click").on("click", function() {
        var payload = {
            vehicleListId: $("#vehicleListId").val(),
            oldVehSeriesCode: $("#oldVehSeriesCode").val(),
            newVehSeriesCode: $("#newVehSeriesCode").val(),
            oldprojDesc: $("#oldprojDesc").val(),
            newprojDesc: $("#newprojDesc").val()
        };
        
        if (!payload.newVehSeriesCode || !payload.newprojDesc) {
            return kendo.alert("Please fill required fields.");
        }
        
        $.ajax({
            url: '@Url.Action("CopyEstimate", "Vehicles")',
            type: 'POST',
            contentType: "application/json",
            data: JSON.stringify(payload),
            success: function(response) {
                if (response.success) {
                    kendo.alert("Estimate copied successfully! New ID: " + response.newVehicleListId);
                    $("#VehicleGrid").data("kendoGrid").dataSource.read();
                    win.close();
                } else {
                    kendo.alert("Copy failed: " + response.message);
                }
            }
        });
    });
    
    $("#cancelCopyBtn").off("click").on("click", function() {
        win.close();
    });
};

// ── Archive handler
window.onArchiveClick = function(e) {
    e.preventDefault();
    var grid = $("#VehicleGrid").data("kendoGrid");
    var item = grid.dataItem($(e.currentTarget).closest("tr"));
    
    kendo.confirm("Archive estimate #" + item.VehicleListId + "?").then(function(){
        $.ajax({
            url: '@Url.Action("ArchiveVehicleDetails","Vehicles")',
            type: 'POST',
            contentType: "application/json",
            data: JSON.stringify({ 
                VehicleListId: item.VehicleListId, 
                VehSeriesCode: item.VehSeriesCode, 
                TypeId: "BUS", 
                Username: "@ViewBag.UserName".toUpperCase() 
            }),
            success: function(r) {
                if (r.success) { 
                    grid.dataSource.read(); 
                    kendo.alert(r.message); 
                } else { 
                    kendo.alert("Archive failed: " + r.message); 
                }
            }
        });
    });
};

// ── Delete handler
window.showDeleteConfirmation = function(e) {
    e.preventDefault();
    var grid = $("#VehicleGrid").data("kendoGrid");
    var item = grid.dataItem($(e.currentTarget).closest("tr"));
    var dlg = $("#deleteConfirmationDialog").kendoWindow({ 
        title: "Confirm Delete", 
        modal: true, 
        width: 400, 
        visible: false, 
        resizable: false 
    }).data("kendoWindow");
    
    dlg.center().open();
    
    $("#confirmDeleteBtn").off("click").on("click", function(){
        $.post('@Url.Action("DeleteVehicle","Vehicles")', { VehicleListId: item.VehicleListId }, function(){
            grid.dataSource.read();
            dlg.close();
        });
    });
    
    $("#cancelDeleteBtn").off("click").on("click", function(){ 
        dlg.close(); 
    });
};

window.setFormReadOnly = function(readOnly) {
    $("#vehicleForm :input").each(function() {
        var input = $(this);
        var widget = kendo.widgetInstance(input, kendo.ui);
        
        if (widget) {
            if (typeof widget.readonly === 'function') {
                widget.readonly(readOnly);
            } else if (widget.element && widget.element.is("input")) {
                input.prop("readonly", readOnly);
            }
        } else {
            input.prop("readonly", readOnly);
        }
    });

    $("[data-role='combobox']").each(function() {
        var combo = $(this).data("kendoComboBox");
        if (combo) {
            combo.readonly(readOnly);
        }
    });
};
</script>
<script>
        function onLabourGridDataBound(e) {
        }
        function onGridEdit(e) {
            // Re-apply styles after edit
            const grid = e.sender;
            grid.one("dataBound", () => grid.refresh());
        }
        function onGridCellSave(e) {

        }
        function onLabourRequestEnd(e) {
        }
        function onDataSourceError(e) {
        }
</script>
}

<style>
/* Full CSS styles pasted exactly as in your previous file */
/* Main Grid Styles */
.k-grid { border-radius:4px; box-shadow:0 2px 4px rgba(0,0,0,0.1); font-family:'Segoe UI',Tahoma,Verdana,sans-serif; background:white; }
.k-grid-header th { background:#f8f9fa; font-weight:600; color:#495057; padding:10px 12px; }
.k-grid-content { overflow-y:auto; max-height:65vh; background:white; }
/* Tab Styles */
.k-tabstrip-items .k-item { padding:5px 15px; border-bottom:3px solid transparent; transition:all 0.3s ease; background:white; }
.k-tabstrip-items .k-item.k-state-active { border-bottom-color:#3f51b5; color:#3f51b5; background:white; }
/* Links and Buttons */
.estimate-link { color:#3f51b5; cursor:pointer; font-weight:500; text-decoration:none; }
.estimate-link:hover { text-decoration:underline; }
.k-button { border-radius:4px; font-weight:500; text-transform:uppercase; letter-spacing:0.5px; font-size:0.875rem; background:white; }
.k-button.k-primary { background:#3f51b5; border-color:#3f51b5; color:white; }
/* Window Styles */
.k-window-titlebar { background:#3f51b5; color:white; font-weight:500; }
.k-window-content { padding:0; background:white; }
/* Required Fields */
.required-header::after { content:" *"; color:#e32; }
/* Form Layout */
.form-row { display:flex; flex-wrap:wrap; margin:0 -10px; }
.form-group { padding:0 10px; margin-bottom:15px; }
.popup-header { display:flex; justify-content:space-between; align-items:center; margin-bottom:20px; padding-bottom:10px; border-bottom:1px solid #eee; background:white; }
.tab-actions { display:flex; gap:10px; }
/* Delete Confirmation */
.confirmation-message { padding:20px; display:flex; align-items:center; background:white; }
.confirmation-buttons { padding:10px; text-align:right; border-top:1px solid #ddd; background:white; }
/* Readonly Fields */
.k-textbox[readonly], .k-numerictextbox[readonly] .k-numeric-wrap, .k-combobox[readonly] .k-dropdown-wrap { background:#f8f9fa; cursor:not-allowed; }
</style>

<!-- Kendo main grid in Vehicles tab -->
@(Html.Kendo().TabStrip()
  .Name("mainTabStrip")
  .Items(ts => {
    ts.Add().Text("Vehicles").Selected(true)
      .Content(@<text>
        @(Html.Kendo().Grid<VehicleViewModel>()
          .Name("VehicleGrid")
          .Columns(c => {
              c.Bound(v => v.VehicleListId).Title("Estimate #")
               .ClientTemplate("<a class='estimate-link' onclick='window.openEstimatePopup(#=VehicleListId#)'>#=VehicleListId#</a>").Width(120);
              c.Bound(v => v.VehSeriesCode).Title("Vehicle Series").HeaderHtmlAttributes(new { @class="required-header" }).EditorTemplateName("ComboBoxEditor").Width(150);
              c.Bound(v => v.NumOfVehicles).Title("Qty").HeaderHtmlAttributes(new { @class="required-header"}).Width(80);
              c.Bound(v => v.ProjDesc).Title("Description").HeaderHtmlAttributes(new { @class="required-header"}).Width(250);
              c.Command(cmd => {
                  cmd.Custom("Copy").IconClass("k-icon k-i-copy").Click("onCopyEstimate");
                  cmd.Custom("Archive").IconClass("k-icon k-i-folder").Click("onArchiveClick");
                  cmd.Custom("Delete").IconClass("k-icon k-i-delete").Click("showDeleteConfirmation");
              }).Width(180);
          })
          .ToolBar(tb => tb.ClientTemplate("<button class='k-button k-button-icontext' onclick='window.openEstimatePopup(0)'><span class='k-icon k-i-plus'></span>Add New Record</button>"))
          .Pageable(p => p.PageSizes(new[] {10,20,50}))
          .Sortable().Filterable().Scrollable().HtmlAttributes(new { style="height:550px;" })
          .DataSource(ds => ds.Ajax()
              .PageSize(10)
              .Model(m => m.Id(v => v.VehicleListId))
              .Read(r => r.Action("GetVehiclesView","Vehicles").Type(HttpVerbs.Get))
              .Create(c => c.Action("AddVehiclesView","Vehicles").Type(HttpVerbs.Post))
              .Update(u => u.Action("UpdateVehiclesView","Vehicles").Type(HttpVerbs.Post))
              .Destroy(d => d.Action("DeleteVehicle","Vehicles").Type(HttpVerbs.Post))
          )
        )
      </text>);
  })
)

<!-- Popup tabs for vehicle details -->
<div id="estimatePopup" style="display:none;">
    @(Html.Kendo().TabStrip()
        .Name("estimateTabs")
        .SelectedIndex(0)
        .Events(e => e.Select("onTabSelect"))
        .Items(tb =>
        {
            tb.Add().Text("Vehicle").Content(@<text>
        <div id="vehicleTabContent">
            @Html.Partial("_VehPopUp", Model)
        </div>
    </text>);

            tb.Add().Text("Labour Details").Content("<div id='estimateTabs-1'></div>").Enabled(false);
            tb.Add().Text("Labour Hours").Content("<div id='estimateTabs-2'></div>").Enabled(false);
            tb.Add().Text("Material Parts").Content("<div id='estimateTabs-3'></div>").Enabled(false);

           @*  tb.Add().Text("StockCoded Parts").Content(@<text>
            <div id="stockCodedPartsTabContent">
            @Html.Partial("_ScPartsUsed", Model.FirstOrDefault().StockCodedParts)
                </div>
            </text>).Enabled(false); *@

            tb.Add().Text("NonStock Parts").Content("<div id='estimateTabs-5'></div>").Enabled(false);
            tb.Add().Text("Total Estimate").Content("<div id='estimateTabs-6'></div>").Enabled(false);
        })
        )
</div>
<!-- Delete confirmation dialog -->
<div id="deleteConfirmationDialog" style="display:none;">
  <div class="confirmation-message"><span class="k-icon k-i-warning" style="font-size:24px;color:#f0ad4e;"></span><span style="margin-left:10px;">Are you sure you'd like to delete?</span></div>
  <div class="confirmation-buttons"><button class="k-button" id="cancelDeleteBtn">Cancel</button><button class="k-button k-primary" id="confirmDeleteBtn" style="margin-left:10px;">Delete</button></div>
</div>

<!-- Copy estimate dialog -->
<div id="copyEstimateDialog" style="display:none;">
  <div class="k-form">
    <div class="k-form-field"><label>Estimate #</label><input id="vehicleListId" class="k-textbox" readonly /></div>
    <div class="k-form-field"><label>Old Series</label><input id="oldVehSeriesCode" class="k-textbox" readonly /></div>
    <div class="k-form-field"><label>Old Description</label><input id="oldprojDesc" class="k-textbox" readonly /></div>
    <div class="k-form-field"><label>New Vehicle Series<span style="color:red">*</span></label><input id="newVehSeriesCode" class="k-textbox" required /></div>
    <div class="k-form-field"><label>New Description<span style="color:red">*</span></label><input id="newprojDesc" class="k-textbox" required /></div>
    <div class="k-form-buttons">
        <button type="button" class="k-button k-primary" id="copyEstimateBtn">Copy</button>
        <button type="button" class="k-button" id="cancelCopyBtn">Cancel</button>
    </div>
  </div>
</div>
_VehPopUp.cshtml
@model BCES.Models.Vehicle.VehicleViewModel

<div class="popup-container">
    <div class="popup-header">
        <div class="popup-title">@(Model.VehicleListId == 0 ? "Add New Vehicle Estimate" : $"Estimate #{Model.VehicleListId}")</div>
        <div class="tab-actions">
            <button id="btnEdit" class="k-button" style="@(Model.VehicleListId == 0 ? "display:none;" : "")">
                <span class="k-icon k-i-edit"></span> Edit
            </button>
            <button id="btnSave" class="k-button k-primary">
                <span class="k-icon k-i-save"></span> Save
            </button>
        </div>
    </div>

    <div class="form-container">
        <form id="vehicleForm">
            @Html.HiddenFor(m => m.VehicleListId)

            <!-- Vehicle Information Section -->
            <div class="section-title">Vehicle Information</div>

            <!-- Row 1: Estimate #, Vehicle Series, Quantity -->
            <div class="form-row">
                <div class="form-group">
                    @Html.LabelFor(m => m.VehicleListId, "Estimate #", new { @class = "form-label" })
                    @(Html.Kendo().TextBoxFor(m => m.VehicleListId)
                        .Value(Model.VehicleListId == 0 ? "0" : Model.VehicleListId.ToString())
                        .HtmlAttributes(new
                        {
                            @readonly = "readonly",
                            @class = "k-textbox read-only",
                            style = "width:100%; padding: 4px 6px; height: 28px;"
                        }))
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.VehSeriesCode, "Vehicle Series", new { @class = "form-label required-label" })
                    @Html.EditorFor(m => m.VehSeriesCode, "ComboBoxEditor", new
                        {
                            htmlAttributes = new
                            {
                                required = "required",
                                @class = "vehicle-field",
                                style = "width:100%; height: 28px;"
                            }
                        })
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.NumOfVehicles, "Quantity", new { @class = "form-label required-label" })
                    @(Html.Kendo().NumericTextBoxFor(m => m.NumOfVehicles)
                        .Format("0")
                        .Min(1)
                        .HtmlAttributes(new
                        {
                            required = "required",
                            @class = "vehicle-field",
                            style = "width:100%; height: 28px;"
                        }))
                </div>
            </div>

            <!-- Row 2: Description, SOP Number -->
            <div class="form-row">
                <div class="form-group double-width">
                    @Html.LabelFor(m => m.ProjDesc, "Description", new { @class = "form-label required-label" })
                    @Html.EditorFor(m => m.ProjDesc, "ComboBoxEditor", new
                        {
                            htmlAttributes = new
                            {
                                required = "required",
                                @class = "vehicle-field",
                                style = "width:100%; height: 28px;"
                            }
                        })
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.Sopnumber, "SOP Number", new { @class = "form-label" })
                    @(Html.Kendo().TextBoxFor(m => m.Sopnumber)
                        .HtmlAttributes(new
                        {
                            @class = "vehicle-field",
                            style = "width:100%; padding: 4px 6px; height: 28px;"
                        }))
                </div>
            </div>

            <!-- Specifications Section -->
            <div class="section-title">Specifications</div>

            <!-- Row 3: Make, Model, Year -->
            <div class="form-row">
                <div class="form-group">
                    @Html.LabelFor(m => m.Make, "Make", new { @class = "form-label" })
                    @Html.EditorFor(m => m.Make, "ComboBoxEditor", new
                        {
                            htmlAttributes = new
                            {
                                @class = "vehicle-field",
                                style = "width:100%; height: 28px;"
                            }
                        })
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.VehModel, "Model", new { @class = "form-label" })
                    @Html.EditorFor(m => m.VehModel, "ComboBoxEditor", new
                        {
                            htmlAttributes = new
                            {
                                @class = "vehicle-field",
                                style = "width:100%; height: 28px;"
                            }
                        })
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.Year, "Year", new { @class = "form-label" })
                    @(Html.Kendo().NumericTextBoxFor(m => m.Year)
                        .Format("0")
                        .Min(1900)
                        .Max(DateTime.Now.Year + 1)
                        .HtmlAttributes(new
                        {
                            @class = "vehicle-field",
                            style = "width:100%; height: 28px;"
                        }))
                </div>
            </div>

            <!-- Row 4: Engine, Transmission, Differential -->
            <div class="form-row">
                <div class="form-group">
                    @Html.LabelFor(m => m.Engine, "Engine", new { @class = "form-label" })
                    @Html.EditorFor(m => m.Engine, "ComboBoxEditor", new
                        {
                            htmlAttributes = new
                            {
                                @class = "vehicle-field",
                                style = "width:100%; height: 28px;"
                            }
                        })
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.Transmission, "Transmission", new { @class = "form-label" })
                    @Html.EditorFor(m => m.Transmission, "ComboBoxEditor", new
                        {
                            htmlAttributes = new
                            {
                                @class = "vehicle-field",
                                style = "width:100%; height: 28px;"
                            }
                        })
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.Differential, "Differential", new { @class = "form-label" })
                    @Html.EditorFor(m => m.Differential, "ComboBoxEditor", new
                        {
                            htmlAttributes = new
                            {
                                @class = "vehicle-field",
                                style = "width:100%; height: 28px;"
                            }
                        })
                </div>
            </div>

            <!-- Audit Section -->
            <div class="section-title">Audit Information</div>

            <!-- Row 5: Last Modified By, Last Modified Date -->
            <div class="form-row">
                <div class="form-group">
                    @Html.LabelFor(m => m.ModifiedLastBy, "Last Modified By", new { @class = "form-label" })
                    @(Html.Kendo().TextBoxFor(m => m.ModifiedLastBy)
                        .HtmlAttributes(new
                        {
                            @readonly = "readonly",
                            @class = "k-textbox read-only",
                            style = "width:100%; padding: 4px 6px; height: 28px;"
                        }))
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.ModifiedLastDate, "Last Modified Date", new { @class = "form-label" })
                    @(Html.Kendo().TextBoxFor(m => m.ModifiedLastDate)
                        .HtmlAttributes(new
                        {
                            @readonly = "readonly",
                            @class = "k-textbox read-only",
                            style = "width:100%; padding: 4px 6px; height: 28px;"
                        }))
                </div>
            </div>
        </form>
    </div>
</div>

<style>
    /* BASE STYLES - OPTIMIZED FOR 1100x600 */
    .popup-container {
        width: 1100px;
        height: 500px;
        background: white;
        border-radius: 4px;
        box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        margin: 0 auto;
        display: flex;
        flex-direction: column;
    }

    /* HEADER - ULTRA COMPACT */
    .popup-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 6px 12px;
        background: linear-gradient(to right, #2c3e50, #4a6491);
        color: white;
        flex-shrink: 0;
        height: 32px;
    }

    .popup-title {
        font-size: 14px;
        font-weight: 600;
        letter-spacing: 0.1px;
    }

    .tab-actions {
        display: flex;
        gap: 6px;
    }

    .k-button {
        border-radius: 3px;
        font-weight: 500;
        padding: 4px 8px;
        display: flex;
        align-items: center;
        gap: 4px;
        background-color: #f0f0f0;
        border: 1px solid #ccc;
        color: #333;
        font-size: 12px;
        height: 26px;
    }

        .k-button:hover {
            transform: none;
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
        }

        .k-button.k-primary {
            background: #3f51b5;
            border-color: #3f51b5;
            color: white;
        }

    /* FORM CONTAINER - FILL SPACE WITHOUT SCROLL */
    .form-container {
        padding: 8px 15px;
        overflow: hidden;
        flex: 1;
        display: flex;
        flex-direction: column;
    }

    /* FORM ROWS - TIGHT SPACING */
    .form-row {
        display: flex;
        gap: 8px;
        margin-bottom: 6px;
        align-items: flex-start;
    }

    .form-group {
        display: flex;
        flex-direction: column;
        flex: 1;
    }

    .double-width {
        flex: 1.8;
    }

    /* FORM ELEMENTS - COMPACT & EFFICIENT */
    .form-label {
        display: block;
        margin-bottom: 3px;
        font-weight: 600;
        color: #2c3e50;
        font-size: 11px;
    }

    .required-label::after {
        content: " *";
        color: #e74c3c;
        font-size: 11px;
    }

    .k-textbox, .k-combobox, .k-numerictextbox {
        width: 100%;
    }

    .k-tabstrip-items .k-item.k-state-disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

        /* INPUT CONTROLS - MINIMAL HEIGHT */
        .k-textbox, .k-numerictextbox .k-numeric-wrap,
        .k-combobox .k-dropdown-wrap {
            border: 1px solid #d1d5db;
            border-radius: 3px;
            padding: 4px 8px;
            background: #fff;
            min-height: 28px;
            font-size: 12px;
        }

            .k-textbox:focus,
            .k-numerictextbox .k-numeric-wrap:focus-within,
            .k-combobox .k-dropdown-wrap:focus-within {
                border-color: #3498db;
                box-shadow: 0 0 0 1px rgba(52, 152, 219, 0.2);
            }

    /* READONLY FIELDS */
    .read-only, .read-only .k-dropdown-wrap,
    .read-only .k-numeric-wrap,
    .read-only .k-input {
        background-color: #f8fafc !important;
        color: #4b5563 !important;
        cursor: not-allowed !important;
    }

        .read-only .k-combobox .k-select {
            display: none !important;
        }

    /* SECTION TITLES - MINIMAL SPACE */
    .section-title {
        font-size: 12px;
        color: #2c3e50;
        margin-bottom: 6px;
        padding-bottom: 4px;
        border-bottom: 1px solid #3498db;
        display: flex;
        align-items: center;
        gap: 5px;
    }

        .section-title::before {
            content: "";
            display: block;
            width: 4px;
            height: 12px;
            background: #3498db;
            border-radius: 2px;
        }
</style>

<script>
    // Initialize form state based on mode (add vs edit)
    $(document).ready(function () {
        const isAddMode = @Model.VehicleListId === 0;

        // For existing records, make all non-audit fields readonly
        if (!isAddMode) {
            $(".vehicle-field").each(function () {
                $(this).prop("readonly", true);
            });
        }

        // Handle Edit button click
        $("#btnEdit").click(function () {
            $(".vehicle-field").prop("readonly", false);
            $(this).hide();
        });
    });

    // Set form readonly state
    function setFormReadOnly(readOnly) {
        $(".vehicle-field").each(function () {
            const input = $(this);
            const widget = kendo.widgetInstance(input, kendo.ui);

            if (widget) {
                if (typeof widget.readonly === 'function') {
                    widget.readonly(readOnly);
                } else if (widget.element && widget.element.is("input")) {
                    input.prop("readonly", readOnly);
                }
            } else {
                input.prop("readonly", readOnly);
            }

            // Toggle readonly class for styling
            input.toggleClass("read-only", readOnly);
        });

        // Special handling for comboboxes
        $("[data-role='combobox']").each(function () {
            const combo = $(this).data("kendoComboBox");
            if (combo) {
                combo.readonly(readOnly);
                combo.enable(!readOnly);
                $(combo.element).toggleClass("read-only", readOnly);
            }
        });
    }
</script>
_VehPopUp.cshtml :
@model BCES.Models.Vehicle.VehicleViewModel

<div class="popup-container">
    <div class="popup-header">
        <div class="popup-title">@(Model.VehicleListId == 0 ? "Add New Vehicle Estimate" : $"Estimate #{Model.VehicleListId}")</div>
        <div class="tab-actions">
            <button id="btnEdit" class="k-button" style="@(Model.VehicleListId == 0 ? "display:none;" : "")">
                <span class="k-icon k-i-edit"></span> Edit
            </button>
            <button id="btnSave" class="k-button k-primary">
                <span class="k-icon k-i-save"></span> Save
            </button>
        </div>
    </div>

    <div class="form-container">
        <form id="vehicleForm">
            @Html.HiddenFor(m => m.VehicleListId)

            <!-- Vehicle Information Section -->
            <div class="section-title">Vehicle Information</div>

            <!-- Row 1: Estimate #, Vehicle Series, Quantity -->
            <div class="form-row">
                <div class="form-group">
                    @Html.LabelFor(m => m.VehicleListId, "Estimate #", new { @class = "form-label" })
                    @(Html.Kendo().TextBoxFor(m => m.VehicleListId)
                        .Value(Model.VehicleListId == 0 ? "0" : Model.VehicleListId.ToString())
                        .HtmlAttributes(new
                        {
                            @readonly = "readonly",
                            @class = "k-textbox read-only",
                            style = "width:100%; padding: 4px 6px; height: 28px;"
                        }))
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.VehSeriesCode, "Vehicle Series", new { @class = "form-label required-label" })
                    @Html.EditorFor(m => m.VehSeriesCode, "ComboBoxEditor", new
                        {
                            htmlAttributes = new
                            {
                                required = "required",
                                @class = "vehicle-field",
                                style = "width:100%; height: 28px;"
                            }
                        })
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.NumOfVehicles, "Quantity", new { @class = "form-label required-label" })
                    @(Html.Kendo().NumericTextBoxFor(m => m.NumOfVehicles)
                        .Format("0")
                        .Min(1)
                        .HtmlAttributes(new
                        {
                            required = "required",
                            @class = "vehicle-field",
                            style = "width:100%; height: 28px;"
                        }))
                </div>
            </div>

            <!-- Row 2: Description, SOP Number -->
            <div class="form-row">
                <div class="form-group double-width">
                    @Html.LabelFor(m => m.ProjDesc, "Description", new { @class = "form-label required-label" })
                    @Html.EditorFor(m => m.ProjDesc, "ComboBoxEditor", new
                        {
                            htmlAttributes = new
                            {
                                required = "required",
                                @class = "vehicle-field",
                                style = "width:100%; height: 28px;"
                            }
                        })
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.Sopnumber, "SOP Number", new { @class = "form-label" })
                    @(Html.Kendo().TextBoxFor(m => m.Sopnumber)
                        .HtmlAttributes(new
                        {
                            @class = "vehicle-field",
                            style = "width:100%; padding: 4px 6px; height: 28px;"
                        }))
                </div>
            </div>

            <!-- Specifications Section -->
            <div class="section-title">Specifications</div>

            <!-- Row 3: Make, Model, Year -->
            <div class="form-row">
                <div class="form-group">
                    @Html.LabelFor(m => m.Make, "Make", new { @class = "form-label" })
                    @Html.EditorFor(m => m.Make, "ComboBoxEditor", new
                        {
                            htmlAttributes = new
                            {
                                @class = "vehicle-field",
                                style = "width:100%; height: 28px;"
                            }
                        })
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.VehModel, "Model", new { @class = "form-label" })
                    @Html.EditorFor(m => m.VehModel, "ComboBoxEditor", new
                        {
                            htmlAttributes = new
                            {
                                @class = "vehicle-field",
                                style = "width:100%; height: 28px;"
                            }
                        })
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.Year, "Year", new { @class = "form-label" })
                    @(Html.Kendo().NumericTextBoxFor(m => m.Year)
                        .Format("0")
                        .Min(1900)
                        .Max(DateTime.Now.Year + 1)
                        .HtmlAttributes(new
                        {
                            @class = "vehicle-field",
                            style = "width:100%; height: 28px;"
                        }))
                </div>
            </div>

            <!-- Row 4: Engine, Transmission, Differential -->
            <div class="form-row">
                <div class="form-group">
                    @Html.LabelFor(m => m.Engine, "Engine", new { @class = "form-label" })
                    @Html.EditorFor(m => m.Engine, "ComboBoxEditor", new
                        {
                            htmlAttributes = new
                            {
                                @class = "vehicle-field",
                                style = "width:100%; height: 28px;"
                            }
                        })
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.Transmission, "Transmission", new { @class = "form-label" })
                    @Html.EditorFor(m => m.Transmission, "ComboBoxEditor", new
                        {
                            htmlAttributes = new
                            {
                                @class = "vehicle-field",
                                style = "width:100%; height: 28px;"
                            }
                        })
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.Differential, "Differential", new { @class = "form-label" })
                    @Html.EditorFor(m => m.Differential, "ComboBoxEditor", new
                        {
                            htmlAttributes = new
                            {
                                @class = "vehicle-field",
                                style = "width:100%; height: 28px;"
                            }
                        })
                </div>
            </div>

            <!-- Audit Section -->
            <div class="section-title">Audit Information</div>

            <!-- Row 5: Last Modified By, Last Modified Date -->
            <div class="form-row">
                <div class="form-group">
                    @Html.LabelFor(m => m.ModifiedLastBy, "Last Modified By", new { @class = "form-label" })
                    @(Html.Kendo().TextBoxFor(m => m.ModifiedLastBy)
                        .HtmlAttributes(new
                        {
                            @readonly = "readonly",
                            @class = "k-textbox read-only",
                            style = "width:100%; padding: 4px 6px; height: 28px;"
                        }))
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.ModifiedLastDate, "Last Modified Date", new { @class = "form-label" })
                    @(Html.Kendo().TextBoxFor(m => m.ModifiedLastDate)
                        .HtmlAttributes(new
                        {
                            @readonly = "readonly",
                            @class = "k-textbox read-only",
                            style = "width:100%; padding: 4px 6px; height: 28px;"
                        }))
                </div>
            </div>
        </form>
    </div>
</div>

<style>
    /* BASE STYLES - OPTIMIZED FOR 1100x600 */
    .popup-container {
        width: 1100px;
        height: 500px;
        background: white;
        border-radius: 4px;
        box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        margin: 0 auto;
        display: flex;
        flex-direction: column;
    }

    /* HEADER - ULTRA COMPACT */
    .popup-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 6px 12px;
        background: linear-gradient(to right, #2c3e50, #4a6491);
        color: white;
        flex-shrink: 0;
        height: 32px;
    }

    .popup-title {
        font-size: 14px;
        font-weight: 600;
        letter-spacing: 0.1px;
    }

    .tab-actions {
        display: flex;
        gap: 6px;
    }

    .k-button {
        border-radius: 3px;
        font-weight: 500;
        padding: 4px 8px;
        display: flex;
        align-items: center;
        gap: 4px;
        background-color: #f0f0f0;
        border: 1px solid #ccc;
        color: #333;
        font-size: 12px;
        height: 26px;
    }

        .k-button:hover {
            transform: none;
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
        }

        .k-button.k-primary {
            background: #3f51b5;
            border-color: #3f51b5;
            color: white;
        }

    /* FORM CONTAINER - FILL SPACE WITHOUT SCROLL */
    .form-container {
        padding: 8px 15px;
        overflow: hidden;
        flex: 1;
        display: flex;
        flex-direction: column;
    }

    /* FORM ROWS - TIGHT SPACING */
    .form-row {
        display: flex;
        gap: 8px;
        margin-bottom: 6px;
        align-items: flex-start;
    }

    .form-group {
        display: flex;
        flex-direction: column;
        flex: 1;
    }

    .double-width {
        flex: 1.8;
    }

    /* FORM ELEMENTS - COMPACT & EFFICIENT */
    .form-label {
        display: block;
        margin-bottom: 3px;
        font-weight: 600;
        color: #2c3e50;
        font-size: 11px;
    }

    .required-label::after {
        content: " *";
        color: #e74c3c;
        font-size: 11px;
    }

    .k-textbox, .k-combobox, .k-numerictextbox {
        width: 100%;
    }

    .k-tabstrip-items .k-item.k-state-disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

        /* INPUT CONTROLS - MINIMAL HEIGHT */
        .k-textbox, .k-numerictextbox .k-numeric-wrap,
        .k-combobox .k-dropdown-wrap {
            border: 1px solid #d1d5db;
            border-radius: 3px;
            padding: 4px 8px;
            background: #fff;
            min-height: 28px;
            font-size: 12px;
        }

            .k-textbox:focus,
            .k-numerictextbox .k-numeric-wrap:focus-within,
            .k-combobox .k-dropdown-wrap:focus-within {
                border-color: #3498db;
                box-shadow: 0 0 0 1px rgba(52, 152, 219, 0.2);
            }

    /* READONLY FIELDS */
    .read-only, .read-only .k-dropdown-wrap,
    .read-only .k-numeric-wrap,
    .read-only .k-input {
        background-color: #f8fafc !important;
        color: #4b5563 !important;
        cursor: not-allowed !important;
    }

        .read-only .k-combobox .k-select {
            display: none !important;
        }

    /* SECTION TITLES - MINIMAL SPACE */
    .section-title {
        font-size: 12px;
        color: #2c3e50;
        margin-bottom: 6px;
        padding-bottom: 4px;
        border-bottom: 1px solid #3498db;
        display: flex;
        align-items: center;
        gap: 5px;
    }

        .section-title::before {
            content: "";
            display: block;
            width: 4px;
            height: 12px;
            background: #3498db;
            border-radius: 2px;
        }
</style>

<script>
    // Initialize form state based on mode (add vs edit)
    $(document).ready(function () {
        const isAddMode = @Model.VehicleListId === 0;

        // For existing records, make all non-audit fields readonly
        if (!isAddMode) {
            $(".vehicle-field").each(function () {
                $(this).prop("readonly", true);
            });
        }

        // Handle Edit button click
        $("#btnEdit").click(function () {
            $(".vehicle-field").prop("readonly", false);
            $(this).hide();
        });
    });

    // Set form readonly state
    function setFormReadOnly(readOnly) {
        $(".vehicle-field").each(function () {
            const input = $(this);
            const widget = kendo.widgetInstance(input, kendo.ui);

            if (widget) {
                if (typeof widget.readonly === 'function') {
                    widget.readonly(readOnly);
                } else if (widget.element && widget.element.is("input")) {
                    input.prop("readonly", readOnly);
                }
            } else {
                input.prop("readonly", readOnly);
            }

            // Toggle readonly class for styling
            input.toggleClass("read-only", readOnly);
        });

        // Special handling for comboboxes
        $("[data-role='combobox']").each(function () {
            const combo = $(this).data("kendoComboBox");
            if (combo) {
                combo.readonly(readOnly);
                combo.enable(!readOnly);
                $(combo.element).toggleClass("read-only", readOnly);
            }
        });
    }
</script>
VehicleViewModel :
using BCES.Models.Parts;
using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Configuration;

namespace BCES.Models.Vehicle
{
   // [Table("VehicleList", Schema = "SBCES")]
    public class VehicleViewModel
    {
        public VehicleViewModel() {
            StockCodedParts = new List<StockCodedPartsViewModel>();
        }
       // [Key]
       
       // [Display(Name = "Vehicle List ID")]
        public int VehicleListId { get; set; }

        public int ArchVehicleListId { get; set; }

        public int OldId { get; set; }

        [Required(ErrorMessage = "Vehicle Series Code is required")]
        [StringLength(50)]
      //  [Display(Name = "Vehicle Series Code")]
        public string VehSeriesCode { get; set; }

       [Required(ErrorMessage = "Field is required")]
      //  [IntegerValidator]
      //  [Display(Name = "Number of Vehicles")]
        public int NumOfVehicles { get; set; }

        [Required(ErrorMessage = "Description is required")]
        [StringLength(200)]
      //  [Display(Name = "Project Description")]
        public string ProjDesc { get; set; }

      //  [Required]
      //  [Display(Name = "Date Entered")]
        public DateTime DateEntered { get; set; } = DateTime.Now;

      //  [Required(ErrorMessage = "Entered By is required")]
        [StringLength(25)]
       // [Display(Name = "Entered By")]
        public string EnteredBy { get; set; }

       // [Required(ErrorMessage = "Last Modified By is required")]
        [StringLength(25)]
       // [Display(Name = "Last Modified By")]
        public string ModifiedLastBy { get; set; }

       // [Required]
       // [Display(Name = "Last Modified Date")]
        public DateTime ModifiedLastDate { get; set; }

        [StringLength(25)]
        //[Required(ErrorMessage = "Field is required")]
        public string? Make { get; set; }

        [StringLength(25)]
        
        public string? VehModel { get; set; }

                
        [Range(1900, 2100, ErrorMessage = "Year must be 4 digits")]
       // [Required(ErrorMessage = "Field is required")]
        public int Year { get; set; }

        [StringLength(25)]
       // [Required(ErrorMessage = "Field is required")]
        public string? Engine { get; set; }

        [StringLength(25)]
        //[Required(ErrorMessage = "Field is required")]
        public string? Transmission { get; set; }

        [StringLength(25)]
       // [Required(ErrorMessage = "Field is required")]
        public string? Differential { get; set; }

        [StringLength(30)]
      //  [Display(Name = "SOP Number")]
        public string? Sopnumber { get; set; }

        public decimal? LabourCost { get; set; }

        public decimal? LabourOverheadAmount { get; set; }
        public decimal? LabourTotal { get; set; }
        public decimal? MaterialsTotal { get; set; }
       public decimal? TotalBusEstimateCost { get; set; }

        public List<StockCodedPartsViewModel> StockCodedParts { get; set; }
    }
}

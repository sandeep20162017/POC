Why Add a Cancel Button?
User Expectations: Users expect a clear way to discard changes without saving

Error Recovery: Allows users to back out of accidental edits

UX Best Practice: Follows standard form design patterns (Save/Cancel)

Mobile Friendliness: Provides clear touch targets

Implementation Plan:
1. Add Cancel Button to _VehPopUp.cshtml
html
<div class="popup-header">
    <div class="popup-title">@(Model.VehicleListId == 0 ? "Add New Vehicle Estimate" : $"Estimate #{Model.VehicleListId}")</div>
    <div class="tab-actions">
        <button id="btnEdit" class="k-button" style="@(Model.VehicleListId == 0 ? "display:none;" : "")">
            <span class="k-icon k-i-edit"></span> Edit
        </button>
        <button id="btnSave" class="k-button k-primary">
            <span class="k-icon k-i-save"></span> Save
        </button>
        <!-- Add Cancel Button -->
        <button id="btnCancel" class="k-button">
            <span class="k-icon k-i-cancel"></span> Cancel
        </button>
    </div>
</div>
2. Update CSS for Button Spacing
css
.tab-actions {
    display: flex;
    gap: 6px;
}

.k-button {
    /* Existing styles */
    min-width: 80px; /* Ensure consistent width */
}
3. Add Cancel Logic to JavaScript
In Index.cshtml inside wireVehicleForm():

javascript
function wireVehicleForm() {
    // Existing code...
    
    // Add Cancel button handler
    $("#btnCancel").off("click").on("click", function() {
        if (!pendingChanges || confirm("Discard changes?")) {
            $("#estimatePopup").data("kendoWindow").close();
        }
    });
    
    // Existing save/submit code...
}
4. Enhance Form State Management
javascript
function wireVehicleForm() {
    // Initialize form state
    const isAddMode = window.currentVehicleId === 0;
    setFormReadOnly(!isAddMode);
    
    // Show/hide Edit button
    if (isAddMode) {
        $("#btnEdit").hide();
    }

    // Handle Edit button
    $("#btnEdit").off("click").on("click", function() {
        setFormReadOnly(false);
        pendingChanges = true;
        $(this).hide();
    });

    // Handle Cancel button
    $("#btnCancel").off("click").on("click", function() {
        handleCancel();
    });

    // Handle Save button
    $("#btnSave").off("click").on("click", function() {
        $("#vehicleDetailForm").submit();
    });

    // Existing form submit handler...
}

function handleCancel() {
    if (!pendingChanges || confirm("Discard changes?")) {
        $("#estimatePopup").data("kendoWindow").close();
    }
}
Key Benefits:
Consistent UX: Matches standard form patterns (Save/Cancel)

Safety Net: Prevents accidental data loss with confirmation

Mobile Optimization: Clear action buttons

Edit Mode Support: Works for both Add and Edit scenarios

Keyboard Navigation: Provides accessible way to cancel

Recommended Button Placement Order:
html
<!-- Recommended button order -->
<button id="btnEdit">Edit</button>   <!-- Visible only in view mode -->
<button id="btnCancel">Cancel</button> <!-- Always visible -->
<button id="btnSave" class="k-primary">Save</button> <!-- Primary action -->
This follows the standard pattern:

Windows/Mac: Cancel on left, Action on right

Web Forms: Secondary action first, primary action last

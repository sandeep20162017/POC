Solution:
Modify the function to use the id parameter instead of tabId:

javascript
// ── Load partial tabs (FIXED VERSION)
window.loadTabContent = function (elementId, url, data, callback) {
    $("#" + elementId).load(url, data, function () {
        if (typeof callback === "function") callback();
    });
};
Key changes needed:

Update the function signature to accept:

elementId (target container ID)

url (endpoint to load)

data (parameters for request)

callback (optional completion handler)

Update all calls to this function:

javascript
// In openEstimatePopup:
loadTabContent(
    "vehicleTabContent", 
    "/Vehicles/VehPopUp", 
    { id: vehicleId },
    function() { /* callback logic */ }
);

// In onTabSelect:
loadTabContent(
    tab.id, 
    tab.url, 
    { id: currentVehicleId, gridType: "VehicleGrid" }
);
Make sure the onTabSelect function uses consistent tab configuration:

javascript
window.onTabSelect = function (e) {
    var index = $(e.item).index();
    var tabsConfig = [
        { id: "vehicleTabContent", url: "/Vehicles/VehPopUp" },
        { id: "partsTabContent", url: "/Vehicles/MaterialCostSummaryPartial" },
        // ... other tabs match your UI structure ...
    ];
    
    if (tabsConfig[index]) {
        var tab = tabsConfig[index];
        if ($("#" + tab.id).is(":empty")) {
            loadTabContent(tab.id, tab.url, 
                { id: currentVehicleId, gridType: "VehicleGrid" }
            );
        }
    }
};
Additional fixes needed:

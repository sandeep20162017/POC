EstimateId and Update date, updatedby is not refreshed.
Getting message :
kendo.alert("Save succeeded but no Estimate ID was returned.")
did not get in : if (response && response.VehicleListId)
Response:
{
    "StatusCode": null,
    "ViewName": "_VehPopUp",
    "Model": {
        "VehicleListId": 4366,
        "ArchVehicleListId": 0,
        "OldId": 0,
        "VehSeriesCode": "ELF  MODEL 122",
        "NumOfVehicles": 23,
        "ProjDesc": "2015 CLRV BODY & PAINT (1 VEH)",
        "DateEntered": "2025-08-02T19:28:41.07",
        "EnteredBy": "Sandeep Kanao",
        "ModifiedLastBy": "Sandeep Kanao",
        "ModifiedLastDate": "2025-08-02T19:28:41.07",
        "Make": "NOVA",
        "VehModel": null,
        "Year": 1990,
        "Engine": "CUMMINS ISL-280",
        "Transmission": "B401111",
        "Differential": "4.56:1",
        "Sopnumber": "",
        "LabourCost": null,
        "LabourOverheadAmount": null,
        "LabourTotal": null,
        "MaterialsTotal": null,
        "TotalBusEstimateCost": null
    },
    "ViewData": {
        "RoleId": 1,
        "UserName": "Sandeep Kanao",
        "RoleName": "Administrator",
        "SiteNames": "Duncan",
        "SessionTimeoutMinutes": "30",
        "SessionTimeoutWarningMinutes": "5",
        "ReadOnly": false,
        "FormattedDate": "Aug 02, 2025 07:28:41 PM"
    },
    "TempData": {},
    "ViewEngine": null,
    "ContentType": null
}
============================
Additional details :
 public ActionResult GetVehicleById(int id, bool readOnly = false)
 {
     var vehicle = id == 0
         ? new VehicleViewModel() // Add mode
         : _dbConnection.QueryFirstOrDefault<VehicleViewModel>(@"
     SELECT  [VehicleListId]
                                       ,[VehSeriesCode]
                                       ,[NumOfVehicles]
                                       ,[ProjDesc]
                                       ,[DateEntered]
                                       ,[EnteredBy]
                                       ,[ModifiedLastBy]
                                       ,[ModifiedLastDate]
                                       ,[Make]
                                       ,[Model]
                                       ,[Year]
                                       ,[Engine]
                                       ,[Transmission]
                                       ,[Differential]
                                       ,[Sopnumber]
                                   FROM [CES].[SBCES].[VehicleList] WHERE VehicleListId = @Id", new { Id = id });

     if (vehicle == null)
         return Content("Vehicle not found");

     ViewBag.ReadOnly = readOnly;
     ViewBag.FormattedDate = vehicle.ModifiedLastDate == default
         ? "System Generated"
         : vehicle.ModifiedLastDate.ToString("MMM dd, yyyy hh:mm:ss tt");

     return PartialView("_VehPopUp", vehicle);
 }
=========================
 [HttpPost]
 public async Task<IActionResult> AddVehiclesView([FromBody] VehicleViewModel vehicleViewModel)
 {
     if (vehicleViewModel == null)
         return BadRequest("Model binding failed.");

     try
     {
         var newId = await AddVehicleAsync(vehicleViewModel); 

         // Re-fetch full model from DB
         var updated =  GetVehicleById(newId); //should I replae this with GetVehicleJsonById? same forupdate?

         return Ok(updated);
     }
     catch (Exception ex)
     {
         return StatusCode(500, "Add failed: " + ex.Message);
     }
 }
============================================
Additinal details : I would keep all the below 4 functions, just modify to get VehicleJson data. You can create a new function to return vehicle json data. Remove duplicate logic. Pls give me full changes for the functions you are creating or updatig. Full changes so I can copy and paste
[HttpPost]
public async Task<IActionResult> AddVehiclesView([FromBody] VehicleViewModel vehicleViewModel)
{
    if (vehicleViewModel == null)
        return BadRequest("Model binding failed.");

    try
    {
        var newId = await AddVehicleAsync(vehicleViewModel);

        // Re-fetch full model from DB
        var updated =  GetVehicleById(newId);

        return Ok(updated);
    }
    catch (Exception ex)
    {
        return StatusCode(500, "Add failed: " + ex.Message);
    }
}

private async Task<int> AddVehicleAsync([FromBody] VehicleViewModel vehicleViewModel)
{
    var userName = ViewBag.UserName;
    var maxVehicleListId =
                _dbConnection.QueryFirstOrDefault<int>(@"SELECT MAX(VehicleListId) + 1  FROM SBCES.VehicleList");

    _dbConnection.Open();
    using (var transaction = _dbConnection.BeginTransaction())
    {
        try
        {
            // Insert into the main RbMasterlist table
            var insertVehlistQuery = @"
                                                INSERT INTO SBCES.VehicleList ( VehicleListId,NumOfVehicles,
                                                    Sopnumber, ProjDesc, Differential, Engine, 
                                                     Make, Model, VehSeriesCode, Year, Transmission,  EnteredBy,
                                                    DateEntered, ModifiedLastBy, ModifiedLastDate
                                                )
                                                VALUES (
                                                    @VehicleListId,@NumOfVehicles, @Sopnumber, @ProjDesc, @Differential, @Engine, 
                                                     @Make, @VehModel, @VehSeriesCode, @Year, @Transmission, @EnteredBy,
                                                    @DateEntered, @ModifiedLastBy, @ModifiedLastDate
                                                );
                                                
                                            ";

            await _dbConnection.ExecuteAsync(insertVehlistQuery, new
            {
                VehicleListId = maxVehicleListId,
                vehicleViewModel.NumOfVehicles,
                vehicleViewModel.Sopnumber,
                vehicleViewModel.ProjDesc,
                vehicleViewModel.Differential,
                vehicleViewModel.Engine,

                vehicleViewModel.Make,
                vehicleViewModel.VehModel,
                vehicleViewModel.Transmission,
                vehicleViewModel.VehSeriesCode,
                vehicleViewModel.Year,


                EnteredBy = userName,
                DateEntered = DateTime.Now,
                ModifiedLastBy = userName,
                ModifiedLastDate = DateTime.Now

            }, transaction);



            // Commit the transaction
            transaction.Commit();

            return maxVehicleListId;

        }
        catch (Exception ex)
        {
            // Rollback the transaction in case of an error
            // transaction.Rollback();
            Console.WriteLine($"Error creating Vehicle data: {ex.Message}");
            throw; // Re-throw the exception to propagate it
        }
    }

}
Update :
 [HttpPost]
 public async Task<IActionResult> UpdateVehiclesView([FromBody] VehicleViewModel vehicleViewModel)
 {
     if (vehicleViewModel == null)
         return BadRequest("Model binding failed.");

     try
     {
         await UpdateVehiclesAsync(vehicleViewModel);

         var updated =  GetVehicleById(vehicleViewModel.VehicleListId);

         return Ok(updated);
     }
     catch (Exception ex)
     {
         return StatusCode(500, "Update failed: " + ex.Message);
     }
 }

 [AllowAnonymous]
 private async Task UpdateVehiclesAsync(VehicleViewModel vehicleViewModel)
 {
     var userName = ViewBag.UserName;
     _dbConnection.Open();
     using (var transaction = _dbConnection.BeginTransaction())
     {
         try
         {
             // Update the [VehicleListId] table
             var updateVehiclelistQuery = @"
                                             UPDATE SBCES.[VehicleList]
                                             SET 
                                                 Sopnumber = @Sopnumber,
                                                 ProjDesc =@ProjDesc,
                                                 Differential = @Differential,
                                                 Engine = @Engine,
                                                 NumOfVehicles = @NumOfVehicles,
                                                 
                                                 Make = @Make,
                                                 Model = @VehModel,
                                                 Transmission = @Transmission,
                                                 VehSeriesCode = @VehSeriesCode,
                                                 Year = @Year,
                                                 

                                                 ModifiedLastBy = @LastModifiedBy,
                                                 ModifiedLastDate = @ModifiedLastDate
             
                                             WHERE VehicleListId = @VehicleListId;
                                         ";

             await _dbConnection.ExecuteAsync(updateVehiclelistQuery, new
             {
                 vehicleViewModel.Sopnumber,
                 vehicleViewModel.ProjDesc,
                 vehicleViewModel.Differential,
                 vehicleViewModel.Engine,
                 vehicleViewModel.NumOfVehicles,


                 vehicleViewModel.Make,
                 vehicleViewModel.VehModel,
                 vehicleViewModel.Transmission,
                 vehicleViewModel.VehSeriesCode,
                 vehicleViewModel.Year,

                 LastModifiedBy = userName,
                 ModifiedLastDate = DateTime.Now,
                 vehicleViewModel.VehicleListId

             }, transaction);


             // Commit the transaction
             transaction.Commit();

         }
         catch (Exception ex)
         {
             // Rollback the transaction in case of an error
             transaction.Rollback();
             Console.WriteLine($"Error updating vehicle estimate: {ex.Message}");
             throw; // Re-throw the exception to propagate it
         }
     }
 }
====================
payload :
{VehicleListId: "0", VehSeriesCode: "ELF MODEL 122", NumOfVehicles: "31",…}
Differential
: 
"4.56:1"
Engine
: 
"CUMMINS ISL 8.9 ISL 10"
Make
: 
"NOVA"
NumOfVehicles
: 
"31"
ProjDesc
: 
"2015 CLRV RE-WHEEL(1 VEH)"
Sopnumber
: 
""
Transmission
: 
"B400 GEN 4"
VehModel
: 
"ALRV"
VehSeriesCode
: 
"ELF  MODEL 122"
VehicleListId
: 
"0"
Year
: 
"2010"
response :
Add failed: Invalid column name 'ArchVehicleListId'.
Invalid column name 'OldId'.

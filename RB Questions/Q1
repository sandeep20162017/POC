You are ASP.NET Core 8.0 and Telerik ASp.NET Core expert. Application uses Telerik Grid, InCell Edit. Yo uhave access to Telerik ASp.NET core documentation. 
Pls assist me for below questions. Double check your answer with Telerik ASP.NET core documentation.
Index has 2 tabs. Each tab uses Telerik ASP.Net Core Grid
When user clicks on first tab :
It opens other tabs JS example below:
Each of these tabs has its own cshtml. Each cshtml has its own Telerik grid.
Example : Labour Details uses Telerik Grid Name("LabourDetail"), Labour Hour uses Telerik Grid Name("LabourHour") etc. It has its own cshtml files.
Questions :
1. In LabourDetails or LabourHour if I add JavaScript, its not getting incorporated in the Index.cshtml. Is it the known behaviour?
2. If I add the same JavaScript function getDropDownListParams  in Index.cshtml (which has tabs), everything works fine, but I need to pass the grid name in getDropDownListParams which is dependent on tab user clicks in. Example when user clicks on Labour Details tab pass Name as LabourDetail in getDropDownListParams, when user clicks on Labour Hour tab pass grid name as LabourHour. May be save this in a ViewBag orany other alternative?
3. Other challenge is  Index.cshtml also has grid named getDropDownList. getDropDownListParams functio is also called in  Index.cshtml, which is the main page.


index.cshtml 
@(Html.Kendo().TabStrip()
    .Name("rebuildPartsTabStrip")
    .Animation(animation => animation.Open(effect => effect.Fade(FadeDirection.In)))
    .Items(tabstrip =>
    {
        tabstrip.Add().Text("Rebuilt Parts")
            .Selected(true)
            .Content(@<text>
                @try
                {
                    @(Html.Kendo().Grid<RebuiltPartsViewModel>()
                        .Name("RebuiltPartsGrid")
                        .Columns(columns =>
                        {
                            columns.Bound(c => c.RebuiltStockNum).Title("Rebuilt Stock Code")
                                .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)))
                                .Width(150).Hidden(false).Lockable(false);
...
tabstrip.Add().Text("Archived Parts")
    .Content(@<text>
        @try
        {
            @Html.Partial("_ArchivedIndex")
        }
Javascript :
grid.bind("detailInit", function (e) {
    const rebuiltStockNum = e.data.RebuiltStockNum;
    
    console.log("Detail initialization started for RebuiltStockNum: " + e.data.RebuiltStockNum);
    var tabUrlLabourDetail = '@Url.Action("LabourDetailsPartial", "RebuiltParts")' + '?rebuiltPartNum=' + e.data.RebuiltStockNum;
    var tabUrlLabourHourSummary = '@Url.Action("LabourHourSummaryPartial", "RebuiltParts")' + '?rebuiltPartNum=' + e.data.RebuiltStockNum;
    var tabUrlMaterialCostSummary = '@Url.Action("MaterialCostSummaryPartial", "RebuiltParts")' + '?rebuiltPartNum=' + e.data.RebuiltStockNum;
...
 function getDropDownListParams() {
     // 1. Get grid reference
     var grid = $("#NscPartsUsedGrid").data("kendoGrid");
     if (!grid) {
         console.warn("Grid not found");
         return {};
     }

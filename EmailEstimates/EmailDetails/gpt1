You are ASP.NET  core and Telerik ASP.NET Core UI expert. Application uses ASP.NET core 8.0. Application is in MVC. Dapper calls for directt SQL calls in the controller.  I need to add a new button on each row "Email Estimate".
When user clicks on Email Estimate button
New Pop up Form will open at the bottom right corner of the screen. This Pop up form will have
To : <Recepients name>
Subject : Prepopulated Subject - Deduce it from rebuiltNumber in the TR. Subject should be rebuiltNumber_RebuiltPart_Estimates - Created Date - Today's  date
Body :
Prepopulated with following :
Dear Sir/Madam
Please find attached here with Rebuilt Part Estimate for {rebuiltNumber}.

Thank you
It should have Send and Cancel button at the bottom right corner. 
When user clicks Send, Controller action gets called which will have Kendo notification - "Email Sent" Pop Up form will be closed.
When User clicks on Cancel, Controller action gets called which will have Kendo notification - "Email Request" Pop Up form will be closed.
Use Kendo/Telerik controls where possible. Use Server side logic instead of Javascript. Add exception handling in the code.
This pop-up should attach (include) excel file (use the implemented logic in the 'SAve to Excel' button)
Index.cshtml :
@using BCES.Models.Parts
@using BCES.Models.Common
@model IEnumerable<BCES.Models.Parts.RebuiltPartsViewModel>

@{
    ViewData["Title"] = "Rebuilt Parts";
}

<h4>Rebuilt Parts</h4>

@(Html.Kendo().Grid<RebuiltPartsViewModel>()
    .Name("RebuiltPartsGrid")
    .Columns(columns =>
    {
        columns.Bound(c => c.RebuiltStockNum).Title("Rebuilt Stock Code").Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)));
        columns.Bound(c => c.MmsStockCode).Title("MMS Stock Code").Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)));
        columns.Bound(c => c.DetailedDesc).Title("Description").Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)));
        columns.Bound(c => c.Keyword).Title("Keyword").Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)));
        columns.Bound(c => c.JobNumber).Title("Job Number").Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)));
        columns.Bound(c => c.CorePartNum).Title("Core Code").Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)));
        columns.Bound(c => c.CoreCharge).Title("Core Cost").Filterable(ftb => ftb.Cell(cell => cell.Operator("gte"))).Format("{0:C2}").EditorTemplateName("Currency");
        columns.Bound(c => c.BuyNewCost).Title("Buy Cost").Filterable(ftb => ftb.Cell(cell => cell.Operator("gte"))).Format("{0:C2}").EditorTemplateName("Currency");
        columns.Bound(c => c.RemanCost).Title("Remanufactured Cost").Filterable(ftb => ftb.Cell(cell => cell.Operator("gte"))).Format("{0:C2}").EditorTemplateName("Currency");
        columns.Command(command =>
        {
            command.Edit();
            command.Custom("Archive").Click("onArchiveClick"); // Add a custom "Archive" button
            command.Custom("Save to Excel").Click("onSaveToExcelClick"); 
        }).Title("Actions");
    })
    .ToolBar(toolbar => { toolbar.Create(); })
    .Editable(editable => editable.Mode(GridEditMode.InLine))
    .Pageable()
    .Sortable()
    .ClientDetailTemplateId("template")
    .Resizable(r => r.Columns(true))
//    .Groupable(g => g.ShowFooter(false))
    .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
   // .Scrollable()
    .DataSource(dataSource => dataSource
        .Ajax()
        .Model(model =>
        {
            model.Id(c => c.RbMasterlistId);
            model.Field(c => c.RbMasterlistId);
            model.Field(c => c.RebuiltStockNum).Editable(true);
            model.Field(c => c.MmsStockCode).Editable(true);
            model.Field(c => c.VehicleSeries).DefaultValue(new List<BCES.Models.Common.ListOfBusesModel>()).Editable(true);
            model.Field(c => c.LabourDetailsRebuiltParts).DefaultValue(new List<BCES.Models.Parts.LabourDetailsRebuiltPartsViewModel>()).Editable(false);
        })
        .Read(read => read.Url(Url.Action("GetRebuiltPartsView", "RebuiltParts")).Type(HttpVerbs.Get))
        .Create(create => create.Url(Url.Action("AddRebuiltPartsView", "RebuiltParts")).Type(HttpVerbs.Post))
        .Update(update => update.Url(Url.Action("UpdateRebuiltPartsView", "RebuiltParts")).Type(HttpVerbs.Post))
    )
)

<div id="estimates-container"></div>

<!-- Add a placeholder for the notification -->
<div id="notification"></div>
@section Scripts {
    <script>
        $(document).ready(function () {
            var grid = $("#RebuiltPartsGrid").data("kendoGrid");

            // Initialize Kendo Notification for displaying messages
            var notificationElement = $("#notification");
            if (notificationElement.length === 0) {
                console.error("Notification element not found in the DOM.");
            } else {
                var notification = notificationElement.kendoNotification({
                    position: {
                        pinned: true,
                        top: 50,
                        right: 50
                    },
                    autoHideAfter: 5000, // Hide after 5 seconds
                    stacking: "down"
                }).data("kendoNotification");

                // Bind the Save event for the grid
                grid.bind("save", function (e) {
                    // This event is triggered when the user clicks the Update button
                    $.post('@Url.Action("UpdateRebuiltPartsView", "RebuiltParts")', { rebuiltPartNum: e.model.RebuiltStockNum })
                        .done(function (data) {
                            if (notification) {
                                notification.show("Changes saved successfully!", "success");
                            } else {
                                console.error("Notification is not initialized.");
                            }
                        })
                        .fail(function (xhr, status, error) {
                            console.error("Error saving changes: ", error);
                            if (notification) {
                                notification.show("An error occurred while saving changes. Please try again.", "error");
                            } else {
                                console.error("Notification is not initialized.");
                            }
                        });
                });

                // Bind the Cancel event for the grid
                grid.bind("cancel", function (e) {
                    // This event is triggered when the user clicks the Cancel button
                    $.post('@Url.Action("CancelDetails", "RebuiltParts")', { rebuiltPartNum: e.model.RebuiltStockNum })
                        .done(function (data) {
                            if (notification) {
                                notification.show("Changes discarded!", "info");
                            } else {
                                console.error("Notification is not initialized.");
                            }
                        })
                        .fail(function (xhr, status, error) {
                            console.error("Error discarding changes: ", error);
                            if (notification) {
                                notification.show("An error occurred while discarding changes. Please try again.", "error");
                            } else {
                                console.error("Notification is not initialized.");
                            }
                        });
                });

                grid.bind("detailInit", function (e) {
                    console.log("Detail initialization started for RebuiltStockNum: " + e.data.RebuiltStockNum);
                    var tabUrlLabourDetail = '@Url.Action("LabourDetailsPartial", "RebuiltParts")' + '?rebuiltPartNum=' + e.data.RebuiltStockNum;
                    var tabUrlLabourHourSummary = '@Url.Action("LabourHourSummaryPartial", "RebuiltParts")' + '?rebuiltPartNum=' + e.data.RebuiltStockNum;
                    var tabUrlMaterialCostSummary = '@Url.Action("MaterialCostSummaryPartial", "RebuiltParts")' + '?rebuiltPartNum=' + e.data.RebuiltStockNum;
                    var tabScPartDetail = '@Url.Action("ScPartsUsedInRbParts", "RebuiltParts")' + '?rebuiltPartNum=' + e.data.RebuiltStockNum;
                    var tabUrlNscDetail = '@Url.Action("NscDetailsPartial", "RebuiltParts")' + '?rebuiltPartNum=' + e.data.RebuiltStockNum;
                    var tabUrlRbPartDetail = '@Url.Action("RbDetailsPartial", "RebuiltParts")' + '?rebuiltPartNum=' + e.data.RebuiltStockNum;
                    var tabUrlTotalCost = '@Url.Action("TotalCostPartial", "RebuiltParts")' + '?rebuiltPartNum=' + e.data.RebuiltStockNum;

                    // Get the container for the detail template
                    var container = e.detailCell.find("#detail-template-" + e.data.RebuiltStockNum);

                    // Load the TabStrip structure
                    container.html(`
                                <div id="tabstrip-container-${e.data.RebuiltStockNum}">
                                    <ul>
                                        <li class="k-state-active">Labour Details</li>
                                        <li>Labour Hour</li>
                                        <li>Material: Cost</li>
                                        <li>Material: SC Parts</li>
                                        <li>Material: NSC Parts</li>
                                        <li>Material: RB Parts</li>
                                        <li>Total Cost</li>
                                    </ul>
                                    <div id="labour-details-content"></div>
                                    <div id="labour-hour-summary-content"></div>
                                    <div id="material-cost-summary-content"></div>
                                    <div id="material-details-content"></div>
                                    <div id="nsc-details-content"></div>
                                    <div id="rb-part-details-content"></div>
                                    <div id="total-cost-content"></div>
                                </div>
                                
                            `);

                    // Initialize the Kendo TabStrip
                    var tabStrip = $("#tabstrip-container-" + e.data.RebuiltStockNum).kendoTabStrip({
                        animation: { open: { effects: "fadeIn" } },
                        select: function (e) {
                            var tabIndex = $(e.item).index(); // Get the index of the selected tab

                            // Check for unsaved changes in the current tab
                            var currentTabContent = tabStrip.contentElement(tabStrip.select().index());
                            var currentGrid = $(currentTabContent).find(".k-grid").data("kendoGrid");

                            if (currentGrid && (currentGrid.dataSource.hasChanges())) {
                                // Show a warning notification
                                if (notification) {
                                    notification.show("You have unsaved changes. Click on Update or Cancel changes before clicking next tab.", "warning");
                                } else {
                                    console.error("Notification is not initialized.");
                                }
                                e.preventDefault(); // Prevent the tab switch
                                return;
                            }

                            // Load the partial view content for the selected tab
                            var tabUrl = tabIndex == 0 ? tabUrlLabourDetail :
                                tabIndex == 1 ? tabUrlLabourHourSummary :
                                    tabIndex == 2 ? tabUrlMaterialCostSummary :
                                        tabIndex == 3 ? tabScPartDetail :
                                            tabIndex == 4 ? tabUrlNscDetail :
                                                tabIndex == 5 ? tabUrlRbPartDetail :
                                                    tabUrlTotalCost;

                            $.get(tabUrl)
                                .done(function (data) {
                                    $(e.contentElement).html(data);
                                    kendo.init($(e.contentElement)); // Reinitialize Kendo widgets

                                    // Reset the hasChanges() state for read-only tabs
                                    if (tabIndex === 6) { // Assuming the last tab is the read-only tab
                                        var totalCostGrid = $(e.contentElement).find(".k-grid").data("kendoGrid");
                                        notification.show("tabIndex === 6");
                                        if (totalCostGrid) {
                                            notification.show("inside totalCostGrid");
                                            
                                            totalCostGrid.dataSource.read(); // Refresh the data source
                                            
                                        }
                                    }
                                })
                                .fail(function (xhr, status, error) {
                                    console.error("Error loading tab content: ", error);
                                    if (notification) {
                                        notification.show("An error occurred while loading the tab content. Please try again.", "error");
                                    } else {
                                        console.error("Notification is not initialized.");
                                    }
                                });
                        }
                    }).data("kendoTabStrip");

                    // Load the first tab's content
                    $.get(tabUrlLabourDetail)
                        .done(function (data) {
                            $("#labour-details-content").html(data);
                            kendo.init($("#labour-details-content")); // Reinitialize Kendo widgets
                        })
                        .fail(function (xhr, status, error) {
                            console.error("Error loading initial tab content: ", error);
                            if (notification) {
                                notification.show("An error occurred while loading the initial tab content. Please try again.", "error");
                            } else {
                                console.error("Notification is not initialized.");
                            }
                        });
                });
            }
        });
    </script>

    <script id="template" type="text/x-kendo-template">
        <div id="detail-template-#=RebuiltStockNum#"></div>
    </script>

    <script>
        function dataBound() {
            this.expandRow(this.tbody.find("tr.k-master-row").first());
        }
    </script>
    <script>
         function onArchiveClick(e) {
            e.preventDefault(); // Prevent the default action

            // Get the data item for the clicked row
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

            // Call the controller action with the entire dataItem as JSON
            $.ajax({
                url: '@Url.Action("ArchiveDetails", "RebuiltParts")',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(dataItem),
                success: function (data) {
                    // Display a Kendo Notification
                    var notification = $("#notification").kendoNotification({
                        position: {
                            pinned: true,
                            top: 50,
                            right: 50
                        },
                        autoHideAfter: 5000, // Hide after 5 seconds
                        stacking: "down"
                    }).data("kendoNotification");

                    notification.show("Archive is clicked.", "info");
                },
                error: function (xhr, status, error) {
                    console.error("Error archiving: ", error);
                }
            });
        }

 

    </script>
    <script>
    function onSaveToExcelClick(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var rebuiltPartNum = dataItem.RebuiltStockNum;

        // Directly trigger the file download
        window.location.href = '@Url.Action("SaveToExcel", "Export")' + '?rebuiltPartNum=' + rebuiltPartNum;
}

</script>

}

RebuiltPartsController.cs :
using Dapper;
using Microsoft.AspNetCore.Mvc;
using Dapper;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Threading.Tasks;
using Telerik.DataSource;
using Telerik.DataSource.Extensions;
using BCES.Models.Admin;
using Kendo.Mvc.UI;
using Kendo.Mvc.Extensions;
using DataSourceRequest = Kendo.Mvc.UI.DataSourceRequest;
using BCES.Data;
using Telerik.SvgIcons;
using Microsoft.AspNetCore.Http;
using Microsoft.EntityFrameworkCore.Metadata.Conventions;
using BCES.Controllers.Base;
using BCES.Models.Parts;
using BCES.Models.Common;
using BCES.Models.Parts;
using System.Data;
using OfficeOpenXml;
using System.IO;


using Newtonsoft.Json.Linq;
using static System.Net.Mime.MediaTypeNames;
using Azure.Core;
using BCES.Controllers.Admin;
//using CES.Views.Shared;
namespace BCES.Controllers.Parts
{
  // [Route("api/[controller]")]
    public class RebuiltPartsController : BaseController
    {
        private readonly DapperContext _db;
        private readonly IDbConnection _dbConnection;
        private readonly IHttpContextAccessor _httpContextAccessor;

        public RebuiltPartsController(DapperContext dapper, IHttpContextAccessor httpContextAccessor) : base(dapper, httpContextAccessor)
        {
            _db = dapper;
            _dbConnection = _db.CreateConnection();

            _httpContextAccessor = httpContextAccessor;
        }

        [HttpGet("RebuiltPartsIndex")]
        public IActionResult RebuiltPartsIndex()
        {
            // return View();
            return View("~/Views/Parts/RebuiltParts/Index.cshtml");
        }

        // POST: NscPartsUsed/GetNscPartsUsedView
        [HttpGet]
        public async Task<JsonResult> GetRebuiltPartsView([DataSourceRequest] DataSourceRequest request)
        {
            // Fetch data for the grid (you can use Dapper or any other method)
            var model = await GetRebuiltPartsData();
            return Json(model.ToDataSourceResult(request));
        }

        private async Task<IEnumerable<RebuiltPartsViewModel>> GetRebuiltPartsData()
        {
            try
            {
                var query = @"
                            SELECT rbm.RbMasterlistId,
                            rbm.[RebuiltStockNum],
                            rbm.[MmsStockCode],
                            rbm.[Keyword],
                            rbm.JobNumber,
                            rbm.[CorePartNum],
                            rbm.[DetailedDesc],
                            rbm.[CoreCharge],
                            rbm.[EstimatedCost],
                            rbm.[BuyNewCost],
                            rbm.[RemanCost],
                            rbm.[ExternalCost],
                            lb.ListId,
                            lb.Description AS Description,
		                    EL.LabourDefn AS [LabourType],
                            el.LinkNumber,
                            el.[CostCentre] as CC,
		                    el.[Usage],
		                    el.[TimeAddition]
                                FROM [SBCES].[RbMasterlist] rbm
                                INNER JOIN [SBCES].[RbListOfBuses] rlb ON rlb.[RebuiltStockNum] = rbm.[RebuiltStockNum]
                                INNER JOIN [SBCES].[ListOfBuses] lb ON rlb.ListId = lb.ListId
                                left join [SBCES].[EmployeeLabour] el ON el.[LinkNumber] = rbm.[RebuiltStockNum]";

                var rbParts = _dbConnection.Query<RebuiltPartsViewModel, ListOfBusesModel, LabourDetailsRebuiltPartsViewModel, RebuiltPartsViewModel>(
                    query,
                    (rbPart, vehicle, labourDetail) =>
                    {
                        rbPart.VehicleSeries.Add(vehicle);
                        if (labourDetail != null)
                        {
                            rbPart.LabourDetailsRebuiltParts.Add(labourDetail);
                        }
                        return rbPart;
                    },
                    splitOn: "ListId,LinkNumber"
                ).GroupBy(rbPart => rbPart.RbMasterlistId).Select(g =>
                {
                    var groupedRbPart = g.First();
                    groupedRbPart.VehicleSeries = g.SelectMany(rbPart => rbPart.VehicleSeries).Distinct().ToList();
                    groupedRbPart.LabourDetailsRebuiltParts = g.SelectMany(rbPart => rbPart.LabourDetailsRebuiltParts).Distinct().ToList();
                    return groupedRbPart;
                }).ToList();

                return rbParts;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        //private async Task<IEnumerable<RebuiltPartsViewModel>> GetRebuiltPartsData()
        //{
        //    try
        //    {
        //        var query = @"   
        //    SELECT rbm.RbMasterlistId,
        //           rbm.[RebuiltStockNum],
        //           rbm.[MmsStockCode],
        //           rbm.[Keyword],
        //           rbm.JobNumber,
        //           rbm.[CorePartNum],
        //           rbm.[DetailedDesc],
        //           rbm.[CoreCharge],
        //           rbm.[EstimatedCost],
        //           rbm.[BuyNewCost],
        //           rbm.[RemanCost],
        //           rbm.[ExternalCost],
        //           lb.ListId,
        //           lb.Description AS Description,
        //           el.[LabourDefn]
        //    FROM [SBCES].[RbMasterlist] rbm
        //    INNER JOIN [SBCES].[RbListOfBuses] rlb ON rlb.[RebuiltStockNum] = rbm.[RebuiltStockNum]
        //    INNER JOIN [SBCES].[ListOfBuses] lb ON rlb.ListId = lb.ListId
        //    left join [SBCES].[EmployeeLabour] el ON el.[LinkNumber] = rbm.[RebuiltStockNum]";

        //        var rbParts = _dbConnection.Query<RebuiltPartsViewModel, ListOfBusesModel, RebuiltPartsViewModel>(
        //            query,
        //            (rbPart, vehicle) =>
        //            {
        //                rbPart.VehicleSeries.Add(vehicle);
        //                return rbPart;
        //            },
        //            splitOn: "ListId"
        //        ).GroupBy(rbPart => rbPart.RbMasterlistId).Select(g =>
        //        {
        //            var groupedRbPart = g.First();
        //            groupedRbPart.VehicleSeries = g.SelectMany(rbPart => rbPart.VehicleSeries).ToList();
        //            return groupedRbPart;
        //        }).ToList();

        //        return rbParts;
        //    }
        //    catch (Exception ex)
        //    {
        //        return null;
        //    }

        //}

        [HttpPost]
        public async Task<IActionResult> AddRebuiltPartsView([DataSourceRequest] DataSourceRequest request, RebuiltPartsViewModel rebuiltPartsViewModel)
        {
            try
            {

                //if (rebuiltPartsViewModel.RbMasterlistId <= 0)
                //{
                //    ModelState.AddModelError("RbMasterlistId", "Please select a valid rebuit part.");
                //    return Json(new[] { rebuiltPartsViewModel }.ToDataSourceResult(request, ModelState));
                //}
                             

                var userId = await AddRebuiltPartAsync(rebuiltPartsViewModel);


                return RedirectToAction("Index");
            }
            catch (Exception ex)
            {
                return StatusCode(500, "An error occurred while adding Rebuilt Part.");
            }
        }

        private async Task<int> AddRebuiltPartAsync(RebuiltPartsViewModel rebuiltPartsViewModel)
        {

            // Start a transaction
            _dbConnection.Open();
            using (var transaction = _dbConnection.BeginTransaction())
            {
                try
                {
                    // Commit the transaction
                    transaction.Commit();
                    return 0;
                }
                catch (Exception ex)
                {
                    // Rollback the transaction in case of any error
                    transaction.Rollback();
                    // Handle or log the exception
                    throw new Exception("Failed to add rebuilt part.", ex);
                }
            }
        }

        [HttpPost]
        public async Task<IActionResult> UpdateRebuiltPartsView([DataSourceRequest] DataSourceRequest request, RebuiltPartsViewModel rebuiltPartsViewModel)
        {
            try
            {               
                var userId = await UpdateRebuiltPartsView(rebuiltPartsViewModel);
                return RedirectToAction("Index");
            }
            catch (Exception ex)
            {
                return StatusCode(500, "An error occurred while adding Rebuilt Part.");
            }
        }

        private async Task<int> UpdateRebuiltPartsView(RebuiltPartsViewModel rebuiltPartsViewModel)
        {

            // Start a transaction
            _dbConnection.Open();
            using (var transaction = _dbConnection.BeginTransaction())
            {
                try
                {
                    // Commit the transaction
                    transaction.Commit();

                    return 0;
                }
                catch (Exception ex)
                {
                    // Rollback the transaction in case of any error
                    transaction.Rollback();
                    // Handle or log the exception
                    throw new Exception("Failed to update rebuilt part.", ex);
                }
            }
        }

        public IActionResult LabourDetailsPartial([FromQuery] string rebuiltPartNum)
        {
            // Pass the rebuiltPartNum to the partial view
            ViewBag.RebuiltPartNum = rebuiltPartNum;
            var model = new List<LabourDetailsRebuiltPartsViewModel> { };
            return PartialView("_LabourDetailsRebuiltParts", model);
        }

        public IActionResult ScPartsUsedInRbParts([FromQuery] string rebuiltPartNum)
        {
            // Pass the rebuiltPartNum to the partial view
            ViewBag.RebuiltPartNum = rebuiltPartNum;
            var model = new List<BCES.Models.Parts.StockCodedPartsViewModel> { };

            return PartialView("_ScPartsUsedInRbParts", model);
           
        }

        public IActionResult LabourHourSummaryPartial([FromQuery] string rebuiltPartNum)
        {
            // Pass the rebuiltPartNum to the partial view
            ViewBag.RebuiltPartNum = rebuiltPartNum;
            var model = new List<BCES.Models.Parts.LabourDetailsRebuiltPartsViewModel> { };  
            return PartialView("_LabourHourSummaryRbParts", model);           
        }

        public IActionResult MaterialCostSummaryPartial([FromQuery] string rebuiltPartNum)
        {
            // Pass the rebuiltPartNum to the partial view
            ViewBag.RebuiltPartNum = rebuiltPartNum;
            var model = new List<BCES.Models.Parts.MaterialCostSummaryInRbViewModel> { };
            return PartialView("_MaterialCostSummaryinRbParts", model);
        }
        public IActionResult NscDetailsPartial([FromQuery] string rebuiltPartNum)
        {
            // Pass the rebuiltPartNum to the partial view
            ViewBag.RebuiltPartNum = rebuiltPartNum;
            var model = new List<BCES.Models.Parts.NscPartsUsedViewModel> { };

            return PartialView("_NscPartsUsedInRbParts", model);

        }

        public IActionResult RbDetailsPartial([FromQuery] string rebuiltPartNum)
        {
            // Pass the rebuiltPartNum to the partial view
            ViewBag.RebuiltPartNum = rebuiltPartNum;
            var model = new List<BCES.Models.Parts.RebuiltPartsViewModel> { };
            return PartialView("_RbPartsUsedInRbParts", model);
        }

        public IActionResult TotalCostPartial([FromQuery] string rebuiltPartNum)
        {
            // Pass the rebuiltPartNum to the partial view
            ViewBag.RebuiltPartNum = rebuiltPartNum;
            var model = new List<BCES.Models.Parts.TotalCostInRbModel> { };
            return PartialView("_TotalCostInRbParts", model);
        }

        [HttpPost]
        public IActionResult SaveDetails()
        {
            // Save logic here
            return Json(new { success = true, message = "Save Details successfully." });
        }

       
        [HttpPost]
        public IActionResult CancelDetails(int rebuiltPartNum)
        {
            try
            {
                // Return a success response
                return Json(new { success = true, message = "Changes discarded successfully." });
            }
            catch (Exception ex)
            {
                
                return Json(new { success = false, message = "An error occurred while discarding changes. Please try again." });
            }
        }

        //[HttpGet]
        //public async Task<IActionResult> ReadVehicles([DataSourceRequest] DataSourceRequest request)
        //{
        //    var sites = await GetVehicles();
        //    return Json(sites);
        //}

        //private async Task<IEnumerable<ListOfBusesModel>> GetVehicles()
        //{
        //    var query = "SELECT ListId, Description FROM SBCES.ListOfBuses";
        //    var vehicles = await _dbConnection.QueryAsync<ListOfBusesModel>(query);
        //    return vehicles.ToList();

        //}

        //[HttpPost]
        //public async Task<IActionResult> GetSelectedVehicles([FromBody] dynamic data)
        //{
        //    var sites = data?.sites?.ToObject<List<string>>() ?? Enumerable.Empty<string>();
        //   // _selectedSites = sites;
        //    var viewModel = new UserViewModel { SelectedSites = sites };
        //    return Json(viewModel);
        //}

        

       
        [HttpPost("ArchiveDetails")]
        public IActionResult ArchiveDetails([FromBody] RebuiltPartsViewModel rebuiltPartsViewModel)
        {
            try
            {
               
                // Return a success response
                return Json(new { success = true, message = "Archiving rebuilt part number: {RebuiltPartNum}", rebuiltPartsViewModel.RebuiltStockNum });
            }
            catch (Exception ex)
            {                
                return Json(new { success = false, message = "An error occurred while archiving. Please try again." });
            }
        }


/// /////////////////////////////////////////Start Save to Excel

        [HttpPost]
        public async Task<IActionResult> ExportToExcel(string rebuiltPartNum)
        {
            try
            {
                // Fetch data for the main grid
                var mainGridData = await GetRebuiltPartsData();

                // Fetch data for the subgrids
                var labourDetails = await GetLabourDetails(rebuiltPartNum);
                var labourHourSummary = await GetLabourHourSummary(rebuiltPartNum);
                var materialCostSummary = await GetMaterialCostSummary(rebuiltPartNum);
                var scParts = await GetScParts(rebuiltPartNum);
                var nscParts = await GetNscParts(rebuiltPartNum);
                var rbParts = await GetRbParts(rebuiltPartNum);
                var totalCost = await GetTotalCost(rebuiltPartNum);

                // Create Excel package
                using (var package = new ExcelPackage())
                {
                    // Add main grid data to the first sheet
                    var mainGridSheet = package.Workbook.Worksheets.Add("Main Grid");
                    mainGridSheet.Cells.LoadFromCollection(mainGridData, true);

                    // Add subgrid data to subsequent sheets
                    AddSheet(package, "Labour Details", labourDetails);
                    AddSheet(package, "Labour Hour Summary", labourHourSummary);
                    AddSheet(package, "Material Cost Summary", materialCostSummary);
                    AddSheet(package, "SC Parts", scParts);
                    AddSheet(package, "NSC Parts", nscParts);
                    AddSheet(package, "RB Parts", rbParts);
                    AddSheet(package, "Total Cost", totalCost);

                    // Save the Excel file to a temporary location
                    var filePath = Path.Combine(Path.GetTempPath(), $"{rebuiltPartNum}_Estimate.xlsx");
                    package.SaveAs(new FileInfo(filePath));

                    // Return the file URL for download
                    return Json(new { fileUrl = Url.Action("DownloadExcel", new { filePath = filePath }) });
                }
            }
            catch (Exception ex)
            {
                return StatusCode(500, "An error occurred while exporting to Excel.");
            }
        }

        private void AddSheet(ExcelPackage package, string sheetName, IEnumerable<object> data)
        {
            if (data != null && data.Any())
            {
                var sheet = package.Workbook.Worksheets.Add(sheetName);
                sheet.Cells.LoadFromCollection(data, true);
            }
        }

        public IActionResult DownloadExcel(string filePath)
        {
            var fileBytes = System.IO.File.ReadAllBytes(filePath);
            return File(fileBytes, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", Path.GetFileName(filePath));
        }

        private async Task<IEnumerable<LabourDetailsRebuiltPartsViewModel>> GetLabourDetails(string rebuiltPartNum)
        {
            var query = @"
                             DECLARE @RebuiltPartNumber VARCHAR(30) = '" + rebuiltPartNum + "'" +
                             @"
                            -- Declare variables for LinkCode and LinkType
                            DECLARE @LinkCode VARCHAR(30);
                            DECLARE @LinkType VARCHAR(5);

                            PRINT @LinkCode
                            PRINT @LinkType
                            -- Retrieve LinkCode and LinkType
                            PRINT 'Retrieving LinkCode and LinkType...';
                            SELECT DISTINCT 
                                @LinkCode = LinkCode,
                                @LinkType = LinkType
                            FROM 
                                [SBCES].[ScPartsUsed]
                            WHERE 
                                LinkCode = @RebuiltPartNumber;

                            -- If not found in ScPartsUsed, check NScPartsUsed
                            IF @LinkCode IS NULL
                            BEGIN
                                SELECT DISTINCT 
                                    @LinkCode = LinkCode,
                                    @LinkType = LinkType
                                FROM 
                                    [SBCES].[NScPartsUsed]
                                WHERE 
                                    LinkCode = @RebuiltPartNumber;
                            END

                            PRINT 'LinkCode: ' + ISNULL(@LinkCode, 'Not Found');
                            PRINT 'LinkType: ' + ISNULL(@LinkType, 'Not Found');

                            -- Check if LinkCode and LinkType were found
                            IF @LinkCode IS NULL OR @LinkType IS NULL
                            BEGIN
                                PRINT 'Error: LinkCode or LinkType not found for RebuiltPartNumber: ' + @RebuiltPartNumber;
                                RETURN;
                            END

                            -- Section 1: Labour Details
                            PRINT 'Fetching Labour Details...';
                            SELECT 
                                EL.LabourDefn AS [LabourType],
                                EL.CostCentre AS [CC],
                                EL.Task AS [Task],
                                REPLACE(EL.Usage, ',', '.') AS [Usage],
                                EL.HrsReqd AS [Time],
                                ES.RatePerHour AS [RATE PER HOUR],
                                EL.TimeAddition AS [TIME ADDITION]
                            FROM 
                                SBCES.EmployeeLabour EL
                                JOIN SBCES.EmplClass EC ON EL.LabourDefn = UPPER(EC.LabourDefn)
                                JOIN SBCES.EmployeeSalaries ES ON EC.WageGroup = ES.WageGroup
                            WHERE 
                                EL.LinkNumber = @LinkCode
                                AND EL.TypeId = @LinkType;

                            PRINT 'Labour Details fetched successfully.';
                                 ";

            return await _dbConnection.QueryAsync<LabourDetailsRebuiltPartsViewModel>(query, new { RebuiltPartNum = rebuiltPartNum });
        }

        private async Task<IEnumerable<LabourDetailsRebuiltPartsViewModel>> GetLabourHourSummary(string rebuiltPartNum)
        {
            var query = @"
        SELECT * FROM [SBCES].[LabourHourSummary]
        WHERE RebuiltStockNum = @RebuiltPartNum";
            return await _dbConnection.QueryAsync<LabourDetailsRebuiltPartsViewModel>(query, new { RebuiltPartNum = rebuiltPartNum });
        }

        private async Task<IEnumerable<MaterialCostSummaryInRbViewModel>> GetMaterialCostSummary(string rebuiltPartNum)
        {
            var query = @"
        SELECT * FROM [SBCES].[MaterialCostSummary]
        WHERE RebuiltStockNum = @RebuiltPartNum";
            return await _dbConnection.QueryAsync<MaterialCostSummaryInRbViewModel>(query, new { RebuiltPartNum = rebuiltPartNum });
        }

        private async Task<IEnumerable<StockCodedPartsViewModel>> GetScParts(string rebuiltPartNum)
        {
            var query = @"
        SELECT * FROM [SBCES].[ScPartsUsedInRbParts]
        WHERE RebuiltStockNum = @RebuiltPartNum";
            return await _dbConnection.QueryAsync<StockCodedPartsViewModel>(query, new { RebuiltPartNum = rebuiltPartNum });
        }

        private async Task<IEnumerable<NscPartsUsedViewModel>> GetNscParts(string rebuiltPartNum)
        {
            var query = @"
        SELECT * FROM [SBCES].[NscPartsUsedInRbParts]
        WHERE RebuiltStockNum = @RebuiltPartNum";
            return await _dbConnection.QueryAsync<NscPartsUsedViewModel>(query, new { RebuiltPartNum = rebuiltPartNum });
        }

        private async Task<IEnumerable<RebuiltPartsViewModel>> GetRbParts(string rebuiltPartNum)
        {
            var query = @"
        SELECT * FROM [SBCES].[RbPartsUsedInRbParts]
        WHERE RebuiltStockNum = @RebuiltPartNum";
            return await _dbConnection.QueryAsync<RebuiltPartsViewModel>(query, new { RebuiltPartNum = rebuiltPartNum });
        }

        private async Task<IEnumerable<TotalCostInRbModel>> GetTotalCost(string rebuiltPartNum)
        {
            var query = @"
        SELECT * FROM [SBCES].[TotalCostInRbParts]
        WHERE RebuiltStockNum = @RebuiltPartNum";
            return await _dbConnection.QueryAsync<TotalCostInRbModel>(query, new { RebuiltPartNum = rebuiltPartNum });
        }
/// /////////////////////////////////////////Start Save to Excel

        //[HttpPost]
        //public IActionResult Create(RebuiltPartsViewModel model)
        //{
        //    //using (var connection = new SqlConnection(_connectionString))
        //    //{
        //    //    var sql = @"INSERT INTO RebuiltParts (StockCode, Description, Keyword, JobNumber, MMSBuyCode, CoreCost, SOPNumber, BuyCost, RemanufacturedCost, IsActive) 
        //    //                VALUES (@StockCode, @Description, @Keyword, @JobNumber, @MMSBuyCode, @CoreCost, @SOPNumber, @BuyCost, @RemanufacturedCost, @IsActive)";
        //    //    connection.Execute(sql, model);
        //    //}
        //    return RedirectToAction("Index");
        //}

        //[HttpPost]
        //public IActionResult Update(RebuiltPartsViewModel model)
        //{
        //    using (var connection = new SqlConnection(_connectionString))
        //    {
        //        //var sql = @"UPDATE RebuiltParts 
        //        //            SET Description = @Description, Keyword = @Keyword, JobNumber = @JobNumber, MMSBuyCode = @MMSBuyCode,
        //        //                CoreCost = @CoreCost, SOPNumber = @SOPNumber, BuyCost = @BuyCost, RemanufacturedCost = @RemanufacturedCost, IsActive = @IsActive
        //        //            WHERE StockCode = @StockCode";
        //       //connection.Execute(sql, model);
        //    }
        //    return RedirectToAction("Index");
        //}


    }
}

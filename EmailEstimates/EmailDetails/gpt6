Exception on line : var attachment = new MimePart("application", "vnd.openxmlformats-officedocument.spreadsheetml.sheet")
System.IO.FileNotFoundException: 'Could not find file 'C:\Users\skanao\AppData\Local\Temp\1\035434_RebuiltParts_Estimate.xlsx'.'

Is it possible to save the file in the folder where application will have access? If the same name file already exists, delete the file first.
Other alternative is, insteaed ofsaving file locally and then attachng it to the email, can the excel file be saved in the memory first and then attach the file in the email?
Pls suggest wif I have any other alternative. Or generate the full files.
RebuitPartsController.cs :
[HttpPost]
public async Task<IActionResult> SendEmail(string to, string subject, string body, string rebuiltPartNum)
{
    try
    {
        // Generate the Excel file by calling SaveToExcel
        var filePath = Path.Combine(Path.GetTempPath(), $"{rebuiltPartNum}_RebuiltParts_Estimate.xlsx");

       
        // Send the email with the attached Excel file
        var message = new MimeMessage();
        message.From.Add(new MailboxAddress("Your Name", "your-email@example.com"));
        message.To.Add(new MailboxAddress("", to));
        message.Subject = subject;
        message.Body = new TextPart("plain") { Text = body };

        var attachment = new MimePart("application", "vnd.openxmlformats-officedocument.spreadsheetml.sheet")
        {
            Content = new MimeContent(System.IO.File.OpenRead(filePath)),
            ContentDisposition = new ContentDisposition(ContentDisposition.Attachment),
            ContentTransferEncoding = ContentEncoding.Base64,
            FileName = Path.GetFileName(filePath)
        };

        var multipart = new Multipart("mixed");
        multipart.Add(message.Body);
        multipart.Add(attachment);
        message.Body = multipart;

        using (var client = new SmtpClient())
        {
            await client.ConnectAsync("smtp.example.com", 587, SecureSocketOptions.StartTls);
            await client.AuthenticateAsync("your-email@example.com", "your-email-password");
            await client.SendAsync(message);
            await client.DisconnectAsync(true);
        }

        return Json(new { success = true });
    }
    catch (Exception ex)
    {
        // Log the exception (you can use a logging framework like Serilog or NLog)
        Console.WriteLine($"Error sending email: {ex.Message}");

        return Json(new { success = false, message = ex.Message });
    }
}

Step 1: Controller Action
Letâ€™s define a new controller method cleanly and with exception handling:

csharp
Copy
Edit
[HttpGet]
public IActionResult GetRbPartDetails(string rebuiltStockNum)
{
    try
    {
        if (string.IsNullOrWhiteSpace(rebuiltStockNum))
            return BadRequest("RebuiltStockNum is required.");

        var sql = @"
            SELECT TOP 1
                UPPER(B.CoreCost) AS CoreCharge,
                UPPER(C.detailedDesc) AS Description,
                UPPER(C.keyword) AS KeyWord
            FROM SBCES.ScPartsUsed B
            INNER JOIN SBCES.RbMasterlist C ON C.rebuiltStockNum = B.mmsRebuiltCode
            WHERE B.LinkType = 'BUS' 
              AND B.RebuiltStockNum = @RebuiltStockNum 
              AND B.RebuiltStockNum IS NOT NULL";

        var result = _dbConnection.QueryFirstOrDefault(sql, new { RebuiltStockNum = rebuiltStockNum });

        if (result == null)
            return NotFound("Part not found.");

        return Json(result);
    }
    catch (Exception ex)
    {
        // You can log the exception here if needed
        return StatusCode(500, "An error occurred while retrieving the data.");
    }
}
âœ… Step 2: JavaScript to Wire It Up
Add this script block in your view:

html
Copy
Edit
<script>
    function onRebuiltStockNumSelect(e) {
        var dataItem = this.dataItem(e.item.index());
        var rebuiltStockNum = dataItem.Text || dataItem.Value || dataItem.RebuiltStockNum;

        var grid = $("#RbPartsMaterialDetailsRebuiltPartsGrid").data("kendoGrid");
        var row = this.element.closest("tr");
        var data = grid.dataItem(row);

        // Reset values first
        data.set("CoreCharge", "");
        data.set("Description", "");
        data.set("KeyWord", "");

        if (rebuiltStockNum) {
            $.ajax({
                url: "/RbPartsUsedInEstimates/GetRbPartDetails",
                type: "GET",
                data: { rebuiltStockNum: rebuiltStockNum },
                success: function (result) {
                    if (result) {
                        data.set("CoreCharge", result.CoreCharge || "");
                        data.set("Description", result.Description || "");
                        data.set("KeyWord", result.KeyWord || "");
                    }
                },
                error: function (xhr) {
                    console.error("Error loading part details:", xhr.responseText);
                }
            });
        }
    }
</script>
âœ… Step 3: ComboBoxEditor Template (ComboBoxEditor.cshtml)
Make sure your ComboBoxEditor.cshtml used by RebuiltStockNum has the onRebuiltStockNumSelect event wired:

csharp
Copy
Edit
@model string

@(Html.Kendo().ComboBoxFor(m => m)
    .Name(ViewData.TemplateInfo.GetFullHtmlFieldName(""))
    .DataTextField("RebuiltStockNum")
    .DataValueField("RebuiltStockNum")
    .Filter("contains")
    .MinLength(2)
    .Placeholder("Enter Rebuilt Number...")
    .AutoBind(false)
    .Events(events => events.Select("onRebuiltStockNumSelect"))
    .DataSource(source => {
        source.Read(read => {
            read.Url("/AutoComplete/GetRebuiltStockNums"); // Adjust if needed
        });
    })
)
âœ… Step 4: Model Mapping in Grid
Make sure your gridâ€™s model includes all fields being populated:

csharp
Copy
Edit
model.Field(c => c.CoreCharge).Editable(true);
model.Field(c => c.Description).Editable(true);
model.Field(c => c.KeyWord).Editable(true);
âœ… Step 5: Bonus - Optional Reset on Edit
If you want to clear the fields when entering edit mode, wire up a grid event like this:

csharp
Copy
Edit
.Events(events => {
    events.Edit("onRbPartEdit");
})
And in JavaScript:

js
Copy
Edit
function onRbPartEdit(e) {
    var field = e.container.find("input[name='RebuiltStockNum']");
    if (field.length) {
        e.model.set("CoreCharge", "");
        e.model.set("Description", "");
        e.model.set("KeyWord", "");
    }
}
ðŸ§ª Test Plan

In the following code, I am using Telerik ASp.NET core grid. Grid uses InCell Edit.
RebuiltStockNum uses ComboBoxEditor and Autocomplete.
Based on RebuiltStockNum, I need to populate CoreCharge, Description and KeyWord columns by making a controller call. Input will be RebuiltStockNum. (Add a new)
For edit, when user clicks on RebuiltStockNum column, CoreCharge, Description and KeyWord columns should have no value.
Make sure column names match. Add exception handling

Shared/_RbPartsUsed.cshtml :
@model IEnumerable<BCES.Models.Parts.RebuiltPartsViewModel>

@{
    ViewData["Title"] = "Rebuilt Parts Used";
}

<h6>Rebuilt Parts Used</h6>

@(Html.Kendo().Grid<BCES.Models.Parts.RebuiltPartsViewModel>()
   
    .Name($"RbPartsMaterialDetailsRebuiltPartsGrid")
    .Columns(columns =>
    {
        //columns.Bound(c => c.RebuiltStockNum).Title("Rebuilt Number").Width(60);
        columns.Bound(c => c.Id).Title("Id").Hidden(true);
        columns.Bound(c => c.RebuiltStockNum).Title("Rebuilt Number").EditorTemplateName("ComboBoxEditor").Width(100);
        columns.Bound(c => c.MmsStockCode).Title("MMS Stock Code").EditorTemplateName("ComboBoxEditor").Width(70);
      
        columns.Bound(c => c.CoreCharge).Title("Unit Cost").Width(60);
        columns.Bound(c => c.Qty).Title("Qty").Width(40);
       
        columns.Bound(c => c.Percentage).Title("Percentage").Width(50);
       @*  columns.Bound(c => c.TotalCost).Title("TotalCost").Width(60); *@
        columns.Bound(c => c.Description).Title("Description").Width(70);
        columns.Bound(c => c.KeyWord).Title("KeyWord").Width(50);
        
        // columns.Bound(c => c.DateRevised).Title("Date Revised");
        //columns.Command(command => command.Edit()).Title("Actions");
        columns.Command(command =>
      {
          if (@ViewBag.RoleId == 1)
          {
              // command.Edit().Text(" ").IconClass("k-icon k-i-edit").HtmlAttributes(new { title = "Edit" }); // Edit button with tooltip
          }
          if (@ViewBag.RoleId == 1)
          {

              command.Custom("Delete")
               .Click("showDeleteConfirmation")
               .Text(" ")
               .IconClass("k-icon k-i-delete")
               .HtmlAttributes(new
               {
                   @class = "text-danger",
                   title = "Delete",
                   data_grid = $"RbPartsMaterialDetailsRebuiltPartsGrid",
                   data_url = Url.Action("DeleteRbPartsUsedInRbtParts", "RbPartsUsedInEstimates"),
                   data_id_field = "id",
                   //  data_mmsstockcode_field = "parentPartId",
                   data_grid_type = "NSCPartGrid"
               });
          }
      }).Width(100);
    })

    .ToolBar(toolbar =>
    {
        if (@ViewBag.RoleId == 1)
        {
            toolbar.Create();
            toolbar.Save();
        }
    })
    .Editable(editable => editable.Mode(GridEditMode.InCell))
    .Pageable()
    .Sortable()
    .Resizable(r => r.Columns(true))
    // .Scrollable()
    .DataSource(dataSource => dataSource
        .Ajax()
        .Model(model =>
        {
            model.Id(c => c.Id);
            model.Field(c => c.Id);
            model.Field(c => c.RebuiltStockNum);
        })

        .Read(read => read.Url(Url.Action("GetRbPartsUsedInEstimates", "RbPartsUsedInEstimates") + "?id=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Get))
        .Create(create => create.Url(Url.Action("CreateRbPartsUsedInEstimates", "RbPartsUsedInEstimates") + "?id=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Post))
        .Update(update => update.Url(Url.Action("UpdateRbPartsUsedInEstimates", "RbPartsUsedInEstimates") + "?id=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Post))
        .Destroy(delete => delete.Url(Url.Action("DeleteRbPartsUsedInRbtParts", "RbPartsUsedInEstimates") + "?rebuiltPartNum=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Post))
    )
)
Sample controller action in the application for your refrence :
 [HttpGet]
 public IActionResult GetRbDetails(string rebuiltNum)
 {
     if (string.IsNullOrEmpty(rebuiltNum))
         return BadRequest("rebuiltNum is required.");

     var sql = @"
                  SELECT
                         ROW_NUMBER() OVER (ORDER BY B.mmsRebuiltCode) AS Id,
                         UPPER(B.mmsRebuiltCode) AS RebuiltStockNum,
                         UPPER(B.MmsStockCode) AS MmsStockCode,
                         UPPER(B.CoreCost) AS CoreCharge,

                         --ISNULL(A.RbUnitCost, 0) AS UnitCost,
                         UPPER(B.costCentre) AS CC,
                         UPPER(B.qtyReqd) AS QTY,
                         REPLACE(B.percentUsage, ',', '.') AS Percentage,
                         B.coreCost AS TotalCost,
                         --ISNULL(A.RbCost, 0) AS TotalCost,
                         UPPER(C.detailedDesc) AS Description,
                         UPPER(C.keyword) AS KeyWord,
                         linkCode,
                         rebuiltPart,
                         linkType
                     FROM
                         SBCES.ScPartsUsed B
                         INNER JOIN SBCES.RbMasterlist C ON C.rebuiltStockNum = B.mmsRebuiltCode
                         where B.LinkType = 'BUS'
                         and B.RebuiltStockNum = '" + rebuiltNum + "' and RebuiltStockNum is not null";

     var result = _dbConnection.QueryFirstOrDefault(sql, new { RebuiltStockNum = rebuiltNum });
     return Json(result);
 }

In the following code 
1. In GetAutoCompleteData columnName is passed like RebuiltStockNum.RebuiltStockNum
2. Do we need GetRbPartDetails or is is duplicate of GetAutoCompleteData? If it is duplicate, I would like to keep and use GetAutoCompleteData
I need to populate Description, Keyword and CoreCharge when user has selected value in RebuiltStockNum.
Pls assist fixing the code. Add exception handling and logging for debigging in JS.
RbComboBox.cshtml :
@model object
@{
    var fieldName = ViewData.TemplateInfo.GetFullHtmlFieldName("");
}
@(Html.Kendo().ComboBox()
    .Name(fieldName)
    .DataTextField("")
    .DataValueField("")
    .Filter("contains")
    .MinLength(2)
    .Placeholder("Enter Rebuilt Number...")
    .AutoBind(false)
    .Events(events => events.Select("onRebuiltStockNumSelect"))
    .DataSource(source =>
    {
        source.Read(read =>
        {
            read.Url(Url.Action("GetAutoCompleteData", "AutoComplete"))
                .Type(HttpVerbs.Get)
                .Data("getComboBoxParams");
        })
        .ServerFiltering(true);
    })   
)
JS :
 function getComboBoxParams() {
     var input = $(".k-combobox input.k-input:focus");
     return {
         columnName: input.attr("name")?.replace("_input", ""),
         searchText: input.val() || ""
     };
 }
function onRebuiltStockNumSelect(e) {
    console.log("%%%%%% Inside onRebuiltStockNumSelect");
    var dataItem = this.dataItem(e.item.index());
    var rebuiltStockNum =  dataItem.RebuiltStockNum;
   

    var grid = $("#RbPartsMaterialDetailsRebuiltPartsGrid_{ViewBag.PartNum}").data("kendoGrid");
    var row = this.element.closest("tr");
    var data = grid.dataItem(row);
    console.log("%%%%%% Inside onRebuiltStockNumSelect : rebuiltStockNum :", rebuiltStockNum);


    // Reset values first
    data.set("CoreCharge", "");
    data.set("Description", "");
    data.set("KeyWord", "");

    if (rebuiltStockNum) {
        $.ajax({
            url: "/AutoComplete/GetRbPartDetails",
            type: "GET",
            data: { rebuiltStockNum: rebuiltStockNum },
            success: function (result) {
                if (result) {
                    data.set("CoreCharge", result.CoreCharge || "");
                    data.set("Description", result.Description || "");
                    data.set("KeyWord", result.KeyWord || "");
                }
            },
            error: function (xhr) {
                console.error("Error loading part details:", xhr.responseText);
            }
        });
    }
}
AutoCompleteController.cs :
[HttpGet]
public IActionResult GetAutoCompleteData(string columnName, string searchText)
{
    try
    {
        // 1. Validate parameters
        if (string.IsNullOrEmpty(columnName))
            return BadRequest("Column name is required.");

    
        using (var connection = _dbConnection)
        {
            var sql = "";
            if (columnName == "RebuiltStockNum")
            {
                sql = $@"
                            SELECT distinct 
                              [MmsStockCode] AS Text     
                          FROM [CES].[SBCES].[ScPartsUsed]
                          where RebuiltPart = 'Y'
                          AND [MmsStockCode] LIKE @SearchText + '%'
                       ";
            }  

            var results = connection.Query<string>(sql, new { SearchText = searchText ?? "" });

            // Wrap results in objects with "Text" property
            var data = results.Select(x => new { Text = x }).ToList();
            return Json(data);

        }
    }}
  [HttpGet]
 public IActionResult GetRbPartDetails(string rebuiltStockNum)
 {
     try
     {
         if (string.IsNullOrWhiteSpace(rebuiltStockNum))
             return BadRequest("RebuiltStockNum is required.");

         var sql = @"
                 SELECT TOP 1
                     UPPER(B.CoreCost) AS CoreCharge,
                     UPPER(C.detailedDesc) AS Description,
                     UPPER(C.keyword) AS KeyWord
                 FROM SBCES.ScPartsUsed B
                 INNER JOIN SBCES.RbMasterlist C ON C.rebuiltStockNum = B.mmsRebuiltCode
                 WHERE B.LinkType = 'BUS' 
                   AND B.RebuiltStockNum = @RebuiltStockNum 
                   AND B.RebuiltStockNum IS NOT NULL";

         var result = _dbConnection.QueryFirstOrDefault(sql, new { RebuiltStockNum = rebuiltStockNum });

         if (result == null)
             return NotFound("Part not found.");

         return Json(result);
     }
     catch (Exception ex)
     {
         // You can log the exception here if needed
         return StatusCode(500, "An error occurred while retrieving the data.");
     }
 }

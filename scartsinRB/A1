Here's the complete implementation with Kendo notifications and a refresh button column:

html
Copy
@model IEnumerable<BCES.Models.Parts.StockCodedPartsViewModel>

@{
    ViewData["Title"] = "Stock Coded Parts Details";
}

<h6>Stock Coded Parts Used</h6>

@(Html.Kendo().Grid<BCES.Models.Parts.StockCodedPartsViewModel>()
    .Name("ScPartsMaterialDetailsRebuiltPartsGrid")
    .Columns(columns =>
    {
        columns.Bound(c => c.MMSStockCode).Title("Stock Code");
        columns.Bound(c => c.PartType).Title("Part Type");
        columns.Bound(c => c.Keyword).Title("Keyword").Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).EditorTemplateName("AutoCompleteEditor");
        columns.Bound(c => c.DetailedDesc).Title("Part Description");
        columns.Bound(c => c.CC).Title("CC").Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).EditorTemplateName("AutoCompleteEditor");
        columns.Bound(c => c.UnitCost).Title("Unit Cost");
        columns.Bound(c => c.Qty).Title("Qty");
        columns.Bound(c => c.Percentage).Title("Percentage Used");
        columns.Bound(c => c.CoreCost).Title("Core Cost").Format("{0:N2}");
       
        columns.Command(command =>
        {
            command.Custom("Refresh").Click("refreshPartDetails").IconClass("k-i-reload").HtmlAttributes(new { @class = "k-button k-button-icontext" });
            if (@ViewBag.RoleId == 1)
            {
                command.Destroy().Text(" ").IconClass("k-icon k-i-delete").HtmlAttributes(new { title = "Delete" });
            }
        }).Width(200);
    })
    .ToolBar(toolbar =>
    {
        toolbar.Template(@<text>
            <div id="notification"></div>
            @if (@ViewBag.RoleId == 1)
            {
                <a class='k-button k-button-icontext k-grid-add' href='#'><span class='k-icon k-i-add'></span>Add new record</a>
                <a class='k-button k-button-icontext k-grid-save-command' href='#'><span class='k-icon k-i-save'></span>Save Changes</a>
            }
        </text>);
    })
    .Editable(editable => editable.Mode(GridEditMode.InCell))
    .Pageable()
    .Sortable()
    .DataSource(dataSource => dataSource
        .Ajax()
        .Batch(true)
        .ServerOperation(false)
        .Model(model =>
        {
            model.Id(c => c.MMSStockCode);
            model.Field(c => c.PartType).Editable(false);
            model.Field(c => c.DetailedDesc).Editable(false);
        })
        .Events(events => events.Error("onGridError"))
        .Read(read => read.Url(Url.Action("GetScPartsUsedInRbParts", "ScPartsUsedInRbParts") + "?rebuiltPartNum=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Get))
        .Create(create => create.Url(Url.Action("CreateScPartsUsedInRbtParts", "ScPartsUsedInRbParts")).Type(HttpVerbs.Post))
        .Update(update => update.Url(Url.Action("UpdateScPartsUsedInRbtParts", "ScPartsUsedInRbParts") + "?rebuiltPartNum=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Post))
        .Destroy(delete => delete.Url(Url.Action("DeleteScPartsUsedInRbtParts", "ScPartsUsedInRbParts") + "?rebuiltPartNum=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Post))
    )
)

<script>
    // Initialize Kendo notification
    var notification = $("#notification").kendoNotification({
        position: {
            pinned: true,
            top: 20,
            right: 20
        },
        autoHideAfter: 5000,
        stacking: "down"
    }).data("kendoNotification");

    function refreshPartDetails(e) {
        var grid = $("#ScPartsMaterialDetailsRebuiltPartsGrid").data("kendoGrid");
        var dataItem = grid.dataItem($(e.currentTarget).closest("tr"));
        
        if (!dataItem.MMSStockCode) {
            notification.show("Please enter a valid Stock Code before refreshing", "error");
            return;
        }

        $.ajax({
            url: '@Url.Action("GetPartDetails", "ScPartsUsedInRbParts")',
            data: { mmsStockCode: dataItem.MMSStockCode },
            beforeSend: function() {
                notification.show("Fetching part details...", "info");
            },
            success: function(response) {
                if (response && response.PartType && response.DetailedDesc) {
                    dataItem.set("PartType", response.PartType);
                    dataItem.set("DetailedDesc", response.DetailedDesc);
                    grid.refresh();
                    notification.show("Part details updated successfully", "success");
                } else {
                    notification.show("No matching parts found for this Stock Code", "warning");
                }
            },
            error: function(xhr) {
                var errorMessage = xhr.status === 404 
                    ? "Stock Code not found in system" 
                    : "Error retrieving part details";
                notification.show(errorMessage, "error");
            }
        });
    }

    function onGridError(e) {
        if (e.errors) {
            var message = "There was an error processing your request:";
            for (var key in e.errors) {
                if (e.errors.hasOwnProperty(key)) {
                    message += "\n" + e.errors[key].errors.join("\n");
                }
            }
            notification.show(message, "error");
        }
    }
</script>
Run HTML
ScPartsUsedInRbPartsController.cs updates:

csharp
Copy
[HttpGet]
public async Task<IActionResult> GetPartDetails(string mmsStockCode)
{
    if (string.IsNullOrEmpty(mmsStockCode))
    {
        return NotFound("Stock Code is required");
    }

    try
    {
        var query = @"
            SELECT TOP 1 
                PartType, 
                DetailedDescn AS DetailedDesc 
            FROM SBCES.StockCodedParts 
            WHERE MMSStockCode = @mmsStockCode";

        using (var connection = _db.CreateConnection())
        {
            var result = await connection.QueryFirstOrDefaultAsync(query, new { mmsStockCode });
            
            if (result == null)
            {
                return NotFound(new { Message = "Stock Code not found" });
            }

            return Ok(new {
                PartType = result.PartType,
                DetailedDesc = result.DetailedDesc
            });
        }
    }
    catch (Exception ex)
    {
        // Log error here
        return StatusCode(500, new { Message = "Error retrieving part details" });
    }
}
Key improvements in this implementation:

Kendo Notification System

Dedicated notification area at top-right

Different message types (success, error, warning, info)

Auto-hide after 5 seconds with proper stacking

Enhanced Error Handling

Server-side 404 handling for missing stock codes

Database query timeouts handled gracefully

Batch error handling through onGridError

User Feedback

Loading notifications during AJAX calls

Success confirmation after updates

Warning for missing stock codes

Security Improvements

TOP 1 in SQL query to prevent multiple returns

Parameterized queries for SQL injection prevention

Proper HTTP status codes from controller

UI Consistency

Kendo-styled refresh button with reload icon

Disabled editing for auto-populated fields

Proper grid toolbar layout

To complete the implementation:

Add these styles to your CSS:

css
Copy
.k-notification-error, .k-notification-success, .k-notification-warning, .k-notification-info {
    white-space: pre-wrap;
    max-width: 300px;
}
Make sure your StockCodedPartsViewModel has these properties:

csharp
Copy
public class StockCodedPartsViewModel
{
    public string MMSStockCode { get; set; }
    public string PartType { get; set; }
    public string DetailedDesc { get; set; }
    // ... rest of properties ...
}
This implementation provides:

Full auditability through notifications

Batch-safe refresh operations

Proper error handling at all levels

Consistent UI experience

Secure database access patterns

New chat

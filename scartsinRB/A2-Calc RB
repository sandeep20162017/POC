2. Retrieve the 'data-field' attribute from the cell element.

3. Use this field name to check if it's one of the critical fields (Percentage, Qty, OemPartCost).

This approach should resolve the undefined 'cell' issue and correctly identify the edited field without relying on error-prone parsing of the 'data-bind' attribute.

(Due to technical issues, the search service is temporarily unavailable.)

Let's fix the field detection using proper Telerik/Kendo Grid attributes and event arguments:

1. Update the CellClose Handler:

javascript
Copy
function onCellClose(e) {
    // Get the cell element from event arguments
    const $cell = e.container;
    
    // Get field name from data-field attribute
    const fieldName = $cell.attr("data-field");
    
    // Fields that require recalculation
    const criticalFields = ["Percentage", "Qty", "OemPartCost"];
    
    if (criticalFields.includes(fieldName)) {
        const dataItem = e.model;
        dataItem.set("needsRecalculation", true);
        showNotification("info", "Please recalculate Total Cost");
    }
}
2. Remove the getFieldNameFromCell Helper Function
(No longer needed as we're using direct attribute access)

3. Verify Grid Column Configuration:
Ensure your columns are properly bound with .Bound():

cshtml
Copy
columns.Bound(c => c.Percentage).Title("Percentage").Width(30);
columns.Bound(c => c.Qty).Title("Qty").Width(30);
columns.Bound(c => c.OemPartCost).Title("Part Cost").Width(30);
4. Add data-field Attributes (if missing):
For command columns, explicitly set the field:

cshtml
Copy
columns.Command(command =>
{
    command.Custom("Recalculate")
        .Click("recalculateTotalCost")
        .HtmlAttributes(new { @class = "k-grid-recalculate" });
}).Attr("data-field", "Commands");

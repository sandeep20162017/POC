Update the Grid Columns in cshtml:
Add the new Recalculate button column before the TotalCost column.

cshtml
Copy
columns.Bound(c => c.CoreCost).Title("Core Cost").Width(30);
columns.Command(command =>
{
    command.Custom(" ").Click("recalculateTotalCost").IconClass("k-i-refresh").HtmlAttributes(new { title = "Recalculate Total Cost", @class = "k-button k-button-icontext" });
}).Width(10);
columns.Bound(c => c.TotalCost).Title("Total Cost").Width(30).Editable(false);
2. Add Notification Div in cshtml:

cshtml
Copy
<div id="notification"></div>
3. Add Client-Side Scripts in cshtml:

javascript
Copy
<script>
    var rebuiltPartNum = '@ViewBag.PartNum';

    function recalculateTotalCost(e) {
        e.preventDefault();
        var grid = $("#NscPartsMaterialDetailsRebuiltPartsGrid").data("kendoGrid");
        var dataItem = grid.dataItem($(e.currentTarget).closest("tr"));

        var percentage = parseFloat(dataItem.Percentage?.replace(/,/g, '.')) || 0;
        var qty = parseFloat(dataItem.Qty?.replace(/,/g, '.')) || 0;
        var oemPartCost = dataItem.OemPartCost || 0;

        $.ajax({
            url: '@Url.Action("RecalculateTotalCost", "NscPartsUsedInRbParts")',
            type: 'POST',
            data: {
                percentage: percentage,
                qty: qty,
                oemPartCost: oemPartCost
            },
            success: function (response) {
                if (response.totalCost !== undefined) {
                    dataItem.set("TotalCost", response.totalCost);
                    dataItem.set("needsRecalculation", false);
                    grid.refresh();
                    showNotification("success", "Total Cost recalculated successfully.");
                } else if (response.message) {
                    showNotification("error", response.message);
                }
            },
            error: function (xhr) {
                var message = xhr.responseJSON && xhr.responseJSON.message ? xhr.responseJSON.message : "An error occurred during recalculation.";
                showNotification("error", message);
            }
        });
    }

    function onEdit(e) {
        if (["Percentage", "Qty", "OemPartCost"].includes(e.field)) {
            e.model.set("needsRecalculation", true);
            showNotification("info", "Please recalculate Total Cost after modifying " + e.field + ".");
        }
    }

    function onSave(e) {
        var grid = e.sender;
        var dataItems = grid.dataSource.data();
        var needsRecalculation = dataItems.some(item => item.needsRecalculation);
        
        if (needsRecalculation) {
            e.preventDefault();
            showNotification("error", "You must recalculate Total Cost for modified rows before saving.");
        }
    }

    function showNotification(type, message) {
        var notification = $("#notification").data("kendoNotification");
        if (!notification) {
            notification = $("#notification").kendoNotification({
                position: { pinned: true, top: 50, right: 50 },
                autoHideAfter: 5000
            }).data("kendoNotification");
        }
        notification.show(message, type);
    }
</script>
4. Add RecalculateTotalCost Action in Controller:

csharp
Copy
[HttpPost]
public async Task<IActionResult> RecalculateTotalCost(decimal percentage, decimal qty, decimal oemPartCost)
{
    try
    {
        string sql = "SELECT SBCES.FINALCOST(@Percentage, @Qty, @OemPartCost, 0) AS TotalCost";
        
        using (var connection = _db.CreateConnection())
        {
            var totalCost = await connection.ExecuteScalarAsync<decimal>(sql, new { 
                Percentage = percentage, 
                Qty = qty, 
                OemPartCost = oemPartCost 
            });
            return Ok(new { TotalCost = totalCost });
        }
    }
    catch (Exception ex)
    {
        return BadRequest(new { Message = ex.Message });
    }
}
5. Update Grid Events in cshtml:

cshtml
Copy
.Events(events =>
{
    events.Edit("onEdit");
    events.Save("onSave");
    events.RequestEnd("onRequestEnd");
    events.Error("onDataSourceError");
})
6. Update DataSource Model in cshtml:
Add the needsRecalculation field to track dirty state:

cshtml
Copy
.Model(model =>
{
    model.Id(c => c.OrigSuppNum);
    model.Field(c => c.OrigSupplierName).Editable(true);
    model.Field(c => c.OrigSuppNum).Editable(true);
    model.Field(c => c.OemPartCost).Editable(true);
    model.Field(c => c.TotalCost).Editable(false);
    model.Field("needsRecalculation", typeof(bool)).DefaultValue(false);
})
Key Features Implemented:

You  are ASP.NET core V8 and Telerik ASP.NET core expert
Based on below insert, generate Update and delete controller functions (table below). Where clause should be using rebuitpart  passed in query string
ScPartsUsedinRBParts.cshtml :
LastUpdated by use datetime today
Last updated by or updated by use ViewBag.UserADID

@model IEnumerable<BCES.Models.Parts.StockCodedPartsViewModel>

@{
    ViewData["Title"] = "Stock Coded Parts Details";
}

<h6>Stock Coded Parts Used</h6>

@(Html.Kendo().Grid<BCES.Models.Parts.StockCodedPartsViewModel>()
    .Name("ScPartsMaterialDetailsRebuiltPartsGrid")
    .Columns(columns =>
    {
        columns.Bound(c => c.MMSStockCode).Title("Stock Code");
        columns.Command(command =>
        {
            command.Custom(" ").Click("refreshPartDetails").IconClass("k-i-reload").HtmlAttributes(new { @class = "k-button k-button-icontext" });
           
        }).Width(0);
      //  columns.Bound(c => c.PartType).Title("Part Type");
      //  columns.Bound(c => c.Keyword).Title("Keyword").Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).EditorTemplateName("AutoCompleteEditor");
     //   columns.Bound(c => c.DetailedDesc).Title("Part Description");
        columns.Bound(c => c.CC).Title("CC").Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).EditorTemplateName("AutoCompleteEditor");
        columns.Bound(c => c.UnitCost).Title("Unit Cost");
        columns.Bound(c => c.Qty).Title("Qty");
        columns.Bound(c => c.Percentage).Title("Percentage Used");
        columns.Bound(c => c.CoreCost).Title("Core Cost").Format("{0:N2}");
      
       
        // columns.Bound(c => c.DateRevised).Title("Date Revised");
        columns.Command(command =>
        {
            if (@ViewBag.RoleId == 1)
            {
               // command.Edit().Text(" ").IconClass("k-icon k-i-edit").HtmlAttributes(new { title = "Edit" }); // Edit button with tooltip
            }
            if (@ViewBag.RoleId == 1)
            {

                command.Destroy().Text(" ").IconClass("k-icon k-i-delete").HtmlAttributes(new { title = "Delete" }); // Delete button with tooltip
            }
        }).Width(200);
    })
     .ToolBar(toolbar =>
    {
        if (@ViewBag.RoleId == 1)
        {
            toolbar.Create();
            toolbar.Save();
        }
    })
    .Editable(editable => editable.Mode(GridEditMode.InCell))
    .Pageable()
    .Sortable()

    //.Scrollable()
    .DataSource(dataSource => dataSource
        .Ajax()
        .Batch(true)
        .ServerOperation(false)
        .Model(model =>
        {
            model.Id(c => c.MMSStockCode); 
            model.Field(c => c.MMSStockCode);
         //   model.Field(c => c.PartType).Editable(false);
         //   model.Field(c => c.DetailedDesc).Editable(false);
        })

        .Events(events =>
        {
            events.RequestEnd("onRequestEnd");
            events.Error("onDataSourceError");
        })

        .Read(read => read.Url(Url.Action("GetScPartsUsedInRbParts", "ScPartsUsedInRbParts") + "?rebuiltPartNum=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Get))
        .Create(create => create.Url(Url.Action("CreateScPartsUsedInRbtParts", "ScPartsUsedInRbParts") + "?rebuiltPartNum=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Post))
        .Update(update => update.Url(Url.Action("UpdateScPartsUsedInRbtParts", "ScPartsUsedInRbParts") + "?rebuiltPartNum=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Post))
        .Destroy(delete => delete.Url(Url.Action("DeleteScPartsUsedInRbtParts", "ScPartsUsedInRbParts") + "?rebuiltPartNum=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Post))
    )
)

@(Html.Kendo().Dialog()
    .Name("partDetailsDialog")
    .Title("Part Details")
    .Width(400)
    .Modal(true)
    .Visible(false)
    .Actions(actions =>
    {
        actions.Add().Text("Close").Primary(true);
    })
)

Controller :
 [HttpPost]
 [AllowAnonymous]
 public async Task<IActionResult> CreateScPartsUsedInRbtParts(
      [DataSourceRequest] DataSourceRequest request,
      [Bind(Prefix = "models")] IEnumerable<StockCodedPartsViewModel> models,
      [FromQuery] string rebuiltPartNum,
      [FromQuery] string gridType)
 {
     if (!ModelState.IsValid)
     {
         return Json(models.ToDataSourceResult(request, ModelState));
     }

     _dbConnection.Open();

     using var transaction = _dbConnection.BeginTransaction();
     try
     {
         // Get values from ViewBag and system
         var enteredBy = ViewBag.UserADId?.ToString().ToUpper() ?? "SYSTEM";
         var dateEntered = DateTime.Now;
         var linkCode = ViewBag.MMsCode?.ToString().ToUpper() ?? "DEFAULT_CODE";
         var linkType = "RB";
         var isRebuiltPart = 'N';

         foreach (var model in models)
         {
             var parameters = new DynamicParameters();

             // Convert all string values to uppercase
             parameters.Add("MMSStockCode", model.MMSStockCode?.ToUpperInvariant());
             parameters.Add("CC", model.CC?.ToUpperInvariant() ?? " ");
             parameters.Add("CorePartNumber", model.CorePartNumber?.ToUpperInvariant() ?? " ");
             parameters.Add("EnteredBy", enteredBy);
             parameters.Add("DateEntered", dateEntered);
             parameters.Add("LinkCode", linkCode);
             parameters.Add("LinkType", linkType);
             parameters.Add("RebuiltPartNum", rebuiltPartNum);
             parameters.Add("IsRebuiltPart", isRebuiltPart);

             // Decimal values with defaults
             parameters.Add("UnitCost", model.UnitCost ?? 0m);
             parameters.Add("MmsNewCost", model.MmsNewCost ?? 0m);
             parameters.Add("CoreCost", model.CoreCost ?? 0m);
             parameters.Add("RebPartCost", model.PartCost ?? 0m);

             // String values with uppercase conversion and defaults
             parameters.Add("Qty", (model.Qty ?? "0").ToUpperInvariant());
             parameters.Add("Percentage", (model.Percentage ?? "0").ToUpperInvariant());

             var sql = @"
                     INSERT INTO SBCES.SCPartsUsed (
                         MMSStockCode, DateEntered, EnteredBy, MMSCost, OEMCost,
                         LastModifiedBy, LastModifiedDate, CostCentre, QtyReqd,
                         PercentUsage, LinkCode, RebuiltPart, LinkType, MMSRebuiltCode,
                         CoreCost, RebPartCost
                     ) VALUES (
                         UPPER(@MMSStockCode), 
                         @DateEntered, 
                         UPPER(@EnteredBy),
                         @UnitCost, 
                         @MmsNewCost,
                         UPPER(@EnteredBy), 
                         @DateEntered, 
                         UPPER(@CC),
                         UPPER(@Qty), 
                         UPPER(@Percentage),
                         UPPER(@LinkCode), 
                         UPPER(@IsRebuiltPart), 
                         UPPER(@LinkType),
                         UPPER(@RebuiltPartNum), 
                         @CoreCost,
                         @RebPartCost
                     )";

             await _dbConnection.ExecuteAsync(sql, parameters, transaction);
         }

         transaction.Commit();
         return Json(models.ToDataSourceResult(request));
     }
     catch (SqlException sqlEx)
     {
         transaction.Rollback();
         ModelState.AddModelError("", $"Database error: {sqlEx.Message}");
         return Json(models.ToDataSourceResult(request, ModelState));
     }
     catch (Exception ex)
     {
         transaction.Rollback();
         ModelState.AddModelError("", $"Unexpected error: {ex.Message}");
         return Json(models.ToDataSourceResult(request, ModelState));
     }
 }

 [AcceptVerbs("Post")]
 public ActionResult UpdateScPartsUsedInRbtParts([DataSourceRequest] DataSourceRequest request, [Bind(Prefix = "models")] IEnumerable<StockCodedPartsViewModel> models)
 {
     if (models != null && ModelState.IsValid)
     {
         foreach (var model in models)
         {
             UpdateScPartData(model);
         }
     }

     return Json(models.ToDataSourceResult(request, ModelState));
 }

 [AllowAnonymous]
 public IActionResult UpdateScPartData(StockCodedPartsViewModel model)

 {
     if (ModelState.IsValid)
     {
         try
         {
             //string query = @"
             //                UPDATE SBCES.StockPartUsed
             //                SET 
             //                    LABOURDEFN = @LabourDefn,
             //                    COSTCENTRE = @CostCentre,
             //                    TASK = @Task,
             //                    USAGE = @Usage,
             //                    HRSREQD = @HrsReqd,
             //                    REBUILTPARTNUM = @LinkNumber 
             //                WHERE Id = @Id";

             //var parameters = new
             //{
             //    model.LabourDefn,
             //    model.CostCentre,
             //    model.Task,
             //    model.Usage,
             //    model.HrsReqd,
             //    model.LinkNumber, // From query parameter
             //    model.Id
             //};

             //_dbConnection.Execute(query, parameters);
         }
         catch (Exception e)
         {
         }
     }
     return Json(ModelState);
 }

 [HttpPost]
 [AllowAnonymous]
 public IActionResult DeleteScPartsUsedInRbtParts([DataSourceRequest] DataSourceRequest request, StockCodedPartsViewModel model)
 {
     //var existing = _data.FirstOrDefault(m => m.LabourType == model.LabourType);
     //if (existing != null)
     //{
     //    _data.Remove(existing);
     //}
     //return Json(new[] { model }.ToDataSourceResult(request, ModelState));
     return null;
 }
SQL schema :
SELECT TOP (1000) [Id]
      ,[MmsStockCode]
      ,[DateEntered]
      ,[RebPartCost]
      ,[EnteredBy]
      ,[MmsCost]
      ,[OemCost]
      ,[LastModifiedBy]
      ,[LastModifiedDate]
      ,[MmsRebuiltCode]
      ,[CostCentre]
      ,[QtyReqd]
      ,[PercentUsage]
      ,[LinkCode]
      ,[RebuiltPart]
      ,[LinkType]
      ,[CoreCost]
      ,[OrigSupNum]
      ,[OrigSupplierName]
  FROM [CES].[SBCES].[ScPartsUsed]


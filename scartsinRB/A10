cshtml
Copy
@(Html.Kendo().Grid<RebuiltPartsViewModel>()
    .Name("RebuiltPartsGrid")
    .Columns(columns =>
    {
        // Existing columns...

        // Cost Saving Per Unit (non-editable)
        columns.Bound(p => p.CostSavingPerUnitDummy)
            .Title("Cost Saving Per Unit")
            .ClientTemplate("#= calculateCostSaving(data) #")
            .Width(150);

        // Percentage Saving Per Unit (non-editable)
        columns.Bound(p => p.PercentageSavingPerUnitDummy)
            .Title("Percentage Saving Per Unit")
            .ClientTemplate("#= calculatePercentageSaving(data) #")
            .Width(150);

        // Rest of columns...
    })
    .Editable(editable => editable.Mode(GridEditMode.InCell))
    .DataSource(dataSource => dataSource
        .Ajax()
        .Model(model =>
        {
            model.Id(c => c.RbMasterlistId);
            model.Field(f => f.CostSavingPerUnitDummy).Editable(false); // Explicitly non-editable
            model.Field(f => f.PercentageSavingPerUnitDummy).Editable(false); // Explicitly non-editable
            // Rest of model configuration
        })
        // Rest of data source config
    )
    // Rest of configuration
)
Key Fixes:
Model Configuration: Mark dummy fields as non-editable in the grid's model

Remove Column-Level Editable: Use model configuration instead of column settings

Keep Client Templates: Maintain calculation logic

Full Implementation Steps:
1. Update View Model:

csharp
Copy
public class RebuiltPartsViewModel
{
    [NotMapped]
    public string CostSavingPerUnitDummy { get; set; }

    [NotMapped]
    public string PercentageSavingPerUnitDummy { get; set; }

    // Rest of your properties
}
2. Configure Grid Model:

cshtml
Copy
.DataSource(dataSource => dataSource
    .Ajax()
    .Model(model =>
    {
        model.Id(c => c.RbMasterlistId);
        model.Field(f => f.CostSavingPerUnitDummy).Editable(false);
        model.Field(f => f.PercentageSavingPerUnitDummy).Editable(false);
        // Other model fields
    })
)
3. JavaScript Calculations (unchanged):

javascript
Copy
<script>
    function parseCurrency(value) {
        try {
            if (!value) return 0;
            const num = Number(value.replace(/[^0-9.-]/g, ''));
            return isNaN(num) ? 0 : num;
        } catch (e) {
            showError(`Currency error: ${e.message}`);
            return 0;
        }
    }

    function calculateCostSaving(data) {
        const buyNew = parseCurrency(data.BuyNewCost);
        const reman = parseCurrency(data.RemanCost);
        const saving = buyNew - reman;
        return saving < 0 ? `(${Math.abs(saving).toFixed(2)})` : saving.toFixed(2);
    }

    function calculatePercentageSaving(data) {
        const buyNew = parseCurrency(data.BuyNewCost);
        const reman = parseCurrency(data.RemanCost);
        const saving = buyNew - reman;
        
        if (buyNew <= 0) return '0.00%';
        const percentage = (saving / buyNew) * 100;
        return percentage < 0 ? `(${Math.abs(percentage).toFixed(2)})%` : percentage.toFixed(2) + '%';
    }
</script>
4. CSS for Visual Indication:

css
Copy
.k-edit-cell .non-editable {
    background-color: #f5f5f5;
    pointer-events: none;
}
Why This Works:
Model-Level Configuration: The Editable(false) in model definition tells the grid these fields should never be edited

InCell Mode Compatibility: Works with GridEditMode.InCell by preventing editor activation

Server-Side Safety: Dummy fields are marked [NotMapped] to prevent database persistence

Client-Side Behavior: Calculations update automatically when related fields change

Additional Validation:
Add this to prevent accidental edits through JavaScript:

javascript
Copy
$(document).ready(function() {
    $("#RebuiltPartsGrid").data("kendoGrid").bind("edit", function(e) {
        if (e.model.hasOwnProperty("CostSavingPerUnitDummy") || 
            e.model.hasOwnProperty("PercentageSavingPerUnitDummy")) {
            setTimeout(function() {
                $("#RebuiltPartsGrid").data("kendoGrid").closeCell();
            });
        }
    });
});
This solution ensures:

using Dapper;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Threading.Tasks;
using Telerik.DataSource;

public class YourController : Controller
{
    private readonly string _connectionString;

    // Inject IConfiguration to get connection string
    public YourController(IConfiguration config)
    {
        _connectionString = config.GetConnectionString("YourConnectionStringName");
    }

    [HttpPost]
    public async Task<IActionResult> CreateLabourDetail(
        [DataSourceRequest] DataSourceRequest request,
        [Bind(Prefix = "models")] IEnumerable<LabourDetailsRebuiltPartsViewModel> models,
        [FromQuery] string rebuiltPartNum,
        [FromQuery] string gridType)
    {
        if (!ModelState.IsValid)
        {
            return Json(models.ToDataSourceResult(request, ModelState));
        }

        // Create and manage connection locally
        using (var connection = new SqlConnection(_connectionString))
        {
            await connection.OpenAsync(); // Async open

            using (var transaction = await connection.BeginTransactionAsync())
            {
                try
                {
                    foreach (var model in models)
                    {
                        const string query = @"
                            INSERT INTO SBCES.EMPLOYEELABOUR (
                                LABOURDEFN, DATEENTERED, LINKNUMBER, TYPEID, 
                                COSTCENTRE, TASK, LABOURTYPE, USAGE, HRSREQD, 
                                ADJHRS, DATEREVISED, TIMEADDITION, REBUILTPARTNUM, LASTMODIFIEDBY
                            ) VALUES (
                                @LabourDefn, @DateEntered, @LinkNumber, @TypeId,
                                @CostCentre, @Task, @LabourType, @Usage, @HrsReqd,
                                @AdjHrs, @DateRevised, @TimeAddition, @RebuiltPartNum, @LastModifiedBy
                            )";

                        var parameters = new
                        {
                            model.LabourDefn,
                            DateEntered = DateTime.Now,
                            LinkNumber = rebuiltPartNum,
                            TypeId = "RB", // PartType
                            model.CostCentre,
                            model.Task,
                            model.LabourType,
                            model.Usage,
                            model.HrsReqd,
                            model.AdjHrs,
                            DateRevised = DateTime.Now,
                            model.TimeAddition,
                            RebuiltPartNum = rebuiltPartNum,
                            LastModifiedBy = ViewBag.UserName // Ensure ViewBag.UserName exists
                        };

                        // Async execute with transaction
                        await connection.ExecuteAsync(query, parameters, transaction: transaction);
                    }

                    await transaction.CommitAsync(); // Async commit
                    return Json(models.ToDataSourceResult(request));
                }
                catch (Exception ex)
                {
                    await transaction.RollbackAsync();
                    // Log the error (e.g., using ILogger)
                    // _logger.LogError(ex, "Error inserting labour details");
                    
                    ModelState.AddModelError("", "An error occurred while saving data.");
                    return Json(models.ToDataSourceResult(request, ModelState));
                }
            } // Transaction disposed here
        } // Connection closed/disposed here automatically
    }
}

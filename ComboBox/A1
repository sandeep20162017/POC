Iâ€™ve adjusted everything to match the ComboBox logic â€” now it should pass both columnName and searchText correctly. ðŸ”¥

ðŸ“Œ Updated JavaScript
Use a similar logic to getComboBoxParams â€” but target the DropDownListâ€™s input:

javascript
Copy
Edit
function getDropDownParams() {
    var input = $(".k-dropdown input.k-input:focus");
    
    if (input.length) {
        return {
            columnName: input.attr("name")?.replace("_input", ""), // Get column name
            searchText: input.val() || "" // Get search text directly from input
        };
    }

    return {};
}

function onDropdownFiltering(e) {
    var dropdown = e.sender;
    var params = getDropDownParams();

    if (params.columnName) {
        dropdown.dataSource.read(params); // Trigger read with correct params
    }
}

// Allow Enter key during input
$(document).on("keydown", ".k-dropdown .k-input", function(e) {
    if (e.keyCode === 13) {
        return true;
    }
    e.preventDefault(); // Prevent default action for other keys
});
ðŸ“Œ Updated DropDown Editor
No major changes here â€” just wire up the correct Filtering event:

razor
Copy
Edit
@(Html.Kendo().DropDownList()
    .Name(fieldName)
    .DataTextField("Text")
    .DataValueField("Value")
    .Filter(FilterType.Contains) // Enables typing and searching
    .AutoBind(false) // Disable auto-binding to handle custom filtering
    .HtmlAttributes(new Dictionary<string, object>
    {
        { "data-role", "dropdownlist" },
        { "data-column", fieldName }
    })
    .DataSource(source =>
    {
        source.Read(read =>
        {
            read.Url(Url.Action("GetAutoCompleteData", "AutoComplete"))
                .Type(HttpVerbs.Get)
                .Data("getDropDownParams"); // Match the updated JS function
        })
        .ServerFiltering(true); // Enable server-side filtering
    })
    .Events(events => events.Filtering("onDropdownFiltering")) // âœ… Use Filtering event
)

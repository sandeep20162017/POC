ASP.NET Telerik Guru said:

Perfect 👍 let’s build your final polished onNscPartsEdit function — fully integrated with:

✅ Add/Edit popup window sizing and title

✅ Read-only / editable logic per mode

✅ Automatic Supplier Name population

✅ Real-time Total Cost calculation (UnitCost × Qty × % / 100)

You can safely replace your current onNscPartsEdit function with this version:

🧩 Final onNscPartsEdit Function
function onNscPartsEdit(e) {
    console.log('NSC Index onNscPartsEdit');

    var isNew = e.model.isNew();
    var wnd = e.container.data("kendoWindow");

    // Configure popup window
    wnd.setOptions({
        width: "600px",
        height: "600px",
        scrollable: false,
        title: isNew ? "Add New Non Stock Coded Part" : "Edit Non Stock Coded Part",
        modal: true,
        resizable: false
    });

    // Add styling class
    e.container.closest(".k-window").addClass("scparts-popup-style");

    // Allow a short delay to ensure Kendo widgets are initialized
    setTimeout(function () {

        // === Retrieve Kendo widgets / inputs ===
        var container = e.container;

        var suppNumCombo = container.find("[name='OrigSuppNum']").data("kendoComboBox");
        var suppNameCombo = container.find("[name='OrigSupplierName']").data("kendoComboBox");

        var keyword = container.find("[name='KeyWord']");
        var desc = container.find("[name='Description']");

        var costCentreCombo = container.find("[name='CC']").data("kendoComboBox");

        var unitCost = container.find("[name='UnitCost']").data("kendoNumericTextBox");
        var qty = container.find("[name='Qty']").data("kendoNumericTextBox");
        var percentage = container.find("[name='Percentage']").data("kendoNumericTextBox");
        var totalCost = container.find("[name='TotalCost']").data("kendoNumericTextBox");

        var modifiedBy = container.find("[name='LastModifiedBy']").data("kendoTextBox");
        var modifiedDate = container.find("[name='LastModifiedDate']").data("kendoTextBox");

        // === Editable / Readonly behavior ===
        if (isNew) {
            // ADD MODE
            if (suppNumCombo) suppNumCombo.readonly(false);
            if (suppNameCombo) suppNameCombo.readonly(false);
            if (keyword.length) keyword.prop("readonly", true);
            if (desc.length) desc.prop("readonly", true);
            if (costCentreCombo) costCentreCombo.readonly(false);
            if (unitCost) unitCost.readonly(false);
            if (qty) qty.readonly(false);
            if (percentage) percentage.readonly(false);
            if (totalCost) totalCost.readonly(true);
            if (modifiedBy) modifiedBy.readonly(true);
            if (modifiedDate) modifiedDate.readonly(true);
        } else {
            // EDIT MODE
            if (suppNumCombo) suppNumCombo.readonly(true);
            if (suppNameCombo) suppNameCombo.readonly(true);
            if (keyword.length) keyword.prop("readonly", true);
            if (desc.length) desc.prop("readonly", true);
            if (costCentreCombo) costCentreCombo.readonly(false);
            if (unitCost) unitCost.readonly(true);
            if (qty) qty.readonly(false);
            if (percentage) percentage.readonly(false);
            if (totalCost) totalCost.readonly(true);
            if (modifiedBy) modifiedBy.readonly(true);
            if (modifiedDate) modifiedDate.readonly(true);
        }

        // === Auto-populate Supplier Name when Supplier Number changes ===
        if (suppNumCombo && suppNameCombo) {
            suppNumCombo.bind("change", function () {
                var selectedItem = suppNumCombo.dataItem();
                if (selectedItem) {
                    // Adjust this property name if your data field differs
                    suppNameCombo.value(selectedItem.SupplierName || "");
                }
            });
        }

        // === Total cost auto-calculation ===
        function calculateNscTotal() {
            var u = unitCost ? unitCost.value() || 0 : 0;
            var q = qty ? qty.value() || 0 : 0;
            var p = percentage ? percentage.value() || 0 : 0;
            if (totalCost) totalCost.value(u * q * (p / 100));
        }

        if (unitCost) unitCost.bind("change", calculateNscTotal);
        if (qty) qty.bind("change", calculateNscTotal);
        if (percentage) percentage.bind("change", calculateNscTotal);

        // Initial calculation on popup open
        calculateNscTotal();

    }, 200);
}

💡 What This Does
Feature	Description
Popup Setup	Adjusts title, size, and modal behavior depending on Add/Edit mode.
Dynamic Field Control	Uses .readonly(true/false) for Kendo widgets and .prop('readonly', true) for plain inputs.
Supplier Name Auto-Populate	When user selects a Supplier Number, the corresponding Supplier Name automatically fills in.
Total Cost Auto-Calculation	Automatically recalculates TotalCost = UnitCost × Qty × (Percentage / 100) whenever any of the three change.
Consistent Layout	Adds your .scparts-popup-style for consistent styling.
✅ Tip for Supplier Name Data

Make sure your Supplier Number ComboBox data includes both SupplierNumber and SupplierName fields, for example:

[
  { "SupplierNumber": "S123", "SupplierName": "ABC Manufacturing" },
  { "SupplierNumber": "S456", "SupplierName": "XYZ Components" }
]


Then in your NscComboBox editor template, the data can be accessed like:

@(Html.Kendo().ComboBoxFor(m => m)
    .DataTextField("SupplierNumber")
    .DataValueField("SupplierNumber")
    .DataSource(source => {
        source.Read(read => read.Action("GetSuppliers", "NscPartsUsed"));
    })
)


Would you like me to show how to tweak your NscSupplierComboBox (for OrigSupplierName) to properly receive and display that name from the supplier number selection too? That will fully tie the Supplier Number ↔ Supplier Name linkage together.

For the following grid, I need to add edit button (for each row) and when user clicks on OrigSuppNum link, 
edit popup window should be opened (Shared/EditorTemplate/NscPartsUsedViewModel.cshtml).
Grid should use popup edit.
Add is working fine
Shared/EditorTemplate/NscPartsUsedViewModel.cshtml :

@model BCES.Models.Parts.NscPartsUsedViewModel

<div class="scparts-popup-style">

    <!-- Top-left action buttons -->
    <div class="popup-actions">
        <button class="k-button k-primary" type="button" onclick="saveNscPartPopup()">Update</button>
        <button class="k-button" type="button" onclick="cancelNscPartPopup()">Cancel</button>
    </div>
    
    <!-- ===================== Row 1 ===================== -->
    <div class="section-title">Supplier Information</div>
    <div class="form-row">
        <!-- Supplier Number -->
        <div class="form-group  double-width">
            @Html.LabelFor(m => m.OrigSuppNum, "Supplier Number", new { @class = "form-label required-label" })
            @Html.EditorFor(m => m.OrigSuppNum, "NscComboBox", new { htmlAttributes = new { required = "required" } })
            
        </div>

        <!-- Supplier Name -->
        <div class="form-group  double-width">
            @Html.LabelFor(m => m.OrigSupplierName, "Supplier Name", new { @class = "form-label required-label" })
            @Html.EditorFor(m => m.OrigSupplierName, "NscSupplierComboBox", new { htmlAttributes = new { required = "required" } })

          
        </div>

        <!-- Keyword -->
        <div class="form-group  double-width">
            @Html.LabelFor(m => m.KeyWord, "Keyword", new { @class = "form-label" })
            @Html.EditorFor(m => m.KeyWord, new { htmlAttributes = new { @class = "k-textbox", style = "width:100%" } })
        </div>
    </div>

    <!-- ===================== Row 2 ===================== -->
    <div class="section-title">Part Description</div>
    <div class="form-row">
        <!-- Description -->
        <div class="form-group  full-width">
            @Html.LabelFor(m => m.Description, "Description", new { @class = "form-label" })
            @Html.EditorFor(m => m.Description, new { htmlAttributes = new { @class = "k-textbox", style = "width:100%" } })
        </div>
    </div>
        <!-- Part Cost -->
    <div class="section-title">Cost Details</div>
    <div class="form-row">
        
        <!-- Cost Centre -->
        <div class="form-group full-width">
            @Html.LabelFor(m => m.CC, "Cost Centre", new { @class = "form-label required-label" })
            @Html.EditorFor(m => m.CC, "ComboBoxEditor", new { htmlAttributes = new { required = "required" } })
        </div>
    </div>


    <!-- ===================== Row 3 ===================== -->
 
    <div class="section-title">Cost Details</div>
    <div class="form-row">
        <div class="form-group double-width">
            @Html.LabelFor(m => m.UnitCost, "Unit Cost", new { @class = "form-label" })
            @(Html.Kendo().NumericTextBoxFor(m => m.UnitCost).Format("c2"))
        </div>
        <div class="form-group double-width">
            @Html.LabelFor(m => m.Qty, "Quantity", new { @class = "form-label required-label" })
            @(Html.Kendo().NumericTextBoxFor(m => m.Qty).Min(0).Format("n0").HtmlAttributes(new { required = "required" }))
        </div>
        <div class="form-group double-width">
            @Html.LabelFor(m => m.Percentage, "%", new { @class = "form-label required-label" })
            @(Html.Kendo().NumericTextBoxFor(m => m.Percentage).Format("n0").Min(0).Max(100).HtmlAttributes(new { required = "required" }))
        </div>
        <div class="form-group double-width">
            @Html.LabelFor(m => m.TotalCost, "Total", new { @class = "form-label" })
            @(Html.Kendo().NumericTextBoxFor(m => m.TotalCost)
                .Format("c2")
                .Min(0)
                .HtmlAttributes(new { @readonly = "readonly" }))
        </div>
    </div>
    <!-- History -->
    <div class="section-title">History</div>
    <div class="form-row">
        <div class="form-group double-width">
            @Html.LabelFor(m => m.LastModifiedBy, "Modified By", new { @class = "form-label" })
            @(Html.Kendo().TextBoxFor(m => m.LastModifiedBy).HtmlAttributes(new { @readonly = "readonly" }))
        </div>
        <div class="form-group double-width">
            @Html.LabelFor(m => m.LastModifiedDate, "Modified Date", new { @class = "form-label" })
            @(Html.Kendo().TextBoxFor(m => m.LastModifiedDate).HtmlAttributes(new { @readonly = "readonly" }))
        </div>
    </div>

    @* ====== COMMENTED OUT FIELDS FROM _NScPartsUsed.cshtml ====== *@
    @* Core Cost
    <div class="form-row">
    <div class="form-group">
    <label class="form-label">Core Cost</label>
    @(Html.Kendo().NumericTextBoxFor(m => m.CoreCost)
    .Format("{0:C2}")
    .HtmlAttributes(new { data_br = "MustBeNumeric,NoSpecialCharacters,MustBePositive" })
    )
    </div>
    </div>
    *@

    @* Total Cost
    <div class="form-row">
    <div class="form-group">
    <label class="form-label">Total Cost</label>
    @(Html.Kendo().NumericTextBoxFor(m => m.TotalCost)
    .Format("{0:C2}")
    .HtmlAttributes(new { @readonly = "readonly" })
    )
    </div>
    </div>
    *@

    @* Last Modified By
    <div class="form-row">
    <div class="form-group">
    <label class="form-label">Modified By</label>
    @(Html.Kendo().TextBoxFor(m => m.LastModifiedBy)
    .HtmlAttributes(new { @readonly = "readonly", @class = "k-textbox" })
    )
    </div>
    </div>
    *@

    @* Last Modified Date
    <div class="form-row">
    <div class="form-group">
    <label class="form-label">Modified Date</label>
    @(Html.Kendo().DatePickerFor(m => m.LastModifiedDate)
    .HtmlAttributes(new { @readonly = "readonly" })
    )
    </div>
    </div>
    *@

</div>
@* 
@section scripts {
    <script>
        (function () {
            var $popup = $('.k-window-content:visible');

            // Save button triggers Kendo's update
            $popup.on('click', '.sc-save-btn', function () {
                $popup.find('.k-grid-update').trigger('click');
            });

            // Cancel button triggers Kendo's cancel
            $popup.on('click', '.sc-cancel-btn', function () {
                $popup.find('.k-grid-cancel').trigger('click');
            });
        })();
    </script>
} *@
Grid :
 <h6>Non Stock Coded Parts</h6>

@(
Html.Kendo().Grid<BCES.Models.Parts.NscPartsUsedViewModel>()
                                .Name("NscPartsUsedGrid")
                                 @* .Events(events => events
                                    .DataBound("onNscGridDataBound")
                                    .SaveChanges("onNscGridSave")
                                    .Edit("onNscGridEdit")
                                ) *@
                                .Columns(columns =>
                                {
                                    columns.Bound(c => c.Oid).Title("Oid").Hidden(true);
                                    columns.Bound(c => c.OrigSuppNum).Title("Supplier Number").Filterable(ftb => ftb.Cell(cell => cell.Operator("Contains")))
                                    .EditorTemplateName("NscComboBox")
                                     .HeaderHtmlAttributes(new { @class = "required-header" })
                                    .HtmlAttributes(new { @class = "required-cell", required = "required" })
                                    .Width(140)
                                    .ClientTemplate("<a href='javascript:void(0)' class='non-stock-code-cell'>#= OrigSuppNum #</a>");
                                     
                                    columns.Bound(p => p.OrigSupplierName).Title("Supplier Name").Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).EditorTemplateName("ComboBoxEditor");
                                    columns.Bound(p => p.KeyWord).Title("Keyword").Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).EditorTemplateName("ComboBoxEditor");
                                    columns.Bound(p => p.Description).Title("Description").Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).EditorTemplateName("ComboBoxEditor");
                                    columns.Bound(p => p.UnitCost).Title("OEM Part Cost").Filterable(ftb => ftb.Cell(cell => cell.Operator("gte"))).Format("{0:C2}").EditorTemplateName("Currency");
                                    
                                    columns.Command(command =>
                                    {
                                      //  command.Edit().Text(" ").IconClass("k-icon k-i-edit").HtmlAttributes(new { title = "Edit" });
                                        command.Custom("Delete").IconClass("k-icon k-i-delete").Click("window.showDeleteConfirmation");
                                      @* command.Custom("Delete")
                                            .Click("showDeleteConfirmation")
                                            .Text(" ")
                                            .IconClass("k-icon k-i-delete")
                                            .HtmlAttributes(new { @class = "text-danger", title = "Delete" }); *@
                                    }).Title("Actions");
                                })
                            
                        .ToolBar(toolbar =>
                        {
                            if (@ViewBag.RoleId == 1)
                            {
                                toolbar.Create();
                               // toolbar.Save();
                            }
                        })
                   
                     .Editable(editable => editable.Mode(GridEditMode.PopUp)
                        .Window(w => w.Width("600px").Title("Edit Non Stock Coded Part")))
                     .Events(e => e.Edit("onNscPartsEdit"))
                    .Pageable(p => p
                        .Numeric(true)       // Show numeric page buttons
                        .Input(false)        // Hide input box
                        .PreviousNext(true)  // Show next/prev arrows
                        )
                    .Sortable()
                    .Filterable()
                    .Scrollable(s => s.Virtual(true).Height("250px"))
                    .DataSource(dataSource => dataSource
                    .Ajax()
                    .PageSize(14)
                    .Events(events => events
                    .Error("onDataSourceError")
                    .RequestEnd("onNscPartsRequestEnd")
                     )
                    .Model(model =>
                    {
                        model.Id(u => u.OId);
                        model.Field(c => c.OId).Editable(false);
                         @* model.Field(c => c.OrigSupplierName);
                          model.Field(c => c.OrigSuppNum); *@
                                                                       
                    })
                   
                    .Read(read => read.Url(Url.Action("GetNscPartsUsedView", "NscPartsUsed")).Type(HttpVerbs.Get))
                    .Create(create => create.Url(Url.Action("CreateNscPartsUsed", "NscPartsUsed")).Type(HttpVerbs.Post))
                    .Update(update => update.Url(Url.Action("UpdateNscPartsUsed", "NscPartsUsed")).Type(HttpVerbs.Post))
                    .Destroy(delete => delete.Url(Url.Action("DeleteNscPartsUsed", "NscPartsUsed")).Type(HttpVerbs.Post))
                        
                   )
                
            )
          js :
          <script>
    function onNscPartsEdit(e) {
         console.log('NSC Index onNscPartsEdit');
        var wnd = e.container.data("kendoWindow"); //outer popupsize
        wnd.setOptions({
            width: "450px",
            height: "600px",

            scrollable: false,     //
            title: e.model.isNew() ? "Add New Non Stock Coded Part" : "Edit Non Stock Coded Part",
            modal: true,
            resizable: false
        });

        e.container.closest(".k-window").addClass("scparts-popup-style");

        // track current model for combobox select logic
        currentNscPartsModel = e.model;

        // Make OrigSuppNum read-only in Edit mode
        setTimeout(function () {
            const combo = $("input[name='OrigSuppNum']").closest("[data-role='combobox']").data("kendoComboBox");
            if (combo) {
                combo.readonly(!e.model.isNew());
            }
        }, 200);

        ////////////////////////////////
        var container = e.container; // this is the popup window’s form

        // Get Kendo NumericTextBoxes using the [name] attribute
        var unitCost = container.find("[name='UnitCost']").data("kendoNumericTextBox");
        var qty = container.find("[name='Qty']").data("kendoNumericTextBox");
        var percentage = container.find("[name='Percentage']").data("kendoNumericTextBox");
        var totalCost = container.find("[name='TotalCost']").data("kendoNumericTextBox");

        function calculateNscTotal() {
            var u = unitCost.value() || 0;
            var q = qty.value() || 0;
            var p = percentage.value() || 0;

            totalCost.value(u * q * (p / 100));
        }

        // Hook into change events
        unitCost.bind("change", calculateNscTotal);
        qty.bind("change", calculateNscTotal);
        percentage.bind("change", calculateNscTotal);

        // Run once on popup load (for editing existing records)
        calculateNscTotal();

        // ///////////////////////////////
    }

</script>

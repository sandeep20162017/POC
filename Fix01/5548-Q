Index.cshtml as grid. Uses POPUpEdit (Ajax). When user clicks on Edit or Add, POPUp appears. This POpUp has various tabs. Each tab
has its own grid. All these grids use PopUpEdit and has their
own client template. Example onScPartsEdit. 
When user clicks on Add/Edit in ScPartsPopUp, it has its own Add and cancel. This is like PopUp Over PopUp.
When user clicks on cancel, he shod close the ScPartsKendowindow and show the below PopUp (with alll the tabs).
But now, it is closing all the popUps and gets back to original index grid
When user clicks on one of the tabs
    <script>
        function cancelScPartPopup() {
            $("#ScPartsPopupWindow").data("kendoWindow").close(); //Need fix here
        }

        function onScPartsEdit(e) {
            var wnd = e.container.data("kendoWindow"); //outer popupsize
            wnd.setOptions({
               width : "450px",
               height : "600px",

                scrollable: false,     // 
                title: e.model.isNew() ? "Add New Stock Coded Part" : "Edit Stock Coded Part",
                modal: true,
                resizable: false
            });

            e.container.closest(".k-window").addClass("scparts-popup-style");

            // track current model for combobox select logic
            currentScPartsModel = e.model;

            // Make Stock Code read-only in Edit mode
            setTimeout(function () {
                const combo = $("input[name='MMSStockCode']").closest("[data-role='combobox']").data("kendoComboBox");
                if (combo) {
                    combo.readonly(!e.model.isNew());
                }
            }, 200);

            ////////////////////////////////
            var container = e.container; // this is the popup windowâ€™s form

            // Get Kendo NumericTextBoxes using the [name] attribute
            var unitCost = container.find("[name='UnitCost']").data("kendoNumericTextBox");
            var qty = container.find("[name='Qty']").data("kendoNumericTextBox");
            var percentage = container.find("[name='Percentage']").data("kendoNumericTextBox");
            var totalCost = container.find("[name='TotalCost']").data("kendoNumericTextBox");

            function calculateTotal() {
                var u = unitCost.value() || 0;
                var q = qty.value() || 0;
                var p = percentage.value() || 0;

                totalCost.value(u * q * (p / 100));
            }

            // Hook into change events
            unitCost.bind("change", calculateTotal);
            qty.bind("change", calculateTotal);
            percentage.bind("change", calculateTotal);

            // Run once on popup load (for editing existing records)
            calculateTotal();

            ///////////////////////////////
        }

    </script>
    @model BCES.Models.Parts.StockCodedPartsViewModel

@{
    var mdl = Model ?? new BCES.Models.Parts.StockCodedPartsViewModel();
    bool isNew = string.IsNullOrEmpty(mdl.MMSStockCode);
}

<div id="notification"></div>
<div class="popup-container scparts-popup-style">
    <div class="popup-actions">
        <button class="k-button k-primary" type="button" onclick="saveScPartPopup()">Update</button>
        <button class="k-button" type="button" onclick="cancelScPartPopup()">Cancel</button>
    </div>

    <div class="form-container">
        <form id="scPartsForm">
            @Html.HiddenFor(m => m.LinkCode)

            <!-- Part Information -->
            <div class="section-title">Part Information</div>
            <div class="form-row">
                <div class="form-group double-width">
                    @Html.LabelFor(m => m.MMSStockCode, "Stock Code", new { @class = "form-label required-label" })
                    @Html.EditorFor(m => m.MMSStockCode, "ScComboBox", new { htmlAttributes = new { required = "required" } })
                </div>
                <div class="form-group double-width">
                    @Html.LabelFor(m => m.PartType, "Part Type", new { @class = "form-label" })
                    @(Html.Kendo().TextBoxFor(m => m.PartType).HtmlAttributes(new { @readonly = "readonly" }))
                </div>
                
                <div class="form-group  double-width">
                    @Html.LabelFor(m => m.CoreCost, "Core Cost", new { @class = "form-label" })
                    @(Html.Kendo().NumericTextBoxFor(m => m.CoreCost).Min(0).Format("c2"))
                </div>
            </div>
            <div class="form-row">
                <div class="form-group full-width">
                    @Html.LabelFor(m => m.DetailedDesc, "Part Description", new { @class = "form-label" })
                    @(Html.Kendo().TextBoxFor(m => m.DetailedDesc).HtmlAttributes(new { @readonly = "readonly" }))
                </div>
            </div>

            <!-- Supplier Information -->
            <div class="section-title">Supplier Information</div>
            <div class="form-row">
                <div class="form-group double-width">
                    @Html.LabelFor(m => m.CC, "Cost Centre", new { @class = "form-label required-label" })
                    @Html.EditorFor(m => m.CC, "ComboBoxEditor", new { htmlAttributes = new { required = "required" } })
                </div>
                <div class="form-group double-width">
                    @Html.LabelFor(m => m.OrigSupplierNum, "Supplier Num", new { @class = "form-label" })
                    @(Html.Kendo().TextBoxFor(m => m.OrigSupplierNum).HtmlAttributes(new { @readonly = "readonly" }))
                </div>
                <div class="form-group double-width">
                    @Html.LabelFor(m => m.OrigSupplierName, "Supplier Name", new { @class = "form-label" })
                    @(Html.Kendo().TextBoxFor(m => m.OrigSupplierName).HtmlAttributes(new { @readonly = "readonly" }))
                </div>
            </div>

            <!-- Cost Information -->
            <div class="section-title">Cost Information</div>
            <div class="form-row">
                <div class="form-group">
                    @Html.LabelFor(m => m.UnitCost, "Unit Cost", new { @class = "form-label" })
                    @(Html.Kendo().NumericTextBoxFor(m => m.UnitCost).Format("c2"))
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.Qty, "Quantity", new { @class = "form-label required-label" })
                    @(Html.Kendo().NumericTextBoxFor(m => m.Qty).Min(0).Format("n0").HtmlAttributes(new { required = "required" }))
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.Percentage, "%", new { @class = "form-label required-label" })
                    @(Html.Kendo().NumericTextBoxFor(m => m.Percentage).Format("n0").Min(0).Max(100).HtmlAttributes(new { required = "required" }))
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.TotalCost, "Total", new { @class = "form-label" })
                    @(Html.Kendo().NumericTextBoxFor(m => m.TotalCost)
                        .Format("c2")
                        .Min(0)
                        .HtmlAttributes(new { @readonly = "readonly" }))
                </div>
               @*  <div class="form-group double-width">
                    @Html.LabelFor(m => m.TotalCost, "Total Cost", new { @class = "form-label" })
                    @(Html.Kendo().NumericTextBoxFor(m => m.TotalCost).Format("c2").HtmlAttributes(new { @readonly = "readonly" }))
                </div> *@
            </div>

            <!-- History -->
            <div class="section-title">History</div>
            <div class="form-row">
                <div class="form-group double-width">
                    @Html.LabelFor(m => m.LastModifiedBy, "Modified By", new { @class = "form-label" })
                    @(Html.Kendo().TextBoxFor(m => m.LastModifiedBy).HtmlAttributes(new { @readonly = "readonly" }))
                </div>
                <div class="form-group double-width">
                    @Html.LabelFor(m => m.LastModifiedDate, "Modified Date", new { @class = "form-label" })
                    @(Html.Kendo().TextBoxFor(m => m.LastModifiedDate).HtmlAttributes(new { @readonly = "readonly" }))
                </div>
            </div>
        </form>
    </div>
</div>

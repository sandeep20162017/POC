✅ Step 1 – Add Grid Edit Event

In your grid definition:

@(Html.Kendo().Grid<BCES.Models.Parts.StockCodedPartsViewModel>()
    .Name("PartsGrid")
    .Editable(editable => editable.Mode(GridEditMode.PopUp)
        .TemplateName("StockCodedPartsEditor")) // your popup template
    .Events(events => events.Edit("onScPartEdit"))
)

✅ Step 2 – JavaScript for Calculation (Scoped to Popup)

Now, define the onScPartEdit function:

function onScPartEdit(e) {
    var container = e.container; // this is the popup window’s form

    // Get Kendo NumericTextBoxes using the [name] attribute
    var unitCost   = container.find("[name='UnitCost']").data("kendoNumericTextBox");
    var qty        = container.find("[name='Qty']").data("kendoNumericTextBox");
    var percentage = container.find("[name='Percentage']").data("kendoNumericTextBox");
    var totalCost  = container.find("[name='TotalCost']").data("kendoNumericTextBox");

    function calculateTotal() {
        var u = unitCost.value() || 0;
        var q = qty.value() || 0;
        var p = percentage.value() || 0;

        totalCost.value(u * q * (p / 100));
    }

    // Hook into change events
    unitCost.bind("change", calculateTotal);
    qty.bind("change", calculateTotal);
    percentage.bind("change", calculateTotal);

    // Run once on popup load (for editing existing records)
    calculateTotal();
}

✅ Step 3 – Make TotalCost Readonly

Since this is a calculated field, prevent user edits in your popup template:

<div class="form-group">
    @Html.LabelFor(m => m.TotalCost, "Total", new { @class = "form-label" })
    @(Html.Kendo().NumericTextBoxFor(m => m.TotalCost)
        .Format("c2")
        .Min(0)
        .HtmlAttributes(new { @readonly = "readonly" }))
</div>

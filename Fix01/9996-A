‚úÖ Step 1: Enable the Edit Command in Your Grid

In your columns.Command(...) section, just uncomment and refine the Edit command so each row gets its edit icon:

columns.Command(command =>
{
    command.Edit()
        .Text(" ")
        .IconClass("k-icon k-i-edit")
        .HtmlAttributes(new { title = "Edit" });

    command.Custom("Delete")
        .Text(" ")
        .IconClass("k-icon k-i-delete")
        .Click("window.showDeleteConfirmation")
        .HtmlAttributes(new { title = "Delete" });
})
.Title("Actions")
.Width(100);


This gives every row a pencil icon ‚úèÔ∏è for editing via popup mode.

‚úÖ Step 2: Make OrigSuppNum Clickable to Open Edit Popup

Your ClientTemplate for the column already renders a clickable <a> tag.
You just need to hook it up with a click handler that triggers the Kendo Grid‚Äôs editRow method.

Update your OrigSuppNum column definition to include a class and a data-id for identification:

columns.Bound(c => c.OrigSuppNum)
    .Title("Supplier Number")
    .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains")))
    .EditorTemplateName("NscComboBox")
    .HeaderHtmlAttributes(new { @class = "required-header" })
    .HtmlAttributes(new { @class = "required-cell", required = "required" })
    .Width(140)
    .ClientTemplate(
        "<a href='javascript:void(0)' class='orig-suppnum-link' data-id='#= Oid #'>#= OrigSuppNum #</a>"
    );

‚úÖ Step 3: Add the JavaScript Handler for Link Click

Place this script after the grid (or in your main script block):

<script>
$(document).ready(function () {
    // Handle click on OrigSuppNum link
    $("#NscPartsUsedGrid").on("click", ".orig-suppnum-link", function () {
        var grid = $("#NscPartsUsedGrid").data("kendoGrid");
        var row = $(this).closest("tr");
        grid.editRow(row); // Opens popup editor for that row
    });
});
</script>


That‚Äôs all you need ‚Äî clicking on the supplier number link now opens the edit popup.

‚úÖ Step 4: Ensure Popup Uses Your Shared Editor Template

In your grid definition, you‚Äôve already done this correctly:

.Editable(editable => editable
    .Mode(GridEditMode.PopUp)
    .TemplateName("NscPartsUsedViewModel") // <- this must match your shared editor template file name
    .Window(w => w.Width("600px").Title("Edit Non Stock Coded Part"))
)


‚ö†Ô∏è Important:
If you haven‚Äôt already specified .TemplateName("NscPartsUsedViewModel"), you must add it.
That tells Telerik to use your /Shared/EditorTemplates/NscPartsUsedViewModel.cshtml.

‚úÖ Step 5: Ensure Your Popup Edit Works Smoothly

You already have an onNscPartsEdit function. That‚Äôs perfect for configuring the popup (size, readonly logic, etc.).
No change is required there ‚Äî both the Edit command and the OrigSuppNum click will trigger it automatically.

üí° Optional ‚Äî Polished Touch

You can hide the default ‚ÄúEdit‚Äù text (only show icons) by adding a simple CSS rule:

.k-grid .k-grid-edit .k-button-text {
    display: none;
}

‚úÖ Final Result

Each row has an Edit icon that opens your popup editor.

Clicking the Supplier Number link opens the same popup editor.

The popup uses your Shared/EditorTemplate/NscPartsUsedViewModel.cshtml.

Your existing JS logic (onNscPartsEdit) controls popup layout and calculations.

Core Script
// ===========================
// üîπ When user changes Supplier Number
// ===========================
function onSupplierNumberChange(e) {
    console.log("Supplier Number changed");

    var popup = $(".k-window-content:visible"); // active popup editor
    var model = window.currentNscPartsModel || null;

    // Get entered Supplier Number
    var supplierNumCombo = popup.find("[name='OrigSuppNum']").data("kendoComboBox");
    var supplierNumber = supplierNumCombo ? supplierNumCombo.value() : "";

    // Get Supplier Name ComboBox
    var supplierNameCombo = popup.find("[name='OrigSupplierName']").data("kendoComboBox");

    // ‚úÖ 1. Clear Supplier Name and dependent fields
    clearDependentFields(popup, model);

    if (supplierNameCombo) {
        // Clear any old data and text
        supplierNameCombo.dataSource.data([]);
        supplierNameCombo.select(-1);
        supplierNameCombo.text("");
        supplierNameCombo.value("");
    }

    // ‚úÖ 2. Load new supplier names for this supplier number
    if (supplierNumber) {
        $.ajax({
            url: '/ComboBox/GetSupplierNamesByNumber',
            type: 'GET',
            data: { supplierNumber: supplierNumber },
            success: function (result) {
                if (result && supplierNameCombo) {
                    supplierNameCombo.setDataSource(new kendo.data.DataSource({ data: result }));
                    supplierNameCombo.enable(true);
                    console.log("Supplier names loaded:", result.length);
                }
            },
            error: function () {
                console.error("‚ùå Failed to fetch supplier names for number:", supplierNumber);
            }
        });
    }
}


// ===========================
// üîπ When user selects Supplier Name
// ===========================
function onSupplierNameSelect(e) {
    console.log("Supplier Name selected");

    var popup = $(".k-window-content:visible");
    var model = window.currentNscPartsModel || null;

    // Get selected supplier name
    var combo = this;
    var selected = combo.dataItem(e.item.index());
    var supplierName = selected ? selected.Text : "";
    var supplierNumber = popup.find("[name='OrigSuppNum']").val();

    console.log("Supplier Name:", supplierName, "Supplier Number:", supplierNumber);

    if (!supplierName || !supplierNumber) {
        console.warn("Missing supplier number or name");
        return;
    }

    // ‚úÖ Call backend to get supplier details
    $.ajax({
        url: '/AutoComplete/GetSupplierDetailsByName',
        type: 'GET',
        data: {
            supplierNumber: supplierNumber,
            supplierName: supplierName
        },
        success: function (result) {
            if (result && model) {
                console.log("Fetched details:", result);

                // Populate model fields
                model.set("KeyWord", result.KeyWord || "");
                model.set("Description", result.Description || "");
                model.set("UnitCost", result.PartCost || 0);

                // Reflect in UI
                popup.find("[name='KeyWord']").val(result.KeyWord || "");
                popup.find("[name='Description']").val(result.Description || "");

                var unitCostBox = popup.find("[name='UnitCost']").data("kendoNumericTextBox");
                if (unitCostBox) unitCostBox.value(result.PartCost || 0);
            }
        },
        error: function () {
            console.error("‚ùå Failed to fetch supplier details by name.");
        }
    });
}


// ===========================
// üîπ Helper: clear dependent fields
// ===========================
function clearDependentFields(container, model) {
    console.log("üßπ Clearing dependent fields (supplier name, cost, qty, etc.)");

    var numericFields = ["UnitCost", "Qty", "Percentage", "TotalCost"];
    numericFields.forEach(function (name) {
        var num = container.find("[name='" + name + "']").data("kendoNumericTextBox");
        if (num) num.value(0);
        else container.find("[name='" + name + "']").val(0);
        if (model) model.set(name, 0);
    });

    // Clear keyword and description
    ["KeyWord", "Description"].forEach(function (name) {
        container.find("[name='" + name + "']").val("");
        if (model) model.set(name, "");
    });
}

‚úÖ Example ComboBox setup in Razor
<div class="form-group">
    @Html.LabelFor(m => m.OrigSuppNum, "Supplier Number", new { @class = "form-label" })
    @(Html.Kendo().ComboBoxFor(m => m.OrigSuppNum)
        .Name("OrigSuppNum")
        .DataTextField("Text")
        .DataValueField("Value")
        .Filter("contains")
        .AutoBind(true)
        .Suggest(true)
        .Events(e => e.Change("onSupplierNumberChange"))
        .HtmlAttributes(new { style = "width:100%" })
    )
</div>

<div class="form-group">
    @Html.LabelFor(m => m.OrigSupplierName, "Supplier Name", new { @class = "form-label" })
    @(Html.Kendo().ComboBoxFor(m => m.OrigSupplierName)
        .Name("OrigSupplierName")
        .DataTextField("Text")
        .DataValueField("Value")
        .Filter("contains")
        .AutoBind(false)
        .Enable(false)
        .Suggest(true)
        .Events(e => e.Select("onSupplierNameSelect"))
        .HtmlAttributes(new { style = "width:100%" })
    )
</div>

‚úÖ Example Controller (for clarity)

In ComboBoxController.cs:

public JsonResult GetSupplierNamesByNumber(string supplierNumber)
{
    // Simulate fetching supplier names
    var list = _supplierRepo.GetNamesByNumber(supplierNumber)
        .Select(x => new { Text = x.SupplierName, Value = x.SupplierName });

    return Json(list, JsonRequestBehavior.AllowGet);
}


and in AutoCompleteController.cs:

public JsonResult GetSupplierDetailsByName(string supplierNumber, string supplierName)
{
    var details = _supplierRepo.GetSupplierDetails(supplierNumber, supplierName);
    return Json(new {
        KeyWord = details.KeyWord,
        Description = details.Description,
        PartCost = details.UnitCost
    }, JsonRequestBehavior.AllowGet);
}

I have another question. Is this because of bad data? If bad data I need to know exact row when exception is thown
Exception :
   at System.ArgumentNullException.Throw(String paramName)
   at System.ArgumentNullException.ThrowIfNull(Object argument, String paramName)
   at System.Linq.Queryable.AsQueryable(IEnumerable source)
   at Kendo.Mvc.Extensions.QueryableExtensions.ToDataSourceResult(IEnumerable enumerable, DataSourceRequest request)
   at BCES.Controllers.Parts.VehiclesController.<GetArchivedVehiclesView>d__11.MoveNext() in C:\ttc2020\0105-Cost Estimate System\Dev\CES\Controllers\Vehicles\VehiclesController.cs:line 112
    [HttpGet]
    [AllowAnonymous]
    public async Task<JsonResult> GetArchivedVehiclesView([DataSourceRequest] DataSourceRequest request)
    {
        // Fetch data for the grid 
        try
        {
            var model = await GetArchivedVehiclesData();

            return Json(model.ToDataSourceResult(request));
        }
        catch (Exception ex)
        {
            return Json(ex); //exception is thrown here
        }
    }
[AllowAnonymous]
private async Task<IEnumerable<VehicleViewModel>> GetVehiclesData()
{
    try
    {
        var vehiclesQuery = @"
                                SELECT  [ArchVehicleListId] AS VehicleListId
                                      ,[VehSeriesCode]
                                      ,[NumOfVehicles]
                                      ,[ProjDesc]
                                      ,[DateEntered]
                                      ,[EnteredBy]
                                      ,[Make]
                                      ,[Model]
                                      ,[Year]
                                      ,[Engine]
                                      ,[Transmission]
                                      ,[Differential]
                                      ,[LabourCost]
                                      ,[LabourOverheadAmount]
                                      ,[LabourTotal]
                                      ,[MaterialsTotal]
                                      ,[TotalBusEstimateCost]
                                      ,[TotalTax]
                                      ,[TotalCostTax]
                                      ,[OemKitsTotal]
                                     -- ,[Sopnumber]
                                      ,[OldId]
                                  FROM [CES].[SBCES].[ArchVehicleList]
                                                            ";
        

        var vehicles = _dbConnection.Query<VehicleViewModel>(vehiclesQuery).ToList(); //vehicles is populated


        return vehicles.Distinct().ToList();
        
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error fetching vehicles data: {ex.Message}");
        return Enumerable.Empty<VehicleViewModel>();
    }
}
View :
.DataSource(dataSource => dataSource
    .Ajax()
    .Model(model =>
    {
            model.Id(c => c.VehicleListId);
            model.Field(c => c.VehicleListId);
 
    })
       //.Read(read => read.Url(Url.Action("GetArchivedVehiclesView", "Vehicles") + "?id=" + ViewBag.PartNum + "&gridType=" + ViewBag.GridType).Type(HttpVerbs.Get))
           .Read(read => read.Url(Url.Action("GetArchivedVehiclesView", "Vehicles")).Type(HttpVerbs.Get))
)

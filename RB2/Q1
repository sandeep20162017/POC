You are ASP.NET core (v 8.0) and Telerik ASP.NET core expert.
In my code I have 2 tab strips - rebuildPartsTabStrip and Archived Parts
In rebuildPartsTabStrip, I have Telerik grid - RebuiltPartsGrid
When user clicks on RebuiltPartsGrid row (parent), child tabs are shown (Labour details, Laboour Hour, Maretails Parts, Stock coded Parts, Non Stock coded parts, Rebuilt Parts, Total cost).
I want to highlight selected parent row with gold color using css. (When user clicks on the parent row, paraent row is highlighted and child tabs are shown). When child tabsare not shown color goes back to the orginal state.
Index.cshtml :
@using BCES.Models.Parts
@using BCES.Models.Common
@model IEnumerable<BCES.Models.Parts.RebuiltPartsViewModel>

@{
    ViewData["Title"] = "Rebuilt Parts";
}

<h4>Rebuilt Parts</h4>

@(Html.Kendo().TabStrip()
    .Name("rebuildPartsTabStrip")
    .Animation(animation => animation.Open(effect => effect.Fade(FadeDirection.In)))
    .Items(tabstrip =>
    {
        tabstrip.Add().Text("Rebuilt Parts")
            .Selected(true)
            .Content(@<text>
                @try
                {
                    @(Html.Kendo().Grid<RebuiltPartsViewModel>()
                        .Name("RebuiltPartsGrid")
                        .Columns(columns =>
                        {
                            columns.Bound(c => c.RebuiltStockNum).Title("Rebuilt Stock Code")
                                .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)))
                                .EditorTemplateName("ComboBoxEditor")
                                .Width(150).Hidden(false).Lockable(true);

                            columns.Bound(c => c.MmsStockCode).Title("MMS Stock Code")
                                .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)))
                                .EditorTemplateName("ComboBoxEditor")
                                .Width(130).Hidden(true);

                            columns.Bound(c => c.KeyWord).Title("Keyword")
                                .ClientTemplate("#: truncateText(data.KeyWord) #")
                                .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)))
                                .EditorTemplateName("ComboBoxEditor")
                                .Width(150).Hidden(false).MinScreenWidth(768).Hidden(true);

                            columns.Bound(c => c.Description).Title("Description")
                                .ClientTemplate("#: truncateText(data.Description) #")
                                .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)))
                                .EditorTemplateName("ComboBoxEditor").Hidden(true)
                                .Width(250).MinScreenWidth(768);                            

                            columns.Bound(c => c.JobNumber).Title("Job Number")
                                .ClientTemplate("#: truncateText(data.JobNumber) #").Hidden(true)
                                .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)))
                                .Width(150).MinScreenWidth(768);

                            columns.Bound(c => c.CorePartNum).Title("Core Code")
                                .ClientTemplate("#: truncateText(data.CorePartNum) #")
                                .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)))
                                .Width(150).Hidden(true).MinScreenWidth(768);

                            columns.Bound(c => c.CoreCharge).Title("Core Cost")
                                .ClientTemplate("#: truncateText(data.CoreCharge) #")
                                .Filterable(ftb => ftb.Cell(cell => cell.Operator("gte")))
                                .Format("{0:C}").EditorTemplateName("Currency")
                                .Width(80).Hidden(false).MinScreenWidth(768);

                            columns.Bound(c => c.BuyNewCost).Title("Buy New Cost")                                
                                .Filterable(ftb => ftb.Cell(cell => cell.Operator("gte")))
                                .Format("{0:C}").EditorTemplateName("Currency")
                                .Width(120).Hidden(false).MinScreenWidth(768);

                            columns.Bound(c => c.RemanCost).Title("Remanufactured Cost")
                                .Filterable(ftb => ftb.Cell(cell => cell.Operator("gte")))
                                .EditorTemplateName("Currency").Hidden(false)
                                .ClientTemplate("#:kendo.toString(RemanCost, 'c2')#")
                                .Width(150);

                            columns.Bound(p => p.CostSavingPerUnitDummy).Hidden(true)
                                .Title("Cost Saving")
                                .ClientTemplate("#= calculateCostSaving(BuyNewCost, RemanCost) #")
                                .Width(150);

                            columns.Bound(p => p.PercentageSavingPerUnitDummy).Hidden(true)
                                .Title("Percentage Saving")
                                .ClientTemplate("#= calculatePercentageSaving(BuyNewCost, RemanCost)  #")
                                .Width(150);

                            columns.Bound(u => u.BusId).Title("Vehicle Series") 
                                // .ClientTemplate("# if (typeof Buses != 'undefined'  && Buses && Buses.length > 0) { # #= Buses.map(bus => bus.BusName).join(', ') # # } else { # Select Vehicle # } #")
                                .ClientTemplate("# if (typeof Buses != 'undefined' && Buses && Buses.length) { # #= Buses.map(bus => truncateWords(bus.BusName, 10)).join(', ') # # } else { # Select Vehicle # } #")
                                .EditorTemplateName("VehicleSeriesEditor")
                                .Width(170).Hidden(false);

                            columns.Command(command =>
                            {
                               // command.Edit().Text(" ").IconClass("k-icon k-i-edit").HtmlAttributes(new { title = "Edit" }); // Edit button with tooltip
                                command.Custom("Archive").Text(" ").IconClass("k-icon k-i-folder").Click("onArchiveClick").HtmlAttributes(new { title = "Archive" }); // Archive button with tooltip
                                command.Custom("Delete")
                                .Click("showDeleteConfirmation")
                                .Text(" ")
                                .IconClass("k-icon k-i-delete")
                                .HtmlAttributes(new { @class = "text-danger", title = "Delete" });
                                command.Custom("Save to Excel").Text(" ").IconClass("k-icon k-i-file-excel").Click("onSaveToExcelClick").HtmlAttributes(new { title = "Save to Excel" }); // Save to Excel button with tooltip
                                command.Custom("Email Estimate").Text(" ").IconClass("k-icon k-i-email").Click("onEmailEstimateClick").HtmlAttributes(new { title = "Email Estimate" }); // Email Estimate button with tooltip
                            }).Title("Actions").Width(260); // Set a fixed width for the Actions column
                        })
                        
                        .ToolBar(toolbar => {
                            toolbar.Create().Text("Add").IconClass("k-icon k-i-plus").HtmlAttributes(new { 
                                title = "Add new record",
                                @class = "k-primary" 
                            });
                            toolbar.Save().SaveText("Save").CancelText("Cancel")
                                .HtmlAttributes(new { 
                                    title_save = "Save all changes",
                                    title_cancel = "Discard changes"
                                });
                            toolbar.Excel().Text("Variance Report");
                        })
                        .Excel(excel =>
                        {
                            excel.FileName("VarianceReport.xlsx")
                            .Filterable(true)
                            .AllPages(true);

                        })
                        .Editable(editable => editable.Mode(GridEditMode.InCell))
                        .Events(events => events.ExcelExport("onExcelExport"))
                        .Reorderable(reorder => reorder.Columns(true))
                        //.Pageable()
                        .Pageable(p => p
                        .PageSizes(new int[] {1,2, 5, 10, 20, 50 }) // Dropdown options
                        
                        
                        )
                        .Sortable()
                        .ClientDetailTemplateId("template")
                        .Resizable(r => r.Columns(true))
                        .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
                        .ColumnMenu(menu => menu.Enabled(true))
                        .Scrollable(s => s.Height("auto"))
                        .DataSource(dataSource => dataSource
                            .Ajax()
                            .Model(model =>
                            {
                                model.Id(c => c.Id);
                                model.Field(c => c.RebuiltStockNum).Editable(true);
                                model.Field(c => c.MmsStockCode).Editable(true);
                                model.Field(c => c.Description).Editable(true);
                                model.Field(u => u.BusIds).DefaultValue(new List<int>());
                                model.Field(u => u.BusNames).DefaultValue(new List<string>());
                                model.Field(f => f.CostSavingPerUnitDummy).Editable(false);
                                model.Field(f => f.PercentageSavingPerUnitDummy).Editable(false);
                            })
                            .Events(events =>
                            {
                                events.RequestEnd("onRequestEnd"); 
                                events.Error("onDataSourceError");
                                 
                            })
                            .Read(read => read.Url(Url.Action("GetRebuiltPartsView", "RebuiltParts")).Type(HttpVerbs.Get))
                            .Create(create => create.Url(Url.Action("AddRebuiltPartsView", "RebuiltParts")).Type(HttpVerbs.Post))
                            .Update(update => update.Url(Url.Action("UpdateRebuiltPartsView", "RebuiltParts")).Type(HttpVerbs.Post))
                            .Destroy(delete => delete.Url(Url.Action("DeleteRebuiltPart", "NscPartsUsed")).Type(HttpVerbs.Post))
                        )
                    )
                }
                catch (Exception ex)
                {
                    <div class="alert alert-danger">Error loading rebuilt parts: @ex.Message</div>
                }
            </text>);

        tabstrip.Add().Text("Archived Parts")
            .Content(@<text>
                @try
                {
                    @Html.Partial("_ArchivedIndex")
                }
                catch (Exception ex)
                {
                    <div class="alert alert-danger">Error loading archived parts: @ex.Message</div>
                }
            </text>);
    })
)

<style>
    .k-grid td {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }
    
    .k-grid-header .k-header {
        white-space: normal;
        vertical-align: top;
    }
    
    .k-grid .k-hierarchy-col {
        width: 10px; /* Fix detail template arrow column width */
    }
</style>
<!-- Custom Delete Confirmation Dialog -->
<div id="deleteConfirmationDialog" style="display: none;">
    <div class="confirmation-message">
        <span class="k-icon k-i-warning confirmation-icon"></span>
        <span>Are you sure you want to delete this item?</span>
    </div>
    <div class="confirmation-buttons">
        <button type="button" class="k-button cancel-btn">Cancel</button>
        <button type="button" class="k-button confirm-btn">Delete</button>
    </div>
</div>
<div id="notification"></div>
<!-- Placeholder for dynamically loaded email estimate popup and notification -->
<div id="email-estimate-container" style="display: none;">
    @Html.Partial("_EmailEstimatePopup")
    <div id="estimates-container"></div>
     
</div>
<input type="hidden" name="SelectedBuses" id="SelectedBusesHidden" value="" />


@section Scripts {
    <script>
        // Truncation functions
        function truncateText(text, max=25) {
            return text?.length > max ? text.substr(0, max) + '...' : text;
          // return text;
        }

        function truncateWords(text, wordCount=10) {
            if (!text) return '';
            const words = text.split(/\s+/);
            return words.length > wordCount ? 
                words.slice(0, wordCount).join(' ') + '...' : 
                text;
        }

        // Vehicle Series display handler
        function formatVehicleSeries(buses) {
            if (!buses || !buses.length) return 'Select Vehicle';
            return buses.map(b => 
                `<span title="${b.BusName}">${truncateWords(b.BusName, 10)}</span>`
            ).join(', ');
        }

        // Update client template for Vehicle Series
        function refreshVehicleSeriesTemplate() {
            const grid = $("#RebuiltPartsGrid").data("kendoGrid");
            grid.refresh();
        }

       
    </script>

    <script>
        var tabIndex = -1; //-1 when  Main grid is acive, if below tabs are active get the resp. tabIndex ssk
        var tabStripName = "";
        $(document).ready(function () {
         

            /////////
            $("#email-estimate-container").hide();
            $("#archived-email-estimate-container").hide();
            //// start visual save changes
             // Initialize main TabStrip with proper error handling
            const mainTabStrip = $("#rebuildPartsTabStrip").data("kendoTabStrip");
            if (mainTabStrip) {
                // Correct tab item access using native array methods
                const tabs = mainTabStrip.items();
                if (tabs && tabs.length > 0) {
                    // Access first tab using array index
                    const firstTab = tabs[0];
                    $(firstTab.element).find(".k-link").addClass("has-unsaved");
                }

                // Add tabstrip styling
                mainTabStrip.wrapper.find(".k-tabstrip-items").append(`
                    <style>
                        .k-tabstrip-items .has-unsaved {
                            position: relative;
                            color: #d9534f !important;
                        }
                        .has-unsaved::after {
                            content: "•";
                            color: #d9534f;
                            position: absolute;
                            right: 8px;
                            top: 6px;
                            font-size: 1.5em;
                        }
                    </style>
                `);
            } else {
                console.warn("Main TabStrip not found");
            }

            ////end visual save changes
        
            var grid = $("#RebuiltPartsGrid").data("kendoGrid");

            // Initialize Kendo Notification for displaying messages
            var notificationElement = $("#notification");
            if (notificationElement.length === 0) {
                console.error("Notification element not found in the DOM.");
            } else {
                var notification = notificationElement.kendoNotification({
                    position: {
                        pinned: true,
                        top: 50,
                        right: 50
                    },
                    autoHideAfter: 5000, // Hide after 5 seconds
                    stacking: "down"
                }).data("kendoNotification");

                // // Bind the Save event for the grid
                // grid.bind("save", function (e) {
                //     // Optionally, update the UI with the response
                //     // Show a notification
                   
                //     var notification = $("#notification").data("kendoNotification");
                //    // notification.show("Vehicle Updated Successfully", "info");
                //     notification.show("Updated part successfully : " + e.model.RebuiltStockNum); // Display the stock number in the notification
                //     //$("#RebuiltPartsGrid").data("kendoGrid").dataSource.read(); //force refresh grid
                // });

                // Bind the Save event for the grid
                // grid.bind("save", function (e) {
                //     debugger;
                //     notification.show(e.model.RebuiltStockNum);
                //     // This event is triggered when the user clicks the Update button
                //     $.post('@Url.Action("UpdateRebuiltPartsView", "RebuiltParts")', { rebuiltPartNum: e.model.RebuiltStockNum })
                //         .done(function (data) {
                //             if (notification) {
                //                 notification.show("Changes saved successfully!", "success");
                //             } else {
                //                 console.error("Notification is not initialized.");
                //             }
                //         })
                //         .fail(function (xhr, status, error) {
                //             notification.show(e.model.RebuiltStockNum);
                //             console.error("Error saving changes: ", error);
                //             if (notification) {
                //                 notification.show("An error occurred while saving changes. Please try again.", "error");
                //             } else {
                //                 console.error("Notification is not initialized.");
                //             }
                //         });
                // });

                // Bind the Cancel event for the grid
                grid.bind("cancel", function (e) {
                    // This event is triggered when the user clicks the Cancel button
                    $.post('@Url.Action("CancelDetails", "RebuiltParts")', { rebuiltPartNum: e.model.RebuiltStockNum })
                        .done(function (data) {
                            if (notification) {
                                notification.show("Changes discarded!", "info");
                            } else {
                                console.error("Notification is not initialized.");
                            }
                        })
                        .fail(function (xhr, status, error) {
                            console.error("Error discarding changes: ", error);
                            if (notification) {
                                notification.show("An error occurred while discarding changes. Please try again.", "error");
                            } else {
                                console.error("Notification is not initialized.");
                            }
                        });
                });

                grid.bind("detailInit", function (e) {
                    const rebuiltStockNum = e.data.RebuiltStockNum;
                    
                    console.log("Detail initialization started for RebuiltStockNum: " + e.data.RebuiltStockNum);
                    var tabUrlLabourDetail = '@Url.Action("LabourDetailsPartial", "RebuiltParts")' + '?id=' + e.data.RebuiltStockNum;
                    var tabUrlLabourHourSummary = '@Url.Action("LabourHourSummaryPartial", "RebuiltParts")' + '?id=' + e.data.RebuiltStockNum;
                    var tabUrlMaterialCostSummary = '@Url.Action("MaterialCostSummaryPartial", "RebuiltParts")' + '?id=' + e.data.RebuiltStockNum;
                    var tabScPartDetail = '@Url.Action("ScPartsUsedInEstimates", "RebuiltParts")' + '?id=' + e.data.RebuiltStockNum;
                    var tabUrlNscDetail = '@Url.Action("NscDetailsPartial", "RebuiltParts")' + '?id=' + e.data.RebuiltStockNum;
                    var tabUrlRbPartDetail = '@Url.Action("RbDetailsPartial", "RebuiltParts")' + '?id=' + e.data.RebuiltStockNum;
                    var tabUrlTotalCost = '@Url.Action("TotalCostPartial", "RebuiltParts")' + '?id=' + e.data.RebuiltStockNum;

                    // Get the container for the detail template
                    var container = e.detailCell.find("#detail-template-" + e.data.RebuiltStockNum);

                    // Load the TabStrip structure
                    container.html(`
                                <div id="tabstrip-container-${e.data.RebuiltStockNum}">
                                    <ul>
                                         <li>Labour Details</li>
                                        <li>Labour Hour</li>
                                        <li>Material Cost</li>
                                        <li>Stock Coded Parts</li>
                                        <li>Non Stock Coded Parts</li>
                                        <li>Rebuilt Parts</li>
                                       
                                        <li>Total Cost</li>
                                    </ul>
                                    
                                    <div id="labour-details-content-${rebuiltStockNum}"></div>
                                    <div id="labour-hour-summary-content-${rebuiltStockNum}"></div>
                                    <div id="material-cost-summary-content-${rebuiltStockNum}"></div>
                                    <div id="material-details-content-${rebuiltStockNum}"></div>
                                    <div id="nsc-details-content-${rebuiltStockNum}"></div>
                                    <div id="rb-part-details-content-${rebuiltStockNum}"></div>
                                    
                                    <div id="total-cost-content-${rebuiltStockNum}">"></div>
                                </div>
                            `);

                    // Initialize the Kendo TabStrip
                    
                    var tabStrip = $("#tabstrip-container-" + e.data.RebuiltStockNum).kendoTabStrip({
                        animation: { open: { effects: "fadeIn" } },
                        select: function (e) {
                             tabIndex = $(e.item).index(); // Get the index of the selected tab
                             tabStripName = e.sender.element.attr("id") ; //ssk tabStripName

                            // Check for unsaved changes in the current tab
                            var currentTabContent = tabStrip.contentElement(tabStrip.select().index());
                            var currentGrid = $(currentTabContent).find(".k-grid").data("kendoGrid");
                            console.log("*******currentGrid :", currentGrid);

                             console.log("*******currentTabContent :", currentTabContent);
                         //    var gridName = currentGrid.element.attr("id");
                           //  console.log("*******currentGridName :", gridName);
                          //  notification.show("currentGridName :" + gridName, "warning");
                            


                             tabIndex = $(e.item).index(); // Get the index of the selected tab
                           
                            if (currentGrid &&  (currentGrid.dataSource.hasChanges()) ) { //kendoNotification show waring for reaonly
                                console.log("hasChanges :", currentGrid.dataSource.hasChanges());
                            
                                // Show a warning notification
                                if (notification) {
                                    notification.show("You have unsaved changes. Click on Update or Cancel changes before clicking next tab.", "warning");
                                   // notification.show(currentGrid);
                                  //  notification.show(currentGrid.dataSource.hasChanges());
                                } else {
                                    console.error("****** Notification is not initialized.");
                                }
                                e.preventDefault(); // Prevent the tab switch
                                return;
                            }

                            // Load the partial view content for the selected tab
                            var tabUrl = tabIndex == 0 ? tabUrlLabourDetail :
                                tabIndex == 1 ? tabUrlLabourHourSummary :
                                    tabIndex == 2 ? tabUrlMaterialCostSummary :
                                        tabIndex == 3 ? tabScPartDetail :
                                            tabIndex == 4 ? tabUrlNscDetail :
                                                tabIndex == 5 ? tabUrlRbPartDetail :
                                                    tabUrlTotalCost;

                            $.get(tabUrl)
                                .done(function (data) {
                                     
                                    $(e.contentElement).html(data);
                                    kendo.init($(e.contentElement)); // Reinitialize Kendo widgets
                                    if (tabIndex == 0) { 
                                     var gridName = 'LabourDetailsGrid_' + rebuiltStockNum; //ssk2
                                        console.log('########  :gridName ', gridName);
                                    }

                                    console.log('########  :tabIndex ', tabIndex);
                                    // Reset the hasChanges() state for read-only tabs
                                    if (tabIndex == '6' || tabIndex == '1' || tabIndex == '2') { //read-only tab
                                        var grid = $(e.contentElement).find(".k-grid").data("kendoGrid");
                                        // console.log("*******currentGrid2 :", currentGrid);
                                          var gridName = grid.element.attr("id");
                                         console.log("*******currentGridName2 :", gridName);
                                       // console.log("*******currentTabContent :", currentTabContent);
                                            grid.dataSource.read(); // Refresh the data source                                      
                                    }
                                })
                                .fail(function (xhr, status, error) {
                                    console.error("Error loading tab content: ", error);
                                    if (notification) {
                                        notification.show("An error occurred while loading the tab content. Please try again.", "error");
                                    } else {
                                        console.error("Notification is not initialized.");
                                    }
                                });
                        }
                    }).data("kendoTabStrip");
                    //start visual save changes

                    
                    $.get(tabUrlLabourDetail)
                        .done(function (data) {
                            $("#labour-details-content").html(data);
                            kendo.init($("#labour-details-content")); // Reinitialize Kendo widgets
                        })
                        .fail(function (xhr, status, error) {
                            console.error("Error loading initial tab content: ", error);
                            if (notification) {
                                notification.show("An error occurred while loading the initial tab content. Please try again.", "error");
                            } else {
                                console.error("Notification is not initialized.");
                            }
                        });
                });
            }
            //archived --------------------------------------------
            var grid = $("#ArchivedRebuiltPartsGrid").data("kendoGrid");

            // Initialize Kendo Notification for displaying messages
            var notificationElement = $("#archived-notification");
            if (notificationElement.length === 0) {
                console.error("Notification element not found in the DOM.");
            } else {
                var notification = notificationElement.kendoNotification({
                    position: {
                        pinned: true,
                        top: 50,
                        right: 50
                    },
                    autoHideAfter: 5000, // Hide after 5 seconds
                    stacking: "down"
                }).data("kendoNotification");
                //TODO : Revisit when View Archived Logic gets re-written. Need new controller
                //VB Code CES_INQUIRY.RETRIVE_RBP_USED
                //CES_ARCHICE.ARCHIVE_RB
                //Uncomment ClientDetailTemplateId("archived-template") in _ArchivedIndex.cshtml
            
                // Bind the detailInit event for the grid
                // grid.bind("detailInit", function (e) {
                //     console.log("Detail initialization started for RebuiltStockNum: " + e.data.RebuiltStockNum);
                //     var tabUrlLabourDetail = '@Url.Action("LabourDetailsPartial", "RebuiltParts")' + '?rebuiltPartNum=' + e.data.RebuiltStockNum;
                //     var tabUrlLabourHourSummary = '@Url.Action("LabourHourSummaryPartial", "RebuiltParts")' + '?rebuiltPartNum=' + e.data.RebuiltStockNum;
                //     var tabUrlMaterialCostSummary = '@Url.Action("MaterialCostSummaryPartial", "RebuiltParts")' + '?rebuiltPartNum=' + e.data.RebuiltStockNum;
                //     var tabScPartDetail = '@Url.Action("ScPartsUsedInRbParts", "RebuiltParts")' + '?rebuiltPartNum=' + e.data.RebuiltStockNum;
                //     var tabUrlNscDetail = '@Url.Action("NscDetailsPartial", "RebuiltParts")' + '?rebuiltPartNum=' + e.data.RebuiltStockNum;
                //     var tabUrlRbPartDetail = '@Url.Action("RbDetailsPartial", "RebuiltParts")' + '?rebuiltPartNum=' + e.data.RebuiltStockNum;
                //     var tabUrlTotalCost = '@Url.Action("TotalCostPartial", "RebuiltParts")' + '?rebuiltPartNum=' + e.data.RebuiltStockNum;

                //     // Get the container for the detail template
                //     var container = e.detailCell.find("#archived-detail-template-" + e.data.RebuiltStockNum);

                //     // Load the TabStrip structure
                //     container.html(`
                //                 <div id="archived-tabstrip-container-${e.data.RebuiltStockNum}">
                //                     <ul>
                //                         <li class="k-state-active">Labour Details</li>
                //                         <li>Labour Hour</li>
                //                         <li>Material: Cost</li>
                //                         <li>Stock Coded Parts</li>
                //                         <li>Non Stock Coded Parts</li>
                //                         <li>Rebuilt Built Parts</li>
                //                         <li>Total Cost</li>
                //                     </ul>
                //                     <div id="archived-labour-details-content"></div>
                //                     <div id="archived-labour-hour-summary-content"></div>
                //                     <div id="archived-material-cost-summary-content"></div>
                //                     <div id="archived-material-details-content"></div>
                //                     <div id="archived-nsc-details-content"></div>
                //                     <div id="archived-rb-part-details-content"></div>
                //                     <div id="archived-total-cost-content"></div>
                //                 </div>
                //             `);

                //     // Initialize the Kendo TabStrip
                //     var tabStrip = $("#archived-tabstrip-container-" + e.data.RebuiltStockNum).kendoTabStrip({
                //         animation: { open: { effects: "fadeIn" } },
                //         select: function (e) {
                //              tabIndex = $(e.item).index(); // Get the index of the selected tab
                //               tabStripName = e.sender.element.attr("id") ; //ssk tabStripName

                //             // Load the partial view content for the selected tab
                //              tabUrl = tabIndex == 0 ? tabUrlLabourDetail :
                //                 tabIndex == 1 ? tabUrlLabourHourSummary :
                //                     tabIndex == 2 ? tabUrlMaterialCostSummary :
                //                         tabIndex == 3 ? tabScPartDetail :
                //                             tabIndex == 4 ? tabUrlNscDetail :
                //                                 tabIndex == 5 ? tabUrlRbPartDetail :
                //                                     tabUrlTotalCost;

                //             $.get(tabUrl)
                //                 .done(function (data) {
                //                     $(e.contentElement).html(data);
                //                     kendo.init($(e.contentElement)); // Reinitialize Kendo widgets
                //                 })
                //                 .fail(function (xhr, status, error) {
                //                     console.error("Error loading tab content: ", error);
                //                     if (notification) {
                //                         notification.show("An error occurred while loading the tab content. Please try again.", "error");
                //                     } else {
                //                         console.error("Notification is not initialized.");
                //                     }
                //                 });
                //         }
                //     }).data("kendoTabStrip");

                //     // Load the first tab's content
                //     $.get(tabUrlLabourDetail)
                //         .done(function (data) {
                //             $("#archived-labour-details-content").html(data);
                //             kendo.init($("#archived-labour-details-content")); // Reinitialize Kendo widgets
                //         })
                //         .fail(function (xhr, status, error) {
                //             console.error("Error loading initial tab content: ", error);
                //             if (notification) {
                //                 notification.show("An error occurred while loading the initial tab content. Please try again.", "error");
                //             } else {
                //                 console.error("Notification is not initialized.");
                //             }
                //         });
                // });
            }
            //archived end  ----------------------------------------

            
        });

        function onArchiveClick(e) {
            e.preventDefault();
            var grid = $("#RebuiltPartsGrid").data("kendoGrid");
            var dataItem = grid.dataItem($(e.currentTarget).closest("tr"));

            // Call the controller action with the entire dataItem as JSON
            $.ajax({
                url: '@Url.Action("ArchiveRBDetails", "RebuiltParts")',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(dataItem),
                success: function (data) {
                    // Display a Kendo Notification
                    var notification = $("#notification").kendoNotification({
                        position: {
                            pinned: true,
                            top: 50,
                            right: 50
                        },
                        autoHideAfter: 5000, // Hide after 5 seconds
                        stacking: "down"
                    }).data("kendoNotification");

                    notification.show("Archive is clicked.", "info");
                },
                error: function (xhr, status, error) {
                    console.error("Error archiving: ", error);
                }
            });
        }

        function onEmailEstimateClick(e) {
            e.preventDefault();
            var grid = $("#RebuiltPartsGrid").data("kendoGrid");
            var dataItem = grid.dataItem($(e.currentTarget).closest("tr"));
            var rebuiltPartNum = dataItem.RebuiltStockNum;

            // Show the email estimate container
            $("#email-estimate-container").show();

            // Generate the Excel file by calling SaveToExcel via AJAX
            $.ajax({
                url: '@Url.Action("SaveToExcel", "Export")',
                type: 'GET',
                data: { rebuiltPartNum: rebuiltPartNum },
                xhrFields: {
                    responseType: 'blob' // Ensure the response is treated as a binary file
                },
                success: function (data) {
                    // Create a link element to trigger the file download
                    var link = document.createElement('a');
                    link.href = window.URL.createObjectURL(data);
                    link.download = `${rebuiltPartNum}_RebuiltParts_Estimate.xlsx`;
                    link.click();

                    // Set the subject with the rebuilt number and today's date
                    var today = new Date();
                    var subject = `Rebuilt Part Estimates for ${rebuiltPartNum} - Date ${today.toLocaleDateString()} ${today.toLocaleTimeString()}`;

                    // Set the form values
                    $("#to").val("");
                    $("#subject").val(subject);
                    $("#body").val(`Dear Sir/Madam,\nPlease find attached here with Rebuilt Part Estimate for ${rebuiltPartNum}.\n\nThank you`);

                    // Open the Kendo Window
                    var kendoWindow = $("#emailEstimateWindow").data("kendoWindow");
                    if (kendoWindow) {
                        kendoWindow.center().open();
                    } else {
                        console.error("Kendo Window not found.");
                    }
                },
                error: function (xhr, status, error) {
                    console.error("Error downloading Excel file:", error);
                }
            });
        }

        function onSaveToExcelClick(e) {
            e.preventDefault();
            var grid = $("#RebuiltPartsGrid").data("kendoGrid");
            var dataItem = grid.dataItem($(e.currentTarget).closest("tr"));
            var rebuiltPartNum = dataItem.RebuiltStockNum;

            // Directly trigger the file download
            window.location.href = '@Url.Action("SaveToExcel", "Export")' + '?rebuiltPartNum=' + rebuiltPartNum;
        }

        function onCancelEmailClick() {
            // Close the Kendo Window
            var window = $("#emailEstimateWindow").data("kendoWindow");
            window.close();

            // Show a notification
            var notification = $("#notification").data("kendoNotification");
            notification.show("Email Request Cancelled", "info");
        }

    //     function getDropDownListParams() {
    //        // debugger;
    //        console.log("********** inside getDropDownListParams");
    //         var gridName = "RebuiltPartsGrid";
    //         console.log("tabStripName :", tabStripName); //ssk
    //         console.log("tabIndex :", tabIndex);           
    //          //if columnName == "Keyword" and  we are in the main grid
    //         if (tabIndex == -1) 
    //          { 
    //              gridName = "RebuiltPartsGrid";
    //          }
    //         else if (tabIndex == 0) 
    //         { 
    //              gridName = "LabourDetailsGrid";
    //         }
    //         else if (tabIndex == 3) 
    //         { 
    //              gridName = "ScPartsMaterialDetailsRebuiltPartsGrid";
    //         }
    //         else if (tabIndex == 4) 
    //         { 
    //              gridName = "NscPartsMaterialDetailsRebuiltPartsGrid";
    //         }
    //         else if (tabIndex == 5) 
    //         { 
    //              gridName = "RbPartsMaterialDetailsRebuiltPartsGrid";
    //         }
    //         console.log("gridName :", gridName);

    //         var passedGridName = "#" +  gridName + "";
    //         console.log("passedGridName :", passedGridName);
    //         // 1. Get grid reference
    //         var grid = $(passedGridName).data("kendoGrid");
    //          console.log("*******currentGrid3 :", grid);
    //         //  var gridName = grid.element.attr("id");
    //           console.log("*******currentGridName3 :", gridName);
    //                        //  console.log("*******currentTabContent :", currentTabContent);
    //         if (!grid) {
    //             console.warn("%%%%%%% Grid not found");
    //             return {};
    //         }

    //         // 2. Find currently edited cell
    //         var editCell = grid.element.find(".k-edit-cell");
    //         if (editCell.length === 0) {
    //             console.warn("No active edit cell");
    //             return {};
    //         }

    //         // 3. Find dropdown input in edit cell
    //         var dropdownInput = editCell.find("input[data-role='dropdownlist']");
    //         if (!dropdownInput.length) {
    //             console.warn("Dropdown input not found");
    //             return {};
    //         }

    //         // 4. Get column name from data attribute
    //         var columnName = dropdownInput.attr("data-column") || "";
        
    //         // 5. Get dropdown instance and current filter value
    //         var dropdown = dropdownInput.data("kendoDropDownList");
    //         if (!dropdown) {
    //             console.warn("Dropdown instance not found");
    //             return {};
    //         }

    //         // 6. Get the ACTUAL FILTER TEXT from the DataSource
    //         var searchText = "";
    //         var currentFilter = dropdown.dataSource.filter();
    //         if (currentFilter && currentFilter.filters && currentFilter.filters.length > 0) {
    //             searchText = currentFilter.filters[0].value; // Get the filter value
    //         }

    //         console.log("Params:", { 
    //             columnName: columnName, 
    //             searchText: searchText 
    //         });

    //         return {
    //             columnName: columnName,
    //             searchText: searchText
    //         };
    // }
    
    // function getDropDownListParams() {
    //     const activeCell = $(".k-edit-cell:visible");
    //     const dropdownWrapper = activeCell.find(".k-dropdown");
    //     console.log('columnName :', dropdownWrapper.data("column"));
    //         console.log('partNum :', dropdownWrapper.data("column"));

    
    //     return {
    //         columnName: dropdownWrapper.data("column"),  
    //         partNum: dropdownWrapper.data("partnum"),
    //         searchText: dropdownWrapper.find(".k-input").val() || ""
    //     };
    // }

    //     function onDropDownChange(e) {
    //         console.log("********* onDropDownChange");
    //         var column = e.sender.element.attr("data-column");
    //         console.log("column :", column);
    //         //if columnName == "Keyword" and  we are in the main grid, reset tabIndex 
    //         if (column == "KeywWord") {
    //             tabIndex = -1;
    //         }
    //     }
    </script>

    <script id="template" type="text/x-kendo-template">
        <div id="detail-template-#=RebuiltStockNum#"></div>
    </script>
    <script>
                  

        /////////////////
         function onArchivedEmailEstimateClick(e) {
            e.preventDefault();
            var grid = $("#ArchivedRebuiltPartsGrid").data("kendoGrid");
            var dataItem = grid.dataItem($(e.currentTarget).closest("tr"));
            var rebuiltPartNum = dataItem.RebuiltStockNum;

            // Show the email estimate container
            $("#archived-email-estimate-container").show();

            // Generate the Excel file by calling SaveToExcel via AJAX
            $.ajax({
                url: '@Url.Action("SaveToExcel", "Export")',
                type: 'GET',
                data: { rebuiltPartNum: rebuiltPartNum },
                xhrFields: {
                    responseType: 'blob' // Ensure the response is treated as a binary file
                },
                success: function (data) {
                    // Create a link element to trigger the file download
                    var link = document.createElement('a');
                    link.href = window.URL.createObjectURL(data);
                    link.download = `${rebuiltPartNum}_RebuiltParts_Estimate.xlsx`;
                    link.click();

                    // Set the subject with the rebuilt number and today's date
                    var today = new Date();
                    var subject = `Rebuilt Part Estimates for ${rebuiltPartNum} - Date ${today.toLocaleDateString()} ${today.toLocaleTimeString()}`;

                    // Set the form values
                    $("#to").val("");
                    $("#subject").val(subject);
                    $("#body").val(`Dear Sir/Madam,\nPlease find attached here with Rebuilt Part Estimate for ${rebuiltPartNum}.\n\nThank you`);

                    // Open the Kendo Window
                    var kendoWindow = $("#emailEstimateWindow").data("kendoWindow");
                    if (kendoWindow) {
                        kendoWindow.center().open();
                    } else {
                        console.error("Kendo Window not found.");
                    }
                },
                error: function (xhr, status, error) {
                    console.error("Error downloading Excel file:", error);
                }
            });
        }

        function onArchivedSaveToExcelClick(e) {
            e.preventDefault();
            var grid = $("#ArchivedRebuiltPartsGrid").data("kendoGrid");
            var dataItem = grid.dataItem($(e.currentTarget).closest("tr"));
            var rebuiltPartNum = dataItem.RebuiltStockNum;

            // Directly trigger the file download
            window.location.href = '@Url.Action("SaveToExcel", "Export")' + '?rebuiltPartNum=' + rebuiltPartNum;
        }
    </script>
    <script id="archived-template" type="text/x-kendo-template">
        <div id="archived-detail-template-#=RebuiltStockNum#"></div>
    </script>
   @* <script>
        // Event triggered before any CRUD operation (Read, Update, Destroy)
        function onRequestStart(e) {
            // Check if the request type is Update or Destroy
            if (e.type === "update" || e.type === "destroy") {
                var grid = $("#RebuiltPartsGrid").data("kendoGrid");
                var selectedRow = grid.select(); // Get the selected row
                var dataItem = grid.dataItem(selectedRow); // Get the data for the selected row

                if (dataItem && dataItem.RebuiltStockNum) {
                    // Append RebuiltStockNum to the request
                    e.sender.transport.options.update.data = { RebuiltStockNum: dataItem.RebuiltStockNum };
                    e.sender.transport.options.destroy.data = { RebuiltStockNum: dataItem.RebuiltStockNum };
                }
            }
        }
    </script> *@
    <script>
        function onBusChange(e) {
                 console.log("event: buschange");
                var selectedBuses = this.value();
                console.log("selected buses :");
                console.log(selectedBuses);
                               
                $.ajax({
                url: '@Url.Action("GetSelectedBuses", "RebuiltParts")',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ buses: selectedBuses }),
                beforeSend: function (xhr) {
                   
                    console.log("Sending data :", JSON.stringify({ buses: selectedBuses }));
                },
                success: function (data) {
                  
                    console.log('Success:', data);
                    
                },

                error: function (error, data) {
                    console.log('datasent : ', data);
                    console.error('Error:', error);
                }
            });
            }

            function onBusDataBound() {
                console.log("event: busdataBound");

            }

            function errorHandler(e) {
            if (e.errors) {
                var message = "Errors:\n";
                $.each(e.errors, function (key, value) {
                    if ('errors' in value) {
                        $.each(value.errors, function () {
                            message += this + "\n";
                        });
                    }
                });
                alert(message);
            }
        }
       
    </script>
    <script>
             
        // Error handler
        function onDataSourceError(e) {
              // debugger;
                let errorMessage = "onDataSourceError - Operation failed: ";

                if (e.errors) {
                    // Display validation errors
                    $.each(e.errors, function (key, value) {
                        if (value.errors) {
                            errorMessage += value.errors.join(", ");
                        }
                    });
                } 
                else if (e.errorThrown) {
                    errorMessage += e.errorThrown;
                } else if (e.xhr && e.xhr.responseText) {
                    errorMessage += e.xhr.responseText;
                }

                var notification = $("#notification").data("kendoNotification");
                notification.error(errorMessage);
            }

        // Success handler
        function onRequestEnd(e) {
           var notification = $("#notification").data("kendoNotification");
           notification.success(e.type);
          // Initialize notification FIRST
                 
                if (e.type === "create") {
                    var notification = $("#notification").data("kendoNotification");                    
                    notification.success("Record created successfully");
                  //  $("#userGrid").data("kendoGrid").dataSource.read(); //force refresh grid
                } else if (e.type === "update") {
                   var notification = $("#notification").data("kendoNotification");                   
                    notification.success("Record updated successfully");
                  //   $("#userGrid").data("kendoGrid").dataSource.read(); //force refresh grid
                } else if (e.type === "destroy") {
                    var notification = $("#notification").data("kendoNotification");                    
                     notification.success("Record deleted successfully");
                  //  $("#userGrid").data("kendoGrid").dataSource.read(); //force refresh grid
                } 
            }

            function onLabourRequestEnd(e) {
               var notification = $("#notification").data("kendoNotification");
               notification.success(e.type);
              // Initialize notification FIRST
                 
                    if (e.type === "create") {
                        var notification = $("#notification").data("kendoNotification");                    
                        notification.success("Record created successfully");
                      //  $("#userGrid").data("kendoGrid").dataSource.read(); //force refresh grid
                    } else if (e.type === "update") {
                       var notification = $("#notification").data("kendoNotification");                   
                        notification.success("Record updated successfully");
                      //   $("#userGrid").data("kendoGrid").dataSource.read(); //force refresh grid
                    } else if (e.type === "destroy") {
                        var notification = $("#notification").data("kendoNotification");                    
                         notification.success("Record deleted successfully");
                      //  $("#userGrid").data("kendoGrid").dataSource.read(); //force refresh grid
                    } 
                }

    </script>
   
    <script>
    function getAutoCompleteParams() {
        var input = $("input[data-role='autocomplete']:focus");
        return {
            columnName: input.attr("name"),
            searchText: input.val() || "" // Handle empty search text
        };
    }
   
    function getComboBoxParams() {
        var input = $(".k-combobox input.k-input:focus");
        return {
            columnName: input.attr("name")?.replace("_input", ""),
            searchText: input.val() || ""
        };
    }
    
    </script>
   
    
       @* Start : Add following for validation *@
    <script>
        // Validation for AutoComplete
        function validateAutoCompleteSelection(e) {
            const column = e.sender.element.attr("data-column");
            const value = e.sender.value();
            let regex, error;

            if (column === "LabourDefn") {
                regex = /^[a-zA-Z0-9-()\s]*$/;
                error = "Invalid Labour Definition, check for special characters";
            }
            else if (column === "CostCentre") {
                regex = /^[a-zA-Z0-9-&()\s]*$/;
                error = "Invalid Cost Centre, check for special characters";
            }
            else if (column === "Task") {
                regex = /^[a-zA-Z0-9-&()\s]*$/;
                error = "Invalid Task, check for special characters";
            }

            if (regex && !regex.test(value)) {
                notification.error(error);
                e.sender.value("");
            }
        }

        // Inline Edit Validation
        function onEdit(e) {
            showNotification("info", "onEdit : " + e.field + ".");
            //Recalculate Totalcost
            if (["Percentage", "Qty", "OemPartCost"].includes(e.field)) {
                e.model.set("needsRecalculation", true);
                showNotification("info", "Please recalculate Total Cost after modifying " + e.field + ".");
            }
            const validationRules = {
                "LabourDefn": {
                    regex: /^[a-zA-Z0-9()\s]*$/,
                    error: "Invalid Supplier Name, check for special characters"
                },
                "CostCentre": {
                    regex: /^[a-zA-Z0-9&-()\s]*$/,
                    error: "Invalid Supplier Name, check for special characters"
                },
                "Task": {
                    regex: /^[a-zA-Z0-9&-()\s]*$/,
                    error: "Invalid Task, check for special characters"
                }
            };

            Object.entries(validationRules).forEach(([field, rule]) => {
                const input = e.container.find(`input[name='${field}']`);
                input.on("input", function() {
                    if (!rule.regex.test(this.value)) {
                        notification.error(rule.error);
                        $(this).addClass("k-invalid");
                    } else {
                        $(this).removeClass("k-invalid");
                    }
                });
            });

           
        }

        // Keep existing notification and error handlers
    </script>
    @* End : Add  validation *@
    <script>
        function refreshScPartDetails(e) {
               
               var gridName = $("#scGridNameField").val(); // Get grid name from hidden field
               if (!gridName) {
                    console.warn("SC Grid name not found.");
                    return;
                }

                var grid = $("#" + gridName).data("kendoGrid"); // Select the grid dynamically

                if (grid) {
                    grid.dataSource.read(); // Refresh grid data
                } else {
                    console.warn("Grid not found: " + gridName);
                }
            var dataItem = grid.dataItem($(e.currentTarget).closest("tr"));
            var notification = $("#notification").data("kendoNotification");

            if (!dataItem.MMSStockCode) {
                notification.show("Please enter a valid Stock Code before refreshing", "error");
                return;
            }

            $.ajax({
                url: '@Url.Action("GetScPartDetails", "ScPartsUsedInEstimates")',
                data: { mmsStockCode: dataItem.MMSStockCode },
                beforeSend: function () {
                    notification.show("Fetching part details...", "info");
                },
                success: function (response) {
                    if (response && response.PartType && response.DetailedDesc) {
                        var dialog = $("#partDetailsDialog").data("kendoDialog");
                        dialog.content(`
                            <div style="padding: 10px;">
                                <p><strong>Part Type:</strong> ${response.PartType}</p>
                                <p><strong>Part Description:</strong> ${response.DetailedDesc}</p>
                                <p><strong>Part Unit CostCentre ($/unit):</strong> ${response.UnitCost}</p>
                            </div>
                        `);
                        dialog.open();
                    } else {
                        notification.show("No matching parts found for this Stock Code", "warning");
                    }
                },
                error: function (xhr) {
                    var errorMessage = xhr.status === 404
                        ? "Stock Code not found in system"
                        : "Error retrieving part details";
                    notification.show(errorMessage, "error");
                }
            });
        }

    </script>
    <script>
        function parseCurrency(value) {
            try {
                if (!value) return 0;
                // Remove non-numeric characters except digits, dots, and minus signs
                var numString = value.toString().replace(/[^0-9.-]/g, '');
                var num = parseFloat(numString);
                return isNaN(num) ? 0 : num;
            } catch (e) {
                showError("Error parsing currency: " + e.message);
                return 0;
            }
        }

        function formatNegative(value) {
            try {
               
                // Format to 2 decimal places and wrap negatives in parentheses
                return value < 0 ? `(${Math.abs(value).toFixed(2)})` : value.toFixed(2);
            } catch (e) {
                showError("Error formatting number: " + e.message);
                return '0.00';
            }
        }

        function calculateCostSaving(BuyNewCost, RemanCost) {
            
                  //  console.log('inside calculateCostSaving ');
            
            try {
              //  console.log('BuyNewCost :', BuyNewCost);
                //    console.log('RemanCost :', RemanCost);
                var buyNew = parseCurrency(BuyNewCost);
                var reman = parseCurrency(RemanCost);
                var costSaving = buyNew - reman;
                //console.log("returning costSaving:", costSaving);
               // console.log("returning formatNegative :", formatNegative(costSaving));
                return formatNegative(costSaving);
            } catch (e) {
                showError("Error calculating cost saving: " + e.message);
                return '0.00';
            }
        }

        function calculatePercentageSaving(BuyNewCost, RemanCost) {
            
            try {
                var buyNew = parseCurrency(BuyNewCost);
                var reman = parseCurrency(RemanCost);
                var costSaving = buyNew - reman;

                if (buyNew === 0) return '0.00%'; // Avoid division by zero

                var percentage = (costSaving / buyNew) * 100;
                return formatNegative(percentage) + '%';
            } catch (e) {
                console.log("Error calculating percentage saving: " + e.message);
                return '0.00%';
            }
        }

        function showError(message) {
            var notification = $("#notification").data("kendoNotification");
            if (notification) {
                notification.error(message);
            } else {
                console.error("Notification widget not initialized. Error: " + message);
            }
        }
    </script>

    <script>
        function refreshNscPartDetails(e) {
           // var grid = $("#NscPartsMaterialDetailsRebuiltPartsGrid").data("kendoGrid");
           var nscGridName = $("#nscGridNameField").val(); // Get grid name from hidden field
           console.log('nscGridName :', nscGridName);
            if (!nscGridName) {
                console.warn("NSC Grid name not found. returning");
                return;
            }

           // var grid = $("#" + nscGridName).data("kendoGrid"); // Select the grid dynamically
            var grid = $("#NscPartsMaterialDetailsRebuiltPartsGrid").data("kendoGrid");

            if (grid) {
              //  grid.dataSource.read(); // Refresh grid data
            } else {
                    console.warn("Grid not found: " + nscGridName);
            }
            var dataItem = grid.dataItem($(e.currentTarget).closest("tr"));
            var notification = $("#notification").data("kendoNotification");

            if (!dataItem.OrigSuppNum) {
                notification.show("Supplier Number is required to refresh details", "error");
                return;
            }

            $.ajax({
                url: '@Url.Action("RefreshNscPartDetails", "NscPartsUsedInEstimates")',
                data: { origSuppNum: dataItem.OrigSuppNum },
                beforeSend: function() {
                    notification.show("Refreshing part details...", "info");
                },
                success: function(response) {
                    if (response.Message) {
                        // Handle cost validation error
                        notification.show(response.Message, "error");

                        // Optional: Update other fields even if cost is invalid
                        if (response.Data) {
                            dataItem.set("OrigSupplierName", response.Data.OrigSupplierName);
                            dataItem.set("KeyWord", response.Data.KeyWord);
                            dataItem.set("Description", response.Data.Description);
                            
                           // grid.refresh();
                        }
                    } else {
                        // Update all fields
                        dataItem.set("OrigSupplierName", response.OrigSupplierName);
                        dataItem.set("KeyWord", response.KeyWord);
                        dataItem.set("Description", response.Description);
                        dataItem.set("OemPartCost", response.OemPartCost);
                       
                      //  grid.refresh();
                        notification.show("Details updated successfully", "success");
                    }
                },
                error: function(xhr) {
                    var errorMessage = xhr.status === 404
                        ? "Supplier not found"
                        : "Error refreshing details";
                    notification.show(errorMessage, "error");
                }
            });
        }
    </script>

    <script>
        function onCellClose(e) {
            // Get grid instance and cell element
            const grid = e.sender;
            const cell = e.container || e.cell; // Handle different event argument structures

            // Method 1: Get field name from column index
            const columnIndex = $(cell).index();
            const column = grid.columns[columnIndex];
            let fieldName = column.field;

            // Method 2: Fallback to data-field attribute
            if (!fieldName) {
                fieldName = $(cell).attr("data-field");
            }

            // Debugging: Uncomment to see values in console
            console.log("Column Index:", columnIndex);
            console.log("Column Object:", column);
            console.log("Field Name:", fieldName);

            // Fields that require recalculation
            const criticalFields = ["Percentage", "Qty", "OemPartCost"];

            if (criticalFields.includes(fieldName)) {
                const dataItem = e.model;
                dataItem.set("needsRecalculation", true);
                showNotification("info", "Please recalculate Total Cost for this row.");
            }
        }

        

        function onSaveChanges(e) {
            const grid = $("#NscPartsMaterialDetailsRebuiltPartsGrid").data("kendoGrid");
            const row = $(e.currentTarget).closest("tr");
            const dataItem = grid.dataItem(row);
           // const needsRecalc = dataItem.get("needsRecalculation"); //ssk4
            const needsRecalc = grid.dataSource.data().some(item => item.needsRecalculation);
          //  const needsRecalc = grid.dataSource.data().some(item => item.needsRecalculation);
           // showNotification("error", needsRecalc);

             //const needsRecalc = dataItem.some(item => item.needsRecalculation);
            // showNotification("error", needsRecalc);
          //  showNotification("error", "inside onSaveChanges :.needsRecalc = " + needsRecalc);

            if (needsRecalc) {
                e.preventDefault();
                showNotification("error", "Recalculate Total Cost for modified rows before saving.");
            }
        }

        function recalculateTotalCost(e) {
            e.preventDefault();
            const grid = $("#NscPartsMaterialDetailsRebuiltPartsGrid").data("kendoGrid");
            const row = $(e.currentTarget).closest("tr");
            const dataItem = grid.dataItem(row);
           
            // Handle number formatting
            const parseNumber = (value) => {
                const num = typeof value === 'string'
                    ? parseFloat(value.replace(/,/g, ''))
                    : value;
                return isNaN(num) ? 0 : num;
            };

            const percentage = parseNumber(dataItem.Percentage);
            const qty = parseNumber(dataItem.Qty);
            const oemPartCost = parseNumber(dataItem.OemPartCost);
            console.log("Sending values:", {
                percentage: percentage,
                qty: qty,
                oemPartCost: oemPartCost
            });
            $.ajax({
                url: '@Url.Action("RecalculateTotalCost", "NscPartsUsedInEstimates")',
                type: 'POST',
                contentType: 'application/x-www-form-urlencoded',
                data: {
                    percentage: percentage,
                    qty: qty,
                    oemPartCost: oemPartCost
                },
                success: function (response) {
                    if (response.success) {
                        console.log("Now time to reset Recalculation. Received response:", response);

                        // Update data item and refresh grid
                        dataItem.set("TotalCost", response.totalCost);
                        dataItem.set("needsRecalculation", false); 

                        // Force grid refresh
                       
                      //  grid.refresh(); //ssk2
                       // grid.dataSource.sync(); //ssk2
                        
                        showNotification("success", "Total Cost updated: $" + response.totalCost.toFixed(2));
                    } else {
                       
                        showNotification("error", response.message || "Recalculation failed");
                    }
                },
                error: function (xhr) {
                    showNotification("error", "Server error: " + xhr.statusText);
                }
            });
        }

        function showNotification(type, message) {
            var notification = $("#notification").data("kendoNotification");
            if (!notification) {
                notification = $("#notification").kendoNotification({
                    position: { pinned: true, top: 50, right: 50 },
                    autoHideAfter: 5000
                }).data("kendoNotification");
            }
            notification.show(message, type);
        }
    </script>

    <script>
        function refreshRbPartDetails(e) {
            var grid = $("#RbPartsMaterialDetailsRebuiltPartsGrid").data("kendoGrid");
            var dataItem = grid.dataItem($(e.currentTarget).closest("tr"));
            var notification = $("#notification").data("kendoNotification");
            notification.show(dataItem.RebuiltStockNum, "error");

            if (!dataItem.RebuiltStockNum) {
                notification.show(dataItem.RebuiltStockNum, "error");
                notification.show("Rebuilt Part Number is required to refresh details", "error");
                return;
            }

            $.ajax({
                url: '@Url.Action("RefreshRbPartDetails", "RbPartsUsedInEstimates")',
                data: { rebuiltStockNum: dataItem.RebuiltStockNum },
                beforeSend: function() {
                    notification.show("Refreshing part details...", "info");
                },
                success: function(response) {
                    if (response.Message) {
                        // Handle cost validation error
                        notification.show(response.Message, "error");

                        // Optional: Update other fields even if cost is invalid
                        if (response.Data) {
                           // dataItem.set("RebuiltStockNum", response.Data.RebuiltStockNum);
                            dataItem.set("KeyWord", response.Data.KeyWord);
                            dataItem.set("Description", response.Data.Description);
                       //     grid.refresh();
                        }
                    } else {
                        // Update all fields
                      //  dataItem.set("RebuiltStockNum", response.RebuiltStockNum);
                        dataItem.set("KeyWord", response.KeyWord);
                        dataItem.set("Description", response.Description);
                      
                     //   grid.refresh();
                        notification.show("Details updated successfully", "success");
                    }
                },
                error: function(xhr) {
                    var errorMessage = xhr.status === 404
                        ? "Rebuilt Part  not found"
                        : "Error refreshing details";
                    notification.show(errorMessage, "error");
                }
            });
        }
    </script>

<script>
     function onExcelExport(e) {
        console.log("onExcelExport called");

        var grid = $("#RebuiltPartsGrid").data("kendoGrid");
        var dataSource = grid.dataSource;

        //  Prevent automatic export until all data is ready
        e.preventDefault();

        dataSource.read().then(function () {
            var data = dataSource.data(); //  Now holds ALL records across all pages
            var sheet = e.workbook.sheets[0];

            //  Allowed fields for the final report
            var allowedFields = [
                "RebuiltStockNum", "MmsStockCode", "KeyWord",
                "DetailedDesc", "JobNumber", "BuyNewCost", "RemanCost"
            ];

            //  Filter out unwanted columns
            sheet.columns = sheet.columns.filter(function (column, index) {
                var field = grid.columns[index] ? grid.columns[index].field : null;
                return allowedFields.includes(field);
            });

            //  Create header row
            sheet.rows[0].cells = sheet.rows[0].cells.filter(function (cell, index) {
                var field = grid.columns[index] ? grid.columns[index].field : null;
                return allowedFields.includes(field);
            });

            //  Add calculated column headers
            sheet.columns.push({ width: 150 });
            sheet.rows[0].cells.push({
                value: "Cost Savings Per Unit",
                background: "#f3f3f3",
                color: "#000000",
                bold: true
            });

            sheet.columns.push({ width: 150 });
            sheet.rows[0].cells.push({
                value: "Percentage Savings Per Unit",
                background: "#f3f3f3",
                color: "#000000",
                bold: true
            });

            //  Ensure rows exist for ALL data rows
            while (sheet.rows.length <= data.length) {
                sheet.rows.push({ cells: [] });
            }

            //  Inject calculated values for ALL records
            data.forEach(function (item, index) {
                var row = sheet.rows[index + 1]; // Create if missing

                // Ensure other allowed fields are populated
                row.cells = row.cells.filter(function (cell, index) {
                    var field = grid.columns[index] ? grid.columns[index].field : null;
                    return allowedFields.includes(field);
                });

                var buyNewCost = item.BuyNewCost || 0;
                var remanCost = item.RemanCost || 0;

                //  Inject calculated values
                row.cells.push({
                    value: calculateCostSaving(buyNewCost, remanCost),
                    background: "#f9f9f9",
                    color: "#333"
                });

                row.cells.push({
                    value: calculatePercentageSaving(buyNewCost, remanCost),
                    background: "#f9f9f9",
                    color: "#333"
                });
            });

            // Trigger export after processing
            kendo.saveAs({
                dataURI: new kendo.ooxml.Workbook(e.workbook).toDataURL(),
                fileName: "RebuiltPart.xlsx"
            });
        });
    }

</script>
<script>
  var currentDropDown;

    function onDropDownOpen(e) {
        currentDropDown = e.sender; // Capture the currently opened dropdown instance
    }

    function getDropDownListParams() {
        var $cell = $("td.k-edit-cell"); // Find the currently edited cell
        var $dropdown = $cell.find("input[name]"); // Target the DropDownList's hidden input field (which stores the value)

        if ($dropdown.length === 0) {
            console.warn("No input field found in the edited cell.");
            return {};
        }

        var dropdownWidget = $dropdown.data("kendoDropDownList"); // Get the DropDownList widget

        if (!dropdownWidget) {
            console.warn("DropDownList widget is not initialized yet.");
            return {};
        }
        var fullColumnName = $dropdown.attr("name");
        var colName = fullColumnName.split('.').pop();
        return {
            columnName: colName, 
            searchText: dropdownWidget.text() || "" // Get selected text
        };
    }
</script>
    <script>
        // Initialize custom confirmation dialog
        var deleteDialog = $("#deleteConfirmationDialog").kendoWindow({
            width: "400px",
            title: "Confirm Delete",
            modal: true,
            visible: false,
            actions: ["Close"]
        }).data("kendoWindow");

        function showDeleteConfirmation(e) {
            e.preventDefault();
            var grid = $("#RebuiltPartsGrid").data("kendoGrid");
            var dataItem = grid.dataItem($(e.currentTarget).closest("tr"));
            deleteDialog.dataItem = dataItem;
            deleteDialog.center().open();
        }

        $(document).on("click", "#deleteConfirmationDialog .confirm-btn", function () {
            var grid = $("#busGrid").data("kendoGrid");
            var dataItem = deleteDialog.dataItem;

            $.ajax({
                url: '@Url.Action("DeleteRebuiltPart", "RebuiltParts")',
                type: 'POST',
                data: { RebuiltStockNum: dataItem.RebuiltStockNum },
                success: function () {
                    grid.dataSource.remove(dataItem);
                    notification.success("Record deleted successfully");
                    deleteDialog.close();
                },
                error: function (xhr) {
                    notification.error("Delete failed: " + xhr.responseText);
                    deleteDialog.close();
                }
            });
        });

        $(document).on("click", "#deleteConfirmationDialog .cancel-btn", function () {
            deleteDialog.close();
        });
    </script>
    <script>
        // Track unsaved changes state
        let unsavedChangesExist = false;

        function onLabourGridDataBound(e) {
            const grid = e.sender;
            const ds = grid.dataSource;
            unsavedChangesExist = false;

            // Clear previous styling
            $(".unsaved-row, .unsaved-cell, .unsaved-badge").remove();

            // Apply new styling
            ds.view().forEach(item => {
                const row = grid.tbody.find(`tr[data-uid='${item.uid}']`);
        
                if (item.dirty || item.isNew()) {
                    // Add row class
                    row.addClass("unsaved-row");
            
                    // Add badge to first cell
                    const firstCell = row.find("td:first");
                    if (!firstCell.find(".unsaved-badge").length) {
                        firstCell.append(`<span class="unsaved-badge">UNSAVED</span>`);
                    }

                    // Highlight modified cells
                    Object.keys(item.modified || {}).forEach(field => {
                        row.find(`td[data-field='${field}']`)
                           .addClass("unsaved-cell");
                    });
            
                    unsavedChangesExist = true;
                }
            });

            // Update tab indicator
            const tabStrip = $("#rebuildPartsTabStrip").data("kendoTabStrip");
            if (tabStrip?.items().length) {
                $(tabStrip.items()[0].element)
                    .find(".k-link")
                    .toggleClass("has-unsaved", unsavedChangesExist);
            }
        }

            function onLabourGridSave(e) {
                const notification = $("#notification").data("kendoNotification");
    
                // Show save confirmation
                notification.success("Changes saved successfully");
    
                // Force full refresh to clear styling
                e.sender.dataSource.read().then(() => {
                    unsavedChangesExist = false;
                });
            }
            function onGridEdit(e) {
                // Re-apply styles after edit
                const grid = e.sender;
                grid.one("dataBound", () => grid.refresh());
            }
    </script>
}

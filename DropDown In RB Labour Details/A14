 Step 1: Store the Grid Name in a Hidden Field (Inside the Shared View)
Modify your shared view where the grid is defined:

csharp
Copy
Edit
@{
    var gridName = $"ScPartsMaterialDetailsRebuiltPartsGrid_{ViewBag.PartNum}";
}

<input type="hidden" id="gridNameField" value="@gridName" />

@(Html.Kendo().Grid<BCES.Models.Parts.StockCodedPartsViewModel>()
    .Name(gridName) // Use the dynamic name
‚úî This stores the grid name in a hidden input field so JavaScript in Index.cshtml can access it.

üîç Step 2: Get the Grid Name in JavaScript (Index.cshtml)
Now, in your Index.cshtml JavaScript, read the grid name from the hidden field:

js
Copy
Edit
function refreshScPartDetails(e) {
    var gridName = $("#gridNameField").val(); // Get grid name from hidden field

    if (!gridName) {
        console.warn("Grid name not found.");
        return;
    }

    var grid = $("#" + gridName).data("kendoGrid"); // Select the grid dynamically

    if (grid) {
        grid.dataSource.read(); // Refresh grid data
    } else {
        console.warn("Grid not found: " + gridName);
    }
}

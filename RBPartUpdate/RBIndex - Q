You ASp.NET Core v8 and Telerik ASp.NET core expert.

In the following Telerik grid, using InCell Update. Whe I make the change in the cell and click on SAve, alway 
Add function gets called and not Update.
 @(Html.Kendo().Grid<RebuiltPartsViewModel>()
     .Name("RebuiltPartsGrid")
     .Columns(columns =>
     {
         columns.Bound(c => c.RebuiltStockNum).Title("Rebuilt Stock Code")
             .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)))
             .EditorTemplateName("ComboBoxEditor")
             .Width(130).Hidden(false).Lockable(false);

         columns.Bound(c => c.MmsStockCode).Title("MMS Stock Code")
             .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)))
             .EditorTemplateName("ComboBoxEditor")
             .Width(130);
..
.Editable(editable => editable.Mode(GridEditMode.InCell))
.ToolBar(toolbar => {
    toolbar.Create().Text("Add").IconClass("k-icon k-i-plus").HtmlAttributes(new { 
        title = "Add new record",
        @class = "k-primary" 
    });
    toolbar.Save().SaveText("Save").CancelText("Cancel")
        .HtmlAttributes(new { 
            title_save = "Save all changes",
            title_cancel = "Discard changes"
        });
...
    .Ajax()
    .Model(model =>
    {
        model.Id(c => c.Id);
        model.Field(c => c.RebuiltStockNum).Editable(true);
        model.Field(c => c.MmsStockCode).Editable(true);
        model.Field(c => c.Description).Editable(true);
        model.Field(u => u.BusIds).DefaultValue(new List<int>());
        model.Field(u => u.BusNames).DefaultValue(new List<string>());
        model.Field(f => f.CostSavingPerUnitDummy).Editable(false);
        model.Field(f => f.PercentageSavingPerUnitDummy).Editable(false);
    })
    .Events(events =>
    {
        events.RequestEnd("onRequestEnd"); 
        events.Error("onDataSourceError");
         
    })
    .Read(read => read.Url(Url.Action("GetRebuiltPartsView", "RebuiltParts")).Type(HttpVerbs.Get))
    .Create(create => create.Url(Url.Action("AddRebuiltPartsView", "RebuiltParts")).Type(HttpVerbs.Post))
    .Update(update => update.Url(Url.Action("UpdateRebuiltPartsView", "RebuiltParts")).Type(HttpVerbs.Post))
)
Controller :

        [HttpGet("RebuiltPartsIndex")]
        [AllowAnonymous]
        public IActionResult RebuiltPartsIndex()
        {
            // return View();
            //GetRebuiltPartsData();
            return View("~/Views/Parts/RebuiltParts/Index.cshtml");
        }
[HttpPost]
[AllowAnonymous]
//[Consumes("application/x-www-form-urlencoded")]
public async Task<IActionResult> UpdateRebuiltPartsView([DataSourceRequest] DataSourceRequest request,  [FromBody] RebuiltPartsViewModel partsViewModel)
{
    partsViewModel.LastModifiedBy = ViewBag.UserName;
    partsViewModel.EnteredBy = ViewBag.UserName;
    partsViewModel.DateEntered = DateTime.Now.ToString();
...
[HttpPost]
[AllowAnonymous]
public async Task<IActionResult> AddRebuiltPartsView([DataSourceRequest] DataSourceRequest request, RebuiltPartsViewModel rebuiltPartsViewModel)
{
    try
    {               
        var buses = _selectedBuses;
        rebuiltPartsViewModel.SelectedBuses = _selectedBuses;
...

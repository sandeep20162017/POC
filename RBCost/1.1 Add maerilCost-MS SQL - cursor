CREATE FUNCTION SBCES.GetMaterialCost (
    @ViIdNum VARCHAR(30),
    @ViType VARCHAR(30)
)
RETURNS DECIMAL(20, 2)
AS
BEGIN
    DECLARE @VFinalPrice DECIMAL(20, 2) = 0;
    DECLARE @VPrice INT = 0;
    DECLARE @VKitTotal DECIMAL(20, 2) = 0;

    -- Clear temporary materials table
    TRUNCATE TABLE SBCES.TempMaterialsList;

    -- Step 1: Insert materials data
    INSERT INTO SBCES.TempMaterialsList (
        AssemblyArea, CostCentre, TotalCost, TaxableCost, LinkNumber, TotalValue
    )
    SELECT
        ISNULL(CC.Name, 'NONE') AS AssemblyArea,
        ISNULL(A.CostCentre, '0') AS CostCentre,
        ISNULL(SUM(A.Cost), 0),
        ISNULL(SUM(A.TaxCost), 0),
        @ViIdNum,
        ISNULL(SUM(A.Cost), 0)
    FROM (
        SELECT
            CostCentre,
            (dbo.FinalCost(PercentUsage, QtyReqd, MmsCost, 0) - dbo.FinalCost(PercentUsage, QtyReqd, CoreCost, 0)) AS Cost,
            dbo.FinalCost(PercentUsage, QtyReqd, MmsCost, 0) AS TaxCost
        FROM SBCES.ScPartsUsed
        WHERE LinkCode = UPPER(@ViIdNum)
          AND RebuiltPart = 'N'
          AND LinkType = UPPER(@ViType)
        UNION ALL
        SELECT
            NSC.CostCentre,
            (dbo.FinalCost(NSC.PercentUsage, NSC.QtyReqd, NON.OemPartCost, 0) - dbo.FinalCost(NSC.PercentUsage, NSC.QtyReqd, NSC.CoreCost, 0)),
            dbo.FinalCost(NSC.PercentUsage, NSC.QtyReqd, NON.OemPartCost, 0)
        FROM SBCES.NscPartsUsed NSC
        LEFT JOIN SBCES.NonStockCodedParts NON ON NON.Id = NSC.Id
        WHERE NSC.LinkCode = UPPER(@ViIdNum)
          AND NSC.LinkType = UPPER(@ViType)
    ) A
    LEFT JOIN SBCES.CostCentres CC ON CC.CostCentre = A.CostCentre
    GROUP BY A.CostCentre, CC.Name;

    -- Step 2: Count rebuilt parts
    SELECT @VPrice = COUNT(*)
    FROM SBCES.ScPartsUsed
    WHERE RebuiltPart = 'Y'
      AND LinkType = UPPER(@ViType)
      AND UPPER(LinkCode) = UPPER(@ViIdNum);

    -- Step 3: Propagate prices to other rebuilt parts if needed
    IF @VPrice > 0
    BEGIN
        DECLARE cur_RB CURSOR FOR
        SELECT DISTINCT 
            UPPER(SPU.LinkCode),
            SPU.QtyReqd,
            TRY_CAST(REPLACE(ISNULL(SPU.PercentUsage, '0'), ',', '.') AS DECIMAL(10, 4)),
            SPU.MmsRebuiltCode
        FROM SBCES.ScPartsUsed SPU
        WHERE SPU.RebuiltPart = 'Y'
          AND SPU.LinkType = UPPER(@ViType)
          AND UPPER(SPU.LinkCode) = UPPER(@ViIdNum);

        DECLARE @Qty DECIMAL(10, 2), @PercentUsage DECIMAL(10, 4), @RebuiltCode VARCHAR(50), @LinkCode VARCHAR(30);

        OPEN cur_RB;
        FETCH NEXT FROM cur_RB INTO @LinkCode, @Qty, @PercentUsage, @RebuiltCode;

        WHILE @@FETCH_STATUS = 0
        BEGIN
            EXEC SBCES.WriteMaterials @RebuiltCode, @Qty * @PercentUsage, @RebuiltCode, 1;
            FETCH NEXT FROM cur_RB INTO @LinkCode, @Qty, @PercentUsage, @RebuiltCode;
        END

        CLOSE cur_RB;
        DEALLOCATE cur_RB;
    END

    -- Step 4: Handle kits for BUS type
    SELECT @VKitTotal = COUNT(*)
    FROM SBCES.OemKitsTotal2
    WHERE Link = @ViIdNum;

    IF UPPER(@ViType) = 'BUS' AND @VKitTotal > 0
    BEGIN
        SELECT @VKitTotal = TotalKitCost
        FROM SBCES.OemKitsTotal2
        WHERE Link = @ViIdNum;

        INSERT INTO SBCES.TempMaterialsList (
            AssemblyArea, CostCentre, TotalCost, TaxableCost, LinkNumber, TotalValue
        )
        VALUES ('KITS', '05H7', @VKitTotal, @VKitTotal, @ViIdNum, @VKitTotal);
    END

    -- Step 5: Return final total
    SELECT @VFinalPrice = ROUND(SUM(ISNULL(TotalCost, 0)), 2)
    FROM SBCES.TempMaterialsList;

    RETURN @VFinalPrice;
END
GO

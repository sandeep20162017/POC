[HttpPost]
public async Task<IActionResult> ArchiveVehicleDetails([FromBody] VehicleViewModel vehicleViewModel)
{
    try
    {
        var parameters = new DynamicParameters();
        parameters.Add("@VehSeriesCode", vehicleViewModel.VehSeriesCode);
        parameters.Add("@Username", ViewBag.UserName?.ToString().ToUpper() ?? "SYSTEM");
        parameters.Add("@LinkNumber", vehicleViewModel.VehicleListId);
        parameters.Add("@TypeId", vehicleViewModel.TypeId ?? "BUS"); // Default fallback
        parameters.Add("@LabourCost", vehicleViewModel.LabourCost);
        parameters.Add("@LabourOverheadAmount", vehicleViewModel.LabourOverheadAmount);
        parameters.Add("@LabourTotal", vehicleViewModel.LabourTotal);
        parameters.Add("@MaterialsTotal", vehicleViewModel.MaterialsTotal);
        parameters.Add("@TotalBusEstimateCost", vehicleViewModel.TotalBusEstimateCost);
        parameters.Add("@TaxTotal", vehicleViewModel.TaxTotal);
        parameters.Add("@TotalCostTax", vehicleViewModel.TotalCostTax);
        parameters.Add("@OemKitsTotal", vehicleViewModel.OemKitsTotal);
        parameters.Add("@RetVal", dbType: DbType.Int32, direction: ParameterDirection.Output);

        await _dbConnection.ExecuteAsync(
            "[SBCES].[ArchiveVehicle]",
            parameters,
            commandType: CommandType.StoredProcedure
        );

        var retVal = parameters.Get<int>("@RetVal");

        return Json(new
        {
            success = retVal == 0,
            message = retVal == 0
                ? $"Archived Vehicle List Id: {vehicleViewModel.VehicleListId}"
                : $"Archive procedure returned code {retVal}",
            code = retVal
        });
    }
    catch (Exception ex)
    {
        return Json(new
        {
            success = false,
            message = $"Archive failed: {ex.Message}"
        });
    }
}

You are Oracle SQL and MS SQL expert. Convert following Oracle SQL to MS SQL. Oracle and MS SQL schema match.
Only difference is Oracle uses snake_naming convention for Function, stored proc, columns and table names while MS SQL uses
CamelCases for  Function, stored proc, columns and table names.
Use schema name as SBCES in MS SQL. Add print and debug statments in MS SQL. Use transaction. Keep the same names (CamelCase) in MS SQL.
Print output paramters. Also show me how to test.
Oracle functions :
FUNCTION ARCHIVE_VEHICLE
    (vi_veh_series_code IN ARCH_VEHICLE_LIST.veh_series_code%TYPE,
     vi_username IN ARCH_VEHICLE_LIST.archived_by%TYPE,
     vi_link_number IN EMPLOYEE_LABOUR.link_number%TYPE,
     vi_typeid IN EMPLOYEE_LABOUR.typeid%TYPE,
     vi_labour_cost IN ARCH_VEHICLE_LIST.labour_cost%TYPE,
     vi_labour_overhead_amount IN ARCH_VEHICLE_LIST.labour_overhead_amount%TYPE,
     vi_labour_total IN ARCH_VEHICLE_LIST.labour_total%TYPE,
     vi_materials_total IN ARCH_VEHICLE_LIST.materials_total%TYPE,
     vi_total_bus_estimate_cost IN ARCH_VEHICLE_LIST.total_bus_estimate_cost%TYPE,
     vi_tax_total IN ARCH_VEHICLE_LIST.total_tax%TYPE,
     vi_total_cost_tax IN ARCH_VEHICLE_LIST.total_cost_tax%TYPE,
     vi_oem_kits_total IN ARCH_VEHICLE_LIST.oem_kits_total%TYPE,
     vo_ret_val OUT NUMBER) RETURN NUMBER IS

arch_id NUMBER;
 V_PRICE NUMBER;
 emesg VARCHAR2(250);

BEGIN
    -- 1. Insert new record into the ARCH_RB_MASTERLIST table
    INSERT INTO ARCH_VEHICLE_LIST
        (veh_series_code,
         proj_desc,
         make,
         model,
         year,
         engine,
         transmission,
         differential,
         date_archived,
         archived_by,
         arch_vehicle_list_id,
         labour_cost,
         labour_overhead_amount,
         labour_total,
         materials_total,
         total_bus_estimate_cost,
         total_tax,
         total_cost_tax,
         oem_kits_total,
         sopnumber,
         OLD_ID,
         num_of_vehicles
        )
    SELECT
        veh_series_code,
        proj_desc,
        make,
        model,
        year,
        engine,
        transmission,
        differential,
        SYSDATE,
        vi_username,
        ARCH_VEHICLE_LIST_SEQ.NEXTVAL,
        vi_labour_cost,
        vi_labour_overhead_amount,
        vi_labour_total,
        vi_materials_total,
        vi_total_bus_estimate_cost,
        vi_tax_total,
        vi_total_cost_tax,
        vi_oem_kits_total,
        sopnumber,
        vehicle_list_id,
        num_of_vehicles
    FROM
        VEHICLE_LIST
    WHERE
        vehicle_list_id = VI_LINK_NUMBER;

-- 2. Insert record(s) into the ARCH_RB_EMPLOYEE_LABOUR table
    INSERT INTO ARCH_VEH_EMPLOYEE_LABOUR
        (
         labour_defn,
         date_entered,
         link_number,
         typeid,
         costcentre,
         ARCH_VEH_EMPLOYEE_LABOUR.task,
         labour_type,
         usage,
         hrs_reqd,
         adj_hrs,
         time_addition,
         arch_vehicle_list_id
        )
    SELECT
        labour_defn,
        date_entered,
        link_number,
        typeid,
        costcentre,
        EMPLOYEE_LABOUR.task,
        labour_type,
        usage,
        hrs_reqd,
        adj_hrs,
        time_addition,
        ARCH_VEHICLE_LIST_SEQ.CURRVAL
    FROM
        EMPLOYEE_LABOUR
    WHERE
        link_number = vi_link_number AND
        typeid = vi_typeid;

    -- 3. Insert record(s) into the ARCH_VEH_SC_PARTS_USED table
V_PRICE := get_material_cost(vi_link_number,vi_typeid);

    INSERT INTO ARCH_VEH_SC_PARTS_USED
        (
         mms_stock_code,
         date_entered,
         reb_part_cost,
         user_entered,
         mms_cost,
         oem_cost,
         mms_rebuilt_code,
         cost_centre,
         qty_reqd,
         percent_usage,
         link_code,
         rebuilt_part,
         link_type,
         corecost,
         arch_vehicle_list_id,
         total_cost,
         SC_KEYWORD,
         SC_DESCRIPTION)

        SELECT
            upper(SC_PARTS_USED.mms_stock_code),
            SC_PARTS_USED.date_entered,
            nvl(A.RB_UNIT_COST,0) AS "UNIT COST",
            upper(SC_PARTS_USED.user_entered),
            nvl(SC_PARTS_USED.mms_cost,0),
            nvl(SC_PARTS_USED.oem_cost,0),
            UPPER(SC_PARTS_USED.mms_rebuilt_code) AS "REBUILT NUMBER",
            UPPER(SC_PARTS_USED.cost_centre) AS "CC",
            UPPER(SC_PARTS_USED.qty_reqd) AS "QTY",
            REPLACE(SC_PARTS_USED.percent_usage,',','.') AS "%",
            vi_link_number,
            'Y',
            'RB',
            SC_PARTS_USED.corecost AS "CORE COST",
            ARCH_VEHICLE_LIST_SEQ.CURRVAL,
            nvl(A.RB_COST,0) AS "TOTAL COST",
            UPPER(RB_MASTERLIST.keyword) AS "KEYWORD",
            UPPER(RB_MASTERLIST.detailed_desc) AS "DESCRIPTION"
        FROM
            SC_PARTS_USED,
            RB_MASTERLIST,
            (SELECT
            round(sum(total_cost),2) as RB_COST, round(sum(total_unit_cost),2) as RB_UNIT_COST , rb_reference
        FROM
            TEMP_materials_list
        group by
            rb_reference) A
        WHERE
            SC_PARTS_USED.link_code = vi_link_number AND
            SC_PARTS_USED.rebuilt_part = 'Y' AND
            SC_PARTS_USED.link_type = vi_typeid AND
            RB_MASTERLIST.rebuilt_stock_num(+)= SC_PARTS_USED.mms_rebuilt_code AND
            rb_reference (+)= SC_PARTS_USED.mms_rebuilt_code;

   -- 3b. Insert record(s) into the ARCH_VEH_SC_PARTS_USED table
    INSERT INTO ARCH_VEH_SC_PARTS_USED
        (
         mms_stock_code,
         date_entered,
         reb_part_cost,
         user_entered,
         mms_cost,
         oem_cost,
         mms_rebuilt_code,
         cost_centre,
         qty_reqd,
         percent_usage,
         link_code,
         rebuilt_part,
         link_type,
         corecost,
         arch_vehicle_list_id,
         total_cost,
         SC_KEYWORD,
         SC_DESCRIPTION)
    SELECT
        A.mms_stock_code,
        A.date_entered,
        A.reb_part_cost,
        A.user_entered,
        A.mms_cost,
        A.oem_cost,
        A.mms_rebuilt_code,
        A.cost_centre,
        A.qty_reqd,
        A.percent_usage,
        A.link_code,
        A.rebuilt_part,
        A.link_type,
        cast(FINAL_COST(a.percent_usage, a.qty_reqd, a.corecost, 0)as number) as CORECOST,
        ARCH_VEHICLE_LIST_SEQ.CURRVAL,
        A.mms_cost * cast(A.qty_reqd as number) * (to_number(replace(nvl(A.percent_usage,'0'),',','.'))/ 100),
        NVL(B.part_type,'') ,
        NVL(B.detailed_desc,'')
    FROM
        SC_PARTS_USED A, STOCK_CODED_PARTS B
    WHERE
        B.mms_stock_code (+)= A.mms_stock_code AND
        link_code = vi_link_number AND
        link_type = vi_typeid and
        rebuilt_part = 'N';

    -- 4. Insert record(s) into the ARCH_VEH_NSC_PARTS_USED table
    INSERT INTO ARCH_VEH_NSC_PARTS_USED
        (orig_supp_num,
         orig_supplier_name,
         cost_centre,
         qty_reqd,
         percent_usage,
         date_entered,
         entered_by,
         link_code,
         cost,
         link_type,
         corecost,
         arch_vehicle_list_id,
         total_cost)
    SELECT
        orig_supp_num,
        orig_supplier_name,
        cost_centre,
        qty_reqd,
        percent_usage,
        date_entered,
        entered_by,
        link_code,
        cost,
        link_type,
        cast(FINAL_COST(percent_usage, qty_reqd, corecost, 0)as number) as CORECOST,
        ARCH_VEHICLE_LIST_SEQ.CURRVAL,
        cost * cast(qty_reqd as number) * (to_number(replace(nvl(percent_usage,'0'),',','.'))/ 100)
    FROM
         NSC_PARTS_USED
    WHERE
        link_code = vi_link_number AND
        link_type = vi_typeid;



    SELECT
        max(arch_vehicle_list_id)
    INTO
        arch_id
    FROM ARCH_VEHICLE_LIST;

    -- 5. Insert record(s) into the ARCH_RB_LABOUR_CC_TOTAL table
      V_PRICE := get_labour_cost(vi_link_number,vi_typeid);

    -- 5. Insert record(s) into the ARCH_RB_LABOUR_CC_TOTAL table
    INSERT INTO ARCH_VEH_LABOUR_CC_TOTAL
        (

         cost_centre,
         total_hours,
         ARCH_VEHICLE_LIST_ID
        )
       SELECT
            CC AS "COST CENTRE",
            SUM(extended_time) AS "LABOUR HRS",
            arch_id
        FROM
            TEMP_LABOUR_LIST
        GROUP BY
            CC;
/*
-- 6. Insert record(s) into the ARCH_RB_MATERIALS_CC_TOTAL table
    INSERT INTO ARCH_VEH_MATERIALS_CC_TOTAL
        (
         cost_centre,
         total_cost,
         arch_vehicle_list_id
        )


    SELECT
        a.cost_centre AS cost_centre,
        sum(a.cost) AS total_cost,
        arch_id
    FROM
        (SELECT
            cost_centre,
            FINAL_COST(percent_usage, qty_reqd, mms_cost, corecost) AS cost
         FROM
            SC_PARTS_USED
         WHERE
            link_code = vi_link_number AND
            rebuilt_part = 'N' AND
            link_type =vi_typeid
            UNION ALL
                SELECT
                    cost_centre,
                    FINAL_COST(percent_usage, qty_reqd, reb_part_cost, corecost) as cost
                FROM
                    SC_PARTS_USED
                WHERE
                    link_code = vi_link_number AND
                    rebuilt_part = 'Y' AND
                    link_type =vi_typeid
                    UNION ALL
                        SELECT
                            cost_centre,
                            FINAL_COST(percent_usage, qty_reqd, cost, corecost) as cost
                        FROM
                            NSC_PARTS_USED
                        WHERE
                            link_code = vi_link_number AND
                            link_type =vi_typeid) a
        GROUP BY
            A.cost_centre; */
/*Archive the kits attached to the vehicle estimate along with their prices */
     INSERT INTO ARCH_VEH_KITS
        (
         part_number,
         estimated_cost,
         arch_vehicle_list_id
        )
    SELECT
        KITS_USED.part_number,
        KITS_MASTERLIST.estimated_cost,
        ARCH_VEHICLE_LIST_SEQ.CURRVAL
    FROM
        KITS_USED,
        KITS_MASTERLIST
    WHERE
        KITS_USED.part_number = KITS_MASTERLIST.part_number and
        KITS_USED.link_code = vi_link_number;

V_PRICE := get_material_cost(vi_link_number,vi_typeid);

INSERT INTO ARCH_VEH_MATERIALS_CC_TOTAL
        (COST_CENTRE,
        TOTAL_COST,
        ARCH_VEHICLE_LIST_ID

        )
        SELECT
            COST_CENTRE AS "CC",
            SUM(TOTAL_COST) AS "TOTAL COST",
            arch_id
        FROM
            TEMP_MATERIALS_LIST
        GROUP BY
            COST_CENTRE;
 --ARCHIVE RB PARTS IN VEHICLE


    vo_ret_val := 0;
    RETURN 0;

    EXCEPTION
        WHEN no_data_found THEN
            ROLLBACK;
            emesg := SQLERRM;
            dbms_output.put_line(emesg);
		    vo_ret_val := -1;
		    RETURN -1;
        WHEN others THEN
            ROLLBACK;
            emesg := SQLERRM;
            dbms_output.put_line(emesg);

            vo_ret_val := -2;
            RETURN -1;
END ARCHIVE_VEHICLE;
Functio 2 :
create or replace FUNCTION get_material_cost
(vi_IDnum in varchar2, vi_type in varchar2)
RETURN number IS

V_LINK_CODE VARCHAR2(30);
V_PRICE number (20,10);
V_FINAL_PRICE number (20,10);
V_RET_VAL VARCHAR2(25);
V_KIT_TOTAL NUMBER(20,10);
CURSOR C_RB_LIST_To_Prop (vi_IDnum IN varchar)
IS
SELECT DISTINCT UPPER(SC_PARTS_USED.link_code) AS "link_code",
                SC_PARTS_USED.qty_reqd AS "QTY",
                SC_PARTS_USED.percent_usage AS "%",
                SC_PARTS_USED.mms_rebuilt_code AS "Rebuilt Code"
        FROM
            SC_PARTS_USED
        WHERE
            SC_PARTS_USED.rebuilt_part = 'Y' AND
            SC_PARTS_USED.link_type = UPPER(vi_type) AND
            upper(SC_PARTS_USED.link_code) = upper(vi_IDnum);

cur_RBRec C_RB_LIST_To_Prop%ROWTYPE;


CURSOR cur_Material (vi_IDnum IN varchar)
IS

       SELECT
            nvl(C.name,'NONE') AS "ASSEMBLY AREA",
            nvl(A.cost_centre, '0') AS "CC",
            nvl(SUM(A.cost), '0') AS "TOTAL COST",
            nvl(SUM(A.taxcost), '0')AS "TAXABLE COST"
        FROM
            (SELECT
                cost_centre,
                (FINAL_COST(percent_usage, qty_reqd, mms_cost, 0) - FINAL_COST(percent_usage, qty_reqd, corecost, 0)) AS cost,
                FINAL_COST(percent_usage, qty_reqd, mms_cost, 0) AS taxcost
             FROM
                SC_PARTS_USED
             WHERE
                link_code = upper(vi_idnum) AND
                rebuilt_part = 'N' AND
                link_type =upper(vi_type)
             UNION ALL
                    SELECT
                        NSC_PARTS_USED.cost_centre,
                        (FINAL_COST(NSC_PARTS_USED.percent_usage, NSC_PARTS_USED.qty_reqd, NON_STOCK_CODED_PARTS.oem_part_cost, 0) - FINAL_COST(NSC_PARTS_USED.percent_usage, NSC_PARTS_USED.qty_reqd, NSC_PARTS_USED.corecost, 0)) as cost,
                        FINAL_COST(NSC_PARTS_USED.percent_usage, NSC_PARTS_USED.qty_reqd, NON_STOCK_CODED_PARTS.oem_part_cost, 0) AS taxcost
                    FROM
                        NSC_PARTS_USED NSC_PARTS_USED, NON_STOCK_CODED_PARTS NON_STOCK_CODED_PARTS
                    WHERE
                        NSC_PARTS_USED.link_code = upper(vi_IDnum) AND
                        NSC_PARTS_USED.link_type = UPPER(vi_type) AND
                        NON_STOCK_CODED_PARTS.ID (+)= NSC_PARTS_USED.ID) A,
            cost_centres C
        WHERE
            C.cost_centre = A.cost_centre
        GROUP BY
            A.cost_centre,
            C.name;

cur_MaterialRec cur_Material%ROWTYPE;

BEGIN

EXECUTE IMMEDIATE 'TRUNCATE TABLE TEMP_MATERIALS_LIST';
commit;
open cur_Material(upper(vi_idnum));
LOOP
    FETCH cur_Material
    INTO cur_MaterialRec;
    EXIT WHEN cur_Material%NOTFOUND;
    insert into TEMP_MATERIALS_LIST values  (cur_MaterialRec."ASSEMBLY AREA",cur_MaterialRec."CC" ,cur_MaterialRec."TOTAL COST",cur_MaterialRec."TAXABLE COST",vi_IDnum,cur_MaterialRec."TOTAL COST");

END LOOP;
CLOSE cur_Material;

--checks to see how many rebuilt parts are attached to the rebuilt part number
-- inputted(rb_num) into this procedure
SELECT count(*) INTO V_PRICE FROM SC_PARTS_USED WHERE
            SC_PARTS_USED.rebuilt_part = 'Y' AND
            SC_PARTS_USED.link_type = UPPER(vi_type) AND
            upper(SC_PARTS_USED.link_code) = upper(vi_idnum);


--if this current rebuilt part (rb_num) in this procedure resides
--in any other rebuilt parts update the prices of those rebuilt parts as well.
if V_PRICE > 0 then

open C_RB_LIST_To_Prop(upper(vi_idnum));
LOOP

    FETCH C_RB_LIST_To_Prop
    INTO cur_RBRec;
    EXIT WHEN C_RB_LIST_To_Prop%NOTFOUND;

    WRITE_MATERIALS (cur_RBRec."Rebuilt Code",cur_RBRec."QTY" * to_number(replace(NVL(cur_RBRec."%",'0'),',','.'))/100 , cur_RBRec."Rebuilt Code", 1 );

END LOOP;
CLOSE C_RB_LIST_To_Prop;

end if;

SELECT count(*) INTO V_KIT_TOTAL FROM OEM_KITS_TOTAL2 WHERE OEM_KITS_TOTAL2.LINK = VI_IDNUM;

if upper(vi_type) = 'BUS' and V_KIT_TOTAL > 0 then
    SELECT TOTAL_KIT_COST INTO V_KIT_TOTAL FROM OEM_KITS_TOTAL2 WHERE OEM_KITS_TOTAL2.LINK = VI_IDNUM;
    insert into TEMP_MATERIALS_LIST values ('KITS','05H7',V_KIT_TOTAL,V_KIT_TOTAL,VI_IDNUM,V_KIT_TOTAL);
end if;

SELECT round(sum(NVL(total_cost,0)),2) as RB_COST INTO V_FINAL_PRICE
        FROM
            TEMP_MATERIALS_LIST;

RETURN V_FINAL_PRICE;

--EXCEPTION
  --WHEN OTHERS THEN
    --raise_application_error('-20001', sqlerrm);
    --dbms_output.put_line(substr(TO_CHAR(SQLCODE) || ': '||SQLERRM,1,255));
END GET_MATERIAL_COST;
 Function 3:
create or replace FUNCTION get_labour_cost
(vi_IDnum in varchar2, vi_type in varchar2)
RETURN number IS

V_LINK_CODE VARCHAR2(30);
V_PRICE number (20,10);
V_FINAL_PRICE number (20,10);
V_RET_VAL VARCHAR2(25);

CURSOR C_RB_LIST_To_Prop (vi_IDnum IN varchar)
IS
SELECT DISTINCT UPPER(SC_PARTS_USED.link_code) AS "link_code",
                SC_PARTS_USED.qty_reqd AS "QTY",
                SC_PARTS_USED.percent_usage AS "%",
                SC_PARTS_USED.mms_rebuilt_code AS "Rebuilt Code"
        FROM
            SC_PARTS_USED
        WHERE
            SC_PARTS_USED.rebuilt_part = 'Y' AND
            SC_PARTS_USED.link_type = vi_type AND
            upper(SC_PARTS_USED.link_code) = upper(vi_IDnum);

cur_RBRec C_RB_LIST_To_Prop%ROWTYPE;

    CURSOR cur_Labour (vi_IDnum IN varchar)IS
        SELECT
            EMPLOYEE_LABOUR.labour_defn AS "LABOUR TYPE",
            EMPLOYEE_LABOUR.costcentre AS "CC",
            EMPLOYEE_LABOUR.task AS "TASK",
            REPLACE(EMPLOYEE_LABOUR.usage,',','.') AS "USAGE",
            EMPLOYEE_LABOUR.hrs_reqd AS "TIME",
            EMPLOYEE_SALARIES.rate_per_hour AS "RATE PER HOUR",
            EMPLOYEE_LABOUR.time_addition AS "TIME ADDITION",
            HHMM_TO_DECIMAL(EMPLOYEE_LABOUR.adj_hrs) AS "WRENCH TIME"
        FROM
            EMPLOYEE_LABOUR,
            EMPLOYEE_SALARIES,
            EMPL_CLASS
        WHERE
            EMPLOYEE_LABOUR.labour_defn = UPPER(EMPL_CLASS.labour_defn) AND
            EMPLOYEE_SALARIES.wage_group = EMPL_CLASS.wage_group AND
            EMPLOYEE_LABOUR.link_number = vi_idnum AND
            EMPLOYEE_LABOUR.typeid = vi_type;



cur_LabourRec cur_Labour%ROWTYPE;

BEGIN
EXECUTE IMMEDIATE 'TRUNCATE TABLE TEMP_LABOUR_LIST';
open cur_Labour(upper(vi_idnum));
LOOP

    FETCH cur_Labour
    INTO cur_LabourRec;
    EXIT WHEN cur_Labour%NOTFOUND;

    insert into TEMP_LABOUR_LIST values (cur_LabourRec."LABOUR TYPE",cur_LabourRec."CC" ,cur_LabourRec."TASK" ,cur_LabourRec."USAGE" ,HHMM_TO_MINUTES(cur_LabourRec."TIME ADDITION"),cur_LabourRec."RATE PER HOUR", cur_LabourRec."RATE PER HOUR" * HHMM_TO_MINUTES(cur_LabourRec."TIME ADDITION") * cur_LabourRec."USAGE" / 6000, round((cur_LabourRec."USAGE" / 100) * HHMM_TO_MINUTES(cur_LabourRec."TIME ADDITION")) ,'RB',upper(vi_idnum), round((cur_LabourRec."USAGE" / 100) * HHMM_TO_MINUTES(cur_LabourRec."WRENCH TIME")));

END LOOP;
CLOSE cur_Labour;

--checks to see how many rebuilt parts are attached to the rebuilt part number
-- inputted(rb_num) into this procedure
SELECT count(*) INTO V_PRICE FROM SC_PARTS_USED WHERE
            SC_PARTS_USED.rebuilt_part = 'Y' AND
            SC_PARTS_USED.link_type = UPPER(vi_type) AND
            upper(SC_PARTS_USED.link_code) = upper(vi_idnum);


--if this current rebuilt part (rb_num) in this procedure resides
--in any other rebuilt parts update the prices of those rebuilt parts as well.
if V_PRICE > 0 then

open C_RB_LIST_To_Prop(upper(vi_idnum));
LOOP

    FETCH C_RB_LIST_To_Prop
    INTO cur_RBRec;
    EXIT WHEN C_RB_LIST_To_Prop%NOTFOUND;
    WRITE_LABOUR (cur_RBRec."Rebuilt Code",cur_RBRec."QTY" * to_number(replace(NVL(cur_RBRec."%",'0'),',','.'))/100);

END LOOP;
CLOSE C_RB_LIST_To_Prop;

end if;


SELECT round(sum(total_cost),2) as LABOUR_COST INTO V_FINAL_PRICE
        FROM
            TEMP_LABOUR_LIST;

RETURN V_FINAL_PRICE;


EXCEPTION
   WHEN OTHERS THEN
    raise_application_error('-20001', sqlerrm);
    dbms_output.put_line(substr(TO_CHAR(SQLCODE) || ': '||SQLERRM,1,255));
END GET_LABOUR_COST;

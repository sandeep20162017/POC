You are asp.net core expert. Application uses c# and Telerik Control MVC UI. Application doesn't use MVC and does not have any controllers. Application doesn't use services. Application doesn't use EF. Application uses Razor page
All the logic is in cshtml.cs file. Application use Telerik Kendo UI controls on views. Application uses Razor model. Eaach database table will have example table model as below. Example cshtml.cs logic is also below. These examples are for your reference only.
Any SQL is not directly coded, we mut have stored procedure. Keeping in mind all this information, complete your task below.
Example model :
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
namespace BCES.Models
{
    [Table("UserRoles", Schema = "BCES")]
    public class UserRole
    {
        [Key]
        [Column(Order = 1)]
        public int UserId { get; set; }

        [Key]
        [Column(Order = 2)]
        public int RoleId { get; set; }

        // Navigation properties
        [ForeignKey("UserId")]
        public User User { get; set; }

        [ForeignKey("RoleId")]
        public Role Role { get; set; }

        // Other user-role-related fields
    }
}
Example cshtml.cs logic :
 public async Task<IActionResult> OnGetAsync()
        {
            try
            {
                // Get the username from the machine the user is logged into
                string username = Environment.UserName;

                // Get the user's role
                UserRole = await GetUserRoleAsync(username);

                // Retrieve vehicles based on the user's role
                Vehicles = await _dbContext.Set<Vehicle>()
                    .FromSqlInterpolated($"SELECT * FROM BCES.Vehicles")
                    .ToListAsync();

                return Page();
            }
            catch (Exception ex)
            {
                // Log the exception
                return RedirectToPage("/Error");
            }
        }

        private async Task<string> GetUserRoleAsync(string username)
        {
            try
            {
                var userRole = await _dbContext.Set<UserRole>()
                    .FromSqlInterpolated($"SELECT * FROM BCES.UserRoles WHERE UserId = (SELECT UserId FROM BCES.Users WHERE Username = {username})")
                    .Join(_dbContext.Set<Role>(), ur => ur.RoleId, r => r.RoleId, (ur, r) => r.RoleName)
                    .FirstOrDefaultAsync();

                return userRole;
            }
            catch (Exception ex)
            {
                // Log the exception
                throw new Exception("Error retrieving user role", ex);
            }
        }
Your task :
Model an tables are already been crated for User, UserRoles, Roles. I need to create razor view which will use Telerik UI MVC grid. On this page admin user can add/update/delete/edit user. Kendoo Grid should have columns  User name and RoleType, add and delete butoon. Grid must use the models (binding). Create SQL stored procs (use BCES as schema name) and generate Razor cshtml and RAzor cshtml.cs file.
Models you need to use :
User :
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace BCES.Models
{
    [Table("Users", Schema = "BCES")]
    public class User
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int UserId { get; set; }

        [Required]
        [MaxLength(100)]
        public string UserName { get; set; }

        // Navigation property for UserRoles
        public ICollection<UserRole> UserRoles { get; set; }

        // Other user-related fields
    }
}

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
Roles Model :
namespace BCES.Models
{
    [Table("Roles", Schema = "BCES")]
    public class Role
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int RoleId { get; set; }

        [Required]
        [MaxLength(50)]
        public string RoleName { get; set; }

        // Navigation property for UserRoles
        public ICollection<UserRole> UserRoles { get; set; }

        // Other role-related fields
    }
}
UserRoles Model :
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace BCES.Models
{
    [Table("UserRoles", Schema = "BCES")]
    public class UserRole
    {
        [Key]
        [Column(Order = 1)]
        public int UserId { get; set; }

        [Key]
        [Column(Order = 2)]
        public int RoleId { get; set; }

        // Navigation properties
        [ForeignKey("UserId")]
        public User User { get; set; }

        [ForeignKey("RoleId")]
        public Role Role { get; set; }

        // Other user-role-related fields
    }
}

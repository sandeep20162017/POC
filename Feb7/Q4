You are ASP.NET core (v 8.0) and Telerik ASp.NET core expert
When user clicks on 'Create a new record' and then selects multiple bus values (multiselect), in column Vehicle Series, and then clicks on save (update)
In RebuiltPartsController.cs, function  AddRebuiltPartsView is called. In this function  rebuiltPartsViewModel - is always null. Other columns are fine.
Pls verify the logic in update as well. It has the similar issue. Check binding and names. App uses Telerik Inline Edit.
RebuiltPartsController.cs :
using Dapper;
using Microsoft.AspNetCore.Mvc;
using Dapper;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Threading.Tasks;
using Telerik.DataSource;
using Telerik.DataSource.Extensions;
using BCES.Models.Admin;
using Kendo.Mvc.UI;
using Kendo.Mvc.Extensions;
using DataSourceRequest = Kendo.Mvc.UI.DataSourceRequest;
using BCES.Data;
using Telerik.SvgIcons;
using Microsoft.AspNetCore.Http;
using Microsoft.EntityFrameworkCore.Metadata.Conventions;
using BCES.Controllers.Base;
using BCES.Models.Parts;
using BCES.Models.Common;
using BCES.Models.Parts;
using System.Data;
using OfficeOpenXml;
using System.IO;
using MailKit.Net.Smtp;
using MimeKit;
using MailKit.Security;



using Newtonsoft.Json.Linq;
using static System.Net.Mime.MediaTypeNames;
using Azure.Core;
using BCES.Controllers.Admin;
using System.Net.Mail;
using Multipart = MimeKit.Multipart;
using SmtpClient = MailKit.Net.Smtp.SmtpClient;
using System.Data.SqlClient;
using Microsoft.AspNetCore.Authorization;
using System.Text.Encodings.Web;

//using System.Net.Mime;
//using CES.Views.Shared;
namespace BCES.Controllers.Parts
{
    // [Route("api/[controller]")]
    public class RebuiltPartsController : BaseController
    {
        private readonly DapperContext _db;
        private readonly IDbConnection _dbConnection;
        private readonly IHttpContextAccessor _httpContextAccessor;
        private readonly IServiceProvider _serviceProvider;
        private readonly BusesController _busesController;
        private readonly LabourDetailsController _labourDetailsController;


        public RebuiltPartsController(DapperContext dapper, IHttpContextAccessor httpContextAccessor,
                                      IServiceProvider serviceProvider, BusesController busesController,
                                      LabourDetailsController labourDetailsController
                                    ) : base(dapper, httpContextAccessor)
        {
            _db = dapper;
            _dbConnection = _db.CreateConnection();
            _httpContextAccessor = httpContextAccessor;
            _serviceProvider = serviceProvider;
            _busesController = busesController;
            _labourDetailsController = labourDetailsController;
        }

        [HttpGet("RebuiltPartsIndex")]
        [AllowAnonymous]
        public IActionResult RebuiltPartsIndex()
        {
            // return View();
            return View("~/Views/Parts/RebuiltParts/Index.cshtml");
        }

        [AllowAnonymous]
        public IActionResult ArchivedIndex()
        {
            // return View();
            return View("~/Views/Parts/RebuiltParts/ArchivedIndex.cshtml");
        }


        [HttpGet]
        [AllowAnonymous]
        public async Task<JsonResult> GetRebuiltPartsView([DataSourceRequest] DataSourceRequest request)
        {
            // Fetch data for the grid (you can use Dapper or any other method)
            var model = await GetRebuiltPartsData();
            return Json(model.ToDataSourceResult(request));
        }

        [HttpGet]
        [AllowAnonymous]
        public async Task<JsonResult> GetArchivedRebuiltPartsView([DataSourceRequest] DataSourceRequest request)
        {
            // Fetch data for the grid (you can use Dapper or any other method)
            var model = await GetArchivedRebuiltPartsData();
            return Json(model.ToDataSourceResult(request));
        }
        //private async Task<IEnumerable<RebuiltPartsViewModel>> GetRebuiltPartsData()
        //{
        //    try
        //    {
        //        // Step 1: Query base data for rebuilt parts
        //        var rebuiltPartsQuery = @"
        //SELECT rbm.RbMasterlistId,
        //       rbm.[RebuiltStockNum],
        //       rbm.[MmsStockCode],
        //       rbm.[Keyword],
        //       rbm.JobNumber,
        //       rbm.[CorePartNum],
        //       rbm.[DetailedDesc],
        //       rbm.[CoreCharge],
        //       rbm.[EstimatedCost],
        //       rbm.[BuyNewCost],
        //       rbm.[RemanCost],
        //       rbm.[ExternalCost]
        //FROM [SBCES].[RbMasterlist] rbm";

        //        var rebuiltParts = (await _dbConnection.QueryAsync<RebuiltPartsViewModel>(rebuiltPartsQuery)).ToList();

        //        if (!rebuiltParts.Any())
        //        {
        //            return rebuiltParts;
        //        }

        //        // Step 2: Prepare parallel tasks for fetching data
        //        var tasks = rebuiltParts.Select(async part =>
        //        {
        //            // Fetch bus details in parallel
        //            var busDetails = await _busesController.GetBusDetails(part.RebuiltStockNum);
        //            part.VehicleSeries = busDetails.Select(bus => new BusesModel
        //            {
        //                ListId = bus.ListId,
        //                Description = bus.Description
        //            }).ToList();

        //            // Fetch labour details in parallel
        //            var labourDetails = await _labourDetailsController.GetLabourDetailsData(part.RebuiltStockNum);
        //            part.LabourDetailsRebuiltParts = labourDetails.ToList();

        //            return part;
        //        });

        //        // Step 3: Await all tasks concurrently
        //        var completedParts = await Task.WhenAll(tasks);

        //        return completedParts;
        //    }
        //    catch (Exception ex)
        //    {
        //        // Handle errors gracefully
        //        return null;
        //    }
        //}

        ////Good one below  but slow
        //private async Task<IEnumerable<RebuiltPartsViewModel>> GetRebuiltPartsData()
        //{
        //    try
        //    {
        //        var rebuiltPartsQuery = @"
        //                                 SELECT rbm.RbMasterlistId,
        //                                   rbm.[RebuiltStockNum],
        //                                   rbm.[MmsStockCode],
        //                                   rbm.[Keyword],
        //                                   rbm.JobNumber,
        //                                   rbm.[CorePartNum],
        //                                   rbm.[DetailedDesc],
        //                                   rbm.[CoreCharge],
        //                                   rbm.[EstimatedCost],
        //                                   rbm.[BuyNewCost],
        //                                   rbm.[RemanCost],
        //                                   rbm.[ExternalCost],
        //                                rbl.listid,
        //                                    lb.description
        //                                  FROM [SBCES].[RbMasterlist] rbm
        //                               join SBCES.RBLISTOFBUSES rbl on rbm.RebuiltStockNum = rbl.RebuiltStockNum  
        //                               join SBCES.LISTOFBUSES lb on rbl.listid = lb.listid

        //        ";
        //        // Base query for rebuilt parts data
        //        //var rebuiltPartsQuery = @"
        //        //                            SELECT rbm.RbMasterlistId,
        //        //                                   rbm.[RebuiltStockNum],
        //        //                                   rbm.[MmsStockCode],
        //        //                                   rbm.[Keyword],
        //        //                                   rbm.JobNumber,
        //        //                                   rbm.[CorePartNum],
        //        //                                   rbm.[DetailedDesc],
        //        //                                   rbm.[CoreCharge],
        //        //                                   rbm.[EstimatedCost],
        //        //                                   rbm.[BuyNewCost],
        //        //                                   rbm.[RemanCost],
        //        //                                   rbm.[ExternalCost]
        //        //                            FROM [SBCES].[RbMasterlist] rbm";

        //        var rebuiltParts = (await _dbConnection.QueryAsync<RebuiltPartsViewModel>(rebuiltPartsQuery)).ToList();

        //        //Following logic for archieving, its slow, enable MARS (connection string) on SQL server, or use LINQ
        //        //foreach (var part in rebuiltParts)
        //        //{
        //        //    // Call the BusesController method to get bus details
        //        //    var busDetails = await _busesController.GetBusDetails(part.RebuiltStockNum);
        //        //    part.VehicleSeries = busDetails.Select(bus => new BusesModel
        //        //    {
        //        //        ListId = bus.ListId,
        //        //        Description = bus.Description
        //        //    }).ToList();

        //        //    // Call the LabourDetailsController method to get labour details
        //        //    var labourDetails = await _labourDetailsController.GetLabourDetailsData(part.RebuiltStockNum);
        //        //    part.LabourDetailsRebuiltParts = labourDetails.ToList();
        //        //}

        //        return rebuiltParts;
        //    }
        //    catch (Exception ex)
        //    {
        //        // Handle errors gracefully
        //        return null;
        //    }
        //}
        [AllowAnonymous]
        private async Task<IEnumerable<RebuiltPartsViewModel>> GetRebuiltPartsData() //multiselect groupby
        {
            try
            {
                var rebuiltPartsQuery = @"
                                         
                                          SELECT rbm.RbMasterlistId,
                                           rbm.[RebuiltStockNum],
                                           rbm.[MmsStockCode],
                                           rbm.[Keyword],
                                           rbm.JobNumber,
                                           rbm.[CorePartNum],
                                           rbm.[DetailedDesc],
                                           rbm.[CoreCharge],
                                           rbm.[EstimatedCost],
                                           rbm.[BuyNewCost],
                                           rbm.[RemanCost],
                                       --    rbm.[ExternalCost],
                                            rbm.[EstimatedCost],
                                             
                                            rbm.[RemanCost],
                                           rbl.listid,
                                            lb.description
            FROM 
                SBCES.RbMasterlist rbm
            LEFT JOIN 
                SBCES.RBLISTOFBUSES rbl ON rbm.RebuiltStockNum = rbl.RebuiltStockNum
            LEFT JOIN 
                SBCES.LISTOFBUSES lb ON rbl.listid = lb.listid";

                var rebuiltParts = await _dbConnection.QueryAsync<RebuiltPartsViewModel, BusesModel, RebuiltPartsViewModel>(
                    rebuiltPartsQuery,
                    (rebuiltPart, bus) =>
                    {
                        if (bus != null)
                        {
                            // Add the bus if it has a valid ListId
                            rebuiltPart.ListOfBus.Add(bus);

                            if (bus.ListId.HasValue)
                            {
                                rebuiltPart.ListOfBusIds.Add(bus.ListId.Value); // Only add non-null IDs
                            }
                        }
                        return rebuiltPart;
                    },
                    splitOn: "ListId"
                );

                var groupedData = rebuiltParts
                    .GroupBy(rp => rp.RebuiltStockNum)
                    .Select(group =>
                    {
                        var rebuiltPart = group.First();
                        rebuiltPart.ListOfBus = group.SelectMany(g => g.ListOfBus).Distinct().ToList();
                        rebuiltPart.ListOfBusIds = group.SelectMany(g => g.ListOfBusIds).Distinct().ToList();
                        return rebuiltPart;
                    })
                    .ToList();

                return groupedData;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error fetching rebuilt parts data: {ex.Message}");
                return Enumerable.Empty<RebuiltPartsViewModel>();
            }
        }

        //[HttpPost]
        //[AllowAnonymous]
        ////[Consumes("application/x-www-form-urlencoded")]
        //public async Task<IActionResult> UpdateRebuiltPartsView([DataSourceRequest] DataSourceRequest request,  [FromForm] RebuiltPartsViewModel model)
        //{
        //    try
        //    {
        //        //if (string.IsNullOrEmpty(RebuiltPartsViewModel.RebuiltStockNum) || model == null)
        //        //{
        //        //    return BadRequest("Invalid data.");
        //        //}

        //        // Update the RebuiltPart in the database
        //        var updatePartSql = @"
        //    //UPDATE SBCES.RbMasterlist
        //    //SET ... -- Add fields to update here
        //    //WHERE RebuiltStockNum = @RebuiltStockNum";

        //    //    await _dbConnection.ExecuteAsync(updatePartSql, new { RebuiltStockNum });

        //    //    // Update associated buses
        //    //    var deleteOldBusesSql = "DELETE FROM SBCES.RBLISTOFBUSES WHERE RebuiltStockNum = @RebuiltStockNum";
        //    //    await _dbConnection.ExecuteAsync(deleteOldBusesSql, new { RebuiltStockNum });

        //        if (model.ListOfBusIds?.Any() == true)
        //        {
        //            var insertNewBusesSql = @"
        //        INSERT INTO SBCES.RBLISTOFBUSES (RebuiltStockNum, ListId)
        //        VALUES (@RebuiltStockNum, @ListId)";

        //            //foreach (var listId in model.ListOfBusIds.Where(id => id.HasValue))
        //            //{
        //            //    await _dbConnection.ExecuteAsync(insertNewBusesSql, new { RebuiltStockNum, ListId = listId.Value });
        //            //}
        //        }

        //        return Json(new { success = true });
        //    }
        //    catch (Exception ex)
        //    {
        //        return StatusCode(500, $"Internal server error: {ex.Message}");
        //    }
        //}

        [HttpPost]
        [AllowAnonymous]
        public async Task<IActionResult> UpdateRebuiltPartsView([DataSourceRequest] DataSourceRequest request, [FromForm] RebuiltPartsViewModel model)
        {
            try
            {
                // Update the RebuiltPart
                var updatePartSql = @"
                                        UPDATE SBCES.RbMasterlist
                                        SET
                                            LastModifiedBy = UPPER(ISNULL(@LastModifiedBy, ' ')),
                                            DateEntered = GETDATE(),
                                            JobNumber = UPPER(ISNULL(@JobNumber, ' ')),
                                            CoreCharge = ISNULL(@CoreCharge, ' '),
                                            CorePartNum = ISNULL(@CorePartNum, ' '),
                                            Keyword = UPPER(ISNULL(@Keyword, ' ')),
                                            DetailedDesc = UPPER(ISNULL(@DetailedDesc, ' ')),
                                            MmsStockCode = ISNULL(@MmsStockCode, ' '),
                                            SopNumber = ISNULL(@SopNumber, ' '),
                                            BuyNewCost = ISNULL(@BuyNewCost, ''),
                                            RemanCost = ISNULL(@RemanCost, ''),
                                            ExternalCost = ISNULL(@ExternalCost, ''),
                                            Active = @IsActive
                                        WHERE RebuiltStockNum = @RebuiltStockNum";

                                            await _dbConnection.ExecuteAsync(updatePartSql, new
                                            {
                                                model.LastModifiedBy,
                                                model.JobNumber,
                                                model.CoreCharge,
                                                model.CorePartNum,
                                                model.Keyword,
                                                model.DetailedDesc,
                                                model.MmsStockCode,
                                                model.SopNumber,
                                                model.BuyNewCost,
                                                model.RemanCost,
                                                ExternalCost = "", // Add to model if needed
                                                IsActive = model.IsActive ? 1 : 0,
                                                model.RebuiltStockNum
                                            });

                // Update buses
                var deleteOldBusesSql = "DELETE FROM SBCES.RbListOfBuses WHERE RebuiltStockNum = @RebuiltStockNum";
                await _dbConnection.ExecuteAsync(deleteOldBusesSql, new { model.RebuiltStockNum });

                if (model.ListOfBusIds?.Any() == true)
                {
                    var insertNewBusesSql = @"
                INSERT INTO SBCES.RbListOfBuses (RebuiltStockNum, ListId)
                VALUES (@RebuiltStockNum, @ListId)";

                    foreach (var listId in model.ListOfBusIds.Where(id => id.HasValue))
                    {
                        await _dbConnection.ExecuteAsync(insertNewBusesSql, new
                        {
                            model.RebuiltStockNum,
                            ListId = listId.Value
                        });
                    }
                }

                return Json(new { success = true });
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }


        [HttpPost]
        [AllowAnonymous]
        public async Task<IActionResult> DeleteRebuiltPart(string RebuiltStockNum)
        {
            //TODO - Confirm with Rafael if delete is required
            try
            {
                if (string.IsNullOrEmpty(RebuiltStockNum))
                {
                    return BadRequest("Invalid data.");
                }

                var deletePartSql = "DELETE FROM SBCES.RbMasterlist WHERE RebuiltStockNum = @RebuiltStockNum";
                var deleteBusesSql = "DELETE FROM SBCES.RBLISTOFBUSES WHERE RebuiltStockNum = @RebuiltStockNum";

                await _dbConnection.ExecuteAsync(deleteBusesSql, new { RebuiltStockNum });
                await _dbConnection.ExecuteAsync(deletePartSql, new { RebuiltStockNum });

                return Json(new { success = true });
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }
    


    [HttpGet]
        [AllowAnonymous]
        public async Task<IActionResult> GetVehicleSeries() //multiselect
        {
            try
            {
                var sql = @"
            SELECT
                RBLISTOFBUSES.listid AS ListId,
                LISTOFBUSES.description AS Description
            FROM
                SBCES.RBLISTOFBUSES
            INNER JOIN
                SBCES.LISTOFBUSES ON RBLISTOFBUSES.listid = LISTOFBUSES.listid";

                var vehicleSeries = await _dbConnection.QueryAsync<BusesModel>(sql);

                // Ensure null ListId entries are removed
                var validVehicleSeries = vehicleSeries.Where(vs => vs.ListId.HasValue);

                return Json(validVehicleSeries);
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }


        [AllowAnonymous]
        private async Task<IEnumerable<RebuiltPartsViewModel>> GetArchivedRebuiltPartsData()
        {
            try
            {
                // Base query for rebuilt parts data
                var rebuiltPartsQuery = @"
                                          SELECT
                                               rbm.ArchRbMasterlistId,
                                               rbm.[RebuiltStockNum],
                                               rbm.[MmsStockCode],
                                               rbm.[Keyword],
                                               rbm.JobNumber,
                                               rbm.[CorePartNum],
                                               rbm.[DetailedDesc],
                                               rbm.[CoreCharge],
                                              -- rbm.[EstimatedCost],
                                               -- rbm.[ExternalCost],
                                              --  rbm.[RemanCost],
	                                           rbm.[MaterialsTotal],
	                                           rbm.[LabourTotal],
		                                        rbm.[MaterialsTotal],
		                                        rbm.[TotalRebuiltPartCost],
		                                        rbm.[TotalCostTax],      
	                                           rbm.[EnteredBy],
                                              rbm.[DateEntered] 
                                        FROM [SBCES].[ArchRbMasterlist] rbm
                                            ";

                var rebuiltParts = (await _dbConnection.QueryAsync<RebuiltPartsViewModel>(rebuiltPartsQuery)).ToList();

                //Following logic for archieving, its slow, enable MARS (connection string) on SQL server, or use LINQ
                //foreach (var part in rebuiltParts)
                //{
                //    // Call the BusesController method to get bus details
                //    var busDetails = await _busesController.GetBusDetails(part.RebuiltStockNum);
                //    part.VehicleSeries = busDetails.Select(bus => new BusesModel
                //    {
                //        ListId = bus.ListId,
                //        Description = bus.Description
                //    }).ToList();

                //    // Call the LabourDetailsController method to get labour details
                //    var labourDetails = await _labourDetailsController.GetLabourDetailsData(part.RebuiltStockNum);
                //    part.LabourDetailsRebuiltParts = labourDetails.ToList();
                //}

                return rebuiltParts;
            }
            catch (Exception ex)
            {
                // Handle errors gracefully
                return null;
            }
        }

        //private async Task<IEnumerable<RebuiltPartsViewModel>> GetRebuiltPartsData()
        //{
        //    try
        //    {
        //        var query = @"
        //                    SELECT rbm.RbMasterlistId,
        //                    rbm.[RebuiltStockNum],
        //                    rbm.[MmsStockCode],
        //                    rbm.[Keyword],
        //                    rbm.JobNumber,
        //                    rbm.[CorePartNum],
        //                    rbm.[DetailedDesc],
        //                    rbm.[CoreCharge],
        //                    rbm.[EstimatedCost],
        //                    rbm.[BuyNewCost],
        //                    rbm.[RemanCost],
        //                    rbm.[ExternalCost],
        //                    lb.ListId,
        //                    lb.Description AS Description,
        //                    EL.LINKNUMBER,
        //              EL.LabourDefn AS [LabourType],
        //                     EL.LabourDefn AS [LabourType],
        //                    EL.CostCentre AS [CC],
        //                    EL.Task AS [Task],
        //                    REPLACE(EL.Usage, ',', '.') AS [Usage],
        //                    EL.HrsReqd AS [Time],
        //                    ES.RatePerHour AS [RATE PER HOUR],
        //                    EL.TimeAddition AS [TIME ADDITION]

        //                        FROM [SBCES].[RbMasterlist] rbm
        //                        INNER JOIN [SBCES].[RbListOfBuses] rlb ON rlb.[RebuiltStockNum] = rbm.[RebuiltStockNum]
        //                        INNER JOIN [SBCES].[ListOfBuses] lb ON rlb.ListId = lb.ListId
        //                        left join [SBCES].[EmployeeLabour] el ON el.[LinkNumber] = rbm.[RebuiltStockNum]
        //                        JOIN SBCES.EmplClass EC ON EL.LabourDefn = UPPER(EC.LabourDefn)
        //                        JOIN SBCES.EmployeeSalaries ES ON EC.WageGroup = ES.WageGroup
        //                        ";

        //        var rbParts = _dbConnection.Query<RebuiltPartsViewModel, ListOfBusesModel, LabourDetailsRebuiltPartsViewModel, RebuiltPartsViewModel>(
        //            query,
        //            (rbPart, vehicle, labourDetail) =>
        //            {
        //                rbPart.VehicleSeries.Add(vehicle);
        //                if (labourDetail != null)
        //                {
        //                    rbPart.LabourDetailsRebuiltParts.Add(labourDetail);
        //                }
        //                return rbPart;
        //            },
        //            splitOn: "ListId,LinkNumber"
        //        ).GroupBy(rbPart => rbPart.RbMasterlistId).Select(g =>
        //        {
        //            var groupedRbPart = g.First();
        //            groupedRbPart.VehicleSeries = g.SelectMany(rbPart => rbPart.VehicleSeries).Distinct().ToList();
        //            groupedRbPart.LabourDetailsRebuiltParts = g.SelectMany(rbPart => rbPart.LabourDetailsRebuiltParts).Distinct().ToList();
        //            return groupedRbPart;
        //        }).ToList();

        //        return rbParts;
        //    }
        //    catch (Exception ex)
        //    {
        //        return null;
        //    }
        //}


        [HttpPost]
        [AllowAnonymous]
        public async Task<IActionResult> AddRebuiltPartsView(
        [DataSourceRequest] DataSourceRequest request,
        [FromForm] RebuiltPartsViewModel rebuiltPartsViewModel,
        [FromForm] string listOfBusIds) // Add this parameter to capture the MultiSelect values
        {
            try
            {
                if (rebuiltPartsViewModel == null)
                {
                    return BadRequest("Invalid data.");
                }

                // Parse the comma-separated string of selected bus IDs
                if (!string.IsNullOrEmpty(listOfBusIds))
                {
                    rebuiltPartsViewModel.ListOfBusIds = listOfBusIds
                        .Split(',')
                        .Select(id => int.TryParse(id, out var parsedId) ? parsedId : (int?)null)
                        .ToList();
                }

                // Ensure ListOfBus is initialized (if needed)
                rebuiltPartsViewModel.ListOfBus ??= new List<BusesModel>();

                // Insert the rebuilt part into the database
                var insertPartSql = @"
            INSERT INTO SBCES.RbMasterlist 
            (
                RebuiltStockNum, MmsStockCode, Keyword, JobNumber, CorePartNum, 
                DetailedDesc, CoreCharge, EstimatedCost, BuyNewCost, RemanCost, 
                ExternalCost, LastModifiedBy, DateEntered, IsActive
            )
            VALUES 
            (
                @RebuiltStockNum, @MmsStockCode, @Keyword, @JobNumber, @CorePartNum, 
                @DetailedDesc, @CoreCharge, @EstimatedCost, @BuyNewCost, @RemanCost, 
                @ExternalCost, @LastModifiedBy, GETDATE(), @IsActive
            )";

                await _dbConnection.ExecuteAsync(insertPartSql, new
                {
                    rebuiltPartsViewModel.RebuiltStockNum,
                    rebuiltPartsViewModel.MmsStockCode,
                    rebuiltPartsViewModel.Keyword,
                    rebuiltPartsViewModel.JobNumber,
                    rebuiltPartsViewModel.CorePartNum,
                    rebuiltPartsViewModel.DetailedDesc,
                    rebuiltPartsViewModel.CoreCharge,
                    rebuiltPartsViewModel.EstimatedCost,
                    rebuiltPartsViewModel.BuyNewCost,
                    rebuiltPartsViewModel.RemanCost,
                    ExternalCost = "", // Adjust as needed
                    LastModifiedBy = User.Identity.Name, // Or your logic
                    IsActive = rebuiltPartsViewModel.IsActive ? 1 : 0
                });

                // Insert associated buses
                if (rebuiltPartsViewModel.ListOfBusIds?.Any() == true)
                {
                    var insertBusesSql = @"
                INSERT INTO SBCES.RbListOfBuses (RebuiltStockNum, ListId)
                VALUES (@RebuiltStockNum, @ListId)";

                    foreach (var listId in rebuiltPartsViewModel.ListOfBusIds.Where(id => id.HasValue))
                    {
                        await _dbConnection.ExecuteAsync(insertBusesSql, new
                        {
                            rebuiltPartsViewModel.RebuiltStockNum,
                            ListId = listId.Value
                        });
                    }
                }

                return Json(new { success = true });
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }


        private async Task<int> AddRebuiltPartAsync(RebuiltPartsViewModel rebuiltPartsViewModel)
        {

            // Start a transaction
            _dbConnection.Open();
            using (var transaction = _dbConnection.BeginTransaction())
            {
                try
                {
                    // Commit the transaction
                    transaction.Commit();
                    return 0;
                }
                catch (Exception ex)
                {
                    // Rollback the transaction in case of any error
                    transaction.Rollback();
                    // Handle or log the exception
                    throw new Exception("Failed to add rebuilt part.", ex);
                }
            }
        }

        //[HttpPost]
        //public async Task<IActionResult> UpdateRebuiltPartsView([DataSourceRequest] DataSourceRequest request, RebuiltPartsViewModel rebuiltPartsViewModel)
        //{
        //    try
        //    {
        //        // var userId = await UpdateRebuiltPartsView(rebuiltPartsViewModel);
        //        // return RedirectToAction("Index");
        //        return Ok();
        //    }
        //    catch (Exception ex)
        //    {
        //        return StatusCode(500, "An error occurred while adding Rebuilt Part.");
        //    }
        //}

        [AllowAnonymous]
        public IActionResult LabourDetailsPartial([FromQuery] string rebuiltPartNum)
        {
            // Pass the rebuiltPartNum to the partial view
            ViewBag.PartNum = rebuiltPartNum;
            ViewBag.GridType = "RbGrid";
            var model = new List<LabourDetailsRebuiltPartsViewModel> { };
            return PartialView("_LabourDetailsRebuiltParts", model);
        }
        [AllowAnonymous]
        public IActionResult ScPartsUsedInRbParts([FromQuery] string rebuiltPartNum)
        {
            // Pass the rebuiltPartNum to the partial view
            ViewBag.PartNum = rebuiltPartNum;
            ViewBag.GridType = "RbGrid";
            var model = new List<BCES.Models.Parts.StockCodedPartsViewModel> { };

            return PartialView("_ScPartsUsedInRbParts", model);

        }

        [AllowAnonymous]
        public IActionResult LabourHourSummaryPartial([FromQuery] string rebuiltPartNum)
        {
            // Pass the rebuiltPartNum to the partial view
            ViewBag.PartNum = rebuiltPartNum;
            ViewBag.GridType = "RbGrid";
            var model = new List<BCES.Models.Parts.LabourDetailsRebuiltPartsViewModel> { };
            return PartialView("_LabourHourSummaryRbParts", model);
        }

        [AllowAnonymous]
        public IActionResult MaterialCostSummaryPartial([FromQuery] string rebuiltPartNum)
        {
            // Pass the rebuiltPartNum to the partial view
            ViewBag.PartNum = rebuiltPartNum;
            ViewBag.GridType = "RbGrid";
            var model = new List<BCES.Models.Parts.MaterialCostSummaryInRbViewModel> { };
            return PartialView("_MaterialCostSummaryinRbParts", model);
        }
        [AllowAnonymous]
        public IActionResult NscDetailsPartial([FromQuery] string rebuiltPartNum)
        {
            // Pass the rebuiltPartNum to the partial view
            ViewBag.PartNum = rebuiltPartNum;
            ViewBag.GridType = "RbGrid";
            var model = new List<BCES.Models.Parts.NscPartsUsedViewModel> { };

            return PartialView("_NscPartsUsedInRbParts", model);

        }
        [AllowAnonymous]
        public IActionResult RbDetailsPartial([FromQuery] string rebuiltPartNum)
        {
            // Pass the rebuiltPartNum to the partial view
            ViewBag.PartNum = rebuiltPartNum;
            ViewBag.GridType = "RbGrid";
            var model = new List<BCES.Models.Parts.RebuiltPartsViewModel> { };
            return PartialView("_RbPartsUsedInRbParts", model);
        }

        [AllowAnonymous]
        public IActionResult TotalCostPartial([FromQuery] string rebuiltPartNum)
        {
            // Pass the rebuiltPartNum to the partial view
            ViewBag.PartNum = rebuiltPartNum;
            ViewBag.GridType = "RbGrid";
            var model = new List<BCES.Models.Parts.TotalCostInRbModel> { };
            return PartialView("_TotalCostInRbParts", model);
        }

        [HttpPost]
        [AllowAnonymous]
        public IActionResult SaveDetails()
        {
            // Save logic here
            return Json(new { success = true, message = "Saved Details successfully." });
        }


        [HttpPost]
        [AllowAnonymous]
        public IActionResult CancelDetails(int rebuiltPartNum)
        {
            try
            {
                // Return a success response
                return Json(new { success = true, message = "Changes discarded successfully." });
            }
            catch (Exception ex)
            {

                return Json(new { success = false, message = "An error occurred while discarding changes. Please try again." });
            }
        }
                

        [HttpPost("ArchiveDetails")]
        [AllowAnonymous]
        public IActionResult ArchiveDetails([FromBody] RebuiltPartsViewModel rebuiltPartsViewModel)
        {
            try
            {

                // Return a success response
                return Json(new { success = true, message = "Archiving rebuilt part number: {RebuiltPartNum}", rebuiltPartsViewModel.RebuiltStockNum });
            }
            catch (Exception ex)
            {
                return Json(new { success = false, message = "An error occurred while archiving. Please try again." });
            }
        }
        [HttpPost]
        [AllowAnonymous]
        public async Task<IActionResult> SendEmail(string to, string subject, string body, string rebuiltPartNum)
        {
            try
            {
                // Resolve the ExportController from the service provider
                var exportController = _serviceProvider.GetRequiredService<ExportController>();

                // Generate the Excel file in memory by calling SaveToExcel
                var memoryStream = await exportController.SaveToExcel(rebuiltPartNum);


                // Send the email with the attached Excel file
                var message = new MimeMessage();
                message.From.Add(new MailboxAddress("Sandeep Kanao", "sandeep.kanao@ttc.ca"));
                message.To.Add(new MailboxAddress("Sandeep.Kanao@ttc.ca", to));
                message.Subject = subject;
                message.Body = new TextPart("plain") { Text = body };

                var attachment = new MimePart("application", "vnd.openxmlformats-officedocument.spreadsheetml.sheet")
                {
                    Content = new MimeContent((Stream)memoryStream),
                    ContentDisposition = new ContentDisposition(ContentDisposition.Attachment),
                    ContentTransferEncoding = ContentEncoding.Base64,
                    FileName = $"{rebuiltPartNum}_RebuiltParts_Estimate.xlsx"
                };

                var multipart = new Multipart("mixed");
                multipart.Add(message.Body);
                multipart.Add(attachment);
                message.Body = multipart;

                using (var client = new SmtpClient())
                {
                    await client.ConnectAsync("smtp.freesmtpservers.com", 25, SecureSocketOptions.StartTls);
                   // await client.AuthenticateAsync("sandeep.kanao@gmail.com", "Perf4you@");
                    await client.SendAsync(message);
                    await client.DisconnectAsync(true);
                }

                return Json(new { success = true });
            }
            catch (Exception ex)
            {
                // Log the exception 
                Console.WriteLine($"Error sending email: {ex.Message}");

                return Json(new { success = false, message = ex.Message });
            }
        }

        [AllowAnonymous]
        public IActionResult DownloadExcel(string filePath)
        {
            var fileBytes = System.IO.File.ReadAllBytes(filePath);
            return File(fileBytes, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", Path.GetFileName(filePath));
        }

    

    }
}
RebuiltPartsViewModel.cs :
using BCES.Models.Common;

namespace BCES.Models.Parts
{
    public class RebuiltPartsViewModel
    {
        public RebuiltPartsViewModel()
        {
            ListOfBus = new List<BusesModel>();
            ListOfBusIds = new List<int?>(); // Initialize here
        }

        public int RbMasterlistId {  get; set; }
        public string MmsStockCode { get; set; }
        public string DetailedDesc { get; set; }
        public string Keyword { get; set; }
        public string JobNumber { get; set; }
        public string RebuiltStockNum { get; set; }
        public string? CoreCharge { get; set; }
        public string? CorePartNum { get; set; }

       public int? Qty {  get; set; }
        public int? Percentage { get; set; }

        public string? ExternalCost { get; set; }
        public decimal? EstimatedCost { get; set; }
        public string? RemanCost { get; set; }
        public string? BuyNewCost { get; set; }
        public decimal? TotalCost { get; set; }

        public List<LabourDetailsRebuiltPartsViewModel> LabourDetailsRebuiltParts { get; set; } = [];

        // Full list of bus objects (for display)
        public List<BusesModel> ListOfBus { get; set; }

        // List of IDs for editor binding
        public List<int?> ListOfBusIds { get; set; }

        public string Description { get; set; }
               

        public string LastModifiedBy { get; set; }
        public string LastModifiedDate { get; set; }
        public string SopNumber { get; set; }
        
       
        public bool IsActive { get; set; }

        public string? MaterialsTotal { get; set; }
        public string? LabourTotal { get; set; }
        public string? TotalRebuiltPartCost { get; set; }
        public string? TotalCostTax { get; set; }
        public string? EnteredBy { get; set; }
        public string? DateEntered { get; set; } 


    }
}
VehicleSeriesEditor.cs :
@model List<int?> 

@(
Html.Kendo().MultiSelectFor(m => m)
    .HtmlAttributes(new { id = "ListOfBusIds" })
    .DataTextField("Description")
    .DataValueField("ListId")
    .Placeholder("Select vehicle series...")
    .Filter("contains")
    .DataSource(source =>
    {
        source.Read(read => read.Url(Url.Action("GetVehicleSeries", "RebuiltParts")).Type(HttpVerbs.Get));
    })
    //.Value(Model.Where(id => id.HasValue).Select(id => id.Value)) 
)
Index.cshtml :

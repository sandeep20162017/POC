You are asp.net  8.0 and Telerik ASp.net core UI expert. My application uses Telerik ASp.NET core grid, and uses inline edit. I need to restrict user to enter any special characters like (*&^%@!"'?/,:;{]{+=)(^%/) in a few of the columns.Suggest best practise  to implement  this (may be client template or global JS)? User should be notified immidialtly when these specail characters are entered (hopeffuuly not when user clicks on any botton. AJAX.
Example I need to call validation for specefic columns say for supplier number and supplier namebelow.
If you are implementing new post api, it will be saved in Controller/Common directory.
Pls suggest the changes. I prefer serverside logic.
Pls note these columns are also calling Autocomplete API.
If possible try to use AutocompleteEditor for this checks.
Index.cshtml :

@model IEnumerable<BCES.Models.Parts.NscPartsUsedViewModel>

@{
    ViewData["Title"] = "Non Stock Coded Parts";
}

 <h4>Non Stock Coded Parts</h4>

@(
Html.Kendo().Grid<BCES.Models.Parts.NscPartsUsedViewModel>()
                                .Name("NscPartsUsedGrid")
                                .Columns(columns =>
                            {
                                columns.Bound(p => p.NscPartsUsedId).Title("Part Id").Hidden(true); 
                                columns.Bound(p => p.OrigSuppNum).Title("Supplier Number").Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).EditorTemplateName("AutoCompleteEditor").HtmlAttributes(new { data_validate_special_chars = "true" });
                                columns.Bound(p => p.OrigSupplierName).Title("Supplier Name").Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).EditorTemplateName("AutoCompleteEditor");
                                columns.Bound(p => p.KeyWord).Title("Keyword").Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).EditorTemplateName("AutoCompleteEditor");
                                columns.Bound(p => p.Description).Title("Description").Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains))).EditorTemplateName("AutoCompleteEditor");
                                columns.Bound(p => p.OemPartCost).Title("OEM Part Cost").Filterable(ftb => ftb.Cell(cell => cell.Operator("gte"))).Format("{0:C2}").EditorTemplateName("Currency");
                                columns.Command(command => {
                                if(@ViewBag.RoleId == 1) {
                                        command.Edit().Text(" ").IconClass("k-icon k-i-edit").HtmlAttributes(new { title = "Edit" }); // Edit button with tooltip
                                }
                                if(@ViewBag.RoleId == 1) {
                               
                                        command.Destroy().Text(" ").IconClass("k-icon k-i-delete").HtmlAttributes(new { title = "Delete" }); // Edit button with tooltip
                                }
                                }).Width(200);
                            })
                    .ToolBar(toolbar =>
                    {
                        if (@ViewBag.RoleId == 1)
                        {
                            toolbar.Create();
                        }
                    })
                .Editable(editable => editable.Mode(GridEditMode.InLine).TemplateName("NscPartsAddUpdate"))
                
                .Pageable()
                .Sortable()
                .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
                .DataSource(dataSource => dataSource
                    .Ajax()
                    .Events(events => events
                    .Error("onDataSourceError")
                    .RequestEnd("onRequestEnd")
                     )
                    .Model(model =>
                    {
                        model.Id(u => u.NscPartsUsedId);
                        model.Field(c => c.NscPartsUsedId);
                                                                       
                    })
                   
                    .Read(read => read.Url(Url.Action("GetNscPartsUsedView", "NscPartsUsed")).Type(HttpVerbs.Get))
                    .Create(create => create.Url(Url.Action("CreateNscPartsUsed", "NscPartsUsed")).Type(HttpVerbs.Post))
                    .Update(update => update.Url(Url.Action("UpdateNscPartsUsed", "NscPartsUsed")).Type(HttpVerbs.Post))
                    .Destroy(delete => delete.Url(Url.Action("DeleteNscPartsUsed", "NscPartsUsed")).Type(HttpVerbs.Post))
                        
                   )
                
            )
<div id="notification"></div>
  @section Scripts {
    <script>
        function getAutoCompleteParams() {
            var input = $("input[data-role='autocomplete']:focus");
            return {
                columnName: input.attr("name"),
                searchText: input.val() || "" // Handle empty search text
            };
        }
    </script>
    
        @* notification - add following JS, add div, add in grid .Error("onDataSourceError"),  .RequestEnd("onRequestEnd"), change contoller action to return json *@
     <script>
            // Initialize notification FIRST
            var notification = $("#notification").kendoNotification({
                position: {
                pinned: true,
            top: 50,
            right: 30
                    },
            autoHideAfter: 4000,
            stacking: "down"
                }).data("kendoNotification");

            // Error handler
            function onDataSourceError(e) {
                let errorMessage = "Operation failed: ";

            if (e.errorThrown) {
                errorMessage += e.errorThrown;
                    } else if (e.xhr && e.xhr.responseText) {
                errorMessage += e.xhr.responseText;
                    }

            notification.error(errorMessage);
                }

            // Success handler
            function onRequestEnd(e) {
                    if (e.type === "create") {
                notification.success("Record created successfully");
                    } else if (e.type === "update") {
                notification.success("Record updated successfully");
                    } else if (e.type === "destroy") {
                notification.success("Record deleted successfully");
                    }
                }
    </script>


     

       
  }

AutoCompleteEditor.cshtml :
@model object

@{
    var fieldName = ViewData.TemplateInfo.GetFullHtmlFieldName("");
}

@(Html.Kendo().AutoComplete()
    .Name(fieldName)
    .DataTextField("Text") // Changed from "this" to "Text"
    .Filter("contains")
    .Placeholder("Type to search...")
    .HtmlAttributes(new Dictionary<string, object>
    {
        { "name", fieldName },
        { "data-role", "autocomplete" }
    })
    .DataSource(source =>
    {
        source.Read(read =>
        {
            read.Url(Url.Action("GetAutoCompleteData", "AutoComplete"))
                .Type(HttpVerbs.Get)
                .Data("getAutoCompleteParams");
        })
        .ServerFiltering(true);
    })
    .Template("#= Text #") // Explicit template to display data
)
AutoCompleteController.cs :
using Kendo.Mvc.Extensions;
using Kendo.Mvc.UI;
using BCES.Models.Parts;
using BCES.Controllers.Base;
using BCES.Data;
using System.Data;
using Dapper;
using Microsoft.AspNetCore.Mvc;


namespace BCES.Controllers.Common
{
    public class AutoCompleteController : BaseController
    {
        private readonly DapperContext _db;
        private readonly IDbConnection _dbConnection;
        private readonly IHttpContextAccessor _httpContextAccessor;


        public AutoCompleteController(DapperContext dapper, IHttpContextAccessor httpContextAccessor) : base(dapper, httpContextAccessor)
        {
            _db = dapper;
            _dbConnection = _db.CreateConnection();

            _httpContextAccessor = httpContextAccessor;
        }

        [HttpGet]
        public IActionResult GetAutoCompleteData(string columnName, string searchText)
        {
            // 1. Validate parameters
            if (string.IsNullOrEmpty(columnName))
                return BadRequest("Column name is required.");

            // 2. Column whitelist
            var columnMappings = new Dictionary<string, (string SqlColumn, string Table)>
            {
                //Admin Labour Tasks
                { "TaskDescription", ("TaskDescription", "[SBCES].[LabourTaskDescriptions]") },
                //NSC Parts 
                { "OrigSuppNum", ("OrigSupplierNum", "[SBCES].[NonStockCodedParts]") },
                { "OrigSupplierName", ("OrigSupplierName", "[SBCES].[NonStockCodedParts]") },
                { "Description", ("DetailedDesc", "[SBCES].[NonStockCodedParts]") },
                { "KeyWord", ("KeyWord", "[SBCES].[NonStockCodedParts]") },
                //RB Parts
                { "DetailedDesc", ("DetailedDesc", "[SBCES].[RbMasterlist]") },
                { "LabourDefn", ("LABOURDEFN", "[SBCES].[EMPLCLASS]") },
                { "CC", ("COSTCENTRE", "[SBCES].[COSTCENTRES]") },
                { "CostCentre", ("COSTCENTRE", "[SBCES].[COSTCENTRES]") },
                { "Task", ("TaskDescription", "[SBCES].[LabourTaskDescriptions]") },
               

                //{ "KeyWord", ("KeyWord", "[SBCES].[RbMasterlist]") }
            };

            if (!columnMappings.TryGetValue(columnName, out var mapping))
                return BadRequest("Invalid column name.");

            // 3. Parameterized query
            using (var connection = _dbConnection)
            {
                var sql = $@"
            SELECT DISTINCT {mapping.SqlColumn} AS Text
            FROM {mapping.Table} 
            WHERE {mapping.SqlColumn} LIKE @SearchText + '%'";

                var results = connection.Query<string>(sql, new { SearchText = searchText ?? "" });

                // Wrap results in objects with "Text" property
                var data = results.Select(x => new { Text = x }).ToList();
                return Json(data);
            }

        }



    }

}

NSCPartsUsedController.cs :
using Dapper;
using Microsoft.AspNetCore.Mvc;
using Dapper;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Threading.Tasks;
using Telerik.DataSource;
using Telerik.DataSource.Extensions;
using BCES.Models.Admin;
using Kendo.Mvc.UI;
using Kendo.Mvc.Extensions;
using DataSourceRequest = Kendo.Mvc.UI.DataSourceRequest;
using BCES.Data;
using Telerik.SvgIcons;
using Microsoft.AspNetCore.Http;
using Microsoft.EntityFrameworkCore.Metadata.Conventions;
using BCES.Controllers.Base;
using BCES.Models.Parts;
using BCES.Models.Common;
using Newtonsoft.Json.Linq;
using static System.Net.Mime.MediaTypeNames;
using Microsoft.AspNetCore.Authorization;

namespace BCES.Controllers.Parts
{

    //[Route("NscPartsUsed")]
    public class NscPartsUsedController : BaseController
    {
        private readonly DapperContext _db;
        private readonly IDbConnection _dbConnection;
        private readonly IHttpContextAccessor _httpContextAccessor;


        public NscPartsUsedController(DapperContext dapper, IHttpContextAccessor httpContextAccessor) : base(dapper, httpContextAccessor)
        {
            _db = dapper;
            _dbConnection = _db.CreateConnection();

            _httpContextAccessor = httpContextAccessor;
        }
        // GET: NscPartsUsed/Index
        [HttpGet("NscPartsUsedIndex")]
        [AllowAnonymous]
        public IActionResult NscPartsUsedIndex()
        {
          // return View();
           return View("~/Views/Parts/NonStockCodedParts/Index.cshtml");
        }

        // POST: NscPartsUsed/GetNscPartsUsedView
        [HttpGet]
        [AllowAnonymous]
        public async Task<ActionResult> GetNscPartsUsedView([DataSourceRequest] DataSourceRequest request)
        {
            // Fetch data for the grid
            var model = await GetNscPartsUsedData();
            return Json(model.ToDataSourceResult(request));
        }

        // POST: NscPartsUsed/CreateNscPartsUsed
       [HttpPost]
        [AllowAnonymous]
        public async Task<IActionResult> CreateNscPartsUsed([DataSourceRequest] DataSourceRequest request, [FromForm] NscPartsUsedViewModel nscPartsUsed)
        {
            //if (!ModelState.IsValid)
            //{
            //    return BadRequest(new
            //    {
            //        message = "Invalid data submitted",
            //        errors = ModelState.Values
            //            .SelectMany(v => v.Errors)
            //            .Select(e => e.ErrorMessage)
            //    });
            //}

            try
            {
                var insertQuery = String.Format(@"
                INSERT INTO SBCES.NonStockCodedParts (OrigSupplierNum, OrigSupplierName,OemPartCost, DetailedDesc, Keyword, LastModifiedDate)
                VALUES ('{0}', '{1}', {2}, '{3}', '{4}', '{5}')",
                    nscPartsUsed.OrigSuppNum,
                                  nscPartsUsed.OrigSupplierName,
                                  nscPartsUsed.OemPartCost,
                                  nscPartsUsed.Description,
                                   nscPartsUsed.KeyWord,
                                   DateTime.Now  
                     );

                
                await _dbConnection.ExecuteAsync(insertQuery, nscPartsUsed);
                return Json(new { success = true });
            }
            catch (Exception ex)
            {
                return StatusCode(500, "An error occurred while updating the Non Stock Coded Part.");
            }
            
        }

        
        [HttpPost]
        [AllowAnonymous]
        public async Task<IActionResult> UpdateNscPartsUsed([DataSourceRequest] DataSourceRequest request, [FromForm] NscPartsUsedViewModel nscPartsUsed)
        {
            try
            {
                //if (!ModelState.IsValid)
                //{
                //    return BadRequest(ModelState);
                //}
               
                string updateQuery = string.Format(@" UPDATE SBCES.NonStockCodedParts 
                   SET   
                    OrigSupplierNum = '{0}', 
                    OrigSupplierName = '{1}',
                    OemPartCost= {2},
                    DetailedDesc =  '{3}',
                    Keyword = '{4}'
                    
                WHERE 
                    Id = {5}", nscPartsUsed.OrigSuppNum, 
                              nscPartsUsed.OrigSupplierName, 
                              nscPartsUsed.OemPartCost,  
                              nscPartsUsed.Description, 
                              @nscPartsUsed.KeyWord, 
                              nscPartsUsed.NscPartsUsedId
                              );
                
               

                await _dbConnection.ExecuteAsync(updateQuery, nscPartsUsed);
                return Json(new { success = true });
            }
            catch (Exception ex)
            {
                return StatusCode(500, "An error occurred while updating the Non Stock Coded Part.");
            }
            
        }

        // DELETE: NscPartsUsed/DeleteNscPartsUsed/{id}
      //  [HttpDelete("{id}")]
        [HttpPost]
        [AllowAnonymous]
        public async Task<IActionResult> DeleteNscPartsUsed([DataSourceRequest] DataSourceRequest request, NscPartsUsedViewModel nscPartsUsed)
        {
            try
            {
                var deleteQuery = String.Format(@"
                DELETE FROM SCES.NscPartsUsed
                WHERE NscPartsUsedId  = {0}", nscPartsUsed.NscPartsUsedId);


                await _dbConnection.ExecuteAsync(deleteQuery, nscPartsUsed);
                return Json(new { success = true });
            }
            catch (Exception ex)
            {
                return StatusCode(500, "An error occurred while deleting the Non Stock Coded Part.");
            }
           
        }

        private async Task<IEnumerable<NscPartsUsedViewModel>> GetNscPartsUsedData()
        {
            try
            {
                var query = @"
                SELECT 
                    nspu.Id as NscPartsUsedId,
                    nspu.OrigSupplierNum as OrigSuppNum,
                    nspu.OrigSupplierName,
                    nspu.OemPartCost,                   
                    nspu.DetailedDesc as Description,
                    nspu.Keyword
                FROM 
                    SBCES.NonStockCodedParts nspu;";


                return await _dbConnection.QueryAsync<NscPartsUsedViewModel>(query);
            }
            catch (Exception ex)
            {
                return null;
            }
            
        }

    }
}


        
